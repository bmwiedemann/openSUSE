From 04c881ee81da1a9bb97b969de1ed5938a1209c3c Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Andr=C3=A9=20Offringa?= <offringa@gmail.com>
Date: Sun, 3 May 2020 17:06:23 +0200
Subject: [PATCH] Fix Fortran errors and warnings in lawson.f

---
 scimath_f/lawson.f | 385 ++++++++++++++++++++++++++-------------------
 1 file changed, 227 insertions(+), 158 deletions(-)

diff --git a/scimath_f/lawson.f b/scimath_f/lawson.f
index 5b27e75d7df..d26880cd4aa 100644
--- a/scimath_f/lawson.f
+++ b/scimath_f/lawson.f
@@ -23,7 +23,7 @@ SUBROUTINE HFTI (A,MDA,M,N,B,MDB,NB,TAU,KRANK,RNORM,H,G,IP)
       K = 0
       LDIAG = MIN0(M,N)
       IF (LDIAG.LE.0) GOTO 270
-        DO 80 J=1,LDIAG
+        DO J=1,LDIAG
           IF (J.EQ.1) GOTO 20
 C
 C     UPDATE SQUARED COLUMN LENGTHS AND FIND LMAX
@@ -39,12 +39,13 @@ SUBROUTINE HFTI (A,MDA,M,N,B,MDB,NB,TAU,KRANK,RNORM,H,G,IP)
 C     COMPUTE SQUARED COLUMN LENGTHS AND FIND LMAX
 C
    20     LMAX = J
-            DO 40 L = J,N
+            DO L = J,N
               H(L) = SZERO
-              DO 30 I = J,M
-   30           H(L) = H(L) + A(I,L)**2
+              DO I = J,M
+                H(L) = H(L) + A(I,L)**2
+              END DO
               IF (H(L).GT.H(LMAX)) LMAX = L
-   40       CONTINUE
+            END DO
           HMAX = H(LMAX)
 C
 C     LMAX HAS BEEN DETERMINED
@@ -54,22 +55,24 @@ SUBROUTINE HFTI (A,MDA,M,N,B,MDB,NB,TAU,KRANK,RNORM,H,G,IP)
    50     CONTINUE
           IP(J) = LMAX
           IF (IP(J).EQ.J) GOTO 70
-          DO 60 I = 1,M
+          DO I = 1,M
             TMP = A(I,J)
             A(I,J) = A(I,LMAX)
-   60       A(I,LMAX) = TMP
+            A(I,LMAX) = TMP
+          END DO
           H(LMAX) = H(J)
 C
 C     COMPUTE THE J-TH TRANSFORMATION AND APPLY IT TO A AND B.
 C
    70     CALL H12 (1,J,J+1,M,A(1,J),1,H(J),A(1,J+1),1,MDA,N-J)
-   80     CALL H12 (2,J,J+1,M,A(1,J),1,H(J),B,1,MDB,NB)
+          CALL H12 (2,J,J+1,M,A(1,J),1,H(J),B,1,MDB,NB)
+        END DO
 C
 C     DETERMINE THE PSEUDORANK, K, USING THE TOLERANCE, TAU.
 C
-          DO 90 J = 1,LDIAG
-            IF (ABS(A(J,J)).LE.TAU) GOTO 100
-   90     CONTINUE
+        DO J = 1,LDIAG
+          IF (ABS(A(J,J)).LE.TAU) GOTO 100
+        END DO
       K = LDIAG
       GOTO 110
   100 K = J - 1
@@ -78,28 +81,33 @@ SUBROUTINE HFTI (A,MDA,M,N,B,MDB,NB,TAU,KRANK,RNORM,H,G,IP)
 C     COMPUTE THE NORMS OF THE RESIDUAL VECTORS.
 C
       IF (NB.LE.0) GOTO 140
-        DO 130 JB = 1,NB
+        DO JB = 1,NB
           TMP = SZERO
           IF (KP1.GT.M) GOTO 130
-          DO 120 I = KP1,M
-  120       TMP = TMP + B(I,JB)**2
+          DO I = KP1,M
+            TMP = TMP + B(I,JB)**2
+          END DO
   130     RNORM(JB) = SQRT(TMP)
+        END DO
   140 CONTINUE
 C     SPECIAL FOR PSEUDORANK = 0
       IF (K.GT.0) GOTO 160
       IF (NB.LE.0) GOTO 270
-        DO 150 JB = 1,NB
-          DO 150 I = 1,N
-  150       B(I,JB) = SZERO
+        DO JB = 1,NB
+          DO I = 1,N
+            B(I,JB) = SZERO
+          END DO
+        END DO
       GOTO 270
 C
 C     IF THE PSEUDORANK IS LESS THAN N COMPUTE HOUSHOLDER
 C     DECOMPOSITION OF FIRST K ROWS.
 C
   160 IF (K.EQ.N) GOTO 180
-        DO 170 II = 1,K
+        DO II = 1,K
           I = KP1 - II
-  170     CALL H12 (1,I,KP1,N,A(I,1),MDA,G(I),A,MDA,1,I-1)
+          CALL H12 (1,I,KP1,N,A(I,1),MDA,G(I),A,MDA,1,I-1)
+        END DO
   180 CONTINUE
 C
 C
@@ -108,21 +116,25 @@ SUBROUTINE HFTI (A,MDA,M,N,B,MDB,NB,TAU,KRANK,RNORM,H,G,IP)
 C
 C     SOLVE THE K BY K TRIANGULAR SYSTEM
 C
-          DO 210 L = 1,K
+          DO L = 1,K
             SM = DZERO
             I = KP1 - L
             IF (I.EQ.K) GOTO 200
             IP1 = I + 1
-            DO 190 J = IP1,K
-  190         SM = SM + A(I,J)*DBLE(B(J,JB))
+            DO J = IP1,K
+              SM = SM + A(I,J)*DBLE(B(J,JB))
+            END DO
   200       SM1 = SM
-  210       B(I,JB) = (B(I,JB)-SM1)/A(I,I)
+            B(I,JB) = (B(I,JB)-SM1)/A(I,I)
+          END DO
 C
           IF (K.EQ.N) GOTO 240
-            DO 220 J = KP1,N
-  220         B(J,JB) = SZERO
-            DO 230 I = 1,K
-  230         CALL H12 (2,I,KP1,N,A(I,1),MDA,G(I),B(1,JB),1,MDB,1)
+            DO J = KP1,N
+              B(J,JB) = SZERO
+            END DO
+            DO I = 1,K
+              CALL H12 (2,I,KP1,N,A(I,1),MDA,G(I),B(1,JB),1,MDB,1)
+            END DO
 C
 C     RE-ORDER THE SOLUTION VECTOR TO COMPENSATE FOR THE
 C     COLUMN INTERCHANGES.
@@ -157,8 +169,9 @@ SUBROUTINE LDP (G,MDG,M,N,H,X,XNORM,W,INDEX,MODE)
       ZERO=0.
       ONE=1.
       IF (N.LE.0) GO TO 120
-          DO 10 J=1,N
-   10     X(J)=ZERO
+        DO J=1,N
+          X(J)=ZERO
+        END DO
       XNORM=ZERO
       IF (M.LE.0) GO TO 110
 C
@@ -173,17 +186,20 @@ SUBROUTINE LDP (G,MDG,M,N,H,X,XNORM,W,INDEX,MODE)
 C     COPY H**T INTO ROW N+1 OF E.
 C
       IW=0
-          DO 30 J=1,M
-              DO 20 I=1,N
+          DO J=1,M
+            DO I=1,N
               IW=IW+1
-   20         W(IW)=G(J,I)
+              W(IW)=G(J,I)
+            END DO
           IW=IW+1
-   30     W(IW)=H(J)
+          W(IW)=H(J)
+        END DO
       IF=IW+1
 C                                STORE N ZEROS FOLLOWED BY A ONE INTO F.
-          DO 40 I=1,N
+        DO I=1,N
           IW=IW+1
-   40     W(IW)=ZERO
+          W(IW)=ZERO
+        END DO
       W(IW+1)=ONE
 C
       NP1=N+1
@@ -203,23 +219,27 @@ SUBROUTINE LDP (G,MDG,M,N,H,X,XNORM,W,INDEX,MODE)
       IF (RNORM .LE. 0) GOTO 130
    50 FAC=ONE
       IW=IY-1
-          DO 60 I=1,M
+          DO I=1,M
           IW=IW+1
 C                               HERE WE ARE USING THE SOLUTION VECTOR Y.
-   60     FAC=FAC-H(I)*W(IW)
+          FAC=FAC-H(I)*W(IW)
+        END DO
 C
 C      IF (DIFF(ONE+FAC,ONE)) 130,130,70
       IF (DIFF(ONE+FAC,ONE) .LE. 0) GOTO 130
    70 FAC=ONE/FAC
-          DO 90 J=1,N
+          DO J=1,N
           IW=IY-1
-              DO 80 I=1,M
+            DO I=1,M
               IW=IW+1
 C                               HERE WE ARE USING THE SOLUTION VECTOR Y.
-   80         X(J)=X(J)+G(I,J)*W(IW)
-   90     X(J)=X(J)*FAC
-          DO 100 J=1,N
-  100     XNORM=XNORM+X(J)**2
+              X(J)=X(J)+G(I,J)*W(IW)
+            END DO
+            X(J)=X(J)*FAC
+          END DO
+          DO J=1,N
+            XNORM=XNORM+X(J)**2
+          END DO
       XNORM=SQRT(XNORM)
 C                             SUCCESSFUL RETURN.
   110 MODE=1
@@ -290,7 +310,7 @@ SUBROUTINE NNLS (A,MDA,M,N,B,X,RNORM,W,ZZ,INDEX,ITMAX,MODE)
       DIMENSION A(MDA,N), B(1), X(1), W(1), ZZ(1)
       INTEGER INDEX(1)
       REAL      A, B, X, RNORM, W, ZZ, ZERO, ONE, TWO, FACTOR, SM,
-     $   WMAX, ASAVE, UP, DUMMY, UNORM, ZTEST, ALPHA, T, CC, SS
+     $   WMAX, ASAVE, UP, DUMMY(1), UNORM, ZTEST, ALPHA, T, CC, SS
       DOUBLE PRECISION DSVCMP, DSVTIM
       INTEGER   MDA, M, N, MODE, ITER, I, J, L, IZ1, IZ2, NSETP, NPP1,
      $   IZ, ITMAX, IZMAX, JZ, NEXT, IP, II, JJ
@@ -310,9 +330,10 @@ SUBROUTINE NNLS (A,MDA,M,N,B,X,RNORM,W,ZZ,INDEX,ITMAX,MODE)
 C
 C                    INITIALIZE THE ARRAYS INDEX() AND X().
 C
-          DO 20 I=1,N
+        DO I=1,N
           X(I)=ZERO
-   20     INDEX(I)=I
+          INDEX(I)=I
+        END DO
 C
       IZ2=N
       IZ1=1
@@ -327,12 +348,14 @@ SUBROUTINE NNLS (A,MDA,M,N,B,X,RNORM,W,ZZ,INDEX,ITMAX,MODE)
 C
 C         COMPUTE COMPONENTS OF THE DUAL (NEGATIVE GRADIENT) VECTOR W().
 C
-          DO 50 IZ=IZ1,IZ2
+          DO IZ=IZ1,IZ2
           J=INDEX(IZ)
           SM=ZERO
-              DO 40 L=NPP1,M
-   40         SM=SM+A(L,J)*B(L)
-   50     W(J)=SM
+              DO L=NPP1,M
+                SM=SM+A(L,J)*B(L)
+              END DO
+          W(J)=SM
+          END DO
 C                                   FIND LARGEST POSITIVE W(J).
    60 WMAX=ZERO
           DO 70 IZ=IZ1,IZ2
@@ -358,8 +381,9 @@ SUBROUTINE NNLS (A,MDA,M,N,B,X,RNORM,W,ZZ,INDEX,ITMAX,MODE)
       CALL H12 (1,NPP1,NPP1+1,M,A(1,J),1,UP,DUMMY,1,1,0)
       UNORM=ZERO
       IF (NSETP.EQ.0) GO TO 100
-          DO 90 L=1,NSETP
-   90     UNORM=UNORM+A(L,J)**2
+          DO L=1,NSETP
+            UNORM=UNORM+A(L,J)**2
+          END DO
   100 UNORM=SQRT(UNORM)
 C      IF (DIFF(UNORM+ABS(A(NPP1,J))*FACTOR,UNORM)) 130,130,110
       IF (DIFF(UNORM+ABS(A(NPP1,J))*FACTOR,UNORM) .LE. 0) GOTO 130
@@ -367,8 +391,9 @@ SUBROUTINE NNLS (A,MDA,M,N,B,X,RNORM,W,ZZ,INDEX,ITMAX,MODE)
 C     COL J IS SUFFICIENTLY INDEPENDENT.  COPY B INTO ZZ, UPDATE ZZ AND
 C   > SOLVE FOR ZTEST ( = PROPOSED NEW VALUE FOR X(J) ).
 C
-  110     DO 120 L=1,M
-  120     ZZ(L)=B(L)
+  110     DO L=1,M
+            ZZ(L)=B(L)
+          END DO
       CALL H12 (2,NPP1,NPP1+1,M,A(1,J),1,UP,ZZ,1,1,1)
       ZTEST=ZZ(NPP1)/A(NPP1,J)
 C
@@ -390,8 +415,9 @@ SUBROUTINE NNLS (A,MDA,M,N,B,X,RNORM,W,ZZ,INDEX,ITMAX,MODE)
 C     TRANSFORMATIONS TO COLS IN NEW SET Z,  ZERO SUBDIAGONAL ELTS IN
 C     COL J,  SET W(J)=0.
 C
-  140     DO 150 L=1,M
-  150     B(L)=ZZ(L)
+  140     DO L=1,M
+            B(L)=ZZ(L)
+          END DO
 C
       INDEX(IZ)=INDEX(IZ1)
       INDEX(IZ1)=J
@@ -400,14 +426,16 @@ SUBROUTINE NNLS (A,MDA,M,N,B,X,RNORM,W,ZZ,INDEX,ITMAX,MODE)
       NPP1=NPP1+1
 C
       IF (IZ1.GT.IZ2) GO TO 170
-          DO 160 JZ=IZ1,IZ2
-          JJ=INDEX(JZ)
-  160     CALL H12 (2,NSETP,NPP1,M,A(1,J),1,UP,A(1,JJ),1,MDA,1)
+          DO JZ=IZ1,IZ2
+            JJ=INDEX(JZ)
+            CALL H12 (2,NSETP,NPP1,M,A(1,J),1,UP,A(1,JJ),1,MDA,1)
+          END DO
   170 CONTINUE
 C
       IF (NSETP.EQ.M) GO TO 190
-          DO 180 L=NPP1,M
-  180     A(L,J)=ZERO
+        DO L=NPP1,M
+          A(L,J)=ZERO
+        END DO
   190 CONTINUE
 C
       W(J)=ZERO
@@ -453,9 +481,10 @@ SUBROUTINE NNLS (A,MDA,M,N,B,X,RNORM,W,ZZ,INDEX,ITMAX,MODE)
 C          OTHERWISE USE ALPHA WHICH WILL BE BETWEEN 0. AND 1. TO
 C          INTERPOLATE BETWEEN THE OLD X AND THE NEW ZZ.
 C
-          DO 250 IP=1,NSETP
-          L=INDEX(IP)
-  250     X(L)=X(L)+ALPHA*(ZZ(IP)-X(L))
+          DO IP=1,NSETP
+            L=INDEX(IP)
+            X(L)=X(L)+ALPHA*(ZZ(IP)-X(L))
+          END DO
 C
 C        MODIFY A AND B AND THE INDEX ARRAYS TO MOVE COEFFICIENT I
 C        FROM SET P TO SET Z.
@@ -465,15 +494,16 @@ SUBROUTINE NNLS (A,MDA,M,N,B,X,RNORM,W,ZZ,INDEX,ITMAX,MODE)
 C
       IF (JJ.EQ.NSETP) GO TO 290
       JJ=JJ+1
-          DO 280 J=JJ,NSETP
+        DO J=JJ,NSETP
           II=INDEX(J)
           INDEX(J-1)=II
           CALL G1 (A(J-1,II),A(J,II),CC,SS,A(J-1,II))
           A(J,II)=ZERO
-              DO 270 L=1,N
-              IF (L.NE.II) CALL G2 (CC,SS,A(J-1,L),A(J,L))
-  270         CONTINUE
-  280     CALL G2 (CC,SS,B(J-1),B(J))
+          DO L=1,N
+            IF (L.NE.II) CALL G2 (CC,SS,A(J-1,L),A(J,L))
+          END DO
+          CALL G2 (CC,SS,B(J-1),B(J))
+        END DO
   290 NPP1=NSETP
       NSETP=NSETP-1
       IZ1=IZ1-1
@@ -494,8 +524,9 @@ SUBROUTINE NNLS (A,MDA,M,N,B,X,RNORM,W,ZZ,INDEX,ITMAX,MODE)
 C         COPY B( ) INTO ZZ( ).  THEN SOLVE AGAIN AND LOOP BACK.
 C
 
-          DO 310 I=1,M
-  310     ZZ(I)=B(I)
+          DO I=1,M
+            ZZ(I)=B(I)
+          END DO
 C      ASSIGN 320 TO NEXT
       NEXT = 2
       GO TO 400
@@ -503,9 +534,10 @@ SUBROUTINE NNLS (A,MDA,M,N,B,X,RNORM,W,ZZ,INDEX,ITMAX,MODE)
       GO TO 210
 C                      ******  END OF SECONDARY LOOP  ******
 C
-  330     DO 340 IP=1,NSETP
-          I=INDEX(IP)
-  340     X(I)=ZZ(IP)
+  330     DO IP=1,NSETP
+            I=INDEX(IP)
+            X(I)=ZZ(IP)
+          END DO
 C        ALL NEW COEFFS ARE POSITIVE.  LOOP BACK TO BEGINNING.
       GO TO 30
 C
@@ -516,24 +548,28 @@ SUBROUTINE NNLS (A,MDA,M,N,B,X,RNORM,W,ZZ,INDEX,ITMAX,MODE)
 C
   350 SM=ZERO
       IF (NPP1.GT.M) GO TO 370
-          DO 360 I=NPP1,M
-  360     SM=SM+B(I)**2
+          DO I=NPP1,M
+            SM=SM+B(I)**2
+          END DO
       GO TO 390
-  370     DO 380 J=1,N
-  380     W(J)=ZERO
+  370   DO J=1,N
+          W(J)=ZERO
+        END DO
   390 RNORM=SQRT(SM)
       RETURN
 C
 C     THE FOLLOWING BLOCK OF CODE IS USED AS AN INTERNAL SUBROUTINE
 C     TO SOLVE THE TRIANGULAR SYSTEM, PUTTING THE SOLUTION IN ZZ().
 C
-  400     DO 430 L=1,NSETP
-          IP=NSETP+1-L
-          IF (L.EQ.1) GO TO 420
-              DO 410 II=1,IP
-  410         ZZ(II)=ZZ(II)-A(II,JJ)*ZZ(IP+1)
-  420     JJ=INDEX(IP)
-  430     ZZ(IP)=ZZ(IP)/A(IP,JJ)
+  400     DO L=1,NSETP
+            IP=NSETP+1-L
+            IF (L.EQ.1) GO TO 420
+              DO II=1,IP
+                ZZ(II)=ZZ(II)-A(II,JJ)*ZZ(IP+1)
+              END DO
+  420       JJ=INDEX(IP)
+            ZZ(IP)=ZZ(IP)/A(IP,JJ)
+          END DO
 C      GO TO NEXT, (200,320)
       GOTO (200, 320), NEXT
   440 FORMAT (35H0 NNLS QUITTING ON ITERATION COUNT.)
@@ -576,15 +612,17 @@ SUBROUTINE H12 (MODE,LPIVOT,L1,M,U,IUE,UP,C,ICE,ICV,NCV)
       CL=ABS(U(1,LPIVOT))
       IF (MODE.EQ.2) GO TO 60
 C                            ****** CONSTRUCT THE TRANSFORMATION. ******
-          DO 10 J=L1,M
-   10     CL=AMAX1(ABS(U(1,J)),CL)
+          DO J=L1,M
+            CL=AMAX1(ABS(U(1,J)),CL)
+          END DO
 C      IF (CL) 130,130,20
       IF (CL .LE. 0) GOTO 130
 
    20 CLINV=ONE/CL
       SM=(DBLE(U(1,LPIVOT))*CLINV)**2
-          DO 30 J=L1,M
-   30     SM=SM+(DBLE(U(1,J))*CLINV)**2
+          DO J=L1,M
+            SM=SM+(DBLE(U(1,J))*CLINV)**2
+          END DO
 C                              CONVERT DBLE. PREC. SM TO SNGL. PREC. SM1
       SM1=SM
       CL=CL*SQRT(SM1)
@@ -612,16 +650,18 @@ SUBROUTINE H12 (MODE,LPIVOT,L1,M,U,IUE,UP,C,ICE,ICV,NCV)
           I3=I2+INCR
           I4=I3
           SM=C(I2)*DBLE(UP)
-              DO 90 I=L1,M
-              SM=SM+C(I3)*DBLE(U(1,I))
-   90         I3=I3+ICE
+              DO I=L1,M
+                SM=SM+C(I3)*DBLE(U(1,I))
+                I3=I3+ICE
+              END DO
 C          IF (SM) 100,120,100
           IF (SM .EQ. 0) GOTO 120
   100     SM=SM*B
           C(I2)=C(I2)+SM*DBLE(UP)
-              DO 110 I=L1,M
+            DO I=L1,M
               C(I4)=C(I4)+SM*DBLE(U(1,I))
-  110         I4=I4+ICE
+              I4=I4+ICE
+            END DO
   120     CONTINUE
   130 RETURN
       END
@@ -692,8 +732,9 @@ SUBROUTINE DLDP (G,MDG,M,N,H,X,XNORM,W,INDEX,MODE)
       ZERO=0.D0
       ONE=1.D0
       IF (N.LE.0) GO TO 120
-          DO 10 J=1,N
-   10     X(J)=ZERO
+        DO J=1,N
+          X(J)=ZERO
+        END DO
       XNORM=ZERO
       IF (M.LE.0) GO TO 110
 C
@@ -708,17 +749,20 @@ SUBROUTINE DLDP (G,MDG,M,N,H,X,XNORM,W,INDEX,MODE)
 C     COPY H**T INTO ROW N+1 OF E.
 C
       IW=0
-          DO 30 J=1,M
-              DO 20 I=1,N
+          DO J=1,M
+            DO I=1,N
               IW=IW+1
-   20         W(IW)=G(J,I)
-          IW=IW+1
-   30     W(IW)=H(J)
+              W(IW)=G(J,I)
+            END DO
+            IW=IW+1
+            W(IW)=H(J)
+          END DO
       IF=IW+1
 C                                STORE N ZEROS FOLLOWED BY A ONE INTO F.
-          DO 40 I=1,N
-          IW=IW+1
-   40     W(IW)=ZERO
+          DO I=1,N
+            IW=IW+1
+            W(IW)=ZERO
+          END DO
       W(IW+1)=ONE
 C
       NP1=N+1
@@ -738,23 +782,27 @@ SUBROUTINE DLDP (G,MDG,M,N,H,X,XNORM,W,INDEX,MODE)
       IF (RNORM .LE. 0) GOTO 130
    50 FAC=ONE
       IW=IY-1
-          DO 60 I=1,M
+        DO I=1,M
           IW=IW+1
 C                               HERE WE ARE USING THE SOLUTION VECTOR Y.
-   60     FAC=FAC-H(I)*W(IW)
+          FAC=FAC-H(I)*W(IW)
+        END DO
 C
 C      IF (DDIFF(ONE+FAC,ONE)) 130,130,70
       IF (DDIFF(ONE+FAC,ONE) .LE. 0) GOTO 130
    70 FAC=ONE/FAC
-          DO 90 J=1,N
-          IW=IY-1
-              DO 80 I=1,M
+          DO J=1,N
+            IW=IY-1
+            DO I=1,M
               IW=IW+1
 C                               HERE WE ARE USING THE SOLUTION VECTOR Y.
-   80         X(J)=X(J)+G(I,J)*W(IW)
-   90     X(J)=X(J)*FAC
-          DO 100 J=1,N
-  100     XNORM=XNORM+X(J)**2
+              X(J)=X(J)+G(I,J)*W(IW)
+            END DO
+            X(J)=X(J)*FAC
+          END DO
+          DO J=1,N
+            XNORM=XNORM+X(J)**2
+          END DO
       XNORM=SQRT(XNORM)
 C                             SUCCESSFUL RETURN.
   110 MODE=1
@@ -824,6 +872,7 @@ SUBROUTINE DLDP (G,MDG,M,N,H,X,XNORM,W,INDEX,MODE)
       SUBROUTINE DNNLS (A,MDA,M,N,B,X,RNORM,W,ZZ,INDEX,ITMAX,MODE)
       implicit double precision (a-h,o-z)
       DIMENSION A(MDA,N), B(1), X(1), W(1), ZZ(1)
+      DOUBLE PRECISION DUMMY(1)
       INTEGER INDEX(1)
       ZERO=0.D0
       ONE=1.D0
@@ -838,9 +887,10 @@ SUBROUTINE DNNLS (A,MDA,M,N,B,X,RNORM,W,ZZ,INDEX,ITMAX,MODE)
 C
 C                    INITIALIZE THE ARRAYS INDEX() AND X().
 C
-          DO 20 I=1,N
-          X(I)=ZERO
-   20     INDEX(I)=I
+          DO I=1,N
+            X(I)=ZERO
+            INDEX(I)=I
+          END DO
 C
       IZ2=N
       IZ1=1
@@ -855,20 +905,22 @@ SUBROUTINE DNNLS (A,MDA,M,N,B,X,RNORM,W,ZZ,INDEX,ITMAX,MODE)
 C
 C         COMPUTE COMPONENTS OF THE DUAL (NEGATIVE GRADIENT) VECTOR W().
 C
-          DO 50 IZ=IZ1,IZ2
+        DO IZ=IZ1,IZ2
           J=INDEX(IZ)
           SM=ZERO
-              DO 40 L=NPP1,M
-   40         SM=SM+A(L,J)*B(L)
-   50     W(J)=SM
+            DO L=NPP1,M
+              SM=SM+A(L,J)*B(L)
+            END DO
+          W(J)=SM
+        END DO
 C                                   FIND LARGEST POSITIVE W(J).
    60 WMAX=ZERO
-          DO 70 IZ=IZ1,IZ2
+        DO 70 IZ=IZ1,IZ2
           J=INDEX(IZ)
           IF (W(J).LE.WMAX) GO TO 70
           WMAX=W(J)
           IZMAX=IZ
-   70     CONTINUE
+   70   CONTINUE
 C
 C             IF WMAX .LE. 0. GO TO TERMINATION.
 C             THIS INDICATES SATISFACTION OF THE KUHN-TUCKER CONDITIONS.
@@ -886,8 +938,9 @@ SUBROUTINE DNNLS (A,MDA,M,N,B,X,RNORM,W,ZZ,INDEX,ITMAX,MODE)
       CALL DH12 (1,NPP1,NPP1+1,M,A(1,J),1,UP,DUMMY,1,1,0)
       UNORM=ZERO
       IF (NSETP.EQ.0) GO TO 100
-          DO 90 L=1,NSETP
-   90     UNORM=UNORM+A(L,J)**2
+        DO L=1,NSETP
+          UNORM=UNORM+A(L,J)**2
+        END DO
   100 UNORM=SQRT(UNORM)
 C      IF (DDIFF(UNORM+ABS(A(NPP1,J))*FACTOR,UNORM)) 130,130,110
       IF (DDIFF(UNORM+ABS(A(NPP1,J))*FACTOR,UNORM) .LE. 0) GOTO 130
@@ -895,8 +948,9 @@ SUBROUTINE DNNLS (A,MDA,M,N,B,X,RNORM,W,ZZ,INDEX,ITMAX,MODE)
 C     COL J IS SUFFICIENTLY INDEPENDENT.  COPY B INTO ZZ, UPDATE ZZ AND
 C   > SOLVE FOR ZTEST ( = PROPOSED NEW VALUE FOR X(J) ).
 C
-  110     DO 120 L=1,M
-  120     ZZ(L)=B(L)
+  110   DO L=1,M
+          ZZ(L)=B(L)
+        END DO
       CALL DH12 (2,NPP1,NPP1+1,M,A(1,J),1,UP,ZZ,1,1,1)
       ZTEST=ZZ(NPP1)/A(NPP1,J)
 C
@@ -918,8 +972,9 @@ SUBROUTINE DNNLS (A,MDA,M,N,B,X,RNORM,W,ZZ,INDEX,ITMAX,MODE)
 C     TRANSFORMATIONS TO COLS IN NEW SET Z,  ZERO SUBDIAGONAL ELTS IN
 C     COL J,  SET W(J)=0.
 C
-  140     DO 150 L=1,M
-  150     B(L)=ZZ(L)
+  140   DO L=1,M
+          B(L)=ZZ(L)
+        END DO
 C
       INDEX(IZ)=INDEX(IZ1)
       INDEX(IZ1)=J
@@ -928,14 +983,16 @@ SUBROUTINE DNNLS (A,MDA,M,N,B,X,RNORM,W,ZZ,INDEX,ITMAX,MODE)
       NPP1=NPP1+1
 C
       IF (IZ1.GT.IZ2) GO TO 170
-          DO 160 JZ=IZ1,IZ2
+        DO JZ=IZ1,IZ2
           JJ=INDEX(JZ)
-  160     CALL DH12 (2,NSETP,NPP1,M,A(1,J),1,UP,A(1,JJ),1,MDA,1)
+          CALL DH12 (2,NSETP,NPP1,M,A(1,J),1,UP,A(1,JJ),1,MDA,1)
+        END DO
   170 CONTINUE
 C
       IF (NSETP.EQ.M) GO TO 190
-          DO 180 L=NPP1,M
-  180     A(L,J)=ZERO
+        DO L=NPP1,M
+          A(L,J)=ZERO
+        END DO
   190 CONTINUE
 C
       W(J)=ZERO
@@ -981,9 +1038,10 @@ SUBROUTINE DNNLS (A,MDA,M,N,B,X,RNORM,W,ZZ,INDEX,ITMAX,MODE)
 C          OTHERWISE USE ALPHA WHICH WILL BE BETWEEN 0. AND 1. TO
 C          INTERPOLATE BETWEEN THE OLD X AND THE NEW ZZ.
 C
-          DO 250 IP=1,NSETP
+        DO IP=1,NSETP
           L=INDEX(IP)
-  250     X(L)=X(L)+ALPHA*(ZZ(IP)-X(L))
+          X(L)=X(L)+ALPHA*(ZZ(IP)-X(L))
+        END DO
 C
 C        MODIFY A AND B AND THE INDEX ARRAYS TO MOVE COEFFICIENT I
 C        FROM SET P TO SET Z.
@@ -993,15 +1051,16 @@ SUBROUTINE DNNLS (A,MDA,M,N,B,X,RNORM,W,ZZ,INDEX,ITMAX,MODE)
 C
       IF (JJ.EQ.NSETP) GO TO 290
       JJ=JJ+1
-          DO 280 J=JJ,NSETP
+        DO J=JJ,NSETP
           II=INDEX(J)
           INDEX(J-1)=II
           CALL DG1 (A(J-1,II),A(J,II),CC,SS,A(J-1,II))
           A(J,II)=ZERO
               DO 270 L=1,N
-              IF (L.NE.II) CALL DG2 (CC,SS,A(J-1,L),A(J,L))
+                IF (L.NE.II) CALL DG2 (CC,SS,A(J-1,L),A(J,L))
   270         CONTINUE
-  280     CALL DG2 (CC,SS,B(J-1),B(J))
+          CALL DG2 (CC,SS,B(J-1),B(J))
+        END DO
   290 NPP1=NSETP
       NSETP=NSETP-1
       IZ1=IZ1-1
@@ -1022,8 +1081,9 @@ SUBROUTINE DNNLS (A,MDA,M,N,B,X,RNORM,W,ZZ,INDEX,ITMAX,MODE)
 C         COPY B( ) INTO ZZ( ).  THEN SOLVE AGAIN AND LOOP BACK.
 C
 
-          DO 310 I=1,M
-  310     ZZ(I)=B(I)
+          DO I=1,M
+            ZZ(I)=B(I)
+          END DO
 C      ASSIGN 320 TO NEXT
       NEXT = 2
       GO TO 400
@@ -1031,9 +1091,10 @@ SUBROUTINE DNNLS (A,MDA,M,N,B,X,RNORM,W,ZZ,INDEX,ITMAX,MODE)
       GO TO 210
 C                      ******  END OF SECONDARY LOOP  ******
 C
-  330     DO 340 IP=1,NSETP
-          I=INDEX(IP)
-  340     X(I)=ZZ(IP)
+  330     DO IP=1,NSETP
+            I=INDEX(IP)
+            X(I)=ZZ(IP)
+          END DO
 C        ALL NEW COEFFS ARE POSITIVE.  LOOP BACK TO BEGINNING.
       GO TO 30
 C
@@ -1044,24 +1105,28 @@ SUBROUTINE DNNLS (A,MDA,M,N,B,X,RNORM,W,ZZ,INDEX,ITMAX,MODE)
 C
   350 SM=ZERO
       IF (NPP1.GT.M) GO TO 370
-          DO 360 I=NPP1,M
-  360     SM=SM+B(I)**2
+        DO I=NPP1,M
+          SM=SM+B(I)**2
+        END DO
       GO TO 390
-  370     DO 380 J=1,N
-  380     W(J)=ZERO
+  370   DO J=1,N
+          W(J)=ZERO
+        END DO
   390 RNORM=SQRT(SM)
       RETURN
 C
 C     THE FOLLOWING BLOCK OF CODE IS USED AS AN INTERNAL SUBROUTINE
 C     TO SOLVE THE TRIANGULAR SYSTEM, PUTTING THE SOLUTION IN ZZ().
 C
-  400     DO 430 L=1,NSETP
+  400   DO L=1,NSETP
           IP=NSETP+1-L
           IF (L.EQ.1) GO TO 420
-              DO 410 II=1,IP
-  410         ZZ(II)=ZZ(II)-A(II,JJ)*ZZ(IP+1)
+            DO II=1,IP
+              ZZ(II)=ZZ(II)-A(II,JJ)*ZZ(IP+1)
+            END DO
   420     JJ=INDEX(IP)
-  430     ZZ(IP)=ZZ(IP)/A(IP,JJ)
+          ZZ(IP)=ZZ(IP)/A(IP,JJ)
+        END DO
 C      GO TO NEXT, (200,320)
       GOTO (200, 320), NEXT
   440 FORMAT (35H0 NNLS QUITTING ON ITERATION COUNT.)
@@ -1105,14 +1170,16 @@ SUBROUTINE DH12 (MODE,LPIVOT,L1,M,U,IUE,UP,C,ICE,ICV,NCV)
       CL=ABS(U(1,LPIVOT))
       IF (MODE.EQ.2) GO TO 60
 C                            ****** CONSTRUCT THE TRANSFORMATION. ******
-          DO 10 J=L1,M
-   10     CL=DMAX1(ABS(U(1,J)),CL)
+        DO J=L1,M
+          CL=DMAX1(ABS(U(1,J)),CL)
+        END DO
 C      IF (CL) 130,130,20
       IF (CL .LE. 0) GOTO 130
    20 CLINV=ONE/CL
       SM=(DBLE(U(1,LPIVOT))*CLINV)**2
-          DO 30 J=L1,M
-   30     SM=SM+(DBLE(U(1,J))*CLINV)**2
+        DO J=L1,M
+          SM=SM+(DBLE(U(1,J))*CLINV)**2
+        END DO
 C                              CONVERT DBLE. PREC. SM TO SNGL. PREC. SM1
       SM1=SM
       CL=CL*SQRT(SM1)
@@ -1140,16 +1207,18 @@ SUBROUTINE DH12 (MODE,LPIVOT,L1,M,U,IUE,UP,C,ICE,ICV,NCV)
           I3=I2+INCR
           I4=I3
           SM=C(I2)*DBLE(UP)
-              DO 90 I=L1,M
+            DO I=L1,M
               SM=SM+C(I3)*DBLE(U(1,I))
-   90         I3=I3+ICE
+              I3=I3+ICE
+            END DO
 C          IF (SM) 100,120,100
           IF (SM .EQ. 0) GOTO 120
   100     SM=SM*B
           C(I2)=C(I2)+SM*DBLE(UP)
-              DO 110 I=L1,M
+            DO I=L1,M
               C(I4)=C(I4)+SM*DBLE(U(1,I))
-  110         I4=I4+ICE
+              I4=I4+ICE
+            END DO
   120     CONTINUE
   130 RETURN
       END
