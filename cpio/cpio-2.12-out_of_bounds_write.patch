* src/copyin.c (process_copy_in):  Make sure that file_hdr.c_name
has at least two bytes allocated.
* src/util.c (cpio_safer_name_suffix): Document that use of this
function requires to be careful.
---
 src/copyin.c | 2 ++
 src/util.c   | 5 ++++-
 2 files changed, 6 insertions(+), 1 deletion(-)

Index: cpio-2.12/src/copyin.c
===================================================================
--- cpio-2.12.orig/src/copyin.c
+++ cpio-2.12/src/copyin.c
@@ -1433,6 +1433,18 @@ process_copy_in ()
 	  break;
 	}
 
+      /* Fix for CVE-2016-2037 (bsc#963448) and resultant regression (bsc#1028410).
+         For tar and ustar archive formats, file_hdr.c_namesize is not defined and
+         file_hdr.c_name uses static memory. Therefore we can't rely on
+         file_hdr.c_namesize and we can't realloc memory for these archive types.
+         However the patch is still correct for CVE-2016-2037 (we have to be sure
+         that the allocated NAME buffer has a capacity at least 2 bytes to allow
+         us to store the "." string inside) as static char array for tar and ustar
+         has size 2 at least (see tar.c:stash_tar_filename()).
+      */
+      if (archive_format != arf_tar && archive_format != arf_ustar
+	  && file_hdr.c_namesize <= 1)
+	file_hdr.c_name = xrealloc(file_hdr.c_name, 2);
       cpio_safer_name_suffix (file_hdr.c_name, false, !no_abs_paths_flag,
 			      false);
       
Index: cpio-2.12/src/util.c
===================================================================
--- cpio-2.12.orig/src/util.c
+++ cpio-2.12/src/util.c
@@ -1460,7 +1460,10 @@ set_file_times (int fd,
 }
 
 /* Do we have to ignore absolute paths, and if so, does the filename
-   have an absolute path?  */
+   have an absolute path?
+   Before calling this function make sure that the allocated NAME buffer has
+   capacity at least 2 bytes to allow us to store the "." string inside.  */
+
 void
 cpio_safer_name_suffix (char *name, bool link_target, bool absolute_names,
 			bool strip_leading_dots)

