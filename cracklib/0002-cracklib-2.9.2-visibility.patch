Index: configure.ac
===================================================================
--- configure.ac.orig
+++ configure.ac
@@ -97,6 +97,45 @@ AM_CONDITIONAL(BUILD_PYTHON,[test "$buil
 dnl Handle local dict compiling properly
 AC_SUBST(CROSS_COMPILING, $cross_compiling)
 
+  dnl ************************************************************
+  dnl Enable hiding of internal symbols in library to reduce its size and
+  dnl speed dynamic linking of applications.  This currently is only supported
+  dnl on gcc >= 4.0 and SunPro C.
+  dnl
+  AC_MSG_CHECKING([whether to enable hidden symbols in the library])
+  AC_ARG_ENABLE(hidden-symbols,
+  AC_HELP_STRING([--enable-hidden-symbols],[Hide internal symbols in library])
+  AC_HELP_STRING([--disable-hidden-symbols],[Leave all symbols with default visibility in library]),
+  [ case "$enableval" in
+    no)
+         AC_MSG_RESULT(no)
+         ;;
+    *)
+         AC_MSG_CHECKING([whether $CC supports it])
+         if test "$GCC" = yes ; then
+           if $CC --help --verbose 2>&1 | grep fvisibility= > /dev/null ; then
+             AC_MSG_RESULT(yes)
+             AC_DEFINE(CRACKLIB_API, [extern __attribute__ ((visibility ("default")))], [to make a symbol visible])
+             CFLAGS="$CFLAGS -fvisibility=hidden"
+           else
+              AC_MSG_RESULT(no)
+            fi
+
+         else
+           dnl Test for SunPro cc
+           if $CC 2>&1 | grep flags >/dev/null && $CC -flags | grep xldscope= >/dev/null ; then
+             AC_MSG_RESULT(yes)
+             AC_DEFINE(CRACKLIB_API, [__global], [to make a symbol visible])
+             CFLAGS="$CFLAGS -xldscope=hidden"
+           else
+             AC_MSG_RESULT(no)
+           fi
+         fi
+         ;;
+    esac ],
+         AC_MSG_RESULT(no)
+  )
+
 AC_OUTPUT(util/Makefile lib/Makefile doc/Makefile python/Makefile Makefile \
 		python/setup.py \
 		po/Makefile.in m4/Makefile dicts/Makefile cracklib.spec)
Index: lib/crack.h
===================================================================
--- lib/crack.h.orig
+++ lib/crack.h
@@ -5,6 +5,10 @@
 extern "C" {
 #endif
 
+#ifndef CRACKLIB_API
+#define CRACKLIB_API extern
+#endif
+
 /* Pass these functions a password (pw) and a path to the
  * dictionaries (/usr/lib/cracklib_dict should be specified)
  * and it will either return a NULL string, meaning that the
@@ -18,13 +22,13 @@ extern "C" {
  * You must link with -lcrack
  */
 
-extern const char *FascistCheck(const char *pw, const char *dictpath);
-extern const char *FascistCheckUser(const char *pw, const char *dictpath,
+CRACKLIB_API const char *FascistCheck(const char *pw, const char *dictpath);
+CRACKLIB_API const char *FascistCheckUser(const char *pw, const char *dictpath,
 				    const char *user, const char *gecos);
 
 /* This function returns the compiled in value for DEFAULT_CRACKLIB_DICT.
  */
-extern const char *GetDefaultCracklibDict(void);
+CRACKLIB_API const char *GetDefaultCracklibDict(void);
 
 #ifdef __cplusplus
 };
Index: lib/packer.h
===================================================================
--- lib/packer.h.orig
+++ lib/packer.h
@@ -76,7 +76,7 @@ typedef struct
 #define PIH_MAGIC 0x70775631
 
 /* Internal routines */
-extern char *GetPW(PWDICT *pwp, uint32_t number);
+CRACKLIB_API char *GetPW(PWDICT *pwp, uint32_t number);
 
 #else
 
@@ -87,15 +87,15 @@ typedef struct {
 
 #endif
 
-extern PWDICT *PWOpen(const char *prefix, char *mode);
-extern int PWClose(PWDICT *pwp);
-extern unsigned int FindPW(PWDICT *pwp, char *string);
-extern int PutPW(PWDICT *pwp, char *string);
-extern int PMatch(char *control, char *string);
-extern char *Mangle(char *input, char *control);
-extern char Chop(char *string);
-extern char *Trim(char *string);
-extern char *FascistLook(PWDICT *pwp, char *instring);
+CRACKLIB_API PWDICT *PWOpen(const char *prefix, char *mode);
+CRACKLIB_API int PWClose(PWDICT *pwp);
+CRACKLIB_API unsigned int FindPW(PWDICT *pwp, char *string);
+CRACKLIB_API int PutPW(PWDICT *pwp, char *string);
+CRACKLIB_API int PMatch(char *control, char *string);
+CRACKLIB_API char *Mangle(char *input, char *control);
+CRACKLIB_API char Chop(char *string);
+CRACKLIB_API char *Trim(char *string);
+CRACKLIB_API char *FascistLook(PWDICT *pwp, char *instring);
 extern char *FascistLookUser(PWDICT *pwp, char *instring, const char *user, const char *gecos);
 extern char *FascistGecos(char *password, int uid);
 extern char *FascistGecosUser(char *password, const char *user, const char *gecos);
