From 800c393f89a94f49b01dff99f693cb13c5e28116 Mon Sep 17 00:00:00 2001
From: Tom de Vries <tdevries@suse.de>
Date: Mon, 28 Aug 2023 16:27:58 +0200
Subject: [PATCH 2/2] [gdb/symtab] Handle self-reference in
 inherit_abstract_dies

Building gdb with gcc 7.5.0 and -flto -O2 -flto-partition=one generates a
self-referencing DIE:
...
 <2><91dace>: Abbrev Number: 405 (DW_TAG_label)
    <91dad0>   DW_AT_abstract_origin: <0x91dace>
...

When encountering the self-reference DIE in inherit_abstract_dies we loop
following the abstract origin, effectively hanging gdb.

Fix this by handling self-referencing DIEs in the loop in
inherit_abstract_dies.

Tested on x86_64-linux.

Approved-By: Tom Tromey <tom@tromey.com>

PR symtab/30799
https://sourceware.org/bugzilla/show_bug.cgi?id=30799
---
 gdb/dwarf2/read.c                      |  7 +++++++
 gdb/testsuite/gdb.dwarf2/self-spec.exp | 16 +++++++++++++++-
 2 files changed, 22 insertions(+), 1 deletion(-)

diff --git a/gdb/dwarf2/read.c b/gdb/dwarf2/read.c
index 1be5f381432..970dd54c7a5 100644
--- a/gdb/dwarf2/read.c
+++ b/gdb/dwarf2/read.c
@@ -11938,8 +11938,15 @@ inherit_abstract_dies (struct die_info *die, struct dwarf2_cu *cu)
 	  if (attr == nullptr)
 	    break;
 
+	  die_info *prev_child_origin_die = child_origin_die;
 	  child_origin_die = follow_die_ref (child_origin_die, attr,
 					     &child_origin_cu);
+
+	  if (prev_child_origin_die == child_origin_die)
+	    {
+	      /* Handle DIE with self-reference.  */
+	      break;
+	    }
 	}
 
       /* If missing DW_AT_abstract_origin, try the corresponding child
diff --git a/gdb/testsuite/gdb.dwarf2/self-spec.exp b/gdb/testsuite/gdb.dwarf2/self-spec.exp
index 77e92549fd1..f04ff6da42e 100644
--- a/gdb/testsuite/gdb.dwarf2/self-spec.exp
+++ b/gdb/testsuite/gdb.dwarf2/self-spec.exp
@@ -14,7 +14,7 @@
 # along with this program.  If not, see <http://www.gnu.org/licenses/>.
 
 # Check that gdb doesn't hang or segfault on reading a DIE with a
-# specification reference to itself.
+# specification/abstract_origin reference to itself.
 
 load_lib dwarf.exp
 
@@ -29,11 +29,25 @@ set asm_file [standard_output_file $srcfile2]
 Dwarf::assemble $asm_file {
     cu {} {
 	compile_unit {{language @DW_LANG_C_plus_plus}} {
+	    # Check handling of self-referencing DIE.
 	    declare_labels c1
 	    c1: class_type {
 		{name c1}
 		{specification :$c1}
 	    }
+
+	    # Check handling of self-referencing child DIE.  Regression test
+	    # for PR30799.
+	    declare_labels f1 abstract_f1 f1_l
+	    abstract_f1: subprogram {}
+	    f1: subprogram {
+		{MACRO_AT_func {main}}
+		{abstract_origin :$abstract_f1}
+	    } {
+		f1_l: label {
+		    {abstract_origin :$f1_l}
+		}
+	    }
 	}
     }
 }
-- 
2.35.3

