Index: smart_open-7.0.1/smart_open/tests/test_smart_open.py
===================================================================
--- smart_open-7.0.1.orig/smart_open/tests/test_smart_open.py
+++ smart_open-7.0.1/smart_open/tests/test_smart_open.py
@@ -20,6 +20,7 @@ import tempfile
 import unittest
 from unittest import mock
 import warnings
+import sys
 
 import boto3
 import pytest
@@ -1795,6 +1796,8 @@ def test_s3_gzip_compress_sanity():
 )
 def test_s3_read_explicit(url, _compression):
     """Can we read using the explicitly specified compression?"""
+    if sys.version_info.minor == 12 and _compression == ".gz":
+        raise unittest.SkipTest
     initialize_bucket()
     with smart_open.open(url, 'rb', compression=_compression) as fin:
         assert fin.read() == _DECOMPRESSED_DATA
@@ -1811,6 +1814,8 @@ def test_s3_read_explicit(url, _compress
 )
 def test_s3_write_explicit(_compression, expected):
     """Can we write using the explicitly specified compression?"""
+    if sys.version_info.minor == 12 and _compression == ".gz":
+        raise unittest.SkipTest
     initialize_bucket()
 
     with smart_open.open("s3://bucket/key", "wb", compression=_compression) as fout:
@@ -1831,6 +1836,8 @@ def test_s3_write_explicit(_compression,
 )
 def test_s3_write_implicit(url, _compression, expected):
     """Can we determine the compression from the file extension?"""
+    if sys.version_info.minor == 12 and _compression == ".gz":
+        raise unittest.SkipTest
     initialize_bucket()
 
     with smart_open.open(url, "wb", compression=INFER_FROM_EXTENSION) as fout:
@@ -1851,6 +1858,8 @@ def test_s3_write_implicit(url, _compres
 )
 def test_s3_disable_compression(url, _compression, expected):
     """Can we handle the compression parameter when reading/writing?"""
+    if sys.version_info.minor == 12 and _compression == ".gz":
+        raise unittest.SkipTest
     initialize_bucket()
 
     with smart_open.open(url, "wb") as fout:
