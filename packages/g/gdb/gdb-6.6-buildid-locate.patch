From FEDORA_PATCHES Mon Sep 17 00:00:00 2001
From: Fedora GDB patches <invalid@email.com>
Date: Fri, 27 Oct 2017 21:07:50 +0200
Subject: gdb-6.6-buildid-locate.patch

;; New locating of the matching binaries from the pure core file (build-id).
;;=push+jan

diff --git a/gdb/build-id.c b/gdb/build-id.c
--- a/gdb/build-id.c
+++ b/gdb/build-id.c
@@ -23,9 +23,67 @@
 #include "gdbsupport/gdb_vecs.h"
 #include "symfile.h"
 #include "objfiles.h"
+#include <sys/stat.h>
+#include "elf-bfd.h"
+#include "elf/common.h"
+#include "elf/external.h"
+#include "elf/internal.h"
 #include "filenames.h"
+#include "gdb_bfd.h"
 #include "gdbcore.h"
+#include "cli/cli-cmds.h"
 #include "cli/cli-style.h"
+#include "inferior.h"
+#include "objfiles.h"
+#include "observable.h"
+#include "symfile.h"
+
+#define BUILD_ID_VERBOSE_NONE 0
+#define BUILD_ID_VERBOSE_FILENAMES 1
+#define BUILD_ID_VERBOSE_BINARY_PARSE 2
+static int build_id_verbose = BUILD_ID_VERBOSE_FILENAMES;
+static void
+show_build_id_verbose (struct ui_file *file, int from_tty,
+		       struct cmd_list_element *c, const char *value)
+{
+  gdb_printf (file, _("Verbosity level of the build-id locator is %s.\n"),
+	      value);
+}
+/* Locate NT_GNU_BUILD_ID and return its matching debug filename.
+   FIXME: NOTE decoding should be unified with the BFD core notes decoding.  */
+
+static struct bfd_build_id *
+build_id_buf_get (bfd *templ, gdb_byte *buf, bfd_size_type size)
+{
+  bfd_byte *p;
+
+  p = buf;
+  while (p < buf + size)
+    {
+      /* FIXME: bad alignment assumption.  */
+      Elf_External_Note *xnp = (Elf_External_Note *) p;
+      size_t namesz = H_GET_32 (templ, xnp->namesz);
+      size_t descsz = H_GET_32 (templ, xnp->descsz);
+      bfd_byte *descdata = (gdb_byte *) xnp->name + BFD_ALIGN (namesz, 4);
+
+      if (H_GET_32 (templ, xnp->type) == NT_GNU_BUILD_ID
+	  && namesz == sizeof "GNU"
+	  && memcmp (xnp->name, "GNU", sizeof "GNU") == 0)
+	{
+	  size_t sz = descsz;
+	  gdb_byte *data = (gdb_byte *) descdata;
+	  struct bfd_build_id *retval;
+
+	  retval = (struct bfd_build_id *) xmalloc (sizeof *retval - 1 + sz);
+	  retval->size = sz;
+	  memcpy (retval->data, data, sz);
+
+	  return retval;
+	}
+      p = descdata + BFD_ALIGN (descsz, 4);
+    }
+  return NULL;
+}
 
 /* See build-id.h.  */
 
@@ -49,6 +107,349 @@ build_id_bfd_get (bfd *abfd)
   return NULL;
 }
 
+/* Core files may have missing (corrupt) SHDR but PDHR is correct there.
+   bfd_elf_bfd_from_remote_memory () has too much overhead by
+   allocating/reading all the available ELF PT_LOADs.  */
+
+static struct bfd_build_id *
+build_id_phdr_get (bfd *templ, bfd_vma loadbase, unsigned e_phnum,
+		   Elf_Internal_Phdr *i_phdr)
+{
+  int i;
+  struct bfd_build_id *retval = NULL;
+
+  for (i = 0; i < e_phnum; i++)
+    if (i_phdr[i].p_type == PT_NOTE && i_phdr[i].p_filesz > 0)
+      {
+	Elf_Internal_Phdr *hdr = &i_phdr[i];
+	gdb_byte *buf;
+	int err;
+
+	buf = (gdb_byte *) xmalloc (hdr->p_filesz);
+	err = target_read_memory (loadbase + i_phdr[i].p_vaddr, buf,
+				  hdr->p_filesz);
+	if (err == 0)
+	  retval = build_id_buf_get (templ, buf, hdr->p_filesz);
+	else
+	  retval = NULL;
+	xfree (buf);
+	if (retval != NULL)
+	  break;
+      }
+  return retval;
+}
+
+/* First we validate the file by reading in the ELF header and checking
+   the magic number.  */
+
+static inline bfd_boolean
+elf_file_p (Elf64_External_Ehdr *x_ehdrp64)
+{
+  gdb_assert (sizeof (Elf64_External_Ehdr) >= sizeof (Elf32_External_Ehdr));
+  gdb_assert (offsetof (Elf64_External_Ehdr, e_ident)
+	      == offsetof (Elf32_External_Ehdr, e_ident));
+  gdb_assert (sizeof (((Elf64_External_Ehdr *) 0)->e_ident)
+	      == sizeof (((Elf32_External_Ehdr *) 0)->e_ident));
+
+  return ((x_ehdrp64->e_ident[EI_MAG0] == ELFMAG0)
+	  && (x_ehdrp64->e_ident[EI_MAG1] == ELFMAG1)
+	  && (x_ehdrp64->e_ident[EI_MAG2] == ELFMAG2)
+	  && (x_ehdrp64->e_ident[EI_MAG3] == ELFMAG3));
+}
+
+/* Translate an ELF file header in external format into an ELF file header in
+   internal format.  */
+
+#define H_GET_WORD(bfd, ptr) (is64 ? H_GET_64 (bfd, (ptr))		\
+				   : H_GET_32 (bfd, (ptr)))
+#define H_GET_SIGNED_WORD(bfd, ptr) (is64 ? H_GET_S64 (bfd, (ptr))	\
+					  : H_GET_S32 (bfd, (ptr)))
+
+static void
+elf_swap_ehdr_in (bfd *abfd,
+		  const Elf64_External_Ehdr *src64,
+		  Elf_Internal_Ehdr *dst)
+{
+  int is64 = bfd_get_arch_size (abfd) == 64;
+#define SRC(field) (is64 ? src64->field \
+			 : ((const Elf32_External_Ehdr *) src64)->field)
+
+  int signed_vma = get_elf_backend_data (abfd)->sign_extend_vma;
+  memcpy (dst->e_ident, SRC (e_ident), EI_NIDENT);
+  dst->e_type = H_GET_16 (abfd, SRC (e_type));
+  dst->e_machine = H_GET_16 (abfd, SRC (e_machine));
+  dst->e_version = H_GET_32 (abfd, SRC (e_version));
+  if (signed_vma)
+    dst->e_entry = H_GET_SIGNED_WORD (abfd, SRC (e_entry));
+  else
+    dst->e_entry = H_GET_WORD (abfd, SRC (e_entry));
+  dst->e_phoff = H_GET_WORD (abfd, SRC (e_phoff));
+  dst->e_shoff = H_GET_WORD (abfd, SRC (e_shoff));
+  dst->e_flags = H_GET_32 (abfd, SRC (e_flags));
+  dst->e_ehsize = H_GET_16 (abfd, SRC (e_ehsize));
+  dst->e_phentsize = H_GET_16 (abfd, SRC (e_phentsize));
+  dst->e_phnum = H_GET_16 (abfd, SRC (e_phnum));
+  dst->e_shentsize = H_GET_16 (abfd, SRC (e_shentsize));
+  dst->e_shnum = H_GET_16 (abfd, SRC (e_shnum));
+  dst->e_shstrndx = H_GET_16 (abfd, SRC (e_shstrndx));
+
+#undef SRC
+}
+
+/* Translate an ELF program header table entry in external format into an
+   ELF program header table entry in internal format.  */
+
+static void
+elf_swap_phdr_in (bfd *abfd,
+		  const Elf64_External_Phdr *src64,
+		  Elf_Internal_Phdr *dst)
+{
+  int is64 = bfd_get_arch_size (abfd) == 64;
+#define SRC(field) (is64 ? src64->field					\
+			 : ((const Elf32_External_Phdr *) src64)->field)
+
+  int signed_vma = get_elf_backend_data (abfd)->sign_extend_vma;
+
+  dst->p_type = H_GET_32 (abfd, SRC (p_type));
+  dst->p_flags = H_GET_32 (abfd, SRC (p_flags));
+  dst->p_offset = H_GET_WORD (abfd, SRC (p_offset));
+  if (signed_vma)
+    {
+      dst->p_vaddr = H_GET_SIGNED_WORD (abfd, SRC (p_vaddr));
+      dst->p_paddr = H_GET_SIGNED_WORD (abfd, SRC (p_paddr));
+    }
+  else
+    {
+      dst->p_vaddr = H_GET_WORD (abfd, SRC (p_vaddr));
+      dst->p_paddr = H_GET_WORD (abfd, SRC (p_paddr));
+    }
+  dst->p_filesz = H_GET_WORD (abfd, SRC (p_filesz));
+  dst->p_memsz = H_GET_WORD (abfd, SRC (p_memsz));
+  dst->p_align = H_GET_WORD (abfd, SRC (p_align));
+
+#undef SRC
+}
+
+#undef H_GET_SIGNED_WORD
+#undef H_GET_WORD
+
+static Elf_Internal_Phdr *
+elf_get_phdr (bfd *templ, bfd_vma ehdr_vma, unsigned *e_phnum_pointer,
+              bfd_vma *loadbase_pointer)
+{
+  /* sizeof (Elf64_External_Ehdr) >= sizeof (Elf32_External_Ehdr)  */
+  Elf64_External_Ehdr x_ehdr64;	/* Elf file header, external form */
+  Elf_Internal_Ehdr i_ehdr;	/* Elf file header, internal form */
+  bfd_size_type x_phdrs_size;
+  gdb_byte *x_phdrs_ptr;
+  Elf_Internal_Phdr *i_phdrs;
+  int err;
+  unsigned int i;
+  bfd_vma loadbase;
+  int loadbase_set;
+
+  gdb_assert (templ != NULL);
+  gdb_assert (sizeof (Elf64_External_Ehdr) >= sizeof (Elf32_External_Ehdr));
+
+  /* Read in the ELF header in external format.  */
+  err = target_read_memory (ehdr_vma, (bfd_byte *) &x_ehdr64, sizeof x_ehdr64);
+  if (err)
+    {
+      if (build_id_verbose >= BUILD_ID_VERBOSE_BINARY_PARSE)
+        warning (_("build-id: Error reading ELF header at address 0x%lx"),
+		 (unsigned long) ehdr_vma);
+      return NULL;
+    }
+
+  /* Now check to see if we have a valid ELF file, and one that BFD can
+     make use of.  The magic number must match, the address size ('class')
+     and byte-swapping must match our XVEC entry.  */
+
+  if (! elf_file_p (&x_ehdr64)
+      || x_ehdr64.e_ident[EI_VERSION] != EV_CURRENT
+      || !((bfd_get_arch_size (templ) == 64
+            && x_ehdr64.e_ident[EI_CLASS] == ELFCLASS64)
+           || (bfd_get_arch_size (templ) == 32
+	       && x_ehdr64.e_ident[EI_CLASS] == ELFCLASS32)))
+    {
+      if (build_id_verbose >= BUILD_ID_VERBOSE_BINARY_PARSE)
+        warning (_("build-id: Unrecognized ELF header at address 0x%lx"),
+		 (unsigned long) ehdr_vma);
+      return NULL;
+    }
+
+  /* Check that file's byte order matches xvec's */
+  switch (x_ehdr64.e_ident[EI_DATA])
+    {
+    case ELFDATA2MSB:		/* Big-endian */
+      if (! bfd_header_big_endian (templ))
+	{
+	  if (build_id_verbose >= BUILD_ID_VERBOSE_BINARY_PARSE)
+	    warning (_("build-id: Unrecognized "
+		       "big-endian ELF header at address 0x%lx"),
+		     (unsigned long) ehdr_vma);
+	  return NULL;
+	}
+      break;
+    case ELFDATA2LSB:		/* Little-endian */
+      if (! bfd_header_little_endian (templ))
+	{
+	  if (build_id_verbose >= BUILD_ID_VERBOSE_BINARY_PARSE)
+	    warning (_("build-id: Unrecognized "
+		       "little-endian ELF header at address 0x%lx"),
+		     (unsigned long) ehdr_vma);
+	  return NULL;
+	}
+      break;
+    case ELFDATANONE:		/* No data encoding specified */
+    default:			/* Unknown data encoding specified */
+      if (build_id_verbose >= BUILD_ID_VERBOSE_BINARY_PARSE)
+	warning (_("build-id: Unrecognized "
+		   "ELF header endianity at address 0x%lx"),
+		 (unsigned long) ehdr_vma);
+      return NULL;
+    }
+
+  elf_swap_ehdr_in (templ, &x_ehdr64, &i_ehdr);
+
+  /* The file header tells where to find the program headers.
+     These are what we use to actually choose what to read.  */
+
+  if (i_ehdr.e_phentsize != (bfd_get_arch_size (templ) == 64
+                             ? sizeof (Elf64_External_Phdr)
+			     : sizeof (Elf32_External_Phdr))
+      || i_ehdr.e_phnum == 0)
+    {
+      if (build_id_verbose >= BUILD_ID_VERBOSE_BINARY_PARSE)
+	warning (_("build-id: Invalid ELF program headers from the ELF header "
+		   "at address 0x%lx"), (unsigned long) ehdr_vma);
+      return NULL;
+    }
+
+  x_phdrs_size = (bfd_get_arch_size (templ) == 64 ? sizeof (Elf64_External_Phdr)
+						: sizeof (Elf32_External_Phdr));
+
+  i_phdrs = (Elf_Internal_Phdr *) xmalloc (i_ehdr.e_phnum * (sizeof *i_phdrs + x_phdrs_size));
+  x_phdrs_ptr = (gdb_byte *) &i_phdrs[i_ehdr.e_phnum];
+  err = target_read_memory (ehdr_vma + i_ehdr.e_phoff, (bfd_byte *) x_phdrs_ptr,
+			    i_ehdr.e_phnum * x_phdrs_size);
+  if (err)
+    {
+      free (i_phdrs);
+      if (build_id_verbose >= BUILD_ID_VERBOSE_BINARY_PARSE)
+        warning (_("build-id: Error reading "
+		   "ELF program headers at address 0x%lx"),
+		 (unsigned long) (ehdr_vma + i_ehdr.e_phoff));
+      return NULL;
+    }
+
+  loadbase = ehdr_vma;
+  loadbase_set = 0;
+  for (i = 0; i < i_ehdr.e_phnum; ++i)
+    {
+      elf_swap_phdr_in (templ, (Elf64_External_Phdr *)
+			       (x_phdrs_ptr + i * x_phdrs_size), &i_phdrs[i]);
+      /* IA-64 vDSO may have two mappings for one segment, where one mapping
+	 is executable only, and one is read only.  We must not use the
+	 executable one (PF_R is the first one, PF_X the second one).  */
+      if (i_phdrs[i].p_type == PT_LOAD && (i_phdrs[i].p_flags & PF_R))
+	{
+	  /* Only the first PT_LOAD segment indicates the file bias.
+	     Next segments may have P_VADDR arbitrarily higher.
+	     If the first segment has P_VADDR zero any next segment must not
+	     confuse us, the first one sets LOADBASE certainly enough.  */
+	  if (!loadbase_set && i_phdrs[i].p_offset == 0)
+	    {
+	      loadbase = ehdr_vma - i_phdrs[i].p_vaddr;
+	      loadbase_set = 1;
+	    }
+	}
+    }
+
+  if (build_id_verbose >= BUILD_ID_VERBOSE_BINARY_PARSE)
+    warning (_("build-id: Found ELF header at address 0x%lx, loadbase 0x%lx"),
+	     (unsigned long) ehdr_vma, (unsigned long) loadbase);
+
+  *e_phnum_pointer = i_ehdr.e_phnum;
+  *loadbase_pointer = loadbase;
+  return i_phdrs;
+}
+
+/* BUILD_ID_ADDR_GET gets ADDR located somewhere in the object.
+   Find the first section before ADDR containing an ELF header.
+   We rely on the fact the sections from multiple files do not mix.
+   FIXME: We should check ADDR is contained _inside_ the section with possibly
+   missing content (P_FILESZ < P_MEMSZ).  These omitted sections are currently
+   hidden by _BFD_ELF_MAKE_SECTION_FROM_PHDR.  */
+
+static CORE_ADDR build_id_addr;
+struct build_id_addr_sect
+  {
+    struct build_id_addr_sect *next;
+    asection *sect;
+  };
+static struct build_id_addr_sect *build_id_addr_sect;
+
+static void build_id_addr_candidate (bfd *abfd, asection *sect, void *obj)
+{
+  if (build_id_addr >= bfd_section_vma (sect))
+    {
+      struct build_id_addr_sect *candidate;
+
+      candidate = (struct build_id_addr_sect *) xmalloc (sizeof *candidate);
+      candidate->next = build_id_addr_sect;
+      build_id_addr_sect = candidate;
+      candidate->sect = sect;
+    }
+}
+
+struct bfd_build_id *
+build_id_addr_get (CORE_ADDR addr)
+{
+  struct build_id_addr_sect *candidate;
+  struct bfd_build_id *retval = NULL;
+  Elf_Internal_Phdr *i_phdr = NULL;
+  bfd_vma loadbase = 0;
+  unsigned e_phnum = 0;
+
+  if (current_program_space->core_bfd () == NULL)
+    return NULL;
+
+  build_id_addr = addr;
+  gdb_assert (build_id_addr_sect == NULL);
+  bfd_map_over_sections (current_program_space->core_bfd (),
+			 build_id_addr_candidate, NULL);
+
+  /* Sections are sorted in the high-to-low VMAs order.
+     Stop the search on the first ELF header we find.
+     Do not continue the search even if it does not contain NT_GNU_BUILD_ID.  */
+
+  for (candidate = build_id_addr_sect; candidate != NULL;
+       candidate = candidate->next)
+    {
+      i_phdr = elf_get_phdr (current_program_space->core_bfd (),
+			     bfd_section_vma (candidate->sect),
+			     &e_phnum, &loadbase);
+      if (i_phdr != NULL)
+	break;
+    }
+
+  if (i_phdr != NULL)
+    {
+      retval = build_id_phdr_get (current_program_space->core_bfd (), loadbase, e_phnum, i_phdr);
+      xfree (i_phdr);
+    }
+
+  while (build_id_addr_sect != NULL)
+    {
+      candidate = build_id_addr_sect;
+      build_id_addr_sect = candidate->next;
+      xfree (candidate);
+    }
+
+  return retval;
+}
+
 /* See build-id.h.  */
 
 int
@@ -73,63 +474,166 @@ build_id_verify (bfd *abfd, size_t check_len, const bfd_byte *check)
   return retval;
 }
 
+static char *
+link_resolve (const char *symlink, int level)
+{
+  char buf[PATH_MAX + 1], *retval;
+  gdb::unique_xmalloc_ptr<char> target;
+  ssize_t got;
+
+  if (level > 10)
+    return xstrdup (symlink);
+
+  got = readlink (symlink, buf, sizeof (buf));
+  if (got < 0 || got >= sizeof (buf))
+    return xstrdup (symlink);
+  buf[got] = '\0';
+
+  if (IS_ABSOLUTE_PATH (buf))
+    target = make_unique_xstrdup (buf);
+  else
+    {
+      const std::string dir (ldirname (symlink));
+
+      target = xstrprintf ("%s"
+#ifndef HAVE_DOS_BASED_FILE_SYSTEM
+			   "/"
+#else /* HAVE_DOS_BASED_FILE_SYSTEM */
+			   "\\"
+#endif /* HAVE_DOS_BASED_FILE_SYSTEM */
+			   "%s", dir.c_str(), buf);
+    }
+
+  retval = link_resolve (target.get (), level + 1);
+  return retval;
+}
+
 /* Helper for build_id_to_debug_bfd.  LINK is a path to a potential
    build-id-based separate debug file, potentially a symlink to the real file.
    If the file exists and matches BUILD_ID, return a BFD reference to it.  */
 
 static gdb_bfd_ref_ptr
-build_id_to_debug_bfd_1 (const std::string &link, size_t build_id_len,
-			 const bfd_byte *build_id)
+build_id_to_debug_bfd_1 (const std::string &orig_link, size_t build_id_len,
+			 const bfd_byte *build_id, char **link_return)
 {
+  gdb_bfd_ref_ptr ret_bfd = {};
+  std::string ret_link;
+
   if (separate_debug_file_debug)
     {
-      gdb_printf (gdb_stdlog, _("  Trying %s..."), link.c_str ());
-      gdb_flush (gdb_stdlog);
+      gdb_printf (gdb_stdlog, _("  Trying %s..."), orig_link.c_str ());
+      gdb_flush (gdb_stdout);
     }
 
-  /* lrealpath() is expensive even for the usually non-existent files.  */
-  gdb::unique_xmalloc_ptr<char> filename_holder;
-  const char *filename = nullptr;
-  if (is_target_filename (link))
-    filename = link.c_str ();
-  else if (access (link.c_str (), F_OK) == 0)
+  for (unsigned seqno = 0;; seqno++)
     {
-      filename_holder.reset (lrealpath (link.c_str ()));
-      filename = filename_holder.get ();
-    }
+      std::string link = orig_link;
 
-  if (filename == NULL)
-    {
-      if (separate_debug_file_debug)
-	gdb_printf (gdb_stdlog,
-		    _(" no, unable to compute real path\n"));
+      if (seqno > 0)
+	{
+	  /* There can be multiple build-id symlinks pointing to real files
+	     with the same build-id (such as hard links).  Some of the real
+	     files may not be installed.  */
 
-      return {};
-    }
+	  string_appendf (link, ".%u", seqno);
+	}
 
-  /* We expect to be silent on the non-existing files.  */
-  gdb_bfd_ref_ptr debug_bfd = gdb_bfd_open (filename, gnutarget);
+      ret_link = link;
 
-  if (debug_bfd == NULL)
-    {
-      if (separate_debug_file_debug)
-	gdb_printf (gdb_stdlog, _(" no, unable to open.\n"));
+      struct stat statbuf_trash;
+
+      /* `access' automatically dereferences LINK.  */
+      if (lstat (link.c_str (), &statbuf_trash) != 0)
+	{
+	  /* Stop increasing SEQNO.  */
+	  break;
+	}
+
+      /* lrealpath() is expensive even for the usually non-existent files.  */
+      gdb::unique_xmalloc_ptr<char> filename_holder;
+      const char *filename = nullptr;
+      if (startswith (link, TARGET_SYSROOT_PREFIX))
+	filename = link.c_str ();
+      else if (access (link.c_str (), F_OK) == 0)
+	{
+	  filename_holder.reset (lrealpath (link.c_str ()));
+	  filename = filename_holder.get ();
+	}
+
+      if (filename == NULL)
+	{
+	  if (separate_debug_file_debug)
+	    gdb_printf (gdb_stdlog,
+	                       _(" no, unable to compute real path\n"));
+
+	  continue;
+	}
+
+      /* We expect to be silent on the non-existing files.  */
+      gdb_bfd_ref_ptr debug_bfd = gdb_bfd_open (filename, gnutarget);
 
-      return {};
+      if (debug_bfd == NULL)
+	{
+	  if (separate_debug_file_debug)
+	    gdb_printf (gdb_stdlog, _(" no, unable to open.\n"));
+
+	  continue;
+	}
+
+      if (!build_id_verify (debug_bfd.get(), build_id_len, build_id))
+	{
+	  if (separate_debug_file_debug)
+	    gdb_printf (gdb_stdlog,
+	                _(" no, build-id does not match.\n"));
+
+	  continue;
+	}
+
+      ret_bfd = debug_bfd;
+      break;
     }
 
-  if (!build_id_verify (debug_bfd.get(), build_id_len, build_id))
+  std::string link_all;
+
+  if (ret_bfd != NULL)
     {
       if (separate_debug_file_debug)
-	gdb_printf (gdb_stdlog, _(" no, build-id does not match.\n"));
-
-      return {};
+	gdb_printf (gdb_stdlog, _(" yes!\n"));
+    }
+  else
+    {
+      /* If none of the real files is found report as missing file
+	 always the non-.%u-suffixed file.  */
+      std::string link0 = orig_link;
+
+      /* If the symlink has target request to install the target.
+	 BASE-debuginfo.rpm contains the symlink but BASE.rpm may be missing.
+	 https://bugzilla.redhat.com/show_bug.cgi?id=981154  */
+      std::string link0_resolved (link_resolve (link0.c_str (), 0));
+
+      if (link_all.empty ())
+	link_all = link0_resolved;
+      else
+	{
+	  /* Use whitespace instead of DIRNAME_SEPARATOR to be compatible with
+	     its possible use as an argument for installation command.  */
+	  link_all += " " + link0_resolved;
+	}
     }
 
-  if (separate_debug_file_debug)
-    gdb_printf (gdb_stdlog, _(" yes!\n"));
+  if (link_return != NULL)
+    {
+      if (ret_bfd != NULL)
+	{
+	  *link_return = xstrdup (ret_link.c_str ());
+	}
+      else
+	{
+	  *link_return = xstrdup (link_all.c_str ());
+	}
+    }
 
-  return debug_bfd;
+  return ret_bfd;
 }
 
 /* Common code for finding BFDs of a given build-id.  This function
@@ -138,7 +642,7 @@ build_id_to_debug_bfd_1 (const std::string &link, size_t build_id_len,
 
 static gdb_bfd_ref_ptr
 build_id_to_bfd_suffix (size_t build_id_len, const bfd_byte *build_id,
-			const char *suffix)
+			const char *suffix, char **link_return)
 {
   /* Keep backward compatibility so that DEBUG_FILE_DIRECTORY being "" will
      cause "/.build-id/..." lookups.  */
@@ -161,16 +665,17 @@ build_id_to_bfd_suffix (size_t build_id_len, const bfd_byte *build_id,
       if (size > 0)
 	{
 	  size--;
-	  string_appendf (link, "%02x/", (unsigned) *data++);
+	  string_appendf (link, "%02x", (unsigned) *data++);
 	}
-
+      if (size > 0)
+	link += "/";
       while (size-- > 0)
 	string_appendf (link, "%02x", (unsigned) *data++);
 
       link += suffix;
 
       gdb_bfd_ref_ptr debug_bfd
-	= build_id_to_debug_bfd_1 (link, build_id_len, build_id);
+	= build_id_to_debug_bfd_1 (link, build_id_len, build_id, link_return);
       if (debug_bfd != NULL)
 	return debug_bfd;
 
@@ -181,7 +686,7 @@ build_id_to_bfd_suffix (size_t build_id_len, const bfd_byte *build_id,
       if (!gdb_sysroot.empty ())
 	{
 	  link = gdb_sysroot + link;
-	  debug_bfd = build_id_to_debug_bfd_1 (link, build_id_len, build_id);
+	  debug_bfd = build_id_to_debug_bfd_1 (link, build_id_len, build_id, NULL);
 	  if (debug_bfd != NULL)
 	    return debug_bfd;
 	}
@@ -190,20 +695,178 @@ build_id_to_bfd_suffix (size_t build_id_len, const bfd_byte *build_id,
   return {};
 }
 
+char *
+build_id_to_filename (const struct bfd_build_id *build_id, char **link_return)
+{
+  gdb_bfd_ref_ptr abfd;
+  char *result;
+
+  abfd = build_id_to_exec_bfd (build_id->size, build_id->data, link_return);
+  if (abfd == NULL)
+    return NULL;
+
+  result = xstrdup (bfd_get_filename (abfd.get ()));
+  return result;
+}
+
+/* This MISSING_FILEPAIR_HASH tracker is used only for the duplicite messages
+     yum --enablerepo='*debug*' install ...
+   avoidance.  */
+
+struct missing_filepair
+  {
+    char *binary;
+    char *debug;
+    char data[1];
+  };
+
+static struct htab *missing_filepair_hash;
+static struct obstack missing_filepair_obstack;
+
+static void *
+missing_filepair_xcalloc (size_t nmemb, size_t nmemb_size)
+{
+  void *retval;
+  size_t size = nmemb * nmemb_size;
+
+  retval = obstack_alloc (&missing_filepair_obstack, size);
+  memset (retval, 0, size);
+  return retval;
+}
+
+static hashval_t
+missing_filepair_hash_func (const struct missing_filepair *elem)
+{
+  hashval_t retval = 0;
+
+  retval ^= htab_hash_string (elem->binary);
+  if (elem->debug != NULL)
+    retval ^= htab_hash_string (elem->debug);
+
+  return retval;
+}
+
+static int
+missing_filepair_eq (const struct missing_filepair *elem1,
+		       const struct missing_filepair *elem2)
+{
+  return strcmp (elem1->binary, elem2->binary) == 0
+         && ((elem1->debug == NULL) == (elem2->debug == NULL))
+         && (elem1->debug == NULL || strcmp (elem1->debug, elem2->debug) == 0);
+}
+
+static void
+missing_filepair_change (void)
+{
+  if (missing_filepair_hash != NULL)
+    {
+      obstack_free (&missing_filepair_obstack, NULL);
+      /* All their memory came just from missing_filepair_OBSTACK.  */
+      missing_filepair_hash = NULL;
+    }
+}
+
+static void
+debug_print_executable_changed (struct program_space *pspace, bool reload_p)
+{
+  missing_filepair_change ();
+}
+
+/* Notify user the file BINARY with (possibly NULL) associated separate debug
+   information file DEBUG is missing.  DEBUG may or may not be the build-id
+   file such as would be:
+     /usr/lib/debug/.build-id/dd/b1d2ce632721c47bb9e8679f369e2295ce71be.debug
+   */
+
+void
+debug_print_missing (const char *binary, const char *debug)
+{
+  size_t binary_len0 = strlen (binary) + 1;
+  size_t debug_len0 = debug ? strlen (debug) + 1 : 0;
+  struct missing_filepair missing_filepair_find;
+  struct missing_filepair *missing_filepair;
+  struct missing_filepair **slot;
+
+  if (build_id_verbose < BUILD_ID_VERBOSE_FILENAMES)
+    return;
+
+  if (missing_filepair_hash == NULL)
+    {
+      obstack_init (&missing_filepair_obstack);
+      missing_filepair_hash = htab_create_alloc (64,
+	(hashval_t (*) (const void *)) missing_filepair_hash_func,
+	(int (*) (const void *, const void *)) missing_filepair_eq, NULL,
+	missing_filepair_xcalloc, NULL);
+    }
+
+  /* Use MISSING_FILEPAIR_FIND first instead of calling obstack_alloc with
+     obstack_free in the case of a (rare) match.  The problem is ALLOC_F for
+     MISSING_FILEPAIR_HASH allocates from MISSING_FILEPAIR_OBSTACK maintenance
+     structures for MISSING_FILEPAIR_HASH.  Calling obstack_free would possibly
+     not to free only MISSING_FILEPAIR but also some such structures (allocated
+     during the htab_find_slot call).  */
+
+  missing_filepair_find.binary = (char *) binary;
+  missing_filepair_find.debug = (char *) debug;
+  slot = (struct missing_filepair **) htab_find_slot (missing_filepair_hash,
+						      &missing_filepair_find,
+						      INSERT);
+
+  /* While it may be still printed duplicitely with the missing debuginfo file
+   * it is due to once printing about the binary file build-id link and once
+   * about the .debug file build-id link as both the build-id symlinks are
+   * located in the debuginfo package.  */
+
+  if (*slot != NULL)
+    return;
+
+  missing_filepair = (struct missing_filepair *) obstack_alloc (&missing_filepair_obstack,
+								sizeof (*missing_filepair) - 1
+								+ binary_len0 + debug_len0);
+  missing_filepair->binary = missing_filepair->data;
+  memcpy (missing_filepair->binary, binary, binary_len0);
+  if (debug != NULL)
+    {
+      missing_filepair->debug = missing_filepair->binary + binary_len0;
+      memcpy (missing_filepair->debug, debug, debug_len0);
+    }
+  else
+    missing_filepair->debug = NULL;
+
+  *slot = missing_filepair;
+
+  /* We do not collect and flush these messages as each such message
+     already requires its own separate lines.  */
+
+  gdb_printf (gdb_stdlog,
+	      _("Missing separate debuginfo for %s.\n"), binary);
+  if (debug != NULL)
+    {
+      gdb_printf (gdb_stdlog, _("Try: %s %s\n"),
+#ifdef DNF_DEBUGINFO_INSTALL
+		  "dnf"
+#else
+		  "yum"
+#endif
+		  " --enablerepo='*debug*' install", debug);
+    }
+}
+
 /* See build-id.h.  */
 
 gdb_bfd_ref_ptr
 build_id_to_debug_bfd (size_t build_id_len, const bfd_byte *build_id)
 {
-  return build_id_to_bfd_suffix (build_id_len, build_id, ".debug");
+  return build_id_to_bfd_suffix (build_id_len, build_id, ".debug", nullptr);
 }
 
 /* See build-id.h.  */
 
 gdb_bfd_ref_ptr
-build_id_to_exec_bfd (size_t build_id_len, const bfd_byte *build_id)
+build_id_to_exec_bfd (size_t build_id_len, const bfd_byte *build_id,
+		      char **link_return)
 {
-  return build_id_to_bfd_suffix (build_id_len, build_id, "");
+  return build_id_to_bfd_suffix (build_id_len, build_id, "", link_return);
 }
 
 /* See build-id.h.  */
@@ -224,6 +887,7 @@ find_separate_debug_file_by_buildid (struct objfile *objfile,
 
       gdb_bfd_ref_ptr abfd (build_id_to_debug_bfd (build_id->size,
 						   build_id->data));
+
       /* Prevent looping on a stripped .debug file.  */
       if (abfd != NULL
 	  && filename_cmp (bfd_get_filename (abfd.get ()),
@@ -243,3 +907,22 @@ find_separate_debug_file_by_buildid (struct objfile *objfile,
 
   return std::string ();
 }
+
+void _initialize_build_id ();
+
+void
+_initialize_build_id ()
+{
+  add_setshow_zinteger_cmd ("build-id-verbose", no_class, &build_id_verbose,
+			    _("\
+Set debugging level of the build-id locator."), _("\
+Show debugging level of the build-id locator."), _("\
+Level 1 (default) enables printing the missing debug filenames,\n\
+level 2 also prints the parsing of binaries to find the identificators."),
+			    NULL,
+			    show_build_id_verbose,
+			    &setlist, &showlist);
+
+  gdb::observers::executable_changed.attach (debug_print_executable_changed,
+                                             "build-id");
+}
diff --git a/gdb/build-id.h b/gdb/build-id.h
--- a/gdb/build-id.h
+++ b/gdb/build-id.h
@@ -40,12 +40,16 @@ extern int build_id_verify (bfd *abfd,
 extern gdb_bfd_ref_ptr build_id_to_debug_bfd (size_t build_id_len,
 					      const bfd_byte *build_id);
 
+extern char *build_id_to_filename (const struct bfd_build_id *build_id,
+				   char **link_return);
+
 /* Find and open a BFD for an executable file given a build-id.  If no BFD
    can be found, return NULL.  The returned reference to the BFD must be
    released by the caller.  */
 
 extern gdb_bfd_ref_ptr build_id_to_exec_bfd (size_t build_id_len,
-					     const bfd_byte *build_id);
+					     const bfd_byte *build_id,
+					     char **link_return);
 
 /* Find the separate debug file for OBJFILE, by using the build-id
    associated with OBJFILE's BFD.  If successful, returns the file name for the
diff --git a/gdb/corelow.c b/gdb/corelow.c
--- a/gdb/corelow.c
+++ b/gdb/corelow.c
@@ -21,6 +21,9 @@
 #include <signal.h>
 #include <fcntl.h>
 #include "frame.h"
+#include "auxv.h"
+#include "build-id.h"
+#include "elf/common.h"
 #include "inferior.h"
 #include "infrun.h"
 #include "symtab.h"
@@ -383,6 +386,8 @@ add_to_thread_list (asection *asect, asection *reg_sect, inferior *inf)
     switch_to_thread (thr);			/* Yes, make it current.  */
 }
 
+static bool build_id_core_loads = true;
+
 /* Issue a message saying we have no core to debug, if FROM_TTY.  */
 
 static void
@@ -570,8 +575,10 @@ locate_exec_from_corefile_build_id (bfd *abfd, int from_tty)
   if (build_id == nullptr)
     return;
 
+  char *build_id_filename;
   gdb_bfd_ref_ptr execbfd
-    = build_id_to_exec_bfd (build_id->size, build_id->data);
+    = build_id_to_exec_bfd (build_id->size, build_id->data,
+			    &build_id_filename);
 
   if (execbfd == nullptr)
     {
@@ -599,7 +606,12 @@ locate_exec_from_corefile_build_id (bfd *abfd, int from_tty)
       exec_file_attach (bfd_get_filename (execbfd.get ()), from_tty);
       symbol_file_add_main (bfd_get_filename (execbfd.get ()),
 			    symfile_add_flag (from_tty ? SYMFILE_VERBOSE : 0));
+      if (current_program_space->symfile_object_file != NULL)
+	current_program_space->symfile_object_file->flags |=
+	  OBJF_BUILD_ID_CORE_LOADED;
     }
+  else
+    debug_print_missing (BUILD_ID_MAIN_EXECUTABLE_FILENAME, build_id_filename);
 }
 
 /* See gdbcore.h.  */
@@ -1524,4 +1536,11 @@ _initialize_corelow ()
 	   maintenance_print_core_file_backed_mappings,
 	   _("Print core file's file-backed mappings."),
 	   &maintenanceprintlist);
+
+  add_setshow_boolean_cmd ("build-id-core-loads", class_files,
+			   &build_id_core_loads, _("\
+Set whether CORE-FILE loads the build-id associated files automatically."), _("\
+Show whether CORE-FILE loads the build-id associated files automatically."),
+			   NULL, NULL, NULL,
+			   &setlist, &showlist);
 }
diff --git a/gdb/doc/gdb.texinfo b/gdb/doc/gdb.texinfo
--- a/gdb/doc/gdb.texinfo
+++ b/gdb/doc/gdb.texinfo
@@ -22487,6 +22487,27 @@ information files.
 
 @end table
 
+You can also adjust the current verbosity of the @dfn{build id} locating.
+
+@table @code
+
+@kindex set build-id-verbose
+@item set build-id-verbose 0
+No additional messages are printed.
+
+@item set build-id-verbose 1
+Missing separate debug filenames are printed.
+
+@item set build-id-verbose 2
+Missing separate debug filenames are printed and also all the parsing of the
+binaries to find their @dfn{build id} content is printed.
+
+@kindex show build-id-verbose
+@item show build-id-verbose
+Show the current verbosity value for the @dfn{build id} content locating.
+
+@end table
+
 @cindex @code{.gnu_debuglink} sections
 @cindex debug link sections
 A debug link is a special section of the executable file named
diff --git a/gdb/objfiles.h b/gdb/objfiles.h
--- a/gdb/objfiles.h
+++ b/gdb/objfiles.h
@@ -877,6 +877,10 @@ struct objfile
   bool object_format_has_copy_relocs = false;
 };
 
+/* This file was loaded according to the BUILD_ID_CORE_LOADS rules.  */
+
+#define OBJF_BUILD_ID_CORE_LOADED static_cast<enum objfile_flag>(1 << 12)
+
 /* A deleter for objfile.  */
 
 struct objfile_deleter
diff --git a/gdb/solib-svr4.c b/gdb/solib-svr4.c
--- a/gdb/solib-svr4.c
+++ b/gdb/solib-svr4.c
@@ -44,6 +44,7 @@
 #include "auxv.h"
 #include "gdb_bfd.h"
 #include "probe.h"
+#include "build-id.h"
 
 #include <map>
 
@@ -1262,6 +1263,46 @@ svr4_read_so_list (svr4_info *info, CORE_ADDR lm, CORE_ADDR prev_lm,
 	  continue;
 	}
 
+	{
+	  struct bfd_build_id *build_id;
+
+	  build_id = build_id_addr_get (li->l_ld);
+	  if (build_id != NULL)
+	    {
+	      char *bid_name, *build_id_filename;
+
+	      /* Missing the build-id matching separate debug info file
+		 would be handled while SO_NAME gets loaded.  */
+	      bid_name = build_id_to_filename (build_id, &build_id_filename);
+	      if (bid_name != NULL)
+		{
+		  name = make_unique_xstrdup (bid_name);
+		  xfree (bid_name);
+		}
+	      else
+		{
+		  debug_print_missing (name.get (), build_id_filename);
+
+		  /* In the case the main executable was found according to
+		     its build-id (from a core file) prevent loading
+		     a different build of a library with accidentally the
+		     same SO_NAME.
+
+		     It suppresses bogus backtraces (and prints "??" there
+		     instead) if the on-disk files no longer match the
+		     running program version.  */
+
+		  if (current_program_space->symfile_object_file != NULL
+		      && (current_program_space->symfile_object_file->flags
+			  & OBJF_BUILD_ID_CORE_LOADED) != 0)
+		    name = make_unique_xstrdup ("");
+		}
+
+	      xfree (build_id_filename);
+	      xfree (build_id);
+	    }
+	}
+
       /* If this entry has no name, or its name matches the name
 	 for the main executable, don't include it in the list.  */
       if (*name == '\0' || match_main (name.get ()))
diff --git a/gdb/symfile.h b/gdb/symfile.h
--- a/gdb/symfile.h
+++ b/gdb/symfile.h
@@ -363,6 +363,11 @@ void map_symbol_filenames (gdb::function_view<symbol_filename_ftype> fun,
    optional offset to apply to each section.  */
 extern void generic_load (const char *args, int from_tty);
 
+/* build-id support.  */
+extern struct bfd_build_id *build_id_addr_get (CORE_ADDR addr);
+extern void debug_print_missing (const char *binary, const char *debug);
+#define BUILD_ID_MAIN_EXECUTABLE_FILENAME _("the main executable file")
+
 /* From minidebug.c.  */
 
 extern gdb_bfd_ref_ptr find_separate_debug_file_in_section (struct objfile *);
diff --git a/gdb/testsuite/gdb.base/corefile.exp b/gdb/testsuite/gdb.base/corefile.exp
--- a/gdb/testsuite/gdb.base/corefile.exp
+++ b/gdb/testsuite/gdb.base/corefile.exp
@@ -347,3 +347,33 @@ gdb_test_multiple "core-file $corefile" $test {
 	pass $test
     }
 }
+
+
+# Test auto-loading of binary files through build-id from the core file.
+set buildid [build_id_debug_filename_get $binfile]
+set wholetest "binfile found by build-id"
+if {$buildid == ""} {
+    untested "$wholetest (binary has no build-id)"
+} else {
+    gdb_exit
+    gdb_start
+
+    regsub {\.debug$} $buildid {} buildid
+    set debugdir [standard_output_file ${testfile}-debugdir]
+    file delete -force -- $debugdir
+    file mkdir $debugdir/[file dirname $buildid]
+    file copy $binfile $debugdir/$buildid
+
+    set test "show debug-file-directory"
+    gdb_test_multiple $test $test {
+	-re "The directory where separate debug symbols are searched for is \"(.*)\"\\.\r\n$gdb_prompt $" {
+	    set debugdir_orig $expect_out(1,string)
+	    pass $test
+	}
+    }
+    gdb_test_no_output "set debug-file-directory $debugdir:$debugdir_orig" "set debug-file-directory"
+    gdb_test "show build-id-core-loads" {Whether CORE-FILE loads the build-id associated files automatically is on\.}
+    gdb_test "core-file $corefile" "\r\nProgram terminated with .*" "core-file without executable"
+    gdb_test "info files" "Local exec file:\r\n\[ \t\]*`[string_to_regexp $debugdir/$buildid]', file type .*"
+    pass $wholetest
+}
diff --git a/gdb/testsuite/gdb.base/gdbinit-history.exp b/gdb/testsuite/gdb.base/gdbinit-history.exp
--- a/gdb/testsuite/gdb.base/gdbinit-history.exp
+++ b/gdb/testsuite/gdb.base/gdbinit-history.exp
@@ -179,7 +179,8 @@ proc test_empty_history_filename { } {
     global env
     global gdb_prompt
 
-    set common_history [list "set height 0" "set width 0"]
+    set common_history [list "set height 0" "set width 0" \
+			    "set build-id-verbose 0"]
 
     set test_dir [standard_output_file history_test]
     remote_exec host "mkdir -p $test_dir"
diff --git a/gdb/testsuite/gdb.base/new-ui-pending-input.exp b/gdb/testsuite/gdb.base/new-ui-pending-input.exp
--- a/gdb/testsuite/gdb.base/new-ui-pending-input.exp
+++ b/gdb/testsuite/gdb.base/new-ui-pending-input.exp
@@ -60,6 +60,9 @@ proc test_command_line_new_ui_pending_input {} {
     set bpline [gdb_get_line_number "set breakpoint here"]
 
     set options ""
+    append options " -iex \"set height 0\""
+    append options " -iex \"set width 0\""
+    append options " -iex \"set build-id-verbose 0\""
     append options " -iex \"new-ui console $extra_tty_name\""
     append options " -ex \"b $bpline\""
     append options " -ex \"run\""
diff --git a/gdb/testsuite/lib/gdb.exp b/gdb/testsuite/lib/gdb.exp
--- a/gdb/testsuite/lib/gdb.exp
+++ b/gdb/testsuite/lib/gdb.exp
@@ -238,7 +238,8 @@ if ![info exists INTERNAL_GDBFLAGS] {
 		   "-nx" \
 		   "-q" \
 		   {-iex "set height 0"} \
-		   {-iex "set width 0"}]]
+		   {-iex "set width 0"} \
+		   {-iex "set build-id-verbose 0"}]]
 
     # If DEBUGINFOD_URLS is set, gdb will try to download sources and
     # debug info for f.i. system libraries.  Prevent this.
@@ -2493,6 +2494,17 @@ proc default_gdb_start { } {
 	}
     }
 
+    # Turn off the missing warnings as the testsuite does not expect it.
+    send_gdb "set build-id-verbose 0\n"
+    gdb_expect 10 {
+	-re "$gdb_prompt $" {
+	    verbose "Disabled the missing debug infos warnings." 2
+	}
+	timeout {
+	    warning "Could not disable the missing debug infos warnings.."
+	}
+    }
+
     gdb_debug_init
     return 0
 }
diff --git a/gdb/testsuite/lib/mi-support.exp b/gdb/testsuite/lib/mi-support.exp
--- a/gdb/testsuite/lib/mi-support.exp
+++ b/gdb/testsuite/lib/mi-support.exp
@@ -321,6 +321,16 @@ proc default_mi_gdb_start { { flags {} } } {
 	    warning "Couldn't set the width to 0."
 	}
     }
+    # Turn off the missing warnings as the testsuite does not expect it.
+    send_gdb "190-gdb-set build-id-verbose 0\n"
+    gdb_expect 10 {
+	-re ".*190-gdb-set build-id-verbose 0\r\n190\\\^done\r\n$mi_gdb_prompt$" {
+	    verbose "Disabled the missing debug infos warnings." 2
+	}
+	timeout {
+	    warning "Could not disable the missing debug infos warnings.."
+	}
+    }
 
     if { $separate_inferior_pty } {
 	mi_create_inferior_pty
