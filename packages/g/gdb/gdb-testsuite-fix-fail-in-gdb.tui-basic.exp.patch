[gdb/testsuite] Fix FAIL in gdb.tui/basic.exp

On openSUSE Leap 15.2 aarch64 I ran into:
...
FAIL: gdb.tui/basic.exp: check main is where we expect on the screen
...
while this is passing on x86_64.

On x86_64-linux we have at the initial screen dump for "list -q main":
...
 0 +-/home/vries/gdb_versions/devel/src/gdb/testsuite/gdb.tui/tui-layout.c--+
 1 |       15     You should have received a copy of the GNU General Public |
 2 |       16     along with this program.  If not, see <http://www.gnu.org/|
 3 |       17                                                               |
 4 |       18  int                                                          |
 5 |       19  main ()                                                      |
 6 |       20  {                                                            |
 7 |       21    return 0;                                                  |
 8 |       22  }                                                            |
 9 |       23                                                               |
...
but on aarch64:
...
 0 +-/home/tdevries/gdb/src/gdb/testsuite/gdb.tui/tui-layout.c--------------+
 1 |       16     along with this program.  If not, see <http://www.gnu.org/|
 2 |       17                                                               |
 3 |       18  int                                                          |
 4 |       19  main ()                                                      |
 5 |       20  {                                                            |
 6 |       21    return 0;                                                  |
 7 |       22  }                                                            |
 8 |       23                                                               |
 9 |       24                                                               |
...

The cause of the diffferent placement is that we have as line number for main
on x86_64:
...
$ gdb -q -batch outputs/gdb.tui/basic/basic -ex "info line main"
Line 20 of "tui-layout.c" starts at address 0x4004a7 <main> \
  and ends at 0x4004ab <main+4>.
...
and on aarch64 instead:
...
$ gdb -q -batch outputs/gdb.tui/basic/basic -ex "info line main"
Line 21 of "tui-layout.c" starts at address 0x4005f4 <main> \
  and ends at 0x4005f8 <main+4>.
...

Fix this by using a new source file main-one-line.c, that implements the
entire main function on a single line, in order to force the compiler to use
that line number.

Also try to do less hard-coding in the test-case.

Tested on x86_64-linux and aarch64-linux.

---
 gdb/testsuite/gdb.tui/basic.exp       | 46 ++++++++++++++++++++++++-----------
 gdb/testsuite/gdb.tui/main-one-line.c | 18 ++++++++++++++
 2 files changed, 50 insertions(+), 14 deletions(-)

diff --git a/gdb/testsuite/gdb.tui/basic.exp b/gdb/testsuite/gdb.tui/basic.exp
index 25a11b2b285..afc770f0073 100644
--- a/gdb/testsuite/gdb.tui/basic.exp
+++ b/gdb/testsuite/gdb.tui/basic.exp
@@ -17,7 +17,11 @@
 
 tuiterm_env
 
-standard_testfile tui-layout.c
+# Use main-one-line.c to get the line info at a predictable location without
+# resorting to a dwarf assembly test-case.
+standard_testfile main-one-line.c
+
+set main_line [gdb_get_line_number "int main"]
 
 if {[build_executable "failed to prepare" ${testfile} ${srcfile}] == -1} {
     return -1
@@ -34,7 +38,8 @@ gdb_assert {![string match "No Source Available" $text]} \
     "initial source listing"
 
 Term::command "list -q main"
-Term::check_contents "list -q main" "21 *return 0"
+set main_re "int main \\(\\) { return 0; }"
+Term::check_contents "list -q main" "$main_line *$main_re"
 
 # Get the first source line.
 set line [Term::get_line 1]
@@ -49,16 +54,28 @@ if {[Term::wait_for [string_to_regexp $line]] \
     fail "scroll up"
 }
 
-# Check the horizontal scrolling.  First confirm that 'main ()' is
-# where we expect it to be.  This relies on the current way we
-# position source code on the screen, which might change in the
-# future.  The important part of this test is detecting the left/right
-# scrolling, not which line main is actually on.
-set line_num 6
-set line [Term::get_line $line_num]
-gdb_assert {[regexp -- "19\[\\t \]+main \\(\\)" $line]} \
+# Get the actual screen line that main is on.
+set main_screen_line -1
+for { set i 1 } { $i <= $Term::_cols } { incr i } {
+    set line [Term::get_line $i]
+    if { [regexp -- "$main_line\[\\t \]+$main_re" $line] } {
+	set main_screen_line $i
+	break
+    }
+}
+
+# Confirm that 'main ()' is where we expect it to be.  This relies on the
+# current way we position source code on the screen, which might change in
+# the future.
+gdb_assert { $main_screen_line == 7 } \
     "check main is where we expect on the screen"
-set regexp "19\[\\t \]+ain \\(\\)"
+if { $main_screen_line == -1 } {
+    return 0
+}
+
+# Check the horizontal scrolling.
+set shifted_main_re [string range $main_re 1 end]
+set regexp "$main_line\[\\t \]+$shifted_main_re"
 # Send a right arrow.
 send_gdb "\033\[C"
 if {[Term::wait_for $regexp]} {
@@ -66,11 +83,11 @@ if {[Term::wait_for $regexp]} {
 } else {
     fail "scroll right"
 }
-set line [Term::get_line $line_num]
+set line [Term::get_line $main_screen_line]
 # Send a down arrow.
 send_gdb "\033\[B"
 if {[Term::wait_for $regexp] \
-	&& [Term::get_line [expr {$line_num - 1}]] == $line} {
+	&& [Term::get_line [expr {$main_screen_line - 1}]] == $line} {
     pass "scroll down"
 } else {
     fail "scroll down"
@@ -84,7 +101,8 @@ Term::check_contents "asm window shows main" "$hex <main>"
 Term::check_box "asm box" 0 0 80 15
 
 Term::command "layout split"
-Term::check_contents "split layout contents" "21 *return 0.*$hex <main>"
+Term::check_contents "split layout contents" \
+    "$main_line *$main_re.*$hex <main>"
 
 Term::check_box "source box in split layout" 0 0 80 7
 Term::check_box "asm box in split layout" 0 6 80 9
diff --git a/gdb/testsuite/gdb.tui/main-one-line.c b/gdb/testsuite/gdb.tui/main-one-line.c
new file mode 100644
index 00000000000..fb88c667637
--- /dev/null
+++ b/gdb/testsuite/gdb.tui/main-one-line.c
@@ -0,0 +1,18 @@
+/* This testcase is part of GDB, the GNU debugger.
+
+   Copyright 2021 Free Software Foundation, Inc.
+
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+int main () { return 0; }
