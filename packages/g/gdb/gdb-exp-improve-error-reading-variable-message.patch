[gdb/exp] Improve <error reading variable> message

When printing a variable x in a subroutine foo:
...
subroutine foo (x)
  integer(4) :: x (*)
  x(3) = 1
end subroutine foo
...
where x is an array with unknown bounds, we get:
...
$ gdb -q -batch outputs/gdb.fortran/array-no-bounds/array-no-bounds \
  -ex "break foo" \
  -ex run \
  -ex "print x"
Breakpoint 1 at 0x4005cf: file array-no-bounds.f90, line 18.

Breakpoint 1, foo (x=...) at array-no-bounds.f90:18
18        x(3) = 1
$1 = <error reading variable>
...

Improve the error message by printing the details of the error, such that we
have instead:
...
$1 = <error reading variable: failed to get range bounds>
...

This is a change in gdb/valprint.c, and grepping through the sources reveals
that this is a common pattern.

Tested on x86_64-linux.

---
 gdb/testsuite/gdb.fortran/array-no-bounds.exp | 44 +++++++++++++++++++++++++++
 gdb/testsuite/gdb.fortran/array-no-bounds.f90 | 30 ++++++++++++++++++
 gdb/valprint.c                                |  2 +-
 3 files changed, 75 insertions(+), 1 deletion(-)

diff --git a/gdb/testsuite/gdb.fortran/array-no-bounds.exp b/gdb/testsuite/gdb.fortran/array-no-bounds.exp
new file mode 100644
index 00000000000..a686232cb0e
--- /dev/null
+++ b/gdb/testsuite/gdb.fortran/array-no-bounds.exp
@@ -0,0 +1,44 @@
+# Copyright 2021 Free Software Foundation, Inc.
+
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 3 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+# This file is part of the gdb testsuite.  It contains test to ensure that
+# array bounds accept LONGEST.
+
+if { [skip_fortran_tests] } { return -1 }
+
+standard_testfile .f90
+load_lib fortran.exp
+
+if { [prepare_for_testing "failed to prepare" $testfile $srcfile \
+	 {f90 debug}] } {
+    return -1
+}
+
+if { ![fortran_runto_main] } {
+    perror "Could not run to main."
+    continue
+}
+
+# Go to foo.
+gdb_breakpoint foo
+gdb_continue_to_breakpoint "foo"
+
+# Print x, and check that we get a useful error message.
+gdb_test "p x" \
+    " = <error reading variable: failed to get range bounds>"
+
+# Print x using @ syntax.
+gdb_test "p x(1)@5" \
+    " = \\(0, 0, 0, 0, 0\\)"
diff --git a/gdb/testsuite/gdb.fortran/array-no-bounds.f90 b/gdb/testsuite/gdb.fortran/array-no-bounds.f90
new file mode 100644
index 00000000000..7b9ca998fff
--- /dev/null
+++ b/gdb/testsuite/gdb.fortran/array-no-bounds.f90
@@ -0,0 +1,30 @@
+! Copyright 2021 Free Software Foundation, Inc.
+
+! This program is free software; you can redistribute it and/or modify
+! it under the terms of the GNU General Public License as published by
+! the Free Software Foundation; either version 3 of the License, or
+! (at your option) any later version.
+!
+! This program is distributed in the hope that it will be useful,
+! but WITHOUT ANY WARRANTY; without even the implied warranty of
+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+! GNU General Public License for more details.
+!
+! You should have received a copy of the GNU General Public License
+! along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+subroutine foo (x)
+  integer(4) :: x (*)
+  x(3) = 1
+end subroutine foo
+
+program test
+  interface
+    subroutine foo (x)
+    integer(4) :: x (*)
+    end subroutine
+  end interface
+  integer(4) :: x (5)
+  x(:) = 0
+  call foo (x)
+end program
diff --git a/gdb/valprint.c b/gdb/valprint.c
index 324055da93f..05740c838ad 100644
--- a/gdb/valprint.c
+++ b/gdb/valprint.c
@@ -1050,7 +1050,7 @@ do_val_print (struct value *value, struct ui_file *stream, int recurse,
   catch (const gdb_exception_error &except)
     {
       fprintf_styled (stream, metadata_style.style (),
-		      _("<error reading variable>"));
+		      _("<error reading variable: %s>"), except.what ());
     }
 }
 
