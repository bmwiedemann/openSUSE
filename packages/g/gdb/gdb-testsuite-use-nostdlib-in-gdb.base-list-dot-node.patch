From 43be94acc8f9bbc0ff8da8c2b9fbaa56ee9b344e Mon Sep 17 00:00:00 2001
From: Tom de Vries <tdevries@suse.de>
Date: Tue, 4 Feb 2025 11:01:38 +0100
Subject: [PATCH 40/46] [gdb/testsuite] Use -nostdlib in
 gdb.base/list-dot-nodebug.exp

When running test-case gdb.base/list-dot-nodebug.exp with target board
cc-with-gnu-debuglink, I run into:
...
(gdb) list .^M
warning: 1      ../sysdeps/x86_64/crtn.S: No such file or directory^M
(gdb) FAIL: gdb.base/list-dot-nodebug.exp: debug=none: print before start
...

The problem is that the call to gdb_gnu_strip_debug in
gdb.base/list-dot-nodebug.exp has no effect, because the target board makes
sure that compilation delivers an executable that is already stripped, with a
.gnu_debuglink section linking to the debug info.

Fix this by using -nostdlib instead of static, which means the call to
gdb_gnu_strip_debug can be removed.

This also allows us to extend the test-case to excercise "list ." before
starting the inferior, for the debug=some scenario, which is currently
skipped:
...
	# We don't test "list ." before starting with some debug info
	# because GDB will choose the symtab that has debuginfo, and
	# print the copyright blurb.  This test isn't interested (yet?)
	# in checking if this default location choice is consistent.
...

While we're at it, make the effect of "list ." on the current source location
explicit using "info source" before and after "list .".

While we're at it, make sure when running with target board
cc-with-gdb-index or cc-with-debug-names, that the failure to compile the
debug=none variant due to:
...
Error while writing index ...: No debugging symbols
...
doesn't stop the test-case from running the debug=some variant.

Tested on x86_64-linux.
---
 gdb/testsuite/gdb.base/list-dot-nodebug.c   |  9 +++
 gdb/testsuite/gdb.base/list-dot-nodebug.exp | 69 +++++++++++++--------
 2 files changed, 52 insertions(+), 26 deletions(-)

diff --git a/gdb/testsuite/gdb.base/list-dot-nodebug.c b/gdb/testsuite/gdb.base/list-dot-nodebug.c
index b37c3561c41..5d2a1a32d82 100644
--- a/gdb/testsuite/gdb.base/list-dot-nodebug.c
+++ b/gdb/testsuite/gdb.base/list-dot-nodebug.c
@@ -31,3 +31,12 @@ main ()
   foo (&x);
   return 0;
 }
+
+void
+_start ()
+{
+  (void) main ();
+
+  while (1)
+    ;
+}
diff --git a/gdb/testsuite/gdb.base/list-dot-nodebug.exp b/gdb/testsuite/gdb.base/list-dot-nodebug.exp
index 107669de04d..e15e2bd58e1 100644
--- a/gdb/testsuite/gdb.base/list-dot-nodebug.exp
+++ b/gdb/testsuite/gdb.base/list-dot-nodebug.exp
@@ -19,51 +19,64 @@
 
 require !use_gdb_stub
 
-set linkflags [list additional_flags="-static"]
-
-if { ![gdb_can_simple_compile static-libc \
-	   {
-	       int main (void) { return 0; }
-	   } \
-	   executable $linkflags] } {
-    untested "Can't statically link"
-    return -1
-}
-
 standard_testfile .c -extra.c
 
-foreach_with_prefix debug {"none" "some"} {
+proc do_test { debug } {
+
+    set opts {}
+    lappend opts additional_flags=-nostdlib
 
     if {$debug == "some"} {
+	lappend opts debug
+
 	if {[prepare_for_testing_full "failed to prepare" \
-		[list ${testfile}-${debug} $linkflags \
-		    $srcfile [list nodebug] \
-		    $srcfile2 [list debug]]]} {
+		[list ${::testfile}-${debug} $opts \
+		    $::srcfile [list nodebug] \
+		    $::srcfile2 [list debug]]]} {
 	    return -1
 	}
 
-	# We don't test "list ." before starting with some debug info
-	# because GDB will choose the symtab that has debuginfo, and
-	# print the copyright blurb.  This test isn't interested (yet?)
-	# in checking if this default location choice is consistent.
+
+	with_test_prefix "before list" {
+	    gdb_test "info source" \
+		[string_to_regexp "No current source file."]
+	}
+
+	gdb_test "list ." \
+	    .*[string_to_regexp \
+		 "This testcase is part of GDB, the GNU debugger."].* \
+	    "print before start"
+
+	with_test_prefix "after list" {
+	    gdb_test "info source" \
+		.*[string_to_regexp $::srcfile2].*
+	}
+
     } else {
-	set executable ${testfile}-none
+	lappend opts nodebug
+
+	set executable ${::testfile}-none
 	if {[build_executable "failed to prepare" ${executable} \
-		[list $srcfile $srcfile2] $linkflags]} {
+		[list $::srcfile $::srcfile2] $opts]} {
 	    return -1
 	}
 
-	# Stripping is a backup in case the system has static libc debuginfo.
-	# We can continue the test even if it fails.
-	gdb_gnu_strip_debug [standard_output_file $executable] no-debuglink
-
 	clean_restart ${executable}
 
+	with_test_prefix "before list" {
+	    gdb_test "info source" \
+		[string_to_regexp "No current source file."]
+	}
+
 	gdb_test "list ." \
 	    "^Insufficient debug info for showing source lines at default location" \
 	    "print before start"
-    }
 
+	with_test_prefix "after list" {
+	    gdb_test "info source" \
+		[string_to_regexp "No current source file."]
+	}
+    }
 
     if { ![runto bar] } {
 	return -1
@@ -73,3 +86,7 @@ foreach_with_prefix debug {"none" "some"} {
 	"^Insufficient debug info for showing source lines at current PC \\($::hex\\)\\." \
 	"print after start"
 }
+
+foreach_with_prefix debug {"none" "some"} {
+    do_test $debug
+}
-- 
2.43.0

