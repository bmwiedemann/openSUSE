From 5148a3776d42fb47c56a501784b991438ebd26bf Mon Sep 17 00:00:00 2001
From: Joan Torres <joan.torres@suse.com>
Date: Mon, 31 Mar 2025 12:00:58 +0200
Subject: [PATCH 1/3] plugins: Leverage GApplication dbus registering

1. Drop connection/dbus_connection property on some managers
     GApplication already does that
2. Stop owning name of plugin
     GApplication already does that
3. Use dbus_register/dbus_unregister to register dbus objects
     This ensures no race conditions happen on dbus initialization

Closes: https://gitlab.gnome.org/GNOME/gnome-settings-daemon/-/issues/867
---
 plugins/color/gsd-color-manager.c             |  98 +++++-------
 .../housekeeping/gsd-housekeeping-manager.c   | 115 ++++++---------
 plugins/media-keys/gsd-media-keys-manager.c   |  93 ++++++------
 plugins/power/gsd-power-manager.c             |  80 +++++-----
 .../gsd-screensaver-proxy-manager.c           | 139 ++++++++----------
 plugins/wacom/gsd-wacom-manager.c             | 135 ++++++++---------
 plugins/xsettings/gsd-xsettings-manager.c     |  88 ++++++-----
 7 files changed, 355 insertions(+), 393 deletions(-)

diff --git a/plugins/color/gsd-color-manager.c b/plugins/color/gsd-color-manager.c
index 2e38c2bdc..24dd9513e 100644
--- a/plugins/color/gsd-color-manager.c
+++ b/plugins/color/gsd-color-manager.c
@@ -58,10 +58,7 @@ struct _GsdColorManager
         GApplication       parent;
 
         /* D-Bus */
-        guint              name_id;
         GDBusNodeInfo     *introspection_data;
-        GDBusConnection   *connection;
-        GCancellable      *bus_cancellable;
 
         GsdColorCalibrate *calibrate;
         GsdColorState     *state;
@@ -77,8 +74,13 @@ enum {
 static void     gsd_color_manager_class_init  (GsdColorManagerClass *klass);
 static void     gsd_color_manager_init        (GsdColorManager      *color_manager);
 static void     gsd_color_manager_finalize    (GObject             *object);
-
-static void     register_manager_dbus (GsdColorManager *manager);
+static gboolean gsd_color_manager_dbus_register (GApplication    *app,
+                                                 GDBusConnection *connection,
+                                                 const char      *object_path,
+                                                 GError         **error);
+static void     gsd_color_manager_dbus_unregister (GApplication    *app,
+                                                   GDBusConnection *connection,
+                                                   const char      *object_path);
 
 G_DEFINE_TYPE (GsdColorManager, gsd_color_manager, G_TYPE_APPLICATION)
 
@@ -86,15 +88,18 @@ static void
 gsd_color_manager_startup (GApplication *app)
 {
         GsdColorManager *manager = GSD_COLOR_MANAGER (app);
+        g_autoptr (GError) error = NULL;
 
         g_debug ("Starting color manager");
         gnome_settings_profile_start (NULL);
 
-        register_manager_dbus (manager);
-
         /* start the device probing */
         gsd_color_state_start (manager->state);
 
+        /* setup night light module */
+        if (!gsd_night_light_start (manager->nlight, &error))
+                g_warning ("Could not start night light module: %s", error->message);
+
         G_APPLICATION_CLASS (gsd_color_manager_parent_class)->startup (app);
 
         gnome_settings_profile_end (NULL);
@@ -108,15 +113,8 @@ gsd_color_manager_shutdown (GApplication *app)
         g_debug ("Stopping color manager");
         gsd_color_state_stop (manager->state);
 
-        if (manager->bus_cancellable != NULL) {
-                g_cancellable_cancel (manager->bus_cancellable);
-                g_clear_object (&manager->bus_cancellable);
-        }
-
         g_clear_pointer (&manager->introspection_data, g_dbus_node_info_unref);
-        g_clear_object (&manager->connection);
 
-        g_clear_handle_id (&manager->name_id, g_bus_unown_name);
         g_clear_handle_id (&manager->nlight_forced_timeout_id, g_source_remove);
 
         G_APPLICATION_CLASS (gsd_color_manager_parent_class)->shutdown (app);
@@ -132,6 +130,8 @@ gsd_color_manager_class_init (GsdColorManagerClass *klass)
 
         application_class->startup = gsd_color_manager_startup;
         application_class->shutdown = gsd_color_manager_shutdown;
+        application_class->dbus_register = gsd_color_manager_dbus_register;
+        application_class->dbus_unregister = gsd_color_manager_dbus_unregister;
 }
 
 static void
@@ -141,9 +141,10 @@ emit_property_changed (GsdColorManager *manager,
 {
         GVariantBuilder builder;
         GVariantBuilder invalidated_builder;
+        GDBusConnection *connection = g_application_get_dbus_connection (G_APPLICATION (manager));
 
         /* not yet connected */
-        if (manager->connection == NULL)
+        if (connection == NULL)
                 return;
 
         /* build the dict */
@@ -153,7 +154,7 @@ emit_property_changed (GsdColorManager *manager,
                                "{sv}",
                                property_name,
                                property_value);
-        g_dbus_connection_emit_signal (manager->connection,
+        g_dbus_connection_emit_signal (connection,
                                        NULL,
                                        GSD_COLOR_DBUS_PATH,
                                        "org.freedesktop.DBus.Properties",
@@ -410,30 +411,22 @@ static const GDBusInterfaceVTable interface_vtable =
         handle_set_property
 };
 
-static void
-name_lost_handler_cb (GDBusConnection *connection, const gchar *name, gpointer user_data)
+static gboolean
+gsd_color_manager_dbus_register (GApplication    *app,
+                                 GDBusConnection *connection,
+                                 const char     *object_path,
+                                 GError         **error)
 {
-        g_debug ("lost name, so exiting");
-        gtk_main_quit ();
-}
+        GsdColorManager *manager = GSD_COLOR_MANAGER (app);
 
-static void
-on_bus_gotten (GObject             *source_object,
-               GAsyncResult        *res,
-               GsdColorManager     *manager)
-{
-        GDBusConnection *connection;
-        GError *error = NULL;
-
-        connection = g_bus_get_finish (res, &error);
-        if (connection == NULL) {
-                if (!g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED))
-                        g_warning ("Could not get session bus: %s", error->message);
-                g_error_free (error);
-                return;
-        }
+        if (!G_APPLICATION_CLASS (gsd_color_manager_parent_class)->dbus_register (app,
+                                                                                  connection,
+                                                                                  object_path,
+                                                                                  error))
+                return FALSE;
 
-        manager->connection = connection;
+        manager->introspection_data = g_dbus_node_info_new_for_xml (introspection_xml, NULL);
+        g_assert (manager->introspection_data != NULL);
 
         g_dbus_connection_register_object (connection,
                                            GSD_COLOR_DBUS_PATH,
@@ -443,30 +436,19 @@ on_bus_gotten (GObject             *source_object,
                                            NULL,
                                            NULL);
 
-        manager->name_id = g_bus_own_name_on_connection (connection,
-                                                      GSD_COLOR_DBUS_NAME,
-                                                      G_BUS_NAME_OWNER_FLAGS_NONE,
-                                                      NULL,
-                                                      name_lost_handler_cb,
-                                                      manager,
-                                                      NULL);
-
-        /* setup night light module */
-        if (!gsd_night_light_start (manager->nlight, &error)) {
-                g_warning ("Could not start night light module: %s", error->message);
-                g_error_free (error);
-        }
+        return TRUE;
 }
 
 static void
-register_manager_dbus (GsdColorManager *manager)
+gsd_color_manager_dbus_unregister (GApplication    *app,
+                                   GDBusConnection *connection,
+                                   const char      *object_path)
 {
-        manager->introspection_data = g_dbus_node_info_new_for_xml (introspection_xml, NULL);
-        g_assert (manager->introspection_data != NULL);
-        manager->bus_cancellable = g_cancellable_new ();
+        GsdColorManager *manager = GSD_COLOR_MANAGER (app);
+
+        g_clear_pointer (&manager->introspection_data, g_dbus_node_info_unref);
 
-        g_bus_get (G_BUS_TYPE_SESSION,
-                   manager->bus_cancellable,
-                   (GAsyncReadyCallback) on_bus_gotten,
-                   manager);
+        G_APPLICATION_CLASS (gsd_color_manager_parent_class)->dbus_unregister (app,
+                                                                               connection,
+                                                                               object_path);
 }
diff --git a/plugins/housekeeping/gsd-housekeeping-manager.c b/plugins/housekeeping/gsd-housekeeping-manager.c
index 6045ab51a..7c5c38169 100644
--- a/plugins/housekeeping/gsd-housekeeping-manager.c
+++ b/plugins/housekeeping/gsd-housekeeping-manager.c
@@ -57,9 +57,6 @@ struct _GsdHousekeepingManager {
         guint short_term_cb;
 
         GDBusNodeInfo   *introspection_data;
-        GDBusConnection *connection;
-        GCancellable    *bus_cancellable;
-        guint            name_id;
 
         GsdSystemdNotify *systemd_notify;
 };
@@ -365,58 +362,6 @@ static const GDBusInterfaceVTable interface_vtable =
         NULL, /* Set Property */
 };
 
-static void
-on_bus_gotten (GObject                *source_object,
-               GAsyncResult           *res,
-               GsdHousekeepingManager *manager)
-{
-        GDBusConnection *connection;
-        GError *error = NULL;
-        GDBusInterfaceInfo **infos;
-        int i;
-
-        connection = g_bus_get_finish (res, &error);
-        if (connection == NULL) {
-                if (!g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED))
-                        g_warning ("Could not get session bus: %s", error->message);
-                g_error_free (error);
-                return;
-        }
-        manager->connection = connection;
-
-        infos = manager->introspection_data->interfaces;
-        for (i = 0; infos[i] != NULL; i++) {
-                g_dbus_connection_register_object (connection,
-                                                   GSD_HOUSEKEEPING_DBUS_PATH,
-                                                   infos[i],
-                                                   &interface_vtable,
-                                                   manager,
-                                                   NULL,
-                                                   NULL);
-        }
-
-        manager->name_id = g_bus_own_name_on_connection (connection,
-                                                               "org.gnome.SettingsDaemon.Housekeeping",
-                                                               G_BUS_NAME_OWNER_FLAGS_NONE,
-                                                               NULL,
-                                                               NULL,
-                                                               NULL,
-                                                               NULL);
-}
-
-static void
-register_manager_dbus (GsdHousekeepingManager *manager)
-{
-        manager->introspection_data = g_dbus_node_info_new_for_xml (introspection_xml, NULL);
-        g_assert (manager->introspection_data != NULL);
-        manager->bus_cancellable = g_cancellable_new ();
-
-        g_bus_get (G_BUS_TYPE_SESSION,
-                   manager->bus_cancellable,
-                   (GAsyncReadyCallback) on_bus_gotten,
-                   manager);
-}
-
 static void
 gsd_housekeeping_manager_startup (GApplication *app)
 {
@@ -426,8 +371,6 @@ gsd_housekeeping_manager_startup (GApplication *app)
         g_debug ("Starting housekeeping manager");
         gnome_settings_profile_start (NULL);
 
-        register_manager_dbus (manager);
-
         /* Create ~/.local/ as early as possible */
         (void) g_mkdir_with_parents(g_get_user_data_dir (), 0700);
 
@@ -466,15 +409,6 @@ gsd_housekeeping_manager_shutdown (GApplication *app)
 
         g_debug ("Stopping housekeeping manager");
 
-        if (manager->name_id != 0) {
-                g_bus_unown_name (manager->name_id);
-                manager->name_id = 0;
-        }
-
-        g_clear_object (&manager->bus_cancellable);
-        g_clear_pointer (&manager->introspection_data, g_dbus_node_info_unref);
-        g_clear_object (&manager->connection);
-
         g_clear_object (&manager->systemd_notify);
 
         if (manager->short_term_cb) {
@@ -501,6 +435,53 @@ gsd_housekeeping_manager_shutdown (GApplication *app)
         G_APPLICATION_CLASS (gsd_housekeeping_manager_parent_class)->shutdown (app);
 }
 
+static gboolean
+gsd_housekeeping_manager_dbus_register (GApplication    *app,
+                                        GDBusConnection *connection,
+                                        const char     *object_path,
+                                        GError         **error)
+{
+        GsdHousekeepingManager *manager = GSD_HOUSEKEEPING_MANAGER (app);
+        GDBusInterfaceInfo **infos;
+        int i;
+
+        if (!G_APPLICATION_CLASS (gsd_housekeeping_manager_parent_class)->dbus_register (app,
+                                                                                         connection,
+                                                                                         object_path,
+                                                                                         error))
+                return FALSE;
+
+        manager->introspection_data = g_dbus_node_info_new_for_xml (introspection_xml, NULL);
+        g_assert (manager->introspection_data != NULL);
+
+        infos = manager->introspection_data->interfaces;
+        for (i = 0; infos[i] != NULL; i++) {
+                g_dbus_connection_register_object (connection,
+                                                   GSD_HOUSEKEEPING_DBUS_PATH,
+                                                   infos[i],
+                                                   &interface_vtable,
+                                                   manager,
+                                                   NULL,
+                                                   NULL);
+        }
+
+        return TRUE;
+}
+
+static void
+gsd_housekeeping_manager_dbus_unregister (GApplication    *app,
+                                   GDBusConnection *connection,
+                                   const char      *object_path)
+{
+        GsdHousekeepingManager *manager = GSD_HOUSEKEEPING_MANAGER (app);
+
+        g_clear_pointer (&manager->introspection_data, g_dbus_node_info_unref);
+
+        G_APPLICATION_CLASS (gsd_housekeeping_manager_parent_class)->dbus_unregister (app,
+                                                                                      connection,
+                                                                                      object_path);
+}
+
 static void
 gsd_housekeeping_manager_class_init (GsdHousekeepingManagerClass *klass)
 {
@@ -508,6 +489,8 @@ gsd_housekeeping_manager_class_init (GsdHousekeepingManagerClass *klass)
 
         application_class->startup = gsd_housekeeping_manager_startup;
         application_class->shutdown = gsd_housekeeping_manager_shutdown;
+        application_class->dbus_register = gsd_housekeeping_manager_dbus_register;
+        application_class->dbus_unregister = gsd_housekeeping_manager_dbus_unregister;
 
         notify_init ("gnome-settings-daemon");
 }
diff --git a/plugins/media-keys/gsd-media-keys-manager.c b/plugins/media-keys/gsd-media-keys-manager.c
index 91595241d..409112f34 100644
--- a/plugins/media-keys/gsd-media-keys-manager.c
+++ b/plugins/media-keys/gsd-media-keys-manager.c
@@ -215,7 +215,6 @@ typedef struct
         gint             inhibit_suspend_fd;
         gboolean         inhibit_suspend_taken;
 
-        GDBusConnection *connection;
         GCancellable    *bus_cancellable;
 
         guint            start_idle_id;
@@ -227,7 +226,13 @@ typedef struct
 static void     gsd_media_keys_manager_class_init  (GsdMediaKeysManagerClass *klass);
 static void     gsd_media_keys_manager_init        (GsdMediaKeysManager      *media_keys_manager);
 static void     gsd_media_keys_manager_finalize    (GObject                  *object);
-static void     register_manager                   (GsdMediaKeysManager      *manager);
+static gboolean gsd_media_keys_manager_dbus_register (GApplication    *app,
+                                                      GDBusConnection *connection,
+                                                      const char      *object_path,
+                                                      GError         **error);
+static void     gsd_media_keys_manager_dbus_unregister (GApplication    *app,
+                                                        GDBusConnection *connection,
+                                                        const char      *object_path);
 static void     custom_binding_changed             (GSettings           *settings,
                                                     const char          *settings_key,
                                                     GsdMediaKeysManager *manager);
@@ -296,12 +301,12 @@ static void
 set_launch_context_env (GsdMediaKeysManager *manager,
 			GAppLaunchContext   *launch_context)
 {
-	GsdMediaKeysManagerPrivate *priv = GSD_MEDIA_KEYS_MANAGER_GET_PRIVATE (manager);
+        GDBusConnection *connection = g_application_get_dbus_connection (G_APPLICATION (manager));
 	GError *error = NULL;
 	GVariant *variant, *item;
 	GVariantIter *iter;
 
-	variant = g_dbus_connection_call_sync (priv->connection,
+	variant = g_dbus_connection_call_sync (connection,
 					       GNOME_KEYRING_DBUS_NAME,
 					       GNOME_KEYRING_DBUS_PATH,
 					       GNOME_KEYRING_DBUS_INTERFACE,
@@ -976,7 +981,7 @@ app_launched_cb (GAppLaunchContext *context,
                  gpointer           user_data)
 {
         GsdMediaKeysManager *manager = GSD_MEDIA_KEYS_MANAGER (user_data);
-        GsdMediaKeysManagerPrivate *priv = GSD_MEDIA_KEYS_MANAGER_GET_PRIVATE (manager);
+        GDBusConnection *connection = g_application_get_dbus_connection (G_APPLICATION (manager));
         gint32 pid;
         const gchar *app_name;
 
@@ -991,7 +996,7 @@ app_launched_cb (GAppLaunchContext *context,
         gnome_start_systemd_scope (app_name,
                                    pid,
                                    NULL,
-                                   priv->connection,
+                                   connection,
                                    NULL, NULL, NULL);
 }
 
@@ -2208,6 +2213,7 @@ do_brightness_action (GsdMediaKeysManager *manager,
                       MediaKeyType type)
 {
         GsdMediaKeysManagerPrivate *priv = GSD_MEDIA_KEYS_MANAGER_GET_PRIVATE (manager);
+        GDBusConnection *connection = g_application_get_dbus_connection (G_APPLICATION (manager));
         const char *cmd;
         GDBusProxy *proxy;
 
@@ -2226,7 +2232,7 @@ do_brightness_action (GsdMediaKeysManager *manager,
                 g_assert_not_reached ();
         }
 
-        if (priv->connection == NULL ||
+        if (connection == NULL ||
             proxy == NULL) {
                 g_warning ("No existing D-Bus connection trying to handle power keys");
                 return;
@@ -3106,8 +3112,6 @@ gsd_media_keys_manager_startup (GApplication *app)
         priv->start_idle_id = g_idle_add ((GSourceFunc) start_media_keys_idle_cb, manager);
         g_source_set_name_by_id (priv->start_idle_id, "[gnome-settings-daemon] start_media_keys_idle_cb");
 
-        register_manager (manager);
-
         G_APPLICATION_CLASS (gsd_media_keys_manager_parent_class)->startup (app);
 
         gnome_settings_profile_end (NULL);
@@ -3126,12 +3130,6 @@ gsd_media_keys_manager_shutdown (GApplication *app)
                 priv->start_idle_id = 0;
         }
 
-        if (priv->bus_cancellable != NULL) {
-                g_cancellable_cancel (priv->bus_cancellable);
-                g_object_unref (priv->bus_cancellable);
-                priv->bus_cancellable = NULL;
-        }
-
         if (priv->gtksettings != NULL) {
                 g_signal_handlers_disconnect_by_func (priv->gtksettings, sound_theme_changed, manager);
                 priv->gtksettings = NULL;
@@ -3169,14 +3167,9 @@ gsd_media_keys_manager_shutdown (GApplication *app)
         g_clear_object (&priv->settings);
         g_clear_object (&priv->sound_settings);
         g_clear_object (&priv->power_settings);
-        g_clear_object (&priv->power_proxy);
-        g_clear_object (&priv->power_screen_proxy);
-        g_clear_object (&priv->power_keyboard_proxy);
-        g_clear_object (&priv->composite_device);
         g_clear_object (&priv->mpris_controller);
         g_clear_object (&priv->iio_sensor_proxy);
         g_clear_pointer (&priv->chassis_type, g_free);
-        g_clear_object (&priv->connection);
 
         if (priv->keys_sync_data) {
                 /* Cancel ongoing sync. */
@@ -3384,6 +3377,8 @@ gsd_media_keys_manager_class_init (GsdMediaKeysManagerClass *klass)
 
         application_class->startup = gsd_media_keys_manager_startup;
         application_class->shutdown = gsd_media_keys_manager_shutdown;
+        application_class->dbus_register = gsd_media_keys_manager_dbus_register;
+        application_class->dbus_unregister = gsd_media_keys_manager_dbus_unregister;
 }
 
 static void
@@ -3571,26 +3566,25 @@ power_keyboard_ready_cb (GObject             *source_object,
                           manager);
 }
 
-static void
-on_bus_gotten (GObject             *source_object,
-               GAsyncResult        *res,
-               GsdMediaKeysManager *manager)
+static gboolean
+gsd_media_keys_manager_dbus_register (GApplication    *app,
+                                      GDBusConnection *connection,
+                                      const char     *object_path,
+                                      GError         **error)
 {
+        GsdMediaKeysManager *manager = GSD_MEDIA_KEYS_MANAGER (app);
         GsdMediaKeysManagerPrivate *priv = GSD_MEDIA_KEYS_MANAGER_GET_PRIVATE (manager);
-        GDBusConnection *connection;
-        GError *error = NULL;
         UpClient *up_client;
 
-        connection = g_bus_get_finish (res, &error);
-        if (connection == NULL) {
-                if (!g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED))
-                        g_warning ("Could not get session bus: %s", error->message);
-                g_error_free (error);
-                return;
-        }
-        priv->connection = connection;
+        if (!G_APPLICATION_CLASS (gsd_media_keys_manager_parent_class)->dbus_register (app,
+                                                                                       connection,
+                                                                                       object_path,
+                                                                                       error))
+                return FALSE;
+
+        priv->bus_cancellable = g_cancellable_new ();
 
-        g_dbus_proxy_new (priv->connection,
+        g_dbus_proxy_new (connection,
                           G_DBUS_PROXY_FLAGS_NONE,
                           NULL,
                           GSD_DBUS_NAME ".Power",
@@ -3600,7 +3594,7 @@ on_bus_gotten (GObject             *source_object,
                           (GAsyncReadyCallback) power_ready_cb,
                           manager);
 
-        g_dbus_proxy_new (priv->connection,
+        g_dbus_proxy_new (connection,
                           G_DBUS_PROXY_FLAGS_NONE,
                           NULL,
                           GSD_DBUS_NAME ".Power",
@@ -3610,7 +3604,7 @@ on_bus_gotten (GObject             *source_object,
                           (GAsyncReadyCallback) power_screen_ready_cb,
                           manager);
 
-        g_dbus_proxy_new (priv->connection,
+        g_dbus_proxy_new (connection,
                           G_DBUS_PROXY_FLAGS_NONE,
                           NULL,
                           GSD_DBUS_NAME ".Power",
@@ -3623,16 +3617,29 @@ on_bus_gotten (GObject             *source_object,
         up_client = up_client_new ();
         priv->composite_device = up_client_get_display_device (up_client);
         g_object_unref (up_client);
+
+        return TRUE;
 }
 
 static void
-register_manager (GsdMediaKeysManager *manager)
+gsd_media_keys_manager_dbus_unregister (GApplication    *app,
+                                        GDBusConnection *connection,
+                                        const char      *object_path)
 {
+        GsdMediaKeysManager *manager = GSD_MEDIA_KEYS_MANAGER (app);
         GsdMediaKeysManagerPrivate *priv = GSD_MEDIA_KEYS_MANAGER_GET_PRIVATE (manager);
 
-        priv->bus_cancellable = g_cancellable_new ();
-        g_bus_get (G_BUS_TYPE_SESSION,
-                   priv->bus_cancellable,
-                   (GAsyncReadyCallback) on_bus_gotten,
-                   manager);
+        if (priv->bus_cancellable != NULL) {
+                g_cancellable_cancel (priv->bus_cancellable);
+                g_clear_object (&priv->bus_cancellable);
+        }
+
+        g_clear_object (&priv->power_proxy);
+        g_clear_object (&priv->power_screen_proxy);
+        g_clear_object (&priv->power_keyboard_proxy);
+        g_clear_object (&priv->composite_device);
+
+        G_APPLICATION_CLASS (gsd_media_keys_manager_parent_class)->dbus_unregister (app,
+                                                                                    connection,
+                                                                                    object_path);
 }
diff --git a/plugins/power/gsd-power-manager.c b/plugins/power/gsd-power-manager.c
index 436364a47..86c5ca5c4 100644
--- a/plugins/power/gsd-power-manager.c
+++ b/plugins/power/gsd-power-manager.c
@@ -141,9 +141,7 @@ struct _GsdPowerManager
 
         /* D-Bus */
         GsdSessionManager       *session;
-        guint                    name_id;
         GDBusNodeInfo           *introspection_data;
-        GDBusConnection         *connection;
         GCancellable            *cancellable;
 
         /* Settings */
@@ -236,6 +234,13 @@ static void     gsd_power_manager_class_init  (GsdPowerManagerClass *klass);
 static void     gsd_power_manager_init        (GsdPowerManager      *power_manager);
 static void     gsd_power_manager_startup     (GApplication *app);
 static void     gsd_power_manager_shutdown    (GApplication *app);
+static gboolean gsd_power_manager_dbus_register (GApplication    *app,
+                                                 GDBusConnection *connection,
+                                                 const char      *object_path,
+                                                 GError         **error);
+static void     gsd_power_manager_dbus_unregister (GApplication    *app,
+                                                   GDBusConnection *connection,
+                                                   const char      *object_path);
 
 static void      engine_device_warning_changed_cb (UpDevice *device, GParamSpec *pspec, GsdPowerManager *manager);
 static void      do_power_action_type (GsdPowerManager *manager, GsdPowerActionType action_type);
@@ -248,7 +253,6 @@ static void      idle_triggered_idle_cb (GnomeIdleMonitor *monitor, guint watch_
 static void      idle_became_active_cb (GnomeIdleMonitor *monitor, guint watch_id, gpointer user_data);
 static void      iio_proxy_changed (GsdPowerManager *manager);
 static void      iio_proxy_changed_cb (GDBusProxy *proxy, GVariant *changed_properties, GStrv invalidated_properties, gpointer user_data);
-static void      register_manager_dbus (GsdPowerManager *manager);
 
 static void      initable_iface_init (GInitableIface *initable_iface);
 
@@ -1609,15 +1613,16 @@ backlight_iface_emit_changed (GsdPowerManager *manager,
                               gint32           value,
                               const char      *source)
 {
+        GDBusConnection *connection = g_application_get_dbus_connection (G_APPLICATION (manager));
         GVariant *params;
 
         /* not yet connected to the bus */
-        if (manager->connection == NULL)
+        if (connection == NULL)
                 return;
 
         params = g_variant_new_parsed ("(%s, [{'Brightness', <%i>}], @as [])", interface_name,
                                        value);
-        g_dbus_connection_emit_signal (manager->connection,
+        g_dbus_connection_emit_signal (connection,
                                        NULL,
                                        GSD_POWER_DBUS_PATH,
                                        "org.freedesktop.DBus.Properties",
@@ -1627,7 +1632,7 @@ backlight_iface_emit_changed (GsdPowerManager *manager,
         if (!source)
                 return;
 
-        g_dbus_connection_emit_signal (manager->connection,
+        g_dbus_connection_emit_signal (connection,
                                        NULL,
                                        GSD_POWER_DBUS_PATH,
                                        GSD_POWER_DBUS_INTERFACE_KEYBOARD,
@@ -2236,6 +2241,8 @@ gsd_power_manager_class_init (GsdPowerManagerClass *klass)
 
         application_class->startup = gsd_power_manager_startup;
         application_class->shutdown = gsd_power_manager_shutdown;
+        application_class->dbus_register = gsd_power_manager_dbus_register;
+        application_class->dbus_unregister = gsd_power_manager_dbus_unregister;
 
         notify_init ("gnome-settings-daemon");
 }
@@ -2360,6 +2367,7 @@ power_keyboard_proxy_ready_cb (GObject             *source_object,
         GVariant *params = NULL;
         GError *error = NULL;
         GsdPowerManager *manager = GSD_POWER_MANAGER (user_data);
+        GDBusConnection *connection = g_application_get_dbus_connection (G_APPLICATION (manager));
         gint percentage;
 
         manager->upower_kbd_proxy = g_dbus_proxy_new_for_bus_finish (res, &error);
@@ -2435,7 +2443,7 @@ power_keyboard_proxy_ready_cb (GObject             *source_object,
         /* Same for "Steps" */
         params = g_variant_new_parsed ("(%s, [{'Steps', <%i>}], @as [])",
                                        GSD_POWER_DBUS_INTERFACE_KEYBOARD, backlight_get_n_steps (manager));
-        g_dbus_connection_emit_signal (manager->connection,
+        g_dbus_connection_emit_signal (connection,
                                        NULL,
                                        GSD_POWER_DBUS_PATH,
                                        "org.freedesktop.DBus.Properties",
@@ -2980,8 +2988,6 @@ gsd_power_manager_startup (GApplication *app)
         g_debug ("Starting power manager");
         gnome_settings_profile_start (NULL);
 
-        register_manager_dbus (manager);
-
         /* Check whether we are running in a VM */
         manager->is_virtual_machine = gsd_power_is_hardware_a_vm ();
 
@@ -3144,8 +3150,6 @@ gsd_power_manager_shutdown (GApplication *app)
                 manager->inhibit_lid_switch_timer_id = 0;
         }
 
-        g_clear_pointer (&manager->introspection_data, g_dbus_node_info_unref);
-
         if (manager->up_client)
                 g_signal_handlers_disconnect_by_data (manager->up_client, manager);
         if (manager->display_config)
@@ -3199,9 +3203,6 @@ gsd_power_manager_shutdown (GApplication *app)
                 manager->xscreensaver_watchdog_timer_id = 0;
         }
 
-        g_clear_object (&manager->connection);
-
-        g_clear_handle_id (&manager->name_id, g_bus_unown_name);
         g_clear_handle_id (&manager->iio_proxy_watch_id, g_bus_unwatch_name);
 
         G_APPLICATION_CLASS (gsd_power_manager_parent_class)->shutdown (app);
@@ -3545,25 +3546,24 @@ static const GDBusInterfaceVTable interface_vtable =
         handle_set_property
 };
 
-static void
-on_bus_gotten (GObject             *source_object,
-               GAsyncResult        *res,
-               GsdPowerManager     *manager)
+static gboolean
+gsd_power_manager_dbus_register (GApplication    *app,
+                                 GDBusConnection *connection,
+                                 const char     *object_path,
+                                 GError         **error)
 {
-        GDBusConnection *connection;
+        GsdPowerManager *manager = GSD_POWER_MANAGER (app);
         GDBusInterfaceInfo **infos;
-        GError *error = NULL;
         guint i;
 
-        connection = g_bus_get_finish (res, &error);
-        if (connection == NULL) {
-                if (!g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED))
-                        g_warning ("Could not get session bus: %s", error->message);
-                g_error_free (error);
-                return;
-        }
+        if (!G_APPLICATION_CLASS (gsd_power_manager_parent_class)->dbus_register (app,
+                                                                                  connection,
+                                                                                  object_path,
+                                                                                  error))
+                return FALSE;
 
-        manager->connection = connection;
+        manager->introspection_data = g_dbus_node_info_new_for_xml (introspection_xml, NULL);
+        g_assert (manager->introspection_data != NULL);
 
         infos = manager->introspection_data->interfaces;
         for (i = 0; infos[i] != NULL; i++) {
@@ -3576,23 +3576,19 @@ on_bus_gotten (GObject             *source_object,
                                                    NULL);
         }
 
-        manager->name_id = g_bus_own_name_on_connection (connection,
-                                                               GSD_POWER_DBUS_NAME,
-                                                               G_BUS_NAME_OWNER_FLAGS_NONE,
-                                                               NULL,
-                                                               NULL,
-                                                               NULL,
-                                                               NULL);
+        return TRUE;
 }
 
 static void
-register_manager_dbus (GsdPowerManager *manager)
+gsd_power_manager_dbus_unregister (GApplication    *app,
+                                   GDBusConnection *connection,
+                                   const char      *object_path)
 {
-        manager->introspection_data = g_dbus_node_info_new_for_xml (introspection_xml, NULL);
-        g_assert (manager->introspection_data != NULL);
+        GsdPowerManager *manager = GSD_POWER_MANAGER (app);
+
+        g_clear_pointer (&manager->introspection_data, g_dbus_node_info_unref);
 
-        g_bus_get (G_BUS_TYPE_SESSION,
-                   manager->cancellable,
-                   (GAsyncReadyCallback) on_bus_gotten,
-                   manager);
+        G_APPLICATION_CLASS (gsd_power_manager_parent_class)->dbus_unregister (app,
+                                                                               connection,
+                                                                               object_path);
 }
diff --git a/plugins/screensaver-proxy/gsd-screensaver-proxy-manager.c b/plugins/screensaver-proxy/gsd-screensaver-proxy-manager.c
index b27ac48b0..7f34185e3 100644
--- a/plugins/screensaver-proxy/gsd-screensaver-proxy-manager.c
+++ b/plugins/screensaver-proxy/gsd-screensaver-proxy-manager.c
@@ -133,8 +133,6 @@ struct _GsdScreensaverProxyManager
         GApplication             parent;
 
         GsdSessionManager       *session;
-        GDBusConnection         *connection;
-        GCancellable            *bus_cancellable;
         GDBusNodeInfo           *introspection_data;
         GDBusNodeInfo           *introspection_data2;
         guint                    name_id;
@@ -229,7 +227,7 @@ handle_method_call (GDBusConnection       *connection,
                 if (g_hash_table_lookup (manager->watch_ht, sender) == NULL) {
                         guint watch_id;
 
-                        watch_id = g_bus_watch_name_on_connection (manager->connection,
+                        watch_id = g_bus_watch_name_on_connection (connection,
                                                                    sender,
                                                                    G_BUS_NAME_WATCHER_FLAGS_NONE,
                                                                    NULL,
@@ -294,69 +292,6 @@ static const GDBusInterfaceVTable interface_vtable =
         NULL, /* SetProperty */
 };
 
-static void
-on_bus_gotten (GObject                    *source_object,
-               GAsyncResult               *res,
-               GsdScreensaverProxyManager *manager)
-{
-        GDBusConnection *connection;
-        GDBusInterfaceInfo **infos;
-        GError *error = NULL;
-
-        if (manager->bus_cancellable == NULL ||
-            g_cancellable_is_cancelled (manager->bus_cancellable)) {
-                g_warning ("Operation has been cancelled, so not retrieving session bus");
-                return;
-        }
-
-        connection = g_bus_get_finish (res, &error);
-        if (connection == NULL) {
-                g_warning ("Could not get session bus: %s", error->message);
-                g_error_free (error);
-                return;
-        }
-        manager->connection = connection;
-        infos = manager->introspection_data->interfaces;
-        g_dbus_connection_register_object (connection,
-                                           GSD_SCREENSAVER_PROXY_DBUS_PATH,
-                                           infos[0],
-                                           &interface_vtable,
-                                           manager,
-                                           NULL,
-                                           NULL);
-        infos = manager->introspection_data2->interfaces;
-        g_dbus_connection_register_object (connection,
-                                           GSD_SCREENSAVER_PROXY_DBUS_PATH2,
-                                           infos[0],
-                                           &interface_vtable,
-                                           manager,
-                                           NULL,
-                                           NULL);
-
-        manager->name_id = g_bus_own_name_on_connection (manager->connection,
-                                                               GSD_SCREENSAVER_PROXY_DBUS_SERVICE,
-                                                               G_BUS_NAME_OWNER_FLAGS_NONE,
-                                                               NULL,
-                                                               NULL,
-                                                               NULL,
-                                                               NULL);
-}
-
-static void
-register_manager_dbus (GsdScreensaverProxyManager *manager)
-{
-        manager->introspection_data = g_dbus_node_info_new_for_xml (introspection_xml, NULL);
-        manager->introspection_data2 = g_dbus_node_info_new_for_xml (introspection_xml2, NULL);
-        manager->bus_cancellable = g_cancellable_new ();
-        g_assert (manager->introspection_data != NULL);
-        g_assert (manager->introspection_data2 != NULL);
-
-        g_bus_get (G_BUS_TYPE_SESSION,
-                   manager->bus_cancellable,
-                   (GAsyncReadyCallback) on_bus_gotten,
-                   manager);
-}
-
 static void
 gsd_screensaver_proxy_manager_startup (GApplication *app)
 {
@@ -365,8 +300,6 @@ gsd_screensaver_proxy_manager_startup (GApplication *app)
         g_debug ("Starting screensaver-proxy manager");
         gnome_settings_profile_start (NULL);
 
-        register_manager_dbus (manager);
-
         manager->session =
                 gnome_settings_bus_get_session_proxy ();
         manager->watch_ht = g_hash_table_new_full (g_str_hash,
@@ -393,21 +326,75 @@ gsd_screensaver_proxy_manager_shutdown (GApplication *app)
         g_clear_pointer (&manager->watch_ht, g_hash_table_destroy);
         g_clear_pointer (&manager->cookie_ht, g_hash_table_destroy);
 
-        g_clear_handle_id (&manager->name_id, g_bus_unown_name);
+        G_APPLICATION_CLASS (gsd_screensaver_proxy_manager_parent_class)->shutdown (app);
+}
+
+static gboolean
+gsd_screensaver_proxy_manager_dbus_register (GApplication    *app,
+                                             GDBusConnection *connection,
+                                             const char     *object_path,
+                                             GError         **error)
+{
+        GsdScreensaverProxyManager *manager = GSD_SCREENSAVER_PROXY_MANAGER (app);
+        GDBusInterfaceInfo **infos;
 
-        g_clear_object (&manager->connection);
+        if (!G_APPLICATION_CLASS (gsd_screensaver_proxy_manager_parent_class)->dbus_register (app,
+                                                                                              connection,
+                                                                                              object_path,
+                                                                                              error))
+                return FALSE;
 
-        if (manager->bus_cancellable != NULL) {
-                g_cancellable_cancel (manager->bus_cancellable);
-                g_clear_object (&manager->bus_cancellable);
-        }
+        manager->introspection_data = g_dbus_node_info_new_for_xml (introspection_xml, NULL);
+        manager->introspection_data2 = g_dbus_node_info_new_for_xml (introspection_xml2, NULL);
+        g_assert (manager->introspection_data != NULL);
+        g_assert (manager->introspection_data2 != NULL);
+
+        infos = manager->introspection_data->interfaces;
+        g_dbus_connection_register_object (connection,
+                                           GSD_SCREENSAVER_PROXY_DBUS_PATH,
+                                           infos[0],
+                                           &interface_vtable,
+                                           manager,
+                                           NULL,
+                                           NULL);
+        infos = manager->introspection_data2->interfaces;
+        g_dbus_connection_register_object (connection,
+                                           GSD_SCREENSAVER_PROXY_DBUS_PATH2,
+                                           infos[0],
+                                           &interface_vtable,
+                                           manager,
+                                           NULL,
+                                           NULL);
+
+        manager->name_id = g_bus_own_name_on_connection (connection,
+                                                         GSD_SCREENSAVER_PROXY_DBUS_SERVICE,
+                                                         G_BUS_NAME_OWNER_FLAGS_NONE,
+                                                         NULL,
+                                                         NULL,
+                                                         NULL,
+                                                         NULL);
+
+        return TRUE;
+}
+
+static void
+gsd_screensaver_proxy_manager_dbus_unregister (GApplication    *app,
+                                               GDBusConnection *connection,
+                                               const char      *object_path)
+{
+        GsdScreensaverProxyManager *manager = GSD_SCREENSAVER_PROXY_MANAGER (app);
 
         g_clear_pointer (&manager->introspection_data, g_dbus_node_info_unref);
         g_clear_pointer (&manager->introspection_data2, g_dbus_node_info_unref);
 
-        G_APPLICATION_CLASS (gsd_screensaver_proxy_manager_parent_class)->shutdown (app);
+        g_clear_handle_id (&manager->name_id, g_bus_unown_name);
+
+        G_APPLICATION_CLASS (gsd_screensaver_proxy_manager_parent_class)->dbus_unregister (app,
+                                                                                           connection,
+                                                                                           object_path);
 }
 
+
 static void
 gsd_screensaver_proxy_manager_class_init (GsdScreensaverProxyManagerClass *klass)
 {
@@ -415,6 +402,8 @@ gsd_screensaver_proxy_manager_class_init (GsdScreensaverProxyManagerClass *klass
 
         application_class->startup = gsd_screensaver_proxy_manager_startup;
         application_class->shutdown = gsd_screensaver_proxy_manager_shutdown;
+        application_class->dbus_register = gsd_screensaver_proxy_manager_dbus_register;
+        application_class->dbus_unregister = gsd_screensaver_proxy_manager_dbus_unregister;
 }
 
 static void
diff --git a/plugins/wacom/gsd-wacom-manager.c b/plugins/wacom/gsd-wacom-manager.c
index 843a8b1f2..2d4abef44 100644
--- a/plugins/wacom/gsd-wacom-manager.c
+++ b/plugins/wacom/gsd-wacom-manager.c
@@ -92,10 +92,7 @@ struct _GsdWacomManager
 
         /* DBus */
         GDBusNodeInfo   *introspection_data;
-        GDBusConnection *dbus_connection;
-        GCancellable    *dbus_cancellable;
         guint            dbus_register_object_id;
-        guint            name_id;
 };
 
 static void     gsd_wacom_manager_class_init  (GsdWacomManagerClass *klass);
@@ -103,6 +100,13 @@ static void     gsd_wacom_manager_init        (GsdWacomManager      *wacom_manag
 static void     gsd_wacom_manager_finalize    (GObject              *object);
 static void     gsd_wacom_manager_startup     (GApplication         *app);
 static void     gsd_wacom_manager_shutdown    (GApplication         *app);
+static gboolean gsd_wacom_manager_dbus_register (GApplication    *app,
+                                                 GDBusConnection *connection,
+                                                 const char      *object_path,
+                                                 GError         **error);
+static void     gsd_wacom_manager_dbus_unregister (GApplication    *app,
+                                                   GDBusConnection *connection,
+                                                   const char      *object_path);
 
 static gboolean is_opaque_tablet (GsdWacomManager *manager,
                                   GdkDevice       *device);
@@ -181,6 +185,8 @@ gsd_wacom_manager_class_init (GsdWacomManagerClass *klass)
 
         application_class->startup = gsd_wacom_manager_startup;
         application_class->shutdown = gsd_wacom_manager_shutdown;
+        application_class->dbus_register = gsd_wacom_manager_dbus_register;
+        application_class->dbus_unregister = gsd_wacom_manager_dbus_unregister;
 }
 
 static gchar *
@@ -375,60 +381,6 @@ gsd_wacom_manager_idle_cb (GsdWacomManager *manager)
         return FALSE;
 }
 
-static void
-on_bus_gotten (GObject		   *source_object,
-	       GAsyncResult	   *res,
-	       GsdWacomManager	   *manager)
-{
-	GDBusConnection	       *connection;
-	GError		       *error = NULL;
-
-	connection = g_bus_get_finish (res, &error);
-
-	if (connection == NULL) {
-		if (!g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED))
-			g_warning ("Couldn't get session bus: %s", error->message);
-		g_error_free (error);
-		return;
-	}
-
-	manager->dbus_connection = connection;
-	manager->dbus_register_object_id = g_dbus_connection_register_object (connection,
-									      GSD_WACOM_DBUS_PATH,
-									      manager->introspection_data->interfaces[0],
-									      &interface_vtable,
-									      manager,
-									      NULL,
-									      &error);
-
-	if (manager->dbus_register_object_id == 0) {
-		g_warning ("Error registering object: %s", error->message);
-		g_error_free (error);
-		return;
-	}
-
-        manager->name_id = g_bus_own_name_on_connection (connection,
-                                                         GSD_WACOM_DBUS_NAME,
-                                                         G_BUS_NAME_OWNER_FLAGS_NONE,
-                                                         NULL,
-                                                         NULL,
-                                                         NULL,
-                                                         NULL);
-}
-
-static void
-register_manager (GsdWacomManager *manager)
-{
-        manager->introspection_data = g_dbus_node_info_new_for_xml (introspection_xml, NULL);
-        manager->dbus_cancellable = g_cancellable_new ();
-        g_assert (manager->introspection_data != NULL);
-
-        g_bus_get (G_BUS_TYPE_SESSION,
-                   manager->dbus_cancellable,
-                   (GAsyncReadyCallback) on_bus_gotten,
-                   manager);
-}
-
 static gchar *
 get_machine_id (void)
 {
@@ -457,8 +409,6 @@ gsd_wacom_manager_startup (GApplication *app)
 
         gnome_settings_profile_start (NULL);
 
-        register_manager (manager);
-
         manager->machine_id = get_machine_id ();
 
         manager->start_idle_id = g_idle_add ((GSourceFunc) gsd_wacom_manager_idle_cb, manager);
@@ -478,17 +428,6 @@ gsd_wacom_manager_shutdown (GApplication *app)
 
         g_clear_pointer (&manager->machine_id, g_free);
 
-        if (manager->name_id != 0) {
-                g_bus_unown_name (manager->name_id);
-                manager->name_id = 0;
-        }
-
-        if (manager->dbus_register_object_id) {
-                g_dbus_connection_unregister_object (manager->dbus_connection,
-                                                     manager->dbus_register_object_id);
-                manager->dbus_register_object_id = 0;
-        }
-
         if (manager->seat != NULL) {
                 g_signal_handler_disconnect (manager->seat, manager->device_added_id);
                 manager->seat = NULL;
@@ -496,16 +435,60 @@ gsd_wacom_manager_shutdown (GApplication *app)
 
         g_clear_handle_id (&manager->start_idle_id, g_source_remove);
 
+        G_APPLICATION_CLASS (gsd_wacom_manager_parent_class)->shutdown (app);
+}
+
+static gboolean
+gsd_wacom_manager_dbus_register (GApplication    *app,
+                                 GDBusConnection *connection,
+                                 const char     *object_path,
+                                 GError         **error)
+{
+        GsdWacomManager *manager = GSD_WACOM_MANAGER (app);
+
+        if (!G_APPLICATION_CLASS (gsd_wacom_manager_parent_class)->dbus_register (app,
+                                                                                  connection,
+                                                                                  object_path,
+                                                                                  error))
+                return FALSE;
+
+        manager->introspection_data = g_dbus_node_info_new_for_xml (introspection_xml, NULL);
+        g_assert (manager->introspection_data != NULL);
+
+	manager->dbus_register_object_id = g_dbus_connection_register_object (connection,
+                                                                              GSD_WACOM_DBUS_PATH,
+                                                                              manager->introspection_data->interfaces[0],
+                                                                              &interface_vtable,
+                                                                              manager,
+                                                                              NULL,
+                                                                              error);
+
+	if (manager->dbus_register_object_id == 0) {
+                g_warning ("Error registering object: %s", (*error)->message);
+	        return FALSE;
+	}
+
+        return TRUE;
+}
+
+static void
+gsd_wacom_manager_dbus_unregister (GApplication    *app,
+                                   GDBusConnection *connection,
+                                   const char      *object_path)
+{
+        GsdWacomManager *manager = GSD_WACOM_MANAGER (app);
+
         g_clear_pointer (&manager->introspection_data, g_dbus_node_info_unref);
 
-        if (manager->dbus_cancellable != NULL) {
-                g_cancellable_cancel (manager->dbus_cancellable);
-                g_clear_object (&manager->dbus_cancellable);
+        if (manager->dbus_register_object_id) {
+                g_dbus_connection_unregister_object (connection,
+                                                     manager->dbus_register_object_id);
+                manager->dbus_register_object_id = 0;
         }
 
-        g_clear_object (&manager->dbus_connection);
-
-        G_APPLICATION_CLASS (gsd_wacom_manager_parent_class)->shutdown (app);
+        G_APPLICATION_CLASS (gsd_wacom_manager_parent_class)->dbus_unregister (app,
+                                                                               connection,
+                                                                               object_path);
 }
 
 static void
diff --git a/plugins/xsettings/gsd-xsettings-manager.c b/plugins/xsettings/gsd-xsettings-manager.c
index fcc1d9df3..19a5e69dc 100644
--- a/plugins/xsettings/gsd-xsettings-manager.c
+++ b/plugins/xsettings/gsd-xsettings-manager.c
@@ -38,7 +38,6 @@
 #include <gdk/gdkx.h>
 #include <gtk/gtk.h>
 
-#include "gio/gio.h"
 #include "gnome-settings-profile.h"
 #include "gnome-settings-daemon/gsd-enums.h"
 #include "gsd-xsettings-manager.h"
@@ -306,15 +305,19 @@ struct _GsdXSettingsManager
         guint              notify_idle_id;
 
         GDBusNodeInfo     *introspection_data;
-        GDBusConnection   *dbus_connection;
         guint              gtk_settings_name_id;
 };
 
 static void     gsd_xsettings_manager_class_init  (GsdXSettingsManagerClass *klass);
 static void     gsd_xsettings_manager_init        (GsdXSettingsManager      *xsettings_manager);
 static void     gsd_xsettings_manager_finalize    (GObject                  *object);
-
-static void     register_manager_dbus             (GsdXSettingsManager *manager);
+static gboolean gsd_xsettings_manager_dbus_register (GApplication    *app,
+                                                     GDBusConnection *connection,
+                                                     const char     *object_path,
+                                                     GError         **error);
+static void     gsd_xsettings_manager_dbus_unregister (GApplication    *app,
+                                                       GDBusConnection *connection,
+                                                       const char      *object_path);
 
 G_DEFINE_TYPE (GsdXSettingsManager, gsd_xsettings_manager, G_TYPE_APPLICATION)
 
@@ -548,6 +551,7 @@ static void
 send_dbus_event (GsdXSettingsManager *manager,
                  GtkSettingsMask      mask)
 {
+        GDBusConnection *connection = g_application_get_dbus_connection (G_APPLICATION (manager));
         GVariantBuilder props_builder;
         GVariant *props_changed = NULL;
 
@@ -573,7 +577,7 @@ send_dbus_event (GsdXSettingsManager *manager,
                                        g_variant_builder_end (&props_builder),
                                        g_variant_new_strv (NULL, 0));
 
-        g_dbus_connection_emit_signal (manager->dbus_connection,
+        g_dbus_connection_emit_signal (connection,
                                        NULL,
                                        GTK_SETTINGS_DBUS_PATH,
                                        "org.freedesktop.DBus.Properties",
@@ -599,13 +603,14 @@ get_dpi_from_gsettings (GsdXSettingsManager *manager)
 static int
 get_window_scale (GsdXSettingsManager *manager)
 {
+        GDBusConnection *connection = g_application_get_dbus_connection (G_APPLICATION (manager));
         g_autoptr(GError) error = NULL;
         g_autoptr(GVariant) res = NULL;
         g_autoptr(GVariant) ui_scaling_factor_variant = NULL;
         g_autoptr(GVariantIter) properties = NULL;
         int ui_scaling_factor = 1;
 
-        res = g_dbus_connection_call_sync (manager->dbus_connection,
+        res = g_dbus_connection_call_sync (connection,
                                            "org.gnome.Mutter.X11",
                                            "/org/gnome/Mutter/X11",
                                            "org.freedesktop.DBus.Properties",
@@ -1097,12 +1102,13 @@ on_mutter_x11_name_appeared_handler (GDBusConnection *connection,
 static void
 animations_enabled_changed (GsdXSettingsManager *manager)
 {
+        GDBusConnection *connection = g_application_get_dbus_connection (G_APPLICATION (manager));
         g_autoptr(GError) error = NULL;
         g_autoptr(GVariant) res = NULL;
         g_autoptr(GVariant) animations_enabled_variant = NULL;
         gboolean animations_enabled;
 
-        res = g_dbus_connection_call_sync (manager->dbus_connection,
+        res = g_dbus_connection_call_sync (connection,
                                            "org.gnome.Shell.Introspect",
                                            "/org/gnome/Shell/Introspect",
                                            "org.freedesktop.DBus.Properties",
@@ -1341,6 +1347,7 @@ static void
 gsd_xsettings_manager_startup (GApplication *app)
 {
         GsdXSettingsManager *manager = GSD_XSETTINGS_MANAGER (app);
+        GDBusConnection *connection = g_application_get_dbus_connection (G_APPLICATION (manager));
         GVariant    *overrides;
         guint        i;
         GList       *list, *l;
@@ -1365,7 +1372,7 @@ gsd_xsettings_manager_startup (GApplication *app)
         update_gtk_im_module (manager);
 
         manager->monitors_changed_id =
-                g_dbus_connection_signal_subscribe (manager->dbus_connection,
+                g_dbus_connection_signal_subscribe (connection,
                                                     "org.gnome.Mutter.X11",
                                                     "org.freedesktop.DBus.Properties",
                                                     "PropertiesChanged",
@@ -1376,7 +1383,7 @@ gsd_xsettings_manager_startup (GApplication *app)
                                                     manager,
                                                     NULL);
         manager->display_config_watch_id =
-                g_bus_watch_name_on_connection (manager->dbus_connection,
+                g_bus_watch_name_on_connection (connection,
                                                 "org.gnome.Mutter.X11",
                                                 G_BUS_NAME_WATCHER_FLAGS_NONE,
                                                 on_mutter_x11_name_appeared_handler,
@@ -1385,7 +1392,7 @@ gsd_xsettings_manager_startup (GApplication *app)
                                                 NULL);
 
         manager->introspect_properties_changed_id =
-                g_dbus_connection_signal_subscribe (manager->dbus_connection,
+                g_dbus_connection_signal_subscribe (connection,
                                                     "org.gnome.Shell.Introspect",
                                                     "org.freedesktop.DBus.Properties",
                                                     "PropertiesChanged",
@@ -1396,7 +1403,7 @@ gsd_xsettings_manager_startup (GApplication *app)
                                                     manager,
                                                     NULL);
         manager->shell_introspect_watch_id =
-                g_bus_watch_name_on_connection (manager->dbus_connection,
+                g_bus_watch_name_on_connection (connection,
                                                 "org.gnome.Shell.Introspect",
                                                 G_BUS_NAME_WATCHER_FLAGS_NONE,
                                                 on_shell_introspect_name_appeared_handler,
@@ -1482,8 +1489,6 @@ gsd_xsettings_manager_startup (GApplication *app)
         if (gnome_settings_is_wayland ())
                 launch_xwayland_services ();
 
-        register_manager_dbus (manager);
-
         start_fontconfig_monitor (manager);
 
         overrides = g_settings_get_value (manager->plugin_settings, XSETTINGS_OVERRIDE_KEY);
@@ -1500,6 +1505,7 @@ static void
 gsd_xsettings_manager_shutdown (GApplication *app)
 {
         GsdXSettingsManager *manager = GSD_XSETTINGS_MANAGER (app);
+        GDBusConnection *connection = g_application_get_dbus_connection (G_APPLICATION (manager));
 
         g_debug ("Stopping xsettings manager");
 
@@ -1509,7 +1515,7 @@ gsd_xsettings_manager_shutdown (GApplication *app)
         }
 
         if (manager->introspect_properties_changed_id) {
-                g_dbus_connection_signal_unsubscribe (manager->dbus_connection,
+                g_dbus_connection_signal_unsubscribe (connection,
                                                       manager->introspect_properties_changed_id);
                 manager->introspect_properties_changed_id = 0;
         }
@@ -1520,7 +1526,7 @@ gsd_xsettings_manager_shutdown (GApplication *app)
         }
 
         if (manager->monitors_changed_id) {
-                g_dbus_connection_signal_unsubscribe (manager->dbus_connection,
+                g_dbus_connection_signal_unsubscribe (connection,
                                                       manager->monitors_changed_id);
                 manager->monitors_changed_id = 0;
         }
@@ -1546,11 +1552,6 @@ gsd_xsettings_manager_shutdown (GApplication *app)
                 manager->plugin_settings = NULL;
         }
 
-        if (manager->gtk_settings_name_id > 0) {
-                g_bus_unown_name (manager->gtk_settings_name_id);
-                manager->gtk_settings_name_id = 0;
-        }
-
         if (manager->fontconfig_monitor != NULL) {
                 g_signal_handlers_disconnect_by_data (manager->fontconfig_monitor, manager);
                 fc_monitor_stop (manager->fontconfig_monitor);
@@ -1590,17 +1591,13 @@ gsd_xsettings_manager_class_init (GsdXSettingsManagerClass *klass)
         object_class->finalize = gsd_xsettings_manager_finalize;
         application_class->startup = gsd_xsettings_manager_startup;
         application_class->shutdown = gsd_xsettings_manager_shutdown;
+        application_class->dbus_register = gsd_xsettings_manager_dbus_register;
+        application_class->dbus_unregister = gsd_xsettings_manager_dbus_unregister;
 }
 
 static void
 gsd_xsettings_manager_init (GsdXSettingsManager *manager)
 {
-        GError *error = NULL;
-
-        manager->dbus_connection = g_bus_get_sync (G_BUS_TYPE_SESSION,
-                                                         NULL, &error);
-        if (!manager->dbus_connection)
-                g_error ("Failed to get session bus: %s", error->message);
 }
 
 static void
@@ -1615,8 +1612,6 @@ gsd_xsettings_manager_finalize (GObject *object)
 
         g_return_if_fail (xsettings_manager != NULL);
 
-        g_clear_object (&xsettings_manager->dbus_connection);
-
         G_OBJECT_CLASS (gsd_xsettings_manager_parent_class)->finalize (object);
 }
 
@@ -1652,15 +1647,24 @@ static const GDBusInterfaceVTable interface_vtable =
         NULL
 };
 
-static void
-register_manager_dbus (GsdXSettingsManager *manager)
+static gboolean
+gsd_xsettings_manager_dbus_register (GApplication    *app,
+                                     GDBusConnection *connection,
+                                     const char     *object_path,
+                                     GError         **error)
 {
-        g_assert (manager->dbus_connection != NULL);
+        GsdXSettingsManager *manager = GSD_XSETTINGS_MANAGER (app);
+
+        if (!G_APPLICATION_CLASS (gsd_xsettings_manager_parent_class)->dbus_register (app,
+                                                                                      connection,
+                                                                                      object_path,
+                                                                                      error))
+                return FALSE;
 
         manager->introspection_data = g_dbus_node_info_new_for_xml (introspection_xml, NULL);
         g_assert (manager->introspection_data != NULL);
 
-        g_dbus_connection_register_object (manager->dbus_connection,
+        g_dbus_connection_register_object (connection,
                                            GTK_SETTINGS_DBUS_PATH,
                                            manager->introspection_data->interfaces[0],
                                            &interface_vtable,
@@ -1668,8 +1672,26 @@ register_manager_dbus (GsdXSettingsManager *manager)
                                            NULL,
                                            NULL);
 
-        manager->gtk_settings_name_id = g_bus_own_name_on_connection (manager->dbus_connection,
+        manager->gtk_settings_name_id = g_bus_own_name_on_connection (connection,
                                                                       GTK_SETTINGS_DBUS_NAME,
                                                                       G_BUS_NAME_OWNER_FLAGS_NONE,
                                                                       NULL, NULL, NULL, NULL);
+
+        return TRUE;
+}
+
+static void
+gsd_xsettings_manager_dbus_unregister (GApplication    *app,
+                                       GDBusConnection *connection,
+                                       const char      *object_path)
+{
+        GsdXSettingsManager *manager = GSD_XSETTINGS_MANAGER (app);
+
+        g_clear_pointer (&manager->introspection_data, g_dbus_node_info_unref);
+
+        g_clear_handle_id (&manager->gtk_settings_name_id, g_bus_unown_name);
+
+        G_APPLICATION_CLASS (gsd_xsettings_manager_parent_class)->dbus_unregister (app,
+                                                                                   connection,
+                                                                                   object_path);
 }
-- 
GitLab


From 6a1931998a7dc1016283f839774eb2c8e22b20bb Mon Sep 17 00:00:00 2001
From: Joan Torres <joan.torres@suse.com>
Date: Mon, 31 Mar 2025 17:22:20 +0200
Subject: [PATCH 2/3] plugins/wacom: Remove unused shell_proxy

---
 plugins/wacom/gsd-wacom-manager.c | 4 ----
 1 file changed, 4 deletions(-)

diff --git a/plugins/wacom/gsd-wacom-manager.c b/plugins/wacom/gsd-wacom-manager.c
index 2d4abef44..76aeb72e8 100644
--- a/plugins/wacom/gsd-wacom-manager.c
+++ b/plugins/wacom/gsd-wacom-manager.c
@@ -82,8 +82,6 @@ struct _GsdWacomManager
         GdkSeat *seat;
         guint device_added_id;
 
-        GsdShell *shell_proxy;
-
         gchar *machine_id;
 
 #if HAVE_WACOM
@@ -503,8 +501,6 @@ gsd_wacom_manager_finalize (GObject *object)
 
         g_return_if_fail (wacom_manager != NULL);
 
-        g_clear_object (&wacom_manager->shell_proxy);
-
 #if HAVE_WACOM
         libwacom_database_destroy (wacom_manager->wacom_db);
 #endif
-- 
GitLab


From 94f6ad18e2686bac98d9198598f0c866b2866bb5 Mon Sep 17 00:00:00 2001
From: Joan Torres <joan.torres@suse.com>
Date: Mon, 31 Mar 2025 17:23:23 +0200
Subject: [PATCH 3/3] plugins/xsettings: Remove empty finalize method

---
 plugins/xsettings/gsd-xsettings-manager.c | 18 ------------------
 1 file changed, 18 deletions(-)

diff --git a/plugins/xsettings/gsd-xsettings-manager.c b/plugins/xsettings/gsd-xsettings-manager.c
index 19a5e69dc..f8bacef24 100644
--- a/plugins/xsettings/gsd-xsettings-manager.c
+++ b/plugins/xsettings/gsd-xsettings-manager.c
@@ -310,7 +310,6 @@ struct _GsdXSettingsManager
 
 static void     gsd_xsettings_manager_class_init  (GsdXSettingsManagerClass *klass);
 static void     gsd_xsettings_manager_init        (GsdXSettingsManager      *xsettings_manager);
-static void     gsd_xsettings_manager_finalize    (GObject                  *object);
 static gboolean gsd_xsettings_manager_dbus_register (GApplication    *app,
                                                      GDBusConnection *connection,
                                                      const char     *object_path,
@@ -1585,10 +1584,8 @@ gsd_xsettings_manager_shutdown (GApplication *app)
 static void
 gsd_xsettings_manager_class_init (GsdXSettingsManagerClass *klass)
 {
-        GObjectClass *object_class = G_OBJECT_CLASS (klass);
         GApplicationClass *application_class = G_APPLICATION_CLASS (klass);
 
-        object_class->finalize = gsd_xsettings_manager_finalize;
         application_class->startup = gsd_xsettings_manager_startup;
         application_class->shutdown = gsd_xsettings_manager_shutdown;
         application_class->dbus_register = gsd_xsettings_manager_dbus_register;
@@ -1600,21 +1597,6 @@ gsd_xsettings_manager_init (GsdXSettingsManager *manager)
 {
 }
 
-static void
-gsd_xsettings_manager_finalize (GObject *object)
-{
-        GsdXSettingsManager *xsettings_manager;
-
-        g_return_if_fail (object != NULL);
-        g_return_if_fail (GSD_IS_XSETTINGS_MANAGER (object));
-
-        xsettings_manager = GSD_XSETTINGS_MANAGER (object);
-
-        g_return_if_fail (xsettings_manager != NULL);
-
-        G_OBJECT_CLASS (gsd_xsettings_manager_parent_class)->finalize (object);
-}
-
 static GVariant *
 handle_get_property (GDBusConnection *connection,
                      const gchar *sender,
-- 
GitLab

