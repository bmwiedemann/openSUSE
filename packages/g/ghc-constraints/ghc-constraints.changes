-------------------------------------------------------------------
Mon Apr 29 13:47:12 UTC 2024 - Peter Simons <psimons@suse.com>

- Update constraints to version 0.14.1.
  0.14.1 [2024.04.29]
  -------------------
  * Remove an unused dependency on the `type-equality` library.

-------------------------------------------------------------------
Wed Oct 11 10:55:39 UTC 2023 - Peter Simons <psimons@suse.com>

- Update constraints to version 0.14.
  0.14 [2023.10.11]
  -----------------
  * Drop support for GHCs older than 8.6.
  * The `forall` function in `Data.Constraint.Forall` has been renamed to
    `forall_`, since a future version of GHC will make the use of `forall` as
    an identifier an error.
  * Implement `Data.Constraint.Forall` using `QuantifiedConstraints`.
  * Remove `Lifting` instances for `ErrorT` and `ListT`, which were removed
    in `transformers-0.6.*`.
  * Add a `c => Boring (Dict c)` instance.
  * Add the `Data.Constraint.Char` module, which contains utilities for working
    with `KnownChar` constraints. This module is only available on GHC 9.2 or
    later.
  * Add `unsafeAxiom` to `Data.Constraint.Unsafe`.
  * Add `unsafeSChar`, `unsafeSNat`, and `unsafeSSymbol` to
    `Data.Constraint.Unsafe` when building with `base-4.18` (GHC 9.6) or later.

-------------------------------------------------------------------
Tue Aug  8 12:04:26 UTC 2023 - Peter Simons <psimons@suse.com>

- Update constraints to version 0.13.4 revision 1.
  Upstream has revised the Cabal build instructions on Hackage.

-------------------------------------------------------------------
Thu Mar 30 17:06:20 UTC 2023 - Peter Simons <psimons@suse.com>

- Updated spec file to conform with ghc-rpm-macros-2.5.2.

-------------------------------------------------------------------
Fri May 20 00:12:35 UTC 2022 - Peter Simons <psimons@suse.com>

- Update constraints to version 0.13.4.
  0.13.4 [2022.05.19]
  -------------------
  * Correct the CPP introduced in `constraints-0.13.3` such that it works when
    building with `mtl-2.3.*` or later combined with `transformers < 0.6`.

-------------------------------------------------------------------
Mon Jan 31 12:14:21 UTC 2022 - Peter Simons <psimons@suse.com>

- Update constraints to version 0.13.3.
  0.13.3 [2022.01.31]
  -------------------
  * Allow building with `transformers-0.6.*` and `mtl-2.3.*`.

-------------------------------------------------------------------
Tue Nov 16 19:51:32 UTC 2021 - psimons@suse.com

- Update constraints to version 0.13.2 revision 1.
  Upstream has revised the Cabal build instructions on Hackage.

-------------------------------------------------------------------
Thu Nov 11 12:32:20 UTC 2021 - psimons@suse.com

- Update constraints to version 0.13.2.
  0.13.2 [2021.11.10]
  -------------------
  * Allow building on GHC HEAD.

-------------------------------------------------------------------
Mon Nov  1 08:24:20 UTC 2021 - psimons@suse.com

- Update constraints to version 0.13.1.
  0.13.1 [2021.10.31]
  -------------------
  * Allow building with GHC 9.2.

-------------------------------------------------------------------
Tue Oct 19 07:21:55 UTC 2021 - psimons@suse.com

- Update constraints to version 0.13 revision 1.
  Upstream has revised the Cabal build instructions on Hackage.

-------------------------------------------------------------------
Fri Feb 19 23:03:15 UTC 2021 - psimons@suse.com

- Update constraints to version 0.13.
  0.13 [2021.02.17]
  -----------------
  * `Data.Constraint.Symbol` now reexports the `GHC.TypeLits.AppendSymbol` type
    family from recent versions of `base` (or, on old versions of `base`, it
    defines a backwards-compatibile version of `AppendSymbol`). The existing
    `(++)` type family for `Data.Constraint.Symbol` is now a synonym for
    `AppendSymbol`.

    This is technically a breaking change, as `(++)` was previously defined like
    so:

    ```hs
    type family (++) :: Symbol -> Symbol -> Symbol
    ```

    This meant that `(++)` could be partially applied. However, for compatibility
    with the way that `AppendSymbol` is defined, `(++)` is now defined like so:

    ```hs
    type m ++ n = AppendSymbol m n
    ```

    As a result, `(++)` can no longer be partially applied.
  * Make the `(++)` type family in `Data.Constraint.Symbol` be `infixr 5`.
  * Add `implied :: (a => b) -> (a :- b)` to `Data.Constraint`, which converts
    a quantified constraint into an entailment. This is only available when
    compiled with GHC 8.6 or later.

-------------------------------------------------------------------
Thu Dec 17 12:20:00 UTC 2020 - Ondřej Súkup <mimi.vx@gmail.com>
 
- disable %{ix86} build
 
-------------------------------------------------------------------
Tue Aug 18 10:44:26 UTC 2020 - Peter Simons <psimons@suse.com>

- Replace %setup -q with the more modern %autosetup macro.

-------------------------------------------------------------------
Tue Jun  9 09:26:13 UTC 2020 - psimons@suse.com

- Add constraints at version 0.12.

