From 987ab0dfbe7ef42bb6386fb7b428d3b965ba6d2b Mon Sep 17 00:00:00 2001
From: Michael Chang <mchang@suse.com>
Date: Mon, 7 Sep 2020 17:02:57 +0800
Subject: [PATCH] efi/linux: provide linux command

The linux kernel's efi handover entry point is used to boot efistub of
the linux kernel. Since then the efistub has been improved with many new
features and fixes that ordinary 32-bit entry point cannot provide.

Besides, nearly every x86 efi kernel is built with efistub enabled so it
is of little value to keep 32-bit entry as default to boot kernel
without needed kconfig options enabled.

For all good reasons, making efi handover the default entry point for
booting kernel in x86 efi platform so that linux command works in the
same way to linuxefi. This can also reduce the complexity of providing
general grub configuation for x86 system due to the linux command may
not be available in signed image for UEFI Secure Boot and linuxefi is
not available for leagcy bios booting.

Signed-off-by: Michael Chang <mchang@suse.com>
---
 grub-core/Makefile.core.def       |  6 ++++--
 grub-core/gensyminfo.sh.in        |  3 +++
 grub-core/loader/i386/efi/linux.c | 17 +++++++++++++----
 3 files changed, 20 insertions(+), 6 deletions(-)

--- a/grub-core/Makefile.core.def
+++ b/grub-core/Makefile.core.def
@@ -1840,7 +1840,9 @@
 
 module = {
   name = linux;
-  x86 = loader/i386/linux.c;
+  i386_pc = loader/i386/linux.c;
+  i386_efi = loader/i386/efi/linux.c;
+  x86_64_efi = loader/i386/efi/linux.c;
   i386_xen_pvh = loader/i386/linux.c;
   xen = loader/i386/xen.c;
   i386_pc = lib/i386/pc/vesa_modes_table.c;
@@ -1856,8 +1858,6 @@
   loongarch64 = loader/efi/linux.c;
   riscv32 = loader/efi/linux.c;
   riscv64 = loader/efi/linux.c;
-  i386_efi = loader/efi/linux.c;
-  x86_64_efi = loader/efi/linux.c;
   emu = loader/emu/linux.c;
   common = loader/linux.c;
 };
@@ -1922,7 +1922,7 @@
 
 module = {
   name = linuxefi;
-  efi = loader/i386/efi/linux.c;
+  efi = lib/fake_module.c;
   enable = i386_efi;
   enable = x86_64_efi;
 };
--- a/grub-core/gensyminfo.sh.in
+++ b/grub-core/gensyminfo.sh.in
@@ -35,3 +35,6 @@
 
 # Print all undefined symbols used by module
 @TARGET_NM@ -u @TARGET_NMFLAGS_MINUS_P@ -p $module | sed "s@^\([^ ]*\).*@undefined $modname \1@g"
+
+# Specify linuxefi module should load default linux
+test "$modname" = "linuxefi" && echo "undefined $modname grub_initrd_init" || true
--- a/grub-core/loader/i386/efi/linux.c
+++ b/grub-core/loader/i386/efi/linux.c
@@ -333,20 +333,29 @@
 }
 
 static grub_command_t cmd_linux, cmd_initrd;
+static grub_command_t cmd_linuxefi, cmd_initrdefi;
 
-GRUB_MOD_INIT(linuxefi)
+GRUB_MOD_INIT(linux)
 {
-  cmd_linux =
+  cmd_linuxefi =
     grub_register_command ("linuxefi", grub_cmd_linux,
                            0, N_("Load Linux."));
-  cmd_initrd =
+  cmd_initrdefi =
     grub_register_command ("initrdefi", grub_cmd_initrd,
                            0, N_("Load initrd."));
+  cmd_linux =
+    grub_register_command ("linux", grub_cmd_linux,
+                           0, N_("Load Linux."));
+  cmd_initrd =
+    grub_register_command ("initrd", grub_cmd_initrd,
+                           0, N_("Load initrd."));
   my_mod = mod;
 }
 
-GRUB_MOD_FINI(linuxefi)
+GRUB_MOD_FINI(linux)
 {
+  grub_unregister_command (cmd_linuxefi);
+  grub_unregister_command (cmd_initrdefi);
   grub_unregister_command (cmd_linux);
   grub_unregister_command (cmd_initrd);
 }
