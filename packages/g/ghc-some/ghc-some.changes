-------------------------------------------------------------------
Tue Oct 24 21:03:41 UTC 2023 - Peter Simons <psimons@suse.com>

- Update some to version 1.0.6.
  # 1.0.6

  - Add instances for `SSymbol`, `SNat` and `SChar` from `base >=4.18.0.0'

-------------------------------------------------------------------
Wed Oct 11 09:21:38 UTC 2023 - Peter Simons <psimons@suse.com>

- Update some to version 1.0.5 revision 1.
  Upstream has revised the Cabal build instructions on Hackage.

-------------------------------------------------------------------
Thu Mar 30 17:08:21 UTC 2023 - Peter Simons <psimons@suse.com>

- Updated spec file to conform with ghc-rpm-macros-2.5.2.

-------------------------------------------------------------------
Wed Mar 15 09:33:16 UTC 2023 - Peter Simons <psimons@suse.com>

- Update some to version 1.0.5.
  # 1.0.5

  - Add EqP and OrdP classes.
    These are strong versions of Eq1 and Ord1, and on the other hand
    weaker versions of `GEq` and `GCompare`.
    They are exactly what's needed for `Eq` and `Ord` instances of `Some`.

    The naming is unfortunate: `GShow` would be better named `ShowP`,
    as it's similar version of `Show1`.

    Note: we could add `ReadP` with `readsPrecP :: Int -> ReadS (t a)` method,
    but it will barely have any instances.
    `GRead` is different, as it can reify the type index for many types,
    e.g. for the singletons.

    In some future there will be major version of `some` with following
    breaking changes:
    - `EqP` and `OrdP` will become superclasses of `GEq` and `GCompare`
    - `Eq (Some t)` will require `EqP t`, similarly for `Ord` and `OrdP`.
    - `GShow` will get `forall a. Show (f a)` superclass. (This will cause removal of `Product` and `Sum` instances for `base <4.18`).

    To ease future transition you may
    - Define `EqP` and `OrdP` instances for your types.
      The `defaultEq` and `defaultCompare` methods can be used to define
      `eqp` and `comparep` from `GEq` and `GCompare` instances respectively.
    - Move to use `GHC.Generics.:*:` and `:+:` instead of `Data.Functor.Product` and `Sum`, as these have better `Eq` and `Ord` instances.

-------------------------------------------------------------------
Wed Oct  5 08:34:30 UTC 2022 - Peter Simons <psimons@suse.com>

- Update some to version 1.0.4.1.
  # 1.0.4.1

  - Drop support for GHC before 8.6

-------------------------------------------------------------------
Wed Aug 10 17:14:47 UTC 2022 - Peter Simons <psimons@suse.com>

- Update some to version 1.0.4 revision 1.
  Upstream has revised the Cabal build instructions on Hackage.

-------------------------------------------------------------------
Fri Jun 17 13:03:16 UTC 2022 - Peter Simons <psimons@suse.com>

- Update some to version 1.0.4.
  # 1.0.4

  - Add instances for `(:~~:)`
  - Add instances for `:+:` and `:*:`
  - Add `defaultGeq :: GCompare f => f a -> f b -> Maybe (a :~: b)`
  - Add `defaultGshowsPrec :: Show (t a) => Int -> t a -> ShowS`

-------------------------------------------------------------------
Sat Nov 20 17:29:50 UTC 2021 - psimons@suse.com

- Update some to version 1.0.3 revision 2.
  Upstream has revised the Cabal build instructions on Hackage.

-------------------------------------------------------------------
Mon Nov  1 08:29:19 UTC 2021 - psimons@suse.com

- Update some to version 1.0.3 revision 1.
  Upstream has revised the Cabal build instructions on Hackage.

-------------------------------------------------------------------
Mon Apr  5 14:46:20 UTC 2021 - psimons@suse.com

- Add some at version 1.0.3.

