From 9b1aac32bcf08e7689c7cfd969ca3dae6d23b704 Mon Sep 17 00:00:00 2001
From: nick black <dankamongmen@gmail.com>
Date: Fri, 21 Aug 2020 02:06:37 -0400
Subject: [PATCH 11/13] notcurses: restore color, glorious color #85

---
 src/notcurses/notcurses.c | 289 +++++++++++++++++++-------------------
 1 file changed, 146 insertions(+), 143 deletions(-)

diff --git a/src/notcurses/notcurses.c b/src/notcurses/notcurses.c
index 0eee918..523ba30 100644
--- a/src/notcurses/notcurses.c
+++ b/src/notcurses/notcurses.c
@@ -94,6 +94,10 @@ struct panel_state {
   struct ncplane *p;
 };
 
+// inherited jank from ncurses->notcurses conversion, eliminate me FIXME
+#define BOLD (NCSTYLE_BOLD << 8)
+#define REVERSE (NCSTYLE_REVERSE << 8)
+
 #define PANEL_STATE_INITIALIZER { .p = NULL, }
 
 static struct panel_state *splash;
@@ -339,7 +343,6 @@ compat_set_fg(struct ncplane* nc, int pair){
       ncplane_set_fg_rgb(nc, 95, 255, 215); break;
     default:
       ncplane_set_fg_rgb(nc, 255, 255, 255);
-      fprintf(stderr, "HANDLE COLOR %d\n", pair);
       break;
   }
 }
@@ -353,7 +356,7 @@ static void
 compat_set_fg_all(struct ncplane* nc, int attr){
   switch(attr){
     case SUBDISPLAY_ATTR:
-      ncplane_styles_set(nc, NCSTYLE_BOLD);
+      ncplane_styles_set(nc, BOLD);
       compat_set_fg(nc, SUBDISPLAY_COLOR);
       break;
     case SUBDISPLAY_INVAL_ATTR:
@@ -648,22 +651,22 @@ bevel_all(struct ncplane* nc){
 
 static int
 cwattrset(struct ncplane* n, int style){
-  ncplane_styles_set(n, style);
-  compat_set_fg(n, style & ~NCSTYLE_MASK);
+  ncplane_styles_set(n, style >> 8);
+  compat_set_fg(n, style & 0xff);
   return 0;
 }
 
 static int
 cwattroff(struct ncplane* n, int style){
-  ncplane_styles_off(n, style);
-  compat_set_fg(n, style & ~NCSTYLE_MASK);
+  ncplane_styles_off(n, style >> 8);
+  compat_set_fg(n, style & 0xff);
   return 0;
 }
 
 static int
 cwattron(struct ncplane* n, int style){
-  ncplane_styles_on(n, style);
-  compat_set_fg(n, style & ~NCSTYLE_MASK);
+  ncplane_styles_on(n, style >> 8);
+  compat_set_fg(n, style & 0xff);
   return 0;
 }
 
@@ -725,7 +728,7 @@ draw_main_window(struct ncplane* n){
   ncplane_cursor_yx(n, &y, &x);
   assert(x >= 0);
   cols -= x + 1;
-  cwattron(n, NCSTYLE_BOLD | STATUS_COLOR);
+  cwattron(n, BOLD | STATUS_COLOR);
   cwprintw(n, " %-*.*s", cols, cols, statusmsg);
 }
 
@@ -832,10 +835,10 @@ new_display_panel(struct ncplane* nc, struct panel_state* ps,
     locked_diag("Couldn't create subpanel, uh-oh");
     return -1;
   }
-  cwattron(ps->p, NCSTYLE_BOLD);
+  cwattron(ps->p, BOLD);
   compat_set_fg(ps->p, borderpair);
   bevel_all(ps->p);
-  cwattroff(ps->p, NCSTYLE_BOLD);
+  cwattroff(ps->p, BOLD);
   compat_set_fg(ps->p, PHEADING_COLOR);
   if(hstr){
     ncplane_putwstr_yx(ps->p, 0, START_COL * 2, hstr);
@@ -877,7 +880,7 @@ print_blockbar(struct ncplane* n, const blockobj* bo, int y, int sx, int ex, int
   if(d->mnttype && (d->layout != LAYOUT_NONE || !d->blkdev.pttable)){
     int co = mnttype_aggregablep(d->mnttype) ? PART_COLOR0 : FS_COLOR;
 
-    cwattrset(n, NCSTYLE_BOLD|co);
+    cwattrset(n, BOLD|co);
     qprefix(zs, 1, pre, 1);
     if(!d->mnt.count || swprintf(wbuf, wchars, L" %s%s%ls%s%ls%s%s%sat %s ",
       d->label ? "" : "nameless ",
@@ -909,13 +912,13 @@ print_blockbar(struct ncplane* n, const blockobj* bo, int y, int sx, int ex, int
     ncplane_putwstr_yx(n, y, ex - 1, L" ");
     selstr = d->name;
   }else if(d->layout == LAYOUT_NONE && d->blkdev.unloaded){
-    cwattrset(n, NCSTYLE_BOLD|OPTICAL_COLOR);
+    cwattrset(n, BOLD|OPTICAL_COLOR);
     selstr = "No media detected in drive";
     cmvwprintw(n, y, sx, "%-*.*s", ex - sx, ex - sx, selstr);
   }else if((d->layout == LAYOUT_NONE && d->blkdev.pttable == NULL) ||
     (d->layout == LAYOUT_MDADM && d->mddev.pttable == NULL) ||
     (d->layout == LAYOUT_DM && d->dmdev.pttable == NULL)){
-    cwattrset(n, NCSTYLE_BOLD|EMPTY_COLOR);
+    cwattrset(n, BOLD|EMPTY_COLOR);
     selstr = d->layout == LAYOUT_NONE ? "unpartitioned space" :
         "unpartitionable space";
     snprintf(buf, sizeof(buf), " %s %s ", qprefix(d->size, 1, pre, 1), selstr) < (int)sizeof(buf);
@@ -926,9 +929,9 @@ print_blockbar(struct ncplane* n, const blockobj* bo, int y, int sx, int ex, int
   }
   if((z = bo->zchain) == NULL){
     if(selected){
-      cwattron(n, NCSTYLE_REVERSE);
+      cwattron(n, REVERSE);
       cmvwprintw(n, y - 1, sx + 1, "⇗⇨⇨⇨%.*s", (int)(ex - (sx + 5)), selstr);
-      cwattroff(n, NCSTYLE_REVERSE);
+      cwattroff(n, REVERSE);
     }
     return;
   }
@@ -950,7 +953,7 @@ print_blockbar(struct ncplane* n, const blockobj* bo, int y, int sx, int ex, int
 
       if(selected && z == bo->zone){
         selstr = repstr;
-        cwattrset(n, NCSTYLE_BOLD|NCSTYLE_UNDERLINE|co);
+        cwattrset(n, BOLD|NCSTYLE_UNDERLINE|co);
       }else{
         cwattrset(n, co);
       }
@@ -963,15 +966,15 @@ print_blockbar(struct ncplane* n, const blockobj* bo, int y, int sx, int ex, int
     }else{ // dedicated partition
       if(selected && z == bo->zone){ // partition and device are selected
         if(targeted_p(z->p)){
-          cwattrset(n, NCSTYLE_BOLD|NCSTYLE_UNDERLINE|targco);
+          cwattrset(n, BOLD|NCSTYLE_UNDERLINE|targco);
           targco = next_targco(targco);
         }else if(z->p->mnt.count){
-          cwattrset(n, NCSTYLE_BOLD|NCSTYLE_UNDERLINE|mountco);
+          cwattrset(n, BOLD|NCSTYLE_UNDERLINE|mountco);
           mountco = next_mountco(mountco);
         }else if(z->p->mnttype && !mnttype_aggregablep(z->p->mnttype)){
-          cwattrset(n, NCSTYLE_BOLD|NCSTYLE_UNDERLINE|FS_COLOR);
+          cwattrset(n, BOLD|NCSTYLE_UNDERLINE|FS_COLOR);
         }else{
-          cwattrset(n, NCSTYLE_BOLD|NCSTYLE_UNDERLINE|partco);
+          cwattrset(n, BOLD|NCSTYLE_UNDERLINE|partco);
           partco = next_partco(partco);
         }
         // FIXME need to store pname as multibyte char *
@@ -1004,7 +1007,7 @@ print_blockbar(struct ncplane* n, const blockobj* bo, int y, int sx, int ex, int
         }
       }
       if(z->p->partdev.alignment < d->physsec){ // misaligned!
-        cwattrset(n, NCSTYLE_BOLD|FUCKED_COLOR);
+        cwattrset(n, BOLD|FUCKED_COLOR);
       }
       if(z->p->mnttype){
         if((!z->p->mnt.count || swprintf(wbuf, wchars - 2, L"%s at %s (%s)", z->p->mnttype, z->p->mnt.list[0], pre) >= wchars - 2)){
@@ -1034,7 +1037,7 @@ print_blockbar(struct ncplane* n, const blockobj* bo, int y, int sx, int ex, int
         break;
       }
     }
-    cwattron(n, NCSTYLE_REVERSE);
+    cwattron(n, REVERSE);
     if(selstr){
       if(och < ex / 2u){
         cmvwprintw(n, y - 1, och, "⇗⇨⇨⇨%.*s", (int)(ex - (off + strlen(selstr) + 4)), selstr);
@@ -1042,7 +1045,7 @@ print_blockbar(struct ncplane* n, const blockobj* bo, int y, int sx, int ex, int
         cmvwprintw(n, y - 1, off - 4 - strlen(selstr), "%s⇦⇦⇦⇖", selstr);
       }
     }
-    cwattroff(n, NCSTYLE_REVERSE);
+    cwattroff(n, REVERSE);
     // Truncate it at whitespace until it's small enough to fit
     while(wcslen(wbuf) && wcslen(wbuf) + 2 > (off - och + 1)){
       wchar_t *wtrunc = wcsrchr(wbuf, L' ');
@@ -1056,7 +1059,7 @@ print_blockbar(struct ncplane* n, const blockobj* bo, int y, int sx, int ex, int
     if(wcslen(wbuf)){
       size_t start = och + ((off - och + 1) - wcslen(wbuf)) / 2;
 
-      cwattron(n, NCSTYLE_BOLD);
+      cwattron(n, BOLD);
       ncplane_putwstr_yx(n, y, start, wbuf);
       ncplane_putwstr_yx(n, y, start - 1, L" ");
       ncplane_putwstr_yx(n, y, start + wcslen(wbuf), L" ");
@@ -1120,7 +1123,7 @@ case LAYOUT_NONE:
         if(bo->d->size){
           line += 2;
         }else if(selected){
-          cwattron(n, NCSTYLE_REVERSE);
+          cwattron(n, REVERSE);
         }
         qprefix(bo->d->size, 1, buf, 0);
         cmvwprintw(n, line, 1, "%11.11s  %-16.16s %4.4s %*s %4uB %-6.6s%-16.16s %4.4s %-*.*s",
@@ -1155,7 +1158,7 @@ case LAYOUT_MDADM:
         if(bo->d->size){
           line += 2;
         }else if(selected){
-          cwattron(n, NCSTYLE_REVERSE);
+          cwattron(n, REVERSE);
         }
         qprefix(bo->d->size, 1, buf, 0);
         cmvwprintw(n, line, 1, "%11.11s  %-16.16s %4.4s %*s %4uB %-6.6s%-16.16s %4.4s %-*.*s",
@@ -1183,7 +1186,7 @@ case LAYOUT_DM:
         if(bo->d->size){
           line += 2;
         }else if(selected){
-          cwattron(n, NCSTYLE_REVERSE);
+          cwattron(n, REVERSE);
         }
         qprefix(bo->d->size, 1, buf, 0);
         cmvwprintw(n, line, 1, "%11.11s  %-16.16s %4.4s %*s %4uB %-6.6s%-16.16s %4.4s %-*.*s",
@@ -1212,7 +1215,7 @@ case LAYOUT_ZPOOL:
         if(bo->d->size){
           line += 2;
         }else if(selected){
-          cwattron(n, NCSTYLE_REVERSE);
+          cwattron(n, REVERSE);
         }
         qprefix(bo->d->size, 1, buf, 0);
         cmvwprintw(n, line, 1, "%11.11s  %-16.16s %4ju %*s %4uB %-6.6s%-16.16s %4.4s %-*.*s",
@@ -1235,8 +1238,8 @@ case LAYOUT_ZPOOL:
   if(bo->d->size == 0){
     return 1;
   }
-  cwattroff(n, NCSTYLE_REVERSE);
-  cwattrset(n, NCSTYLE_BOLD|SUBDISPLAY_COLOR);
+  cwattroff(n, REVERSE);
+  cwattrset(n, BOLD|SUBDISPLAY_COLOR);
 
   // Box-diagram (3-line) mode. Print the name on the first line.
   if(line + !!drawfromtop >= 1){
@@ -1249,19 +1252,19 @@ case LAYOUT_ZPOOL:
     wchar_t rep = L' ';
     if(bo->d->blkdev.smart >= 0){
       if(bo->d->blkdev.smart == SK_SMART_OVERALL_GOOD){
-        cwattrset(n, NCSTYLE_BOLD|GREEN_COLOR);
+        cwattrset(n, BOLD|GREEN_COLOR);
         rep = L'✔';
       }else if(bo->d->blkdev.smart != SK_SMART_OVERALL_BAD_STATUS
           && bo->d->blkdev.smart != SK_SMART_OVERALL_BAD_SECTOR_MANY){
-        cwattrset(n, NCSTYLE_BOLD|ORANGE_COLOR);
+        cwattrset(n, BOLD|ORANGE_COLOR);
         rep = L'☠';
       }else{
-        cwattrset(n, NCSTYLE_BOLD|FUCKED_COLOR);
+        cwattrset(n, BOLD|FUCKED_COLOR);
         rep = L'✗';
       }
     }
     cmvwprintw(n, line + 1, START_COL, "%lc", rep);
-    cwattrset(n, NCSTYLE_BOLD|SUBDISPLAY_COLOR);
+    cwattrset(n, BOLD|SUBDISPLAY_COLOR);
     if(strlen(rolestr)){
       cwprintw(n, "%10.10s", rolestr);
     }else{
@@ -1274,9 +1277,9 @@ case LAYOUT_ZPOOL:
     if(bo->d->layout == LAYOUT_NONE){
       if(bo->d->blkdev.celsius && bo->d->blkdev.celsius < 100u){
         if(bo->d->blkdev.celsius >= 60u){
-          cwattrset(n, NCSTYLE_BOLD|FUCKED_COLOR);
+          cwattrset(n, BOLD|FUCKED_COLOR);
         }else if(bo->d->blkdev.celsius >= 40u){
-          cwattrset(n, NCSTYLE_BOLD|ORANGE_COLOR);
+          cwattrset(n, BOLD|ORANGE_COLOR);
         }else{
           cwattrset(n, GREEN_COLOR);
         }
@@ -1287,7 +1290,7 @@ case LAYOUT_ZPOOL:
       }
     }else if(bo->d->layout == LAYOUT_MDADM){
       if(bo->d->mddev.degraded){
-        cwattrset(n, NCSTYLE_BOLD|FUCKED_COLOR);
+        cwattrset(n, BOLD|FUCKED_COLOR);
         cmvwprintw(n, sumline, START_COL,
             "%1lux☠ ", bo->d->mddev.degraded);
       }else{
@@ -1300,7 +1303,7 @@ case LAYOUT_ZPOOL:
       cmvwprintw(n, sumline, START_COL, "up  ");
     }else if(bo->d->layout == LAYOUT_ZPOOL){
       if(bo->d->zpool.state != POOL_STATE_ACTIVE){
-        cwattrset(n, NCSTYLE_BOLD|FUCKED_COLOR);
+        cwattrset(n, BOLD|FUCKED_COLOR);
         cmvwprintw(n, sumline, START_COL, "☠☠☠ ");
       }else{
         cwattrset(n, GREEN_COLOR);
@@ -1324,9 +1327,9 @@ case LAYOUT_ZPOOL:
     }
   }
 
-  cwattrset(n, NCSTYLE_BOLD | DBORDER_COLOR);
+  cwattrset(n, BOLD | DBORDER_COLOR);
   if(selected){
-    cwattron(n, NCSTYLE_REVERSE);
+    cwattron(n, REVERSE);
   }
   if(line + !!drawfromtop >= 1){
     ncplane_putwstr_yx(n, line, START_COL + 10 + 1, L"╭");
@@ -1342,10 +1345,10 @@ case LAYOUT_ZPOOL:
     print_blockbar(n, bo, line, START_COL + 10 + 2,
           cols - START_COL - 1, selected);
   }
-  attr = NCSTYLE_BOLD | DBORDER_COLOR;
+  attr = BOLD | DBORDER_COLOR;
   cwattrset(n, attr);
   if(selected){
-    cwattron(n, NCSTYLE_REVERSE);
+    cwattron(n, REVERSE);
   }
   if(line + !!drawfromtop >= 1){
     ncplane_putwstr_yx(n, line, cols - START_COL * 2, L"│");
@@ -1380,9 +1383,9 @@ adapter_box(const adapterstate* as, struct ncplane* nc, int abovetop,
   ncplane_dim_yx(nc, NULL, &cols);
   --cols;
   if(current){
-    hcolor = UHEADING_COLOR; // plus NCSTYLE_BOLD
+    hcolor = UHEADING_COLOR; // plus BOLD
     bcolor = SELBORDER_COLOR;
-    attrs = NCSTYLE_BOLD;
+    attrs = BOLD;
   }else{
     hcolor = UNHEADING_COLOR;;
     bcolor = UBORDER_COLOR;
@@ -1404,9 +1407,9 @@ adapter_box(const adapterstate* as, struct ncplane* nc, int abovetop,
   ncplane_set_bg_default(nc);
   if(abovetop == 0){
     if(current){
-      cwattron(nc, NCSTYLE_BOLD);
+      cwattron(nc, BOLD);
     }else{
-      cwattroff(nc, NCSTYLE_BOLD);
+      cwattroff(nc, BOLD);
     }
     cmvwprintw(nc, 0, 7, "%ls", L"[");
     compat_set_fg(nc, hcolor);
@@ -1433,7 +1436,7 @@ adapter_box(const adapterstate* as, struct ncplane* nc, int abovetop,
     }
     cwattron(nc, bcolor);
     cwprintw(nc, "]");
-    cwattron(nc, NCSTYLE_BOLD);
+    cwattron(nc, BOLD);
     ncplane_cursor_move_yx(nc, 0, cols - 5);
     ncplane_putwstr(nc, as->expansion != EXPANSION_MAX ? L"[+]" : L"[-]");
     cwattron(nc, attrs);
@@ -1442,9 +1445,9 @@ adapter_box(const adapterstate* as, struct ncplane* nc, int abovetop,
     if(as->c->bus == BUS_PCIe){
       compat_set_fg(nc, bcolor);
       if(current){
-        cwattron(nc, NCSTYLE_BOLD);
+        cwattron(nc, BOLD);
       }else{
-        cwattroff(nc, NCSTYLE_BOLD);
+        cwattroff(nc, BOLD);
       }
       cmvwprintw(nc, rows - 1, 6, "[");
       compat_set_fg(nc, hcolor);
@@ -1587,7 +1590,7 @@ struct panel_state* show_splash(const wchar_t* msg){
   }
   int cols;
   ncplane_dim_yx(ps->p, NULL, &cols);
-  cwattrset(ps->p, NCSTYLE_BOLD|SPLASHTEXT_COLOR);
+  cwattrset(ps->p, BOLD|SPLASHTEXT_COLOR);
   cmvwhline(ps->p, 1, 1, " ", cols - 2);
   cmvwhline(ps->p, 2, 1, " ", cols - 2);
   ncplane_putwstr_yx(ps->p, 2, 2, msg);
@@ -1688,7 +1691,7 @@ multiform_options(struct form_state *fs){
   assert(fs->formtype == FORM_MULTISELECT);
   ncplane_dim_yx(fsw, &maxz, &cols);
   cwattrset(fsw, FORMBORDER_COLOR);
-  cwattron(fsw, NCSTYLE_BOLD);
+  cwattron(fsw, BOLD);
   ncplane_putwstr_yx(fsw, 1, 1, L"╭");
   ncplane_putwstr_yx(fsw, 1, fs->longop + 4, L"╮");
   maxz -= 3;
@@ -1697,7 +1700,7 @@ multiform_options(struct form_state *fs){
 
     assert(op >= 0);
     assert(op < fs->opcount);
-    cwattroff(fsw, NCSTYLE_BOLD);
+    cwattroff(fsw, BOLD);
     compat_set_fg(fsw, FORMBORDER_COLOR);
     if(fs->selectno >= z){
       cmvwprintw(fsw, z + 1, START_COL * 2, "%d", z);
@@ -1705,12 +1708,12 @@ multiform_options(struct form_state *fs){
       cmvwprintw(fsw, z + 2, START_COL * 2, "%d", z);
     }
     if(z < fs->opcount + 1){
-      cwattron(fsw, NCSTYLE_BOLD);
+      cwattron(fsw, BOLD);
       compat_set_fg(fsw, FORMTEXT_COLOR);
       cmvwprintw(fsw, z + 1, START_COL * 2 + fs->longop + 4, "%-*.*s ",
                  fs->longop, fs->longop, opstrs[op].option);
       if(op == fs->idx){
-        cwattron(fsw, NCSTYLE_REVERSE);
+        cwattron(fsw, REVERSE);
       }
       compat_set_fg(fsw, INPUT_COLOR);
       for(selidx = 0 ; selidx < fs->selections ; ++selidx){
@@ -1721,11 +1724,11 @@ multiform_options(struct form_state *fs){
       }
       cwprintw(fsw, "%-*.*s", cols - fs->longop * 2 - 9,
         cols - fs->longop * 2 - 9, opstrs[op].desc);
-      cwattroff(fsw, NCSTYLE_REVERSE);
+      cwattroff(fsw, REVERSE);
     }
   }
   cwattrset(fsw, FORMBORDER_COLOR);
-  cwattron(fsw, NCSTYLE_BOLD);
+  cwattron(fsw, BOLD);
   for(z = 0 ; z < fs->selections ; ++z){
     ncplane_putstr_yx(fsw, z >= fs->selectno ? 3 + z : 2 + z, 4, fs->selarray[z]);
   }
@@ -1742,18 +1745,18 @@ check_options(struct form_state *fs){
   ncplane_dim_yx(fs->p, &maxz, &cols);
   maxz -= 3;
   cwattrset(fs->p, FORMBORDER_COLOR);
-  cwattron(fs->p, NCSTYLE_BOLD);
+  cwattron(fs->p, BOLD);
   for(z = 1 ; z < maxz ; ++z){
     int op = ((z - 1) + fs->scrolloff) % fs->opcount;
 
     assert(op >= 0);
     assert(op < fs->opcount);
-    cwattroff(fs->p, NCSTYLE_BOLD);
+    cwattroff(fs->p, BOLD);
     compat_set_fg(fs->p, FORMBORDER_COLOR);
     if(z < fs->opcount + 1){
       wchar_t ballot = L'☐';
 
-      cwattron(fs->p, NCSTYLE_BOLD);
+      cwattron(fs->p, BOLD);
       compat_set_fg(fs->p, FORMTEXT_COLOR);
       for(selidx = 0 ; selidx < fs->selections ; ++selidx){
         if(strcmp(opstrs[op].option, fs->selarray[selidx]) == 0){
@@ -1762,7 +1765,7 @@ check_options(struct form_state *fs){
         }
       }
       if(op == fs->idx){
-        cwattron(fs->p, NCSTYLE_REVERSE);
+        cwattron(fs->p, REVERSE);
       }else{
         compat_set_fg(fs->p, INPUT_COLOR);
       }
@@ -1770,7 +1773,7 @@ check_options(struct form_state *fs){
         ballot, fs->longop, fs->longop, opstrs[op].option);
       cwprintw(fs->p, "%-*.*s", cols - fs->longop - 7,
         cols - fs->longop - 7, opstrs[op].desc);
-      cwattroff(fs->p, NCSTYLE_REVERSE);
+      cwattroff(fs->p, REVERSE);
     }
   }
   cwattrset(fs->p, FORMBORDER_COLOR);
@@ -1785,7 +1788,7 @@ form_options(struct form_state *fs){
     return;
   }
   ncplane_dim_yx(fs->p, &rows, &cols);
-  cwattron(fs->p, NCSTYLE_BOLD);
+  cwattron(fs->p, BOLD);
   for(z = 1 ; z < rows - 3 ; ++z){
     int op = ((z - 1) + fs->scrolloff) % fs->opcount;
 
@@ -1795,12 +1798,12 @@ form_options(struct form_state *fs){
     cmvwprintw(fs->p, z + 1, START_COL * 2, "%-*.*s ",
       fs->longop, fs->longop, opstrs[op].option);
     if(op == fs->idx){
-      cwattron(fs->p, NCSTYLE_REVERSE);
+      cwattron(fs->p, REVERSE);
     }
     compat_set_fg(fs->p, INPUT_COLOR);
     cwprintw(fs->p, "%-*.*s", cols - fs->longop - 1 - START_COL * 4,
       cols - fs->longop - 1 - START_COL * 4, opstrs[op].desc);
-    cwattroff(fs->p, NCSTYLE_REVERSE);
+    cwattroff(fs->p, REVERSE);
   }
 }
 
@@ -1927,14 +1930,14 @@ void raise_multiform(const char *str, void (*fxn)(const char *, char **, int, in
   fs->opcount = ops;
   fs->selarray = selarray;
   fs->selections = selections;
-  cwattroff(fs->p, NCSTYLE_BOLD);
+  cwattroff(fs->p, BOLD);
   compat_set_fg(fs->p, FORMBORDER_COLOR);
   bevel_all(fs->p);
-  cwattron(fs->p, NCSTYLE_BOLD);
+  cwattron(fs->p, BOLD);
   cmvwprintw(fs->p, 0, cols - strlen(fs->boxstr) - 4, "%s", fs->boxstr);
   ncplane_putwstr_yx(fs->p, rows - 1, cols - wcslen(ESCSTR) - 1, ESCSTR);
 #undef ESCSTR
-  cwattroff(fs->p, NCSTYLE_BOLD);
+  cwattroff(fs->p, BOLD);
   fs->longop = longop;
   fs->ops = opstrs;
   fs->selectno = selectno;
@@ -2008,16 +2011,16 @@ raise_checkform(const char* str, void (*fxn)(const char*, char**, int, int),
   fs->opcount = ops;
   fs->selarray = selarray;
   fs->selections = selections;
-  cwattroff(fsw, NCSTYLE_BOLD);
+  cwattroff(fsw, BOLD);
   compat_set_fg(fsw, FORMBORDER_COLOR);
   bevel_all(fsw);
-  cwattron(fsw, NCSTYLE_BOLD);
+  cwattron(fsw, BOLD);
   cmvwprintw(fsw, 0, cols - strlen(fs->boxstr) - 2, "%s", fs->boxstr);
   int nrows;
   ncplane_dim_yx(fsw, &nrows, NULL);
   ncplane_putwstr_yx(fsw, nrows - 1, cols - wcslen(ESCSTR) - 1, ESCSTR);
 #undef ESCSTR
-  cwattroff(fsw, NCSTYLE_BOLD);
+  cwattroff(fsw, BOLD);
   fs->longop = longop;
   fs->ops = opstrs;
   check_options(fs);
@@ -2083,13 +2086,13 @@ void raise_form(const char* str, void (*fxn)(const char*),
     fs->idx = defidx = 0;
   }
   fs->opcount = ops;
-  cwattroff(fs->p, NCSTYLE_BOLD);
+  cwattroff(fs->p, BOLD);
   compat_set_fg(fs->p, FORMBORDER_COLOR);
   bevel_all(fs->p);
-  cwattron(fs->p, NCSTYLE_BOLD);
+  cwattron(fs->p, BOLD);
   cmvwprintw(fs->p, 0, cols - strlen(fs->boxstr), "%s", fs->boxstr);
   ncplane_putwstr_yx(fs->p, rows - 1, cols - wcslen(L"⎋esc returns"), L"⎋esc returns");
-  cwattroff(fs->p, NCSTYLE_BOLD);
+  cwattroff(fs->p, BOLD);
   fs->longop = longop;
   fs->ops = opstrs;
   form_options(fs);
@@ -2110,13 +2113,13 @@ form_string_options(struct form_state* fs){
     return;
   }
   ncplane_dim_yx(n, NULL, &cols);
-  ncplane_styles_set(n, NCSTYLE_BOLD);
+  ncplane_styles_set(n, BOLD);
   compat_set_fg(n, FORMTEXT_COLOR);
   cmvwhline(n, 1, 1, " ", cols - 2);
   cmvwprintw(n, 1, START_COL, "%-*.*s: ", fs->longop, fs->longop, fs->inp.prompt);
   compat_set_fg(n, INPUT_COLOR);
   cwprintw(n, "%.*s", cols - fs->longop - 2 - 2, fs->inp.buffer);
-  ncplane_styles_off(n, NCSTYLE_BOLD);
+  ncplane_styles_off(n, BOLD);
 }
 
 void raise_str_form(const char* str, void (*fxn)(const char*),
@@ -2144,10 +2147,10 @@ void raise_str_form(const char* str, void (*fxn)(const char*),
     free_form(fs);
     return;
   }
-  cwattroff(fs->p, NCSTYLE_BOLD);
+  cwattroff(fs->p, BOLD);
   compat_set_fg(fs->p, FORMBORDER_COLOR);
   bevel_all(fs->p);
-  cwattron(fs->p, NCSTYLE_BOLD);
+  cwattron(fs->p, BOLD);
   cmvwprintw(fs->p, 0, cols - strlen(fs->boxstr), "%s", fs->boxstr);
   ncplane_putwstr_yx(fs->p, 2, cols - wcslen(L"⎋esc returns"), L"⎋esc returns");
   fs->inp.prompt = fs->boxstr;
@@ -3027,21 +3030,21 @@ detail_fs(struct ncplane* hw, const device* d, int row){
   if(d->mnttype){
     char buf[BPREFIXSTRLEN + 1];
 
-    ncplane_styles_off(hw, NCSTYLE_BOLD);
+    ncplane_styles_off(hw, BOLD);
     const char *size = d->mntsize ? bprefix(d->mntsize, 1, buf, 1) : "";
     cmvwprintw(hw, row, START_COL, "%*s%c ",
         BPREFIXFMT(size), d->mntsize ? 'B' : ' ');
-    ncplane_styles_on(hw, NCSTYLE_BOLD);
+    ncplane_styles_on(hw, BOLD);
     cwprintw(hw, "%s%s", d->label ? "" : "unlabeled ", d->mnttype);
     if(d->label){
-      ncplane_styles_off(hw, NCSTYLE_BOLD);
+      ncplane_styles_off(hw, BOLD);
       cwprintw(hw, " %lc%s%lc", L'“', d->label, L'”');
-      ncplane_styles_on(hw, NCSTYLE_BOLD);
+      ncplane_styles_on(hw, BOLD);
     }
     cwprintw(hw, "%s", d->mnt.count ? " at " : "");
-    ncplane_styles_off(hw, NCSTYLE_BOLD);
+    ncplane_styles_off(hw, BOLD);
     cwprintw(hw, "%s", d->mnt.count ? d->mnt.list[0] : "");
-    ncplane_styles_on(hw, NCSTYLE_BOLD);
+    ncplane_styles_on(hw, BOLD);
   }
 }
 
@@ -3079,19 +3082,19 @@ update_details(struct ncplane* hw){
     cmvwprintw(hw, 2, START_COL, "%-*.*s", cols - 2, cols - 2, "No details available");
   }else{
     cmvwprintw(hw, 2, START_COL, "Firmware: ");
-    ncplane_styles_off(hw, NCSTYLE_BOLD);
+    ncplane_styles_off(hw, BOLD);
     ncplane_putstr(hw, c->fwver ? c->fwver : "Unknown");
-    ncplane_styles_on(hw, NCSTYLE_BOLD);
+    ncplane_styles_on(hw, BOLD);
     ncplane_putstr(hw, " BIOS: ");
-    ncplane_styles_off(hw, NCSTYLE_BOLD);
+    ncplane_styles_off(hw, BOLD);
     ncplane_putstr(hw, c->biosver ? c->biosver : "Unknown");
-    ncplane_styles_on(hw, NCSTYLE_BOLD);
+    ncplane_styles_on(hw, BOLD);
     ncplane_putstr(hw, " Load: ");
     qprefix(c->demand, 1, buf, 1);
-    ncplane_styles_off(hw, NCSTYLE_BOLD);
+    ncplane_styles_off(hw, BOLD);
     ncplane_putstr(hw, buf);
     ncplane_putstr(hw, "bps");
-    ncplane_styles_on(hw, NCSTYLE_BOLD);
+    ncplane_styles_on(hw, BOLD);
   }
   if((b = get_selected_blockobj()) == NULL){
     return 0;
@@ -3102,14 +3105,14 @@ update_details(struct ncplane* hw){
     const char *sn = d->blkdev.serial;
 
     cmvwprintw(hw, 3, START_COL, "%s: ", d->name);
-    ncplane_styles_off(hw, NCSTYLE_BOLD);
+    ncplane_styles_off(hw, BOLD);
     ncplane_putstr(hw, d->model ? d->model : "n/a");
     ncplane_putstr(hw, d->revision ? d->revision : "");
-    ncplane_styles_on(hw, NCSTYLE_BOLD);
+    ncplane_styles_on(hw, BOLD);
     cwprintw(hw, " (%sB) S/N: ", bprefix(d->size, 1, buf, 1));
-    ncplane_styles_off(hw, NCSTYLE_BOLD);
+    ncplane_styles_off(hw, BOLD);
     ncplane_putstr(hw, sn ? sn : "n/a");
-    ncplane_styles_on(hw, NCSTYLE_BOLD);
+    ncplane_styles_on(hw, BOLD);
     if(cols - curcol > 13){
       cwprintw(hw, " WC%lc WRV%lc RO%lc",
           d->blkdev.wcache ? L'+' : L'-',
@@ -3119,26 +3122,26 @@ update_details(struct ncplane* hw){
     }
     assert(d->physsec <= 4096);
     cmvwprintw(hw, 4, START_COL, "Sectors: ");
-    ncplane_styles_off(hw, NCSTYLE_BOLD);
+    ncplane_styles_off(hw, BOLD);
     cwprintw(hw, "%ju ", d->size / (d->logsec ? d->logsec : 1));
-    ncplane_styles_on(hw, NCSTYLE_BOLD);
+    ncplane_styles_on(hw, BOLD);
     cwprintw(hw, "(");
-    ncplane_styles_off(hw, NCSTYLE_BOLD);
+    ncplane_styles_off(hw, BOLD);
     cwprintw(hw, "%uB ", d->logsec);
-    ncplane_styles_on(hw, NCSTYLE_BOLD);
+    ncplane_styles_on(hw, BOLD);
     cwprintw(hw, "logical / ");
-    ncplane_styles_off(hw, NCSTYLE_BOLD);
+    ncplane_styles_off(hw, BOLD);
     cwprintw(hw, "%uB ", d->physsec);
-    ncplane_styles_on(hw, NCSTYLE_BOLD);
+    ncplane_styles_on(hw, BOLD);
     cwprintw(hw, "physical) %s",
     transport_str(d->blkdev.transport));
     if(transport_bw(d->blkdev.transport)){
       uintmax_t transbw = transport_bw(d->blkdev.transport);
       cwprintw(hw, " (");
-      ncplane_styles_off(hw, NCSTYLE_BOLD);
+      ncplane_styles_off(hw, BOLD);
       // FIXME throws -Wformat-truncation on gcc9
       cwprintw(hw, "%sbps", qprefix(transbw, 1, buf, 1));
-      ncplane_styles_on(hw, NCSTYLE_BOLD);
+      ncplane_styles_on(hw, BOLD);
       cwprintw(hw, ")");
     }
   }else{
@@ -3149,49 +3152,49 @@ update_details(struct ncplane* hw){
           d->roflag ? L'+' : L'-');
     if(d->layout == LAYOUT_MDADM){
       cwprintw(hw, " Stride: ");
-      ncplane_styles_off(hw, NCSTYLE_BOLD);
+      ncplane_styles_off(hw, BOLD);
       if(d->mddev.stride == 0){
         ncplane_putstr(hw, "n/a");
       }else{
         cwprintw(hw, "%sB", bprefix(d->mddev.stride, 1, buf, 1));
       }
-      ncplane_styles_on(hw, NCSTYLE_BOLD);
+      ncplane_styles_on(hw, BOLD);
       cwprintw(hw, " SWidth: ");
-      ncplane_styles_off(hw, NCSTYLE_BOLD);
+      ncplane_styles_off(hw, BOLD);
       if(d->mddev.swidth == 0){
         ncplane_putstr(hw, "n/a");
       }else{
         cwprintw(hw, "%u", d->mddev.swidth);
       }
-      ncplane_styles_on(hw, NCSTYLE_BOLD);
+      ncplane_styles_on(hw, BOLD);
     }
     assert(d->physsec <= 4096);
     cmvwprintw(hw, 4, START_COL, "Sectors: ");
-    ncplane_styles_off(hw, NCSTYLE_BOLD);
+    ncplane_styles_off(hw, BOLD);
     cwprintw(hw, "%ju ", d->size / (d->logsec ? d->logsec : 1));
-    ncplane_styles_on(hw, NCSTYLE_BOLD);
+    ncplane_styles_on(hw, BOLD);
     cwprintw(hw, "(");
-    ncplane_styles_off(hw, NCSTYLE_BOLD);
+    ncplane_styles_off(hw, BOLD);
     cwprintw(hw, "%uB ", d->logsec);
-    ncplane_styles_on(hw, NCSTYLE_BOLD);
+    ncplane_styles_on(hw, BOLD);
     cwprintw(hw, "logical / ");
-    ncplane_styles_off(hw, NCSTYLE_BOLD);
+    ncplane_styles_off(hw, BOLD);
     cwprintw(hw, "%uB ", d->physsec);
-    ncplane_styles_on(hw, NCSTYLE_BOLD);
+    ncplane_styles_on(hw, BOLD);
     cwprintw(hw, "physical)");
   }
   cmvwprintw(hw, 5, START_COL, "Partitioning: ");
-  ncplane_styles_off(hw, NCSTYLE_BOLD);
+  ncplane_styles_off(hw, BOLD);
   pttype = (d->layout == LAYOUT_NONE ? d->blkdev.pttable ? d->blkdev.pttable : "none" :
       d->layout == LAYOUT_MDADM ? d->mddev.pttable ? d->mddev.pttable : "none" :
       d->layout == LAYOUT_DM ? d->dmdev.pttable ? d->dmdev.pttable : "none" :
       "n/a");
   cwprintw(hw, "%s", pttype);
-  ncplane_styles_on(hw, NCSTYLE_BOLD);
+  ncplane_styles_on(hw, BOLD);
   ncplane_putstr(hw, " I/O scheduler: ");
-  ncplane_styles_off(hw, NCSTYLE_BOLD);
+  ncplane_styles_off(hw, BOLD);
   ncplane_putstr(hw, d->sched ? d->sched : "custom");
-  ncplane_styles_on(hw, NCSTYLE_BOLD);
+  ncplane_styles_on(hw, BOLD);
   if(blockobj_unloadedp(b)){
     cmvwprintw(hw, 6, START_COL, "Media is not loaded");
     return 0;
@@ -3200,9 +3203,9 @@ update_details(struct ncplane* hw){
     char ubuf[BPREFIXSTRLEN + 1];
 
     bprefix(d->size, 1, ubuf, 1);
-    ncplane_styles_off(hw, NCSTYLE_BOLD);
+    ncplane_styles_off(hw, BOLD);
     cmvwprintw(hw, 6, START_COL, "%*sB ", BPREFIXFMT(ubuf));
-    ncplane_styles_on(hw, NCSTYLE_BOLD);
+    ncplane_styles_on(hw, BOLD);
     cwprintw(hw, "%s", "unpartitioned media");
     detail_fs(hw, b->d, 7);
     return 0;
@@ -3216,26 +3219,26 @@ update_details(struct ncplane* hw){
       bprefix(b->zone->p->partdev.alignment, 1, align, 1);
       // FIXME limit length!
       bprefix(d->logsec * (b->zone->lsector - b->zone->fsector + 1),1, zbuf, 1);
-      ncplane_styles_off(hw, NCSTYLE_BOLD);
+      ncplane_styles_off(hw, BOLD);
       cmvwprintw(hw, 6, START_COL, "%*sB ", BPREFIXFMT(zbuf));
-      ncplane_styles_on(hw, NCSTYLE_BOLD);
+      ncplane_styles_on(hw, BOLD);
       cwprintw(hw, "P%lc%lc ", subscript((b->zone->p->partdev.pnumber % 100 / 10)),
           subscript((b->zone->p->partdev.pnumber % 10)));
-      ncplane_styles_off(hw, NCSTYLE_BOLD);
+      ncplane_styles_off(hw, BOLD);
       cwprintw(hw, "%ju", b->zone->fsector);
-      ncplane_styles_on(hw, NCSTYLE_BOLD);
+      ncplane_styles_on(hw, BOLD);
       cwprintw(hw, "→");
-      ncplane_styles_off(hw, NCSTYLE_BOLD);
+      ncplane_styles_off(hw, BOLD);
       cwprintw(hw, "%ju ", b->zone->lsector);
-      ncplane_styles_on(hw, NCSTYLE_BOLD);
+      ncplane_styles_on(hw, BOLD);
       ncplane_putstr(hw, b->zone->p->name);
-      ncplane_styles_off(hw, NCSTYLE_BOLD);
+      ncplane_styles_off(hw, BOLD);
       if(b->zone->p->partdev.pname){
         cwprintw(hw, " “%ls” ", b->zone->p->partdev.pname);
       }else{
         cwprintw(hw, " (%s) ", "unnamed");
       }
-      ncplane_styles_on(hw, NCSTYLE_BOLD);
+      ncplane_styles_on(hw, BOLD);
                         if(curcol <= cols - 2 - 4){
         cwprintw(hw, "%04x", get_code_specific(pttype, b->zone->p->partdev.ptype));
       }
@@ -3247,17 +3250,17 @@ update_details(struct ncplane* hw){
       // FIXME print alignment for unpartitioned space as well,
       // but not until we implement zones in core (bug 252)
       // or we'll need recreate alignment() etc here
-      ncplane_styles_off(hw, NCSTYLE_BOLD);
+      ncplane_styles_off(hw, BOLD);
       bprefix(d->logsec * (b->zone->lsector - b->zone->fsector + 1), 1, zbuf, 1);
       cmvwprintw(hw, 6, START_COL, "%*sB ", BPREFIXFMT(zbuf));
-      ncplane_styles_on(hw, NCSTYLE_BOLD);
-      ncplane_styles_off(hw, NCSTYLE_BOLD);
+      ncplane_styles_on(hw, BOLD);
+      ncplane_styles_off(hw, BOLD);
       cwprintw(hw, "%ju", b->zone->fsector);
-      ncplane_styles_on(hw, NCSTYLE_BOLD);
+      ncplane_styles_on(hw, BOLD);
       cwprintw(hw, "→");
-      ncplane_styles_off(hw, NCSTYLE_BOLD);
+      ncplane_styles_off(hw, BOLD);
       cwprintw(hw, "%ju ", b->zone->lsector);
-      ncplane_styles_on(hw, NCSTYLE_BOLD);
+      ncplane_styles_on(hw, BOLD);
       cwprintw(hw, "%s ", b->zone->rep == REP_METADATA ?
           "partition table metadata" : "unpartitioned space");
     }
@@ -3613,13 +3616,13 @@ detail_mounts(struct ncplane* w, int* row, int maxy, const device* d){
     if(++*row == maxy){
       return;
     }
-    cwattroff(w, NCSTYLE_BOLD);
+    cwattroff(w, BOLD);
     if((r = snprintf(b, sizeof(b), " %s %s", d->mnt.list[z], d->mntops.list[z])) >= (int)sizeof(b)){
       b[sizeof(b) - 1] = '\0';
     }
     cmvwhline(w, *row, START_COL, " ", cols - 2);
     cmvwprintw(w, *row, START_COL, "%-*.*s", cols - 2, cols - 2, b);
-    cwattron(w, NCSTYLE_BOLD);
+    cwattron(w, BOLD);
     ++*row;
   }
 }
@@ -3652,13 +3655,13 @@ detail_targets(struct ncplane* w, int* row, int both, const device* d){
     if(!both){
       return;
     }
-    cwattroff(w, NCSTYLE_BOLD);
+    cwattroff(w, BOLD);
     if((r = snprintf(b, sizeof(b), " %s %s", d->mnt.list[z], d->mntops.list[z])) >= (int)sizeof(b)){
       b[sizeof(b) - 1] = '\0';
     }
     cmvwhline(w, *row, START_COL, " ", cols - 2);
     cmvwprintw(w, *row, START_COL, "%-*.*s", cols - 2, cols - 2, b);
-    cwattron(w, NCSTYLE_BOLD);
+    cwattron(w, BOLD);
     ++*row;
     break; // FIXME no space currently
   }
@@ -3676,7 +3679,7 @@ map_details(struct ncplane *hw){
   if(growlight_target){
     int blockout;
 
-    cwattrset(hw, NCSTYLE_BOLD|PHEADING_COLOR);
+    cwattrset(hw, BOLD|PHEADING_COLOR);
     cmvwprintw(hw, y, 1, "Operating in target mode (%s)", growlight_target);
     ncplane_cursor_yx(hw, NULL, &curcol);
     if( (blockout = cols - curcol - 1) ){
@@ -3684,7 +3687,7 @@ map_details(struct ncplane *hw){
     }
     ++y;
   }
-  cwattrset(hw, NCSTYLE_BOLD|FORMTEXT_COLOR);
+  cwattrset(hw, BOLD|FORMTEXT_COLOR);
   // First we list the target fstab, and then the targets
   // FIXME this is probably multibyte input and needs be handled as such
   if( (fstab = dump_targets()) ){
@@ -3715,7 +3718,7 @@ map_details(struct ncplane *hw){
     }
     free(fstab);
   }
-  cwattrset(hw, NCSTYLE_BOLD|SUBDISPLAY_COLOR);
+  cwattrset(hw, BOLD|SUBDISPLAY_COLOR);
   cmvwhline(hw, y, 1, " ", cols - 2);
   cmvwprintw(hw, y, 1, "%-*.*s %-5.5s %-36.36s %*s %s",
       FSLABELSIZ, FSLABELSIZ, "Label",
@@ -3723,7 +3726,7 @@ map_details(struct ncplane *hw){
   if(++y >= rows){
     return 0;
   }
-  cwattrset(hw, NCSTYLE_BOLD|FORMTEXT_COLOR);
+  cwattrset(hw, BOLD|FORMTEXT_COLOR);
   for(c = get_controllers() ; c ; c = c->next){
     const device *d;
 
@@ -3743,7 +3746,7 @@ map_details(struct ncplane *hw){
     }
   }
   // Now list the existing maps, a superset of the targets
-  cwattrset(hw, NCSTYLE_BOLD|SUBDISPLAY_COLOR);
+  cwattrset(hw, BOLD|SUBDISPLAY_COLOR);
   for(c = get_controllers() ; c ; c = c->next){
     const device *d;
 
@@ -5921,10 +5924,10 @@ static void raise_info_form(const char *str, const char *text){
     free_form(fs);
     return;
   }
-  cwattroff(fs->p, NCSTYLE_BOLD);
+  cwattroff(fs->p, BOLD);
   compat_set_fg(fs->p, FORMBORDER_COLOR);
   bevel_all(fs->p);
-  cwattron(fs->p, NCSTYLE_BOLD);
+  cwattron(fs->p, BOLD);
   cmvwprintw(fs->p, 1, START_COL, "%-*.*s", cols, cols, str);
   form_string_options(fs);
   actform = fs;
-- 
2.28.0

