-------------------------------------------------------------------
Sun Dec 29 10:27:12 UTC 2019 - psimons@suse.com

- Update base-compat to version 0.11.0.
  ## Changes in 0.11.0 [2019.09.06]
   - Sync with `base-4.13`/GHC 8.8
   - Backport `MonadFail(fail)` to `Prelude.Compat` and `Control.Monad.Compat`.

     Because `Prelude.Compat.fail` now corresponds to the `fail` from `MonadFail`
     instead of `Monad`, some care is required to implement `Monad.fail` on
     pre-8.8 versions of GHC. The following template is recommended:

     ```haskell
     import Prelude.Compat
     import qualified Control.Monad      as Monad
     import qualified Control.Monad.Fail as Fail

     data Blah a = ...

     instance Functor Blah where ...
     instance Applicative Blah where ...

     instance Monad.Monad Blah where
       (>>=) = ...
     #if !(MIN_VERSION_base(4,13,0))
       fail = Fail.fail
     #endif

     instance Fail.MonadFail Blah where
       fail = ...
     ```

     This approach is also backwards-compatible with previous releases of
     `base-compat`.

     Note that the `MonadFail` class has only been in `base` since
     `base-4.9`/GHC 8.0, so accordingly, this can only be backported back
     to GHC 8.0. If you wish to have a version of
     `Prelude.Compat`/`Control.Monad.Compat` that backports
     `MonadFail` to older GHCs (by conditionally depending on the `fail`
     library), use the `Prelude.Compat`/`Control.Monad.Compat` modules from the
     `base-compat-batteries` package.

   - Introduce the `Data.Type.Equality.Compat` module, which re-exports
     `Data.Type.Equality` if using `base-4.7`/GHC-7.8 or later. If using an older
     version of `base`, this module is empty.

     If you wish to have a version of
     `Data.Type.Equality.Compat` with older GHCs
     (by conditionally depending on the `type-equality` library),
     use the `Data.Type.Equality.Compat` module from the
     `base-compat-batteries` package.

-------------------------------------------------------------------
Fri Nov  8 16:13:17 UTC 2019 - Peter Simons <psimons@suse.com>

- Drop obsolete group attributes.

-------------------------------------------------------------------
Fri Oct 19 02:01:15 UTC 2018 - psimons@suse.com

- Update base-compat to version 0.10.5.
  ## Changes in 0.10.5 [2018.10.18]
   - Enable `BangPatterns` in `Prelude.Compat`.

-------------------------------------------------------------------
Wed Jul 18 14:26:14 UTC 2018 - psimons@suse.com

- Cosmetic: replace tabs with blanks, strip trailing white space,
  and update copyright headers with spec-cleaner.

-------------------------------------------------------------------
Tue Jul 17 19:31:09 UTC 2018 - psimons@suse.com

- Update base-compat to version 0.10.4.
  ## Changes in 0.10.4 [2018.07.03]
   - Make more modules `Trustworthy`. In particular, fix a regression in which
     `Prelude.Compat` was inferred as `Unsafe` by explicitly marking it as
     `Trustwothy`.

  ## Changes in 0.10.3 [2018.07.02]
   - Backport the proper fixity for `($!)`, which was accidentally omitted in
     `base-compat-0.10.2`.

  ## Changes in 0.10.2 [2018.07.02]
   - Sync with `base-4.12`/GHC 8.6
   - Backport `RuntimeRep`-polymorphic versions of `($!)` and `throw` to
     `Prelude.Compat` and `Control.Exception.Compat`, respectively
     (if using `base-4.10`/GHC 8.2 or later).
   - Introduce the `Data.Functor.Contravariant.Compat` module, which reexports
     `Data.Functor.Contravariant` if using `base-4.12`/GHC 8.6 or later.

     See `Data.Functor.Contravariant.Compat` in the corresponding
     `base-compat-batteries` release for a version with a wider support window.

  ## Changes in 0.10.1 [2018.04.10]
   - Add `Data.List.NonEmpty.Compat`.
   - Reexport `(Data.Semigroup.<>)` from `Data.Monoid.Compat` back to `base-4.9`.

  ## Changes in 0.10.0 [2018.04.05]
   - Sync with `base-4.11`/GHC 8.4
   - Backport `Semigroup((<>))` to `Prelude.Compat`.

     Note that the `Semigroup` class has only been in `base` since
     `base-4.9`/GHC 8.0, so accordingly, this can only be backported back
     to GHC 8.0. If you wish to have a version of `Prelude.Compat` that backports
     `Semigroup` to older GHCs (by conditionally depending on the `semigroups`
     library), use the `Prelude.Compat` module from the `base-compat-batteries`
     package.
   - Backport `(<&>)` to `Data.Functor.Compat`
   - Backport `iterate'` to `Data.List.Compat`
   - Backport `showHFloat` to `Numeric.Compat`
   - Backport a `RuntimeRep`-polymorphic `withTypeable` function to
     `Type.Reflection.Compat`. (This is only exported on `base-4.10`/GHC 8.2.)
   - Introduce the following modules, back until the oldest version of `base`
     that can support backporting them. If you wish to use them in conjunction
     with older versions of `base`, use the `base-compat-batteries` package.
     - `Control.Monad.Fail.Compat` (back until `base-4.9`/GHC 8.0)
     - `Control.Monad.IO.Class.Compat` (back until `base-4.9`/GHC 8.0)
     - `Data.Bifunctor` (back until `base-4.8`/GHC 7.10)
     - `Data.Bifoldable` and `Data.Bitraversable` (back until `base-4.10`/GHC 8.2)
     - `Data.Functor.Compose.Compat`, `Data.Functor.Product.Compat`, and
       `Data.Functor.Sum.Compat` (back until `base-4.9`/GHC 8.0)
     - `Data.Functor.Identity.Compat` (back until `base-4.8`/GHC 7.10)
     - `Data.Semigroup.Compat` (back until `base-4.9`/GHC 8.0)
     - `Data.Void.Compat` (back until `base-4.8`/GHC 7.10)
     - `Numeric.Natural.Compat` (back until `base-4.8`/GHC 7.10)
   - Introduce versions of modules with the suffix `.Repl`. These simply reexport
     the contents of their counterparts without the `.Repl` suffix to provide
     a globally unique namespace to import from in the event one wants to import
     `base-compat` modules into GHCi. (In `base-compat-batteries`, the
     corresponding suffix is `.Repl.Batteries`.)

-------------------------------------------------------------------
Wed May 16 13:06:52 UTC 2018 - psimons@suse.com

- Prefer the new %license attribute over %doc.

-------------------------------------------------------------------
Thu Aug  3 15:38:38 UTC 2017 - psimons@suse.com

- Updated with latest spec-cleaner version 0.9.8-8-geadfbbf.

-------------------------------------------------------------------
Wed Apr 19 13:32:16 UTC 2017 - psimons@suse.com

- Update to version 0.9.3 with cabal2obs.

-------------------------------------------------------------------
Mon Mar 27 12:39:33 UTC 2017 - psimons@suse.com

- Update to version 0.9.2 with cabal2obs.

-------------------------------------------------------------------
Sun Jul 10 17:01:23 UTC 2016 - psimons@suse.com

- Update to version 0.9.1 revision 0 with cabal2obs.

-------------------------------------------------------------------
Tue Apr 12 09:31:17 UTC 2016 - mimi.vx@gmail.com

- update to 0.9.1
* Use the more efficient version of replicateM and replicateM_ introduced in base-4.9

-------------------------------------------------------------------
Wed Jan 20 08:43:57 UTC 2016 - mimi.vx@gmail.com

- update to 0.9.0
* Sync with base-4.9/GHC 8.0
* Weakened RealFloat constraints on realPart, imagPart, conjugate, mkPolar, and cis
         in Data.Complex.Compat
* Backport Foreign.ForeignPtr.Safe and Foreign.Marshal.Safe
* Generalize filterM, forever, mapAndUnzipM, zipWithM, zipWithM_, replicateM,
        and replicateM_ in Control.Monad from Monad to Applicative
* Backport .Unsafe.Compat modules (for Control.Monad.ST, Control.Monad.ST.Lazy,
        Foreign.ForeignPtr, and Foreign.Marshal)
* Backport forkFinally and forkOSWithUnmask to Control.Concurrent.Compat
* Backport Data.Functor.Const
* Backport modifyIORef', atomicModifyIORef' and atomicWriteIORef to Data.IORef.Compat
* Data.Ratio.{denominator,numerator} have no Integral constraint anymore
* Backport modifySTRef' to Data.STRef.Compat
* Export String, lines, words, unlines, and unwords to Data.String.Compat
* Generalize Debug.Trace.{traceM, traceShowM} from Monad to Applicative
* Backport errorWithoutStackTrace to Prelude.Compat
* Backport unsafeFixIO and unsafeDupablePerformIO to System.IO.Unsafe.Compat

-------------------------------------------------------------------
Tue Dec 15 21:21:33 UTC 2015 - mimi.vx@gmail.com

- initial commit
