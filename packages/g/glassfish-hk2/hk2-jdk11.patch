diff -urEbwB hk2-2.4.0/hk2-core/src/main/java/com/sun/enterprise/module/impl/ModulesRegistryImpl.java hk2-2.4.0.new/hk2-core/src/main/java/com/sun/enterprise/module/impl/ModulesRegistryImpl.java
--- hk2-2.4.0/hk2-core/src/main/java/com/sun/enterprise/module/impl/ModulesRegistryImpl.java	2016-01-05 20:52:26.000000000 +0100
+++ hk2-2.4.0.new/hk2-core/src/main/java/com/sun/enterprise/module/impl/ModulesRegistryImpl.java	2019-12-13 16:08:16.114729257 +0100
@@ -79,8 +79,8 @@
         return new ModulesRegistryImpl(this);
     }
 
-    protected Module newModule(ModuleDefinition moduleDef) {
-        Module m = new ModuleImpl(this, moduleDef);
+    protected com.sun.enterprise.module.Module newModule(ModuleDefinition moduleDef) {
+        com.sun.enterprise.module.Module m = new ModuleImpl(this, moduleDef);
         for (ModuleLifecycleListener l : getLifecycleListeners()) {
             l.moduleInstalled(m);
         }
@@ -88,7 +88,7 @@
     }
 
     protected List<ActiveDescriptor> parseInhabitants(
-            Module module, String name, ServiceLocator serviceLocator, List<PopulatorPostProcessor> postProcessors)
+            com.sun.enterprise.module.Module module, String name, ServiceLocator serviceLocator, List<PopulatorPostProcessor> postProcessors)
             throws IOException {
         return ((ModuleImpl)module).parseInhabitants(name, postProcessors);
     }
@@ -110,7 +110,7 @@
         }
 
         ModuleId id = AbstractFactory.getInstance().createModuleId(moduleName, version);
-        Module module = modules.get(id);
+        com.sun.enterprise.module.Module module = modules.get(id);
         if (module!=null) {
             ModuleImpl privateModule =
                     (ModuleImpl)newModule(module.getModuleDefinition());
@@ -165,7 +165,7 @@
         }
         ClassLoaderProxy cl = new ClassLoaderProxy(new URL[0], parent);
         for (ModuleDefinition def : defs) {
-            Module module = this.makeModuleFor(def.getName(), def.getVersion());
+            com.sun.enterprise.module.Module module = this.makeModuleFor(def.getName(), def.getVersion());
             cl.addDelegate(module.getClassLoader());
         }
         
@@ -196,7 +196,7 @@
     }
     
 
-    public Module find(Class clazz) {
+    public com.sun.enterprise.module.Module find(Class clazz) {
         ClassLoader cl = clazz.getClassLoader();
         if(cl==null)    return null;
         if (cl instanceof ModuleClassLoader)
diff -urEbwB hk2-2.4.0/hk2-core/src/main/java/com/sun/enterprise/module/single/ProxyModule.java hk2-2.4.0.new/hk2-core/src/main/java/com/sun/enterprise/module/single/ProxyModule.java
--- hk2-2.4.0/hk2-core/src/main/java/com/sun/enterprise/module/single/ProxyModule.java	2016-01-05 20:52:26.000000000 +0100
+++ hk2-2.4.0.new/hk2-core/src/main/java/com/sun/enterprise/module/single/ProxyModule.java	2019-12-13 16:01:48.632550619 +0100
@@ -51,7 +51,7 @@
  *
  * @author Jerome Dochez
  */
-public class ProxyModule implements Module {
+public class ProxyModule implements com.sun.enterprise.module.Module {
 
     final ClassLoader classLoader;
     final ModuleDefinition moduleDef;
@@ -113,15 +113,15 @@
         return classLoader;
     }
 
-    public List<Module> getImports() {
-        return new ArrayList<Module>();
+    public List<com.sun.enterprise.module.Module> getImports() {
+        return new ArrayList<com.sun.enterprise.module.Module>();
     }
 
-    public void addImport(Module module) {
+    public void addImport(com.sun.enterprise.module.Module module) {
         //To change body of implemented methods use File | Settings | File Templates.
     }
 
-    public Module addImport(ModuleDependency dependency) {
+    public com.sun.enterprise.module.Module addImport(ModuleDependency dependency) {
         throw new UnsupportedOperationException("Inports cannot be added dynamically to static modules");
     }
 
diff -urEbwB hk2-2.4.0/hk2-core/src/main/java/com/sun/enterprise/module/single/SingleModulesRegistry.java hk2-2.4.0.new/hk2-core/src/main/java/com/sun/enterprise/module/single/SingleModulesRegistry.java
--- hk2-2.4.0/hk2-core/src/main/java/com/sun/enterprise/module/single/SingleModulesRegistry.java	2016-01-05 20:52:26.000000000 +0100
+++ hk2-2.4.0.new/hk2-core/src/main/java/com/sun/enterprise/module/single/SingleModulesRegistry.java	2019-12-13 16:04:45.729546354 +0100
@@ -65,7 +65,7 @@
 public class SingleModulesRegistry  extends ModulesRegistryImpl {
 
     final ClassLoader singleClassLoader;
-    final Module[] proxyMod = new Module[1];
+    final com.sun.enterprise.module.Module[] proxyMod = new com.sun.enterprise.module.Module[1];
 
     public SingleModulesRegistry(ClassLoader singleCL) {
         this(singleCL, null);
@@ -90,34 +90,34 @@
     }
 
     @Override
-    public Module find(Class clazz) {
-        Module m = super.find(clazz);
+    public com.sun.enterprise.module.Module find(Class clazz) {
+        com.sun.enterprise.module.Module m = super.find(clazz);
         if (m == null)
             return proxyMod[0];
         return m;
     }
 
     @Override
-    public Collection<Module> getModules(String moduleName) {
+    public Collection<com.sun.enterprise.module.Module> getModules(String moduleName) {
         // I could not care less about the modules names
         return getModules();
     }
 
     @Override
-    public Collection<Module> getModules() {
-        ArrayList<Module> list = new ArrayList<Module>();
+    public Collection<com.sun.enterprise.module.Module> getModules() {
+        ArrayList<com.sun.enterprise.module.Module> list = new ArrayList<com.sun.enterprise.module.Module>();
         list.add(proxyMod[0]);
         return list;
     }
 
     @Override
-    public Module makeModuleFor(String name, String version, boolean resolve) throws ResolveError {
+    public com.sun.enterprise.module.Module makeModuleFor(String name, String version, boolean resolve) throws ResolveError {
         return proxyMod[0];
     }
 
     @SuppressWarnings({ "rawtypes", "unchecked" })
     @Override
-    protected List<ActiveDescriptor> parseInhabitants(Module module, String name, ServiceLocator serviceLocator, List<PopulatorPostProcessor> postProcessors)
+    protected List<ActiveDescriptor> parseInhabitants(com.sun.enterprise.module.Module module, String name, ServiceLocator serviceLocator, List<PopulatorPostProcessor> postProcessors)
             throws IOException {
 
         ArrayList<PopulatorPostProcessor> allPostProcessors = new ArrayList<PopulatorPostProcessor>();
diff -urEbwB hk2-2.4.0/hk2-testing/collections/src/main/java/org/glassfish/hk2/testing/collections/AbstractCollectionTest.java hk2-2.4.0.new/hk2-testing/collections/src/main/java/org/glassfish/hk2/testing/collections/AbstractCollectionTest.java
--- hk2-2.4.0/hk2-testing/collections/src/main/java/org/glassfish/hk2/testing/collections/AbstractCollectionTest.java	2016-01-05 20:52:26.000000000 +0100
+++ hk2-2.4.0.new/hk2-testing/collections/src/main/java/org/glassfish/hk2/testing/collections/AbstractCollectionTest.java	2019-12-13 16:21:49.071327338 +0100
@@ -792,7 +792,7 @@
   public void testCollectionToArrayWithArgumentWithNullThrows() {
     Collection collection = createEmptyCollection();
     
-    collection.toArray(null);
+    collection.toArray((String[])null);
   }
   
   /**
