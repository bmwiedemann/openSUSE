-------------------------------------------------------------------
Sat Sep 17 02:06:39 UTC 2022 - Peter Simons <psimons@suse.com>

- Update vty to version 5.37.
  5.37
  ----

  * The Xterm backend is now used when `TERM` matches `rxvt` or `tmux`.
  * PictureToSpans now uses `error`, not `fail`, to avoid dependence on
    soon-to-be-removed `MonadFail` instance for `ST` (#248)

-------------------------------------------------------------------
Mon Jul  4 16:02:42 UTC 2022 - Peter Simons <psimons@suse.com>

- Update vty to version 5.36.
  5.36
  ----

   * Raised `microlens` upper bound to allow building with 0.4.13.
   * Replaced incomplete `Show` output for `Picture` with a derived
     instance; derived `Show` for `Cursor` and `Background`, too.

-------------------------------------------------------------------
Mon Mar 21 03:41:32 UTC 2022 - Peter Simons <psimons@suse.com>

- Update vty to version 5.35.1.
  5.35.1
  ------

  Bug fixes:
   * Fixed a build issue with a test program.

  5.35
  ----

  New features:
   * Add support for 24-bit color (thanks @u-quark). This change
     updates Vty to look at the `COLORTERM` environment variable that is
     conventionally used to advertise support for truecolor escape
     sequences. The change also updates the Vty demo to demonstrate
     24-bit colors. This change also adds a new data type, `ColorMode`,
     to represent the color mode in use, as well as an `Output` interface
     field, `outputColorMode`, to track the active color mode and use it
     to clamp emitted color escape sequences to the active color range.

  API changes:
   * All types in `Graphics.Vty.Input.Events` now have strict constructor
     fields.
   * Internal events are now wrapped in a new `InternalEvent` type to
     improve how signal handling is done. This change modifies the `Input`
     type's event channel API to produce `InternalEvents`, not `Events`.
     The new `InternalEvent` either wraps `Event` with the `InputEvent`
     constructor (the previous behavior) or indicates that Vty resumed
     after handling a signal using the `ResumeAfterSignal` constructor.
     This change avoids the previous use of `EvResize` with lazy exception
     arguments as a sentinel value for `ResumeAfterSignal`.

  Other enhancements:
   * Bracketed paste parsing performance has been greatly improved thanks
     to benchmarking and optimization work by @iphydf. As part of that
     work, Vty now uses bytestrings rather than Strings internally when
     parsing input to look for events.
   * The `\b` value is now interpreted as `KBS` (thanks @vglfr)

-------------------------------------------------------------------
Sun Feb 27 23:25:07 UTC 2022 - Peter Simons <psimons@suse.com>

- Update vty to version 5.34.
  5.34
  ----

  API changes:
   * Added an `NFData` instance for `Event` (thanks Mario Lang)
   * Removed `Monoid` and `Semigroup` instances for `Attr` and
     `MaybeDefault`. This change removed the instances because they were
     misbehaved; merging `Attr` and `MaybeDefault` values with these
     instances resulted in field value losses. For example, before this
     change,
  ```
  (defAttr `withForeColor` blue) <> (defAttr `withBackColor` green)
  ```
     would result in just
  ```
     (defAttr `withBackColor` green)
  ```
     because the instances were designed to favor the right-hand
     arguments' fields even if they had not been explicitly set
     (a consequence of the `MaybeDefault` `Semigroup` instance).
     While that behavior was sensible specifically in the context of
     `Graphics.Vty.Inline`, it wasn't a useful user-facing API and it made
     for surprising instance behavior. Since there is actually no good way
     to handle this in a `Semigroup` instance for `Attr` -- some choices
     have to be made about how to merge two attributes' foreground colors,
     and that won't be much better than what we had -- the instance was
     just removed.

-------------------------------------------------------------------
Wed Feb 24 19:35:07 UTC 2021 - psimons@suse.com

- Update vty to version 5.33 revision 1.
  Upstream has revised the Cabal build instructions on Hackage.

-------------------------------------------------------------------
Tue Feb 23 20:57:43 UTC 2021 - psimons@suse.com

- Update vty to version 5.33.
  5.33
  ----

  API changes:
  * The `Cursor` type got a new `PositionOnly` constructor for cursor
    placement without visibility.

  Package changes:
  * Relaxed upper bound for `random`
  * Updated `microlens` bounds to allow 0.4.12

  Other improvements:
  * Various hlint-driven improvements (thanks Willem Van Onsem)
  * The implementation of `color240` was improved (thanks (Willem Van
    Onsem)

-------------------------------------------------------------------
Thu Dec 17 12:20:00 UTC 2020 - Ondřej Súkup <mimi.vx@gmail.com>
 
- disable %{ix86} build
 
-------------------------------------------------------------------
Tue Nov 17 16:17:32 UTC 2020 - Ondřej Súkup <mimi.vx@gmail.com>

-  relax overspecified constraints on microlens

-------------------------------------------------------------------
Mon Nov  9 12:35:51 UTC 2020 - psimons@suse.com

- Update vty to version 5.32.
  5.32
  ----

  New features:
   * Meta-PageUp and Meta-PageDown are now supported (#193)
   * Added `supportsItalics` and `supportsStrikethrough` functions to
     check for feature support in terminfo

  Bug fixes:
   * Detect utf-8 mode in `LANG` regardless of case (thanks Emeka
     Nkurumeh)

-------------------------------------------------------------------
Tue Oct  6 08:55:52 UTC 2020 - psimons@suse.com

- Update vty to version 5.31.
  5.31
  ----

  New features and API changes:
   * Added support for strikethrough mode. This change adds a new
     `strikethrough` `Style` value and uses the `smxx` and `rmxx`
     Terminfo capabilities to activate and deactivate strikethrough mode,
     respectively. If the terminfo does not report those capabilities,
     this style is ignored.
   * `Output`: added the `setDisplayBounds` field to set the output
     dimensions of the output handle; added an implementation of this for
     the `TerminfoBased` backend.

  Other changes:
   * The C prototype for `vty_c_get_window_size` in `gwinsz.h` was fixed.

-------------------------------------------------------------------
Tue Aug 18 10:46:34 UTC 2020 - Peter Simons <psimons@suse.com>

- Replace %setup -q with the more modern %autosetup macro.

-------------------------------------------------------------------
Thu Jul 16 02:00:26 UTC 2020 - psimons@suse.com

- Update vty to version 5.30.
  5.30
  ----

  New features:
   * Added `Graphics.Vty.setWindowTitle` to emit an escape
     sequence to set the window title, provide the terminal emulator
     accepts Xterm-style title sequences. For details, see:
     https://tldp.org/HOWTO/Xterm-Title-3.html

-------------------------------------------------------------------
Fri Jul 10 02:00:23 UTC 2020 - psimons@suse.com

- Update vty to version 5.29.
  5.29
  ----

  API changes:
   * The Input type got a new field, 'restoreInputState'. This field
     allows the end user to have direct access to the logic needed to
     restore the terminal's input state flags. Prior to having this field,
     this state restoration logic could only be invoked as part of calling
     'shutdownInput', but since that function does other things (like
     killing threads) it is not advisable to call it repeatedly (which is
     necessary in the use case this change is intended to support). This
     can be called directly to restore the input state flags as needed,
     although this is not required if 'shutdown' (or 'shutdownInput') is
     called.

  Other changes:
   * attributeControl: explicitly enable the ICRNL terminal mode flag (see
     #187 and c572ad).

-------------------------------------------------------------------
Tue Jun  9 09:26:14 UTC 2020 - psimons@suse.com

- Add vty at version 5.28.2.

