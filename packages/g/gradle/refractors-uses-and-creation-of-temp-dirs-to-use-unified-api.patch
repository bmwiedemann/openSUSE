diff -Nur gradle-4.4.1/build.gradle gradle-4.4.1-new/build.gradle
--- gradle-4.4.1/build.gradle	2022-10-05 14:30:44.917618490 +0200
+++ gradle-4.4.1-new/build.gradle	2022-10-06 16:44:43.579448250 +0200
@@ -178,6 +178,7 @@
 apply from: "gradle/taskCacheBuildScanUserData.gradle"
 apply from: "gradle/versioning.gradle"
 apply from: "gradle/dependencies.gradle"
+apply from: "gradle/dependencies.gradle"
 apply from: "gradle/wrapper.gradle"
 apply from: "gradle/idea.gradle"
 apply from: "gradle/eclipse.gradle"
diff -Nur gradle-4.4.1/settings.gradle gradle-4.4.1-new/settings.gradle
--- gradle-4.4.1/settings.gradle	2022-10-05 14:30:44.917618490 +0200
+++ gradle-4.4.1-new/settings.gradle	2022-10-06 16:44:32.403574955 +0200
@@ -92,6 +92,7 @@
 include 'buildCache'
 include 'coreApi'
 include 'versionControl'
+include 'fileTemp'
 
 rootProject.name = 'gradle'
 rootProject.children.each {project ->
diff -Nur gradle-4.4.1/subprojects/base-services/src/main/java/org/gradle/internal/file/TempFiles.java gradle-4.4.1-new/subprojects/base-services/src/main/java/org/gradle/internal/file/TempFiles.java
--- gradle-4.4.1/subprojects/base-services/src/main/java/org/gradle/internal/file/TempFiles.java	1970-01-01 01:00:00.000000000 +0100
+++ gradle-4.4.1-new/subprojects/base-services/src/main/java/org/gradle/internal/file/TempFiles.java	2022-10-05 17:21:01.316644784 +0200
@@ -0,0 +1,45 @@
+/*
+ * Copyright 2020 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.gradle.internal.file;
+
+import com.google.common.base.Preconditions;
+
+import javax.annotation.CheckReturnValue;
+import java.io.File;
+import java.io.IOException;
+
+/**
+ * Security safe API's for creating temporary files.
+ */
+public final class TempFiles {
+
+    private TempFiles() {
+        /* no-op */
+    }
+
+    /**
+     * Improves the security guarantees of {@link File#createTempFile(String, String, File)}.
+     *
+     * @see File#createTempFile(String, String, File)
+     */
+    @CheckReturnValue
+    public static File createTempFile(String prefix, String suffix, File directory) throws IOException {
+        Preconditions.checkNotNull(directory, "The `directory` argument must not be null as this will default to the system temporary directory");
+        return File.createTempFile(prefix, suffix, directory);
+    }
+
+}
\ No newline at end of file
diff -Nur gradle-4.4.1/subprojects/base-services/src/main/java/org/gradle/internal/SystemProperties.java gradle-4.4.1-new/subprojects/base-services/src/main/java/org/gradle/internal/SystemProperties.java
--- gradle-4.4.1/subprojects/base-services/src/main/java/org/gradle/internal/SystemProperties.java	2022-10-05 14:30:44.725621121 +0200
+++ gradle-4.4.1-new/subprojects/base-services/src/main/java/org/gradle/internal/SystemProperties.java	2022-10-05 17:21:50.956076924 +0200
@@ -80,7 +80,11 @@
     public String getLineSeparator() {
         return System.getProperty("line.separator");
     }
-
+    
+    /**
+     * @deprecated Using the temporary directory on UNIX-based systems can lead to local privilege escalation or local sensitive information disclosure vulnerabilities.
+     */
+    @Deprecated
     public String getJavaIoTmpDir() {
         return System.getProperty("java.io.tmpdir");
     }
diff -Nur gradle-4.4.1/subprojects/build-cache/src/main/java/org/gradle/caching/local/internal/DefaultBuildCacheTempFileStore.java gradle-4.4.1-new/subprojects/build-cache/src/main/java/org/gradle/caching/local/internal/DefaultBuildCacheTempFileStore.java
--- gradle-4.4.1/subprojects/build-cache/src/main/java/org/gradle/caching/local/internal/DefaultBuildCacheTempFileStore.java	2022-10-05 14:30:44.841619531 +0200
+++ gradle-4.4.1-new/subprojects/build-cache/src/main/java/org/gradle/caching/local/internal/DefaultBuildCacheTempFileStore.java	2022-10-06 17:11:58.632940991 +0200
@@ -19,6 +19,7 @@
 import org.gradle.api.Action;
 import org.gradle.api.UncheckedIOException;
 import org.gradle.caching.BuildCacheKey;
+import org.gradle.internal.file.TempFiles;
 import org.gradle.util.GFileUtils;
 
 import java.io.File;
@@ -40,7 +41,7 @@
         String hashCode = key.getHashCode();
         final File tempFile;
         try {
-            tempFile = File.createTempFile(hashCode, partialFileSuffix, dir);
+            tempFile = TempFiles.createTempFile(hashCode, partialFileSuffix, dir);
         } catch (IOException ex) {
             throw new UncheckedIOException(ex);
         }
diff -Nur gradle-4.4.1/subprojects/core/core.gradle gradle-4.4.1-new/subprojects/core/core.gradle
--- gradle-4.4.1/subprojects/core/core.gradle	2022-10-05 14:30:44.765620572 +0200
+++ gradle-4.4.1-new/subprojects/core/core.gradle	2022-10-06 16:38:01.036012045 +0200
@@ -48,6 +48,7 @@
     api libraries.inject
 
     implementation project(":modelGroovy")
+    implementation project(":fileTemp")
     implementation libraries.asm
     implementation libraries.slf4j_api
     implementation libraries.commons_collections
diff -Nur gradle-4.4.1/subprojects/core/src/integTest/groovy/org/gradle/process/internal/AbstractWorkerProcessIntegrationSpec.groovy gradle-4.4.1-new/subprojects/core/src/integTest/groovy/org/gradle/process/internal/AbstractWorkerProcessIntegrationSpec.groovy
--- gradle-4.4.1/subprojects/core/src/integTest/groovy/org/gradle/process/internal/AbstractWorkerProcessIntegrationSpec.groovy	2022-10-05 14:30:44.729621066 +0200
+++ gradle-4.4.1-new/subprojects/core/src/integTest/groovy/org/gradle/process/internal/AbstractWorkerProcessIntegrationSpec.groovy	2022-10-05 18:06:09.461633412 +0200
@@ -71,12 +71,18 @@
     final ClassPathRegistry classPathRegistry = new DefaultClassPathRegistry(new DefaultClassPathProvider(moduleRegistry), new WorkerProcessClassPathProvider(cacheRepository))
     final JavaExecHandleFactory execHandleFactory = TestFiles.javaExecHandleFactory(tmpDir.testDirectory)
     final OutputEventListener outputEventListener = new TestOutputEventListener()
-    DefaultWorkerProcessFactory workerFactory = new DefaultWorkerProcessFactory(loggingManager(LogLevel.DEBUG), server, classPathRegistry, new LongIdGenerator(), tmpDir.file("gradleUserHome"), new TmpDirTemporaryFileProvider(), execHandleFactory, new CachingJvmVersionDetector(new DefaultJvmVersionDetector(execHandleFactory)), outputEventListener, Stub(MemoryManager))
+    final TmpDirTemporaryFileProvider tmpDirTemporaryFileProvider = TestFiles.tmpDirTemporaryFileProvider(tmpDir.testDirectory)
+    
+    DefaultWorkerProcessFactory workerFactory = new DefaultWorkerProcessFactory(loggingManager(LogLevel.DEBUG), server, classPathRegistry, new LongIdGenerator(), tmpDir.file("gradleUserHome"), tmpDirTemporaryFileProvider, execHandleFactory, new CachingJvmVersionDetector(new DefaultJvmVersionDetector(execHandleFactory)), outputEventListener, Stub(MemoryManager))
 
     def cleanup() {
         services.close()
     }
 
+    File gradleUserHome() {
+        return tmpDir.file("gradleUserHome")
+    }
+
     Class<?> compileWithoutClasspath(String className, String classText) {
         return new GroovyClassLoader(getClass().classLoader).parseClass(classText, className)
     }
diff -Nur gradle-4.4.1/subprojects/core/src/integTest/groovy/org/gradle/process/internal/WorkerProcessIntegrationTest.groovy gradle-4.4.1-new/subprojects/core/src/integTest/groovy/org/gradle/process/internal/WorkerProcessIntegrationTest.groovy
--- gradle-4.4.1/subprojects/core/src/integTest/groovy/org/gradle/process/internal/WorkerProcessIntegrationTest.groovy	2022-10-05 14:30:44.729621066 +0200
+++ gradle-4.4.1-new/subprojects/core/src/integTest/groovy/org/gradle/process/internal/WorkerProcessIntegrationTest.groovy	2022-10-05 17:57:17.391700110 +0200
@@ -96,7 +96,7 @@
         String expectedLogStatement = "[[INFO] [org.gradle.process.internal.LogSerializableLogAction] info log statement]"
 
         when:
-        workerFactory = new DefaultWorkerProcessFactory(loggingManager(LogLevel.LIFECYCLE), server, classPathRegistry, new LongIdGenerator(), tmpDir.file("gradleUserHome"), new TmpDirTemporaryFileProvider(), execHandleFactory, new CachingJvmVersionDetector(new DefaultJvmVersionDetector(execHandleFactory)), outputEventListener, Stub(MemoryManager))
+        workerFactory = new DefaultWorkerProcessFactory(loggingManager(LogLevel.LIFECYCLE), server, classPathRegistry, new LongIdGenerator(), gradleUserHome(), TmpDirTemporaryFileProvider.createFromCustomBase({ gradleUserHome() }), execHandleFactory, new CachingJvmVersionDetector(new DefaultJvmVersionDetector(execHandleFactory)), outputEventListener, Stub(MemoryManager))
         and:
         execute(worker(loggingProcess))
 
@@ -104,7 +104,7 @@
         !outputEventListener.toString().contains(TextUtil.toPlatformLineSeparators(expectedLogStatement))
 
         when:
-        workerFactory = new DefaultWorkerProcessFactory(loggingManager(LogLevel.INFO), server, classPathRegistry, new LongIdGenerator(), tmpDir.file("gradleUserHome"), new TmpDirTemporaryFileProvider(), execHandleFactory, new CachingJvmVersionDetector(new DefaultJvmVersionDetector(execHandleFactory)), outputEventListener, Stub(MemoryManager))
+        workerFactory = new DefaultWorkerProcessFactory(loggingManager(LogLevel.INFO), server, classPathRegistry, new LongIdGenerator(), gradleUserHome(), TmpDirTemporaryFileProvider.createFromCustomBase({ gradleUserHome() }), execHandleFactory, new CachingJvmVersionDetector(new DefaultJvmVersionDetector(execHandleFactory)), outputEventListener, Stub(MemoryManager))
         and:
         execute(worker(loggingProcess))
 
diff -Nur gradle-4.4.1/subprojects/core/src/main/java/org/gradle/api/internal/changedetection/state/FileTimeStampInspector.java gradle-4.4.1-new/subprojects/core/src/main/java/org/gradle/api/internal/changedetection/state/FileTimeStampInspector.java
--- gradle-4.4.1/subprojects/core/src/main/java/org/gradle/api/internal/changedetection/state/FileTimeStampInspector.java	2022-10-05 14:30:44.749620792 +0200
+++ gradle-4.4.1-new/subprojects/core/src/main/java/org/gradle/api/internal/changedetection/state/FileTimeStampInspector.java	2022-10-07 09:34:09.645627930 +0200
@@ -17,6 +17,7 @@
 package org.gradle.api.internal.changedetection.state;
 
 import org.gradle.api.UncheckedIOException;
+import org.gradle.internal.file.TempFiles;
 
 import java.io.File;
 import java.io.FileOutputStream;
@@ -77,7 +78,7 @@
 
     protected long currentTimestamp() {
         try {
-            File file = File.createTempFile("this-build", "bin", workDir);
+            File file = TempFiles.createTempFile("this-build", "bin", workDir);
             try {
                 return file.lastModified();
             } finally {
diff -Nur gradle-4.4.1/subprojects/core/src/main/java/org/gradle/api/internal/file/DefaultTemporaryFileProvider.java gradle-4.4.1-new/subprojects/core/src/main/java/org/gradle/api/internal/file/DefaultTemporaryFileProvider.java
--- gradle-4.4.1/subprojects/core/src/main/java/org/gradle/api/internal/file/DefaultTemporaryFileProvider.java	2022-10-05 14:30:44.753620737 +0200
+++ gradle-4.4.1-new/subprojects/core/src/main/java/org/gradle/api/internal/file/DefaultTemporaryFileProvider.java	2022-10-06 12:09:27.024190186 +0200
@@ -19,9 +19,11 @@
 import org.gradle.api.UncheckedIOException;
 import org.gradle.internal.Factory;
 import org.gradle.internal.FileUtils;
+import org.gradle.internal.file.TempFiles;
 import org.gradle.util.CollectionUtils;
 import org.gradle.util.GFileUtils;
 
+import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
 import java.io.File;
 import java.io.IOException;
@@ -48,13 +50,13 @@
         }
     }
 
-    public File createTemporaryDirectory(@Nullable String prefix, @Nullable String suffix, @Nullable String... path) {
+    public File createTemporaryDirectory(@Nullable @Nonnull String prefix, @Nullable String suffix, @Nullable String... path) {
         File dir = new File(baseDirFactory.create(), CollectionUtils.join("/", path));
         GFileUtils.mkdirs(dir);
         try {
             // TODO: This is not a great paradigm for creating a temporary directory.
             // See http://guava-libraries.googlecode.com/svn/tags/release08/javadoc/com/google/common/io/Files.html#createTempDir%28%29 for an alternative.
-            File tmpDir = File.createTempFile("gradle", "projectDir", dir);
+            File tmpDir = TempFiles.createTempFile(prefix, suffix, dir);
             tmpDir.delete();
             tmpDir.mkdir();
             return tmpDir;
diff -Nur gradle-4.4.1/subprojects/core/src/main/java/org/gradle/api/internal/file/TemporaryFileProvider.java gradle-4.4.1-new/subprojects/core/src/main/java/org/gradle/api/internal/file/TemporaryFileProvider.java
--- gradle-4.4.1/subprojects/core/src/main/java/org/gradle/api/internal/file/TemporaryFileProvider.java	2022-10-05 14:30:44.753620737 +0200
+++ gradle-4.4.1-new/subprojects/core/src/main/java/org/gradle/api/internal/file/TemporaryFileProvider.java	2022-10-06 12:21:46.000047062 +0200
@@ -33,7 +33,7 @@
      * Allocates and creates a new temporary file with the given prefix, suffix,
      * and path, relative to the temporary file directory.
      */
-    File createTemporaryFile(String prefix, @Nullable String suffix, @Nullable String... path);
+    File createTemporaryFile(String prefix, @Nullable String suffix, String... path);
 
-    File createTemporaryDirectory(@Nullable String prefix, @Nullable String suffix, @Nullable String... path);
+    File createTemporaryDirectory(@Nullable String prefix, @Nullable String suffix, String... path);
 }
diff -Nur gradle-4.4.1/subprojects/core/src/main/java/org/gradle/api/internal/file/TmpDirTemporaryFileProvider.java gradle-4.4.1-new/subprojects/core/src/main/java/org/gradle/api/internal/file/TmpDirTemporaryFileProvider.java
--- gradle-4.4.1/subprojects/core/src/main/java/org/gradle/api/internal/file/TmpDirTemporaryFileProvider.java	2022-10-05 14:30:44.749620792 +0200
+++ gradle-4.4.1-new/subprojects/core/src/main/java/org/gradle/api/internal/file/TmpDirTemporaryFileProvider.java	1970-01-01 01:00:00.000000000 +0100
@@ -1,33 +0,0 @@
-/*
- * Copyright 2012 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.gradle.api.internal.file;
-
-import org.gradle.internal.Factory;
-import org.gradle.internal.FileUtils;
-import org.gradle.internal.SystemProperties;
-
-import java.io.File;
-
-public class TmpDirTemporaryFileProvider extends DefaultTemporaryFileProvider {
-    public TmpDirTemporaryFileProvider() {
-        super(new Factory<File>() {
-            public File create() {
-                return FileUtils.canonicalize(new File(SystemProperties.getInstance().getJavaIoTmpDir()));
-            }
-        });
-    }
-}
diff -Nur gradle-4.4.1/subprojects/core/src/main/java/org/gradle/internal/service/scopes/BasicGlobalScopeServices.java gradle-4.4.1-new/subprojects/core/src/main/java/org/gradle/internal/service/scopes/BasicGlobalScopeServices.java
--- gradle-4.4.1/subprojects/core/src/main/java/org/gradle/internal/service/scopes/BasicGlobalScopeServices.java	2022-10-05 14:30:44.761620627 +0200
+++ gradle-4.4.1-new/subprojects/core/src/main/java/org/gradle/internal/service/scopes/BasicGlobalScopeServices.java	2022-10-07 09:36:34.579866712 +0200
@@ -20,6 +20,8 @@
 import org.gradle.api.internal.file.DefaultFileLookup;
 import org.gradle.api.internal.file.FileLookup;
 import org.gradle.api.internal.file.FileResolver;
+import org.gradle.api.internal.file.TemporaryFileProvider;
+import org.gradle.api.internal.file.TmpDirTemporaryFileProvider;
 import org.gradle.api.tasks.util.PatternSet;
 import org.gradle.api.tasks.util.internal.PatternSets;
 import org.gradle.api.tasks.util.internal.PatternSpecFactory;
@@ -83,8 +85,8 @@
         return new CachingJvmVersionDetector(new DefaultJvmVersionDetector(execHandleFactory));
     }
 
-    DefaultExecActionFactory createExecActionFactory(FileResolver fileResolver) {
-        return new DefaultExecActionFactory(fileResolver);
+    DefaultExecActionFactory createExecActionFactory(FileResolver fileResolver, TemporaryFileProvider temporaryFileProvider) {
+        return new DefaultExecActionFactory(fileResolver, temporaryFileProvider);
     }
 
     FileResolver createFileResolver(FileLookup lookup) {
diff -Nur gradle-4.4.1/subprojects/core/src/main/java/org/gradle/internal/service/scopes/GlobalScopeServices.java gradle-4.4.1-new/subprojects/core/src/main/java/org/gradle/internal/service/scopes/GlobalScopeServices.java
--- gradle-4.4.1/subprojects/core/src/main/java/org/gradle/internal/service/scopes/GlobalScopeServices.java	2022-10-05 14:30:44.761620627 +0200
+++ gradle-4.4.1-new/subprojects/core/src/main/java/org/gradle/internal/service/scopes/GlobalScopeServices.java	2022-10-07 09:39:28.685751025 +0200
@@ -163,10 +163,6 @@
         return new DefaultBuildOperationListenerManager(listenerManager);
     }
 
-    TemporaryFileProvider createTemporaryFileProvider() {
-        return new TmpDirTemporaryFileProvider();
-    }
-
     GradleBuildEnvironment createGradleBuildEnvironment() {
         return environment;
     }
diff -Nur gradle-4.4.1/subprojects/core/src/main/java/org/gradle/internal/service/scopes/GradleUserHomeScopeServices.java gradle-4.4.1-new/subprojects/core/src/main/java/org/gradle/internal/service/scopes/GradleUserHomeScopeServices.java
--- gradle-4.4.1/subprojects/core/src/main/java/org/gradle/internal/service/scopes/GradleUserHomeScopeServices.java	2022-10-05 14:30:44.761620627 +0200
+++ gradle-4.4.1-new/subprojects/core/src/main/java/org/gradle/internal/service/scopes/GradleUserHomeScopeServices.java	2022-10-06 10:23:10.775417048 +0200
@@ -37,6 +37,7 @@
 import org.gradle.api.internal.changedetection.state.ValueSnapshotter;
 import org.gradle.api.internal.classpath.ModuleRegistry;
 import org.gradle.api.internal.file.TemporaryFileProvider;
+import org.gradle.api.internal.file.TmpDirTemporaryFileProvider;
 import org.gradle.api.internal.file.collections.DirectoryFileTreeFactory;
 import org.gradle.api.internal.initialization.loadercache.ClassLoaderCache;
 import org.gradle.api.internal.initialization.loadercache.DefaultClassLoaderCache;
@@ -97,6 +98,7 @@
 
     public void configure(ServiceRegistration registration, GradleUserHomeDirProvider userHomeDirProvider) {
         registration.addProvider(new CacheRepositoryServices(userHomeDirProvider.getGradleUserHomeDirectory(), null));
+        registration.add(TmpDirTemporaryFileProvider.class);
         for (PluginServiceRegistry plugin : globalServices.getAll(PluginServiceRegistry.class)) {
             plugin.registerGradleUserHomeServices(registration);
         }
diff -Nur gradle-4.4.1/subprojects/core/src/main/java/org/gradle/internal/service/scopes/ProjectScopeServices.java gradle-4.4.1-new/subprojects/core/src/main/java/org/gradle/internal/service/scopes/ProjectScopeServices.java
--- gradle-4.4.1/subprojects/core/src/main/java/org/gradle/internal/service/scopes/ProjectScopeServices.java	2022-10-05 14:30:44.761620627 +0200
+++ gradle-4.4.1-new/subprojects/core/src/main/java/org/gradle/internal/service/scopes/ProjectScopeServices.java	2022-10-07 09:55:32.542051898 +0200
@@ -38,6 +38,7 @@
 import org.gradle.api.internal.file.FileResolver;
 import org.gradle.api.internal.file.SourceDirectorySetFactory;
 import org.gradle.api.internal.file.TemporaryFileProvider;
+import org.gradle.api.internal.file.TmpDirTemporaryFileProvider;
 import org.gradle.api.internal.file.collections.DirectoryFileTreeFactory;
 import org.gradle.api.internal.initialization.DefaultScriptHandlerFactory;
 import org.gradle.api.internal.initialization.ScriptClassPathResolver;
@@ -146,8 +147,8 @@
         return new DefaultFileOperations(fileResolver, project.getTasks(), temporaryFileProvider, instantiator, fileLookup, directoryFileTreeFactory, streamHasher, fileHasher);
     }
 
-    protected DefaultExecActionFactory createExecActionFactory(FileResolver fileResolver) {
-        return new DefaultExecActionFactory(fileResolver);
+    protected DefaultExecActionFactory createExecActionFactory(FileResolver fileResolver, TmpDirTemporaryFileProvider temporaryFileProvider) {
+        return new DefaultExecActionFactory(fileResolver, temporaryFileProvider);
     }
 
     protected TemporaryFileProvider createTemporaryFileProvider() {
diff -Nur gradle-4.4.1/subprojects/core/src/main/java/org/gradle/process/internal/DefaultExecActionFactory.java gradle-4.4.1-new/subprojects/core/src/main/java/org/gradle/process/internal/DefaultExecActionFactory.java
--- gradle-4.4.1/subprojects/core/src/main/java/org/gradle/process/internal/DefaultExecActionFactory.java	2022-10-05 14:30:44.741620901 +0200
+++ gradle-4.4.1-new/subprojects/core/src/main/java/org/gradle/process/internal/DefaultExecActionFactory.java	2022-10-07 09:52:48.256041792 +0200
@@ -17,12 +17,16 @@
 package org.gradle.process.internal;
 
 import org.gradle.api.internal.file.FileResolver;
+import org.gradle.api.internal.file.TemporaryFileProvider;
+import org.gradle.api.internal.file.TmpDirTemporaryFileProvider;
 
 public class DefaultExecActionFactory implements ExecActionFactory, ExecHandleFactory, JavaExecHandleFactory {
     private final FileResolver fileResolver;
+    protected final TemporaryFileProvider temporaryFileProvider;
 
-    public DefaultExecActionFactory(FileResolver fileResolver) {
+    public DefaultExecActionFactory(FileResolver fileResolver, TemporaryFileProvider temporaryFileProvider) {
         this.fileResolver = fileResolver;
+        this.temporaryFileProvider = temporaryFileProvider;
     }
 
     @Override
@@ -32,7 +36,7 @@
 
     @Override
     public JavaExecAction newJavaExecAction() {
-        return new DefaultJavaExecAction(fileResolver);
+        return new DefaultJavaExecAction(fileResolver, temporaryFileProvider);
     }
 
     @Override
@@ -42,6 +46,6 @@
 
     @Override
     public JavaExecHandleBuilder newJavaExec() {
-        return new JavaExecHandleBuilder(fileResolver);
+        return new JavaExecHandleBuilder(fileResolver, temporaryFileProvider);
     }
 }
diff -Nur gradle-4.4.1/subprojects/core/src/main/java/org/gradle/process/internal/DefaultJavaExecAction.java gradle-4.4.1-new/subprojects/core/src/main/java/org/gradle/process/internal/DefaultJavaExecAction.java
--- gradle-4.4.1/subprojects/core/src/main/java/org/gradle/process/internal/DefaultJavaExecAction.java	2022-10-05 14:30:44.741620901 +0200
+++ gradle-4.4.1-new/subprojects/core/src/main/java/org/gradle/process/internal/DefaultJavaExecAction.java	2022-10-06 10:44:50.384251060 +0200
@@ -17,11 +17,12 @@
 package org.gradle.process.internal;
 
 import org.gradle.api.internal.file.FileResolver;
+import org.gradle.api.internal.file.TemporaryFileProvider;
 import org.gradle.process.ExecResult;
 
 public class DefaultJavaExecAction extends JavaExecHandleBuilder implements JavaExecAction {
-    public DefaultJavaExecAction(FileResolver fileResolver) {
-        super(fileResolver);
+    public DefaultJavaExecAction(FileResolver fileResolver, TemporaryFileProvider temporaryFileProvider) {
+        super(fileResolver, temporaryFileProvider);
     }
 
     public ExecResult execute() {
diff -Nur gradle-4.4.1/subprojects/core/src/main/java/org/gradle/process/internal/JavaExecHandleBuilder.java gradle-4.4.1-new/subprojects/core/src/main/java/org/gradle/process/internal/JavaExecHandleBuilder.java
--- gradle-4.4.1/subprojects/core/src/main/java/org/gradle/process/internal/JavaExecHandleBuilder.java	2022-10-05 14:30:44.741620901 +0200
+++ gradle-4.4.1-new/subprojects/core/src/main/java/org/gradle/process/internal/JavaExecHandleBuilder.java	2022-10-07 09:14:26.908005783 +0200
@@ -17,6 +17,7 @@
 
 import org.gradle.api.file.FileCollection;
 import org.gradle.api.internal.file.FileResolver;
+import org.gradle.api.internal.file.TemporaryFileProvider;
 import org.gradle.api.internal.file.collections.DefaultConfigurableFileCollection;
 import org.gradle.process.JavaExecSpec;
 import org.gradle.process.JavaForkOptions;
@@ -35,10 +36,12 @@
     private FileCollection classpath;
     private final JavaForkOptions javaOptions;
     private final FileResolver fileResolver;
+    private final TemporaryFileProvider temporaryFileProvider;
 
-    public JavaExecHandleBuilder(FileResolver fileResolver) {
+    public JavaExecHandleBuilder(FileResolver fileResolver, TemporaryFileProvider temporaryFileProvider) {
         super(fileResolver);
         this.fileResolver = fileResolver;
+        this.temporaryFileProvider = temporaryFileProvider;
         javaOptions = new DefaultJavaForkOptions(fileResolver);
         classpath = new DefaultConfigurableFileCollection(fileResolver, null);
         executable(javaOptions.getExecutable());
diff -Nur gradle-4.4.1/subprojects/core/src/main/java/org/gradle/testfixtures/internal/ProjectBuilderImpl.java gradle-4.4.1-new/subprojects/core/src/main/java/org/gradle/testfixtures/internal/ProjectBuilderImpl.java
--- gradle-4.4.1/subprojects/core/src/main/java/org/gradle/testfixtures/internal/ProjectBuilderImpl.java	2022-10-05 14:30:44.757620682 +0200
+++ gradle-4.4.1-new/subprojects/core/src/main/java/org/gradle/testfixtures/internal/ProjectBuilderImpl.java	2022-10-07 09:57:53.668342504 +0200
@@ -51,6 +51,7 @@
 import org.gradle.internal.work.WorkerLeaseService;
 import org.gradle.invocation.DefaultGradle;
 
+import javax.annotation.Nullable;
 import java.io.File;
 
 public class ProjectBuilderImpl {
@@ -77,7 +78,7 @@
     }
 
     public Project createProject(String name, File inputProjectDir, File gradleUserHomeDir) {
-        File projectDir = prepareProjectDir(inputProjectDir);
+        final File projectDir = prepareProjectDir(inputProjectDir);
 
         final File homeDir = new File(projectDir, "gradleHome");
 
@@ -139,9 +140,9 @@
         return globalServices;
     }
 
-    public File prepareProjectDir(File projectDir) {
+    public File prepareProjectDir(@Nullable File projectDir) {
         if (projectDir == null) {
-            TemporaryFileProvider temporaryFileProvider = new TmpDirTemporaryFileProvider();
+            TemporaryFileProvider temporaryFileProvider = TmpDirTemporaryFileProvider.createLegacy();
             projectDir = temporaryFileProvider.createTemporaryDirectory("gradle", "projectDir");
             // TODO deleteOnExit won't clean up non-empty directories (and it leaks memory for long-running processes).
             projectDir.deleteOnExit();
diff -Nur gradle-4.4.1/subprojects/core/src/test/groovy/org/gradle/process/internal/JavaExecHandleBuilderTest.groovy gradle-4.4.1-new/subprojects/core/src/test/groovy/org/gradle/process/internal/JavaExecHandleBuilderTest.groovy
--- gradle-4.4.1/subprojects/core/src/test/groovy/org/gradle/process/internal/JavaExecHandleBuilderTest.groovy	2022-10-05 14:30:44.733621011 +0200
+++ gradle-4.4.1-new/subprojects/core/src/test/groovy/org/gradle/process/internal/JavaExecHandleBuilderTest.groovy	2022-10-06 11:22:04.294586780 +0200
@@ -16,6 +16,7 @@
 package org.gradle.process.internal
 
 import org.gradle.api.internal.file.TestFiles
+import org.gradle.api.internal.file.TmpDirTemporaryFileProvider
 import org.gradle.internal.jvm.Jvm
 import spock.lang.Specification
 import spock.lang.Unroll
@@ -25,7 +26,8 @@
 import static java.util.Arrays.asList
 
 public class JavaExecHandleBuilderTest extends Specification {
-    JavaExecHandleBuilder builder = new JavaExecHandleBuilder(TestFiles.resolver())
+    final TmpDirTemporaryFileProvider temporaryFileProvider = TestFiles.tmpDirTemporaryFileProvider(tmpDir.root)
+    JavaExecHandleBuilder builder = new JavaExecHandleBuilder(TestFiles.resolver(), temporaryFileProvider)
 
     public void cannotSetAllJvmArgs() {
         when:
diff -Nur gradle-4.4.1/subprojects/dependency-management/dependency-management.gradle gradle-4.4.1-new/subprojects/dependency-management/dependency-management.gradle
--- gradle-4.4.1/subprojects/dependency-management/dependency-management.gradle	2022-10-05 14:30:44.545623587 +0200
+++ gradle-4.4.1-new/subprojects/dependency-management/dependency-management.gradle	2022-10-06 14:38:25.306689754 +0200
@@ -16,6 +16,7 @@
     compile project(":resources")
     compile project(":versionControl")
     compile project(":resourcesHttp")
+    compile project(":fileTemp")
 
     compile libraries.asm
     compile libraries.commons_lang
diff -Nur gradle-4.4.1/subprojects/dependency-management/src/main/java/org/gradle/api/internal/artifacts/DependencyManagementBuildScopeServices.java gradle-4.4.1-new/subprojects/dependency-management/src/main/java/org/gradle/api/internal/artifacts/DependencyManagementBuildScopeServices.java
--- gradle-4.4.1/subprojects/dependency-management/src/main/java/org/gradle/api/internal/artifacts/DependencyManagementBuildScopeServices.java	2022-10-05 14:30:44.629622436 +0200
+++ gradle-4.4.1-new/subprojects/dependency-management/src/main/java/org/gradle/api/internal/artifacts/DependencyManagementBuildScopeServices.java	2022-10-07 10:02:56.796670892 +0200
@@ -209,11 +209,11 @@
     }
 
     ArtifactIdentifierFileStore createArtifactRevisionIdFileStore(ArtifactCacheMetaData artifactCacheMetaData) {
-        return new ArtifactIdentifierFileStore(artifactCacheMetaData.getFileStoreDirectory(), new TmpDirTemporaryFileProvider());
+        return new ArtifactIdentifierFileStore(artifactCacheMetaData.getFileStoreDirectory(), TmpDirTemporaryFileProvider.createLegacy());
     }
 
     ExternalResourceFileStore createExternalResourceFileStore(ArtifactCacheMetaData artifactCacheMetaData) {
-        return new ExternalResourceFileStore(artifactCacheMetaData.getExternalResourcesStoreDirectory(), new TmpDirTemporaryFileProvider());
+        return new ExternalResourceFileStore(artifactCacheMetaData.getExternalResourcesStoreDirectory(), TmpDirTemporaryFileProvider.createLegacy());
     }
 
     TextResourceLoader createTextResourceLoader(ExternalResourceFileStore resourceFileStore, RepositoryTransportFactory repositoryTransportFactory) {
diff -Nur gradle-4.4.1/subprojects/dependency-management/src/main/java/org/gradle/api/internal/filestore/ivy/ArtifactIdentifierFileStore.java gradle-4.4.1-new/subprojects/dependency-management/src/main/java/org/gradle/api/internal/filestore/ivy/ArtifactIdentifierFileStore.java
--- gradle-4.4.1/subprojects/dependency-management/src/main/java/org/gradle/api/internal/filestore/ivy/ArtifactIdentifierFileStore.java	2022-10-05 14:30:44.629622436 +0200
+++ gradle-4.4.1-new/subprojects/dependency-management/src/main/java/org/gradle/api/internal/filestore/ivy/ArtifactIdentifierFileStore.java	2022-10-06 11:39:42.915902719 +0200
@@ -17,10 +17,14 @@
 package org.gradle.api.internal.filestore.ivy;
 
 import org.gradle.api.Transformer;
+// import org.gradle.api.internal.artifacts.ivyservice.ArtifactCacheMetadata;
 import org.gradle.api.internal.file.TemporaryFileProvider;
+// import org.gradle.api.internal.file.TmpDirTemporaryFileProvider;
 import org.gradle.internal.component.external.model.ModuleComponentArtifactIdentifier;
 import org.gradle.internal.resource.local.GroupedAndNamedUniqueFileStore;
 import org.gradle.internal.resource.local.UniquePathKeyFileStore;
+// import org.gradle.internal.service.scopes.Scopes;
+// import org.gradle.internal.service.scopes.ServiceScope;
 
 import java.io.File;
 
@@ -41,4 +45,22 @@
     public ArtifactIdentifierFileStore(File fileStoreDir, TemporaryFileProvider temporaryFileProvider) {
         super(new UniquePathKeyFileStore(fileStoreDir), temporaryFileProvider, GROUP, NAME);
     }
+
+    // @ServiceScope(Scopes.Build.class)
+    // public static class Factory {
+    //     private final TmpDirTemporaryFileProvider tmpDirTemporaryFileProvider;
+
+    //     @Inject
+    //     public Factory(TmpDirTemporaryFileProvider tmpDirTemporaryFileProvider) {
+    //         this.tmpDirTemporaryFileProvider = tmpDirTemporaryFileProvider;
+    //     }
+
+    //     public ArtifactIdentifierFileStore create(ArtifactCacheMetadata artifactCacheMetadata) {
+    //         return new ArtifactIdentifierFileStore(
+    //             artifactCacheMetadata.getFileStoreDirectory(),
+    //             tmpDirTemporaryFileProvider,
+    //         );
+    //     }
+    // }
+
 }
diff -Nur gradle-4.4.1/subprojects/dependency-management/src/test/groovy/org/gradle/api/internal/artifacts/ivyservice/resolveengine/store/ResolutionResultsStoreFactoryTest.groovy gradle-4.4.1-new/subprojects/dependency-management/src/test/groovy/org/gradle/api/internal/artifacts/ivyservice/resolveengine/store/ResolutionResultsStoreFactoryTest.groovy
--- gradle-4.4.1/subprojects/dependency-management/src/test/groovy/org/gradle/api/internal/artifacts/ivyservice/resolveengine/store/ResolutionResultsStoreFactoryTest.groovy	2022-10-05 14:30:44.553623477 +0200
+++ gradle-4.4.1-new/subprojects/dependency-management/src/test/groovy/org/gradle/api/internal/artifacts/ivyservice/resolveengine/store/ResolutionResultsStoreFactoryTest.groovy	2022-10-06 11:42:48.746096207 +0200
@@ -16,14 +16,22 @@
 
 package org.gradle.api.internal.artifacts.ivyservice.resolveengine.store
 
+import org.gradle.api.internal.file.TestFiles
 import org.gradle.api.internal.file.TmpDirTemporaryFileProvider
 import org.gradle.cache.internal.BinaryStore
 import org.gradle.internal.concurrent.CompositeStoppable
+import org.gradle.test.fixtures.file.TestNameTestDirectoryProvider
+import org.junit.Rule
+import spock.lang.AutoCleanup
 import spock.lang.Specification
 
 class ResolutionResultsStoreFactoryTest extends Specification {
 
-    def f = new ResolutionResultsStoreFactory(new TmpDirTemporaryFileProvider())
+    @Rule
+    final TestNameTestDirectoryProvider tmpDir = new TestNameTestDirectoryProvider(getClass())
+    
+    @AutoCleanup
+    ResolutionResultsStoreFactory f = new ResolutionResultsStoreFactory(TestFiles.tmpDirTemporaryFileProvider(tmpDir.testDirectory))
 
     def "provides binary stores"() {
         def stores = f.createStoreSet()
@@ -36,7 +44,7 @@
     }
 
     def "rolls the file"() {
-        f = new ResolutionResultsStoreFactory(new TmpDirTemporaryFileProvider(), 2)
+        f = new ResolutionResultsStoreFactory(TestFiles.tmpDirTemporaryFileProvider(tmpDir.testDirectory), 2)
 
         when:
         def store = f.createStoreSet().nextBinaryStore()
@@ -56,7 +64,7 @@
     }
 
     def "cleans up binary files"() {
-        f = new ResolutionResultsStoreFactory(new TmpDirTemporaryFileProvider(), 1);
+        f = new ResolutionResultsStoreFactory(TestFiles.tmpDirTemporaryFileProvider(tmpDir.testDirectory), 1);
         def stores1 = f.createStoreSet()
 
         when:
diff -Nur gradle-4.4.1/subprojects/distributions/src/integTest/groovy/org/gradle/DistributionIntegrationSpec.groovy gradle-4.4.1-new/subprojects/distributions/src/integTest/groovy/org/gradle/DistributionIntegrationSpec.groovy
--- gradle-4.4.1/subprojects/distributions/src/integTest/groovy/org/gradle/DistributionIntegrationSpec.groovy	2022-10-05 14:30:44.845619476 +0200
+++ gradle-4.4.1-new/subprojects/distributions/src/integTest/groovy/org/gradle/DistributionIntegrationSpec.groovy	2022-10-06 11:47:42.242846336 +0200
@@ -38,7 +38,7 @@
     abstract String getDistributionLabel()
 
     int getLibJarsCount() {
-        179
+        180
     }
 
     def "no duplicate entries"() {
diff -Nur gradle-4.4.1/subprojects/file-temp/file-temp.gradle gradle-4.4.1-new/subprojects/file-temp/file-temp.gradle
--- gradle-4.4.1/subprojects/file-temp/file-temp.gradle	1970-01-01 01:00:00.000000000 +0100
+++ gradle-4.4.1-new/subprojects/file-temp/file-temp.gradle	2022-10-06 11:55:39.965480242 +0200
@@ -0,0 +1,23 @@
+/*
+ * Copyright 2022 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+dependencies {
+    compile project(":baseServices")
+
+    compile libraries.inject
+}
+
+useTestFixtures()
diff -Nur gradle-4.4.1/subprojects/file-temp/src/main/java/org/gradle/api/internal/file/DefaultTemporaryFileProvider.java gradle-4.4.1-new/subprojects/file-temp/src/main/java/org/gradle/api/internal/file/DefaultTemporaryFileProvider.java
--- gradle-4.4.1/subprojects/file-temp/src/main/java/org/gradle/api/internal/file/DefaultTemporaryFileProvider.java	1970-01-01 01:00:00.000000000 +0100
+++ gradle-4.4.1-new/subprojects/file-temp/src/main/java/org/gradle/api/internal/file/DefaultTemporaryFileProvider.java	2022-10-06 12:09:27.024190186 +0200
@@ -0,0 +1,67 @@
+/*
+ * Copyright 2010 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.gradle.api.internal.file;
+
+import org.gradle.api.UncheckedIOException;
+import org.gradle.internal.Factory;
+import org.gradle.internal.FileUtils;
+import org.gradle.internal.file.TempFiles;
+import org.gradle.util.CollectionUtils;
+import org.gradle.util.GFileUtils;
+
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+import java.io.File;
+import java.io.IOException;
+import java.io.Serializable;
+
+public class DefaultTemporaryFileProvider implements TemporaryFileProvider, Serializable {
+    private final Factory<File> baseDirFactory;
+
+    public DefaultTemporaryFileProvider(final Factory<File> fileFactory) {
+        this.baseDirFactory = fileFactory;
+    }
+
+    public File newTemporaryFile(String... path) {
+        return FileUtils.canonicalize(new File(baseDirFactory.create(), CollectionUtils.join("/", path)));
+    }
+
+    public File createTemporaryFile(String prefix, @Nullable String suffix, String... path) {
+        File dir = new File(baseDirFactory.create(), CollectionUtils.join("/", path));
+        GFileUtils.mkdirs(dir);
+        try {
+            return File.createTempFile(prefix, suffix, dir);
+        } catch (IOException e) {
+            throw new UncheckedIOException(e);
+        }
+    }
+
+    public File createTemporaryDirectory(@Nullable @Nonnull String prefix, @Nullable String suffix, @Nullable String... path) {
+        File dir = new File(baseDirFactory.create(), CollectionUtils.join("/", path));
+        GFileUtils.mkdirs(dir);
+        try {
+            // TODO: This is not a great paradigm for creating a temporary directory.
+            // See http://guava-libraries.googlecode.com/svn/tags/release08/javadoc/com/google/common/io/Files.html#createTempDir%28%29 for an alternative.
+            File tmpDir = TempFiles.createTempFile(prefix, suffix, dir);
+            tmpDir.delete();
+            tmpDir.mkdir();
+            return tmpDir;
+        } catch (IOException e) {
+            throw new UncheckedIOException(e);
+        }
+    }
+}
diff -Nur gradle-4.4.1/subprojects/file-temp/src/main/java/org/gradle/api/internal/file/TemporaryFileProvider.java gradle-4.4.1-new/subprojects/file-temp/src/main/java/org/gradle/api/internal/file/TemporaryFileProvider.java
--- gradle-4.4.1/subprojects/file-temp/src/main/java/org/gradle/api/internal/file/TemporaryFileProvider.java	1970-01-01 01:00:00.000000000 +0100
+++ gradle-4.4.1-new/subprojects/file-temp/src/main/java/org/gradle/api/internal/file/TemporaryFileProvider.java	2022-10-06 12:21:46.000047062 +0200
@@ -0,0 +1,39 @@
+/*
+ * Copyright 2010 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.gradle.api.internal.file;
+
+import javax.annotation.Nullable;
+import java.io.File;
+
+public interface TemporaryFileProvider {
+    /**
+     * Allocates a new temporary file with the exact specified path,
+     * relative to the temporary file directory. Does not create the file.
+     * Provides no guarantees around whether the file already exists.
+     *
+     * @param path The tail path components for the file.
+     * @return The file
+     */
+    File newTemporaryFile(String... path);
+
+    /**
+     * Allocates and creates a new temporary file with the given prefix, suffix,
+     * and path, relative to the temporary file directory.
+     */
+    File createTemporaryFile(String prefix, @Nullable String suffix, String... path);
+
+    File createTemporaryDirectory(@Nullable String prefix, @Nullable String suffix, String... path);
+}
diff -Nur gradle-4.4.1/subprojects/file-temp/src/main/java/org/gradle/api/internal/file/TmpDirTemporaryFileProvider.java gradle-4.4.1-new/subprojects/file-temp/src/main/java/org/gradle/api/internal/file/TmpDirTemporaryFileProvider.java
--- gradle-4.4.1/subprojects/file-temp/src/main/java/org/gradle/api/internal/file/TmpDirTemporaryFileProvider.java	1970-01-01 01:00:00.000000000 +0100
+++ gradle-4.4.1-new/subprojects/file-temp/src/main/java/org/gradle/api/internal/file/TmpDirTemporaryFileProvider.java	2022-10-06 16:56:28.763457276 +0200
@@ -0,0 +1,55 @@
+/*
+ * Copyright 2020 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.gradle.api.internal.file;
+
+import org.gradle.internal.Factory;
+import org.gradle.internal.FileUtils;
+import org.gradle.internal.SystemProperties;
+
+import javax.inject.Inject;
+import java.io.File;
+
+public class TmpDirTemporaryFileProvider extends DefaultTemporaryFileProvider {
+
+    @Inject
+    TmpDirTemporaryFileProvider() {
+        super(new Factory<File>() {
+            @Override
+            public File create() {
+                @SuppressWarnings("deprecation") final String tempDirLocation = SystemProperties.getInstance().getJavaIoTmpDir();
+                return FileUtils.canonicalize(new File(tempDirLocation));
+            }
+        });
+    }
+
+    private TmpDirTemporaryFileProvider(final Factory<File> tempDirProvider) {
+        super(new Factory<File>() {
+            @Override
+            public File create() {
+                return FileUtils.canonicalize(tempDirProvider.create());
+            }
+        });
+    }
+
+    public static TmpDirTemporaryFileProvider createLegacy() {
+        return new TmpDirTemporaryFileProvider();
+    }
+
+    public static TmpDirTemporaryFileProvider createFromCustomBase(Factory<File> tempDirProvider) {
+        return new TmpDirTemporaryFileProvider(tempDirProvider);
+    }
+}
\ No newline at end of file
diff -Nur gradle-4.4.1/subprojects/jvm-services/jvm-services.gradle gradle-4.4.1-new/subprojects/jvm-services/jvm-services.gradle
--- gradle-4.4.1/subprojects/jvm-services/jvm-services.gradle	2022-10-05 14:30:44.841619531 +0200
+++ gradle-4.4.1-new/subprojects/jvm-services/jvm-services.gradle	2022-10-06 14:38:10.758861191 +0200
@@ -6,6 +6,7 @@
 sourceCompatibility = 1.8
 
 dependencies {
+    compile project(":fileTemp")
     api project(":baseServices")
     api project(":processServices")
 }
diff -Nur gradle-4.4.1/subprojects/language-groovy/language-groovy.gradle gradle-4.4.1-new/subprojects/language-groovy/language-groovy.gradle
--- gradle-4.4.1/subprojects/language-groovy/language-groovy.gradle	2022-10-05 14:30:44.765620572 +0200
+++ gradle-4.4.1-new/subprojects/language-groovy/language-groovy.gradle	2022-10-06 14:37:16.727497917 +0200
@@ -6,6 +6,7 @@
     compile project(":core")
     compile project(":platformJvm")
     compile project(":languageJava")
+    compile project(":fileTemp")
 
     // TODO - get rid of this cycle
     integTestRuntime project(':plugins')
diff -Nur gradle-4.4.1/subprojects/language-groovy/src/main/java/org/gradle/api/internal/tasks/AntGroovydoc.java gradle-4.4.1-new/subprojects/language-groovy/src/main/java/org/gradle/api/internal/tasks/AntGroovydoc.java
--- gradle-4.4.1/subprojects/language-groovy/src/main/java/org/gradle/api/internal/tasks/AntGroovydoc.java	2022-10-05 14:30:44.769620517 +0200
+++ gradle-4.4.1-new/subprojects/language-groovy/src/main/java/org/gradle/api/internal/tasks/AntGroovydoc.java	2022-10-07 10:16:16.506996391 +0200
@@ -28,7 +28,7 @@
 import org.gradle.api.Project;
 import org.gradle.api.file.CopySpec;
 import org.gradle.api.file.FileCollection;
-import org.gradle.api.internal.ClassPathRegistry;
+import org.gradle.api.internal.file.TemporaryFileProvider;
 import org.gradle.api.internal.file.FileOperations;
 import org.gradle.api.internal.project.IsolatedAntBuilder;
 import org.gradle.api.internal.project.ProjectInternal;
@@ -45,12 +45,14 @@
 /**
  * Generates groovy doc using Ant.
  */
-public class AntGroovydoc {
+public final class AntGroovydoc {
 
     private final IsolatedAntBuilder ant;
+    private final TemporaryFileProvider temporaryFileProvider;
 
-    public AntGroovydoc(IsolatedAntBuilder ant, @SuppressWarnings("UnusedParameters") ClassPathRegistry ignored) {
+    public AntGroovydoc(IsolatedAntBuilder ant, TemporaryFileProvider temporaryFileProvider) {
         this.ant = ant;
+        this.temporaryFileProvider = temporaryFileProvider;
     }
 
     public void execute(final FileCollection source, File destDir, boolean use, boolean noTimestamp, boolean noVersionStamp,
@@ -102,7 +104,7 @@
         File temp;
         final String tempPath;
         try {
-            temp = File.createTempFile("temp", "");
+            temp = temporaryFileProvider.createTemporaryFile("temp", "");
             String p = temp.getCanonicalPath();
             tempPath = File.separatorChar == '/' ? p : p.replace(File.separatorChar, '/');
             temp.deleteOnExit();
@@ -120,7 +122,7 @@
                     "classname", "org.codehaus.groovy.ant.Groovy"
                 ));
 
-                antBuilder.invokeMethod("groovy", new Object[]{"new File('"+ tempPath + "').text = GroovySystem.version"});
+                antBuilder.invokeMethod("groovy", new Object[]{"new File('" + tempPath + "').text = GroovySystem.version"});
 
                 return null;
             }
diff -Nur gradle-4.4.1/subprojects/language-groovy/src/main/java/org/gradle/api/tasks/javadoc/Groovydoc.java gradle-4.4.1-new/subprojects/language-groovy/src/main/java/org/gradle/api/tasks/javadoc/Groovydoc.java
--- gradle-4.4.1/subprojects/language-groovy/src/main/java/org/gradle/api/tasks/javadoc/Groovydoc.java	2022-10-05 14:30:44.765620572 +0200
+++ gradle-4.4.1-new/subprojects/language-groovy/src/main/java/org/gradle/api/tasks/javadoc/Groovydoc.java	2022-10-07 10:21:46.911001542 +0200
@@ -19,7 +19,7 @@
 import org.gradle.api.InvalidUserDataException;
 import org.gradle.api.file.FileCollection;
 import org.gradle.api.file.FileTree;
-import org.gradle.api.internal.ClassPathRegistry;
+import org.gradle.api.internal.file.TmpDirTemporaryFileProvider;
 import org.gradle.api.internal.project.IsolatedAntBuilder;
 import org.gradle.api.internal.tasks.AntGroovydoc;
 import org.gradle.api.logging.LogLevel;
@@ -179,8 +179,8 @@
     public AntGroovydoc getAntGroovydoc() {
         if (antGroovydoc == null) {
             IsolatedAntBuilder antBuilder = getServices().get(IsolatedAntBuilder.class);
-            ClassPathRegistry classPathRegistry = getServices().get(ClassPathRegistry.class);
-            antGroovydoc = new AntGroovydoc(antBuilder, classPathRegistry);
+            TmpDirTemporaryFileProvider temporaryFileProvider = getServices().get(TmpDirTemporaryFileProvider.class);
+            antGroovydoc = new AntGroovydoc(antBuilder, temporaryFileProvider);
         }
         return antGroovydoc;
     }
diff -Nur gradle-4.4.1/subprojects/language-native/language-native.gradle gradle-4.4.1-new/subprojects/language-native/language-native.gradle
--- gradle-4.4.1/subprojects/language-native/language-native.gradle	2022-10-05 14:30:44.789620243 +0200
+++ gradle-4.4.1-new/subprojects/language-native/language-native.gradle	2022-10-06 14:40:36.241146774 +0200
@@ -18,6 +18,7 @@
     compile project(':core')
     compile project(':platformNative')
     compile project(':maven')
+    compile project(':fileTemp')
 }
 
 useTestFixtures()
diff -Nur gradle-4.4.1/subprojects/launcher/src/main/java/org/gradle/launcher/cli/CommandLineActionFactory.java gradle-4.4.1-new/subprojects/launcher/src/main/java/org/gradle/launcher/cli/CommandLineActionFactory.java
--- gradle-4.4.1/subprojects/launcher/src/main/java/org/gradle/launcher/cli/CommandLineActionFactory.java	2022-10-05 14:30:44.705621394 +0200
+++ gradle-4.4.1-new/subprojects/launcher/src/main/java/org/gradle/launcher/cli/CommandLineActionFactory.java	2022-10-07 10:14:04.504592428 +0200
@@ -19,6 +19,7 @@
 import org.apache.tools.ant.Main;
 import org.gradle.api.Action;
 import org.gradle.api.internal.file.IdentityFileResolver;
+import org.gradle.api.internal.file.TmpDirTemporaryFileProvider;
 import org.gradle.api.logging.configuration.LoggingConfiguration;
 import org.gradle.cli.CommandLineArgumentException;
 import org.gradle.cli.CommandLineConverter;
@@ -96,7 +97,7 @@
     }
 
     protected void createActionFactories(ServiceRegistry loggingServices, Collection<CommandLineAction> actions) {
-        actions.add(new BuildActionsFactory(loggingServices, new ParametersConverter(buildLayoutFactory), new CachingJvmVersionDetector(new DefaultJvmVersionDetector(new DefaultExecActionFactory(new IdentityFileResolver())))));
+        actions.add(new BuildActionsFactory(loggingServices, new ParametersConverter(buildLayoutFactory), new CachingJvmVersionDetector(new DefaultJvmVersionDetector(new DefaultExecActionFactory(new IdentityFileResolver(), TmpDirTemporaryFileProvider.createLegacy())))));
     }
 
     private static GradleLauncherMetaData clientMetaData() {
diff -Nur gradle-4.4.1/subprojects/native/native.gradle gradle-4.4.1-new/subprojects/native/native.gradle
--- gradle-4.4.1/subprojects/native/native.gradle	2022-10-05 14:30:44.817619860 +0200
+++ gradle-4.4.1-new/subprojects/native/native.gradle	2022-10-06 15:00:05.567488474 +0200
@@ -7,6 +7,7 @@
 
 dependencies {
     api project(':baseServices')
+    api project(':fileTemp')
     api libraries.nativePlatform
 
     implementation libraries.commons_io
diff -Nur gradle-4.4.1/subprojects/native/src/main/java/org/gradle/internal/nativeintegration/filesystem/jdk7/Jdk7Symlink.java gradle-4.4.1-new/subprojects/native/src/main/java/org/gradle/internal/nativeintegration/filesystem/jdk7/Jdk7Symlink.java
--- gradle-4.4.1/subprojects/native/src/main/java/org/gradle/internal/nativeintegration/filesystem/jdk7/Jdk7Symlink.java	2022-10-05 14:30:44.817619860 +0200
+++ gradle-4.4.1-new/subprojects/native/src/main/java/org/gradle/internal/nativeintegration/filesystem/jdk7/Jdk7Symlink.java	2022-10-06 15:02:05.006113832 +0200
@@ -16,6 +16,7 @@
 
 package org.gradle.internal.nativeintegration.filesystem.jdk7;
 
+import org.gradle.api.internal.file.TemporaryFileProvider;
 import org.gradle.internal.nativeintegration.filesystem.Symlink;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -30,8 +31,8 @@
 
     private final boolean symlinksSupported;
 
-    public Jdk7Symlink() {
-        this(doesSystemSupportSymlinks());
+    public Jdk7Symlink(TemporaryFileProvider temporaryFileProvider) {
+        this(doesSystemSupportSymlinks(temporaryFileProvider));
     }
 
     protected Jdk7Symlink(boolean symlinksSupported) {
@@ -57,12 +58,12 @@
         return false;
     }
 
-    private static boolean doesSystemSupportSymlinks() {
+    private static boolean doesSystemSupportSymlinks(TemporaryFileProvider temporaryFileProvider) {
         Path sourceFile = null;
         Path linkFile = null;
         try {
-            sourceFile = Files.createTempFile("symlink", "test");
-            linkFile = Files.createTempFile("symlink", "test_link");
+            sourceFile = temporaryFileProvider.createTemporaryFile("symlink", "test").toPath();
+            linkFile = temporaryFileProvider.createTemporaryFile("symlink", "test_link").toPath();
 
             Files.delete(linkFile);
             Files.createSymbolicLink(linkFile, sourceFile);
diff -Nur gradle-4.4.1/subprojects/native/src/main/java/org/gradle/internal/nativeintegration/filesystem/services/FileSystemServices.java gradle-4.4.1-new/subprojects/native/src/main/java/org/gradle/internal/nativeintegration/filesystem/services/FileSystemServices.java
--- gradle-4.4.1/subprojects/native/src/main/java/org/gradle/internal/nativeintegration/filesystem/services/FileSystemServices.java	2022-10-05 14:30:44.817619860 +0200
+++ gradle-4.4.1-new/subprojects/native/src/main/java/org/gradle/internal/nativeintegration/filesystem/services/FileSystemServices.java	2022-10-06 17:04:30.250008310 +0200
@@ -17,13 +17,18 @@
 package org.gradle.internal.nativeintegration.filesystem.services;
 
 import net.rubygrapefruit.platform.PosixFiles;
+import org.gradle.api.JavaVersion;
+import org.gradle.api.internal.file.TemporaryFileProvider;
 import org.gradle.internal.nativeintegration.filesystem.FileCanonicalizer;
 import org.gradle.internal.nativeintegration.filesystem.FileMetadataAccessor;
 import org.gradle.internal.nativeintegration.filesystem.FileModeAccessor;
 import org.gradle.internal.nativeintegration.filesystem.FileModeMutator;
 import org.gradle.internal.nativeintegration.filesystem.Symlink;
+import org.gradle.internal.nativeintegration.filesystem.jdk7.Jdk7Symlink;
+import org.gradle.internal.nativeintegration.filesystem.jdk7.WindowsJdk7Symlink;
 import org.gradle.internal.nativeplatform.filesystem.FileSystem;
 import org.gradle.internal.os.OperatingSystem;
+import org.gradle.internal.service.ServiceRegistration;
 import org.gradle.internal.reflect.JavaReflectionUtil;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -31,17 +36,37 @@
 public class FileSystemServices {
     private static final Logger LOGGER = LoggerFactory.getLogger(FileSystemServices.class);
 
+    public void configure(ServiceRegistration registration) {
+        registration.add(GenericFileSystem.Factory.class);
+    }
+
     @SuppressWarnings("UnusedDeclaration")
     public FileCanonicalizer createFileCanonicalizer() {
         return JavaReflectionUtil.newInstanceOrFallback("org.gradle.internal.nativeintegration.filesystem.jdk7.Jdk7FileCanonicalizer", FileSystemServices.class.getClassLoader(), FallbackFileCanonicalizer.class);
     }
 
+    private static Symlink createWindowsJdkSymlink() {
+        if (JavaVersion.current().isJava7Compatible()) {
+            return new WindowsJdk7Symlink();
+        } else {
+            return new WindowsSymlink();
+        }
+    }
+
+    private static Symlink createJdkSymlink(TemporaryFileProvider temporaryFileProvider) {
+        if (JavaVersion.current().isJava7Compatible()) {
+            return new Jdk7Symlink(temporaryFileProvider);
+        } else {
+            return new UnsupportedSymlink();
+        }
+    }
+
     @SuppressWarnings("UnusedDeclaration")
-    public FileSystem createFileSystem(OperatingSystem operatingSystem, PosixFiles posixFiles, FileMetadataAccessor metadataAccessor) throws Exception {
+    public FileSystem createFileSystem(GenericFileSystem.Factory genericFileSystemFactory, OperatingSystem operatingSystem, PosixFiles posixFiles, FileMetadataAccessor metadataAccessor, TemporaryFileProvider temporaryFileProvider) throws Exception {
 
         if (operatingSystem.isWindows()) {
-            Symlink symlink = JavaReflectionUtil.newInstanceOrFallback("org.gradle.internal.nativeintegration.filesystem.jdk7.WindowsJdk7Symlink", FileSystemServices.class.getClassLoader(), WindowsSymlink.class);
-            return new GenericFileSystem(new EmptyChmod(), new FallbackStat(), symlink, metadataAccessor);
+            final Symlink symlink = createWindowsJdkSymlink();
+            return genericFileSystemFactory.create(new EmptyChmod(), new FallbackStat(), symlink);
         }
 
         if (posixFiles instanceof UnavailablePosixFiles) {
@@ -50,15 +75,14 @@
             Symlink symlink = new NativePlatformBackedSymlink(posixFiles);
             FileModeMutator chmod = new NativePlatformBackedChmod(posixFiles);
             FileModeAccessor stat = new NativePlatformBackedStat(posixFiles);
-            return new GenericFileSystem(chmod, stat, symlink, metadataAccessor);
+            return genericFileSystemFactory.create(chmod, stat, symlink);
         }
 
-        Symlink symlink = JavaReflectionUtil.newInstanceOrFallback("org.gradle.internal.nativeintegration.filesystem.jdk7.Jdk7Symlink", FileSystemServices.class.getClassLoader(), UnsupportedSymlink.class);
-        LOGGER.debug("Using {} implementation as symlink.", symlink.getClass().getSimpleName());
+        Symlink symlink = createJdkSymlink(temporaryFileProvider);
 
         // Use java 7 APIs, if available, otherwise fallback to no-op
         Object handler = JavaReflectionUtil.newInstanceOrFallback("org.gradle.internal.nativeintegration.filesystem.jdk7.PosixJdk7FilePermissionHandler", FileSystemServices.class.getClassLoader(), UnsupportedFilePermissions.class);
-        return new GenericFileSystem((FileModeMutator) handler, (FileModeAccessor) handler, symlink, metadataAccessor);
+        return genericFileSystemFactory.create((FileModeMutator) handler, (FileModeAccessor) handler, symlink);
     }
 
 }
diff -Nur gradle-4.4.1/subprojects/native/src/main/java/org/gradle/internal/nativeintegration/filesystem/services/GenericFileSystem.java gradle-4.4.1-new/subprojects/native/src/main/java/org/gradle/internal/nativeintegration/filesystem/services/GenericFileSystem.java
--- gradle-4.4.1/subprojects/native/src/main/java/org/gradle/internal/nativeintegration/filesystem/services/GenericFileSystem.java	2022-10-05 14:30:44.817619860 +0200
+++ gradle-4.4.1-new/subprojects/native/src/main/java/org/gradle/internal/nativeintegration/filesystem/services/GenericFileSystem.java	2022-10-06 15:11:16.307769278 +0200
@@ -18,6 +18,8 @@
 import com.google.common.base.Charsets;
 import com.google.common.io.Files;
 import org.apache.commons.io.FileUtils;
+import org.gradle.api.internal.file.TemporaryFileProvider;
+import org.gradle.internal.SystemProperties;
 import org.gradle.internal.file.FileMetadataSnapshot;
 import org.gradle.internal.nativeintegration.filesystem.FileException;
 import org.gradle.internal.nativeintegration.filesystem.FileMetadataAccessor;
@@ -28,6 +30,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import javax.inject.Inject;
 import java.io.File;
 import java.io.IOException;
 import java.util.UUID;
@@ -37,6 +40,7 @@
 
     private Boolean caseSensitive;
     private final boolean canCreateSymbolicLink;
+    private final TemporaryFileProvider temporaryFileProvider;
 
     private final FileModeMutator chmod;
     private final FileModeAccessor stat;
@@ -91,12 +95,13 @@
         }
     }
 
-    public GenericFileSystem(FileModeMutator chmod, FileModeAccessor stat, Symlink symlink, FileMetadataAccessor metadata) {
+    public GenericFileSystem(FileModeMutator chmod, FileModeAccessor stat, Symlink symlink, FileMetadataAccessor metadata, TemporaryFileProvider temporaryFileProvider) {
         this.metadata = metadata;
         this.stat = stat;
         this.symlink = symlink;
         this.chmod = chmod;
         canCreateSymbolicLink = symlink.isSymlinkSupported();
+        this.temporaryFileProvider = temporaryFileProvider;
     }
 
     private void initializeCaseSensitive() {
@@ -121,7 +126,7 @@
     }
 
     private File createFile(String content) throws IOException {
-        File file = File.createTempFile("gradle_fs_probing", null, null);
+        File file = temporaryFileProvider.createTemporaryFile("gradle_fs_probing", null);
         Files.write(content, file, Charsets.UTF_8);
         return file;
     }
@@ -144,9 +149,25 @@
     }
 
     private void checkJavaIoTmpDirExists() throws IOException {
-        File dir = new File(System.getProperty("java.io.tmpdir"));
+        @SuppressWarnings("deprecation")
+        File dir = new File(SystemProperties.getInstance().getJavaIoTmpDir());
         if (!dir.exists()) {
             throw new IOException("java.io.tmpdir is set to a directory that doesn't exist: " + dir);
         }
     }
+
+    static final class Factory {
+        private final FileMetadataAccessor fileMetadataAccessor;
+        private final TemporaryFileProvider temporaryFileProvider;
+
+        @Inject
+        Factory(FileMetadataAccessor fileMetadataAccessor, TemporaryFileProvider temporaryFileProvider) {
+            this.fileMetadataAccessor = fileMetadataAccessor;
+            this.temporaryFileProvider = temporaryFileProvider;
+        }
+
+        GenericFileSystem create(FileModeMutator chmod, FileModeAccessor stat, Symlink symlink) {
+            return new GenericFileSystem(chmod, stat, symlink, fileMetadataAccessor, temporaryFileProvider);
+        }
+    }
 }
diff -Nur gradle-4.4.1/subprojects/native/src/main/java/org/gradle/internal/nativeintegration/services/NativeServices.java gradle-4.4.1-new/subprojects/native/src/main/java/org/gradle/internal/nativeintegration/services/NativeServices.java
--- gradle-4.4.1/subprojects/native/src/main/java/org/gradle/internal/nativeintegration/services/NativeServices.java	2022-10-05 14:30:44.813619915 +0200
+++ gradle-4.4.1-new/subprojects/native/src/main/java/org/gradle/internal/nativeintegration/services/NativeServices.java	2022-10-06 15:16:07.452420287 +0200
@@ -26,7 +26,9 @@
 import net.rubygrapefruit.platform.Terminals;
 import net.rubygrapefruit.platform.WindowsRegistry;
 import net.rubygrapefruit.platform.internal.DefaultProcessLauncher;
+import org.gradle.api.Action;
 import org.gradle.api.JavaVersion;
+import org.gradle.api.internal.file.TmpDirTemporaryFileProvider;
 import org.gradle.internal.SystemProperties;
 import org.gradle.internal.jvm.Jvm;
 import org.gradle.internal.nativeintegration.ProcessEnvironment;
@@ -46,6 +48,7 @@
 import org.gradle.internal.reflect.JavaReflectionUtil;
 import org.gradle.internal.service.DefaultServiceRegistry;
 import org.gradle.internal.service.ServiceRegistry;
+import org.gradle.internal.service.ServiceRegistration;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -132,6 +135,12 @@
 
     private NativeServices() {
         addProvider(new FileSystemServices());
+        register(new Action<ServiceRegistration>() {
+            @Override
+            public void execute(ServiceRegistration registration) {
+                registration.add(TmpDirTemporaryFileProvider.class);
+            }
+        });
     }
 
     @Override
diff -Nur gradle-4.4.1/subprojects/native/src/test/groovy/org/gradle/internal/nativeintegration/filesystem/jdk7/Jdk7SymlinkTest.groovy gradle-4.4.1-new/subprojects/native/src/test/groovy/org/gradle/internal/nativeintegration/filesystem/jdk7/Jdk7SymlinkTest.groovy
--- gradle-4.4.1/subprojects/native/src/test/groovy/org/gradle/internal/nativeintegration/filesystem/jdk7/Jdk7SymlinkTest.groovy	2022-10-05 14:30:44.813619915 +0200
+++ gradle-4.4.1-new/subprojects/native/src/test/groovy/org/gradle/internal/nativeintegration/filesystem/jdk7/Jdk7SymlinkTest.groovy	2022-10-06 15:19:59.097755754 +0200
@@ -16,6 +16,8 @@
 
 package org.gradle.internal.nativeintegration.filesystem.jdk7
 
+import org.gradle.api.internal.file.TestFiles
+import org.gradle.internal.SystemPropertie
 import org.gradle.test.fixtures.file.TestNameTestDirectoryProvider
 import org.gradle.util.Requires
 import org.gradle.util.TestPrecondition
@@ -29,7 +31,7 @@
      @Requires(TestPrecondition.SYMLINKS)
     def 'on symlink supporting system, it will return true for supported symlink'() {
         expect:
-        new Jdk7Symlink().isSymlinkSupported()
+        new Jdk7Symlink(TestFiles.tmpDirTemporaryFileProvider(temporaryFolder.getRoot())).isSymlinkSupported()
     }
 
      @Requires(TestPrecondition.NO_SYMLINKS)
@@ -40,7 +42,7 @@
 
     @Requires(TestPrecondition.SYMLINKS)
     def 'can create and detect symlinks'() {
-        def symlink = new Jdk7Symlink()
+        def symlink = new Jdk7Symlink(TestFiles.tmpDirTemporaryFileProvider(temporaryFolder.getRoot()))
         def testDirectory = temporaryFolder.getTestDirectory().createDir()
 
         when:
diff -Nur gradle-4.4.1/subprojects/native/src/test/groovy/org/gradle/internal/nativeintegration/filesystem/services/GenericFileSystemTest.groovy gradle-4.4.1-new/subprojects/native/src/test/groovy/org/gradle/internal/nativeintegration/filesystem/services/GenericFileSystemTest.groovy
--- gradle-4.4.1/subprojects/native/src/test/groovy/org/gradle/internal/nativeintegration/filesystem/services/GenericFileSystemTest.groovy	2022-10-05 14:30:44.813619915 +0200
+++ gradle-4.4.1-new/subprojects/native/src/test/groovy/org/gradle/internal/nativeintegration/filesystem/services/GenericFileSystemTest.groovy	2022-10-06 15:22:37.995927962 +0200
@@ -15,20 +15,27 @@
  */
 
 package org.gradle.internal.nativeintegration.filesystem.services
+
+import org.gradle.api.internal.file.TestFiles
 import org.gradle.internal.nativeintegration.filesystem.FileException
 import org.gradle.internal.nativeintegration.filesystem.FileMetadataAccessor
 import org.gradle.internal.nativeintegration.filesystem.FileModeAccessor
 import org.gradle.internal.nativeintegration.filesystem.FileModeMutator
 import org.gradle.internal.nativeintegration.filesystem.Symlink
+import org.gradle.test.fixtures.file.TestNameTestDirectoryProvider
+import org.junit.Rule
 import spock.lang.Specification
 
 class GenericFileSystemTest extends Specification {
+    @Rule
+    TestNameTestDirectoryProvider temporaryFolder = new TestNameTestDirectoryProvider(getClass())
     def fileModeMutator = Stub(FileModeMutator)
     def fileModeAccessor = Stub(FileModeAccessor)
     def symlink = Stub(Symlink)
     def fileMetadataAccessor = Stub(FileMetadataAccessor)
-    def fileSystem = new GenericFileSystem(fileModeMutator, fileModeAccessor, symlink, fileMetadataAccessor)
-
+    def fileSystemFactory = new GenericFileSystem.Factory(fileMetadataAccessor, statistics, TestFiles.tmpDirTemporaryFileProvider(temporaryFolder.root))
+    def fileSystem = fileSystemFactory.create(fileModeMutator, fileModeAccessor, symlink)
+    
     def "wraps failure to set file mode"() {
         def failure = new RuntimeException()
         def file = new File("does-not-exist")
diff -Nur gradle-4.4.1/subprojects/scala/src/main/java/org/gradle/api/tasks/scala/ScalaDoc.java gradle-4.4.1-new/subprojects/scala/src/main/java/org/gradle/api/tasks/scala/ScalaDoc.java
--- gradle-4.4.1/subprojects/scala/src/main/java/org/gradle/api/tasks/scala/ScalaDoc.java	2022-10-05 14:30:44.701621449 +0200
+++ gradle-4.4.1-new/subprojects/scala/src/main/java/org/gradle/api/tasks/scala/ScalaDoc.java	2022-10-06 15:34:25.731787311 +0200
@@ -29,9 +29,11 @@
 import org.gradle.api.tasks.PathSensitivity;
 import org.gradle.api.tasks.SourceTask;
 import org.gradle.api.tasks.TaskAction;
+import org.gradle.internal.file.TempFiles;
 import org.gradle.util.GUtil;
 
 import javax.inject.Inject;
+import java.io.IOException;
 import java.io.File;
 
 /**
diff -Nur gradle-4.4.1/subprojects/testing-base/src/main/java/org/gradle/api/internal/tasks/testing/worker/ForkingTestClassProcessor.java gradle-4.4.1-new/subprojects/testing-base/src/main/java/org/gradle/api/internal/tasks/testing/worker/ForkingTestClassProcessor.java
--- gradle-4.4.1/subprojects/testing-base/src/main/java/org/gradle/api/internal/tasks/testing/worker/ForkingTestClassProcessor.java	2022-10-05 14:30:44.537623697 +0200
+++ gradle-4.4.1-new/subprojects/testing-base/src/main/java/org/gradle/api/internal/tasks/testing/worker/ForkingTestClassProcessor.java	2022-10-06 15:32:57.140806308 +0200
@@ -99,6 +99,7 @@
             moduleRegistry.getModule("gradle-core").getImplementationClasspath().getAsURLs(),
             moduleRegistry.getModule("gradle-logging").getImplementationClasspath().getAsURLs(),
             moduleRegistry.getModule("gradle-messaging").getImplementationClasspath().getAsURLs(),
+            moduleRegistry.getModule("gradle-file-temp").getImplementationClasspath().getAsURLs(),
             moduleRegistry.getModule("gradle-base-services").getImplementationClasspath().getAsURLs(),
             moduleRegistry.getModule("gradle-cli").getImplementationClasspath().getAsURLs(),
             moduleRegistry.getModule("gradle-native").getImplementationClasspath().getAsURLs(),
@@ -110,7 +111,8 @@
             moduleRegistry.getExternalModule("native-platform").getImplementationClasspath().getAsURLs(),
             moduleRegistry.getExternalModule("kryo").getImplementationClasspath().getAsURLs(),
             moduleRegistry.getExternalModule("commons-lang").getImplementationClasspath().getAsURLs(),
-            moduleRegistry.getExternalModule("junit").getImplementationClasspath().getAsURLs()
+            moduleRegistry.getExternalModule("junit").getImplementationClasspath().getAsURLs(),
+            moduleRegistry.getExternalModule("javax.inject").getImplementationClasspath().getAsURLs()
         );
     }
 
diff -Nur gradle-4.4.1/subprojects/testing-base/src/test/groovy/org/gradle/api/internal/tasks/testing/worker/ForkingTestClassProcessorTest.groovy gradle-4.4.1-new/subprojects/testing-base/src/test/groovy/org/gradle/api/internal/tasks/testing/worker/ForkingTestClassProcessorTest.groovy
--- gradle-4.4.1/subprojects/testing-base/src/test/groovy/org/gradle/api/internal/tasks/testing/worker/ForkingTestClassProcessorTest.groovy	2022-10-05 14:30:44.533623751 +0200
+++ gradle-4.4.1-new/subprojects/testing-base/src/test/groovy/org/gradle/api/internal/tasks/testing/worker/ForkingTestClassProcessorTest.groovy	2022-10-06 15:33:59.360090650 +0200
@@ -71,9 +71,9 @@
         processor.forkProcess()
 
         then:
-        10 * moduleRegistry.getModule(_) >> { module(it[0]) }
-        6 * moduleRegistry.getExternalModule(_) >> { module(it[0]) }
-        1 * workerProcessBuilder.setImplementationClasspath(_) >> { assert it[0].size() == 16 }
+        11 * moduleRegistry.getModule(_) >> { module(it[0]) }
+        7 * moduleRegistry.getExternalModule(_) >> { module(it[0]) }
+        1 * workerProcessBuilder.setImplementationClasspath(_) >> { assert it[0].size() == 17 }
     }
 
     def module(String module) {
diff -Nur gradle-4.4.1/subprojects/testing-jvm/testing-jvm.gradle gradle-4.4.1-new/subprojects/testing-jvm/testing-jvm.gradle
--- gradle-4.4.1/subprojects/testing-jvm/testing-jvm.gradle	2022-10-05 14:30:44.789620243 +0200
+++ gradle-4.4.1-new/subprojects/testing-jvm/testing-jvm.gradle	2022-10-06 15:34:17.835878131 +0200
@@ -21,6 +21,7 @@
     compile project(':platformJvm')
     compile project(':languageJava')
     compile project(':testingBase')
+    compile project(':fileTemp')
 
     compile libraries.junit
     compile libraries.testng
