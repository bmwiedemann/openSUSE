From 0b3bc4592e096e948398f6d691d1263b0379a5bf Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Corentin=20No=C3=ABl?= <corentin.noel@collabora.com>
Date: Tue, 15 Oct 2024 13:32:05 +0200
Subject: [PATCH] Add support for Mutter47

---
 lib/App.vala                                  |    4 +-
 meson.build                                   |   11 +
 src/Background/Background.vala                |   23 +
 src/Background/BackgroundContainer.vala       |    4 +
 src/InternalUtils.vala                        |    4 +
 src/ScreenshotManager.vala                    |    8 +-
 src/Widgets/IconGroup.vala                    |    4 +
 src/Widgets/ScreenShield.vala                 |    4 +
 src/Widgets/Tooltip.vala                      |    4 +
 .../WindowSwitcher/WindowSwitcher.vala        |    4 +
 src/WindowManager.vala                        |    4 +
 src/WindowTracker.vala                        |    2 +-
 vapi/Clutter-15-custom.vala                   |   30 +
 vapi/Clutter-15.metadata                      |  139 +++
 vapi/Cogl-15-custom.vala                      |   66 +
 vapi/Cogl-15.metadata                         |   46 +
 vapi/Meta-15.metadata                         |  189 +++
 vapi/Mtk-15.metadata                          |    6 +
 vapi/libmutter-15.deps                        |    1 +
 vapi/libmutter-15.vapi                        |    1 +
 vapi/libmutter.vapi                           |  126 +-
 vapi/meson.build                              |   91 ++
 vapi/mutter-clutter-15.deps                   |    6 +
 vapi/mutter-clutter-15.vapi                   |    1 +
 vapi/mutter-clutter.vapi                      | 1100 ++++++-----------
 vapi/mutter-cogl-14.vapi                      |  262 +++-
 vapi/mutter-cogl-15.deps                      |    5 +
 vapi/mutter-cogl-15.vapi                      |    1 +
 vapi/mutter-cogl-pango-15.vapi                |    1 +
 vapi/mutter-cogl-pango.vapi                   |   31 +-
 vapi/mutter-mtk-13.vapi                       |   26 +
 vapi/mutter-mtk-15.vapi                       |    1 +
 32 files changed, 1445 insertions(+), 760 deletions(-)
 create mode 100644 vapi/Clutter-15-custom.vala
 create mode 100644 vapi/Clutter-15.metadata
 create mode 100644 vapi/Cogl-15-custom.vala
 create mode 100644 vapi/Cogl-15.metadata
 create mode 100644 vapi/Meta-15.metadata
 create mode 100644 vapi/Mtk-15.metadata
 create mode 120000 vapi/libmutter-15.deps
 create mode 120000 vapi/libmutter-15.vapi
 create mode 100644 vapi/mutter-clutter-15.deps
 create mode 120000 vapi/mutter-clutter-15.vapi
 create mode 100644 vapi/mutter-cogl-15.deps
 create mode 120000 vapi/mutter-cogl-15.vapi
 create mode 120000 vapi/mutter-cogl-pango-15.vapi
 create mode 120000 vapi/mutter-mtk-15.vapi

diff --git a/lib/App.vala b/lib/App.vala
index 6b5763afb..efc4ad368 100644
--- a/lib/App.vala
+++ b/lib/App.vala
@@ -158,8 +158,8 @@ public class Gala.App : GLib.Object {
         return windows.data;
     }
 
-    public GLib.SList<Posix.pid_t?> get_pids () {
-        var results = new GLib.SList<Posix.pid_t?> ();
+    public GLib.SList<pid_t?> get_pids () {
+        var results = new GLib.SList<pid_t?> ();
         foreach (unowned var window in windows) {
             var pid = window.get_pid ();
             if (pid < 1) {
diff --git a/meson.build b/meson.build
index 3bfa153df..db000a1a2 100644
--- a/meson.build
+++ b/meson.build
@@ -158,6 +158,17 @@ if mutter46_dep.found()
 	vala_flags = ['--define', 'HAS_MUTTER43', '--define', 'HAS_MUTTER44', '--define', 'HAS_MUTTER45', '--define', 'HAS_MUTTER46']
 endif
 
+mutter47_dep = dependency('libmutter-15', version: ['>= 47', '< 48'], required: false)
+if mutter47_dep.found()
+	libmutter_dep = dependency('libmutter-15', version: '>= 47')
+	mutter_dep = [
+		libmutter_dep,
+		dependency('mutter-mtk-15'), dependency('mutter-cogl-15'),
+		dependency('mutter-cogl-pango-15'), dependency('mutter-clutter-15')
+	]
+	vala_flags = ['--define', 'HAS_MUTTER43', '--define', 'HAS_MUTTER44', '--define', 'HAS_MUTTER45', '--define', 'HAS_MUTTER46', '--define', 'HAS_MUTTER47']
+endif
+
 if mutter_dep.length() == 0
     error ('No supported mutter library found!')
 endif
diff --git a/src/Background/Background.vala b/src/Background/Background.vala
index c58d131bd..aaf1084bc 100644
--- a/src/Background/Background.vala
+++ b/src/Background/Background.vala
@@ -108,7 +108,18 @@ namespace Gala {
             var settings = background_source.gnome_background_settings;
 
             color_string = settings.get_string ("primary-color");
+#if HAS_MUTTER47
+            var color = Cogl.Color.from_string (color_string);
+#else
             var color = Clutter.Color.from_string (color_string);
+#endif
+            if (color == null) {
+#if HAS_MUTTER47
+                color = Cogl.Color.from_string ("black");
+#else
+                color = Clutter.Color.from_string ("black");
+#endif
+            }
 
             var shading_type = settings.get_enum ("color-shading-type");
 
@@ -116,7 +127,19 @@ namespace Gala {
                 background.set_color (color);
             } else {
                 color_string = settings.get_string ("secondary-color");
+#if HAS_MUTTER47
+                var second_color = Cogl.Color.from_string (color_string);
+#else
                 var second_color = Clutter.Color.from_string (color_string);
+#endif
+                if (second_color == null) {
+#if HAS_MUTTER47
+                    second_color = Cogl.Color.from_string ("black");
+#else
+                    second_color = Clutter.Color.from_string ("black");
+#endif
+                }
+
                 background.set_gradient ((GDesktop.BackgroundShading) shading_type, color, second_color);
             }
         }
diff --git a/src/Background/BackgroundContainer.vala b/src/Background/BackgroundContainer.vala
index 942ae6177..1b7c347dc 100644
--- a/src/Background/BackgroundContainer.vala
+++ b/src/Background/BackgroundContainer.vala
@@ -49,7 +49,11 @@ namespace Gala {
         }
 
         public void set_black_background (bool black) {
+#if HAS_MUTTER47
+            set_background_color (black ? Cogl.Color.from_string ("Black") : null);
+#else
             set_background_color (black ? Clutter.Color.from_string ("Black") : null);
+#endif
         }
 
         private void update () {
diff --git a/src/InternalUtils.vala b/src/InternalUtils.vala
index 3578ef3d2..18d06a8e6 100644
--- a/src/InternalUtils.vala
+++ b/src/InternalUtils.vala
@@ -71,8 +71,12 @@ namespace Gala {
             }
 
             unowned Meta.X11Display x11display = display.get_x11_display ();
+#if HAS_MUTTER47
+            x11display.set_stage_input_region (rects);
+#else
             var xregion = X.Fixes.create_region (x11display.get_xdisplay (), rects);
             x11display.set_stage_input_region (xregion);
+#endif
         }
 
         /**
diff --git a/src/ScreenshotManager.vala b/src/ScreenshotManager.vala
index ec74631b6..beefa7070 100644
--- a/src/ScreenshotManager.vala
+++ b/src/ScreenshotManager.vala
@@ -65,7 +65,9 @@ namespace Gala {
             var flash_actor = new Clutter.Actor ();
             flash_actor.set_size (width, height);
             flash_actor.set_position (x, y);
-#if HAS_MUTTER46
+#if HAS_MUTTER47
+            flash_actor.set_background_color (Cogl.Color.from_string ("white"));
+#elif HAS_MUTTER46
             flash_actor.set_background_color (Clutter.Color.from_pixel (0xffffffffu));
 #else
             flash_actor.set_background_color (Clutter.Color.get_static (Clutter.StaticColor.WHITE));
@@ -151,8 +153,12 @@ namespace Gala {
             window_actor.get_position (out actor_x, out actor_y);
 
             var rect = window.get_frame_rect ();
+#if HAS_MUTTER45
+            if (!include_frame) {
+#if else
             if ((include_frame && window.is_client_decorated ()) ||
                 (!include_frame && !window.is_client_decorated ())) {
+#endif
                 rect = window.frame_rect_to_client_rect (rect);
             }
 
diff --git a/src/Widgets/IconGroup.vala b/src/Widgets/IconGroup.vala
index b1ecd7d55..f84c40728 100644
--- a/src/Widgets/IconGroup.vala
+++ b/src/Widgets/IconGroup.vala
@@ -114,6 +114,9 @@ namespace Gala {
             var height = InternalUtils.scale_to_int (WorkspaceClone.BOTTOM_OFFSET, scale_factor);
             var backdrop_opacity_int = (uint8) (BACKDROP_ABSOLUTE_OPACITY * backdrop_opacity);
 
+#if HAS_MUTTER47
+//FIXME: TODO!
+#else
             Cogl.VertexP2T2C4 vertices[4];
             vertices[0] = { x, y + height, 0, 1, backdrop_opacity_int, backdrop_opacity_int, backdrop_opacity_int, backdrop_opacity_int };
             vertices[1] = { x, y, 0, 0, 0, 0, 0, 0 };
@@ -123,6 +126,7 @@ namespace Gala {
             var primitive = new Cogl.Primitive.p2t2c4 (context.get_framebuffer ().get_context (), Cogl.VerticesMode.TRIANGLE_STRIP, vertices);
             var pipeline = new Cogl.Pipeline (context.get_framebuffer ().get_context ());
             primitive.draw (context.get_framebuffer (), pipeline);
+#endif
             base.paint (context);
         }
 
diff --git a/src/Widgets/ScreenShield.vala b/src/Widgets/ScreenShield.vala
index 61215fe60..fc9db658d 100644
--- a/src/Widgets/ScreenShield.vala
+++ b/src/Widgets/ScreenShield.vala
@@ -133,7 +133,11 @@ namespace Gala {
                 return Clutter.EVENT_STOP;
             });
 
+#if HAS_MUTTER47
+            background_color = Cogl.Color.from_string ("black");
+#else
             background_color = Clutter.Color.from_string ("black");
+#endif
 
             expand_to_screen_size ();
 
diff --git a/src/Widgets/Tooltip.vala b/src/Widgets/Tooltip.vala
index 5af4976e0..331949b99 100644
--- a/src/Widgets/Tooltip.vala
+++ b/src/Widgets/Tooltip.vala
@@ -22,7 +22,11 @@ public class Gala.Tooltip : CanvasActor {
     construct {
         max_width = 200;
 
+#if HAS_MUTTER47
+        Cogl.Color text_color = {
+#else
         Clutter.Color text_color = {
+#endif
             (uint8) Drawing.Color.TOOLTIP_TEXT_COLOR.red * uint8.MAX,
             (uint8) Drawing.Color.TOOLTIP_TEXT_COLOR.green * uint8.MAX,
             (uint8) Drawing.Color.TOOLTIP_TEXT_COLOR.blue * uint8.MAX,
diff --git a/src/Widgets/WindowSwitcher/WindowSwitcher.vala b/src/Widgets/WindowSwitcher/WindowSwitcher.vala
index 4cf6d6890..6cbf647d1 100644
--- a/src/Widgets/WindowSwitcher/WindowSwitcher.vala
+++ b/src/Widgets/WindowSwitcher/WindowSwitcher.vala
@@ -161,7 +161,11 @@ public class Gala.WindowSwitcher : CanvasActor {
 
         var stroke_width = scaling_factor;
 
+#if HAS_MUTTER47
+        caption.color = Cogl.Color.from_string (caption_color);
+#else
         caption.color = Clutter.Color.from_string (caption_color);
+#endif
 
         ctx.save ();
         ctx.set_operator (Cairo.Operator.CLEAR);
diff --git a/src/WindowManager.vala b/src/WindowManager.vala
index 8d1122132..d969c6c17 100644
--- a/src/WindowManager.vala
+++ b/src/WindowManager.vala
@@ -186,7 +186,11 @@ namespace Gala {
             stage = display.get_stage () as Clutter.Stage;
             var background_settings = new GLib.Settings ("org.gnome.desktop.background");
             var color = background_settings.get_string ("primary-color");
+#if HAS_MUTTER47
+            stage.background_color = Cogl.Color.from_string (color);
+#else
             stage.background_color = Clutter.Color.from_string (color);
+#endif
 
             unowned var laters = display.get_compositor ().get_laters ();
             laters.add (Meta.LaterType.BEFORE_REDRAW, () => {
diff --git a/src/WindowTracker.vala b/src/WindowTracker.vala
index 3f8af4eb6..74f2f8455 100644
--- a/src/WindowTracker.vala
+++ b/src/WindowTracker.vala
@@ -52,7 +52,7 @@ public class Gala.WindowTracker : GLib.Object {
         return get_app_from_id (id);
     }
 
-    private static unowned Gala.App? get_app_from_pid (Posix.pid_t pid) {
+    private static unowned Gala.App? get_app_from_pid (pid_t pid) {
         var running_apps = Gala.AppSystem.get_default ().get_running_apps ();
         foreach (unowned Gala.App app in running_apps) {
             var app_pids = app.get_pids ();
diff --git a/vapi/Clutter-15-custom.vala b/vapi/Clutter-15-custom.vala
new file mode 100644
index 000000000..abc9b22d7
--- /dev/null
+++ b/vapi/Clutter-15-custom.vala
@@ -0,0 +1,30 @@
+namespace Clutter {
+	public interface Container : GLib.Object {
+		public void add (params Clutter.Actor[] actors);
+		[CCode (cname = "clutter_container_class_find_child_property")]
+		public class unowned GLib.ParamSpec find_child_property (string property_name);
+		[CCode (cname = "clutter_container_class_list_child_properties")]
+		public class unowned GLib.ParamSpec[] list_child_properties ();
+	}
+
+	public struct Units {
+		[CCode (cname = "clutter_units_from_cm")]
+		public Units.from_cm (float cm);
+		[CCode (cname = "clutter_units_from_em")]
+		public Units.from_em (float em);
+		[CCode (cname = "clutter_units_from_em_for_font")]
+		public Units.from_em_for_font (string font_name, float em);
+		[CCode (cname = "clutter_units_from_mm")]
+		public Units.from_mm (float mm);
+		[CCode (cname = "clutter_units_from_pixels")]
+		public Units.from_pixels (int px);
+		[CCode (cname = "clutter_units_from_pt")]
+		public Units.from_pt (float pt);
+		[CCode (cname = "clutter_units_from_string")]
+		public Units.from_string (string str);
+	}
+
+	[CCode (cheader_filename = "clutter/clutter.h", has_copy_function = false, has_destroy_function = false, has_type_id = false)]
+	public struct Capture {
+	}
+}
diff --git a/vapi/Clutter-15.metadata b/vapi/Clutter-15.metadata
new file mode 100644
index 000000000..97a429d4a
--- /dev/null
+++ b/vapi/Clutter-15.metadata
@@ -0,0 +1,139 @@
+// Non mini-object
+ActorBox struct
+Margin struct
+PaintVolume struct
+Perspective struct
+
+*.ref unowned
+
+Actor
+	.apply_transform.matrix ref
+	.get_abs_allocation_vertices.verts out=false
+Event.type#method name="get_type"
+Image
+	.new symbol_type="constructor"
+
+// ???
+Actor.has_pointer#method name="get_has_pointer"
+
+// Not all backing symbols are deprecated
+Actor.pick deprecated=false
+
+// Nullable return values
+Actor
+	.get_parent nullable
+
+// method/virtual-method/signal don't match
+Actor
+	.event#method name="emit_event"
+	.get_paint_volume#virtual_method name="get_paint_volume_vfunc"
+	.get_paint_volume#virtual_method.volume out
+Text
+	.activate#method name="try_activate"
+	.insert_text#signal skip
+TextBuffer.get_text#virtual_method name="get_text_with_length"
+
+// Default values
+Stage.read_pixels
+	.width default=-1
+	.height default=-1
+Stage.paint_to_buffer
+    .data type="uint8[]"
+Text
+	.position_to_coords.line_height default=null
+
+// Skipped by g-i for unknown reasons
+LayoutManager
+	.create_child_meta skip=false
+
+// Variadic arguments
+Backend
+	.get_cogl_context skip=false
+Interval
+	.new skip=false
+	.get_interval skip=false
+	.set_final skip=false
+	.set_initial skip=false
+	.set_interval skip=false
+LayoutManager
+	.child_get skip=false
+	.child_set skip=false
+
+// Skipped upstream for unknown reasons
+Interval.register_progress_func skip=false
+threads_add_idle skip=false
+threads_add_idle_full skip=false
+threads_add_timeout skip=false
+threads_add_timeout_full skip=false
+
+// struct/class confusion
+ActorBox
+	.new skip
+	.from_vertices skip
+Margin
+	.new skip
+
+// Upstream
+Event
+	.get_position.position out
+
+TransferFunction.get_default_luminances
+	.min_lum_out out
+	.max_lum_out out
+	.ref_lum_out out
+
+FrameListenerIface skip
+FrameClock.new skip
+
+// Remove for clutter-2.0
+/////////////////////////
+
+StageView.layout skip
+
+Stage
+	.paint_view.redraw_clip type="Cairo.Region"
+
+// *Event should be compact classes derived from Clutter.Event
+Event.type skip=false
+AnyEvent struct=false base_type="Clutter.Event"
+ButtonEvent struct=false base_type="Clutter.Event"
+CrossingEvent struct=false base_type="Clutter.Event"
+DeviceEvent struct=false base_type="Clutter.Event"
+IMEvent struct=false base_type="Clutter.Event"
+KeyEvent struct=false base_type="Clutter.Event"
+MotionEvent struct=false base_type="Clutter.Event"
+PadButtonEvent struct=false base_type="Clutter.Event"
+PadRingEvent struct=false base_type="Clutter.Event"
+PadStripEvent struct=false base_type="Clutter.Event"
+ProximityEvent struct=false base_type="Clutter.Event"
+ScrollEvent struct=false base_type="Clutter.Event"
+TouchEvent struct=false base_type="Clutter.Event"
+TouchpadHoldEvent struct=false base_type="Clutter.Event"
+TouchpadPinchEvent struct=false base_type="Clutter.Event"
+TouchpadSwipeEvent struct=false base_type="Clutter.Event"
+
+// Keysyms used to be CLUTTER_X instead of CLUTTER_KEY_X
+*#constant skip
+CURRENT_TIME skip=false
+PRIORITY_REDRAW skip=false
+
+// Clutter devs don't like us creating nested namespaces
+value_* name="value_(.+)" parent="Clutter.Value"
+threads_* name="threads_(.+)" parent="Clutter.Threads"
+threads_add_idle name="add" parent="Clutter.Threads.Idle"
+threads_add_idle_full name="add_full" parent="Clutter.Threads.Idle"
+threads_add_timeout name="add" parent="Clutter.Threads.Timeout"
+threads_add_timeout_full name="add_full" parent="Clutter.Threads.Timeout"
+
+// There is no way to know sealed classes before GLib 2.70
+ColorState sealed
+FrameClock sealed
+TextureContent sealed
+
+TextureContent.new_from_texture symbol_type="constructor"
+
+// Possibly keep
+KEY_* skip=false name="KEY_(.+)" type="uint" parent="Clutter.Key"
+BUTTON_* skip=false name="BUTTON_(.+)" type="uint32" parent="Clutter.Button"
+EVENT_STOP skip=false type="bool"
+EVENT_PROPAGATE skip=false type="bool"
diff --git a/vapi/Cogl-15-custom.vala b/vapi/Cogl-15-custom.vala
new file mode 100644
index 000000000..90d46b330
--- /dev/null
+++ b/vapi/Cogl-15-custom.vala
@@ -0,0 +1,66 @@
+namespace Cogl {
+	public struct Color {
+		[CCode (cname="cogl_color_init_from_4f")]
+		public Color.from_4f (float red, float green, float blue, float alpha);
+		[CCode (cname="cogl_color_init_from_hsl")]
+		public Color.from_hsl (float hue, float saturation, float luminance);
+		[CCode (cname = "_vala_cogl_color_from_string")]
+		public static Cogl.Color? from_string (string str) {
+			Cogl.Color color = {};
+			if (color.init_from_string (str))
+				return color;
+
+			return null;
+		}
+	}
+	[CCode (cheader_filename = "cogl/cogl.h", has_type_id = false)]
+	public struct VertexP2 {
+		public float x;
+		public float y;
+	}
+	[CCode (cheader_filename = "cogl/cogl.h", has_type_id = false)]
+	public struct VertexP2C4 {
+		public float x;
+		public float y;
+		public uint8 r;
+		public uint8 g;
+		public uint8 b;
+		public uint8 a;
+	}
+	[CCode (cheader_filename = "cogl/cogl.h", has_type_id = false)]
+	public struct VertexP2T2 {
+		public float x;
+		public float y;
+		public float s;
+		public float t;
+	}
+	[CCode (cheader_filename = "cogl/cogl.h", has_type_id = false)]
+	public struct VertexP2T2C4 {
+		public float x;
+		public float y;
+		public float s;
+		public float t;
+		public uint8 r;
+		public uint8 g;
+		public uint8 b;
+		public uint8 a;
+	}
+	[CCode (cheader_filename = "cogl/cogl.h", has_type_id = false)]
+	public struct VertexP3 {
+		public float x;
+		public float y;
+		public float z;
+	}
+	[CCode (cheader_filename = "cogl/cogl.h", has_type_id = false)]
+	public struct VertexP3T2 {
+		public float x;
+		public float y;
+		public float z;
+		public float s;
+		public float t;
+	}
+	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_PIXEL_FORMAT_", type_id = "cogl_pixel_format_get_type ()")]
+	public enum PixelFormat {
+		CAIRO_ARGB32_COMPAT;
+	}
+}
diff --git a/vapi/Cogl-15.metadata b/vapi/Cogl-15.metadata
new file mode 100644
index 000000000..0afa18b7e
--- /dev/null
+++ b/vapi/Cogl-15.metadata
@@ -0,0 +1,46 @@
+* cheader_filename="cogl/cogl.h"
+
+Color struct
+
+Color.equal.v1 type="Cogl.Color"
+Color.equal.v2 type="Cogl.Color"
+Color.from_string name="init_from_string"
+
+Context.free_timestamp_query.query owned
+
+Bitmap.* skip=false
+Bitmap.new_for_data.data type="owned uint8[]"
+Bitmap.get_buffer type="unowned Cogl.Buffer?"
+
+Primitive.new skip=false
+
+Texture
+  .get_data.data type="uint8[]"
+  .set_data.data type="uint8[]"
+  .set_region.data type="uint8[]"
+
+Texture2D
+  .new_from_data skip=false
+
+Texture.error_quark parent="Cogl.TextureError" name="quark"
+Scanout.error_quark parent="Cogl.ScanoutError" name="quark"
+
+RendererError errordomain
+SystemError errordomain
+TextureError errordomain
+FramebufferError errordomain
+ScanoutError errordomain
+
+blit_framebuffer parent="Cogl.Framebuffer" symbol_type="method" instance_idx=0 name="blit"
+meta_texture_foreach_in_region parent="Cogl.Texture" symbol_type="method" instance_idx=0 name="foreach_in_region"
+
+Onscreen
+  .add_frame_callback unowned
+
+A_BIT parent="Cogl.Bits" name="A"
+BGR_BIT parent="Cogl.Bits" name="BGR"
+AFIRST_BIT parent="Cogl.Bits" name="AFIRST"
+PREMULT_BIT parent="Cogl.Bits" name="PREMULT"
+DEPTH_BIT parent="Cogl.Bits" name="DEPTH"
+STENCIL_BIT parent="Cogl.Bits" name="STENCIL"
+PIXEL_FORMAT_MAX_PLANES parent = "Cogl.PixelFormat" name="MAX_PLANES"
diff --git a/vapi/Meta-15.metadata b/vapi/Meta-15.metadata
new file mode 100644
index 000000000..db8ba7324
--- /dev/null
+++ b/vapi/Meta-15.metadata
@@ -0,0 +1,189 @@
+* skip=false
+*.* skip=false
+* cheader_filename="meta/main.h"
+
+Backend cheader_filename="meta/meta-backend.h"
+Backend.gpu_added skip
+Background cheader_filename="meta/meta-background.h"
+Background.set_file.file nullable
+BackgroundContent.new symbol_type="constructor"
+BackgroundActor cheader_filename="meta/meta-background-actor.h"
+BackgroundContent cheader_filename="meta/meta-background-content.h"
+BackgroundGroup cheader_filename="meta/meta-background-group.h"
+BackgroundImage cheader_filename="meta/meta-background-image.h"
+BackgroundImageCache cheader_filename="meta/meta-background-image.h"
+Barrier cheader_filename="meta/barrier.h"
+BarrierDirection cheader_filename="meta/barrier.h"
+BarrierEvent cheader_filename="meta/barrier.h"
+BarrierFlags cheader_filename="meta/barrier.h"
+ButtonFunction cheader_filename="meta/common.h"
+ButtonLayout cheader_filename="meta/common.h"
+Compositor cheader_filename="meta/compositor.h"
+get_stage_for_display parent="Meta.Display" symbol_type="method" name="get_stage" instance_idx=0 cheader_filename="meta/compositor-mutter.h"
+get_top_window_group_for_display parent="Meta.Display" symbol_type="method" name="get_top_window_group" instance_idx=0 cheader_filename="meta/compositor-mutter.h"
+get_window_group_for_display parent="Meta.Display" symbol_type="method" name="get_window_group" instance_idx=0 cheader_filename="meta/compositor-mutter.h"
+disable_unredirect_for_display parent="Meta.Display" symbol_type="method" name="disable_unredirect" instance_idx=0 cheader_filename="meta/compositor-mutter.h"
+enable_unredirect_for_display parent="Meta.Display" symbol_type="method" name="enable_unredirect" instance_idx=0 cheader_filename="meta/compositor-mutter.h"
+
+get_window_actors parent="Meta.Display" symbol_type="method" instance_idx=0 cheader_filename="meta/compositor-mutter.h" type_arguments="Meta.WindowActor"
+
+CompEffect cheader_filename="meta/compositor.h"
+CloseDialog cheader_filename="meta/meta-close-dialog.h"
+CloseDialogResponse cheader_filename="meta/meta-close-dialog.h"
+Context cheader_filename="meta/meta-context.h"
+CompositorType cheader_filename="meta/meta-enums.h"
+Cursor cheader_filename="meta/common.h"
+CursorTracker cheader_filename="meta/meta-cursor-tracker.h"
+CursorTracker.get_for_display parent="Meta.Display" symbol_type="method" instance_idx=0 name="get_cursor_tracker"
+CursorTracker.get_pointer.mods out
+DebugControl cheader_filename="meta/meta-debug-control.h"
+DebugTopic cheader_filename="meta/util.h"
+DebugPaintFlag cheader_filename="meta/util.h"
+Direction cheader_filename="meta/common.h"
+Display cheader_filename="meta/display.h"
+Display.focus_window#signal name="do_focus_window"
+DisplayCorner cheader_filename="meta/display.h"
+DisplayDirection cheader_filename="meta/display.h"
+Dnd cheader_filename="meta/meta-dnd.h"
+EdgeType cheader_filename="meta/boxes.h"
+Edge cheader_filename="meta/boxes.h"
+FrameBorders cheader_filename="meta/common.h"
+FrameType cheader_filename="meta/common.h"
+GrabOp cheader_filename="meta/common.h"
+Gravity cheader_filename="meta/common.h"
+Group cheader_filename="meta/meta-x11-types.h"
+IdleMonitor cheader_filename="meta/meta-idle-monitor.h"
+IdleMonitorWatchFunc cheader_filename="meta/meta-idle-monitor.h"
+InhibitShortcutsDialog cheader_filename="meta/meta-inhibit-shortcuts-dialog.h"
+InhibitShortcutsDialogResponse cheader_filename="meta/meta-inhibit-shortcuts-dialog.h"
+KeyboardA11yFlags cheader_filename="meta/meta-enums.h"
+KeyBinding cheader_filename="meta/keybindings.h"
+keybindings_set_custom_handler parent="Meta.KeyBinding" name="set_custom_handler" cheader_filename="meta/keybindings.h"
+KeyBindingAction cheader_filename="meta/prefs.h"
+KeyBindingFlags cheader_filename="meta/prefs.h"
+KeyHandlerFunc cheader_filename="meta/prefs.h"
+KeyHandlerFunc.event type="Clutter.KeyEvent?"
+KeyHandlerFunc.window nullable
+LaunchContext cheader_filename="meta/meta-launch-context.h"
+Laters cheader_filename="meta/types.h"
+LaterType cheader_filename="meta/util.h"
+MaximizeFlags cheader_filename="meta/window.h"
+MultiTexture cheader_filename="meta/meta-multi-texture.h"
+MultiTextureFormat cheader_filename="meta/meta-multi-texture-format.h"
+MonitorManager cheader_filename="meta/meta-monitor-manager.h"
+MonitorSwitchConfigType cheader_filename="meta/meta-monitor-manager.h"
+MotionDirection cheader_filename="meta/common.h"
+Orientation cheader_filename="meta/meta-orientation-manager.h"
+OrientationManager cheader_filename="meta/meta-orientation-manager.h"
+PadDirection cheader_filename="meta/display.h"
+PadFeatureType cheader_filename="meta/display.h"
+Plugin cheader_filename="meta/meta-plugin.h"
+PluginInfo cheader_filename="meta/meta-plugin.h"
+PowerSaveChangeReason cheader_filename="meta/meta-monitor-manager.h"
+Preference cheader_filename="meta/prefs.h"
+PrefsChangedFunc cheader_filename="meta/prefs.h"
+RemoteAccessController cheader_filename="meta/meta-remote-access-controller.h"
+RemoteAccessHandle cheader_filename="meta/meta-remote-access-controller.h"
+Selection cheader_filename="meta/meta-selection.h"
+SelectionSource cheader_filename="meta/meta-selection-source.h"
+SelectionSourceMemory cheader_filename="meta/meta-selection-source-memory.h"
+SelectionType cheader_filename="meta/meta-selection-source.h"
+Settings cheader_filename="meta/meta-settings.h"
+ShapedTexture cheader_filename="meta/meta-shaped-texture.h"
+Side cheader_filename="meta/common.h"
+SizeChange cheader_filename="meta/compositor.h"
+SoundPlayer cheader_filename="meta/meta-sound-player.h"
+StartupNotification cheader_filename="meta/meta-startup-notification.h"
+StartupNotification.changed.object type="Meta.StartupSequence"
+StartupNotification.get_sequences type_arguments="Meta.StartupSequence"
+StartupSequence cheader_filename="meta/meta-startup-notification.h"
+StackLayer cheader_filename="meta/common.h"
+Stage cheader_filename="meta/meta-stage.h"
+Strut cheader_filename="meta/boxes.h"
+TabList cheader_filename="meta/display.h"
+TabShowType cheader_filename="meta/display.h"
+WaylandClient cheader_filename="meta/meta-wayland-client.h"
+WaylandCompositor cheader_filename="meta/meta-wayland-compositor.h"
+Workspace cheader_filename="meta/workspace.h"
+WorkspaceManager cheader_filename="meta/meta-workspace-manager.h"
+Window cheader_filename="meta/window.h"
+Window.focus#signal name="focused"
+Window.suspend_state skip
+Window.main_monitor skip
+WindowActor cheader_filename="meta/meta-window-actor.h"
+WindowClientType cheader_filename="meta/window.h"
+WindowForeachFunc cheader_filename="meta/window.h"
+WindowGroup cheader_filename="meta/meta-window-group.h"
+WindowMenuType cheader_filename="meta/compositor.h"
+WindowType cheader_filename="meta/window.h"
+X11Display cheader_filename="meta/meta-x11-display.h"
+X11Display.add_event_func skip
+X11DisplayEventFunc skip
+X11Display.set_stage_input_region.rects type="X.Xrectangle[]" array_length_idx=1
+
+WaylandSurface.scanout_candidate skip
+WaylandSurface.main_monitor skip
+
+// As per https://gitlab.gnome.org/GNOME/mutter/-/merge_requests/2287
+MonitorManager.monitor_privacy_screen_changed skip
+
+prefs_* parent="Meta.Prefs" name="prefs_(.+)" cheader_filename="meta/prefs.h"
+
+g_utf8_strndup skip
+
+preference_to_string cheader_filename="meta/prefs.h"
+frame_type_to_string cheader_filename="meta/util.h"
+topic_to_string parent="Meta.DebugTopic" name="to_string" cheader_filename="meta/util.h"
+
+CURRENT_TIME cheader_filename="meta/common.h"
+PRIORITY_RESIZE cheader_filename="meta/common.h"
+PRIORITY_BEFORE_REDRAW cheader_filename="meta/common.h"
+PRIORITY_REDRAW cheader_filename="meta/common.h"
+PRIORITY_PREFS_NOTIFY cheader_filename="meta/common.h"
+VIRTUAL_CORE_POINTER_ID cheader_filename="meta/common.h"
+VIRTUAL_CORE_KEYBOARD_ID cheader_filename="meta/common.h"
+
+Display.window_visibility_updated
+	.object name="unplaced" type="GLib.List<unowned Meta.Window>"
+	.p0 name="should_show" type="GLib.List<unowned Meta.Window>"
+	.p1 name="should_hide" type="GLib.List<unowned Meta.Window>"
+
+add_verbose_topic parent="Meta.Util" cheader_filename="meta/util.h"
+bug parent="Meta.Util" cheader_filename="meta/util.h"
+external_binding_name_for_action parent="Meta.Util" cheader_filename="meta/util.h"
+fatal parent="Meta.Util" cheader_filename="meta/util.h"
+is_verbose parent="Meta.Util" cheader_filename="meta/util.h"
+is_wayland_compositor parent="Meta.Util" cheader_filename="meta/util.h"
+pop_no_msg_prefix parent="Meta.Util" cheader_filename="meta/util.h"
+push_no_msg_prefix parent="Meta.Util" cheader_filename="meta/util.h"
+remove_verbose_topic parent="Meta.Util" cheader_filename="meta/util.h"
+unsigned_long_equal parent="Meta.Util" name="ulong_equal" cheader_filename="meta/util.h"
+unsigned_long_equal.v1 type="ulong?"
+unsigned_long_equal.v2 type="ulong?"
+unsigned_long_hash parent="Meta.Util" name="ulong_hash" cheader_filename="meta/util.h"
+unsigned_long_hash.v type="ulong?"
+warning parent="Meta.Util" cheader_filename="meta/util.h"
+create_context parent="Meta.Context" name="new" symbol_type="constructor" cheader_filename="meta/meta-context.h"
+
+Plugin.create_close_dialog unowned=false nullable
+Plugin.create_inhibit_shortcuts_dialog unowned=false
+
+BackgroundActor sealed
+BackgroundContent sealed
+BackgroundImage sealed
+BackgroundImageCache sealed
+Background sealed
+Dnd sealed
+IdleMonitor sealed
+LaunchContext sealed
+RemoteAccessController sealed
+SelectionSourceMemory sealed
+Selection sealed
+ShapedTexture sealed
+SoundPlayer sealed
+Stage sealed
+StartupNotification sealed
+WaylandClient sealed
+WindowGroup sealed
+WorkspaceManager sealed
+X11Display sealed
diff --git a/vapi/Mtk-15.metadata b/vapi/Mtk-15.metadata
new file mode 100644
index 000000000..f804d1bc0
--- /dev/null
+++ b/vapi/Mtk-15.metadata
@@ -0,0 +1,6 @@
+Rectangle struct
+RECTANGLE_MAX_STACK_RECTS parent="Mtk.Rectangle" name="MAX_STACK_RECTS"
+REGION_BUILDER_MAX_LEVELS parent="Mtk.RegionBuilder" name="MAX_LEVELS"
+
+MONITOR_ALL_TRANSFORMS parent="Mtk.MonitorTransform" name="ALL"
+MONITOR_N_TRANSFORMS skip
diff --git a/vapi/libmutter-15.deps b/vapi/libmutter-15.deps
new file mode 120000
index 000000000..a827fb886
--- /dev/null
+++ b/vapi/libmutter-15.deps
@@ -0,0 +1 @@
+libmutter-14.deps
\ No newline at end of file
diff --git a/vapi/libmutter-15.vapi b/vapi/libmutter-15.vapi
new file mode 120000
index 000000000..551ecc609
--- /dev/null
+++ b/vapi/libmutter-15.vapi
@@ -0,0 +1 @@
+libmutter-14.vapi
\ No newline at end of file
diff --git a/vapi/libmutter.vapi b/vapi/libmutter.vapi
index 857e7d3fe..a5a2a9cf6 100644
--- a/vapi/libmutter.vapi
+++ b/vapi/libmutter.vapi
@@ -109,8 +109,10 @@ namespace Meta {
 		public static string external_binding_name_for_action (uint keybinding_action);
 		[CCode (cheader_filename = "meta/util.h", cname = "meta_fatal")]
 		public static void fatal (string format, ...);
+#if !HAS_MUTTER47
 		[CCode (cheader_filename = "meta/util.h", cname = "meta_get_locale_direction")]
 		public static Meta.LocaleDirection get_locale_direction ();
+#endif
 #if !HAS_MUTTER43
 		[CCode (cheader_filename = "meta/util.h", cname = "meta_is_syncing")]
 		public static bool is_syncing ();
@@ -160,6 +162,9 @@ namespace Meta {
 		public unowned Meta.IdleMonitor get_core_idle_monitor ();
 		public unowned Meta.Dnd get_dnd ();
 		public unowned Meta.MonitorManager get_monitor_manager ();
+#if HAS_MUTTER47
+		public unowned Meta.OrientationManager get_orientation_manager ();
+#endif
 		public unowned Meta.RemoteAccessController get_remote_access_controller ();
 		public unowned Meta.Settings get_settings ();
 		public unowned Clutter.Actor get_stage ();
@@ -189,9 +194,17 @@ namespace Meta {
 		public Background (Meta.Display display);
 		public static void refresh_all ();
 		public void set_blend (GLib.File file1, GLib.File file2, double blend_factor, GDesktop.BackgroundStyle style);
+#if HAS_MUTTER47
+		public void set_color (Cogl.Color color);
+#else
 		public void set_color (Clutter.Color color);
+#endif
 		public void set_file (GLib.File? file, GDesktop.BackgroundStyle style);
+#if HAS_MUTTER47
+		public void set_gradient (GDesktop.BackgroundShading shading_direction, Cogl.Color color, Cogl.Color second_color);
+#else
 		public void set_gradient (GDesktop.BackgroundShading shading_direction, Clutter.Color color, Clutter.Color second_color);
+#endif
 		[NoAccessorMethod]
 		public Meta.Display meta_display { owned get; construct; }
 		public signal void changed ();
@@ -368,6 +381,9 @@ namespace Meta {
 		public void destroy ();
 		public unowned Meta.Backend get_backend ();
 		public Meta.CompositorType get_compositor_type ();
+#if HAS_MUTTER47
+		public unowned Meta.DebugControl get_debug_control ();
+#endif
 		public unowned Meta.Display get_display ();
 #if HAS_MUTTER45
 		public unowned Meta.WaylandCompositor? get_wayland_compositor ();
@@ -386,6 +402,10 @@ namespace Meta {
 		public void terminate_with_error (GLib.Error error);
 		[NoAccessorMethod]
 		public string name { owned get; construct; }
+#if HAS_MUTTER47
+		[NoAccessorMethod]
+		public string nick { owned get; construct; }
+#endif
 		[NoAccessorMethod]
 		public bool unsafe_mode { get; set; }
 #if HAS_MUTTER44
@@ -409,6 +429,18 @@ namespace Meta {
 		public signal void position_invalidated ();
 		public signal void visibility_changed ();
 	}
+#if HAS_MUTTER47
+	[CCode (cheader_filename = "meta/meta-debug-control.h", type_id = "meta_debug_control_get_type ()")]
+	public class DebugControl : GLib.DBusInterfaceSkeleton, GLib.DBusInterface {
+		[CCode (has_construct_function = false)]
+		protected DebugControl ();
+		public void set_exported (bool exported);
+		[NoAccessorMethod]
+		public Meta.Context context { owned get; construct; }
+		[NoAccessorMethod]
+		public bool exported { get; set; }
+	}
+#endif
 	[CCode (cheader_filename = "meta/display.h", type_id = "meta_display_get_type ()")]
 	public class Display : GLib.Object {
 		[CCode (has_construct_function = false)]
@@ -521,6 +553,9 @@ namespace Meta {
 		public Clutter.ModifierType compositor_modifiers { get; }
 		public Meta.Window focus_window { get; }
 		public signal void accelerator_activated (uint object, Clutter.InputDevice p0, uint p1);
+#if HAS_MUTTER47
+		public signal void accelerator_deactivated (uint object, Clutter.InputDevice p0, uint p1);
+#endif
 		public signal void closing ();
 		public signal void cursor_updated ();
 		[CCode (cname = "focus-window")]
@@ -563,18 +598,31 @@ namespace Meta {
 		public signal void dnd_leave ();
 		public signal void dnd_position_change (int object, int p0);
 	}
+#if !HAS_MUTTER47
 	[CCode (cheader_filename = "meta/types.h", has_type_id = false)]
 	[Compact]
 	public class Frame {
 	}
+#endif
+#if HAS_MUTTER47
+	[CCode (cheader_filename = "meta/meta-x11-types.h", has_type_id = false)]
+#else
 	[CCode (cheader_filename = "meta/group.h", has_type_id = false)]
+#endif
 	[Compact]
 	public class Group {
+#if !HAS_MUTTER47
 		public int get_size ();
 		public unowned string get_startup_id ();
+#endif
+#if HAS_MUTTER47
+		[CCode (cheader_filename = "meta/meta-x11-group.h")]
+#endif
 		public GLib.SList<weak Meta.Window> list_windows ();
+#if !HAS_MUTTER47
 		public bool property_notify ([CCode (type = "XEvent*")] ref X.Event event);
 		public void update_layers ();
+#endif
 	}
 	[CCode (cheader_filename = "meta/meta-idle-monitor.h", type_id = "meta_idle_monitor_get_type ()")]
 	public sealed class IdleMonitor : GLib.Object {
@@ -681,6 +729,17 @@ namespace Meta {
 		public MultiTexture.simple (owned Cogl.Texture plane);
 		public string to_string ();
 	}
+#endif
+#if HAS_MUTTER47
+	[CCode (cheader_filename = "meta/meta-orientation-manager.h", type_id = "meta_orientation_manager_get_type ()")]
+	public class OrientationManager : GLib.Object {
+		[CCode (has_construct_function = false)]
+		protected OrientationManager ();
+		public Meta.Orientation get_orientation ();
+		[NoAccessorMethod]
+		public bool has_accelerometer { get; }
+		public signal void orientation_changed ();
+	}
 #endif
 	[CCode (cheader_filename = "meta/meta-plugin.h", type_id = "meta_plugin_get_type ()")]
 	public abstract class Plugin : GLib.Object {
@@ -804,6 +863,7 @@ namespace Meta {
 		public int get_font_dpi ();
 		public int get_ui_scaling_factor ();
 	}
+#if !HAS_MUTTER47
 	[CCode (cheader_filename = "meta/meta-shadow-factory.h", ref_function = "meta_shadow_ref", type_id = "meta_shadow_get_type ()", unref_function = "meta_shadow_unref")]
 	[Compact]
 	public class Shadow {
@@ -830,6 +890,7 @@ namespace Meta {
 		public void set_params (string class_name, bool focused, Meta.ShadowParams @params);
 		public signal void changed ();
 	}
+#endif
 	[CCode (cheader_filename = "meta/meta-shaped-texture.h", type_id = "meta_shaped_texture_get_type ()")]
 	public sealed class ShapedTexture : GLib.Object, Clutter.Content {
 		[CCode (has_construct_function = false)]
@@ -843,6 +904,12 @@ namespace Meta {
 #endif
 		public void set_create_mipmaps (bool create_mipmaps);
 		public void set_mask_texture (Cogl.Texture mask_texture);
+#if HAS_MUTTER47
+		[NoAccessorMethod]
+		public Clutter.Context clutter_context { owned get; construct; }
+		[NoAccessorMethod]
+		public Clutter.ColorState color_state { owned get; construct; }
+#endif
 		public signal void size_changed ();
 	}
 	[CCode (cheader_filename = "meta/meta-sound-player.h", type_id = "meta_sound_player_get_type ()")]
@@ -1016,7 +1083,9 @@ namespace Meta {
 		public unowned GLib.Object get_compositor_private ();
 		public unowned string get_description ();
 		public unowned Meta.Display get_display ();
+#if !HAS_MUTTER46
 		public unowned Meta.Frame get_frame ();
+#endif
 #if HAS_MUTTER46
 		public unowned Mtk.Region? get_frame_bounds ();
 #else
@@ -1048,7 +1117,7 @@ namespace Meta {
 		public Meta.MaximizeFlags get_maximized ();
 		public int get_monitor ();
 		public unowned string? get_mutter_hints ();
-		public int get_pid ();
+		public pid_t get_pid ();
 		public unowned string get_role ();
 		public unowned string? get_sandboxed_app_id ();
 		public uint get_stable_sequence ();
@@ -1083,7 +1152,9 @@ namespace Meta {
 		public bool is_always_on_all_workspaces ();
 		public bool is_ancestor_of_transient (Meta.Window transient);
 		public bool is_attached_dialog ();
+#if !HAS_MUTTER47
 		public bool is_client_decorated ();
+#endif
 		public bool is_fullscreen ();
 		public bool is_hidden ();
 		public bool is_monitor_sized ();
@@ -1107,6 +1178,9 @@ namespace Meta {
 		public void move_frame (bool user_op, int root_x_nw, int root_y_nw);
 		public void move_resize_frame (bool user_op, int root_x_nw, int root_y_nw, int w, int h);
 		public void move_to_monitor (int monitor);
+#if HAS_MUTTER47
+		public Mtk.Rectangle protocol_to_stage_rect (Mtk.Rectangle protocol_rect);
+#endif
 		public void raise ();
 #if HAS_MUTTER46
 		public void raise_and_make_recent_on_workspace (Meta.Workspace workspace);
@@ -1121,10 +1195,15 @@ namespace Meta {
 		public void set_icon_geometry (Meta.Rectangle? rect);
 		public void shade (uint32 timestamp);
 #endif
+#if !HAS_MUTTER47
 		public void shove_titlebar_onscreen ();
+#endif
 		public bool showing_on_its_workspace ();
 #if !HAS_MUTTER46
 		public void shutdown_group ();
+#endif
+#if HAS_MUTTER47
+		public Mtk.Rectangle stage_to_protocol_rect (Mtk.Rectangle stage_rect);
 #endif
 		public void stick ();
 		public bool titlebar_is_onscreen ();
@@ -1138,6 +1217,9 @@ namespace Meta {
 #endif
 		public void unstick ();
 #if HAS_MUTTER46
+#if HAS_MUTTER47
+		[CCode (cheader_filename = "meta/meta-x11-group.h")]
+#endif
 		public unowned Meta.Group? x11_get_group ();
 #endif
 		[NoAccessorMethod]
@@ -1167,6 +1249,10 @@ namespace Meta {
 #endif
 		[NoAccessorMethod]
 		public bool is_alive { get; }
+#if HAS_MUTTER47
+		[NoAccessorMethod]
+		public bool mapped { get; }
+#endif
 		[NoAccessorMethod]
 		public bool maximized_horizontally { get; }
 		[NoAccessorMethod]
@@ -1190,7 +1276,7 @@ namespace Meta {
 		public uint user_time { get; }
 		public Meta.WindowType window_type { get; }
 		public string wm_class { get; }
-#if HAS_MUTTER44
+#if HAS_MUTTER44 && !HAS_MUTTER47
 		public ulong xwindow { get; construct; }
 #endif
 		[CCode (cname = "focus")]
@@ -1245,6 +1331,7 @@ namespace Meta {
 		[CCode (has_construct_function = false)]
 		protected WindowGroup ();
 	}
+#if !HAS_MUTTER47
 	[CCode (cheader_filename = "meta/meta-window-shape.h", ref_function = "meta_window_shape_ref", type_id = "meta_window_shape_get_type ()", unref_function = "meta_window_shape_unref")]
 	[Compact]
 	public class WindowShape {
@@ -1265,6 +1352,7 @@ namespace Meta {
 #endif
 		public void unref ();
 	}
+#endif
 	[CCode (cheader_filename = "meta/workspace.h", type_id = "meta_workspace_get_type ()")]
 	public class Workspace : GLib.Object {
 		[CCode (has_construct_function = false)]
@@ -1332,12 +1420,14 @@ namespace Meta {
 #if !HAS_MUTTER44
 		public void clear_stage_input_region ();
 #endif
+#if !HAS_MUTTER47
 		[CCode (cheader_filename = "meta/meta-x11-errors.h", cname = "meta_x11_error_trap_pop")]
 		public void error_trap_pop ();
 		[CCode (cheader_filename = "meta/meta-x11-errors.h", cname = "meta_x11_error_trap_pop_with_return")]
 		public int error_trap_pop_with_return ();
 		[CCode (cheader_filename = "meta/meta-x11-errors.h", cname = "meta_x11_error_trap_push")]
 		public void error_trap_push ();
+#endif
 #if !HAS_MUTTER45
 		public int get_damage_event_base ();
 		public int get_screen_number ();
@@ -1362,7 +1452,11 @@ namespace Meta {
 #if !HAS_MUTTER45
 		public void set_cm_selection ();
 #endif
+#if HAS_MUTTER47
+		public void set_stage_input_region ([CCode (array_length_cname = "n_rects", array_length_pos = 1.1, type = "XRectangle*")] X.Xrectangle[] rects);
+#else
 		public void set_stage_input_region (X.XserverRegion region);
+#endif
 #if !HAS_MUTTER44
 		[CCode (cheader_filename = "meta/meta-x11-display.h", cname = "meta_x11_init_gdk_display")]
 		public static bool x11_init_gdk_display () throws GLib.Error;
@@ -1462,6 +1556,7 @@ namespace Meta {
 		public bool vert_overlap (Meta.Rectangle rect2);
 	}
 #endif
+#if !HAS_MUTTER47
 	[CCode (cheader_filename = "meta/meta-shadow-factory.h", has_type_id = false)]
 	public struct ShadowParams {
 		public int radius;
@@ -1470,6 +1565,7 @@ namespace Meta {
 		public int y_offset;
 		public uint8 opacity;
 	}
+#endif
 	[CCode (cheader_filename = "meta/boxes.h", has_type_id = false)]
 	public struct Strut {
 #if HAS_MUTTER45
@@ -1557,6 +1653,10 @@ namespace Meta {
 	[Flags]
 	public enum DebugPaintFlag {
 		NONE,
+#if HAS_MUTTER47
+		SYNC_CURSOR_PRIMARY,
+		DISABLE_DIRECT_SCANOUT,
+#endif
 		OPAQUE_REGION
 	}
 	[CCode (cheader_filename = "meta/util.h", cprefix = "META_DEBUG_", type_id = "meta_debug_topic_get_type ()")]
@@ -1594,6 +1694,10 @@ namespace Meta {
 #if HAS_MUTTER45
 		INPUT_EVENTS,
 		EIS,
+#endif
+#if HAS_MUTTER47
+		KMS_DEADLINE,
+		SESSION_MANAGEMENT,
 #endif
 		RENDER;
 		[CCode (cheader_filename = "meta/util.h", cname = "meta_topic_to_string")]
@@ -1829,6 +1933,9 @@ namespace Meta {
 		IGNORE_AUTOREPEAT,
 #if HAS_MUTTER45
 		CUSTOM_TRIGGER,
+#endif
+#if HAS_MUTTER47
+		TRIGGER_RELEASE,
 #endif
 		NO_AUTO_GRAB
 	}
@@ -1861,11 +1968,13 @@ namespace Meta {
 		BEFORE_REDRAW,
 		IDLE
 	}
+#if !HAS_MUTTER47
 	[CCode (cheader_filename = "meta/util.h", cprefix = "META_LOCALE_DIRECTION_", type_id = "meta_locale_direction_get_type ()")]
 	public enum LocaleDirection {
 		LTR,
 		RTL
 	}
+#endif
 	[CCode (cheader_filename = "meta/window.h", cprefix = "META_MAXIMIZE_", type_id = "meta_maximize_flags_get_type ()")]
 	[Flags]
 	public enum MaximizeFlags {
@@ -1904,6 +2013,17 @@ namespace Meta {
 #endif
 		YUV420
 	}
+#if HAS_MUTTER47
+	[CCode (cheader_filename = "meta/meta-orientation-manager.h", cprefix = "META_ORIENTATION_", type_id = "meta_orientation_get_type ()")]
+	public enum Orientation {
+		UNDEFINED,
+		NORMAL,
+		BOTTOM_UP,
+		LEFT_UP,
+		RIGHT_UP;
+		public Mtk.MonitorTransform to_transform ();
+	}
+#endif
 	[CCode (cheader_filename = "meta/display.h", cprefix = "META_PAD_DIRECTION_", type_id = "meta_pad_direction_get_type ()")]
 	public enum PadDirection {
 		UP,
@@ -1980,12 +2100,14 @@ namespace Meta {
 		SELECTION_DND,
 		N_SELECTION_TYPES
 	}
+#if !HAS_MUTTER47
 	[CCode (cheader_filename = "meta/meta-window-actor.h", cprefix = "META_SHADOW_MODE_", type_id = "meta_shadow_mode_get_type ()")]
 	public enum ShadowMode {
 		AUTO,
 		FORCED_OFF,
 		FORCED_ON
 	}
+#endif
 	[CCode (cheader_filename = "meta/common.h", cprefix = "META_SIDE_", type_id = "meta_side_get_type ()")]
 	public enum Side {
 		LEFT,
diff --git a/vapi/meson.build b/vapi/meson.build
index ee23d858b..c56958619 100644
--- a/vapi/meson.build
+++ b/vapi/meson.build
@@ -395,3 +395,94 @@ if mutter46_dep.found()
 		output: 'libmutter-14.vapi'
 	)
 endif
+if mutter47_dep.found()
+	mtk_target = custom_target('mutter-mtk-15',
+		command: [
+			vapigen,
+			mutter_typelib_dir / 'Mtk-15.gir',
+			'--library=mutter-mtk-15',
+			'--pkg=gobject-2.0',
+			'--pkg=gio-2.0',
+			'--pkg=cairo',
+			'--pkg=graphene-gobject-1.0',
+			vapigen_args
+		],
+		output: 'mutter-mtk-15.vapi'
+	)
+	cogl_target = custom_target('mutter-cogl-15',
+		command: [
+			vapigen,
+			mutter_typelib_dir / 'Cogl-15.gir',
+			'--library=mutter-cogl-15',
+			'--pkg=mutter-mtk-15',
+			'--pkg=gobject-2.0',
+			'--pkg=gio-2.0',
+			'--pkg=cairo',
+			'--pkg=graphene-gobject-1.0',
+			'--pkg=x11',
+			vapigen_args,
+			files('Cogl-15-custom.vala')
+		],
+		depends: mtk_target,
+		output: 'mutter-cogl-15.vapi'
+	)
+
+	cogl_pango_target = custom_target('mutter-cogl-pango-15',
+		command: [
+			vapigen,
+			mutter_typelib_dir / 'CoglPango-15.gir',
+			'--library=mutter-cogl-pango-15',
+			'--pkg=mutter-mtk-15',
+			'--pkg=mutter-cogl-15',
+			'--pkg=pangocairo',
+			'--pkg=gio-2.0',
+			'--pkg=glib-2.0',
+			'--pkg=x11',
+			vapigen_args
+		],
+		depends: [mtk_target, cogl_target],
+		output: 'mutter-cogl-pango-15.vapi'
+	)
+
+	clutter_target = custom_target('mutter-clutter-15',
+		command: [
+			vapigen,
+			mutter_typelib_dir / 'Clutter-15.gir',
+			'--library=mutter-clutter-15',
+			'--pkg=graphene-gobject-1.0',
+			'--pkg=mutter-mtk-15',
+			'--pkg=mutter-cogl-15',
+			'--pkg=mutter-cogl-pango-15',
+			'--pkg=atk',
+			'--pkg=gio-2.0',
+			'--pkg=json-glib-1.0',
+			'--pkg=pangocairo',
+			'--pkg=x11',
+			vapigen_args,
+			files('Clutter-15-custom.vala')
+		],
+		depends: [ cogl_target, cogl_pango_target, mtk_target ],
+		output: 'mutter-clutter-15.vapi'
+	)
+
+	libmutter_target = custom_target('libmutter-15',
+		command: [
+			vapigen,
+			mutter_typelib_dir / 'Meta-15.gir',
+			'--library=libmutter-15',
+			'--pkg=graphene-gobject-1.0',
+			'--pkg=mutter-cogl-15',
+			'--pkg=mutter-cogl-pango-15',
+			'--pkg=mutter-clutter-15',
+			'--pkg=atk',
+			'--pkg=gio-2.0',
+			'--pkg=json-glib-1.0',
+			'--pkg=pangocairo',
+			'--pkg=x11',
+			'--pkg=xfixes-4.0',
+			vapigen_args
+		],
+		depends: [ cogl_target, cogl_pango_target, clutter_target ],
+		output: 'libmutter-15.vapi'
+	)
+endif
diff --git a/vapi/mutter-clutter-15.deps b/vapi/mutter-clutter-15.deps
new file mode 100644
index 000000000..faa5defbc
--- /dev/null
+++ b/vapi/mutter-clutter-15.deps
@@ -0,0 +1,6 @@
+atk
+cairo
+pango
+json-glib-1.0
+mutter-cogl-15
+graphene-gobject-1.0
diff --git a/vapi/mutter-clutter-15.vapi b/vapi/mutter-clutter-15.vapi
new file mode 120000
index 000000000..a688c645c
--- /dev/null
+++ b/vapi/mutter-clutter-15.vapi
@@ -0,0 +1 @@
+mutter-clutter-14.vapi
\ No newline at end of file
diff --git a/vapi/mutter-clutter.vapi b/vapi/mutter-clutter.vapi
index aca0c6a68..3c5ff67a9 100644
--- a/vapi/mutter-clutter.vapi
+++ b/vapi/mutter-clutter.vapi
@@ -4563,87 +4563,77 @@ namespace Clutter {
 	namespace Threads {
 		namespace Idle {
 			[CCode (cheader_filename = "clutter/clutter.h", cname = "clutter_threads_add_idle")]
-			[Version (since = "0.4")]
 			public static uint add (GLib.SourceFunc func);
 			[CCode (cheader_filename = "clutter/clutter.h", cname = "clutter_threads_add_idle_full")]
-			[Version (since = "0.4")]
 			public static uint add_full (int priority, owned GLib.SourceFunc func);
 		}
 		namespace Timeout {
 			[CCode (cheader_filename = "clutter/clutter.h", cname = "clutter_threads_add_timeout")]
-			[Version (since = "0.4")]
 			public static uint add (uint interval, GLib.SourceFunc func);
 			[CCode (cheader_filename = "clutter/clutter.h", cname = "clutter_threads_add_timeout_full")]
-			[Version (since = "0.4")]
 			public static uint add_full (int priority, uint interval, owned GLib.SourceFunc func);
 		}
 		[CCode (cheader_filename = "clutter/clutter.h")]
-		[Version (since = "1.0")]
 		public static uint add_repaint_func (owned GLib.SourceFunc func);
 		[CCode (cheader_filename = "clutter/clutter.h")]
-		[Version (since = "1.10")]
 		public static uint add_repaint_func_full (Clutter.RepaintFlags flags, owned GLib.SourceFunc func);
 		[CCode (cheader_filename = "clutter/clutter.h")]
-		[Version (since = "1.0")]
 		public static void remove_repaint_func (uint handle_id);
 	}
 	namespace Value {
 		[CCode (cheader_filename = "clutter/clutter.h")]
-		[Version (since = "1.10")]
 		public static Clutter.PaintNode dup_paint_node (GLib.Value value);
+#if !HAS_MUTTER47
 		[CCode (cheader_filename = "clutter/clutter.h")]
-		[Version (since = "0.8")]
 		public static unowned Clutter.Color? get_color (GLib.Value value);
+#endif
 		[CCode (cheader_filename = "clutter/clutter.h")]
-		[Version (since = "1.10")]
 		public static unowned Clutter.PaintNode get_paint_node (GLib.Value value);
 		[CCode (array_length_pos = 1.1, array_length_type = "gsize", cheader_filename = "clutter/clutter.h")]
-		[Version (since = "0.8")]
 		public static unowned float[] get_shader_float (GLib.Value value);
 		[CCode (array_length_pos = 1.1, array_length_type = "gsize", cheader_filename = "clutter/clutter.h")]
-		[Version (since = "0.8")]
 		public static unowned int[] get_shader_int (GLib.Value value);
 		[CCode (array_length_pos = 1.1, array_length_type = "gsize", cheader_filename = "clutter/clutter.h")]
-		[Version (since = "0.8")]
 		public static unowned float[] get_shader_matrix (GLib.Value value);
 #if !HAS_MUTTER46
 		[CCode (cheader_filename = "clutter/clutter.h")]
-		[Version (since = "0.8")]
 		public static unowned Clutter.Units? get_units (GLib.Value value);
 #endif
+#if !HAS_MUTTER47
 		[CCode (cheader_filename = "clutter/clutter.h")]
-		[Version (since = "0.8")]
 		public static void set_color (GLib.Value value, Clutter.Color color);
+#endif
 		[CCode (cheader_filename = "clutter/clutter.h")]
-		[Version (since = "1.10")]
 		public static void set_paint_node (GLib.Value value, Clutter.PaintNode? node);
 		[CCode (cheader_filename = "clutter/clutter.h")]
-		[Version (since = "0.8")]
 		public static void set_shader_float (GLib.Value value, [CCode (array_length_cname = "size", array_length_pos = 1.5)] float[] floats);
 		[CCode (cheader_filename = "clutter/clutter.h")]
-		[Version (since = "0.8")]
 		public static void set_shader_int (GLib.Value value, [CCode (array_length_cname = "size", array_length_pos = 1.5)] int[] ints);
 		[CCode (cheader_filename = "clutter/clutter.h")]
-		[Version (since = "0.8")]
 		public static void set_shader_matrix (GLib.Value value, [CCode (array_length_cname = "size", array_length_pos = 1.5)] float[] matrix);
 		[CCode (cheader_filename = "clutter/clutter.h")]
-		[Version (since = "0.8")]
 		public static void set_units (GLib.Value value, Clutter.Units units);
 		[CCode (cheader_filename = "clutter/clutter.h")]
-		[Version (since = "1.10")]
 		public static void take_paint_node (GLib.Value value, Clutter.PaintNode? node);
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_action_get_type ()")]
-	[Version (since = "1.4")]
 	public abstract class Action : Clutter.ActorMeta {
 		[CCode (has_construct_function = false)]
 		protected Action ();
 		public Clutter.EventPhase get_phase ();
 		[NoWrapper]
 		public virtual bool handle_event (Clutter.Event event);
+#if HAS_MUTTER47
+		[NoWrapper]
+		public virtual bool register_sequence (Clutter.Event event);
+#endif
 #if HAS_MUTTER44
 		[NoWrapper]
 		public virtual void sequence_cancelled (Clutter.InputDevice device, Clutter.EventSequence sequence);
+#endif
+#if HAS_MUTTER47
+		[NoWrapper]
+		public virtual int setup_sequence_relationship (Clutter.Action action_2, Clutter.InputDevice device, Clutter.EventSequence sequence);
 #endif
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_actor_get_type ()")]
@@ -4654,608 +4644,416 @@ namespace Clutter {
 #endif
 		public uint32 flags;
 		[CCode (has_construct_function = false)]
-		[Version (since = "1.10")]
 		public Actor ();
-		[Version (since = "1.4")]
 		public void add_action (Clutter.Action action);
 		public void add_action_full (string name, Clutter.EventPhase phase, Clutter.Action action);
-		[Version (since = "1.4")]
 		public void add_action_with_name (string name, Clutter.Action action);
-		[Version (since = "1.10")]
 		public void add_child (Clutter.Actor child);
-		[Version (since = "1.4")]
 		public void add_constraint (Clutter.Constraint constraint);
-		[Version (since = "1.4")]
 		public void add_constraint_with_name (string name, Clutter.Constraint constraint);
-		[Version (since = "1.4")]
 		public void add_effect (Clutter.Effect effect);
-		[Version (since = "1.4")]
 		public void add_effect_with_name (string name, Clutter.Effect effect);
-		[Version (since = "1.10")]
 		public void add_transition (string name, Clutter.Transition transition);
-		[Version (since = "0.8")]
 		public virtual void allocate (Clutter.ActorBox box);
-		[Version (since = "1.4")]
 		public void allocate_align_fill (Clutter.ActorBox box, double x_align, double y_align, bool x_fill, bool y_fill);
-		[Version (since = "1.0")]
 		public void allocate_available_size (float x, float y, float available_width, float available_height);
-		[Version (since = "0.8")]
 		public void allocate_preferred_size (float x, float y);
-		[Version (since = "0.6")]
 		public Graphene.Point3D apply_relative_transform_to_point (Clutter.Actor? ancestor, Graphene.Point3D point);
 		[NoWrapper]
 		public virtual void apply_transform (ref Graphene.Matrix matrix);
-		[Version (since = "0.4")]
 		public Graphene.Point3D apply_transform_to_point (Graphene.Point3D point);
-		[Version (since = "1.24")]
 		public void bind_model (GLib.ListModel? model, owned Clutter.ActorCreateChildFunc create_child_func);
 		[NoWrapper]
 		public virtual float calculate_resource_scale (int phase);
-		[Version (since = "1.4")]
 		public void clear_actions ();
-		[Version (since = "1.4")]
 		public void clear_constraints ();
-		[Version (since = "1.4")]
 		public void clear_effects ();
-		[Version (since = "1.4")]
 		public bool contains (Clutter.Actor descendant);
-		[Version (since = "1.8")]
 		public void continue_paint (Clutter.PaintContext paint_context);
 		public void continue_pick (Clutter.PickContext pick_context);
-		[Version (since = "1.0")]
 		public Pango.Context create_pango_context ();
-		[Version (since = "1.0")]
 		public Pango.Layout create_pango_layout (string? text);
 #if HAS_MUTTER46
 		public Clutter.PaintNode create_texture_paint_node (Cogl.Texture texture);
 #endif
-		[Version (since = "1.10")]
 		public void destroy_all_children ();
 		[CCode (cname = "clutter_actor_event")]
-		[Version (since = "0.6")]
 		public bool emit_event (Clutter.Event event, bool capture);
-		[Version (since = "0.4")]
 		public void get_abs_allocation_vertices ([CCode (array_length = false)] Graphene.Point3D verts[4]);
 		public virtual unowned Atk.Object get_accessible ();
-		[Version (since = "1.4")]
+#if HAS_MUTTER47
+		public unowned string get_accessible_name ();
+		public Atk.Role get_accessible_role ();
+#endif
 		public unowned Clutter.Action? get_action (string name);
-		[Version (since = "1.4")]
 		public GLib.List<weak Clutter.Action> get_actions ();
-		[Version (since = "0.8")]
 		public Clutter.ActorBox get_allocation_box ();
-		[Version (since = "1.10")]
+#if HAS_MUTTER47
+		public Cogl.Color get_background_color ();
+#else
 		public Clutter.Color get_background_color ();
-		[Version (since = "1.10")]
+#endif
 		public unowned Clutter.Actor? get_child_at_index (int index_);
-		[Version (since = "1.12")]
 		public Graphene.Matrix get_child_transform ();
-		[Version (since = "1.10")]
 		public GLib.List<weak Clutter.Actor> get_children ();
-		[Version (since = "0.6")]
 		public void get_clip (out float xoff, out float yoff, out float width, out float height);
-		[Version (since = "1.4")]
 		public bool get_clip_to_allocation ();
 #if HAS_MUTTER43
 		public unowned Clutter.ColorState get_color_state ();
 #endif
-		[Version (since = "1.4")]
 		public unowned Clutter.Constraint? get_constraint (string name);
-		[Version (since = "1.4")]
 		public GLib.List<weak Clutter.Constraint> get_constraints ();
-		[Version (since = "1.10")]
 		public unowned Clutter.Content? get_content ();
-		[Version (since = "1.10")]
 		public Clutter.ActorBox get_content_box ();
-		[Version (since = "1.10")]
 		public Clutter.ContentGravity get_content_gravity ();
-		[Version (since = "1.12")]
 		public Clutter.ContentRepeat get_content_repeat ();
-		[Version (since = "1.10")]
 		public void get_content_scaling_filters (out Clutter.ScalingFilter min_filter, out Clutter.ScalingFilter mag_filter);
+#if HAS_MUTTER47
+		public unowned Clutter.Context get_context ();
+#endif
 #if !HAS_MUTTER44
-		[Version (since = "1.10")]
 		public unowned Clutter.PaintVolume? get_default_paint_volume ();
 #endif
-		[Version (since = "1.10")]
 		public uint get_easing_delay ();
-		[Version (since = "1.10")]
 		public uint get_easing_duration ();
-		[Version (since = "1.10")]
 		public Clutter.AnimationMode get_easing_mode ();
-		[Version (since = "1.4")]
 		public unowned Clutter.Effect? get_effect (string name);
-		[Version (since = "1.4")]
 		public GLib.List<weak Clutter.Effect> get_effects ();
-		[Version (since = "1.10")]
 		public unowned Clutter.Actor? get_first_child ();
 		public bool get_fixed_position (out float x, out float y);
-		[Version (since = "0.8")]
 		public bool get_fixed_position_set ();
-		[Version (since = "1.0")]
+#if !HAS_MUTTER47
 		public Clutter.ActorFlags get_flags ();
+#endif
 		[CCode (cname = "clutter_actor_has_pointer")]
-		[Version (since = "1.2")]
 		public bool get_has_pointer ();
 		public float get_height ();
-		[Version (since = "1.10")]
 		public unowned Clutter.Actor? get_last_child ();
-		[Version (since = "1.10")]
 		public unowned Clutter.LayoutManager? get_layout_manager ();
 #if HAS_MUTTER46
 		[CCode (cname = "clutter_actor_class_get_layout_manager_type")]
 		public class GLib.Type get_layout_manager_type ();
 #endif
-		[Version (since = "1.10")]
 		public Clutter.Margin get_margin ();
-		[Version (since = "1.10")]
 		public float get_margin_bottom ();
-		[Version (since = "1.10")]
 		public float get_margin_left ();
-		[Version (since = "1.10")]
 		public float get_margin_right ();
-		[Version (since = "1.10")]
 		public float get_margin_top ();
-		[Version (since = "1.10")]
 		public int get_n_children ();
 		public unowned string? get_name ();
-		[Version (since = "1.10")]
 		public unowned Clutter.Actor? get_next_sibling ();
-		[Version (since = "1.8")]
 		public Clutter.OffscreenRedirect get_offscreen_redirect ();
 		public uint8 get_opacity ();
-		[Version (since = "1.22")]
 		public int get_opacity_override ();
-		[Version (since = "1.6")]
 		public bool get_paint_box (out Clutter.ActorBox box);
-		[Version (since = "0.8")]
 		public uint8 get_paint_opacity ();
-		[Version (since = "0.8")]
 		public bool get_paint_visibility ();
-		[Version (since = "1.6")]
 		public unowned Clutter.PaintVolume? get_paint_volume ();
 		[CCode (vfunc_name = "get_paint_volume")]
 		[NoWrapper]
 		public virtual bool get_paint_volume_vfunc (out Clutter.PaintVolume volume);
-		[Version (since = "1.0")]
 		public unowned Pango.Context get_pango_context ();
 		public unowned Clutter.Actor? get_parent ();
-		[Version (since = "1.12")]
 		public void get_pivot_point (out float pivot_x, out float pivot_y);
-		[Version (since = "1.12")]
 		public float get_pivot_point_z ();
-		[Version (since = "0.6")]
 		public void get_position (out float x, out float y);
-		[Version (since = "0.8")]
 		public virtual void get_preferred_height (float for_width, out float min_height_p, out float natural_height_p);
-		[Version (since = "0.8")]
 		public void get_preferred_size (out float min_width_p, out float min_height_p, out float natural_width_p, out float natural_height_p);
-		[Version (since = "0.8")]
 		public virtual void get_preferred_width (float for_height, out float min_width_p, out float natural_width_p);
-		[Version (since = "1.10")]
 		public unowned Clutter.Actor? get_previous_sibling ();
-		[Version (since = "0.6")]
 		public bool get_reactive ();
 #if HAS_MUTTER45
 		public Graphene.Matrix get_relative_transformation_matrix (Clutter.Actor? ancestor);
 #endif
-		[Version (since = "1.2")]
 		public Clutter.RequestMode get_request_mode ();
 		public float get_resource_scale ();
-		[Version (since = "1.12")]
 		public double get_rotation_angle (Clutter.RotateAxis axis);
-		[Version (since = "0.2")]
 		public void get_scale (out double scale_x, out double scale_y);
-		[Version (since = "1.12")]
 		public double get_scale_z ();
-		[Version (since = "0.2")]
 		public void get_size (out float width, out float height);
-		[Version (since = "0.8")]
 		public unowned Clutter.Stage get_stage ();
-		[Version (since = "1.2")]
 		public Clutter.TextDirection get_text_direction ();
-		[Version (since = "1.12")]
 		public Graphene.Matrix get_transform ();
 		public Graphene.Rect get_transformed_extents ();
-		[Version (since = "1.6")]
 		public Clutter.PaintVolume? get_transformed_paint_volume (Clutter.Actor relative_to_ancestor);
-		[Version (since = "0.8")]
 		public void get_transformed_position (out float x, out float y);
-		[Version (since = "0.8")]
 		public void get_transformed_size (out float width, out float height);
-		[Version (since = "1.10")]
 		public unowned Clutter.Transition? get_transition (string name);
-		[Version (since = "1.12")]
 		public void get_translation (out float translate_x, out float translate_y, out float translate_z);
 		public float get_width ();
 		public float get_x ();
-		[Version (since = "1.10")]
 		public Clutter.ActorAlign get_x_align ();
-		[Version (since = "1.12")]
 		public bool get_x_expand ();
 		public float get_y ();
-		[Version (since = "1.10")]
 		public Clutter.ActorAlign get_y_align ();
-		[Version (since = "1.12")]
 		public bool get_y_expand ();
-		[Version (since = "1.12")]
 		public float get_z_position ();
-		[Version (since = "1.0")]
 		public void grab_key_focus ();
+#if !HAS_MUTTER47
 		public virtual bool has_accessible ();
-		[Version (since = "1.10")]
+#endif
 		public bool has_actions ();
-		[Version (since = "1.4")]
 		public bool has_allocation ();
-		[Version (since = "1.10")]
 		public bool has_constraints ();
 		public bool has_damage ();
-		[Version (since = "1.10")]
 		public bool has_effects ();
-		[Version (since = "1.4")]
 		public bool has_key_focus ();
-		[Version (since = "1.16")]
 		public bool has_mapped_clones ();
-		[Version (since = "1.8")]
 		public virtual bool has_overlaps ();
 		[NoWrapper]
 		public virtual void hide_all ();
 		public void inhibit_culling ();
-		[Version (since = "1.10")]
 		public void insert_child_above (Clutter.Actor child, Clutter.Actor? sibling);
-		[Version (since = "1.10")]
 		public void insert_child_at_index (Clutter.Actor child, int index_);
-		[Version (since = "1.10")]
 		public void insert_child_below (Clutter.Actor child, Clutter.Actor? sibling);
 		public void invalidate_paint_volume ();
 		public void invalidate_transform ();
 		public bool is_effectively_on_stage_view (Clutter.StageView view);
-		[Version (since = "1.0")]
 		public bool is_in_clone_paint ();
-		[Version (since = "1.24")]
 		public bool is_mapped ();
-		[Version (since = "1.24")]
+#if HAS_MUTTER47
+		public bool is_no_layout ();
+#endif
 		public bool is_realized ();
-		[Version (since = "0.6")]
 		public bool is_rotated ();
-		[Version (since = "0.6")]
 		public bool is_scaled ();
-		[Version (since = "1.24")]
 		public bool is_visible ();
-		[Version (since = "1.0")]
 		public virtual void map ();
-		[Version (since = "0.2")]
 		public void move_by (float dx, float dy);
-		[Version (since = "1.12")]
 		public bool needs_expand (Clutter.Orientation orientation);
 #if HAS_MUTTER45
 		public void notify_transform_invalid ();
 #endif
 		public virtual void paint (Clutter.PaintContext paint_context);
 		[NoWrapper]
+#if HAS_MUTTER47
+		public virtual void paint_node (Clutter.PaintNode root, Clutter.PaintContext paint_context);
+#else
 		public virtual void paint_node (Clutter.PaintNode root);
+#endif
 		public unowned GLib.List<Clutter.StageView> peek_stage_views ();
 		public void pick_box (Clutter.PickContext pick_context, Clutter.ActorBox box);
 		public void queue_redraw ();
-		[Version (since = "1.10")]
 #if HAS_MUTTER45
 		public void queue_redraw_with_clip (Mtk.Rectangle? clip);
 #else
 		public void queue_redraw_with_clip (Cairo.RectangleInt? clip);
 #endif
-		[Version (since = "1.4")]
 		public void remove_action (Clutter.Action action);
-		[Version (since = "1.4")]
 		public void remove_action_by_name (string name);
-		[Version (since = "1.10")]
 		public void remove_all_children ();
-		[Version (since = "1.10")]
 		public void remove_all_transitions ();
-		[Version (since = "1.10")]
 		public void remove_child (Clutter.Actor child);
 		public void remove_clip ();
-		[Version (since = "1.4")]
 		public void remove_constraint (Clutter.Constraint constraint);
-		[Version (since = "1.4")]
 		public void remove_constraint_by_name (string name);
-		[Version (since = "1.4")]
 		public void remove_effect (Clutter.Effect effect);
-		[Version (since = "1.4")]
 		public void remove_effect_by_name (string name);
-		[Version (since = "1.10")]
 		public void remove_transition (string name);
-		[Version (since = "1.10")]
 		public void replace_child (Clutter.Actor old_child, Clutter.Actor new_child);
-		[Version (since = "1.10")]
 		public void restore_easing_state ();
-		[Version (since = "1.10")]
 		public void save_easing_state ();
-		[Version (since = "1.10")]
+#if HAS_MUTTER47
+		public void set_accessible (Atk.Object accessible);
+		public void set_accessible_name (string? name);
+		public void set_accessible_role (Atk.Role role);
+#endif
 		public void set_allocation (Clutter.ActorBox box);
-		[Version (since = "1.10")]
+#if HAS_MUTTER47
+		public void set_background_color (Cogl.Color? color);
+#else
 		public void set_background_color (Clutter.Color? color);
-		[Version (since = "1.10")]
+#endif
 		public void set_child_above_sibling (Clutter.Actor child, Clutter.Actor? sibling);
-		[Version (since = "1.10")]
 		public void set_child_at_index (Clutter.Actor child, int index_);
-		[Version (since = "1.10")]
 		public void set_child_below_sibling (Clutter.Actor child, Clutter.Actor? sibling);
-		[Version (since = "1.12")]
 		public void set_child_transform (Graphene.Matrix? transform);
-		[Version (since = "0.6")]
 		public void set_clip (float xoff, float yoff, float width, float height);
-		[Version (since = "1.4")]
 		public void set_clip_to_allocation (bool clip_set);
 #if HAS_MUTTER43
 		public void set_color_state (Clutter.ColorState? color_state);
 #endif
-		[Version (since = "1.10")]
 		public void set_content (Clutter.Content? content);
-		[Version (since = "1.10")]
 		public void set_content_gravity (Clutter.ContentGravity gravity);
-		[Version (since = "1.12")]
 		public void set_content_repeat (Clutter.ContentRepeat repeat);
-		[Version (since = "1.10")]
 		public void set_content_scaling_filters (Clutter.ScalingFilter min_filter, Clutter.ScalingFilter mag_filter);
-		[Version (since = "1.10")]
 		public void set_easing_delay (uint msecs);
-		[Version (since = "1.10")]
 		public void set_easing_duration (uint msecs);
-		[Version (since = "1.10")]
 		public void set_easing_mode (Clutter.AnimationMode mode);
-		[Version (since = "0.8")]
 		public void set_fixed_position_set (bool is_set);
-		[Version (since = "1.0")]
+#if !HAS_MUTTER47
 		public void set_flags (Clutter.ActorFlags flags);
-		[Version (since = "0.2")]
+#endif
 		public void set_height (float height);
-		[Version (since = "1.10")]
 		public void set_layout_manager (Clutter.LayoutManager? manager);
 #if HAS_MUTTER46
 		[CCode (cname = "clutter_actor_class_set_layout_manager_type")]
 		public class void set_layout_manager_type (GLib.Type type);
 #endif
-		[Version (since = "1.10")]
 		public void set_margin (Clutter.Margin margin);
-		[Version (since = "1.10")]
 		public void set_margin_bottom (float margin);
-		[Version (since = "1.10")]
 		public void set_margin_left (float margin);
-		[Version (since = "1.10")]
 		public void set_margin_right (float margin);
-		[Version (since = "1.10")]
 		public void set_margin_top (float margin);
 		public void set_name (string? name);
-		[Version (since = "1.8")]
 		public void set_offscreen_redirect (Clutter.OffscreenRedirect redirect);
 		public void set_opacity (uint8 opacity);
 		public void set_opacity_override (int opacity);
-		[Version (since = "1.12")]
 		public void set_pivot_point (float pivot_x, float pivot_y);
-		[Version (since = "1.12")]
 		public void set_pivot_point_z (float pivot_z);
 		public void set_position (float x, float y);
-		[Version (since = "0.6")]
 		public void set_reactive (bool reactive);
-		[Version (since = "1.2")]
 		public void set_request_mode (Clutter.RequestMode mode);
-		[Version (since = "1.12")]
 		public void set_rotation_angle (Clutter.RotateAxis axis, double angle);
-		[Version (since = "0.2")]
 		public void set_scale (double scale_x, double scale_y);
-		[Version (since = "1.12")]
 		public void set_scale_z (double scale_z);
 		public void set_size (float width, float height);
-		[Version (since = "1.2")]
 		public void set_text_direction (Clutter.TextDirection text_dir);
-		[Version (since = "1.12")]
 		public void set_transform (Graphene.Matrix? transform);
-		[Version (since = "1.12")]
 		public void set_translation (float translate_x, float translate_y, float translate_z);
-		[Version (since = "0.2")]
 		public void set_width (float width);
-		[Version (since = "0.6")]
 		public void set_x (float x);
-		[Version (since = "1.10")]
 		public void set_x_align (Clutter.ActorAlign x_align);
-		[Version (since = "1.12")]
 		public void set_x_expand (bool expand);
-		[Version (since = "0.6")]
 		public void set_y (float y);
-		[Version (since = "1.10")]
 		public void set_y_align (Clutter.ActorAlign y_align);
-		[Version (since = "1.12")]
 		public void set_y_expand (bool expand);
-		[Version (since = "1.12")]
 		public void set_z_position (float z_position);
 		public bool should_pick (Clutter.PickContext pick_context);
-		[Version (since = "0.6")]
 		public bool transform_stage_point (float x, float y, out float x_out, out float y_out);
 		public void uninhibit_culling ();
-		[Version (since = "1.0")]
 		public virtual void unmap ();
-		[Version (since = "1.0")]
+#if HAS_MUTTER47
+		public void unset_color_state ();
+		public string accessible_name { get; set construct; }
+		public Atk.Role accessible_role { get; set construct; }
+#else
 		public void unset_flags (Clutter.ActorFlags flags);
+#endif
 		[NoAccessorMethod]
-		[Version (since = "1.4")]
 		public Clutter.Action actions { set; }
 		[NoAccessorMethod]
-		[Version (since = "0.8")]
 		public Clutter.ActorBox allocation { owned get; }
-		[Version (since = "1.10")]
+#if HAS_MUTTER47
+		public Cogl.Color background_color { get; set; }
+#else
 		public Clutter.Color background_color { get; set; }
+#endif
 		[NoAccessorMethod]
-		[Version (since = "1.10")]
 		public bool background_color_set { get; }
-		[Version (since = "1.12")]
 		public Graphene.Matrix child_transform { get; set; }
 		[NoAccessorMethod]
-		[Version (since = "1.12")]
 		public bool child_transform_set { get; }
 		[NoAccessorMethod]
-		[Version (since = "1.12")]
 		public Graphene.Rect clip_rect { owned get; set; }
-		[Version (since = "1.0")]
 		public bool clip_to_allocation { get; set; }
 #if HAS_MUTTER43
 		public Clutter.ColorState color_state { get; set construct; }
 #endif
 		[NoAccessorMethod]
-		[Version (since = "1.4")]
 		public Clutter.Constraint constraints { set; }
-		[Version (since = "1.10")]
 		public Clutter.Content content { get; set; }
-		[Version (since = "1.10")]
 		public Clutter.ActorBox content_box { get; }
-		[Version (since = "1.10")]
 		public Clutter.ContentGravity content_gravity { get; set; }
-		[Version (since = "1.12")]
 		public Clutter.ContentRepeat content_repeat { get; set; }
+#if HAS_MUTTER47
+		public Clutter.Context context { get; construct; }
+#endif
 		[NoAccessorMethod]
-		[Version (since = "1.4")]
 		public Clutter.Effect effect { set; }
-		[Version (since = "1.10")]
 		public Clutter.Actor first_child { get; }
-		[Version (since = "0.8")]
 		public bool fixed_position_set { get; set; }
 		[NoAccessorMethod]
-		[Version (since = "0.8")]
 		public float fixed_x { get; set; }
 		[NoAccessorMethod]
-		[Version (since = "0.8")]
 		public float fixed_y { get; set; }
 		[NoAccessorMethod]
 		public bool has_clip { get; }
 		[NoAccessorMethod]
-		[Version (since = "1.2")]
 		public bool has_pointer { get; }
 		public float height { get; set; }
-		[Version (since = "1.10")]
 		public Clutter.Actor last_child { get; }
-		[Version (since = "1.10")]
 		public Clutter.LayoutManager layout_manager { get; set; }
 		[NoAccessorMethod]
 		public Clutter.ScalingFilter magnification_filter { get; set; }
 		[NoAccessorMethod]
-		[Version (since = "1.0")]
 		public bool mapped { get; }
-		[Version (since = "1.10")]
 		public float margin_bottom { get; set; }
-		[Version (since = "1.10")]
 		public float margin_left { get; set; }
-		[Version (since = "1.10")]
 		public float margin_right { get; set; }
-		[Version (since = "1.10")]
 		public float margin_top { get; set; }
 		[NoAccessorMethod]
-		[Version (since = "0.8")]
 		public float min_height { get; set; }
 		[NoAccessorMethod]
-		[Version (since = "0.8")]
 		public bool min_height_set { get; set; }
 		[NoAccessorMethod]
-		[Version (since = "0.8")]
 		public float min_width { get; set; }
 		[NoAccessorMethod]
-		[Version (since = "0.8")]
 		public bool min_width_set { get; set; }
 		[NoAccessorMethod]
 		public Clutter.ScalingFilter minification_filter { get; set; }
-		[Version (since = "0.2")]
 		public string name { get; set; }
 		[NoAccessorMethod]
-		[Version (since = "0.8")]
 		public float natural_height { get; set; }
 		[NoAccessorMethod]
-		[Version (since = "0.8")]
 		public bool natural_height_set { get; set; }
 		[NoAccessorMethod]
-		[Version (since = "0.8")]
 		public float natural_width { get; set; }
 		[NoAccessorMethod]
-		[Version (since = "0.8")]
 		public bool natural_width_set { get; set; }
-		[Version (since = "1.8")]
 		public Clutter.OffscreenRedirect offscreen_redirect { get; set; }
 		public uint opacity { get; set; }
 		[NoAccessorMethod]
-		[Version (since = "1.12")]
 		public Graphene.Point pivot_point { owned get; set; }
-		[Version (since = "1.12")]
 		public float pivot_point_z { get; set; }
 		[NoAccessorMethod]
-		[Version (since = "1.12")]
 		public Graphene.Point position { owned get; set; }
-		[Version (since = "0.6")]
 		public bool reactive { get; set; }
 		[NoAccessorMethod]
-		[Version (since = "1.0")]
 		public bool realized { get; }
-		[Version (since = "0.8")]
 		public Clutter.RequestMode request_mode { get; set; }
 		[NoAccessorMethod]
-		[Version (since = "0.6")]
 		public double rotation_angle_x { get; set; }
 		[NoAccessorMethod]
-		[Version (since = "0.6")]
 		public double rotation_angle_y { get; set; }
 		[NoAccessorMethod]
-		[Version (since = "0.6")]
 		public double rotation_angle_z { get; set; }
 		[NoAccessorMethod]
-		[Version (since = "0.6")]
 		public double scale_x { get; set; }
 		[NoAccessorMethod]
-		[Version (since = "0.6")]
 		public double scale_y { get; set; }
-		[Version (since = "1.12")]
 		public double scale_z { get; set; }
 		[NoAccessorMethod]
-		[Version (since = "0.8")]
 		public bool show_on_set_parent { get; set; }
 		[NoAccessorMethod]
-		[Version (since = "1.12")]
 		public Graphene.Size size { owned get; set; }
-		[Version (since = "1.0")]
 		public Clutter.TextDirection text_direction { get; set; }
-		[Version (since = "1.12")]
 		public Graphene.Matrix transform { get; set; }
 		[NoAccessorMethod]
-		[Version (since = "1.12")]
 		public bool transform_set { get; }
 		[NoAccessorMethod]
-		[Version (since = "1.12")]
 		public float translation_x { get; set; }
 		[NoAccessorMethod]
-		[Version (since = "1.12")]
 		public float translation_y { get; set; }
 		[NoAccessorMethod]
-		[Version (since = "1.12")]
 		public float translation_z { get; set; }
 		[NoAccessorMethod]
 		public bool visible { get; set; }
 		public float width { get; set; }
 		public float x { get; set; }
-		[Version (since = "1.10")]
 		public Clutter.ActorAlign x_align { get; set; }
-		[Version (since = "1.12")]
 		public bool x_expand { get; set; }
 		public float y { get; set; }
-		[Version (since = "1.10")]
 		public Clutter.ActorAlign y_align { get; set; }
-		[Version (since = "1.12")]
 		public bool y_expand { get; set; }
-		[Version (since = "1.12")]
 		public float z_position { get; set; }
 #if HAS_MUTTER45
 		public virtual signal bool button_press_event (Clutter.Event event);
 		public virtual signal bool button_release_event (Clutter.Event event);
 #else
-		[Version (since = "0.6")]
 		public virtual signal bool button_press_event (Clutter.ButtonEvent event);
-		[Version (since = "0.6")]
 		public virtual signal bool button_release_event (Clutter.ButtonEvent event);
 #endif
-		[Version (since = "0.6")]
 		public virtual signal bool captured_event (Clutter.Event event);
 #if HAS_MUTTER46
 		public virtual signal void child_added (Clutter.Actor child);
@@ -5264,22 +5062,16 @@ namespace Clutter {
 		public signal void decloned (Clutter.Clone object);
 #endif
 		[HasEmitter]
-		[Version (since = "0.2")]
 		public virtual signal void destroy ();
 #if HAS_MUTTER45
 		public virtual signal bool enter_event (Clutter.Event event);
 #else
-		[Version (since = "0.6")]
 		public virtual signal bool enter_event (Clutter.CrossingEvent event);
 #endif
-		[Version (since = "0.6")]
 		public virtual signal bool event (Clutter.Event event);
 		[HasEmitter]
-		[Version (since = "0.2")]
 		public virtual signal void hide ();
-		[Version (since = "0.6")]
 		public virtual signal void key_focus_in ();
-		[Version (since = "0.6")]
 		public virtual signal void key_focus_out ();
 #if HAS_MUTTER45
 		public virtual signal bool key_press_event (Clutter.Event event);
@@ -5287,49 +5079,43 @@ namespace Clutter {
 		public virtual signal bool leave_event (Clutter.Event event);
 		public virtual signal bool motion_event (Clutter.Event event);
 #else
-		[Version (since = "0.6")]
 		public virtual signal bool key_press_event (Clutter.KeyEvent event);
-		[Version (since = "0.6")]
 		public virtual signal bool key_release_event (Clutter.KeyEvent event);
-		[Version (since = "0.6")]
 		public virtual signal bool leave_event (Clutter.CrossingEvent event);
-		[Version (since = "0.6")]
 		public virtual signal bool motion_event (Clutter.MotionEvent event);
 #endif
-		[Version (since = "0.2")]
 		public virtual signal void parent_set (Clutter.Actor? old_parent);
-		[Version (since = "1.0")]
 		[HasEmitter]
 		public virtual signal void pick (Clutter.PickContext pick_context);
 		[HasEmitter]
-		[Version (since = "1.2")]
 		public virtual signal void queue_relayout ();
 		[HasEmitter]
-		[Version (deprecated = true, deprecated_since = "1.16", since = "0.8")]
+		[Version (deprecated = true, deprecated_since = "1.16")]
 		public virtual signal void realize ();
 		public virtual signal void resource_scale_changed ();
 #if HAS_MUTTER45
 		public virtual signal bool scroll_event (Clutter.Event event);
 #else
-		[Version (since = "0.6")]
 		public virtual signal bool scroll_event (Clutter.ScrollEvent event);
 #endif
 		[HasEmitter]
-		[Version (since = "0.2")]
 		public virtual signal void show ();
 		public signal void stage_views_changed ();
-		[Version (since = "1.12")]
 		public virtual signal bool touch_event (Clutter.Event event);
-		[Version (since = "1.12")]
 		public signal void transition_stopped (string name, bool is_finished);
-		[Version (since = "1.10")]
 		public signal void transitions_completed ();
 		[HasEmitter]
-		[Version (deprecated = true, deprecated_since = "1.16", since = "0.8")]
+		[Version (deprecated = true, deprecated_since = "1.16")]
 		public virtual signal void unrealize ();
 	}
+#if HAS_MUTTER47
+	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_actor_accessible_get_type ()")]
+	public class ActorAccessible : Atk.GObjectAccessible, Atk.Component {
+		[CCode (has_construct_function = false)]
+		protected ActorAccessible ();
+	}
+#endif
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_actor_meta_get_type ()")]
-	[Version (since = "1.4")]
 	public abstract class ActorMeta : GLib.InitiallyUnowned {
 		[CCode (has_construct_function = false)]
 		protected ActorMeta ();
@@ -5350,7 +5136,6 @@ namespace Clutter {
 		public ActorNode (Clutter.Actor actor, int opacity);
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_align_constraint_get_type ()")]
-	[Version (since = "1.4")]
 	public sealed class AlignConstraint : Clutter.Constraint {
 		[CCode (has_construct_function = false, type = "ClutterConstraint*")]
 		public AlignConstraint (Clutter.Actor? source, Clutter.AlignAxis axis, float factor);
@@ -5369,7 +5154,6 @@ namespace Clutter {
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", has_type_id = false)]
 	[Compact]
-	[Version (since = "0.2")]
 	public class AnyEvent : Clutter.Event {
 #if !HAS_MUTTER45
 		public Clutter.EventFlags flags;
@@ -5382,29 +5166,25 @@ namespace Clutter {
 #endif
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_backend_get_type ()")]
-	[Version (since = "0.4")]
 	public abstract class Backend : GLib.Object {
 		[CCode (has_construct_function = false)]
 		protected Backend ();
-		[Version (since = "1.8")]
 		public unowned Cogl.Context get_cogl_context ();
 		public unowned Clutter.Seat get_default_seat ();
-		[Version (since = "0.8")]
 		public unowned Cairo.FontOptions get_font_options ();
 		public unowned Clutter.InputMethod get_input_method ();
 		public double get_resolution ();
-		[Version (since = "0.8")]
 		public void set_font_options (Cairo.FontOptions options);
 		public void set_input_method (Clutter.InputMethod? method);
-		[Version (since = "1.0")]
 		public signal void font_changed ();
-		[Version (since = "1.0")]
 		public signal void resolution_changed ();
-		[Version (since = "1.4")]
 		public signal void settings_changed ();
+#if HAS_MUTTER47
+		[NoAccessorMethod]
+		public Clutter.Context context { owned get; construct; }
+#endif
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_bin_layout_get_type ()")]
-	[Version (since = "1.2")]
 	public class BinLayout : Clutter.LayoutManager {
 		[CCode (has_construct_function = false, type = "ClutterLayoutManager*")]
 #if HAS_MUTTER46
@@ -5412,15 +5192,14 @@ namespace Clutter {
 #else
 		public BinLayout (Clutter.BinAlignment x_align = Clutter.BinAlignment.START, Clutter.BinAlignment y_align = Clutter.BinAlignment.START);
 		[NoAccessorMethod]
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
+		[Version (deprecated = true, deprecated_since = "1.12")]
 		public Clutter.BinAlignment x_align { get; set; }
 		[NoAccessorMethod]
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
+		[Version (deprecated = true, deprecated_since = "1.12")]
 		public Clutter.BinAlignment y_align { get; set; }
 #endif
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_bind_constraint_get_type ()")]
-	[Version (since = "1.4")]
 	public sealed class BindConstraint : Clutter.Constraint {
 		[CCode (has_construct_function = false, type = "ClutterConstraint*")]
 		public BindConstraint (Clutter.Actor? source, Clutter.BindCoordinate coordinate, float offset);
@@ -5435,7 +5214,6 @@ namespace Clutter {
 		public Clutter.Actor source { get; set construct; }
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_binding_pool_get_type ()")]
-	[Version (since = "1.0")]
 	public sealed class BindingPool : GLib.Object {
 		[CCode (has_construct_function = false)]
 		public BindingPool (string name);
@@ -5464,7 +5242,6 @@ namespace Clutter {
 		public void add_blit_rectangle (int src_x, int src_y, int dst_x, int dst_y, int width, int height);
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_blur_effect_get_type ()")]
-	[Version (since = "1.4")]
 	public class BlurEffect : Clutter.OffscreenEffect {
 		[CCode (has_construct_function = false, type = "ClutterEffect*")]
 		public BlurEffect ();
@@ -5475,31 +5252,24 @@ namespace Clutter {
 		public BlurNode (uint width, uint height, float radius);
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_box_layout_get_type ()")]
-	[Version (since = "1.2")]
 	public class BoxLayout : Clutter.LayoutManager {
 		[CCode (has_construct_function = false, type = "ClutterLayoutManager*")]
 		public BoxLayout ();
-		[Version (since = "1.4")]
 		public bool get_homogeneous ();
-		[Version (since = "1.12")]
 		public Clutter.Orientation get_orientation ();
 #if !HAS_MUTTER45
 		[Version (deprecated = true)]
 		public bool get_pack_start ();
 #endif
 		public uint get_spacing ();
-		[Version (since = "1.4")]
 		public void set_homogeneous (bool homogeneous);
-		[Version (since = "1.12")]
 		public void set_orientation (Clutter.Orientation orientation);
 #if !HAS_MUTTER45
 		[Version (deprecated = true)]
 		public void set_pack_start (bool pack_start);
 #endif
 		public void set_spacing (uint spacing);
-		[Version (since = "1.4")]
 		public bool homogeneous { get; set; }
-		[Version (since = "1.12")]
 		public Clutter.Orientation orientation { get; set; }
 #if !HAS_MUTTER45
 		[Version (deprecated = true)]
@@ -5508,7 +5278,6 @@ namespace Clutter {
 		public uint spacing { get; set; }
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_brightness_contrast_effect_get_type ()")]
-	[Version (since = "1.10")]
 	public class BrightnessContrastEffect : Clutter.OffscreenEffect {
 		[CCode (has_construct_function = false, type = "ClutterEffect*")]
 		public BrightnessContrastEffect ();
@@ -5519,13 +5288,20 @@ namespace Clutter {
 		public void set_contrast (float contrast);
 		public void set_contrast_full (float red, float green, float blue);
 		[NoAccessorMethod]
+#if HAS_MUTTER47
+		public Cogl.Color brightness { owned get; set; }
+#else
 		public Clutter.Color brightness { owned get; set; }
+#endif
 		[NoAccessorMethod]
+#if HAS_MUTTER47
+		public Cogl.Color contrast { owned get; set; }
+#else
 		public Clutter.Color contrast { owned get; set; }
+#endif
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", has_type_id = false)]
 	[Compact]
-	[Version (since = "0.2")]
 	public class ButtonEvent : Clutter.Event {
 #if !HAS_MUTTER45
 		public double axes;
@@ -5546,7 +5322,6 @@ namespace Clutter {
 	}
 #if !HAS_MUTTER46
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_canvas_get_type ()")]
-	[Version (since = "1.10")]
 	public class Canvas : GLib.Object, Clutter.Content {
 		[CCode (has_construct_function = false, type = "ClutterContent*")]
 		public Canvas ();
@@ -5561,7 +5336,6 @@ namespace Clutter {
 		public virtual signal bool draw (Cairo.Context cr, int width, int height);
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_child_meta_get_type ()")]
-	[Version (since = "0.8")]
 	public abstract class ChildMeta : GLib.Object {
 		[CCode (has_construct_function = false)]
 		protected ChildMeta ();
@@ -5572,38 +5346,30 @@ namespace Clutter {
 	}
 #endif
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_click_action_get_type ()")]
-	[Version (since = "1.4")]
 	public class ClickAction : Clutter.Action {
 		[CCode (has_construct_function = false, type = "ClutterAction*")]
 		public ClickAction ();
 		public uint get_button ();
-		[Version (since = "1.8")]
 		public void get_coords (out float press_x, out float press_y);
-		[Version (since = "1.6")]
 		public Clutter.ModifierType get_state ();
 		public void release ();
 		[NoAccessorMethod]
 		public bool held { get; }
 		[NoAccessorMethod]
-		[Version (since = "1.8")]
 		public int long_press_duration { get; set; }
 		[NoAccessorMethod]
-		[Version (since = "1.8")]
 		public int long_press_threshold { get; set; }
 		[NoAccessorMethod]
 		public bool pressed { get; }
 		public virtual signal void clicked (Clutter.Actor actor);
-		[Version (since = "1.8")]
 		public virtual signal bool long_press (Clutter.Actor actor, Clutter.LongPressState state);
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_clip_node_get_type ()")]
-	[Version (since = "1.10")]
 	public class ClipNode : Clutter.PaintNode {
 		[CCode (has_construct_function = false, type = "ClutterPaintNode*")]
 		public ClipNode ();
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_clone_get_type ()")]
-	[Version (since = "1.0")]
 #if HAS_MUTTER46
 	public class Clone : Clutter.Actor, Atk.Implementor, Clutter.Animatable {
 #else
@@ -5615,32 +5381,77 @@ namespace Clutter {
 		public void set_source (Clutter.Actor? source);
 		public Clutter.Actor source { get; set construct; }
 	}
+#if HAS_MUTTER47
+	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_color_manager_get_type ()")]
+	public sealed class ColorManager : GLib.Object {
+		[CCode (has_construct_function = false)]
+		protected ColorManager ();
+		[NoAccessorMethod]
+		public Clutter.Context context { owned get; construct; }
+	}
+#endif
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_color_node_get_type ()")]
-	[Version (since = "1.10")]
 	public class ColorNode : Clutter.PipelineNode {
 		[CCode (has_construct_function = false, type = "ClutterPaintNode*")]
+#if HAS_MUTTER47
+		public ColorNode (Cogl.Color? color);
+#else
 		public ColorNode (Clutter.Color? color);
+#endif
 	}
 #if HAS_MUTTER43
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_color_state_get_type ()")]
 	public sealed class ColorState : GLib.Object {
 		[CCode (has_construct_function = false)]
+#if HAS_MUTTER47
+		public ColorState (Clutter.Context context, Clutter.Colorspace colorspace, Clutter.TransferFunction transfer_function);
+		public void add_pipeline_transform (Clutter.ColorState target_color_state, Cogl.Pipeline pipeline);
+		public bool equals (Clutter.ColorState other_color_state);
+		[CCode (has_construct_function = false)]
+		public ColorState.full (Clutter.Context context, Clutter.Colorspace colorspace, Clutter.TransferFunction transfer_function, float min_lum, float max_lum, float ref_lum);
+		public Clutter.ColorState get_blending (bool force);
+#else
 		public ColorState (Clutter.Colorspace colorspace);
+#endif
 		public Clutter.Colorspace get_colorspace ();
+#if HAS_MUTTER47
+		public uint get_id ();
+		public void get_luminances (float min_lum_out, float max_lum_out, float ref_lum_out);
+		public Clutter.TransferFunction get_transfer_function ();
+		public Clutter.EncodingRequiredFormat required_format ();
+		public string to_string ();
+		public void update_uniforms (Clutter.ColorState target_color_state, Cogl.Pipeline pipeline);
+#endif
 		public Clutter.Colorspace colorspace { get; construct; }
+#if HAS_MUTTER47
+		[NoAccessorMethod]
+		public Clutter.Context context { owned get; construct; }
+		[NoAccessorMethod]
+		public float max_luminance { get; construct; }
+		[NoAccessorMethod]
+		public float min_luminance { get; construct; }
+		[NoAccessorMethod]
+		public float ref_luminance { get; construct; }
+		public Clutter.TransferFunction transfer_function { get; construct; }
+#endif
 	}
 #endif
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_colorize_effect_get_type ()")]
-	[Version (since = "1.4")]
 	public class ColorizeEffect : Clutter.OffscreenEffect {
 		[CCode (has_construct_function = false, type = "ClutterEffect*")]
+#if HAS_MUTTER47
+		public ColorizeEffect (Cogl.Color tint);
+		public Cogl.Color get_tint ();
+		public void set_tint (Cogl.Color tint);
+		public Cogl.Color tint { get; set; }
+#else
 		public ColorizeEffect (Clutter.Color tint);
 		public Clutter.Color get_tint ();
 		public void set_tint (Clutter.Color tint);
 		public Clutter.Color tint { get; set; }
+#endif
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_constraint_get_type ()")]
-	[Version (since = "1.4")]
 	public abstract class Constraint : Clutter.ActorMeta {
 		[CCode (has_construct_function = false)]
 		protected Constraint ();
@@ -5659,13 +5470,16 @@ namespace Clutter {
 	public class Context {
 #endif
 		public unowned Clutter.Backend get_backend ();
+#if HAS_MUTTER47
+		public unowned Clutter.ColorManager get_color_manager ();
+		public unowned Clutter.Settings get_settings ();
+#endif
 #if HAS_MUTTER46
 		public Clutter.TextDirection get_text_direction ();
 #endif
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", has_type_id = false)]
 	[Compact]
-	[Version (since = "0.2")]
 	public class CrossingEvent : Clutter.Event {
 #if !HAS_MUTTER45
 		public weak Clutter.InputDevice device;
@@ -5683,26 +5497,35 @@ namespace Clutter {
 #endif
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_deform_effect_get_type ()")]
-	[Version (since = "1.4")]
 	public abstract class DeformEffect : Clutter.OffscreenEffect {
 		[CCode (has_construct_function = false)]
 		protected DeformEffect ();
 		[NoWrapper]
+#if HAS_MUTTER47
+		public virtual void deform_vertex (float width, float height, Clutter.TextureVertex vertex);
+#else
 		public virtual void deform_vertex (float width, float height, Cogl.TextureVertex vertex);
-#if HAS_MUTTER46
+#endif
+#if HAS_MUTTER47
+		public unowned Cogl.Pipeline? get_back_pipeline ();
+#elif HAS_MUTTER46
 		public unowned Cogl.Pipeline get_back_material ();
 #else
 		public unowned Cogl.Handle get_back_material ();
 #endif
 		public void get_n_tiles (out uint x_tiles, out uint y_tiles);
 		public void invalidate ();
-#if HAS_MUTTER46
+#if HAS_MUTTER47
+		public void set_back_pipeline (Cogl.Pipeline? pipeline);
+#elif HAS_MUTTER46
 		public void set_back_material (Cogl.Pipeline? material);
 #else
 		public void set_back_material (Cogl.Handle? material);
 #endif
 		public void set_n_tiles (uint x_tiles, uint y_tiles);
-#if HAS_MUTTER46
+#if HAS_MUTTER47
+		public Cogl.Pipeline back_pipeline { get; set; }
+#elif HAS_MUTTER46
 		public Cogl.Pipeline back_material { get; set; }
 #endif
 		[NoAccessorMethod]
@@ -5711,7 +5534,6 @@ namespace Clutter {
 		public uint y_tiles { get; set; }
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_desaturate_effect_get_type ()")]
-	[Version (since = "1.4")]
 	public class DesaturateEffect : Clutter.OffscreenEffect {
 		[CCode (has_construct_function = false, type = "ClutterEffect*")]
 		public DesaturateEffect (double factor);
@@ -5734,7 +5556,6 @@ namespace Clutter {
 #endif
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_effect_get_type ()")]
-	[Version (since = "1.4")]
 	public abstract class Effect : Clutter.ActorMeta {
 		[CCode (has_construct_function = false)]
 		protected Effect ();
@@ -5750,12 +5571,10 @@ namespace Clutter {
 		public virtual void post_paint (Clutter.PaintNode node, Clutter.PaintContext paint_context);
 		[NoWrapper]
 		public virtual bool pre_paint (Clutter.PaintNode node, Clutter.PaintContext paint_context);
-		[Version (since = "1.8")]
 		public void queue_repaint ();
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "clutter_event_get_type ()")]
 	[Compact]
-	[Version (since = "0.2")]
 	public class Event {
 #if !HAS_MUTTER45
 		public Clutter.EventType type;
@@ -5764,40 +5583,25 @@ namespace Clutter {
 		[CCode (has_construct_function = false)]
 		public Event (Clutter.EventType type);
 #endif
-		[Version (since = "1.18")]
 		public static uint add_filter (Clutter.Stage? stage, [CCode (delegate_target_pos = 2.2, destroy_notify_pos = 2.1)] owned Clutter.EventFilterFunc func);
 		public Clutter.Event copy ();
 		public void free ();
-		[Version (since = "0.4")]
 		public static Clutter.Event @get ();
-		[Version (since = "1.12")]
 		public double get_angle (Clutter.Event target);
-		[Version (since = "1.6")]
 		public double get_axes (out uint n_axes);
-		[Version (since = "1.0")]
 		public uint32 get_button ();
-		[Version (since = "0.4")]
 		public void get_coords (out float x, out float y);
-		[Version (since = "1.0")]
 		public unowned Clutter.InputDevice get_device ();
-		[Version (since = "1.28")]
 		public unowned Clutter.InputDeviceTool get_device_tool ();
-		[Version (since = "1.0")]
 		public Clutter.InputDeviceType get_device_type ();
-		[Version (since = "1.12")]
 		public float get_distance (Clutter.Event target);
 		public uint32 get_event_code ();
-		[Version (since = "1.10")]
 		public unowned Clutter.EventSequence get_event_sequence ();
-		[Version (since = "1.0")]
 		public Clutter.EventFlags get_flags ();
-		[Version (since = "1.24")]
 		public void get_gesture_motion_delta (out double dx, out double dy);
 		public void get_gesture_motion_delta_unaccelerated (out double dx, out double dy);
 		public Clutter.TouchpadGesturePhase get_gesture_phase ();
-		[Version (since = "1.24")]
 		public double get_gesture_pinch_angle_delta ();
-		[Version (since = "1.24")]
 		public double get_gesture_pinch_scale ();
 #if HAS_MUTTER45
 		public uint32 get_im_delete_length ();
@@ -5805,12 +5609,10 @@ namespace Clutter {
 		public Clutter.PreeditResetMode get_im_preedit_reset_mode ();
 		public unowned string get_im_text ();
 #endif
-		[Version (since = "1.0")]
 		public uint16 get_key_code ();
 #if HAS_MUTTER46
 		public void get_key_state (out Clutter.ModifierType pressed, out Clutter.ModifierType latched, out Clutter.ModifierType locked);
 #endif
-		[Version (since = "1.0")]
 		public uint get_key_symbol ();
 		public unichar get_key_unicode ();
 		public uint get_mode_group ();
@@ -5819,105 +5621,68 @@ namespace Clutter {
 #else
 		public bool get_pad_event_details (out uint number, out uint mode, out double value);
 #endif
-		[Version (since = "1.12")]
 		public Graphene.Point get_position ();
-		[Version (since = "1.0")]
 		public unowned Clutter.Actor get_related ();
 #if HAS_MUTTER45
 		public bool get_relative_motion (double dx, double dy, double dx_unaccel, double dy_unaccel, double dx_constrained, double dy_constrained);
 #else
 		public bool get_relative_motion (double dx, double dy, double dx_unaccel, double dy_unaccel);
 #endif
-		[Version (since = "1.10")]
 		public void get_scroll_delta (out double dx, out double dy);
-		[Version (since = "1.0")]
 		public Clutter.ScrollDirection get_scroll_direction ();
-		[Version (since = "1.26")]
 		public Clutter.ScrollFinishFlags get_scroll_finish_flags ();
-		[Version (since = "1.26")]
 		public Clutter.ScrollSource get_scroll_source ();
 #if !HAS_MUTTER46
-		[Version (since = "0.6")]
 		public unowned Clutter.Actor get_source ();
 #endif
-		[Version (since = "1.6")]
 		public unowned Clutter.InputDevice get_source_device ();
 #if !HAS_MUTTER45
-		[Version (since = "0.8")]
 		public unowned Clutter.Stage get_stage ();
 #endif
-		[Version (since = "0.4")]
 		public Clutter.ModifierType get_state ();
 #if !HAS_MUTTER45
-		[Version (since = "1.16")]
 		public void get_state_full (out Clutter.ModifierType button_state, out Clutter.ModifierType base_state, out Clutter.ModifierType latched_state, out Clutter.ModifierType locked_state, out Clutter.ModifierType effective_state);
 #endif
-		[Version (since = "0.4")]
 		public uint32 get_time ();
 		public int64 get_time_us ();
-		[Version (since = "1.24")]
 		public uint get_touchpad_gesture_finger_count ();
 		[CCode (cname = "clutter_event_type")]
 		public Clutter.EventType get_type ();
-		[Version (since = "1.12")]
 		public bool has_control_modifier ();
-		[Version (since = "1.12")]
 		public bool has_shift_modifier ();
-		[Version (since = "1.12")]
 		public bool is_pointer_emulated ();
-		[Version (since = "0.6")]
 		public void put ();
-		[Version (since = "1.18")]
 		public static void remove_filter (uint id);
 #if !HAS_MUTTER45
-		[Version (since = "1.8")]
 		public void set_button (uint32 button);
-		[Version (since = "1.8")]
 		public void set_coords (float x, float y);
-		[Version (since = "1.6")]
 		public void set_device (Clutter.InputDevice? device);
-		[Version (since = "1.28")]
 		public void set_device_tool (Clutter.InputDeviceTool? tool);
-		[Version (since = "1.8")]
 		public void set_flags (Clutter.EventFlags flags);
-		[Version (since = "1.8")]
 		public void set_key_code (uint16 key_code);
-		[Version (since = "1.8")]
 		public void set_key_symbol (uint key_sym);
-		[Version (since = "1.8")]
 		public void set_key_unicode (unichar key_unicode);
-		[Version (since = "1.8")]
 		public void set_related (Clutter.Actor? actor);
-		[Version (since = "1.10")]
 		public void set_scroll_delta (double dx, double dy);
-		[Version (since = "1.8")]
 		public void set_scroll_direction (Clutter.ScrollDirection direction);
-		[Version (since = "1.8")]
 		public void set_source (Clutter.Actor? actor);
-		[Version (since = "1.8")]
 		public void set_source_device (Clutter.InputDevice? device);
-		[Version (since = "1.8")]
 		public void set_stage (Clutter.Stage? stage);
-		[Version (since = "1.8")]
 		public void set_state (Clutter.ModifierType state);
-		[Version (since = "1.8")]
 		public void set_time (uint32 time_);
 #endif
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "clutter_event_sequence_get_type ()")]
 	[Compact]
-	[Version (since = "1.12")]
 	public class EventSequence {
 		public int32 get_slot ();
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_fixed_layout_get_type ()")]
-	[Version (since = "1.2")]
 	public class FixedLayout : Clutter.LayoutManager {
 		[CCode (has_construct_function = false, type = "ClutterLayoutManager*")]
 		public FixedLayout ();
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_flow_layout_get_type ()")]
-	[Version (since = "1.2")]
 	public sealed class FlowLayout : Clutter.LayoutManager {
 		[CCode (has_construct_function = false, type = "ClutterLayoutManager*")]
 #if HAS_MUTTER46
@@ -5935,7 +5700,6 @@ namespace Clutter {
 #endif
 		public void get_row_height (out float min_height, out float max_height);
 		public float get_row_spacing ();
-		[Version (since = "1.16")]
 		public bool get_snap_to_grid ();
 		public void set_column_spacing (float spacing);
 		public void set_column_width (float min_width, float max_width);
@@ -5947,7 +5711,6 @@ namespace Clutter {
 #endif
 		public void set_row_height (float min_height, float max_height);
 		public void set_row_spacing (float spacing);
-		[Version (since = "1.16")]
 		public void set_snap_to_grid (bool snap_to_grid);
 		public float column_spacing { get; set; }
 		public bool homogeneous { get; set; }
@@ -5965,7 +5728,6 @@ namespace Clutter {
 		public Clutter.FlowOrientation orientation { get; set construct; }
 #endif
 		public float row_spacing { get; set; }
-		[Version (since = "1.16")]
 		public bool snap_to_grid { get; set; }
 	}
 #if HAS_MUTTER44
@@ -6006,59 +5768,68 @@ namespace Clutter {
 		public void remove_timeline (Clutter.Timeline timeline);
 		public void schedule_update ();
 		public void schedule_update_now ();
+#if HAS_MUTTER47
+		public void set_deadline_evasion (int64 deadline_evasion_us);
+		public void set_mode (Clutter.FrameClockMode mode);
+#endif
 		public void uninhibit ();
 		[HasEmitter]
 		public signal void destroy ();
 	}
+#if HAS_MUTTER47
+	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_gesture_get_type ()")]
+	public abstract class Gesture : Clutter.Action {
+		[CCode (has_construct_function = false)]
+		protected Gesture ();
+		public void can_not_cancel (Clutter.Gesture other_gesture);
+		public uint get_n_points ();
+		public Graphene.Point get_point_begin_coords (int point_index);
+		public Graphene.Point get_point_coords (int point_index);
+		public unowned Clutter.Event get_point_event (int point_index);
+		public Graphene.Point get_point_previous_coords (int point_index);
+		[CCode (array_length_pos = 0.1, array_length_type = "gsize")]
+		public unowned uint[] get_points ();
+		public Clutter.GestureState get_state ();
+		public Clutter.GestureState state { get; }
+		[HasEmitter]
+		public signal void cancel ();
+		public signal void end ();
+		public virtual signal bool may_recognize ();
+		public signal void recognize ();
+		public virtual signal bool should_handle_sequence (Clutter.Event sequence_begin_event);
+	}
+#endif
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_gesture_action_get_type ()")]
-	[Version (since = "1.8")]
 	public class GestureAction : Clutter.Action {
 		[CCode (has_construct_function = false, type = "ClutterAction*")]
 		public GestureAction ();
-		[Version (since = "1.12")]
 		public void cancel ();
 		[NoWrapper]
 		public virtual bool gesture_prepare (Clutter.Actor actor);
-		[Version (since = "1.12")]
 		public unowned Clutter.InputDevice get_device (uint point);
-		[Version (since = "1.14")]
 		public unowned Clutter.Event get_last_event (uint point);
 		public void get_motion_coords (uint point, out float motion_x, out float motion_y);
-		[Version (since = "1.12")]
 		public float get_motion_delta (uint point, out float delta_x, out float delta_y);
-		[Version (since = "1.12")]
 		public uint get_n_current_points ();
-		[Version (since = "1.12")]
 		public int get_n_touch_points ();
 		public void get_press_coords (uint point, out float press_x, out float press_y);
 		public void get_release_coords (uint point, out float release_x, out float release_y);
-		[Version (since = "1.12")]
 		public unowned Clutter.EventSequence get_sequence (uint point);
-		[Version (since = "1.18")]
 		public void get_threshold_trigger_distance (out float x, out float y);
-		[Version (since = "1.20")]
 		public Clutter.GestureTriggerEdge get_threshold_trigger_edge ();
 #if !HAS_MUTTER46
-		[Version (deprecated = true, deprecated_since = "1.20", since = "1.18")]
+		[Version (deprecated = true, deprecated_since = "1.20")]
 		public Clutter.GestureTriggerEdge get_threshold_trigger_egde ();
 #endif
-		[Version (since = "1.12")]
 		public float get_velocity (uint point, out float velocity_x, out float velocity_y);
-		[Version (since = "1.12")]
 		public void set_n_touch_points (int nb_points);
-		[Version (since = "1.18")]
 		public void set_threshold_trigger_distance (float x, float y);
-		[Version (since = "1.18")]
 		public void set_threshold_trigger_edge (Clutter.GestureTriggerEdge edge);
-		[Version (since = "1.16")]
 		public int n_touch_points { get; set; }
 		[NoAccessorMethod]
-		[Version (since = "1.18")]
 		public float threshold_trigger_distance_x { get; construct; }
 		[NoAccessorMethod]
-		[Version (since = "1.18")]
 		public float threshold_trigger_distance_y { get; construct; }
-		[Version (since = "1.18")]
 		public Clutter.GestureTriggerEdge threshold_trigger_edge { get; construct; }
 		public virtual signal bool gesture_begin (Clutter.Actor actor);
 		public virtual signal void gesture_cancel (Clutter.Actor actor);
@@ -6074,6 +5845,9 @@ namespace Clutter {
 	[CCode (cheader_filename = "clutter/clutter.h", ref_function = "clutter_grab_ref", type_id = "clutter_grab_get_type ()", unref_function = "clutter_grab_unref")]
 	[Compact]
 	public class Grab {
+#endif
+#if HAS_MUTTER47
+		public void activate ();
 #endif
 		public void dismiss ();
 		public Clutter.GrabState get_seat_state ();
@@ -6087,7 +5861,6 @@ namespace Clutter {
 #endif
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_grid_layout_get_type ()")]
-	[Version (since = "1.12")]
 	public sealed class GridLayout : Clutter.LayoutManager {
 		[CCode (has_construct_function = false, type = "ClutterLayoutManager*")]
 		public GridLayout ();
@@ -6134,7 +5907,6 @@ namespace Clutter {
 #endif
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_image_get_type ()")]
-	[Version (since = "1.10")]
 	public class Image : GLib.Object, Clutter.Content {
 		[CCode (has_construct_function = false, type = "ClutterContent*")]
 		public Image ();
@@ -6144,7 +5916,6 @@ namespace Clutter {
 #else
 		public bool set_area ([CCode (array_length = false)] uint8[] data, Cogl.PixelFormat pixel_format, Cairo.RectangleInt rect, uint row_stride) throws GLib.Error;
 #endif
-		[Version (since = "1.12")]
 		public bool set_bytes (GLib.Bytes data, Cogl.PixelFormat pixel_format, uint width, uint height, uint row_stride) throws GLib.Error;
 		public bool set_data ([CCode (array_length = false)] uint8[] data, Cogl.PixelFormat pixel_format, uint width, uint height, uint row_stride) throws GLib.Error;
 	}
@@ -6155,18 +5926,14 @@ namespace Clutter {
 #if HAS_MUTTER43
 		public Clutter.InputCapabilities get_capabilities ();
 #endif
-		[Version (since = "1.6")]
 		public Clutter.InputMode get_device_mode ();
-		[Version (since = "1.2")]
 		public unowned string get_device_name ();
 		public unowned string get_device_node ();
-		[Version (since = "1.0")]
 		public Clutter.InputDeviceType get_device_type ();
 #if HAS_MUTTER44
 		public virtual bool get_dimensions (out uint width, out uint height);
 #endif
 		public virtual int get_group_n_modes (int group);
-		[Version (since = "1.6")]
 		public bool get_has_cursor ();
 		public int get_mode_switch_button_group (uint button);
 		public int get_n_buttons ();
@@ -6175,20 +5942,16 @@ namespace Clutter {
 		public int get_n_strips ();
 		public virtual int get_pad_feature_group (Clutter.InputDevicePadFeature feature, int n_feature);
 
-		[Version (since = "1.22")]
 		public unowned string get_product_id ();
 		public unowned Clutter.Seat get_seat ();
-		[Version (since = "1.22")]
 		public unowned string get_vendor_id ();
 #if !HAS_MUTTER44
-		[Version (since = "1.10")]
 		public void grab (Clutter.Actor actor);
 #endif
 		public virtual bool is_grouped (Clutter.InputDevice other_device);
 		public virtual bool is_mode_switch_button (uint group, uint button);
 #if !HAS_MUTTER44
 		[NoAccessorMethod]
-		[Version (since = "1.6")]
 		public Clutter.Backend backend { owned get; construct; }
 #endif
 #if HAS_MUTTER43
@@ -6196,21 +5959,16 @@ namespace Clutter {
 #endif
 		public Clutter.InputMode device_mode { get; construct; }
 		public string device_node { get; construct; }
-		[Version (since = "1.2")]
 		public Clutter.InputDeviceType device_type { get; construct; }
-		[Version (since = "1.6")]
 		public bool has_cursor { get; construct; }
 		public int n_buttons { get; construct; }
 		public int n_mode_groups { get; construct; }
 		public int n_rings { get; construct; }
 		public int n_strips { get; construct; }
 		[NoAccessorMethod]
-		[Version (since = "1.2")]
 		public string name { owned get; construct; }
-		[Version (since = "1.22")]
 		public string product_id { get; construct; }
 		public Clutter.Seat seat { get; construct; }
-		[Version (since = "1.22")]
 		public string vendor_id { get; construct; }
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_input_device_tool_get_type ()")]
@@ -6219,9 +5977,7 @@ namespace Clutter {
 		protected InputDeviceTool ();
 		public Clutter.InputAxisFlags get_axes ();
 		public uint64 get_id ();
-		[Version (since = "1.28")]
 		public uint64 get_serial ();
-		[Version (since = "1.28")]
 		public Clutter.InputDeviceToolType get_tool_type ();
 		public Clutter.InputAxisFlags axes { get; construct; }
 		public uint64 id { get; construct; }
@@ -6304,7 +6060,6 @@ namespace Clutter {
 		public signal void request_surrounding ();
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_interval_get_type ()")]
-	[Version (since = "1.0")]
 #if HAS_MUTTER46
 	public class Interval : GLib.InitiallyUnowned {
 #else
@@ -6313,22 +6068,18 @@ namespace Clutter {
 		[CCode (has_construct_function = false)]
 		public Interval (GLib.Type gtype, ...);
 		public Clutter.Interval clone ();
-		[Version (since = "1.4")]
 		public unowned GLib.Value? compute (double factor);
 		public virtual bool compute_value (double factor, out GLib.Value value);
 		public GLib.Value get_final_value ();
 		public GLib.Value get_initial_value ();
 		public void get_interval (...);
 		public GLib.Type get_value_type ();
-		[Version (since = "1.12")]
 		public bool is_valid ();
 		public unowned GLib.Value? peek_final_value ();
 		public unowned GLib.Value? peek_initial_value ();
 		public static void register_progress_func (GLib.Type value_type, Clutter.ProgressFunc func);
-		[Version (since = "1.10")]
 		public void set_final (...);
 		public void set_final_value (GLib.Value value);
-		[Version (since = "1.10")]
 		public void set_initial (...);
 		public void set_initial_value (GLib.Value value);
 		public void set_interval (...);
@@ -6336,16 +6087,13 @@ namespace Clutter {
 		[CCode (has_construct_function = false)]
 		public Interval.with_values (GLib.Type gtype, GLib.Value? initial, GLib.Value? final);
 		[NoAccessorMethod]
-		[Version (since = "1.12")]
 		public GLib.Value final { owned get; set; }
 		[NoAccessorMethod]
-		[Version (since = "1.12")]
 		public GLib.Value initial { owned get; set; }
 		public GLib.Type value_type { get; construct; }
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", has_type_id = false)]
 	[Compact]
-	[Version (since = "0.2")]
 	public class KeyEvent : Clutter.Event {
 #if !HAS_MUTTER45
 		public weak Clutter.InputDevice device;
@@ -6364,7 +6112,6 @@ namespace Clutter {
 #endif
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_keyframe_transition_get_type ()")]
-	[Version (since = "1.12")]
 #if HAS_MUTTER46
 	public class KeyframeTransition : Clutter.PropertyTransition {
 #else
@@ -6408,7 +6155,6 @@ namespace Clutter {
 		public LayerNode.to_framebuffer (Cogl.Framebuffer framebuffer, Cogl.Pipeline pipeline);
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_layout_manager_get_type ()")]
-	[Version (since = "1.2")]
 	public abstract class LayoutManager : GLib.InitiallyUnowned {
 		[CCode (has_construct_function = false)]
 		protected LayoutManager ();
@@ -6430,7 +6176,6 @@ namespace Clutter {
 		public virtual unowned Clutter.LayoutMeta create_child_meta (Clutter.Container container, Clutter.Actor actor);
 #endif
 		public unowned GLib.ParamSpec find_child_property (string name);
-		[Version (since = "1.0")]
 #if HAS_MUTTER46
 		public unowned Clutter.LayoutMeta get_child_meta (Clutter.Actor container, Clutter.Actor actor);
 #else
@@ -6456,7 +6201,6 @@ namespace Clutter {
 		public virtual signal void layout_changed ();
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_layout_meta_get_type ()")]
-	[Version (since = "1.2")]
 #if HAS_MUTTER46
 	public abstract class LayoutMeta : GLib.Object {
 #else
@@ -6478,7 +6222,6 @@ namespace Clutter {
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", has_type_id = false)]
 	[Compact]
-	[Version (since = "0.2")]
 	public class MotionEvent : Clutter.Event {
 #if !HAS_MUTTER45
 		public double axes;
@@ -6501,19 +6244,19 @@ namespace Clutter {
 #endif
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_offscreen_effect_get_type ()")]
-	[Version (since = "1.4")]
 	public abstract class OffscreenEffect : Clutter.Effect {
 		[CCode (has_construct_function = false)]
 		protected OffscreenEffect ();
-#if HAS_MUTTER46
+#if HAS_MUTTER47
+		public virtual Cogl.Texture create_texture (Cogl.Context cogl_context, float width, float height);
+#elif HAS_MUTTER46
 		public virtual Cogl.Texture create_texture (float width, float height);
 #else
 		public virtual Cogl.Handle create_texture (float width, float height);
 #endif
 		public unowned Cogl.Pipeline? get_pipeline ();
-		[Version (deprecated = true, deprecated_since = "1.14", since = "1.8")]
+		[Version (deprecated = true, deprecated_since = "1.14")]
 		public bool get_target_size (out float width, out float height);
-		[Version (since = "1.10")]
 #if HAS_MUTTER46
 		public unowned Cogl.Texture get_texture ();
 #else
@@ -6577,7 +6320,6 @@ namespace Clutter {
 #endif
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_page_turn_effect_get_type ()")]
-	[Version (since = "1.4")]
 	public class PageTurnEffect : Clutter.DeformEffect {
 		[CCode (has_construct_function = false, type = "ClutterEffect*")]
 		public PageTurnEffect (double period, double angle, float radius);
@@ -6600,14 +6342,19 @@ namespace Clutter {
 		public unowned Mtk.Region get_redraw_clip ();
 #else
 		public unowned Cairo.Region get_redraw_clip ();
+#endif
+#if HAS_MUTTER47
+		public void pop_color_state ();
 #endif
 		public void pop_framebuffer ();
 		public void push_framebuffer (Cogl.Framebuffer framebuffer);
+#if HAS_MUTTER47
+		public void push_color_state (Clutter.ColorState color_state);
+#endif
 		public unowned Clutter.PaintContext @ref ();
 		public void unref ();
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", ref_function = "clutter_paint_node_ref", type_id = "clutter_paint_node_get_type ()", unref_function = "clutter_paint_node_unref")]
-	[Version (since = "1.10")]
 	public abstract class PaintNode {
 		[CCode (has_construct_function = false)]
 		protected PaintNode ();
@@ -6624,20 +6371,16 @@ namespace Clutter {
 		public void unref ();
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_pan_action_get_type ()")]
-	[Version (since = "1.12")]
 	public class PanAction : Clutter.GestureAction {
 		[CCode (has_construct_function = false, type = "ClutterAction*")]
 		public PanAction ();
 		public double get_acceleration_factor ();
-		[Version (since = "1.24")]
 		public float get_constrained_motion_delta (uint point, out float delta_x, out float delta_y);
 		public double get_deceleration ();
 		public bool get_interpolate ();
 		public void get_interpolated_coords (out float interpolated_x, out float interpolated_y);
 		public float get_interpolated_delta (out float delta_x, out float delta_y);
-		[Version (since = "1.14")]
 		public void get_motion_coords (uint point, out float motion_x, out float motion_y);
-		[Version (since = "1.14")]
 		public float get_motion_delta (uint point, out float delta_x, out float delta_y);
 		public Clutter.PanAxis get_pan_axis ();
 		public void set_acceleration_factor (double factor);
@@ -6658,7 +6401,6 @@ namespace Clutter {
 		protected ParamSpecUnit ();
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_path_get_type ()")]
-	[Version (since = "1.0")]
 	public class Path : GLib.InitiallyUnowned {
 		[CCode (has_construct_function = false)]
 		public Path ();
@@ -6695,7 +6437,6 @@ namespace Clutter {
 		public uint length { get; }
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_path_constraint_get_type ()")]
-	[Version (since = "1.6")]
 	public class PathConstraint : Clutter.Constraint {
 		[CCode (has_construct_function = false, type = "ClutterConstraint*")]
 		public PathConstraint (Clutter.Path? path, float offset);
@@ -6722,14 +6463,21 @@ namespace Clutter {
 		public unowned Clutter.PickContext @ref ();
 		public void unref ();
 	}
+#if HAS_MUTTER47
+	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_pipeline_cache_get_type ()")]
+	public class PipelineCache : GLib.Object {
+		[CCode (has_construct_function = false)]
+		protected PipelineCache ();
+		public void set_pipeline (Clutter.PipelineGroup group, int slot, Clutter.ColorState source_color_state, Clutter.ColorState target_color_state, Cogl.Pipeline pipeline);
+		public void unset_all_pipelines (Clutter.PipelineGroup group);
+	}
+#endif
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_pipeline_node_get_type ()")]
-	[Version (since = "1.10")]
 	public class PipelineNode : Clutter.PaintNode {
 		[CCode (has_construct_function = false, type = "ClutterPaintNode*")]
 		public PipelineNode (Cogl.Pipeline? pipeline);
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_property_transition_get_type ()")]
-	[Version (since = "1.10")]
 #if HAS_MUTTER46
 	public class PropertyTransition : Clutter.Transition {
 #else
@@ -6745,7 +6493,6 @@ namespace Clutter {
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", has_type_id = false)]
 	[Compact]
-	[Version (since = "1.28")]
 	public class ProximityEvent : Clutter.Event {
 #if !HAS_MUTTER45
 		public weak Clutter.InputDevice device;
@@ -6761,10 +6508,13 @@ namespace Clutter {
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_root_node_get_type ()")]
 	public class RootNode : Clutter.PaintNode {
 		[CCode (has_construct_function = false, type = "ClutterPaintNode*")]
+#if HAS_MUTTER47
+		public RootNode (Cogl.Framebuffer framebuffer, Cogl.Color clear_color, Cogl.BufferBit clear_flags);
+#else
 		public RootNode (Cogl.Framebuffer framebuffer, Clutter.Color clear_color, Cogl.BufferBit clear_flags);
+#endif
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_rotate_action_get_type ()")]
-	[Version (since = "1.12")]
 	public class RotateAction : Clutter.GestureAction {
 		[CCode (has_construct_function = false, type = "ClutterAction*")]
 		public RotateAction ();
@@ -6772,41 +6522,33 @@ namespace Clutter {
 	}
 #if !HAS_MUTTER46
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_script_get_type ()")]
-	[Version (since = "0.6")]
 	public class Script : GLib.Object {
 		[CCode (has_construct_function = false)]
 		public Script ();
-		[Version (since = "0.8")]
 		public void add_search_paths ([CCode (array_length_cname = "n_paths", array_length_pos = 1.1, array_length_type = "gsize")] string[] paths);
 		public void connect_signals (void* user_data);
 		public void connect_signals_full (Clutter.ScriptConnectFunc func);
 		public void ensure_objects ();
 		public unowned GLib.Object get_object (string name);
 		public int get_objects (...);
-		[Version (since = "1.10")]
 		public unowned string get_translation_domain ();
 		public virtual GLib.Type get_type_from_name (string type_name);
-		[Version (since = "0.8")]
 		public GLib.List<weak GLib.Object> list_objects ();
 		public uint load_from_data (string data, ssize_t length) throws GLib.Error;
 		public uint load_from_file (string filename) throws GLib.Error;
-		[Version (since = "1.10")]
 		public uint load_from_resource (string resource_path) throws GLib.Error;
-		[Version (since = "0.8")]
 		public string lookup_filename (string filename);
-		[Version (since = "1.10")]
 		public void set_translation_domain (string? domain);
 		public void unmerge_objects (uint merge_id);
 		[NoAccessorMethod]
 		public string filename { owned get; }
 		[NoAccessorMethod]
 		public bool filename_set { get; }
-		[Version (since = "1.10")]
 		public string translation_domain { get; set; }
 	}
 #endif
+#if !HAS_MUTTER47
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_scroll_actor_get_type ()")]
-	[Version (since = "1.12")]
 #if HAS_MUTTER46
 	public class ScrollActor : Clutter.Actor, Atk.Implementor, Clutter.Animatable {
 #else
@@ -6820,9 +6562,9 @@ namespace Clutter {
 		public void set_scroll_mode (Clutter.ScrollMode mode);
 		public Clutter.ScrollMode scroll_mode { get; set; }
 	}
+#endif
 	[CCode (cheader_filename = "clutter/clutter.h", has_type_id = false)]
 	[Compact]
-	[Version (since = "0.2")]
 	public class ScrollEvent : Clutter.Event {
 #if !HAS_MUTTER45
 		public double axes;
@@ -6849,6 +6591,9 @@ namespace Clutter {
 		public virtual void bell_notify ();
 		public virtual Clutter.VirtualInputDevice create_virtual_device (Clutter.InputDeviceType device_type);
 		public void ensure_a11y_state ();
+#if HAS_MUTTER47
+		public unowned Clutter.Context get_context ();
+#endif
 		public virtual unowned Clutter.InputDevice get_keyboard ();
 		public virtual unowned Clutter.Keymap get_keymap ();
 #if HAS_MUTTER45
@@ -6874,6 +6619,9 @@ namespace Clutter {
 		public virtual void ungrab (uint32 time);
 		public void uninhibit_unfocus ();
 		public virtual void warp_pointer (int x, int y);
+#if HAS_MUTTER47
+		public Clutter.Context context { get; construct; }
+#endif
 #if HAS_MUTTER45
 		public string name { get; construct; }
 #endif
@@ -6888,18 +6636,16 @@ namespace Clutter {
 		public signal void ptr_a11y_timeout_stopped (Clutter.InputDevice device, Clutter.PointerA11yTimeoutType timeout_type, bool clicked);
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_settings_get_type ()")]
-	[Version (since = "1.4")]
 	public sealed class Settings : GLib.Object {
 		[CCode (has_construct_function = false)]
 		protected Settings ();
 		public static unowned Clutter.Settings get_default ();
 #if !HAS_MUTTER45
 		[NoAccessorMethod]
-		[Version (deprecated = true, deprecated_since = "1.10", since = "1.4")]
+		[Version (deprecated = true, deprecated_since = "1.10")]
 		public Clutter.Backend backend { construct; }
 #endif
 		[NoAccessorMethod]
-		[Version (since = "1.8")]
 		public int dnd_drag_threshold { get; set; }
 		[NoAccessorMethod]
 		public int double_click_distance { get; set; }
@@ -6917,10 +6663,11 @@ namespace Clutter {
 		public string font_name { owned get; set; }
 		[NoAccessorMethod]
 		public string font_subpixel_order { owned get; set; }
+#if !HAS_MUTTER47
 		[NoAccessorMethod]
 		public uint fontconfig_timestamp { set; }
+#endif
 		[NoAccessorMethod]
-		[Version (since = "1.8")]
 		public int long_press_duration { get; set; }
 		[NoAccessorMethod]
 		public uint password_hint_time { get; set; }
@@ -6934,10 +6681,8 @@ namespace Clutter {
 	}
 #endif
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_shader_effect_get_type ()")]
-	[Version (since = "1.4")]
 	public class ShaderEffect : Clutter.OffscreenEffect {
 		[CCode (has_construct_function = false, type = "ClutterEffect*")]
-		[Version (since = "1.8")]
 		public ShaderEffect (Clutter.ShaderType shader_type);
 #if HAS_MUTTER46
 		public unowned Cogl.Program get_program ();
@@ -6969,7 +6714,6 @@ namespace Clutter {
 		protected ShaderMatrix ();
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_snap_constraint_get_type ()")]
-	[Version (since = "1.6")]
 	public sealed class SnapConstraint : Clutter.Constraint {
 		[CCode (has_construct_function = false, type = "ClutterConstraint*")]
 		public SnapConstraint (Clutter.Actor? source, Clutter.SnapEdge from_edge, Clutter.SnapEdge to_edge, float offset);
@@ -6987,7 +6731,6 @@ namespace Clutter {
 		public Clutter.SnapEdge to_edge { get; set construct; }
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_stage_get_type ()")]
-	[Version (since = "0.2")]
 #if HAS_MUTTER46
 	public class Stage : Clutter.Actor, Atk.Implementor, Clutter.Animatable {
 #else
@@ -7003,10 +6746,8 @@ namespace Clutter {
 		public void clear_stage_views ();
 #if !HAS_MUTTER45
 		[CCode (cname = "clutter_stage_event")]
-		[Version (since = "0.4")]
 		public bool emit_event (Clutter.Event event);
 #endif
-		[Version (since = "1.0")]
 		public void ensure_viewport ();
 		public unowned Clutter.Actor get_actor_at_pos (Clutter.PickMode pick_mode, float x, float y);
 #if HAS_MUTTER45
@@ -7020,19 +6761,22 @@ namespace Clutter {
 #endif
 		public int64 get_frame_counter ();
 		public unowned Clutter.Actor? get_grab_actor ();
-		[Version (since = "0.6")]
 		public unowned Clutter.Actor get_key_focus ();
 		public Clutter.Perspective get_perspective ();
 #if !HAS_MUTTER44
-		[Version (since = "1.0")]
 		public bool get_throttle_motion_events ();
 #endif
-		[Version (since = "0.4")]
 		public unowned string get_title ();
 		public Clutter.Grab grab (Clutter.Actor actor);
+#if HAS_MUTTER47
+		public Clutter.Grab grab_inactive (Clutter.Actor actor);
+#endif
 #if HAS_MUTTER45
 		public void handle_event (Clutter.Event event);
 #endif
+#if HAS_MUTTER47
+		public bool is_active ();
+#endif
 #if HAS_MUTTER45
 		public bool paint_to_buffer (Mtk.Rectangle rect, float scale, [CCode (array_length = false)] uint8[] data, int stride, Cogl.PixelFormat format, Clutter.PaintFlag paint_flags) throws GLib.Error;
 		public Clutter.Content paint_to_content (Mtk.Rectangle rect, float scale, Clutter.PaintFlag paint_flags) throws GLib.Error;
@@ -7047,15 +6791,14 @@ namespace Clutter {
 		public uint8[] read_pixels (int x, int y, int width = -1, int height = -1);
 		public void repick_device (Clutter.InputDevice device);
 		public void schedule_update ();
-		[Version (since = "0.6")]
+#if HAS_MUTTER47
+		public void set_active (bool is_active);
+#endif
 		public void set_key_focus (Clutter.Actor? actor);
-		[Version (since = "1.2")]
 		public void set_minimum_size (uint width, uint height);
 #if !HAS_MUTTER44
-		[Version (since = "1.0")]
 		public void set_throttle_motion_events (bool throttle);
 #endif
-		[Version (since = "0.4")]
 		public void set_title (string title);
 #if HAS_MUTTER46
 		public void update_device (Clutter.InputDevice device, Clutter.EventSequence sequence, Clutter.InputDevice source_device, Graphene.Point point, uint32 time, Clutter.Actor new_actor, Mtk.Region region, bool emit_crossing);
@@ -7068,13 +6811,9 @@ namespace Clutter {
 		[NoAccessorMethod]
 		public bool is_grabbed { get; }
 #endif
-		[Version (since = "1.2")]
 		public Clutter.Actor key_focus { get; set; }
-		[Version (since = "0.8")]
 		public Clutter.Perspective perspective { get; }
-		[Version (since = "0.4")]
 		public string title { get; set; }
-		[Version (since = "0.6")]
 		public virtual signal void activate ();
 #if HAS_MUTTER44
 		public signal void after_paint (Clutter.StageView view, Clutter.Frame frame);
@@ -7082,20 +6821,18 @@ namespace Clutter {
 		public virtual signal void before_paint (Clutter.StageView view, Clutter.Frame frame);
 		public signal void before_update (Clutter.StageView view, Clutter.Frame frame);
 #else
-		[Version (since = "1.20")]
 		public signal void after_paint (Clutter.StageView view);
 		public signal void after_update (Clutter.StageView view);
 		public virtual signal void before_paint (Clutter.StageView view);
 		public signal void before_update (Clutter.StageView view);
 #endif
-#if HAS_MUTTER45
+#if HAS_MUTTER45 && !HAS_MUTTER47
 		public virtual signal void deactivate ();
 #endif
 #if HAS_MUTTER44
 		public virtual signal void paint_view (Clutter.StageView view, Cairo.Region redraw_clip, Clutter.Frame frame);
 		public signal void prepare_frame (Clutter.StageView view, Clutter.Frame frame);
 #else
-		[Version (since = "0.6")]
 		public virtual signal void deactivate ();
 		public virtual signal void paint_view (Clutter.StageView view, Cairo.Region redraw_clip);
 #if HAS_MUTTER43
@@ -7103,25 +6840,20 @@ namespace Clutter {
 #endif
 #endif
 	}
+#if !HAS_MUTTER47
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_stage_manager_get_type ()")]
-	[Version (since = "1.0")]
 	public class StageManager : GLib.Object {
 		[CCode (has_construct_function = false)]
 		protected StageManager ();
-		[Version (since = "0.8")]
 		public static unowned Clutter.StageManager get_default ();
-		[Version (since = "0.8")]
 		public unowned Clutter.Stage get_default_stage ();
-		[Version (since = "0.8")]
 		public GLib.SList<weak Clutter.Stage> list_stages ();
 		public unowned GLib.SList<Clutter.Stage> peek_stages ();
-		[Version (since = "0.8")]
 		public Clutter.Stage default_stage { get; }
-		[Version (since = "0.8")]
 		public virtual signal void stage_added (Clutter.Stage stage);
-		[Version (since = "0.8")]
 		public virtual signal void stage_removed (Clutter.Stage stage);
 	}
+#endif
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_stage_view_get_type ()")]
 	public class StageView : GLib.Object {
 		[CCode (has_construct_function = false)]
@@ -7138,10 +6870,17 @@ namespace Clutter {
 #else
 		public void get_layout (Cairo.RectangleInt rect);
 #endif
+#if HAS_MUTTER47
+		public void get_offscreen_transformation_matrix (Graphene.Matrix matrix);
+#else
 		public virtual void get_offscreen_transformation_matrix (Graphene.Matrix matrix);
+#endif
 		public unowned Cogl.Framebuffer get_onscreen ();
 		public float get_refresh_rate ();
 		public float get_scale ();
+#if HAS_MUTTER47
+		public Mtk.MonitorTransform get_transform ();
+#endif
 #if HAS_MUTTER44
 		public bool has_shadowfb ();
 #endif
@@ -7149,8 +6888,13 @@ namespace Clutter {
 #if HAS_MUTTER45
 		[NoWrapper]
 		public virtual Clutter.Frame new_frame ();
+#if HAS_MUTTER47
+		[NoWrapper]
+		public virtual void schedule_update ();
+#endif
 		public void schedule_update_now ();
 #endif
+#if !HAS_MUTTER47
 		[NoWrapper]
 #if HAS_MUTTER46
 		public virtual void setup_offscreen_transform (Cogl.Pipeline pipeline);
@@ -7162,19 +6906,32 @@ namespace Clutter {
 		public virtual void transform_rect_to_onscreen (Mtk.Rectangle src_rect, int dst_width, int dst_height, Mtk.Rectangle dst_rect);
 #else
 		public virtual void transform_rect_to_onscreen (Cairo.RectangleInt src_rect, int dst_width, int dst_height, Cairo.RectangleInt dst_rect);
+#endif
+#endif
+#if HAS_MUTTER47
+		[NoAccessorMethod]
+		public Clutter.ColorState color_state { owned get; set construct; }
 #endif
 		[NoAccessorMethod]
 		public Cogl.Framebuffer framebuffer { owned get; set construct; }
 		[NoAccessorMethod]
 		public string name { owned get; construct; }
+#if HAS_MUTTER47
+		[NoAccessorMethod]
+		public Clutter.ColorState output_color_state { owned get; set construct; }
+#else
 		[NoAccessorMethod]
 		public Cogl.Offscreen offscreen { owned get; construct; }
+#endif
 		[NoAccessorMethod]
 		public float refresh_rate { get; set construct; }
 		[NoAccessorMethod]
 		public float scale { get; set construct; }
 		[NoAccessorMethod]
 		public Clutter.Stage stage { owned get; construct; }
+#if HAS_MUTTER47
+		public uint transform { get; construct; }
+#endif
 		[NoAccessorMethod]
 		public bool use_shadowfb { get; construct; }
 		[NoAccessorMethod]
@@ -7185,15 +6942,13 @@ namespace Clutter {
 #endif
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_swipe_action_get_type ()")]
-	[Version (since = "1.8")]
 	public class SwipeAction : Clutter.GestureAction {
 		[CCode (has_construct_function = false, type = "ClutterAction*")]
 		public SwipeAction ();
 #if !HAS_MUTTER46
-		[Version (deprecated = true, deprecated_since = "1.14", since = "1.8")]
+		[Version (deprecated = true, deprecated_since = "1.14")]
 		public virtual signal void swept (Clutter.Actor actor, Clutter.SwipeDirection direction);
 #endif
-		[Version (since = "1.14")]
 #if HAS_MUTTER46
 		public virtual signal bool swipe (Clutter.Actor actor, Clutter.SwipeDirection direction);
 #else
@@ -7201,14 +6956,12 @@ namespace Clutter {
 #endif
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_tap_action_get_type ()")]
-	[Version (since = "1.14")]
 	public class TapAction : Clutter.GestureAction {
 		[CCode (has_construct_function = false, type = "ClutterAction*")]
 		public TapAction ();
 		public virtual signal void tap (Clutter.Actor actor);
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_text_get_type ()")]
-	[Version (since = "1.0")]
 #if HAS_MUTTER46
 	public class Text : Clutter.Actor, Atk.Implementor, Clutter.Animatable {
 #else
@@ -7216,35 +6969,38 @@ namespace Clutter {
 #endif
 		[CCode (has_construct_function = false, type = "ClutterActor*")]
 		public Text ();
-		[Version (since = "1.10")]
 		public int coords_to_position (float x, float y);
 		public void delete_chars (uint n_chars);
 		public bool delete_selection ();
 		[CCode (has_construct_function = false, type = "ClutterActor*")]
+#if HAS_MUTTER47
+		public Text.full (string font_name, string text, Cogl.Color color);
+#else
 		public Text.full (string font_name, string text, Clutter.Color color);
+#endif
 		public bool get_activatable ();
 		public unowned Pango.AttrList get_attributes ();
-		[Version (since = "1.10")]
 		public unowned Clutter.TextBuffer get_buffer ();
 		public string get_chars (ssize_t start_pos, ssize_t end_pos);
+#if HAS_MUTTER47
+		public Cogl.Color get_color ();
+		public Cogl.Color get_cursor_color ();
+#else
 		public Clutter.Color get_color ();
 		public Clutter.Color get_cursor_color ();
+#endif
 		public int get_cursor_position ();
-		[Version (since = "1.16")]
 		public Graphene.Rect get_cursor_rect ();
 		public uint get_cursor_size ();
 		public bool get_cursor_visible ();
 		public bool get_editable ();
 		public Pango.EllipsizeMode get_ellipsize ();
-		[Version (since = "1.2")]
 		public Pango.FontDescription get_font_description ();
 		public unowned string get_font_name ();
 		public Clutter.InputContentHintFlags get_input_hints ();
 		public Clutter.InputContentPurpose get_input_purpose ();
-		[Version (since = "0.6")]
 		public bool get_justify ();
 		public unowned Pango.Layout get_layout ();
-		[Version (since = "1.8")]
 		public void get_layout_offsets (out int x, out int y);
 		public Pango.Alignment get_line_alignment ();
 		public bool get_line_wrap ();
@@ -7252,11 +7008,18 @@ namespace Clutter {
 		public int get_max_length ();
 		public unichar get_password_char ();
 		public bool get_selectable ();
-		[Version (since = "1.8")]
+#if HAS_MUTTER47
+		public Cogl.Color get_selected_text_color ();
+#else
 		public Clutter.Color get_selected_text_color ();
+#endif
 		public string get_selection ();
 		public int get_selection_bound ();
+#if HAS_MUTTER47
+		public Cogl.Color get_selection_color ();
+#else
 		public Clutter.Color get_selection_color ();
+#endif
 		public bool get_single_line_mode ();
 		public unowned string get_text ();
 		public bool get_use_markup ();
@@ -7266,16 +7029,19 @@ namespace Clutter {
 		public bool position_to_coords (int position, out float x, out float y, out float line_height = null);
 		public void set_activatable (bool activatable);
 		public void set_attributes (Pango.AttrList? attrs);
-		[Version (since = "1.10")]
 		public void set_buffer (Clutter.TextBuffer buffer);
+#if HAS_MUTTER47
+		public void set_color (Cogl.Color color);
+		public void set_cursor_color (Cogl.Color? color);
+#else
 		public void set_color (Clutter.Color color);
 		public void set_cursor_color (Clutter.Color? color);
+#endif
 		public void set_cursor_position (int position);
 		public void set_cursor_size (int size);
 		public void set_cursor_visible (bool cursor_visible);
 		public void set_editable (bool editable);
 		public void set_ellipsize (Pango.EllipsizeMode mode);
-		[Version (since = "1.2")]
 		public void set_font_description (Pango.FontDescription font_desc);
 		public void set_font_name (string? font_name);
 		public void set_input_hints (Clutter.InputContentHintFlags hints);
@@ -7287,39 +7053,46 @@ namespace Clutter {
 		public void set_markup (string? markup);
 		public void set_max_length (int max);
 		public void set_password_char (unichar wc);
-		[Version (since = "1.2")]
 		public void set_preedit_string (string? preedit_str, Pango.AttrList? preedit_attrs, uint cursor_pos);
 		public void set_selectable (bool selectable);
-		[Version (since = "1.8")]
+#if HAS_MUTTER47
+		public void set_selected_text_color (Cogl.Color? color);
+#else
 		public void set_selected_text_color (Clutter.Color? color);
+#endif
 		public void set_selection (ssize_t start_pos, ssize_t end_pos);
 		public void set_selection_bound (int selection_bound);
+#if HAS_MUTTER47
+		public void set_selection_color (Cogl.Color? color);
+#else
 		public void set_selection_color (Clutter.Color? color);
+#endif
 		public void set_single_line_mode (bool single_line);
 		public void set_text (string? text);
 		public void set_use_markup (bool setting);
 		[CCode (cname = "clutter_text_activate")]
 		public bool try_activate ();
 		[CCode (has_construct_function = false, type = "ClutterActor*")]
-		[Version (since = "1.10")]
 		public Text.with_buffer (Clutter.TextBuffer buffer);
 		[CCode (has_construct_function = false, type = "ClutterActor*")]
 		public Text.with_text (string? font_name, string text);
 		public bool activatable { get; set; }
 		public Pango.AttrList attributes { get; set; }
-		[Version (since = "1.8")]
 		public Clutter.TextBuffer buffer { get; set; }
+#if HAS_MUTTER47
+		public Cogl.Color color { get; set; }
+		public Cogl.Color cursor_color { get; set; }
+#else
 		public Clutter.Color color { get; set; }
 		public Clutter.Color cursor_color { get; set; }
+#endif
 		[NoAccessorMethod]
 		public bool cursor_color_set { get; }
-		[Version (since = "1.12")]
 		public int cursor_position { get; set; }
 		public int cursor_size { get; set; }
 		public bool cursor_visible { get; set; }
 		public bool editable { get; set; }
 		public Pango.EllipsizeMode ellipsize { get; set; }
-		[Version (since = "1.2")]
 		public Pango.FontDescription font_description { owned get; set; }
 		public string font_name { get; set; }
 		public Clutter.InputContentHintFlags input_hints { get; set; }
@@ -7332,36 +7105,39 @@ namespace Clutter {
 		public uint password_char { get; set; }
 #if !HAS_MUTTER46
 		[NoAccessorMethod]
-		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
+		[Version (deprecated = true, deprecated_since = "1.12")]
 		public int position { get; set; }
 #endif
 		public bool selectable { get; set; }
-		[Version (since = "1.8")]
+#if HAS_MUTTER47
+		public Cogl.Color selected_text_color { get; set; }
+#else
 		public Clutter.Color selected_text_color { get; set; }
+#endif
 		[NoAccessorMethod]
-		[Version (since = "1.8")]
 		public bool selected_text_color_set { get; }
 		public int selection_bound { get; set; }
+#if HAS_MUTTER47
+		public Cogl.Color selection_color { get; set; }
+#else
 		public Clutter.Color selection_color { get; set; }
+#endif
 		[NoAccessorMethod]
 		public bool selection_color_set { get; }
 		public bool single_line_mode { get; set; }
 		public string text { get; set; }
 		public bool use_markup { get; set; }
 		public virtual signal void activate ();
-		[Version (since = "1.16")]
 		public virtual signal void cursor_changed ();
 #if !HAS_MUTTER46
-		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
+		[Version (deprecated = true, deprecated_since = "1.16")]
 		public virtual signal void cursor_event (Graphene.Rect rect);
 #endif
 		[HasEmitter]
-		[Version (since = "1.2")]
 		public signal void delete_text (int start_pos, int end_pos);
 		public virtual signal void text_changed ();
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_text_buffer_get_type ()")]
-	[Version (since = "1.10")]
 	public class TextBuffer : GLib.Object {
 		[CCode (has_construct_function = false)]
 		public TextBuffer ();
@@ -7387,10 +7163,13 @@ namespace Clutter {
 		public virtual signal void inserted_text (uint position, string chars, uint n_chars);
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_text_node_get_type ()")]
-	[Version (since = "1.10")]
 	public class TextNode : Clutter.PaintNode {
 		[CCode (has_construct_function = false, type = "ClutterPaintNode*")]
+#if HAS_MUTTER47
+		public TextNode (Pango.Layout? layout, Cogl.Color? color);
+#else
 		public TextNode (Pango.Layout? layout, Clutter.Color? color);
+#endif
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_texture_content_get_type ()")]
 	public sealed class TextureContent : GLib.Object, Clutter.Content {
@@ -7405,122 +7184,87 @@ namespace Clutter {
 		public unowned Cogl.Texture get_texture ();
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_texture_node_get_type ()")]
-	[Version (since = "1.10")]
 	public class TextureNode : Clutter.PipelineNode {
 		[CCode (has_construct_function = false, type = "ClutterPaintNode*")]
+#if HAS_MUTTER47
+		public TextureNode (Cogl.Texture texture, Cogl.Color? color, Clutter.ScalingFilter min_filter, Clutter.ScalingFilter mag_filter);
+#else
 		public TextureNode (Cogl.Texture texture, Clutter.Color? color, Clutter.ScalingFilter min_filter, Clutter.ScalingFilter mag_filter);
+#endif
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_timeline_get_type ()")]
-	[Version (since = "0.2")]
 #if HAS_MUTTER46
 	public class Timeline : GLib.Object {
 #else
 	public class Timeline : GLib.Object, Clutter.Scriptable {
 #endif
 		[CCode (has_construct_function = false)]
-		[Version (since = "0.6")]
 #if HAS_MUTTER46
 		protected Timeline ();
 #else
 		public Timeline (uint duration_ms);
 #endif
-		[Version (since = "1.14")]
 		public void add_marker (string marker_name, double progress);
-		[Version (since = "0.8")]
 		public void add_marker_at_time (string marker_name, uint msecs);
 		public void advance (uint msecs);
-		[Version (since = "0.8")]
 		public void advance_to_marker (string marker_name);
 		[CCode (has_construct_function = false)]
 		public Timeline.for_actor (Clutter.Actor actor, uint duration_ms);
 		[CCode (has_construct_function = false)]
 		public Timeline.for_frame_clock (Clutter.FrameClock frame_clock, uint duration_ms);
 		public unowned Clutter.Actor get_actor ();
-		[Version (since = "1.6")]
 		public bool get_auto_reverse ();
-		[Version (since = "1.12")]
 		public bool get_cubic_bezier_progress (out Graphene.Point c_1, out Graphene.Point c_2);
-		[Version (since = "1.10")]
 		public int get_current_repeat ();
-		[Version (since = "0.4")]
 		public uint get_delay ();
-		[Version (since = "0.6")]
 		public uint get_delta ();
-		[Version (since = "0.6")]
 		public Clutter.TimelineDirection get_direction ();
-		[Version (since = "0.6")]
 		public uint get_duration ();
-		[Version (since = "1.10")]
 		public int64 get_duration_hint ();
 		public uint get_elapsed_time ();
-		[Version (since = "0.6")]
 		public double get_progress ();
-		[Version (since = "1.10")]
 		public Clutter.AnimationMode get_progress_mode ();
-		[Version (since = "1.10")]
 		public int get_repeat_count ();
-		[Version (since = "1.12")]
 		public bool get_step_progress (out int n_steps, out Clutter.StepMode step_mode);
-		[Version (since = "0.8")]
 		public bool has_marker (string marker_name);
 		public bool is_playing ();
 		[CCode (array_length = true, array_length_pos = 1.1, array_length_type = "gsize", array_null_terminated = true)]
-		[Version (since = "0.8")]
 		public string[] list_markers (int msecs);
 		public void pause ();
-		[Version (since = "0.8")]
 		public void remove_marker (string marker_name);
 		public void rewind ();
 		public void set_actor (Clutter.Actor? actor);
-		[Version (since = "1.6")]
 		public void set_auto_reverse (bool reverse);
-		[Version (since = "1.12")]
 		public void set_cubic_bezier_progress (Graphene.Point c_1, Graphene.Point c_2);
-		[Version (since = "0.4")]
 		public void set_delay (uint msecs);
-		[Version (since = "0.6")]
 		public void set_direction (Clutter.TimelineDirection direction);
-		[Version (since = "0.6")]
 		public void set_duration (uint msecs);
 		public void set_frame_clock (Clutter.FrameClock frame_clock);
-		[Version (since = "1.10")]
 		public void set_progress_func (owned Clutter.TimelineProgressFunc? func);
-		[Version (since = "1.10")]
 		public void set_progress_mode (Clutter.AnimationMode mode);
-		[Version (since = "1.10")]
 		public void set_repeat_count (int count);
-		[Version (since = "1.12")]
 		public void set_step_progress (int n_steps, Clutter.StepMode step_mode);
 		public void skip (uint msecs);
 		public void start ();
 		public void stop ();
 		public Clutter.Actor actor { get; set construct; }
-		[Version (since = "1.6")]
 		public bool auto_reverse { get; set; }
-		[Version (since = "0.4")]
 		public uint delay { get; set; }
-		[Version (since = "0.6")]
 		public Clutter.TimelineDirection direction { get; set; }
-		[Version (since = "0.6")]
 		public uint duration { get; set; }
 		[NoAccessorMethod]
 		public Clutter.FrameClock frame_clock { owned get; set construct; }
-		[Version (since = "1.10")]
 		public Clutter.AnimationMode progress_mode { get; set; }
-		[Version (since = "1.10")]
 		public int repeat_count { get; set; }
 		public virtual signal void completed ();
-		[Version (since = "0.8")]
 		public virtual signal void marker_reached (string marker_name, int msecs);
 		public virtual signal void new_frame (int msecs);
 		public virtual signal void paused ();
 		public virtual signal void started ();
-		[Version (since = "1.12")]
 		public virtual signal void stopped (bool is_finished);
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", has_type_id = false)]
 	[Compact]
-	[Version (since = "1.10")]
 	public class TouchEvent : Clutter.Event {
 #if !HAS_MUTTER45
 		public double axes;
@@ -7557,7 +7301,6 @@ namespace Clutter {
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", has_type_id = false)]
 	[Compact]
-	[Version (since = "1.24")]
 	public class TouchpadPinchEvent : Clutter.Event {
 #if !HAS_MUTTER45
 		public float angle_delta;
@@ -7581,7 +7324,6 @@ namespace Clutter {
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", has_type_id = false)]
 	[Compact]
-	[Version (since = "1.24")]
 	public class TouchpadSwipeEvent : Clutter.Event {
 #if !HAS_MUTTER45
 		public float dx;
@@ -7607,7 +7349,6 @@ namespace Clutter {
 		public TransformNode (Graphene.Matrix projection);
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_transition_get_type ()")]
-	[Version (since = "1.10")]
 #if HAS_MUTTER46
 	public abstract class Transition : Clutter.Timeline {
 #else
@@ -7625,18 +7366,15 @@ namespace Clutter {
 		public unowned Clutter.Interval get_interval ();
 		public bool get_remove_on_complete ();
 		public void set_animatable (Clutter.Animatable? animatable);
-		[Version (since = "1.12")]
 		public void set_from_value (GLib.Value value);
 		public void set_interval (Clutter.Interval? interval);
 		public void set_remove_on_complete (bool remove_complete);
-		[Version (since = "1.12")]
 		public void set_to_value (GLib.Value value);
 		public Clutter.Animatable animatable { get; set; }
 		public Clutter.Interval interval { get; set; }
 		public bool remove_on_complete { get; set; }
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_transition_group_get_type ()")]
-	[Version (since = "1.12")]
 #if HAS_MUTTER46
 	public sealed class TransitionGroup : Clutter.Transition {
 #else
@@ -7668,7 +7406,6 @@ namespace Clutter {
 		public Clutter.Seat seat { get; construct; }
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_zoom_action_get_type ()")]
-	[Version (since = "1.12")]
 	public class ZoomAction : Clutter.GestureAction {
 		[CCode (has_construct_function = false, type = "ClutterAction*")]
 		public ZoomAction ();
@@ -7678,61 +7415,47 @@ namespace Clutter {
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", type_cname = "ClutterAnimatableInterface", type_id = "clutter_animatable_get_type ()")]
 	public interface Animatable : GLib.Object {
-		[Version (since = "1.4")]
 		public abstract unowned GLib.ParamSpec find_property (string property_name);
 		public abstract unowned Clutter.Actor get_actor ();
-		[Version (since = "1.4")]
 		public abstract void get_initial_state (string property_name, GLib.Value value);
-		[Version (since = "1.8")]
 		public abstract bool interpolate_value (string property_name, Clutter.Interval interval, double progress, out GLib.Value value);
-		[Version (since = "1.4")]
 		public abstract void set_final_state (string property_name, GLib.Value value);
 	}
 #if HAS_MUTTER46
 	[CCode (cheader_filename = "clutter/clutter.h")]
 #else
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_container_get_type ()")]
-	[Version (since = "0.4")]
 #endif
 	public interface Container : GLib.Object {
 		public void add (params Clutter.Actor[] actors);
 #if !HAS_MUTTER46
 		[CCode (vfunc_name = "add")]
-		[Version (deprecated = true, deprecated_since = "1.10", since = "0.4")]
+		[Version (deprecated = true, deprecated_since = "1.10")]
 		public abstract void add_actor (Clutter.Actor actor);
-		[Version (since = "0.8")]
 		public void child_get (Clutter.Actor actor, ...);
-		[Version (since = "0.8")]
 		public void child_get_property (Clutter.Actor child, string property, GLib.Value value);
-		[Version (since = "0.8")]
 		public void child_set (Clutter.Actor actor, ...);
-		[Version (since = "0.8")]
 		public void child_set_property (Clutter.Actor child, string property, GLib.Value value);
-		[Version (since = "1.2")]
 		public virtual void create_child_meta (Clutter.Actor actor);
-		[Version (since = "1.2")]
 		public virtual void destroy_child_meta (Clutter.Actor actor);
-		[Version (since = "0.6")]
 		public unowned Clutter.Actor find_child_by_name (string child_name);
 #endif
 		[CCode (cname = "clutter_container_class_find_child_property")]
 		public class unowned GLib.ParamSpec find_child_property (string property_name);
 #if !HAS_MUTTER46
-		[Version (since = "0.8")]
 		public virtual unowned Clutter.ChildMeta get_child_meta (Clutter.Actor actor);
 #endif
 		[CCode (cname = "clutter_container_class_list_child_properties")]
 		public class unowned GLib.ParamSpec[] list_child_properties ();
 #if !HAS_MUTTER46
-		[Version (deprecated = true, deprecated_since = "1.10", since = "0.4")]
+		[Version (deprecated = true, deprecated_since = "1.10")]
 		public void remove (...);
 		[CCode (vfunc_name = "remove")]
-		[Version (deprecated = true, deprecated_since = "1.10", since = "0.4")]
+		[Version (deprecated = true, deprecated_since = "1.10")]
 		public abstract void remove_actor (Clutter.Actor actor);
 		public virtual signal void actor_added (Clutter.Actor actor);
 		public virtual signal void actor_removed (Clutter.Actor actor);
 		[HasEmitter]
-		[Version (since = "0.8")]
 		public virtual signal void child_notify (Clutter.Actor child, GLib.ParamSpec pspec);
 #endif
 	}
@@ -7748,7 +7471,6 @@ namespace Clutter {
 	}
 #if !HAS_MUTTER46
 	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_scriptable_get_type ()")]
-	[Version (since = "0.6")]
 	public interface Scriptable : GLib.Object {
 		public abstract unowned string get_id ();
 		public abstract bool parse_custom_node (Clutter.Script script, GLib.Value value, string name, Json.Node node);
@@ -7762,54 +7484,32 @@ namespace Clutter {
 		public float y1;
 		public float x2;
 		public float y2;
-		[Version (since = "1.12")]
 		public static Clutter.ActorBox? alloc ();
-		[Version (since = "1.2")]
 		public static void clamp_to_pixel (ref Clutter.ActorBox box);
-		[Version (since = "1.0")]
 		public bool contains (float x, float y);
-		[Version (since = "1.0")]
 		public Clutter.ActorBox? copy ();
-		[Version (since = "1.0")]
 		public bool equal (Clutter.ActorBox box_b);
-		[Version (since = "1.0")]
 		public void free ();
-		[Version (since = "1.0")]
 		public float get_area ();
-		[Version (since = "1.0")]
 		public float get_height ();
-		[Version (since = "1.0")]
 		public void get_origin (out float x, out float y);
-		[Version (since = "1.0")]
 		public void get_size (out float width, out float height);
-		[Version (since = "1.0")]
 		public float get_width ();
-		[Version (since = "1.0")]
 		public float get_x ();
-		[Version (since = "1.0")]
 		public float get_y ();
-		[Version (since = "1.10")]
 		public unowned Clutter.ActorBox? init (float x_1, float y_1, float x_2, float y_2);
-		[Version (since = "1.10")]
 		public void init_rect (float x, float y, float width, float height);
-		[Version (since = "1.2")]
 		public Clutter.ActorBox interpolate (Clutter.ActorBox final, double progress);
 		public bool is_initialized ();
-		[Version (since = "1.6")]
 		public void scale (float scale);
-		[Version (since = "1.6")]
 		public void set_origin (float x, float y);
-		[Version (since = "1.6")]
 		public void set_size (float width, float height);
-		[Version (since = "1.4")]
 		public Clutter.ActorBox union (Clutter.ActorBox b);
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", has_type_id = false)]
-	[Version (since = "1.10")]
 	public struct ActorIter {
 		public void destroy ();
 		public void init (Clutter.Actor root);
-		[Version (since = "1.12")]
 		public bool is_valid ();
 		public bool next (out unowned Clutter.Actor? child);
 		public bool prev (out unowned Clutter.Actor? child);
@@ -7826,6 +7526,7 @@ namespace Clutter {
 #endif
 #endif
 	}
+#if !HAS_MUTTER47
 	[CCode (cheader_filename = "clutter/clutter.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "clutter_color_get_type ()")]
 	public struct Color {
 		public uint8 red;
@@ -7835,16 +7536,12 @@ namespace Clutter {
 #if !HAS_MUTTER46
 		public Clutter.Color add (Clutter.Color b);
 #endif
-		[Version (since = "1.12")]
 		public static Clutter.Color? alloc ();
-		[Version (since = "0.2")]
 		public Clutter.Color? copy ();
 #if !HAS_MUTTER46
 		public Clutter.Color darken ();
 #endif
-		[Version (since = "0.2")]
 		public bool equal (Clutter.Color v2);
-		[Version (since = "0.2")]
 		public void free ();
 		[CCode (cname = "_vala_clutter_color_from_hls")]
 		public static Clutter.Color? from_hls (float hue, float luminance, float saturation) {
@@ -7859,7 +7556,6 @@ namespace Clutter {
 			return color;
 		}
 		[CCode (cname = "clutter_color_new")]
-		[Version (since = "0.8")]
 		public static Clutter.Color? from_rgba (uint8 red = 0, uint8 green = 0, uint8 blue = 0, uint8 alpha = 0);
 		[CCode (cname = "_vala_clutter_color_from_string")]
 		public static Clutter.Color? from_string (string str) {
@@ -7868,21 +7564,16 @@ namespace Clutter {
 			return color;
 		}
 #if !HAS_MUTTER46
-		[Version (since = "1.6")]
 		public static unowned Clutter.Color? get_static (Clutter.StaticColor color);
 #endif
-		[Version (since = "1.0")]
 		public uint hash ();
-		[Version (since = "1.12")]
 		public unowned Clutter.Color? init (uint8 red = 0, uint8 green = 0, uint8 blue = 0, uint8 alpha = 0);
 		[CCode (cname = "clutter_color_from_hls")]
 		public void init_from_hls (float hue, float luminance, float saturation);
 		[CCode (cname = "clutter_color_from_pixel")]
 		public void init_from_pixel (uint32 pixel);
 		[CCode (cname = "clutter_color_from_string")]
-		[Version (since = "1.0")]
 		public bool init_from_string (string str);
-		[Version (since = "1.6")]
 		public Clutter.Color interpolate (Clutter.Color final, double progress);
 #if !HAS_MUTTER46
 		public Clutter.Color lighten ();
@@ -7895,12 +7586,11 @@ namespace Clutter {
 #endif
 		public void to_hls (out float hue, out float luminance, out float saturation);
 		public uint32 to_pixel ();
-		[Version (since = "0.2")]
 		public string to_string ();
 	}
+#endif
 #if !HAS_MUTTER46
 	[CCode (cheader_filename = "clutter/clutter.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "clutter_knot_get_type ()")]
-	[Version (since = "0.2")]
 	public struct Knot {
 		public int x;
 		public int y;
@@ -7910,7 +7600,6 @@ namespace Clutter {
 	}
 #endif
 	[CCode (cheader_filename = "clutter/clutter.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "clutter_margin_get_type ()")]
-	[Version (since = "1.10")]
 	public struct Margin {
 		public float left;
 		public float right;
@@ -7920,38 +7609,23 @@ namespace Clutter {
 		public void free ();
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "clutter_paint_volume_get_type ()")]
-	[Version (since = "1.4")]
 	public struct PaintVolume {
-		[Version (since = "1.6")]
 		public Clutter.PaintVolume? copy ();
-		[Version (since = "1.6")]
 		public void free ();
-		[Version (since = "1.6")]
 		public float get_depth ();
-		[Version (since = "1.6")]
 		public float get_height ();
-		[Version (since = "1.6")]
 		public Graphene.Point3D get_origin ();
-		[Version (since = "1.6")]
 		public float get_width ();
-		[Version (since = "1.6")]
 		public void set_depth (float depth);
-		[Version (since = "1.6")]
 		public bool set_from_allocation (Clutter.Actor actor);
-		[Version (since = "1.6")]
 		public void set_height (float height);
-		[Version (since = "1.6")]
 		public void set_origin (Graphene.Point3D origin);
-		[Version (since = "1.6")]
 		public void set_width (float width);
-		[Version (since = "1.6")]
 		public void union (Clutter.PaintVolume another_pv);
-		[Version (since = "1.10")]
 		public void union_box (Clutter.ActorBox box);
 	}
 #if !HAS_MUTTER46
 	[CCode (cheader_filename = "clutter/clutter.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "clutter_path_node_get_type ()")]
-	[Version (since = "1.0")]
 	public struct PathNode {
 		public Clutter.PathNodeType type;
 		[CCode (array_length = false)]
@@ -7962,13 +7636,18 @@ namespace Clutter {
 	}
 #endif
 	[CCode (cheader_filename = "clutter/clutter.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "clutter_perspective_get_type ()")]
-	[Version (since = "0.4")]
 	public struct Perspective {
 		public float fovy;
 		public float aspect;
 		public float z_near;
 		public float z_far;
 	}
+#if HAS_MUTTER47
+	[CCode (cheader_filename = "clutter/clutter.h")]
+	[SimpleType]
+	public struct PipelineGroup {
+	}
+#endif
 	[CCode (cheader_filename = "clutter/clutter.h", has_type_id = false)]
 	public struct PointerA11ySettings {
 		public Clutter.PointerA11yFlags controls;
@@ -7982,11 +7661,21 @@ namespace Clutter {
 		public int dwell_delay;
 		public int dwell_threshold;
 	}
+#if HAS_MUTTER47
+	[CCode (cheader_filename = "clutter/clutter.h", has_type_id = false)]
+	public struct TextureVertex {
+		public float x;
+		public float y;
+		public float z;
+		public float tx;
+		public float ty;
+		public Cogl.Color color;
+	}
+#endif
 #if HAS_MUTTER46
 	[CCode (cheader_filename = "clutter/clutter.h")]
 #else
 	[CCode (cheader_filename = "clutter/clutter.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "clutter_units_get_type ()")]
-	[Version (since = "1.0")]
 #endif
 	public struct Units {
 #if !HAS_MUTTER46
@@ -8015,13 +7704,13 @@ namespace Clutter {
 #endif
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_ACTOR_ALIGN_", type_id = "clutter_actor_align_get_type ()")]
-	[Version (since = "1.10")]
 	public enum ActorAlign {
 		FILL,
 		START,
 		CENTER,
 		END
 	}
+#if !HAS_MUTTER47
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_ACTOR_", type_id = "clutter_actor_flags_get_type ()")]
 	[Flags]
 	public enum ActorFlags {
@@ -8031,15 +7720,14 @@ namespace Clutter {
 		VISIBLE,
 		NO_LAYOUT
 	}
+#endif
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_ALIGN_", type_id = "clutter_align_axis_get_type ()")]
-	[Version (since = "1.4")]
 	public enum AlignAxis {
 		X_AXIS,
 		Y_AXIS,
 		BOTH
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_", type_id = "clutter_animation_mode_get_type ()")]
-	[Version (since = "1.0")]
 	public enum AnimationMode {
 		CUSTOM_MODE,
 		LINEAR,
@@ -8085,7 +7773,6 @@ namespace Clutter {
 	}
 #if !HAS_MUTTER46
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_BIN_ALIGNMENT_", type_id = "clutter_bin_alignment_get_type ()")]
-	[Version (since = "1.2")]
 	public enum BinAlignment {
 		[Version (deprecated = true)]
 		FIXED,
@@ -8099,7 +7786,6 @@ namespace Clutter {
 	}
 #endif
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_BIND_", type_id = "clutter_bind_coordinate_get_type ()")]
-	[Version (since = "1.4")]
 	public enum BindCoordinate {
 		X,
 		Y,
@@ -8111,7 +7797,6 @@ namespace Clutter {
 	}
 #if !HAS_MUTTER46
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_BOX_ALIGNMENT_", type_id = "clutter_box_alignment_get_type ()")]
-	[Version (since = "1.2")]
 	public enum BoxAlignment {
 		START,
 		END,
@@ -8126,13 +7811,16 @@ namespace Clutter {
 #if HAS_MUTTER43
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_COLORSPACE_", type_id = "clutter_colorspace_get_type ()")]
 	public enum Colorspace {
+#if HAS_MUTTER47
+		DEFAULT,
+#else
 		UNKNOWN,
+#endif
 		SRGB,
 		BT2020
 	}
 #endif
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_CONTENT_GRAVITY_", type_id = "clutter_content_gravity_get_type ()")]
-	[Version (since = "1.10")]
 	public enum ContentGravity {
 		TOP_LEFT,
 		TOP,
@@ -8148,7 +7836,6 @@ namespace Clutter {
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_REPEAT_", type_id = "clutter_content_repeat_get_type ()")]
 	[Flags]
-	[Version (since = "1.12")]
 	public enum ContentRepeat {
 		NONE,
 		X_AXIS,
@@ -8187,12 +7874,14 @@ namespace Clutter {
 #if HAS_MUTTER45
 		GRABS,
 		FRAME_CLOCK,
+#if HAS_MUTTER47
+		GESTURES,
+#endif
 #endif
 		DETAILED_TRACE
 	}
 #if !HAS_MUTTER46
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_DRAG_", type_id = "clutter_drag_axis_get_type ()")]
-	[Version (since = "1.4")]
 	public enum DragAxis {
 		AXIS_NONE,
 		X_AXIS,
@@ -8220,9 +7909,16 @@ namespace Clutter {
 		ACTOR_DIRTY,
 		BYPASS_EFFECT
 	}
+#if HAS_MUTTER47
+	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_ENCODING_REQUIRED_FORMAT_", type_id = "clutter_encoding_required_format_get_type ()")]
+	public enum EncodingRequiredFormat {
+		UINT8,
+		UINT10,
+		FP16
+	}
+#endif
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_EVENT_", type_id = "clutter_event_flags_get_type ()")]
 	[Flags]
-	[Version (since = "0.6")]
 	public enum EventFlags {
 		NONE,
 		FLAG_SYNTHETIC,
@@ -8240,7 +7936,6 @@ namespace Clutter {
 		BUBBLE
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_", type_id = "clutter_event_type_get_type ()")]
-	[Version (since = "0.4")]
 	public enum EventType {
 		NOTHING,
 		KEY_PRESS,
@@ -8274,14 +7969,12 @@ namespace Clutter {
 #if !HAS_MUTTER43
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_FEATURE_", type_id = "clutter_feature_flags_get_type ()")]
 	[Flags]
-	[Version (since = "0.4")]
 	public enum FeatureFlags {
 		SHADERS_GLSL
 	}
 #endif
 #if !HAS_MUTTER46
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_FLOW_", type_id = "clutter_flow_orientation_get_type ()")]
-	[Version (since = "1.2")]
 	public enum FlowOrientation {
 		HORIZONTAL,
 		VERTICAL
@@ -8307,8 +8000,24 @@ namespace Clutter {
 		PENDING_PRESENTED,
 		IDLE
 	}
+#if HAS_MUTTER47
+	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_", type_id = "clutter_gesture_state_get_type ()")]
+	public enum GestureState {
+		[CCode (cname = "CLUTTER_GESTURE_STATE_WAITING")]
+		WAITING,
+		[CCode (cname = "CLUTTER_GESTURE_STATE_POSSIBLE")]
+		POSSIBLE,
+		[CCode (cname = "CLUTTER_GESTURE_STATE_RECOGNIZING")]
+		RECOGNIZING,
+		[CCode (cname = "CLUTTER_GESTURE_STATE_COMPLETED")]
+		COMPLETED,
+		[CCode (cname = "CLUTTER_GESTURE_STATE_CANCELLED")]
+		CANCELLED,
+		[CCode (cname = "CLUTTER_N_GESTURE_STATES")]
+		CLUTTER_N_GESTURE_STATES
+	}
+#endif
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_GESTURE_TRIGGER_EDGE_", type_id = "clutter_gesture_trigger_edge_get_type ()")]
-	[Version (since = "1.18")]
 	public enum GestureTriggerEdge {
 		NONE,
 		AFTER,
@@ -8324,7 +8033,7 @@ namespace Clutter {
 	}
 #if !HAS_MUTTER45
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_GRAVITY_", type_id = "clutter_gravity_get_type ()")]
-	[Version (deprecated = true, deprecated_since = "1.22", since = "0.2")]
+	[Version (deprecated = true, deprecated_since = "1.22")]
 	public enum Gravity {
 		NONE,
 		NORTH,
@@ -8339,7 +8048,6 @@ namespace Clutter {
 	}
 #endif
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_GRID_POSITION_", type_id = "clutter_grid_position_get_type ()")]
-	[Version (since = "1.12")]
 	public enum GridPosition {
 		LEFT,
 		RIGHT,
@@ -8347,7 +8055,6 @@ namespace Clutter {
 		BOTTOM
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_INPUT_AXIS_", type_id = "clutter_input_axis_get_type ()")]
-	[Version (since = "1.6")]
 	public enum InputAxis {
 		IGNORE,
 		X,
@@ -8434,7 +8141,6 @@ namespace Clutter {
 		FINGER
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_INPUT_DEVICE_TOOL_", type_id = "clutter_input_device_tool_type_get_type ()")]
-	[Version (since = "1.28")]
 	public enum InputDeviceToolType {
 		NONE,
 		PEN,
@@ -8446,7 +8152,6 @@ namespace Clutter {
 		LENS
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_", type_id = "clutter_input_device_type_get_type ()")]
-	[Version (since = "1.0")]
 	public enum InputDeviceType {
 		POINTER_DEVICE,
 		KEYBOARD_DEVICE,
@@ -8462,7 +8167,6 @@ namespace Clutter {
 		N_DEVICE_TYPES
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_INPUT_MODE_", type_id = "clutter_input_mode_get_type ()")]
-	[Version (since = "1.6")]
 	public enum InputMode {
 		LOGICAL,
 		PHYSICAL,
@@ -8476,7 +8180,7 @@ namespace Clutter {
 	}
 #if !HAS_MUTTER45
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_INTERPOLATION_", type_id = "clutter_interpolation_get_type ()")]
-	[Version (deprecated = true, deprecated_since = "1.22", since = "1.2")]
+	[Version (deprecated = true, deprecated_since = "1.22")]
 	public enum Interpolation {
 		LINEAR,
 		CUBIC
@@ -8488,7 +8192,6 @@ namespace Clutter {
 		PRESSED
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_LONG_PRESS_", type_id = "clutter_long_press_state_get_type ()")]
-	[Version (since = "1.8")]
 	public enum LongPressState {
 		QUERY,
 		ACTIVATE,
@@ -8496,7 +8199,6 @@ namespace Clutter {
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_", type_id = "clutter_modifier_type_get_type ()")]
 	[Flags]
-	[Version (since = "0.4")]
 	public enum ModifierType {
 		SHIFT_MASK,
 		LOCK_MASK,
@@ -8533,14 +8235,12 @@ namespace Clutter {
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_OFFSCREEN_REDIRECT_", type_id = "clutter_offscreen_redirect_get_type ()")]
 	[Flags]
-	[Version (since = "1.8")]
 	public enum OffscreenRedirect {
 		AUTOMATIC_FOR_OPACITY,
 		ALWAYS,
 		ON_IDLE
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_ORIENTATION_", type_id = "clutter_orientation_get_type ()")]
-	[Version (since = "1.12")]
 	public enum Orientation {
 		HORIZONTAL,
 		VERTICAL
@@ -8554,7 +8254,6 @@ namespace Clutter {
 		CLEAR
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_PAN_", type_id = "clutter_pan_axis_get_type ()")]
-	[Version (since = "1.12")]
 	public enum PanAxis {
 		AXIS_NONE,
 		X_AXIS,
@@ -8563,7 +8262,6 @@ namespace Clutter {
 	}
 #if !HAS_MUTTER46
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_PATH_", type_id = "clutter_path_node_type_get_type ()")]
-	[Version (since = "1.0")]
 	public enum PathNodeType {
 		MOVE_TO,
 		LINE_TO,
@@ -8580,12 +8278,18 @@ namespace Clutter {
 		PICKING
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_PICK_", type_id = "clutter_pick_mode_get_type ()")]
-	[Version (since = "1.0")]
 	public enum PickMode {
 		NONE,
 		REACTIVE,
 		ALL
 	}
+#if HAS_MUTTER47
+	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_PIPELINE_CAPABILITY_COLOR_", type_id = "clutter_pipeline_capability_get_type ()")]
+	public enum PipelineCapability {
+		STATE;
+		public static GLib.Quark quark ();
+	}
+#endif
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_A11Y_DWELL_CLICK_TYPE_", type_id = "clutter_pointer_a11y_dwell_click_type_get_type ()")]
 	public enum PointerA11yDwellClickType {
 		NONE,
@@ -8627,20 +8331,17 @@ namespace Clutter {
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_REPAINT_FLAGS_", type_id = "clutter_repaint_flags_get_type ()")]
 	[Flags]
-	[Version (since = "1.10")]
 	public enum RepaintFlags {
 		PRE_PAINT,
 		POST_PAINT
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_REQUEST_", type_id = "clutter_request_mode_get_type ()")]
-	[Version (since = "0.8")]
 	public enum RequestMode {
 		HEIGHT_FOR_WIDTH,
 		WIDTH_FOR_HEIGHT,
 		CONTENT_SIZE
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_", type_id = "clutter_rotate_axis_get_type ()")]
-	[Version (since = "0.4")]
 	public enum RotateAxis {
 		X_AXIS,
 		Y_AXIS,
@@ -8648,21 +8349,19 @@ namespace Clutter {
 	}
 #if !HAS_MUTTER45
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_ROTATE_", type_id = "clutter_rotate_direction_get_type ()")]
-	[Version (deprecated = true, deprecated_since = "1.22", since = "0.4")]
+	[Version (deprecated = true, deprecated_since = "1.22")]
 	public enum RotateDirection {
 		CW,
 		CCW
 	}
 #endif
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_SCALING_FILTER_", type_id = "clutter_scaling_filter_get_type ()")]
-	[Version (since = "1.10")]
 	public enum ScalingFilter {
 		LINEAR,
 		NEAREST,
 		TRILINEAR
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_SCROLL_", type_id = "clutter_scroll_direction_get_type ()")]
-	[Version (since = "0.4")]
 	public enum ScrollDirection {
 		UP,
 		DOWN,
@@ -8672,23 +8371,22 @@ namespace Clutter {
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_SCROLL_FINISHED_", type_id = "clutter_scroll_finish_flags_get_type ()")]
 	[Flags]
-	[Version (since = "1.26")]
 	public enum ScrollFinishFlags {
 		NONE,
 		HORIZONTAL,
 		VERTICAL
 	}
+#if !HAS_MUTTER47
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_SCROLL_", type_id = "clutter_scroll_mode_get_type ()")]
 	[Flags]
-	[Version (since = "1.12")]
 	public enum ScrollMode {
 		NONE,
 		HORIZONTALLY,
 		VERTICALLY,
 		BOTH
 	}
+#endif
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_SCROLL_SOURCE_", type_id = "clutter_scroll_source_get_type ()")]
-	[Version (since = "1.26")]
 	public enum ScrollSource {
 		UNKNOWN,
 		WHEEL,
@@ -8696,13 +8394,11 @@ namespace Clutter {
 		CONTINUOUS
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_", type_id = "clutter_shader_type_get_type ()")]
-	[Version (since = "1.4")]
 	public enum ShaderType {
 		VERTEX_SHADER,
 		FRAGMENT_SHADER
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_SNAP_EDGE_", type_id = "clutter_snap_edge_get_type ()")]
-	[Version (since = "1.6")]
 	public enum SnapEdge {
 		TOP,
 		RIGHT,
@@ -8711,7 +8407,6 @@ namespace Clutter {
 	}
 #if !HAS_MUTTER46
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_COLOR_", type_id = "clutter_static_color_get_type ()")]
-	[Version (since = "1.6")]
 	public enum StaticColor {
 		WHITE,
 		BLACK,
@@ -8761,14 +8456,12 @@ namespace Clutter {
 	}
 #endif
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_STEP_MODE_", type_id = "clutter_step_mode_get_type ()")]
-	[Version (since = "1.12")]
 	public enum StepMode {
 		START,
 		END
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_SWIPE_DIRECTION_", type_id = "clutter_swipe_direction_get_type ()")]
 	[Flags]
-	[Version (since = "1.8")]
 	public enum SwipeDirection {
 		UP,
 		DOWN,
@@ -8776,7 +8469,6 @@ namespace Clutter {
 		RIGHT
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_TEXT_DIRECTION_", type_id = "clutter_text_direction_get_type ()")]
-	[Version (since = "1.2")]
 	public enum TextDirection {
 		DEFAULT,
 		LTR,
@@ -8785,7 +8477,7 @@ namespace Clutter {
 #if !HAS_MUTTER45
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_TEXTURE_", type_id = "clutter_texture_flags_get_type ()")]
 	[Flags]
-	[Version (deprecated = true, deprecated_since = "1.22", since = "0.4")]
+	[Version (deprecated = true, deprecated_since = "1.22")]
 	public enum TextureFlags {
 		NONE,
 		RGB_FLAG_BGR,
@@ -8793,7 +8485,7 @@ namespace Clutter {
 		YUV_FLAG_YUV2
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_TEXTURE_QUALITY_", type_id = "clutter_texture_quality_get_type ()")]
-	[Version (deprecated = true, deprecated_since = "1.22", since = "0.8")]
+	[Version (deprecated = true, deprecated_since = "1.22")]
 	public enum TextureQuality {
 		LOW,
 		MEDIUM,
@@ -8801,22 +8493,29 @@ namespace Clutter {
 	}
 #endif
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_TIMELINE_", type_id = "clutter_timeline_direction_get_type ()")]
-	[Version (since = "0.6")]
 	public enum TimelineDirection {
 		FORWARD,
 		BACKWARD
 	}
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_TOUCHPAD_GESTURE_PHASE_", type_id = "clutter_touchpad_gesture_phase_get_type ()")]
-	[Version (since = "1.24")]
 	public enum TouchpadGesturePhase {
 		BEGIN,
 		UPDATE,
 		END,
 		CANCEL
 	}
+#if HAS_MUTTER47
+	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_TRANSFER_FUNCTION_", type_id = "clutter_transfer_function_get_type ()")]
+	public enum TransferFunction {
+		DEFAULT,
+		SRGB,
+		PQ,
+		LINEAR;
+		public void get_default_luminances (out float min_lum_out, out float max_lum_out, out float ref_lum_out);
+	}
+#endif
 #if !HAS_MUTTER46
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_UNIT_", type_id = "clutter_unit_type_get_type ()")]
-	[Version (since = "1.0")]
 	public enum UnitType {
 		PIXEL,
 		EM,
@@ -8835,7 +8534,6 @@ namespace Clutter {
 	}
 #if !HAS_MUTTER43
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_IMAGE_ERROR_INVALID_", type_id = "clutter_image_error_get_type ()")]
-	[Version (since = "1.10")]
 	public errordomain ImageError {
 		DATA;
 		public static GLib.Quark quark ();
@@ -8843,7 +8541,6 @@ namespace Clutter {
 #endif
 #if !HAS_MUTTER46
 	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_SCRIPT_ERROR_INVALID_", type_id = "clutter_script_error_get_type ()")]
-	[Version (since = "0.6")]
 	public errordomain ScriptError {
 		TYPE_FUNCTION,
 		PROPERTY,
@@ -8852,35 +8549,28 @@ namespace Clutter {
 	}
 #endif
 	[CCode (cheader_filename = "clutter/clutter.h", instance_pos = 1.9)]
-	[Version (since = "1.24")]
 	public delegate Clutter.Actor ActorCreateChildFunc (GLib.Object item);
 #if !HAS_MUTTER46
 	[CCode (cheader_filename = "clutter/clutter.h", instance_pos = 4.9)]
-	[Version (since = "1.0")]
 	public delegate bool BindingActionFunc (GLib.Object gobject, string action_name, uint key_val, Clutter.ModifierType modifiers);
 	[CCode (cheader_filename = "clutter/clutter.h", instance_pos = 1.9)]
 	public delegate void Callback (Clutter.Actor actor);
 #endif
 #if HAS_MUTTER43
 	[CCode (cheader_filename = "clutter/clutter.h", instance_pos = 2.9)]
-	[Version (since = "1.18")]
 	public delegate bool EventFilterFunc (Clutter.Event event, Clutter.Actor event_actor);
 #else
 	[CCode (cheader_filename = "clutter/clutter.h", instance_pos = 1.9)]
-	[Version (since = "1.18")]
 	public delegate bool EventFilterFunc (Clutter.Event event);
 #endif
 #if !HAS_MUTTER46
 	[CCode (cheader_filename = "clutter/clutter.h", instance_pos = 1.9)]
-	[Version (since = "1.0")]
 	public delegate void PathCallback (Clutter.PathNode node);
 #endif
 	[CCode (cheader_filename = "clutter/clutter.h", has_target = false)]
-	[Version (since = "1.0")]
 	public delegate bool ProgressFunc (GLib.Value a, GLib.Value b, double progress, GLib.Value retval);
 #if !HAS_MUTTER46
 	[CCode (cheader_filename = "clutter/clutter.h", instance_pos = 6.9)]
-	[Version (since = "0.6")]
 	public delegate void ScriptConnectFunc (Clutter.Script script, GLib.Object object, string signal_name, string handler_name, GLib.Object connect_object, GLib.ConnectFlags flags);
 #endif
 #if HAS_MUTTER45
@@ -8888,25 +8578,21 @@ namespace Clutter {
 	public delegate bool StageInputForeachFunc (Clutter.Stage stage, Clutter.InputDevice device, Clutter.EventSequence sequence);
 #endif
 	[CCode (cheader_filename = "clutter/clutter.h", instance_pos = 3.9)]
-	[Version (since = "1.10")]
 	public delegate double TimelineProgressFunc (Clutter.Timeline timeline, double elapsed, double total);
 #if !HAS_MUTTER45
 	[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_COGL")]
-	[Version (deprecated = true, deprecated_since = "1.10", since = "0.4")]
+	[Version (deprecated = true, deprecated_since = "1.10")]
 	public const string COGL;
 #endif
 	[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_CURRENT_TIME")]
-	[Version (since = "0.4")]
 	public const int CURRENT_TIME;
 	[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_EVENT_PROPAGATE")]
-	[Version (since = "1.10")]
 	public const bool EVENT_PROPAGATE;
 	[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_EVENT_STOP")]
-	[Version (since = "1.10")]
 	public const bool EVENT_STOP;
 #if !HAS_MUTTER45
 	[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_FLAVOUR")]
-	[Version (deprecated = true, deprecated_since = "1.10", since = "0.4")]
+	[Version (deprecated = true, deprecated_since = "1.10")]
 	public const string FLAVOUR;
 #endif
 #if !HAS_MUTTER46
@@ -8914,52 +8600,43 @@ namespace Clutter {
 	public const int PATH_RELATIVE;
 #endif
 	[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_PRIORITY_REDRAW")]
-	[Version (since = "0.8")]
 	public const int PRIORITY_REDRAW;
 #if !HAS_MUTTER46
 	[CCode (cheader_filename = "clutter/clutter.h")]
-	[Version (since = "1.12")]
 	public static void cairo_clear (Cairo.Context cr);
 	[CCode (cheader_filename = "clutter/clutter.h")]
-	[Version (since = "1.0")]
 	public static void cairo_set_source_color (Cairo.Context cr, Clutter.Color color);
 #endif
 	[CCode (cheader_filename = "clutter/clutter.h")]
 	public static void debug_set_max_render_time_constant (int max_render_time_constant_us);
+#if !HAS_MUTTER47
 	[CCode (cheader_filename = "clutter/clutter.h")]
-	[Version (since = "1.14")]
 	public static void disable_accessibility ();
+#endif
 #if !HAS_MUTTER45
 	[CCode (cheader_filename = "clutter/clutter.h")]
-	[Version (since = "0.4")]
 	public static void do_event (Clutter.Event event);
 #endif
 	[CCode (cheader_filename = "clutter/clutter.h")]
-	[Version (since = "0.4")]
 	public static bool events_pending ();
 	[CCode (cheader_filename = "clutter/clutter.h")]
-	[Version (since = "1.4")]
 	public static bool get_accessibility_enabled ();
 	[CCode (cheader_filename = "clutter/clutter.h")]
-	[Version (since = "1.2")]
 	public static unowned Clutter.Event get_current_event ();
 	[CCode (cheader_filename = "clutter/clutter.h")]
-	[Version (since = "1.0")]
 	public static uint32 get_current_event_time ();
 	[CCode (cheader_filename = "clutter/clutter.h")]
 	public static void get_debug_flags (Clutter.DebugFlag debug_flags, Clutter.DrawDebugFlag draw_flags, Clutter.PickDebugFlag pick_flags);
 	[CCode (cheader_filename = "clutter/clutter.h")]
-	[Version (since = "0.4")]
 	public static unowned Clutter.Backend get_default_backend ();
 	[CCode (cheader_filename = "clutter/clutter.h")]
-	[Version (since = "1.2")]
 	public static Clutter.TextDirection get_default_text_direction ();
+#if !HAS_MUTTER47
 	[CCode (cheader_filename = "clutter/clutter.h")]
-	[Version (since = "1.0")]
 	public static unowned Pango.FontMap get_font_map ();
+#endif
 #if !HAS_MUTTER46
 	[CCode (cheader_filename = "clutter/clutter.h")]
-	[Version (since = "0.6")]
 	public static unowned string get_script_id (GLib.Object gobject);
 #endif
 #if HAS_MUTTER44
@@ -8975,6 +8652,5 @@ namespace Clutter {
 	public static unowned string? keyval_name (uint keyval);
 #endif
 	[CCode (cheader_filename = "clutter/clutter.h")]
-	[Version (since = "1.10")]
 	public static uint unicode_to_keysym (uint32 wc);
 }
diff --git a/vapi/mutter-cogl-14.vapi b/vapi/mutter-cogl-14.vapi
index 2aa709a5b..f8087bc21 100644
--- a/vapi/mutter-cogl-14.vapi
+++ b/vapi/mutter-cogl-14.vapi
@@ -2,14 +2,38 @@
 
 [CCode (cprefix = "Cogl", gir_namespace = "Cogl", gir_version = "14", lower_case_cprefix = "cogl_")]
 namespace Cogl {
+#if HAS_MUTTER47
+	namespace Bits {
+		[CCode (cheader_filename = "cogl/cogl.h", cname = "COGL_A_BIT")]
+		public const int A;
+		[CCode (cheader_filename = "cogl/cogl.h", cname = "COGL_AFIRST_BIT")]
+		public const int AFIRST;
+		[CCode (cheader_filename = "cogl/cogl.h", cname = "COGL_BGR_BIT")]
+		public const int BGR;
+		[CCode (cheader_filename = "cogl/cogl.h", cname = "COGL_DEPTH_BIT")]
+		public const int DEPTH;
+		[CCode (cheader_filename = "cogl/cogl.h", cname = "COGL_PREMULT_BIT")]
+		public const int PREMULT;
+		[CCode (cheader_filename = "cogl/cogl.h", cname = "COGL_STENCIL_BIT")]
+		public const int STENCIL;
+	}
+	[CCode (cheader_filename = "cogl/cogl.h", type_id = "cogl_atlas_get_type ()")]
+	public class Atlas : GLib.Object {
+		[CCode (has_construct_function = false)]
+		protected Atlas ();
+		public bool reserve_space (uint width, uint height, void* user_data);
+	}
+#endif
 	[CCode (cheader_filename = "cogl/cogl.h", type_id = "cogl_atlas_texture_get_type ()")]
 	public sealed class AtlasTexture : Cogl.Texture {
 		[CCode (has_construct_function = false)]
 		protected AtlasTexture ();
 		[CCode (has_construct_function = false, type = "CoglTexture*")]
 		public AtlasTexture.from_bitmap (Cogl.Bitmap bmp);
+#if !HAS_MUTTER47
 		[CCode (has_construct_function = false, type = "CoglTexture*")]
 		public AtlasTexture.from_data (Cogl.Context ctx, int width, int height, Cogl.PixelFormat format, int rowstride, uint8 data) throws GLib.Error;
+#endif
 		[CCode (has_construct_function = false, type = "CoglTexture*")]
 		public AtlasTexture.with_size (Cogl.Context ctx, int width, int height);
 	}
@@ -17,6 +41,7 @@ namespace Cogl {
 	public class Attribute : GLib.Object {
 		[CCode (has_construct_function = false)]
 		public Attribute (Cogl.AttributeBuffer attribute_buffer, string name, size_t stride, size_t offset, int components, Cogl.AttributeType type);
+#if !HAS_MUTTER47
 		[CCode (has_construct_function = false)]
 		public Attribute.const_1f (Cogl.Context context, string name, float value);
 		[CCode (has_construct_function = false)]
@@ -37,9 +62,12 @@ namespace Cogl {
 		public Attribute.const_4fv (Cogl.Context context, string name, float value);
 		[CCode (has_construct_function = false)]
 		public Attribute.const_4x4fv (Cogl.Context context, string name, float matrix4x4, bool transpose);
+#endif
 		public unowned Cogl.AttributeBuffer get_buffer ();
+#if !HAS_MUTTER47
 		public bool get_normalized ();
 		public void set_buffer (Cogl.AttributeBuffer attribute_buffer);
+#endif
 		public void set_normalized (bool normalized);
 	}
 	[CCode (cheader_filename = "cogl/cogl.h", type_id = "cogl_attribute_buffer_get_type ()")]
@@ -88,17 +116,28 @@ namespace Cogl {
 	public class Context : GLib.Object {
 		[CCode (has_construct_function = false)]
 		public Context (Cogl.Display? display) throws GLib.Error;
+#if HAS_MUTTER47
+		public void flush ();
+#else
 		[CCode (cheader_filename = "cogl/cogl.h", cname = "cogl_foreach_feature")]
 		public void foreach_feature (Cogl.FeatureCallback callback);
+#endif
 		public void free_timestamp_query (owned Cogl.TimestampQuery query);
 		public unowned Cogl.Display get_display ();
 		public int64 get_gpu_time_ns ();
+#if !HAS_MUTTER47
 		[CCode (cheader_filename = "cogl/cogl.h", cname = "cogl_get_graphics_reset_status")]
+#endif
 		public Cogl.GraphicsResetStatus get_graphics_reset_status ();
 		public unowned Cogl.Pipeline get_named_pipeline (Cogl.PipelineKey key);
 		public unowned Cogl.Renderer get_renderer ();
+#if !HAS_MUTTER47
 		[CCode (cheader_filename = "cogl/cogl.h", cname = "cogl_has_feature")]
+#endif
 		public bool has_feature (Cogl.FeatureID feature);
+#if HAS_MUTTER47
+		public bool has_winsys_feature (Cogl.WinsysFeature feature);
+#endif
 		public bool is_hardware_accelerated ();
 		public void set_named_pipeline (Cogl.PipelineKey key, Cogl.Pipeline? pipeline);
 		public int64 timestamp_query_get_time_ns (Cogl.TimestampQuery query);
@@ -106,9 +145,15 @@ namespace Cogl {
 	[CCode (cheader_filename = "cogl/cogl.h", type_id = "cogl_display_get_type ()")]
 	public class Display : GLib.Object {
 		[CCode (has_construct_function = false)]
+#if HAS_MUTTER47
+		public Display (Cogl.Renderer renderer);
+#else
 		public Display (Cogl.Renderer renderer, Cogl.OnscreenTemplate onscreen_template);
+#endif
 		public unowned Cogl.Renderer get_renderer ();
+#if !HAS_MUTTER47
 		public void set_onscreen_template (Cogl.OnscreenTemplate onscreen_template);
+#endif
 		public bool setup () throws GLib.Error;
 	}
 	[CCode (cheader_filename = "cogl/cogl.h", free_function = "cogl_dma_buf_handle_free", has_type_id = false)]
@@ -128,6 +173,7 @@ namespace Cogl {
 		public bool sync_read_end () throws GLib.Error;
 		public bool sync_read_start () throws GLib.Error;
 	}
+#if !HAS_MUTTER47
 	[CCode (cheader_filename = "cogl/cogl.h", has_type_id = false)]
 	[Compact]
 	public class Fence {
@@ -137,6 +183,7 @@ namespace Cogl {
 	public class FenceClosure {
 		public void* get_user_data ();
 	}
+#endif
 	[CCode (cheader_filename = "cogl/cogl.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "cogl_frame_closure_get_type ()")]
 	[Compact]
 	public class FrameClosure {
@@ -153,6 +200,9 @@ namespace Cogl {
 		public int64 get_rendering_duration_ns ();
 		public uint get_sequence ();
 		public int64 get_time_before_buffer_swap_us ();
+#if HAS_MUTTER47
+		public bool has_valid_gpu_rendering_duration ();
+#endif
 		public bool is_hw_clock ();
 		public bool is_vsync ();
 		public bool is_zero_copy ();
@@ -161,11 +211,15 @@ namespace Cogl {
 	public abstract class Framebuffer : GLib.Object {
 		[CCode (has_construct_function = false)]
 		protected Framebuffer ();
+#if !HAS_MUTTER47
 		public unowned Cogl.FenceClosure? add_fence_callback ([CCode (scope = "async")] Cogl.FenceCallback callback);
+#endif
 		public virtual bool allocate () throws GLib.Error;
 		[CCode (cheader_filename = "cogl/cogl.h", cname = "cogl_blit_framebuffer")]
 		public bool blit (Cogl.Framebuffer dst, int src_x, int src_y, int dst_x, int dst_y, int width, int height) throws GLib.Error;
+#if !HAS_MUTTER47
 		public void cancel_fence_callback (Cogl.FenceClosure closure);
+#endif
 		public void clear (ulong buffers, Cogl.Color color);
 		public void clear4f (ulong buffers, float red, float green, float blue, float alpha);
 		public void discard_buffers (ulong buffers);
@@ -181,24 +235,32 @@ namespace Cogl {
 		public int get_alpha_bits ();
 		public int get_blue_bits ();
 		public unowned Cogl.Context get_context ();
+#if !HAS_MUTTER47
 		public int get_depth_bits ();
+#endif
 		public bool get_depth_write_enabled ();
 		public bool get_dither_enabled ();
 		public int get_green_bits ();
 		public int get_height ();
+#if !HAS_MUTTER47
 		public bool get_is_stereo ();
+#endif
 		public Graphene.Matrix get_modelview_matrix ();
 		public Graphene.Matrix get_projection_matrix ();
 		public int get_red_bits ();
+#if !HAS_MUTTER47
 		public int get_samples_per_pixel ();
 		public Cogl.StereoMode get_stereo_mode ();
+#endif
 		public void get_viewport4fv ([CCode (array_length = false)] out unowned float viewport[4]);
 		public float get_viewport_height ();
 		public float get_viewport_width ();
 		public float get_viewport_x ();
 		public float get_viewport_y ();
 		public int get_width ();
+#if !HAS_MUTTER47
 		public void identity_matrix ();
+#endif
 		[NoWrapper]
 		public virtual bool is_y_flipped ();
 		public void orthographic (float x_1, float y_1, float x_2, float y_2, float near, float far);
@@ -206,22 +268,30 @@ namespace Cogl {
 		public void pop_clip ();
 		public void pop_matrix ();
 		public void push_matrix ();
+#if !HAS_MUTTER47
 		public void push_primitive_clip (Cogl.Primitive primitive, float bounds_x1, float bounds_y1, float bounds_x2, float bounds_y2);
+#endif
 		public void push_rectangle_clip (float x_1, float y_1, float x_2, float y_2);
 		public void push_region_clip (Mtk.Region region);
 		public bool read_pixels (int x, int y, int width, int height, Cogl.PixelFormat format, uint8 pixels);
 		public bool read_pixels_into_bitmap (int x, int y, Cogl.ReadPixelsFlags source, Cogl.Bitmap bitmap);
+#if !HAS_MUTTER47
 		public void resolve_samples ();
 		public void resolve_samples_region (int x, int y, int width, int height);
+#endif
 		public void rotate (float angle, float x, float y, float z);
+#if !HAS_MUTTER47
 		public void rotate_euler (Graphene.Euler euler);
+#endif
 		public void scale (float x, float y, float z);
 		public void set_depth_write_enabled (bool depth_write_enabled);
 		public void set_dither_enabled (bool dither_enabled);
 		public void set_modelview_matrix (Graphene.Matrix matrix);
 		public void set_projection_matrix (Graphene.Matrix matrix);
+#if !HAS_MUTTER47
 		public void set_samples_per_pixel (int samples_per_pixel);
 		public void set_stereo_mode (Cogl.StereoMode stereo_mode);
+#endif
 		public void set_viewport (float x, float y, float width, float height);
 		public void transform (Graphene.Matrix matrix);
 		public void translate (float x, float y, float z);
@@ -234,10 +304,12 @@ namespace Cogl {
 		public int width { get; set construct; }
 		public signal void destroy ();
 	}
+#if !HAS_MUTTER47
 	[CCode (cheader_filename = "cogl/cogl.h", has_type_id = false)]
 	[Compact]
 	public class FramebufferDriverConfig {
 	}
+#endif
 	[CCode (cheader_filename = "cogl/cogl.h", type_id = "cogl_index_buffer_get_type ()")]
 	public sealed class IndexBuffer : Cogl.Buffer {
 		[CCode (has_construct_function = false)]
@@ -258,7 +330,9 @@ namespace Cogl {
 	[Compact]
 	public class MatrixEntry {
 		public bool calculate_translation (Cogl.MatrixEntry entry1, out float x, out float y, out float z);
+#if !HAS_MUTTER47
 		public bool equal (Cogl.MatrixEntry entry1);
+#endif
 		public Graphene.Matrix? @get (out Graphene.Matrix matrix);
 		public bool is_identity ();
 		public Cogl.MatrixEntry @ref ();
@@ -271,11 +345,15 @@ namespace Cogl {
 		public void frustum (float left, float right, float bottom, float top, float z_near, float z_far);
 		public Graphene.Matrix? @get (out Graphene.Matrix matrix);
 		public unowned Cogl.MatrixEntry get_entry ();
+#if !HAS_MUTTER47
 		public bool get_inverse (out Graphene.Matrix inverse);
+#endif
 		public void load_identity ();
 		public void multiply (Graphene.Matrix matrix);
+#if !HAS_MUTTER47
 		public void orthographic (float x_1, float y_1, float x_2, float y_2, float near, float far);
 		public void perspective (float fov_y, float aspect, float z_near, float z_far);
+#endif
 		public void pop ();
 		public void push ();
 		public void rotate (float angle, float x, float y, float z);
@@ -296,7 +374,9 @@ namespace Cogl {
 	public class Onscreen : Cogl.Framebuffer {
 		[CCode (has_construct_function = false)]
 		protected Onscreen ();
+#if !HAS_MUTTER47
 		public unowned Cogl.OnscreenDirtyClosure add_dirty_callback (owned Cogl.OnscreenDirtyCallback callback);
+#endif
 		public unowned Cogl.FrameClosure add_frame_callback (owned Cogl.FrameCallback callback);
 		public void add_frame_info (owned Cogl.FrameInfo info);
 		[NoWrapper]
@@ -304,15 +384,22 @@ namespace Cogl {
 		public virtual bool direct_scanout (Cogl.Scanout scanout, Cogl.FrameInfo info) throws GLib.Error;
 		public virtual int get_buffer_age ();
 		public int64 get_frame_counter ();
+#if !HAS_MUTTER47
 		public void hide ();
+#endif
 		public virtual void queue_damage_region ([CCode (array_length_cname = "n_rectangles", array_length_pos = 1.1)] int[] rectangles);
+#if !HAS_MUTTER47
 		public void remove_dirty_callback (Cogl.OnscreenDirtyClosure closure);
+#endif
 		public void remove_frame_callback (Cogl.FrameClosure closure);
+#if !HAS_MUTTER47
 		public void show ();
+#endif
 		public void swap_buffers (Cogl.FrameInfo frame_info, void* user_data);
 		public virtual void swap_buffers_with_damage ([CCode (array_length_cname = "n_rectangles", array_length_pos = 1.5)] int[] rectangles, Cogl.FrameInfo info);
 		public virtual void swap_region ([CCode (array_length_cname = "n_rectangles", array_length_pos = 1.5)] int[] rectangles, Cogl.FrameInfo info);
 	}
+#if !HAS_MUTTER47
 	[CCode (cheader_filename = "cogl/cogl.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "cogl_onscreen_dirty_closure_get_type ()")]
 	[Compact]
 	public class OnscreenDirtyClosure {
@@ -337,6 +424,7 @@ namespace Cogl {
 		public int get_x ();
 		public int get_y ();
 	}
+#endif
 	[CCode (cheader_filename = "cogl/cogl.h", type_id = "cogl_pipeline_get_type ()")]
 	public sealed class Pipeline : GLib.Object {
 		[CCode (has_construct_function = false)]
@@ -382,6 +470,9 @@ namespace Cogl {
 		public void set_layer_wrap_mode_t (int layer_index, Cogl.PipelineWrapMode mode);
 		public bool set_per_vertex_point_size (bool enable) throws GLib.Error;
 		public void set_point_size (float point_size);
+#if HAS_MUTTER47
+		public void set_static_name (string name);
+#endif
 		public void set_uniform_1f (int uniform_location, float value);
 		public void set_uniform_1i (int uniform_location, int value);
 		public void set_uniform_float (int uniform_location, int n_components, int count, float value);
@@ -398,35 +489,49 @@ namespace Cogl {
 	public class Primitive : GLib.Object {
 		[CCode (has_construct_function = false)]
 		public Primitive (Cogl.VerticesMode mode, int n_vertices, ...);
+#if !HAS_MUTTER47
 		public Cogl.Primitive copy ();
+#endif
 		public void draw (Cogl.Framebuffer framebuffer, Cogl.Pipeline pipeline);
+#if !HAS_MUTTER47
 		public void foreach_attribute (Cogl.PrimitiveAttributeCallback callback);
 		public int get_first_vertex ();
 		[CCode (array_length = false)]
 		public unowned Cogl.Indices[]? get_indices ();
 		public Cogl.VerticesMode get_mode ();
 		public int get_n_vertices ();
+#endif
 		[CCode (has_construct_function = false)]
 		public Primitive.p2 (Cogl.Context context, Cogl.VerticesMode mode, [CCode (array_length_cname = "n_vertices", array_length_pos = 2.5)] Cogl.VertexP2[] data);
 		[CCode (has_construct_function = false)]
 		public Primitive.p2c4 (Cogl.Context context, Cogl.VerticesMode mode, [CCode (array_length_cname = "n_vertices", array_length_pos = 2.5)] Cogl.VertexP2C4[] data);
 		[CCode (has_construct_function = false)]
 		public Primitive.p2t2 (Cogl.Context context, Cogl.VerticesMode mode, [CCode (array_length_cname = "n_vertices", array_length_pos = 2.5)] Cogl.VertexP2T2[] data);
+#if !HAS_MUTTER47
 		[CCode (has_construct_function = false)]
 		public Primitive.p2t2c4 (Cogl.Context context, Cogl.VerticesMode mode, [CCode (array_length_cname = "n_vertices", array_length_pos = 2.5)] Cogl.VertexP2T2C4[] data);
+#endif
 		[CCode (has_construct_function = false)]
 		public Primitive.p3 (Cogl.Context context, Cogl.VerticesMode mode, [CCode (array_length_cname = "n_vertices", array_length_pos = 2.5)] Cogl.VertexP3[] data);
+#if !HAS_MUTTER47
 		[CCode (has_construct_function = false)]
 		public Primitive.p3c4 (Cogl.Context context, Cogl.VerticesMode mode, [CCode (array_length_cname = "n_vertices", array_length_pos = 2.5)] Cogl.VertexP3C4[] data);
+#endif
 		[CCode (has_construct_function = false)]
 		public Primitive.p3t2 (Cogl.Context context, Cogl.VerticesMode mode, [CCode (array_length_cname = "n_vertices", array_length_pos = 2.5)] Cogl.VertexP3T2[] data);
+#if !HAS_MUTTER47
 		[CCode (has_construct_function = false)]
 		public Primitive.p3t2c4 (Cogl.Context context, Cogl.VerticesMode mode, [CCode (array_length_cname = "n_vertices", array_length_pos = 2.5)] Cogl.VertexP3T2C4[] data);
+#endif
 		public void set_first_vertex (int first_vertex);
 		public void set_indices ([CCode (array_length_cname = "n_indices", array_length_pos = 1.1)] Cogl.Indices[] indices);
+#if !HAS_MUTTER47
 		public void set_mode (Cogl.VerticesMode mode);
+#endif
 		public void set_n_vertices (int n_vertices);
+#if !HAS_MUTTER47
 		public static void texture_set_auto_mipmap (Cogl.Texture primitive_texture, bool value);
+#endif
 		[CCode (has_construct_function = false)]
 		public Primitive.with_attributes (Cogl.VerticesMode mode, int n_vertices, [CCode (array_length_cname = "n_attributes", array_length_pos = 3.1)] Cogl.Attribute[] attributes);
 	}
@@ -436,9 +541,11 @@ namespace Cogl {
 		protected Program ();
 		[Version (deprecated = true, deprecated_since = "1.16")]
 		public void attach_shader (Cogl.Shader shader);
+#if !HAS_MUTTER47
 		[CCode (cheader_filename = "cogl/cogl.h", cname = "cogl_create_program")]
 		[Version (deprecated = true, deprecated_since = "1.16")]
 		public static Cogl.Program create ();
+#endif
 		[Version (deprecated = true, deprecated_since = "1.16")]
 		public int get_uniform_location (string uniform_name);
 		[Version (deprecated = true, deprecated_since = "1.16")]
@@ -458,18 +565,31 @@ namespace Cogl {
 	public class Renderer : GLib.Object {
 		[CCode (has_construct_function = false)]
 		public Renderer ();
+#if !HAS_MUTTER47
 		public void add_constraint (Cogl.RendererConstraint constraint);
+#endif
 		public void bind_api ();
+#if !HAS_MUTTER47
 		public bool check_onscreen_template (Cogl.OnscreenTemplate onscreen_template) throws GLib.Error;
+#endif
 		public bool connect () throws GLib.Error;
 		public static uint32 error_quark ();
+#if !HAS_MUTTER47
 		public void foreach_output (Cogl.OutputCallback callback);
+#endif
 		public Cogl.Driver get_driver ();
+#if HAS_MUTTER47
+		public void* get_proc_address (string name);
+#endif
 		public Cogl.WinsysID get_winsys_id ();
 		public bool is_dma_buf_supported ();
+#if !HAS_MUTTER47
 		public void remove_constraint (Cogl.RendererConstraint constraint);
+#endif
 		public void set_driver (Cogl.Driver driver);
+#if !HAS_MUTTER47
 		public void set_winsys_id (Cogl.WinsysID winsys_id);
+#endif
 	}
 	[CCode (cheader_filename = "cogl/cogl.h", type_id = "cogl_scanout_get_type ()")]
 	public sealed class Scanout : GLib.Object {
@@ -487,10 +607,15 @@ namespace Cogl {
 	[CCode (cheader_filename = "cogl/cogl.h", type_id = "cogl_shader_get_type ()")]
 	public class Shader : GLib.Object {
 		[CCode (has_construct_function = false)]
+#if HAS_MUTTER47
+		[Version (deprecated = true, deprecated_since = "1.16")]
+		public Shader (Cogl.ShaderType shader_type);
+#else
 		protected Shader ();
 		[CCode (cheader_filename = "cogl/cogl.h", cname = "cogl_create_shader")]
 		[Version (deprecated = true, deprecated_since = "1.16")]
 		public static Cogl.Shader create (Cogl.ShaderType shader_type);
+#endif
 		[Version (deprecated = true, deprecated_since = "1.16")]
 		public Cogl.ShaderType get_shader_type ();
 		[Version (deprecated = true, deprecated_since = "1.16")]
@@ -505,6 +630,9 @@ namespace Cogl {
 		public unowned string get_post ();
 		public unowned string get_pre ();
 		public unowned string get_replace ();
+#if HAS_MUTTER47
+		public void set_capability (GLib.Quark domain, uint capability);
+#endif
 		public void set_declarations (string declarations);
 		public void set_post (string post);
 		public void set_pre (string pre);
@@ -516,6 +644,7 @@ namespace Cogl {
 		public SubTexture (Cogl.Context ctx, Cogl.Texture parent_texture, int sub_x, int sub_y, int sub_width, int sub_height);
 		public unowned Cogl.Texture get_parent ();
 	}
+#if !HAS_MUTTER47
 	[CCode (cheader_filename = "cogl/cogl.h", type_id = "cogl_swap_chain_get_type ()")]
 	public class SwapChain : GLib.Object {
 		[CCode (has_construct_function = false)]
@@ -523,13 +652,22 @@ namespace Cogl {
 		public void set_has_alpha (bool has_alpha);
 		public void set_length (int length);
 	}
+#endif
 	[CCode (cheader_filename = "cogl/cogl.h", type_id = "cogl_texture_get_type ()")]
 	public abstract class Texture : GLib.Object {
 		[CCode (has_construct_function = false)]
 		protected Texture ();
 		public bool allocate () throws GLib.Error;
+		[CCode (cheader_filename = "cogl/cogl.h", cname = "cogl_meta_texture_foreach_in_region")]
+		public void foreach_in_region (float tx_1, float ty_1, float tx_2, float ty_2, Cogl.PipelineWrapMode wrap_s, Cogl.PipelineWrapMode wrap_t, Cogl.MetaTextureCallback callback);
 		public Cogl.TextureComponents get_components ();
+#if HAS_MUTTER47
+		public unowned Cogl.Context get_context ();
+#endif
 		public int get_data (Cogl.PixelFormat format, uint rowstride, [CCode (array_length = false)] uint8[] data);
+#if HAS_MUTTER47
+		public Cogl.PixelFormat get_format ();
+#endif
 		public bool get_gl_texture (out uint out_gl_handle, out uint out_gl_target);
 		public uint get_height ();
 		public int get_max_waste ();
@@ -537,6 +675,9 @@ namespace Cogl {
 		public uint get_width ();
 		public bool is_get_data_supported ();
 		public bool is_sliced ();
+#if HAS_MUTTER47
+		public void set_auto_mipmap (bool value);
+#endif
 		public void set_components (Cogl.TextureComponents components);
 		public bool set_data (Cogl.PixelFormat format, int rowstride, [CCode (array_length = false)] uint8[] data, int level) throws GLib.Error;
 		public void set_premultiplied (bool premultiplied);
@@ -562,7 +703,6 @@ namespace Cogl {
 		[CCode (has_construct_function = false, type = "CoglTexture*")]
 		public Texture2D.from_data (Cogl.Context ctx, int width, int height, Cogl.PixelFormat format, int rowstride, [CCode (array_length = false)] uint8[] data) throws GLib.Error;
 		[CCode (has_construct_function = false, type = "CoglTexture*")]
-		[Version (since = "2.0")]
 		public Texture2D.with_format (Cogl.Context ctx, int width, int height, Cogl.PixelFormat format);
 		[CCode (has_construct_function = false, type = "CoglTexture*")]
 		public Texture2D.with_size (Cogl.Context ctx, int width, int height);
@@ -573,8 +713,10 @@ namespace Cogl {
 		protected Texture2DSliced ();
 		[CCode (has_construct_function = false, type = "CoglTexture*")]
 		public Texture2DSliced.from_bitmap (Cogl.Bitmap bmp, int max_waste);
+#if !HAS_MUTTER47
 		[CCode (has_construct_function = false, type = "CoglTexture*")]
 		public Texture2DSliced.from_data (Cogl.Context ctx, int width, int height, int max_waste, Cogl.PixelFormat format, int rowstride, [CCode (array_length = false)] uint8[] data) throws GLib.Error;
+#endif
 		[CCode (has_construct_function = false, type = "CoglTexture*")]
 		public Texture2DSliced.with_size (Cogl.Context ctx, int width, int height, int max_waste);
 	}
@@ -589,39 +731,69 @@ namespace Cogl {
 	}
 	[CCode (cheader_filename = "cogl/cogl.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "cogl_color_get_type ()")]
 	public struct Color {
+#if HAS_MUTTER47
+		public uint8 red;
+		public uint8 green;
+		public uint8 blue;
+		public uint8 alpha;
+#endif
 		public Cogl.Color? copy ();
 		public bool equal ([CCode (type = "void*")] Cogl.Color v2);
+#if !HAS_MUTTER47
 		public void free ();
+#endif
 		[CCode (cname = "cogl_color_init_from_4f")]
-		[Version (since = "1.4")]
 		public Color.from_4f (float red, float green, float blue, float alpha);
+#if !HAS_MUTTER47
 		[CCode (cname = "cogl_color_init_from_4fv")]
-		[Version (since = "1.4")]
 		public Color.from_4fv (float color_array);
+#endif
 		[CCode (cname = "cogl_color_init_from_hsl")]
-		[Version (since = "1.16")]
 		public Color.from_hsl (float hue, float saturation, float luminance);
+#if HAS_MUTTER47
+		[CCode (cname = "_vala_cogl_color_from_string")]
+		public static Cogl.Color? from_string (string str) {
+			Cogl.Color color = { };
+			if (color.init_from_string (str)) {
+				return color;
+			}
+			return null;
+		}
+#endif
 		public float get_alpha ();
 		public float get_blue ();
 		public float get_green ();
 		public float get_red ();
+#if HAS_MUTTER47
+		public uint hash ();
+#endif
 		public void init_from_4f (float red, float green, float blue, float alpha);
 		public void init_from_hsl (float hue, float saturation, float luminance);
+#if HAS_MUTTER47
+		[CCode (cname = "cogl_color_from_string")]
+		public bool init_from_string (string str);
+#endif
 		public void premultiply ();
 		public void to_hsl (out float hue, out float saturation, out float luminance);
+#if HAS_MUTTER47
+		public string to_string ();
+#endif
 	}
 	[CCode (cheader_filename = "cogl/cogl.h", has_type_id = false)]
 	public struct DepthState {
+#if !HAS_MUTTER47
 		public void get_range (float near_val, float far_val);
 		public bool get_test_enabled ();
 		public Cogl.DepthTestFunction get_test_function ();
 		public bool get_write_enabled ();
+#endif
 		public void init ();
 		public void set_range (float near_val, float far_val);
 		public void set_test_enabled (bool enable);
 		public void set_test_function (Cogl.DepthTestFunction function);
 		public void set_write_enabled (bool enable);
 	}
+#if !HAS_MUTTER47
 	[CCode (cheader_filename = "cogl/cogl.h", has_type_id = false)]
 	public struct OnscreenDirtyInfo {
 		public int x;
@@ -629,10 +801,12 @@ namespace Cogl {
 		public int width;
 		public int height;
 	}
+#endif
 	[CCode (cheader_filename = "cogl/cogl.h")]
 	[SimpleType]
 	public struct PipelineKey : char {
 	}
+#if !HAS_MUTTER47
 	[CCode (cheader_filename = "cogl/cogl.h", has_type_id = false)]
 	public struct PollFD {
 		public int fd;
@@ -646,14 +820,13 @@ namespace Cogl {
 		public float ty;
 		public Cogl.Color color;
 	}
+#endif
 	[CCode (cheader_filename = "cogl/cogl.h", has_type_id = false)]
-	[Version (since = "1.6")]
 	public struct VertexP2 {
 		public float x;
 		public float y;
 	}
 	[CCode (cheader_filename = "cogl/cogl.h", has_type_id = false)]
-	[Version (since = "1.6")]
 	public struct VertexP2C4 {
 		public float x;
 		public float y;
@@ -663,15 +836,14 @@ namespace Cogl {
 		public uint8 a;
 	}
 	[CCode (cheader_filename = "cogl/cogl.h", has_type_id = false)]
-	[Version (since = "1.6")]
 	public struct VertexP2T2 {
 		public float x;
 		public float y;
 		public float s;
 		public float t;
 	}
+#if !HAS_MUTTER47
 	[CCode (cheader_filename = "cogl/cogl.h", has_type_id = false)]
-	[Version (since = "1.6")]
 	public struct VertexP2T2C4 {
 		public float x;
 		public float y;
@@ -682,15 +854,15 @@ namespace Cogl {
 		public uint8 b;
 		public uint8 a;
 	}
+#endif
 	[CCode (cheader_filename = "cogl/cogl.h", has_type_id = false)]
-	[Version (since = "1.6")]
 	public struct VertexP3 {
 		public float x;
 		public float y;
 		public float z;
 	}
+#if !HAS_MUTTER47
 	[CCode (cheader_filename = "cogl/cogl.h", has_type_id = false)]
-	[Version (since = "1.6")]
 	public struct VertexP3C4 {
 		public float x;
 		public float y;
@@ -700,8 +872,8 @@ namespace Cogl {
 		public uint8 b;
 		public uint8 a;
 	}
+#endif
 	[CCode (cheader_filename = "cogl/cogl.h", has_type_id = false)]
-	[Version (since = "1.6")]
 	public struct VertexP3T2 {
 		public float x;
 		public float y;
@@ -709,8 +881,8 @@ namespace Cogl {
 		public float s;
 		public float t;
 	}
+#if !HAS_MUTTER47
 	[CCode (cheader_filename = "cogl/cogl.h", has_type_id = false)]
-	[Version (since = "1.6")]
 	public struct VertexP3T2C4 {
 		public float x;
 		public float y;
@@ -722,6 +894,13 @@ namespace Cogl {
 		public uint8 b;
 		public uint8 a;
 	}
+	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_ATLAS_", has_type_id = false)]
+	[Flags]
+	public enum AtlasFlags {
+		CLEAR_TEXTURE,
+		DISABLE_MIGRATION
+	}
+#endif
 	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_ATTRIBUTE_TYPE_", has_type_id = false)]
 	public enum AttributeType {
 		BYTE,
@@ -752,22 +931,26 @@ namespace Cogl {
 		DEPTH,
 		STENCIL
 	}
+#if !HAS_MUTTER47
 	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_BUFFER_ERROR_", type_id = "cogl_buffer_error_get_type ()")]
 	public enum BufferError {
 		MAP
 	}
+#endif
 	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_BUFFER_MAP_HINT_", type_id = "cogl_buffer_map_hint_get_type ()")]
 	[Flags]
 	public enum BufferMapHint {
 		DISCARD,
 		DISCARD_RANGE
 	}
+#if !HAS_MUTTER47
 	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_", has_type_id = false)]
 	[Flags]
 	public enum BufferTarget {
 		WINDOW_BUFFER,
 		OFFSCREEN_BUFFER
 	}
+#endif
 	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_BUFFER_UPDATE_HINT_", type_id = "cogl_buffer_update_hint_get_type ()")]
 	public enum BufferUpdateHint {
 		STATIC,
@@ -822,6 +1005,10 @@ namespace Cogl {
 		OGL_FEATURE_ID_TEXTURE_EGL_IMAGE_EXTERNAL,
 		[CCode (cname = "COGL_FEATURE_ID_BLIT_FRAMEBUFFER")]
 		OGL_FEATURE_ID_BLIT_FRAMEBUFFER,
+#if HAS_MUTTER47
+		[CCode (cname = "COGL_FEATURE_ID_SYNC_FD")]
+		OGL_FEATURE_ID_SYNC_FD,
+#endif
 		[CCode (cname = "COGL_FEATURE_ID_TIMESTAMP_QUERY")]
 		OGL_FEATURE_ID_TIMESTAMP_QUERY
 	}
@@ -943,7 +1130,10 @@ namespace Cogl {
 		public int get_bytes_per_pixel (int plane);
 		public int get_n_planes ();
 		public unowned string to_string ();
+		[CCode (cheader_filename = "cogl/cogl.h")]
+		public const int MAX_PLANES;
 	}
+#if !HAS_MUTTER47
 	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_POLL_FD_EVENT_", has_type_id = false)]
 	public enum PollFDEvent {
 		IN,
@@ -953,12 +1143,14 @@ namespace Cogl {
 		HUP,
 		NVAL
 	}
+#endif
 	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_READ_PIXELS_COLOR_", has_type_id = false)]
 	[Flags]
 	public enum ReadPixelsFlags {
 		[CCode (cname = "COGL_READ_PIXELS_COLOR_BUFFER")]
 		READ_PIXELS_COLOR_BUFFER
 	}
+#if !HAS_MUTTER47
 	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_RENDERER_CONSTRAINT_USES_", has_type_id = false)]
 	[Flags]
 	public enum RendererConstraint {
@@ -966,6 +1158,7 @@ namespace Cogl {
 		XLIB,
 		EGL
 	}
+#endif
 	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_SHADER_TYPE_", has_type_id = false)]
 	public enum ShaderType {
 		VERTEX,
@@ -983,6 +1176,7 @@ namespace Cogl {
 		LAYER_FRAGMENT,
 		TEXTURE_LOOKUP
 	}
+#if !HAS_MUTTER47
 	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_STEREO_", has_type_id = false)]
 	public enum StereoMode {
 		BOTH,
@@ -998,6 +1192,7 @@ namespace Cogl {
 		VERTICAL_RGB,
 		VERTICAL_BGR
 	}
+#endif
 	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_TEXTURE_COMPONENTS_", has_type_id = false)]
 	public enum TextureComponents {
 		A,
@@ -1042,6 +1237,7 @@ namespace Cogl {
 		EGL_XLIB,
 		CUSTOM
 	}
+#if !HAS_MUTTER47
 	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_BITMAP_ERROR_", has_type_id = false)]
 	public errordomain BitmapError {
 		FAILED,
@@ -1058,6 +1254,7 @@ namespace Cogl {
 		[CCode (cheader_filename = "cogl/cogl.h")]
 		public static uint32 quark ();
 	}
+#endif
 	[CCode (cheader_filename = "cogl/cogl.h", cprefix = "COGL_FRAMEBUFFER_ERROR_", has_type_id = false)]
 	public errordomain FramebufferError {
 		[CCode (cname = "COGL_FRAMEBUFFER_ERROR_ALLOCATE")]
@@ -1087,40 +1284,38 @@ namespace Cogl {
 		TYPE;
 		public static uint32 quark ();
 	}
+#if HAS_MUTTER47
+	[CCode (cheader_filename = "cogl/cogl.h", instance_pos = 0.9)]
+	public delegate void AtlasUpdatePositionCallback (Cogl.Texture new_texture, Mtk.Rectangle rect);
+#endif
+#if !HAS_MUTTER47
 	[CCode (cheader_filename = "cogl/cogl.h", instance_pos = 1.9)]
 	public delegate void FeatureCallback (Cogl.FeatureID feature);
 	[CCode (cheader_filename = "cogl/cogl.h", instance_pos = 1.9)]
 	public delegate void FenceCallback (Cogl.Fence fence);
+#endif
 	[CCode (cheader_filename = "cogl/cogl.h", instance_pos = 3.9)]
 	public delegate void FrameCallback (Cogl.Onscreen onscreen, Cogl.FrameEvent event, Cogl.FrameInfo info);
 	[CCode (cheader_filename = "cogl/cogl.h", instance_pos = 3.9)]
 	public delegate void MetaTextureCallback (Cogl.Texture sub_texture, float sub_texture_coords, float meta_coords);
+#if !HAS_MUTTER47
 	[CCode (cheader_filename = "cogl/cogl.h", instance_pos = 2.9)]
 	public delegate void OnscreenDirtyCallback (Cogl.Onscreen onscreen, Cogl.OnscreenDirtyInfo info);
 	[CCode (cheader_filename = "cogl/cogl.h", instance_pos = 1.9)]
 	public delegate void OutputCallback (Cogl.Output output);
+#endif
 	[CCode (cheader_filename = "cogl/cogl.h", instance_pos = 2.9)]
 	public delegate bool PipelineLayerCallback (Cogl.Pipeline pipeline, int layer_index);
+#if !HAS_MUTTER47
 	[CCode (cheader_filename = "cogl/cogl.h", instance_pos = 2.9)]
 	public delegate bool PrimitiveAttributeCallback (Cogl.Primitive primitive, Cogl.Attribute attribute);
-	[CCode (cheader_filename = "cogl/cogl.h", cname = "COGL_AFIRST_BIT")]
-	public const int AFIRST_BIT;
-	[CCode (cheader_filename = "cogl/cogl.h", cname = "COGL_A_BIT")]
-	public const int A_BIT;
-	[CCode (cheader_filename = "cogl/cogl.h", cname = "COGL_BGR_BIT")]
-	public const int BGR_BIT;
-	[CCode (cheader_filename = "cogl/cogl.h", cname = "COGL_DEPTH_BIT")]
-	public const int DEPTH_BIT;
-	[CCode (cheader_filename = "cogl/cogl.h", cname = "COGL_PIXEL_FORMAT_MAX_PLANES")]
-	public const int PIXEL_FORMAT_MAX_PLANES;
-	[CCode (cheader_filename = "cogl/cogl.h", cname = "COGL_PREMULT_BIT")]
-	public const int PREMULT_BIT;
-	[CCode (cheader_filename = "cogl/cogl.h", cname = "COGL_STENCIL_BIT")]
-	public const int STENCIL_BIT;
+#endif
 	[CCode (cheader_filename = "cogl/cogl.h", cname = "COGL_TEXTURE_MAX_WASTE")]
 	public const int TEXTURE_MAX_WASTE;
+#if !HAS_MUTTER47
 	[CCode (cheader_filename = "cogl/cogl.h")]
 	public static bool clutter_winsys_has_feature (Cogl.WinsysFeature feature);
+#endif
 	[CCode (cheader_filename = "cogl/cogl.h")]
 	[Version (replacement = "Color.init_from_hsl")]
 	public static void color_init_from_hsl (out Cogl.Color color, float hue, float saturation, float luminance);
@@ -1130,10 +1325,15 @@ namespace Cogl {
 	public static void flush ();
 	[CCode (cheader_filename = "cogl/cogl.h")]
 	public static unowned Cogl.Indices get_rectangle_indices (Cogl.Context context, int n_rectangles);
+#if HAS_MUTTER47
+	[CCode (cheader_filename = "cogl/cogl.h")]
+	public static GLib.Source glib_source_new (Cogl.Renderer renderer, int priority);
+#else
 	[CCode (cheader_filename = "cogl/cogl.h")]
 	public static GLib.Source glib_renderer_source_new (Cogl.Renderer renderer, int priority);
 	[CCode (cheader_filename = "cogl/cogl.h")]
 	public static GLib.Source glib_source_new (Cogl.Context context, int priority);
+#endif
 	[CCode (cheader_filename = "cogl/cogl.h")]
 	public static void graphene_matrix_project_point (Graphene.Matrix matrix, ref float x, ref float y, ref float z, ref float w);
 	[CCode (cheader_filename = "cogl/cogl.h")]
@@ -1141,8 +1341,6 @@ namespace Cogl {
 	[CCode (cheader_filename = "cogl/cogl.h")]
 	public static void graphene_matrix_transform_points (Graphene.Matrix matrix, int n_components, size_t stride_in, void* points_in, size_t stride_out, void* points_out, int n_points);
 	[CCode (cheader_filename = "cogl/cogl.h")]
-	public static void meta_texture_foreach_in_region (Cogl.Texture texture, float tx_1, float ty_1, float tx_2, float ty_2, Cogl.PipelineWrapMode wrap_s, Cogl.PipelineWrapMode wrap_t, Cogl.MetaTextureCallback callback);
-	[CCode (cheader_filename = "cogl/cogl.h")]
 	[Version (replacement = "PixelFormat.get_bytes_per_pixel")]
 	public static int pixel_format_get_bytes_per_pixel (Cogl.PixelFormat format, int plane);
 	[CCode (cheader_filename = "cogl/cogl.h")]
@@ -1151,10 +1349,12 @@ namespace Cogl {
 	[CCode (cheader_filename = "cogl/cogl.h")]
 	[Version (replacement = "PixelFormat.to_string")]
 	public static unowned string pixel_format_to_string (Cogl.PixelFormat format);
+#if !HAS_MUTTER47
 	[CCode (cheader_filename = "cogl/cogl.h")]
 	public static void poll_renderer_dispatch (Cogl.Renderer renderer, Cogl.PollFD poll_fds, int n_poll_fds);
 	[CCode (cheader_filename = "cogl/cogl.h")]
 	public static int poll_renderer_get_info (Cogl.Renderer renderer, Cogl.PollFD poll_fds, int n_poll_fds, int64 timeout);
+#endif
 	[CCode (cheader_filename = "cogl/cogl.h")]
 	public static void set_tracing_disabled_on_thread (void* data);
 	[CCode (cheader_filename = "cogl/cogl.h")]
@@ -1165,4 +1365,10 @@ namespace Cogl {
 	public static bool start_tracing_with_path (string filename) throws GLib.Error;
 	[CCode (cheader_filename = "cogl/cogl.h")]
 	public static void stop_tracing ();
+#if HAS_MUTTER47
+	[CCode (cheader_filename = "cogl/cogl.h")]
+	public static unowned Cogl.Color? value_get_color (GLib.Value value);
+	[CCode (cheader_filename = "cogl/cogl.h")]
+	public static void value_set_color (GLib.Value value, Cogl.Color color);
+#endif
 }
diff --git a/vapi/mutter-cogl-15.deps b/vapi/mutter-cogl-15.deps
new file mode 100644
index 000000000..8e144aa25
--- /dev/null
+++ b/vapi/mutter-cogl-15.deps
@@ -0,0 +1,5 @@
+pango
+glib-2.0
+gio-2.0
+mutter-mtk-15
+x11
diff --git a/vapi/mutter-cogl-15.vapi b/vapi/mutter-cogl-15.vapi
new file mode 120000
index 000000000..e62349275
--- /dev/null
+++ b/vapi/mutter-cogl-15.vapi
@@ -0,0 +1 @@
+mutter-cogl-14.vapi
\ No newline at end of file
diff --git a/vapi/mutter-cogl-pango-15.vapi b/vapi/mutter-cogl-pango-15.vapi
new file mode 120000
index 000000000..7932bf95b
--- /dev/null
+++ b/vapi/mutter-cogl-pango-15.vapi
@@ -0,0 +1 @@
+mutter-cogl-pango-14.vapi
\ No newline at end of file
diff --git a/vapi/mutter-cogl-pango.vapi b/vapi/mutter-cogl-pango.vapi
index 93be93262..70fd7c839 100644
--- a/vapi/mutter-cogl-pango.vapi
+++ b/vapi/mutter-cogl-pango.vapi
@@ -2,30 +2,33 @@
 
 [CCode (cprefix = "CoglPango", gir_namespace = "CoglPango", gir_version = "6", lower_case_cprefix = "cogl_pango_")]
 namespace CoglPango {
+	[CCode (cheader_filename = "cogl-pango.h", type_id = "cogl_pango_renderer_get_type ()")]
+	public class Renderer : Pango.Renderer {
+		[CCode (has_construct_function = false)]
+		protected Renderer ();
+		[NoAccessorMethod]
+		public Cogl.Context context { construct; }
+	}
 	[CCode (cheader_filename = "cogl-pango.h")]
 	public interface FontMap : Pango.CairoFontMap, GLib.Object {
-		[Version (since = "1.0")]
+#if !HAS_MUTTER47
 		public void clear_glyph_cache ();
+#endif
 		public Pango.Context create_context ();
-		[Version (since = "1.0")]
 		public unowned Pango.Renderer get_renderer ();
-		[Version (since = "1.0")]
+#if !HAS_MUTTER47
 		public bool get_use_mipmapping ();
-		[Version (since = "1.14")]
+#endif
 		public static Pango.FontMap @new ();
-		[Version (since = "1.14")]
 		public void set_resolution (double dpi);
-		[Version (since = "1.0")]
+#if !HAS_MUTTER47
 		public void set_use_mipmapping (bool value);
+#endif
 	}
-	[CCode (cheader_filename = "cogl-pango.h", type_id = "cogl_pango_renderer_get_type ()")]
-	public class Renderer : Pango.Renderer {
-		[CCode (has_construct_function = false)]
-		protected Renderer ();
-		[NoAccessorMethod]
-		public Cogl.Context context { construct; }
-	}
+#if HAS_MUTTER47
+	[CCode (cheader_filename = "cogl-pango.h", instance_pos = 1.9)]
+	public delegate void PipelineSetup (Cogl.Pipeline pipeline);
+#endif
 	[CCode (cheader_filename = "cogl-pango.h")]
-	[Version (since = "1.0")]
 	public static void ensure_glyph_cache_for_layout (Pango.Layout layout);
 }
diff --git a/vapi/mutter-mtk-13.vapi b/vapi/mutter-mtk-13.vapi
index e9f393e57..7d51487f7 100644
--- a/vapi/mutter-mtk-13.vapi
+++ b/vapi/mutter-mtk-13.vapi
@@ -49,6 +49,10 @@ namespace Mtk {
 		public bool could_fit_rect (Mtk.Rectangle inner_rect);
 #if HAS_MUTTER46
 		public void crop_and_scale (Graphene.Rect src_rect, int dst_width, int dst_height, Mtk.Rectangle dest);
+#endif
+#if HAS_MUTTER47
+		[CCode (has_construct_function = false, type = "MtkRectangle*")]
+		public Rectangle.empty ();
 #endif
 		public bool equal (Mtk.Rectangle src2);
 		public void free ();
@@ -63,6 +67,9 @@ namespace Mtk {
 		public void scale_double (double scale, Mtk.RoundingStrategy rounding_strategy, Mtk.Rectangle dest);
 #endif
 		public Graphene.Rect? to_graphene_rect ();
+#if HAS_MUTTER47
+		public void transform (Mtk.MonitorTransform transform, int width, int height, Mtk.Rectangle dest);
+#endif
 		public Mtk.Rectangle union (Mtk.Rectangle rect2);
 		public bool vert_overlap (Mtk.Rectangle rect2);
 	}
@@ -89,6 +96,25 @@ namespace Mtk {
 		public void init (Mtk.Region region);
 		public void next ();
 	}
+#if HAS_MUTTER47
+	[CCode (cheader_filename = "mtk/mtk.h", cprefix = "MTK_MONITOR_TRANSFORM_", has_type_id = false)]
+	public enum MonitorTransform {
+		NORMAL,
+		@90,
+		@180,
+		@270,
+		FLIPPED,
+		FLIPPED_90,
+		FLIPPED_180,
+		FLIPPED_270;
+		public Mtk.MonitorTransform invert ();
+		public Mtk.MonitorTransform transform (Mtk.MonitorTransform other);
+		public void transform_matrix (Graphene.Matrix matrix);
+		public void transform_point (int area_width, int area_height, int point_x, int point_y);
+		[CCode (cname = "MTK_MONITOR_ALL_TRANSFORMS")]
+		public const int ALL;
+	}
+#endif
 	[CCode (cheader_filename = "mtk/mtk.h", cprefix = "MTK_REGION_OVERLAP_", has_type_id = false)]
 	public enum RegionOverlap {
 		OUT,
diff --git a/vapi/mutter-mtk-15.vapi b/vapi/mutter-mtk-15.vapi
new file mode 120000
index 000000000..b408202bc
--- /dev/null
+++ b/vapi/mutter-mtk-15.vapi
@@ -0,0 +1 @@
+mutter-mtk-14.vapi
\ No newline at end of file
