From 342795440012a216d4abb9cfb04d2c3bd0fe8f4d Mon Sep 17 00:00:00 2001
From: Giovanni Campagna <gcampagna@src.gnome.org>
Date: Thu, 31 Mar 2011 15:56:13 +0200
Subject: [PATCH] NetworkMenu: create private connections if the user is not
 authorized

Check polkit setting at startup and add, if needed, the "permissions"
setting to the connections we create, so that polkit authentication is
never needed. The connection is thus only available to other users
if the system administrator decides so.

https://bugzilla.gnome.org/show_bug.cgi?id=646187
---
 js/ui/status/network.js | 38 ++++++++++++++++++++++++++++++++------
 1 file changed, 32 insertions(+), 6 deletions(-)

diff --git a/js/ui/status/network.js b/js/ui/status/network.js
index 77a6202..8c08ef2 100644
--- a/js/ui/status/network.js
+++ b/js/ui/status/network.js
@@ -1,5 +1,5 @@
 // -*- mode: js; js-indent-level: 4; indent-tabs-mode: nil -*-
-const { Clutter, Gio, GLib, GObject, NM, St } = imports.gi;
+const { Clutter, Gio, GLib, GObject, NM, St, Polkit } = imports.gi;
 const Mainloop = imports.mainloop;
 const Signals = imports.signals;
 
@@ -322,6 +322,11 @@ var NMConnectionDevice = class extends NMConnectionSection {
 
     _autoConnect() {
         let connection = new NM.SimpleConnection();
+        if (this._privateConnections) {
+            let connectionSetting = new NM.SettingConnection();
+            connectionSetting.add_permission('user', GLib.get_user_name(), null);
+            connection.add_setting(connectionSetting);
+        }
         this._client.add_and_activate_connection_async(connection, this._device, null, null, null);
     }
 
@@ -458,10 +463,11 @@ var NMConnectionDevice = class extends NMConnectionSection {
 };
 
 var NMDeviceWired = class extends NMConnectionDevice {
-    constructor(client, device) {
+    constructor(client, device, privateConnections) {
         super(client, device);
 
         this.item.menu.addSettingsAction(_("Wired Settings"), 'gnome-network-panel.desktop');
+        this._privateConnections = privateConnections;
     }
 
     get category() {
@@ -672,11 +678,12 @@ var NMWirelessDialogItem = class {
 Signals.addSignalMethods(NMWirelessDialogItem.prototype);
 
 var NMWirelessDialog = class extends ModalDialog.ModalDialog {
-    constructor(client, device) {
+    constructor(client, device, privateConnections) {
         super({ styleClass: 'nm-dialog' });
 
         this._client = client;
         this._device = device;
+        this._privateConnections = privateConnections;
 
         this._wirelessEnabledChangedId = this._client.connect('notify::wireless-enabled',
                                                               this._syncView.bind(this));
@@ -907,6 +914,11 @@ var NMWirelessDialog = class extends ModalDialog.ModalDialog {
                             this._device.get_path(), accessPoints[0].get_path()]);
             } else {
                 let connection = new NM.SimpleConnection();
+                if (this._privateConnections) {
+                    let connectionSetting = new NM.SettingConnection();
+                    connectionSetting.add_permission('user', GLib.get_user_name(), null);
+                    connection.add_setting(connectionSetting);
+                }
                 this._client.add_and_activate_connection_async(connection, this._device, accessPoints[0].get_path(), null, null)
             }
         }
@@ -1142,9 +1154,10 @@ var NMWirelessDialog = class extends ModalDialog.ModalDialog {
 };
 
 var NMDeviceWireless = class {
-    constructor(client, device) {
+    constructor(client, device, privateConnections) {
         this._client = client;
         this._device = device;
+        this._privateConnections = privateConnections;
 
         this._description = '';
 
@@ -1230,7 +1243,7 @@ var NMDeviceWireless = class {
     }
 
     _showDialog() {
-        this._dialog = new NMWirelessDialog(this._client, this._device);
+        this._dialog = new NMWirelessDialog(this._client, this._device, this._privateConnections);
         this._dialog.connect('closed', this._dialogClosed.bind(this));
         this._dialog.open();
     }
@@ -1606,6 +1619,19 @@ var NMApplet = class extends PanelMenu.SystemIndicator {
     _clientGot(obj, result) {
         this._client = NM.Client.new_finish(result);
 
+        // Check if newly created connections should be private or not
+        this._privateConnections = true;
+        let authority = Polkit.Authority.get_sync(null);
+        let credential = new Gio.Credentials();
+        let subject = new Polkit.UnixProcess({ pid: credential.get_unix_pid(), uid: credential.get_unix_user() });
+        let authResult = authority.check_authorization_sync(subject,
+                                                            'org.freedesktop.NetworkManager.settings.modify.system',
+                                                            null /* details */,
+                                                            Polkit.CheckAuthorizationFlags.NONE,
+                                                            null /* cancellable */);
+        if (authResult)
+            this._privateConnections = !authResult.get_is_authorized();
+
         this._activeConnections = [ ];
         this._connections = [ ];
         this._connectivityQueue = [ ];
@@ -1721,7 +1747,7 @@ var NMApplet = class extends PanelMenu.SystemIndicator {
 
         let wrapperClass = this._dtypes[device.get_device_type()];
         if (wrapperClass) {
-            let wrapper = new wrapperClass(this._client, device);
+            let wrapper = new wrapperClass(this._client, device, this._privateConnections);
             device._delegate = wrapper;
             this._addDeviceWrapper(wrapper);
 
-- 
2.16.4

