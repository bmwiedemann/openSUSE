From c5a780698eda5c832bf4c6ac47f818befc578f9e Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Fridrich=20=C5=A0trba?= <fridrich.strba@bluewin.ch>
Date: Sun, 13 Oct 2019 19:05:22 +0200
Subject: [PATCH] Restore Java 8 compatibility

---
 .../fsa/builders/FSA5Serializer.java          |  9 ++++---
 .../morfologik/fsa/ByteSequenceIterator.java  |  9 ++++---
 .../polish/PolishMorfologikStemmerTest.java   |  3 ++-
 .../main/java/morfologik/speller/Speller.java | 15 ++++++-----
 .../java/morfologik/stemming/BufferUtils.java | 25 ++++++++---------
 .../stemming/DictionaryIterator.java          |  9 ++++---
 .../morfologik/stemming/DictionaryLookup.java |  5 ++--
 .../java/morfologik/stemming/NoEncoder.java   | 15 ++++++-----
 .../stemming/TrimInfixAndSuffixEncoder.java   |  9 ++++---
 .../stemming/TrimPrefixAndSuffixEncoder.java  |  7 ++---
 .../stemming/TrimSuffixEncoder.java           | 11 ++++----
 .../java/morfologik/stemming/WordData.java    | 27 ++++++++++---------
 .../java/morfologik/tools/DictCompile.java    |  9 ++++---
 13 files changed, 83 insertions(+), 70 deletions(-)

diff --git a/morfologik-fsa-builders/src/main/java/morfologik/fsa/builders/FSA5Serializer.java b/morfologik-fsa-builders/src/main/java/morfologik/fsa/builders/FSA5Serializer.java
index 4300af2..5760ba5 100644
--- a/morfologik-fsa-builders/src/main/java/morfologik/fsa/builders/FSA5Serializer.java
+++ b/morfologik-fsa-builders/src/main/java/morfologik/fsa/builders/FSA5Serializer.java
@@ -4,6 +4,7 @@ import static morfologik.fsa.FSAFlags.*;
 
 import java.io.IOException;
 import java.io.OutputStream;
+import java.nio.Buffer;
 import java.nio.ByteBuffer;
 import java.util.Arrays;
 import java.util.BitSet;
@@ -298,12 +299,12 @@ public final class FSA5Serializer implements FSASerializer {
       return -1;
     }
 
-    bb.flip();
+    ((Buffer)bb).flip();
     int bytes = bb.remaining();
     if (os != null) {
       os.write(bb.array(), bb.position(), bb.remaining());
     }
-    bb.clear();
+    ((Buffer)bb).clear();
 
     return bytes;
   }
@@ -316,9 +317,9 @@ public final class FSA5Serializer implements FSASerializer {
         number >>>= 8;
       }
 
-      bb.flip();
+      ((Buffer)bb).flip();
       os.write(bb.array(), bb.position(), bb.remaining());
-      bb.clear();
+      ((Buffer)bb).clear();
     }
 
     return nodeDataLength;
diff --git a/morfologik-fsa/src/main/java/morfologik/fsa/ByteSequenceIterator.java b/morfologik-fsa/src/main/java/morfologik/fsa/ByteSequenceIterator.java
index 6676f10..9facb72 100644
--- a/morfologik-fsa/src/main/java/morfologik/fsa/ByteSequenceIterator.java
+++ b/morfologik-fsa/src/main/java/morfologik/fsa/ByteSequenceIterator.java
@@ -1,5 +1,6 @@
 package morfologik.fsa;
 
+import java.nio.Buffer;
 import java.nio.ByteBuffer;
 import java.util.*;
 
@@ -65,7 +66,7 @@ public final class ByteSequenceIterator implements Iterator<ByteBuffer> {
    */
   public ByteSequenceIterator restartFrom(int node) {
     position = 0;
-    bufferWrapper.clear();
+    ((Buffer)bufferWrapper).clear();
     nextElement = null;
 
     pushNode(node);
@@ -137,8 +138,8 @@ public final class ByteSequenceIterator implements Iterator<ByteBuffer> {
       }
 
       if (fsa.isArcFinal(arc)) {
-        bufferWrapper.clear();
-        bufferWrapper.limit(lastIndex + 1);
+        ((Buffer)bufferWrapper).clear();
+        ((Buffer)bufferWrapper).limit(lastIndex + 1);
         return bufferWrapper;
       }
     }
@@ -165,4 +166,4 @@ public final class ByteSequenceIterator implements Iterator<ByteBuffer> {
 
     arcs[position++] = fsa.getFirstArc(node);
   }
-}
\ No newline at end of file
+}
diff --git a/morfologik-polish/src/test/java/morfologik/stemming/polish/PolishMorfologikStemmerTest.java b/morfologik-polish/src/test/java/morfologik/stemming/polish/PolishMorfologikStemmerTest.java
index 25b837e..41e821c 100644
--- a/morfologik-polish/src/test/java/morfologik/stemming/polish/PolishMorfologikStemmerTest.java
+++ b/morfologik-polish/src/test/java/morfologik/stemming/polish/PolishMorfologikStemmerTest.java
@@ -3,6 +3,7 @@ package morfologik.stemming.polish;
 import static org.junit.Assert.*;
 
 import java.io.IOException;
+import java.nio.Buffer;
 import java.nio.ByteBuffer;
 import java.util.ArrayList;
 import java.util.HashSet;
@@ -101,7 +102,7 @@ public class PolishMorfologikStemmerTest {
       // The buffer should be present in tags set.
       assertTrue(tag, tags.contains(tag));
       // Buffer large enough to hold the contents.
-      temp.clear();
+      ((Buffer)temp).clear();
       assertSame(temp, wd.getTagBytes(temp));
       // The copy and the clone should be identical.
       assertEquals(0, copy.compareTo(temp));
diff --git a/morfologik-speller/src/main/java/morfologik/speller/Speller.java b/morfologik-speller/src/main/java/morfologik/speller/Speller.java
index 236aa10..3dde98f 100644
--- a/morfologik-speller/src/main/java/morfologik/speller/Speller.java
+++ b/morfologik-speller/src/main/java/morfologik/speller/Speller.java
@@ -3,6 +3,7 @@ package morfologik.speller;
 import static morfologik.fsa.MatchResult.EXACT_MATCH;
 import static morfologik.fsa.MatchResult.SEQUENCE_IS_A_PREFIX;
 
+import java.nio.Buffer;
 import java.nio.ByteBuffer;
 import java.nio.CharBuffer;
 import java.nio.charset.CharsetDecoder;
@@ -184,7 +185,7 @@ public class Speller {
       final char chr = word.charAt(i);
       charBuffer.put(chr);
     }
-    charBuffer.flip();
+    ((Buffer)charBuffer).flip();
 
     return BufferUtils.charsToBytes(encoder, charBuffer, byteBuffer);
   }
@@ -465,7 +466,7 @@ public class Speller {
       byteBuffer.put(prevBytes);
       byteBuffer.put(fsa.getArcLabel(arc));
       final int bufPos = byteBuffer.position();
-      byteBuffer.flip();
+      ((Buffer)byteBuffer).flip();
       decoder.reset();
       // FIXME: this isn't correct -- no checks for overflows, no decoder flush. I don't think this should be in here
       // too, the decoder should run once on accumulated temporary byte buffer (current path) only when there's
@@ -475,17 +476,17 @@ public class Speller {
       if (c.isMalformed()) { // assume that only valid
         // encodings are there
         final byte[] prev = new byte[bufPos];
-        byteBuffer.position(0);
+        ((Buffer)byteBuffer).position(0);
         byteBuffer.get(prev);
         if (!fsa.isArcTerminal(arc)) {
           findRepl(candidates, depth, fsa.getEndNode(arc), prev, wordIndex, candIndex); // note: depth is not incremented
         }
-        byteBuffer.clear();
+        ((Buffer)byteBuffer).clear();
       } else if (!c.isError()) { // unmappable characters are silently discarded
-        charBuffer.flip();
+        ((Buffer)charBuffer).flip();
         candidate[candIndex] = charBuffer.get();
-        charBuffer.clear();
-        byteBuffer.clear();
+        ((Buffer)charBuffer).clear();
+        ((Buffer)byteBuffer).clear();
 
         int lengthReplacement;
         // replacement "any to two"
diff --git a/morfologik-stemming/src/main/java/morfologik/stemming/BufferUtils.java b/morfologik-stemming/src/main/java/morfologik/stemming/BufferUtils.java
index ee71e4c..f5d3a08 100644
--- a/morfologik-stemming/src/main/java/morfologik/stemming/BufferUtils.java
+++ b/morfologik-stemming/src/main/java/morfologik/stemming/BufferUtils.java
@@ -1,5 +1,6 @@
 package morfologik.stemming;
 
+import java.nio.Buffer;
 import java.nio.ByteBuffer;
 import java.nio.CharBuffer;
 import java.nio.charset.CharacterCodingException;
@@ -35,7 +36,7 @@ public final class BufferUtils {
     if (buffer == null || buffer.capacity() < elements) {
       buffer = ByteBuffer.allocate(elements);
     } else {
-      buffer.clear();
+      ((Buffer)buffer).clear();
     }
     return buffer;
   }
@@ -57,7 +58,7 @@ public final class BufferUtils {
     if (buffer == null || buffer.capacity() < elements) {
       buffer = CharBuffer.allocate(elements);
     } else {
-      buffer.clear();
+      ((Buffer)buffer).clear();
     }
     return buffer;
   }
@@ -87,9 +88,9 @@ public final class BufferUtils {
    */
   public static byte[] toArray(ByteBuffer buffer) {
     byte [] dst = new byte [buffer.remaining()];
-    buffer.mark();
+    ((Buffer)buffer).mark();
     buffer.get(dst);
-    buffer.reset();
+    ((Buffer)buffer).reset();
     return dst;
   }
 
@@ -123,11 +124,11 @@ public final class BufferUtils {
 
     chars = clearAndEnsureCapacity(chars, (int) (bytes.remaining() * decoder.maxCharsPerByte()));
 
-    bytes.mark();
+    ((Buffer)bytes).mark();
     decoder.reset();
     CoderResult cr = decoder.decode(bytes, chars, true);
     if (cr.isError()) {
-      bytes.reset();
+      ((Buffer)bytes).reset();
       try {
         cr.throwException();
       } catch (CharacterCodingException e) {
@@ -140,8 +141,8 @@ public final class BufferUtils {
     cr = decoder.flush(chars);
     assert cr.isUnderflow();
 
-    chars.flip();
-    bytes.reset();
+    ((Buffer)chars).flip();
+    ((Buffer)bytes).reset();
 
     return chars;
   }
@@ -155,12 +156,12 @@ public final class BufferUtils {
 
     bytes = clearAndEnsureCapacity(bytes, (int) (chars.remaining() * encoder.maxBytesPerChar()));
 
-    chars.mark();
+    ((Buffer)chars).mark();
     encoder.reset();
 
     CoderResult cr = encoder.encode(chars, bytes, true);
     if (cr.isError()) {
-      chars.reset();
+      ((Buffer)chars).reset();
       try {
         cr.throwException();
       } catch (CharacterCodingException e) {
@@ -173,8 +174,8 @@ public final class BufferUtils {
     cr = encoder.flush(bytes);
     assert cr.isUnderflow();
 
-    bytes.flip();
-    chars.reset();
+    ((Buffer)bytes).flip();
+    ((Buffer)chars).reset();
 
     return bytes;
   }
diff --git a/morfologik-stemming/src/main/java/morfologik/stemming/DictionaryIterator.java b/morfologik-stemming/src/main/java/morfologik/stemming/DictionaryIterator.java
index 7d02a95..c241865 100644
--- a/morfologik-stemming/src/main/java/morfologik/stemming/DictionaryIterator.java
+++ b/morfologik-stemming/src/main/java/morfologik/stemming/DictionaryIterator.java
@@ -1,5 +1,6 @@
 package morfologik.stemming;
 
+import java.nio.Buffer;
 import java.nio.ByteBuffer;
 import java.nio.CharBuffer;
 import java.nio.charset.CharsetDecoder;
@@ -56,7 +57,7 @@ public final class DictionaryIterator implements Iterator<WordData> {
 
     inflectedBuffer = BufferUtils.clearAndEnsureCapacity(inflectedBuffer, sepPos);
     inflectedBuffer.put(ba, 0, sepPos);
-    inflectedBuffer.flip();
+    ((Buffer)inflectedBuffer).flip();
 
     inflectedCharBuffer = BufferUtils.bytesToChars(decoder, inflectedBuffer, inflectedCharBuffer);
     entry.update(inflectedBuffer, inflectedCharBuffer);
@@ -64,7 +65,7 @@ public final class DictionaryIterator implements Iterator<WordData> {
     temp = BufferUtils.clearAndEnsureCapacity(temp, bbSize - sepPos);
     sepPos++;
     temp.put(ba, sepPos, bbSize - sepPos);
-    temp.flip();
+    ((Buffer)temp).flip();
 
     ba = temp.array();
     bbSize = temp.remaining();
@@ -89,7 +90,7 @@ public final class DictionaryIterator implements Iterator<WordData> {
     } else {
       entry.stemBuffer = BufferUtils.clearAndEnsureCapacity(entry.stemBuffer, sepPos);
       entry.stemBuffer.put(ba, 0, sepPos);
-      entry.stemBuffer.flip();
+      ((Buffer)(entry.stemBuffer)).flip();
     }
 
     // Skip separator character, if present.
@@ -102,7 +103,7 @@ public final class DictionaryIterator implements Iterator<WordData> {
      */
     entry.tagBuffer = BufferUtils.clearAndEnsureCapacity(entry.tagBuffer, bbSize - sepPos);
     entry.tagBuffer.put(ba, sepPos, bbSize - sepPos);
-    entry.tagBuffer.flip();
+    ((Buffer)(entry.tagBuffer)).flip();
 
     return entry;
   }
diff --git a/morfologik-stemming/src/main/java/morfologik/stemming/DictionaryLookup.java b/morfologik-stemming/src/main/java/morfologik/stemming/DictionaryLookup.java
index f19ad2a..5f736b3 100644
--- a/morfologik-stemming/src/main/java/morfologik/stemming/DictionaryLookup.java
+++ b/morfologik-stemming/src/main/java/morfologik/stemming/DictionaryLookup.java
@@ -2,6 +2,7 @@ package morfologik.stemming;
 
 import static morfologik.fsa.MatchResult.SEQUENCE_IS_A_PREFIX;
 
+import java.nio.Buffer;
 import java.nio.ByteBuffer;
 import java.nio.CharBuffer;
 import java.nio.charset.CharsetDecoder;
@@ -148,7 +149,7 @@ public final class DictionaryLookup implements IStemmer, Iterable<WordData> {
       }
       charBuffer.put(chr);
     }
-    charBuffer.flip();
+    ((Buffer)charBuffer).flip();
     try {
       byteBuffer = BufferUtils.charsToBytes(encoder, charBuffer, byteBuffer);
     } catch (UnmappableInputException e) {
@@ -230,7 +231,7 @@ public final class DictionaryLookup implements IStemmer, Iterable<WordData> {
           if (tagSize > 0) {
             wordData.tagBuffer = BufferUtils.clearAndEnsureCapacity(wordData.tagBuffer, tagSize);
             wordData.tagBuffer.put(ba, sepPos, tagSize);
-            wordData.tagBuffer.flip();
+            ((Buffer)(wordData.tagBuffer)).flip();
           }
         }
 
diff --git a/morfologik-stemming/src/main/java/morfologik/stemming/NoEncoder.java b/morfologik-stemming/src/main/java/morfologik/stemming/NoEncoder.java
index 882f27e..824850b 100644
--- a/morfologik-stemming/src/main/java/morfologik/stemming/NoEncoder.java
+++ b/morfologik-stemming/src/main/java/morfologik/stemming/NoEncoder.java
@@ -1,5 +1,6 @@
 package morfologik.stemming;
 
+import java.nio.Buffer;
 import java.nio.ByteBuffer;
 
 /**
@@ -10,10 +11,10 @@ public class NoEncoder implements ISequenceEncoder {
   public ByteBuffer encode(ByteBuffer reuse, ByteBuffer source, ByteBuffer target) {
     reuse = BufferUtils.clearAndEnsureCapacity(reuse, target.remaining());
 
-    target.mark();
-    reuse.put(target)
+    ((Buffer)target).mark();
+    ((Buffer)(reuse.put(target)))
          .flip();
-    target.reset();
+    ((Buffer)target).reset();
 
     return reuse;
   }
@@ -22,10 +23,10 @@ public class NoEncoder implements ISequenceEncoder {
   public ByteBuffer decode(ByteBuffer reuse, ByteBuffer source, ByteBuffer encoded) {
     reuse = BufferUtils.clearAndEnsureCapacity(reuse, encoded.remaining());
 
-    encoded.mark();
-    reuse.put(encoded)
+    ((Buffer)encoded).mark();
+    ((Buffer)(reuse.put(encoded)))
          .flip();
-    encoded.reset();
+    ((Buffer)encoded).reset();
          
     return reuse;
   }
@@ -39,4 +40,4 @@ public class NoEncoder implements ISequenceEncoder {
   public String toString() {
     return getClass().getSimpleName();
   }
-}
\ No newline at end of file
+}
diff --git a/morfologik-stemming/src/main/java/morfologik/stemming/TrimInfixAndSuffixEncoder.java b/morfologik-stemming/src/main/java/morfologik/stemming/TrimInfixAndSuffixEncoder.java
index 1812fd4..f3e0c31 100644
--- a/morfologik-stemming/src/main/java/morfologik/stemming/TrimInfixAndSuffixEncoder.java
+++ b/morfologik-stemming/src/main/java/morfologik/stemming/TrimInfixAndSuffixEncoder.java
@@ -1,5 +1,6 @@
 package morfologik.stemming;
 
+import java.nio.Buffer;
 import java.nio.ByteBuffer;
 
 /**
@@ -67,7 +68,7 @@ public class TrimInfixAndSuffixEncoder implements ISequenceEncoder {
         scratch = BufferUtils.clearAndEnsureCapacity(scratch, i + len2);
         scratch.put(source.array(), 0, i);
         scratch.put(source.array(), i + j, len2);
-        scratch.flip();
+        ((Buffer)scratch).flip();
 
         int sharedPrefix = BufferUtils.sharedPrefixLength(scratch, target);
 
@@ -104,7 +105,7 @@ public class TrimInfixAndSuffixEncoder implements ISequenceEncoder {
     reuse.put((byte) ((maxInfixLength + 'A') & 0xFF));
     reuse.put((byte) ((truncateSuffixBytes + 'A') & 0xFF));
     reuse.put(target.array(), maxSubsequenceLength, len1);
-    reuse.flip();
+    ((Buffer)reuse).flip();
 
     return reuse;
   }
@@ -144,7 +145,7 @@ public class TrimInfixAndSuffixEncoder implements ISequenceEncoder {
     reuse.put(source.array(), 0, infixIndex);
     reuse.put(source.array(), infixIndex + infixLength, len1);
     reuse.put(encoded.array(), 3, len2);
-    reuse.flip();
+    ((Buffer)reuse).flip();
 
     return reuse;
   }
@@ -153,4 +154,4 @@ public class TrimInfixAndSuffixEncoder implements ISequenceEncoder {
   public String toString() {
     return getClass().getSimpleName();
   }
-}
\ No newline at end of file
+}
diff --git a/morfologik-stemming/src/main/java/morfologik/stemming/TrimPrefixAndSuffixEncoder.java b/morfologik-stemming/src/main/java/morfologik/stemming/TrimPrefixAndSuffixEncoder.java
index 59d7681..1056234 100644
--- a/morfologik-stemming/src/main/java/morfologik/stemming/TrimPrefixAndSuffixEncoder.java
+++ b/morfologik-stemming/src/main/java/morfologik/stemming/TrimPrefixAndSuffixEncoder.java
@@ -1,5 +1,6 @@
 package morfologik.stemming;
 
+import java.nio.Buffer;
 import java.nio.ByteBuffer;
 
 /**
@@ -69,7 +70,7 @@ public class TrimPrefixAndSuffixEncoder implements ISequenceEncoder {
     reuse.put((byte) ((truncatePrefixBytes + 'A') & 0xFF));
     reuse.put((byte) ((truncateSuffixBytes + 'A') & 0xFF));
     reuse.put(target.array(), maxSubsequenceLength, len1);
-    reuse.flip();
+    ((Buffer)reuse).flip();
 
     return reuse;
   }
@@ -106,7 +107,7 @@ public class TrimPrefixAndSuffixEncoder implements ISequenceEncoder {
 
     reuse.put(source.array(), truncatePrefixBytes, len1);
     reuse.put(encoded.array(), 2, len2);
-    reuse.flip();
+    ((Buffer)reuse).flip();
 
     return reuse;
   }
@@ -115,4 +116,4 @@ public class TrimPrefixAndSuffixEncoder implements ISequenceEncoder {
   public String toString() {
     return getClass().getSimpleName();
   }
-}
\ No newline at end of file
+}
diff --git a/morfologik-stemming/src/main/java/morfologik/stemming/TrimSuffixEncoder.java b/morfologik-stemming/src/main/java/morfologik/stemming/TrimSuffixEncoder.java
index 45441d4..3bc8d18 100644
--- a/morfologik-stemming/src/main/java/morfologik/stemming/TrimSuffixEncoder.java
+++ b/morfologik-stemming/src/main/java/morfologik/stemming/TrimSuffixEncoder.java
@@ -1,5 +1,6 @@
 package morfologik.stemming;
 
+import java.nio.Buffer;
 import java.nio.ByteBuffer;
 
 /**
@@ -49,8 +50,8 @@ public class TrimSuffixEncoder implements ISequenceEncoder {
            target.arrayOffset() == 0;
 
     final byte suffixTrimCode = (byte) (truncateBytes + 'A');
-    reuse.put(suffixTrimCode)
-         .put(target.array(), sharedPrefix, target.remaining() - sharedPrefix)
+    ((Buffer)(reuse.put(suffixTrimCode)
+         .put(target.array(), sharedPrefix, target.remaining() - sharedPrefix)))
          .flip();
 
     return reuse;
@@ -83,8 +84,8 @@ public class TrimSuffixEncoder implements ISequenceEncoder {
            encoded.position() == 0 && 
            encoded.arrayOffset() == 0;
 
-    reuse.put(source.array(), 0, len1)
-         .put(encoded.array(), 1, len2)
+    ((Buffer)(reuse.put(source.array(), 0, len1)
+         .put(encoded.array(), 1, len2)))
          .flip();
 
     return reuse;
@@ -94,4 +95,4 @@ public class TrimSuffixEncoder implements ISequenceEncoder {
   public String toString() {
     return getClass().getSimpleName();
   }
-}
\ No newline at end of file
+}
diff --git a/morfologik-stemming/src/main/java/morfologik/stemming/WordData.java b/morfologik-stemming/src/main/java/morfologik/stemming/WordData.java
index 4229a49..bc84930 100644
--- a/morfologik-stemming/src/main/java/morfologik/stemming/WordData.java
+++ b/morfologik-stemming/src/main/java/morfologik/stemming/WordData.java
@@ -1,6 +1,7 @@
 package morfologik.stemming;
 
 import java.io.UnsupportedEncodingException;
+import java.nio.Buffer;
 import java.nio.ByteBuffer;
 import java.nio.CharBuffer;
 import java.nio.charset.*;
@@ -105,10 +106,10 @@ public final class WordData implements Cloneable {
 	 */
 	public ByteBuffer getStemBytes(ByteBuffer target) {
 		target = BufferUtils.clearAndEnsureCapacity(target, stemBuffer.remaining());
-		stemBuffer.mark();
+		((Buffer)stemBuffer).mark();
 		target.put(stemBuffer);
-		stemBuffer.reset();
-		target.flip();
+		((Buffer)stemBuffer).reset();
+		((Buffer)target).flip();
 		return target;
 	}
 
@@ -127,10 +128,10 @@ public final class WordData implements Cloneable {
 	 */
 	public ByteBuffer getTagBytes(ByteBuffer target) {
 		target = BufferUtils.clearAndEnsureCapacity(target, tagBuffer.remaining());
-		tagBuffer.mark();
+		((Buffer)tagBuffer).mark();
 		target.put(tagBuffer);
-		tagBuffer.reset();
-		target.flip();
+		((Buffer)tagBuffer).reset();
+		((Buffer)target).flip();
 		return target;
 	}
 
@@ -150,10 +151,10 @@ public final class WordData implements Cloneable {
 	 */
 	public ByteBuffer getWordBytes(ByteBuffer target) {
 		target = BufferUtils.clearAndEnsureCapacity(target, wordBuffer.remaining());
-		wordBuffer.mark();
+		((Buffer)wordBuffer).mark();
 		target.put(wordBuffer);
-		wordBuffer.reset();
-		target.flip();
+		((Buffer)wordBuffer).reset();
+		((Buffer)target).flip();
 		return target;
 	}
 
@@ -231,10 +232,10 @@ public final class WordData implements Cloneable {
 	}
 
   void update(ByteBuffer wordBuffer, CharSequence word) {
-    this.stemCharSequence.clear();
-    this.tagCharSequence.clear();
-    this.stemBuffer.clear();
-    this.tagBuffer.clear();
+    ((Buffer)(this.stemCharSequence)).clear();
+    ((Buffer)(this.tagCharSequence)).clear();
+    ((Buffer)(this.stemBuffer)).clear();
+    ((Buffer)(this.tagBuffer)).clear();
 
     this.wordBuffer = wordBuffer;
     this.wordCharSequence = word;
diff --git a/morfologik-tools/src/main/java/morfologik/tools/DictCompile.java b/morfologik-tools/src/main/java/morfologik/tools/DictCompile.java
index 6d96a36..0606929 100644
--- a/morfologik-tools/src/main/java/morfologik/tools/DictCompile.java
+++ b/morfologik-tools/src/main/java/morfologik/tools/DictCompile.java
@@ -4,6 +4,7 @@ import java.io.BufferedInputStream;
 import java.io.BufferedOutputStream;
 import java.io.InputStream;
 import java.io.OutputStream;
+import java.nio.Buffer;
 import java.nio.ByteBuffer;
 import java.nio.charset.CharsetDecoder;
 import java.nio.charset.CodingErrorAction;
@@ -152,19 +153,19 @@ public class DictCompile extends CliTool {
 
       source = BufferUtils.clearAndEnsureCapacity(source, sep1);
       source.put(row, 0, sep1);
-      source.flip();
+      ((Buffer)source).flip();
 
       final int len = sep2 - (sep1 + 1);
       target = BufferUtils.clearAndEnsureCapacity(target, len);
       target.put(row, sep1 + 1, len);
-      target.flip();
+      ((Buffer)target).flip();
 
       final int len2 = row.length - (sep2 + 1);
       tag = BufferUtils.clearAndEnsureCapacity(tag, len2);
       if (len2 > 0) {
         tag.put(row, sep2 + 1, len2);
       }
-      tag.flip();
+      ((Buffer)tag).flip();
 
       encoded = sequenceEncoder.encode(encoded, target, source);
 
@@ -180,7 +181,7 @@ public class DictCompile extends CliTool {
         assembled.put(separator);
         assembled.put(tag);
       }
-      assembled.flip();
+      ((Buffer)assembled).flip();
 
       sequences.set(i, BufferUtils.toArray(assembled));
     }
-- 
2.23.0

