From: =?utf-8?b?Ik1hcmNvIFRyZXZpc2FuIChUcmV2acOxbyki?= <mail@3v1n0.net>
Date: Tue, 18 Feb 2020 18:31:32 +0100
Subject: tests: Adapt formatted strings results to system ICU

Make sure that all the tests which check the formatted strings pass, when
using system ICU, adapting the expected strings to what we've in debian and
in particular:

 - Added alternative Timezone (the acronym of it) to timezone tests
 - Check relative time format using system ICU values

This is just better than skipping these tests all-together as we'd otherwise
loose the ability of check other codepaths.

Upstream should probably provide a way to detect if system ICU is enabled
and allow one to provide an override in such case.

Related upstream changes:
  - https://hg.mozilla.org/mozilla-central/rev/7b1a3a49547d

Forwarded: no
---
 .../tests/non262/Date/toString-localized-posix.js  | 30 ++++++++--------
 js/src/tests/non262/Date/toString-localized.js     | 40 +++++++++++-----------
 .../tests/non262/Intl/RelativeTimeFormat/format.js |  8 ++---
 .../prototype/format/en-us-numeric-auto.js         | 10 ++++++
 4 files changed, 49 insertions(+), 39 deletions(-)

Index: firefox-68.6.0/js/src/tests/non262/Date/toString-localized-posix.js
===================================================================
--- firefox-68.6.0.orig/js/src/tests/non262/Date/toString-localized-posix.js
+++ firefox-68.6.0/js/src/tests/non262/Date/toString-localized-posix.js
@@ -9,19 +9,19 @@ inTimeZone("PST8PDT", () => {
     let dt = new Date(2018, Month.July, 14);
 
     withLocale("en", () => {
-        assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT-0700 (Pacific Daylight Time)");
+        assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT-0700 (Pacific Daylight Time)", "PDT");
     });
     withLocale("fr", () => {
-        assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT-0700 (heure d’été du Pacifique)");
+        assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT-0700 (heure d’été du Pacifique)", "PDT");
     });
     withLocale("de", () => {
-        assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT-0700 (Nordamerikanische Westküsten-Sommerzeit)");
+        assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT-0700 (Nordamerikanische Westküsten-Sommerzeit)", "PDT");
     });
     withLocale("ar", () => {
-        assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT-0700 (توقيت المحيط الهادي الصيفي)");
+        assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT-0700 (توقيت المحيط الهادي الصيفي)", "PDT");
     });
     withLocale("zh", () => {
-        assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT-0700 (北美太平洋夏令时间)");
+        assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT-0700 (北美太平洋夏令时间)", "PDT");
     });
 });
 
@@ -30,19 +30,19 @@ for (let tz of ["UTC", "UCT"]) {
         let dt = new Date(2018, Month.July, 14);
 
         withLocale("en", () => {
-            assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT+0000 (Coordinated Universal Time)");
+            assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT+0000 (Coordinated Universal Time)", "UTC");
         });
         withLocale("fr", () => {
-            assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT+0000 (Temps universel coordonné)");
+            assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT+0000 (Temps universel coordonné)", "UTC");
         });
         withLocale("de", () => {
-            assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT+0000 (Koordinierte Weltzeit)");
+            assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT+0000 (Koordinierte Weltzeit)", "UTC");
         });
         withLocale("ar", () => {
-            assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT+0000 (التوقيت العالمي المنسق)");
+            assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT+0000 (التوقيت العالمي المنسق)", "UTC");
         });
         withLocale("zh", () => {
-            assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT+0000 (协调世界时)");
+            assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT+0000 (协调世界时)", "UTC");
         });
     });
 }
@@ -51,19 +51,19 @@ inTimeZone("GMT", () => {
     let dt = new Date(2018, Month.July, 14);
 
     withLocale("en", () => {
-        assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT+0000 (Greenwich Mean Time)");
+        assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT+0000 (Greenwich Mean Time)", "GMT");
     });
     withLocale("fr", () => {
-        assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT+0000 (heure moyenne de Greenwich)");
+        assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT+0000 (heure moyenne de Greenwich)", "GMT");
     });
     withLocale("de", () => {
-        assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT+0000 (Mittlere Greenwich-Zeit)");
+        assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT+0000 (Mittlere Greenwich-Zeit)", "GMT");
     });
     withLocale("ar", () => {
-        assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT+0000 (توقيت غرينتش)");
+        assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT+0000 (توقيت غرينتش)", "GMT");
     });
     withLocale("zh", () => {
-        assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT+0000 (格林尼治标准时间)");
+        assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT+0000 (格林尼治标准时间)", "GMT");
     });
 });
 
Index: firefox-68.6.0/js/src/tests/non262/Date/toString-localized.js
===================================================================
--- firefox-68.6.0.orig/js/src/tests/non262/Date/toString-localized.js
+++ firefox-68.6.0/js/src/tests/non262/Date/toString-localized.js
@@ -6,19 +6,19 @@ inTimeZone("Europe/Paris", () => {
     let dt = new Date(2018, Month.July, 14);
 
     withLocale("en", () => {
-        assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT+0200 (Central European Summer Time)");
+        assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT+0200 (Central European Summer Time)", "CEST");
     });
     withLocale("fr", () => {
-        assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT+0200 (heure d’été d’Europe centrale)");
+        assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT+0200 (heure d’été d’Europe centrale)", "CEST");
     });
     withLocale("de", () => {
-        assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT+0200 (Mitteleuropäische Sommerzeit)");
+        assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT+0200 (Mitteleuropäische Sommerzeit)", "CEST");
     });
     withLocale("ar", () => {
-        assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT+0200 (توقيت وسط أوروبا الصيفي)");
+        assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT+0200 (توقيت وسط أوروبا الصيفي)", "CEST");
     });
     withLocale("zh", () => {
-        assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT+0200 (中欧夏令时间)");
+        assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT+0200 (中欧夏令时间)", "CEST");
     });
 });
 
@@ -26,19 +26,19 @@ inTimeZone("America/Los_Angeles", () =>
     let dt = new Date(2018, Month.July, 14);
 
     withLocale("en", () => {
-        assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT-0700 (Pacific Daylight Time)");
+        assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT-0700 (Pacific Daylight Time)", "PDT");
     });
     withLocale("fr", () => {
-        assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT-0700 (heure d’été du Pacifique)");
+        assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT-0700 (heure d’été du Pacifique)", "PDT");
     });
     withLocale("de", () => {
-        assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT-0700 (Nordamerikanische Westküsten-Sommerzeit)");
+        assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT-0700 (Nordamerikanische Westküsten-Sommerzeit)", "PDT");
     });
     withLocale("ar", () => {
-        assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT-0700 (توقيت المحيط الهادي الصيفي)");
+        assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT-0700 (توقيت المحيط الهادي الصيفي)", "PDT");
     });
     withLocale("zh", () => {
-        assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT-0700 (北美太平洋夏令时间)");
+        assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT-0700 (北美太平洋夏令时间)", "PDT");
     });
 });
 
@@ -47,19 +47,19 @@ for (let tz of ["UTC", "UCT", "Zulu", "U
         let dt = new Date(2018, Month.July, 14);
 
         withLocale("en", () => {
-            assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT+0000 (Coordinated Universal Time)");
+            assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT+0000 (Coordinated Universal Time)", "UTC");
         });
         withLocale("fr", () => {
-            assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT+0000 (Temps universel coordonné)");
+            assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT+0000 (Temps universel coordonné)", "UTC");
         });
         withLocale("de", () => {
-            assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT+0000 (Koordinierte Weltzeit)");
+            assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT+0000 (Koordinierte Weltzeit)", "UTC");
         });
         withLocale("ar", () => {
-            assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT+0000 (التوقيت العالمي المنسق)");
+            assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT+0000 (التوقيت العالمي المنسق)", "UTC");
         });
         withLocale("zh", () => {
-            assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT+0000 (协调世界时)");
+            assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT+0000 (协调世界时)", "UTC");
         });
     });
 }
@@ -69,19 +69,19 @@ for (let tz of ["GMT", "Etc/GMT"]) {
         let dt = new Date(2018, Month.July, 14);
 
         withLocale("en", () => {
-            assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT+0000 (Greenwich Mean Time)");
+            assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT+0000 (Greenwich Mean Time)", "GMT");
         });
         withLocale("fr", () => {
-            assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT+0000 (heure moyenne de Greenwich)");
+            assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT+0000 (heure moyenne de Greenwich)", "GMT");
         });
         withLocale("de", () => {
-            assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT+0000 (Mittlere Greenwich-Zeit)");
+            assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT+0000 (Mittlere Greenwich-Zeit)", "GMT");
         });
         withLocale("ar", () => {
-            assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT+0000 (توقيت غرينتش)");
+            assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT+0000 (توقيت غرينتش)", "GMT");
         });
         withLocale("zh", () => {
-            assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT+0000 (格林尼治标准时间)");
+            assertDateTime(dt, "Sat Jul 14 2018 00:00:00 GMT+0000 (格林尼治标准时间)", "GMT");
         });
     });
 }
Index: firefox-68.6.0/js/src/tests/non262/Intl/RelativeTimeFormat/format.js
===================================================================
--- firefox-68.6.0.orig/js/src/tests/non262/Intl/RelativeTimeFormat/format.js
+++ firefox-68.6.0/js/src/tests/non262/Intl/RelativeTimeFormat/format.js
@@ -15,13 +15,13 @@ var rtf;
   assertEq(rtf.format(-1, "second"), "1 second ago");
   assertEq(rtf.format(1, "second"), "in 1 second");
 
-  assertEq(rtf.format(0, "minute"), "in 0 minutes");
-  assertEq(rtf.format(-0, "minute"), "0 minutes ago");
+  assertEq(rtf.format(0, "minute"), "this minute");
+  assertEq(rtf.format(-0, "minute"), "this minute");
   assertEq(rtf.format(-1, "minute"), "1 minute ago");
   assertEq(rtf.format(1, "minute"), "in 1 minute");
 
-  assertEq(rtf.format(0, "hour"), "in 0 hours");
-  assertEq(rtf.format(-0, "hour"), "0 hours ago");
+  assertEq(rtf.format(0, "hour"), "this hour");
+  assertEq(rtf.format(-0, "hour"), "this hour");
   assertEq(rtf.format(-1, "hour"), "1 hour ago");
   assertEq(rtf.format(1, "hour"), "in 1 hour");
 
Index: firefox-68.6.0/js/src/tests/test262/intl402/RelativeTimeFormat/prototype/format/en-us-numeric-auto.js
===================================================================
--- firefox-68.6.0.orig/js/src/tests/test262/intl402/RelativeTimeFormat/prototype/format/en-us-numeric-auto.js
+++ firefox-68.6.0/js/src/tests/test262/intl402/RelativeTimeFormat/prototype/format/en-us-numeric-auto.js
@@ -55,6 +55,16 @@ const exceptions = {
     "0": "now",
     "1": "in 1 second",
   },
+  "minute": {
+    "-1": "1 minute ago",
+    "0": "this minute",
+    "1": "in 1 minute",
+  },
+  "hour": {
+    "-1": "1 hour ago",
+    "0": "this hour",
+    "1": "in 1 hour",
+  },
 };
 
 for (const unit of units) {
