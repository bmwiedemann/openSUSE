<?xml version="1.0" encoding="UTF-8"?>

<project name="maven-javadoc-plugin" default="package" basedir=".">

  <!-- ====================================================================== -->
  <!-- Build environment properties                                           -->
  <!-- ====================================================================== -->

  <property file="build.properties"/>

  <property name="project.name" value="Apache Maven Javadoc Plugin"/>
  <!-- not used in this build.xml file, but used for filtering the bootstrap resources -->
  <property name="project.description"
            value="The Apache Maven Javadoc Plugin is a plugin that uses the javadoc tool for generating javadocs for the specified project."/>
  <property name="project.groupId" value="org.apache.maven.plugins"/>
  <property name="project.artifactId" value="maven-javadoc-plugin"/>
  <property name="project.version" value="3.1.1"/>
  <property name="project.organization.name" value="The Apache Software Foundation"/>

  <property name="spec.version" value="3.1"/>

  <property name="compiler.source" value="1.7"/>
  <property name="compiler.target" value="${compiler.source}"/>

  <property name="build.finalName" value="${project.artifactId}-${project.version}"/>
  <property name="build.dir" value="target"/>
  <property name="build.outputDir" value="${build.dir}/classes"/>
  <property name="build.srcDir" value="src/main/java"/>
  <property name="build.resourceDir" value="src/main/resources"/>
  <property name="build.filteredResourceDir" value="src/main/filtered-resources"/>
  <property name="build.testOutputDir" value="${build.dir}/test-classes"/>
  <property name="build.testDir" value="src/test/java"/>
  <property name="build.testResourceDir" value="src/test/resources"/>
  <property name="test.reports" value="${build.dir}/test-reports"/>
  <property name="reporting.outputDirectory" value="${build.dir}/site"/>

  <property name="build.mdoDir" value="src/main/mdo"/>
  <property name="build.mdoOutputDir" value="${build.dir}/generated-sources/modello"/>

  <!-- ====================================================================== -->
  <!-- Defining classpaths                                                    -->
  <!-- ====================================================================== -->

  <path id="build.classpath">
    <fileset dir="lib">
      <include name="**/*.jar"/>
    </fileset>
  </path>
  <path id="build.test.classpath">
    <fileset dir="lib">
      <include name="**/*.jar"/>
    </fileset>
  </path>

  <!-- ====================================================================== -->
  <!-- Cleaning up target                                                     -->
  <!-- ====================================================================== -->

  <target name="clean" description="Clean the output directory">
    <delete dir="${build.dir}"/>
  </target>

  <!-- ====================================================================== -->
  <!-- Code generation target                                                 -->
  <!-- ====================================================================== -->

  <target name="mdo" description="Generate sources from mdo files">
    <mkdir dir="${build.mdoOutputDir}"/>
    <macrodef name="modello-single-mode">
      <attribute name="file"/>
      <attribute name="mode"/>
      <attribute name="version"/>
      <sequential>
        <exec executable="modello" failonerror="true">
          <arg file="@{file}"/> <!-- model file -->
          <arg value="@{mode}"/> <!-- output type -->
          <arg file="${build.mdoOutputDir}"/> <!-- output directory -->
          <arg value="@{version}"/> <!-- model version -->
          <arg value="false"/> <!-- package with version -->
          <arg value="true"/> <!-- use Java 5 -->
        </exec>
      </sequential>
    </macrodef>
    <macrodef name="modello">
      <attribute name="file"/>
      <attribute name="version" default="1.1.0"/>
      <sequential>
        <echo taskname="modello" message="Generating sources for @{file}"/>
        <modello-single-mode file="@{file}" version="@{version}" mode="java"/>
        <modello-single-mode file="@{file}" version="@{version}" mode="xpp3-reader"/>
        <modello-single-mode file="@{file}" version="@{version}" mode="xpp3-writer"/>
      </sequential>
    </macrodef>
    <modello file="${build.mdoDir}/javadocOptions.mdo"/>
  </target>

  <!-- ====================================================================== -->
  <!-- Compilation target                                                     -->
  <!-- ====================================================================== -->

  <target name="compile" depends="mdo" description="Compile the code">
    <mkdir dir="${build.outputDir}"/>
    <javac destdir="${build.outputDir}"
           nowarn="false"
           debug="true"
           encoding="UTF-8"
           optimize="false"
           deprecation="true"
           target="${compiler.target}"
           verbose="false"
           fork="false"
           source="${compiler.source}">
      <src>
        <pathelement location="${build.srcDir}"/>
        <pathelement location="${build.mdoOutputDir}"/>
      </src>
      <classpath refid="build.classpath"/>
    </javac>
    <copy todir="${build.outputDir}">
      <fileset dir="${build.resourceDir}"/>
    </copy>
    <copy todir="${build.outputDir}">
      <fileset dir="${build.filteredResourceDir}"/>
      <filterchain>
        <expandproperties>
          <propertyset>
            <propertyref name="project.name"/>
            <propertyref name="project.version"/>
            <propertyref name="project.groupId"/>
            <propertyref name="project.artifactId"/>
            <propertyref name="project.description"/>
          </propertyset>
        </expandproperties>
      </filterchain>
    </copy>
    <mkdir dir="${build.outputDir}/META-INF/maven/${project.groupId}/${project.artifactId}"/>
    <propertyfile file="${build.outputDir}/META-INF/maven/${project.groupId}/${project.artifactId}/pom.properties">
       <entry  key="artifactId" value="${project.artifactId}"/>
       <entry  key="groupId" value="${project.groupId}"/>
       <entry  key="version" value="${project.version}"/>
    </propertyfile>
    <copy file="pom.xml" tofile="${build.outputDir}/META-INF/maven/${project.groupId}/${project.artifactId}/pom.xml"/>
  </target>

  <!-- ====================================================================== -->
  <!-- Target to generate Plexus component.xml                                -->
  <!-- ====================================================================== -->

  <target name="plexus"
          depends="compile"
          description="Generate Plexus component.xml">
    <mkdir dir="${build.outputDir}/META-INF/plexus"/>
    <java classname="org.codehaus.plexus.metadata.PlexusMetadataGeneratorCli"
          failonerror="true"
          fork="true">
      <!-- <jvmarg value="-verbose"/> -->
      <classpath>
        <path refid="build.classpath"/>
        <pathelement location="${build.outputDir}"/>
      </classpath>
      <arg value="-X"/>
      <arg value="-s"/>
      <arg value="${build.srcDir}"/>
      <arg value="-c"/>
      <arg value="${build.outputDir}"/>
      <arg value="-m"/>
      <arg value="${build.outputDir}/META-INF/plexus"/>
      <arg value="-o"/>
      <arg value="${build.outputDir}/META-INF/plexus/components.xml"/>
    </java>
  </target>

  <!-- ====================================================================== -->
  <!-- Test-compilation target                                                -->
  <!-- ====================================================================== -->

  <target name="compile-tests"
          depends="plexus"
          description="Compile the test code"
          unless="test.skip">
    <mkdir dir="${build.testOutputDir}"/>
    <javac destdir="${build.testOutputDir}"
           nowarn="false"
           debug="true"
           encoding="UTF-8"
           optimize="false"
           deprecation="true"
           target="${compiler.target}"
           verbose="false"
           fork="false"
           source="${compiler.source}">
      <src>
        <pathelement location="${build.testDir}"/>
      </src>
      <classpath>
        <path refid="build.test.classpath"/>
        <pathelement location="${build.outputDir}"/>
      </classpath>
    </javac>
    <copy todir="${build.testOutputDir}">
      <fileset dir="${build.testResourceDir}"/>
    </copy>
  </target>

  <!-- ====================================================================== -->
  <!-- Target to generate Plexus component.xml                                -->
  <!-- ====================================================================== -->

  <target name="plexus-tests"
          depends="compile-tests"
          description="Generate Plexus component.xml for tests"
          unless="test.skip">
    <mkdir dir="${build.outputDir}/META-INF/plexus"/>
    <java classname="org.codehaus.plexus.metadata.PlexusMetadataGeneratorCli"
          failonerror="true"
          fork="true">
      <!-- <jvmarg value="-verbose"/> -->
      <classpath>
        <path refid="build.testclasspath"/>
        <pathelement location="${build.outputDir}"/>
        <pathelement location="${build.restOutputDir}"/>
      </classpath>
      <arg value="-X"/>
      <arg value="-s"/>
      <arg value="${build.testDir}"/>
      <arg value="-c"/>
      <arg value="${build.restOutputDir}"/>
      <arg value="-m"/>
      <arg value="${build.restOutputDir}/META-INF/plexus"/>
      <arg value="-o"/>
      <arg value="${build.restOutputDir}/META-INF/plexus/components.xml"/>
    </java>
  </target>

  <!-- ====================================================================== -->
  <!-- Run all tests                                                          -->
  <!-- ====================================================================== -->

  <target name="test"
          depends="plexus-tests, junit-missing"
          unless="junit.skipped"
          description="Run the test cases">
    <mkdir dir="${test.reports}"/>
    <junit printSummary="yes" haltonerror="true" haltonfailure="true" fork="true" dir=".">
      <sysproperty key="basedir" value="."/>
      <formatter type="xml"/>
      <formatter type="plain" usefile="false"/>
      <classpath>
        <path refid="build.test.classpath"/>
        <pathelement location="${build.outputDir}"/>
        <pathelement location="${build.testOutputDir}"/>
      </classpath>
      <batchtest todir="${test.reports}" unless="test">
        <fileset dir="${build.testDir}">
          <include name="**/Test*.java"/>
          <include name="**/*Test.java"/>
          <include name="**/*TestCase.java"/>
          <exclude name="**/*Abstract*Test.java"/>
        </fileset>
      </batchtest>
      <batchtest todir="${test.reports}" if="test">
        <fileset dir="${build.testDir}">
          <include name="**/${test}.java"/>
          <exclude name="**/*Abstract*Test.java"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="test-junit-present">
    <available classname="junit.framework.Test" property="junit.present" classpathref="build.test.classpath"/>
  </target>

  <target name="test-junit-status"
          depends="test-junit-present">
    <condition property="junit.missing">
      <and>
        <isfalse value="${junit.present}"/>
        <isfalse value="${test.skip}"/>
      </and>
    </condition>
    <condition property="junit.skipped">
      <or>
        <isfalse value="${junit.present}"/>
        <istrue value="${test.skip}"/>
      </or>
    </condition>
  </target>

  <target name="junit-missing"
          depends="test-junit-status"
          if="junit.missing">
    <echo>=================================== WARNING ===================================</echo>
    <echo> JUnit is not present in the test classpath or your $ANT_HOME/lib directory. Tests not executed.</echo>
    <echo>===============================================================================</echo>
  </target>

  <!-- ====================================================================== -->
  <!-- Javadoc target                                                         -->
  <!-- ====================================================================== -->

  <target name="javadoc" depends="mdo" description="Generates the Javadoc of the application">
    <path id="src.path">
        <pathelement location="${build.srcDir}"/>
        <pathelement location="${build.mdoOutputDir}"/>
    </path>
    <javadoc sourcepathref="src.path"
             packagenames="*"
             destdir="${reporting.outputDirectory}/apidocs"
             access="protected"
             source="${compiler.source}"
             verbose="false"
             locale="en"
             version="true"
             use="true"
             author="true"
             splitindex="false"
             nodeprecated="false"
             nodeprecatedlist="false"
             notree="false"
             noindex="false"
             nohelp="false"
             nonavbar="false"
             serialwarn="false"
             encoding="UTF-8"
             linksource="false"
             breakiterator="false">
      <classpath refid="build.classpath"/>
    </javadoc>
  </target>

  <!-- ====================================================================== -->
  <!-- Package target                                                         -->
  <!-- ====================================================================== -->

  <target name="package" depends="plexus,test" description="Package the application">
    <jar jarfile="${build.dir}/${build.finalName}.jar"
         compress="true"
         index="false"
         basedir="${build.outputDir}"
         excludes="**/package.html">
      <manifest>
        <attribute name="Implementation-Title" value="${project.name}"/>
        <attribute name="Implementation-URL" value="http://maven.apache.org/plugins/${project.artifactId}/"/>
        <attribute name="Implementation-Vendor" value="${project.organization.name}"/>
        <attribute name="Implementation-Vendor-Id" value="${project.groupId}"/>
        <attribute name="Implementation-Version" value="${project.version}"/>
        <attribute name="JavaPackages-ArtifactId" value="${project.artifactId}"/>
        <attribute name="JavaPackages-GroupId" value="${project.groupId}"/>
        <attribute name="JavaPackages-Version" value="${project.version}"/>
        <attribute name="Specification-Title" value="${project.name}"/>
        <attribute name="Specification-Vendor" value="${project.organization.name}"/>
        <attribute name="Specification-Version" value="${spec.version}"/>
      </manifest>
    </jar>
  </target>

  <!-- ====================================================================== -->
  <!-- A dummy target for the package named after the type it creates         -->
  <!-- ====================================================================== -->

  <target name="jar" depends="package" description="Builds the jar for the application"/>

</project>
