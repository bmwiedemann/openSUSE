--- maven-plugin-tools-3.6.0/maven-plugin-plugin/src/main/java/org/apache/maven/plugin/plugin/PluginReport.java	2018-10-29 10:41:50.000000000 +0100
+++ maven-plugin-tools-3.6.0/maven-plugin-plugin/src/main/java/org/apache/maven/plugin/plugin/PluginReport.java	2023-07-24 23:08:19.511756145 +0200
@@ -544,11 +544,11 @@
                 {
                     description =
                         "<strong>" + getBundle( locale ).getString( "report.plugin.goal.deprecated" ) + "</strong> "
-                            + GeneratorUtils.makeHtmlValid( mojo.getDeprecated() );
+                            + mojo.getDeprecated();
                 }
                 else if ( StringUtils.isNotEmpty( mojo.getDescription() ) )
                 {
-                    description = GeneratorUtils.makeHtmlValid( mojo.getDescription() );
+                    description = mojo.getDescription();
                 }
                 else
                 {
--- maven-plugin-tools-3.6.0/maven-plugin-tools-generators/src/main/java/org/apache/maven/tools/plugin/generator/GeneratorUtils.java	2018-10-29 10:41:50.000000000 +0100
+++ maven-plugin-tools-3.6.0/maven-plugin-tools-generators/src/main/java/org/apache/maven/tools/plugin/generator/GeneratorUtils.java	2023-07-24 22:39:51.914568518 +0200
@@ -51,7 +51,6 @@
 import org.codehaus.plexus.component.repository.ComponentDependency;
 import org.codehaus.plexus.util.StringUtils;
 import org.codehaus.plexus.util.xml.XMLWriter;
-import org.w3c.tidy.Tidy;
 
 /**
  * Convenience methods to play with Maven plugins.
@@ -255,58 +254,6 @@
     }
 
     /**
-     * Fixes some javadoc comment to become a valid XHTML snippet.
-     *
-     * @param description Javadoc description with HTML tags, may be <code>null</code>.
-     * @return The description with valid XHTML tags, never <code>null</code>.
-     */
-    public static String makeHtmlValid( String description )
-    {
-        if ( StringUtils.isEmpty( description ) )
-        {
-            return "";
-        }
-
-        String commentCleaned = decodeJavadocTags( description );
-
-        // Using jTidy to clean comment
-        Tidy tidy = new Tidy();
-        tidy.setDocType( "loose" );
-        tidy.setXHTML( true );
-        tidy.setXmlOut( true );
-        tidy.setInputEncoding( "UTF-8" );
-        tidy.setOutputEncoding( "UTF-8" );
-        tidy.setMakeClean( true );
-        tidy.setNumEntities( true );
-        tidy.setQuoteNbsp( false );
-        tidy.setQuiet( true );
-        tidy.setShowWarnings( false );
-        try
-        {
-            ByteArrayOutputStream out = new ByteArrayOutputStream( commentCleaned.length() + 256 );
-            tidy.parse( new ByteArrayInputStream( commentCleaned.getBytes( "UTF-8" ) ), out );
-            commentCleaned = out.toString( "UTF-8" );
-        }
-        catch ( UnsupportedEncodingException e )
-        {
-            // cannot happen as every JVM must support UTF-8, see also class javadoc for java.nio.charset.Charset
-        }
-
-        if ( StringUtils.isEmpty( commentCleaned ) )
-        {
-            return "";
-        }
-
-        // strip the header/body stuff
-        String ls = System.getProperty( "line.separator" );
-        int startPos = commentCleaned.indexOf( "<body>" + ls ) + 6 + ls.length();
-        int endPos = commentCleaned.indexOf( ls + "</body>" );
-        commentCleaned = commentCleaned.substring( startPos, endPos );
-
-        return commentCleaned;
-    }
-
-    /**
      * Converts a HTML fragment as extracted from a javadoc comment to a plain text string. This method tries to retain
      * as much of the text formatting as possible by means of the following transformations:
      * <ul>
@@ -337,7 +284,7 @@
 
         try
         {
-            parser.parse( new StringReader( makeHtmlValid( html ) ), htmlCallback, true );
+            parser.parse( new StringReader( html ), htmlCallback, true );
         }
         catch ( IOException e )
         {
--- maven-plugin-tools-3.6.0/maven-plugin-tools-generators/src/main/java/org/apache/maven/tools/plugin/generator/PluginXdocGenerator.java	2018-10-29 10:41:50.000000000 +0100
+++ maven-plugin-tools-3.6.0/maven-plugin-tools-generators/src/main/java/org/apache/maven/tools/plugin/generator/PluginXdocGenerator.java	2023-07-24 22:49:33.765883927 +0200
@@ -202,7 +202,7 @@
             w.writeMarkup( getString( "pluginxdoc.mojodescriptor.deprecated" ) );
             w.endElement(); // p
             w.startElement( "div" );
-            w.writeMarkup( GeneratorUtils.makeHtmlValid( mojoDescriptor.getDeprecated() ) );
+            w.writeMarkup( mojoDescriptor.getDeprecated() );
             w.endElement(); // div
         }
 
@@ -212,7 +212,7 @@
         w.startElement( "div" );
         if ( StringUtils.isNotEmpty( mojoDescriptor.getDescription() ) )
         {
-            w.writeMarkup( GeneratorUtils.makeHtmlValid( mojoDescriptor.getDescription() ) );
+            w.writeMarkup( mojoDescriptor.getDescription() );
         }
         else
         {
@@ -470,14 +470,14 @@
             {
                 w.startElement( "div" );
                 w.writeMarkup( format( "pluginxdoc.mojodescriptor.parameter.deprecated",
-                                       GeneratorUtils.makeHtmlValid( parameter.getDeprecated() ) ) );
+                                       parameter.getDeprecated() ) );
                 w.endElement(); // div
             }
 
             w.startElement( "div" );
             if ( StringUtils.isNotEmpty( parameter.getDescription() ) )
             {
-                w.writeMarkup( GeneratorUtils.makeHtmlValid( parameter.getDescription() ) );
+                w.writeMarkup( parameter.getDescription() );
             }
             else
             {
@@ -689,11 +689,11 @@
             if ( StringUtils.isNotEmpty( parameter.getDeprecated() ) )
             {
                 description = format( "pluginxdoc.mojodescriptor.parameter.deprecated",
-                                      GeneratorUtils.makeHtmlValid( parameter.getDeprecated() ) );
+                                      parameter.getDeprecated() );
             }
             else if ( StringUtils.isNotEmpty( parameter.getDescription() ) )
             {
-                description = GeneratorUtils.makeHtmlValid( parameter.getDescription() );
+                description = parameter.getDescription();
             }
             else
             {
