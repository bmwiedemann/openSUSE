---
 cmd1.c    |   20 ++++++++++----------
 collect.c |    8 ++++----
 def.h     |    2 +-
 fio.c     |    4 ++--
 imap.c    |    8 ++++----
 junk.c    |   30 +++++++++++++++---------------
 macro.c   |    2 +-
 md5.c     |   38 +++++++++++++++++++-------------------
 mime.c    |   24 ++++++++++++------------
 sendout.c |    8 ++++----
 tty.c     |    2 +-
 11 files changed, 73 insertions(+), 73 deletions(-)

--- cmd1.c
+++ cmd1.c	2016-04-08 14:08:47.753310695 +0000
@@ -112,14 +112,14 @@ headers(void *v)
 					lastg = g;
 					lastmq = mq;
 				}
-				if (n>0 && mp==&message[n-1] ||
-						n==0 && g==k ||
-						n==-2 && g==k+size && lastmq ||
-						n<0 && g>=k && mp->m_flag&fl)
+				if ((n>0 && mp==&message[n-1]) ||
+						(n==0 && g==k) ||
+						(n==-2 && g==k+size && lastmq) ||
+						(n<0 && g>=k && mp->m_flag&fl))
 					break;
 				g++;
 			}
-		if (lastmq && (n==-2 || n==-1 && mp==&message[msgCount])) {
+		if (lastmq && (n==-2 || (n==-1 && mp==&message[msgCount]))) {
 			g = lastg;
 			mq = lastmq;
 		}
@@ -155,14 +155,14 @@ headers(void *v)
 					lastg = g;
 					lastmq = mq;
 				}
-				if (n>0 && mp==&message[n-1] ||
-						n==0 && g==k ||
-						n==-2 && g==k+size && lastmq ||
-						n<0 && g>=k && mp->m_flag&fl)
+				if ((n>0 && mp==&message[n-1]) ||
+						(n==0 && g==k) ||
+						(n==-2 && g==k+size && lastmq) ||
+						(n<0 && g>=k && mp->m_flag&fl))
 					break;
 				g++;
 			}
-		if (lastmq && (n==-2 || n==-1 && mp==&message[msgCount])) {
+		if (lastmq && (n==-2 || (n==-1 && mp==&message[msgCount]))) {
 			g = lastg;
 			mq = lastmq;
 		}
--- collect.c
+++ collect.c	2016-04-08 14:14:42.838735568 +0000
@@ -279,8 +279,8 @@ read_attachment_data(struct attachment *
 		perror(ap->a_name);
 	}
 	if (ap->a_name && (value("attachment-ask-charset") ||
-			(cp = value("sendcharsets")) != NULL &&
-			strchr(cp, ',') != NULL)) {
+			((cp = value("sendcharsets")) != NULL &&
+			  strchr(cp, ',') != NULL))) {
 		snprintf(prefix, sizeof prefix, "#%u\tcharset: ", number);
 		ap->a_charset = readtty(prefix, ap->a_charset);
 	}
@@ -648,8 +648,8 @@ cont:
 		    value("interactive") != NULL &&
 		    (value("dot") != NULL || value("ignoreeof") != NULL))
 			break;
-		if (linebuf[0] != escape || (value("interactive") == NULL &&
-					tildeflag == 0 ||
+		if (linebuf[0] != escape || ((value("interactive") == NULL &&
+					tildeflag == 0) ||
 					tildeflag < 0)) {
 			if (putline(collf, linebuf, count) < 0)
 				goto err;
--- def.h
+++ def.h	2016-04-08 14:21:12.939513915 +0000
@@ -408,7 +408,7 @@ enum gfield {
 #define	GMASK	(GTO|GSUBJECT|GCC|GBCC|GREPLYTO)	/* Mask of places from whence */
 
 #define	visible(mp)	(((mp)->m_flag&(MDELETED|MHIDDEN|MKILL))==0|| \
-				dot==(mp) && (mp)->m_flag&MKILL)
+				(dot==(mp) && (mp)->m_flag&MKILL))
 
 /*
  * Structure used to pass about the current
--- fio.c
+++ fio.c	2016-04-08 14:17:14.651924938 +0000
@@ -543,8 +543,8 @@ getfold(char *name, int size)
 
 	if ((folder = value("folder")) == NULL)
 		return (-1);
-	if (*folder == '/' || (p = which_protocol(folder)) != PROTO_FILE &&
-			p != PROTO_MAILDIR) {
+	if (*folder == '/' || ((p = which_protocol(folder)) != PROTO_FILE &&
+			p != PROTO_MAILDIR)) {
 		strncpy(name, folder, size);
 		name[size-1]='\0';
 	} else {
--- imap.c
+++ imap.c	2016-04-08 14:20:47.983975844 +0000
@@ -1868,11 +1868,11 @@ imap_update(struct mailbox *mp)
 			stored++;
 			gotcha++;
 		} else if (mp->mb_type != MB_CACHE ||
-			!edit && (!(m->m_flag&(MBOXED|MSAVED|MDELETED))
+			(!edit && (!(m->m_flag&(MBOXED|MSAVED|MDELETED))
 				|| (m->m_flag &
 					(MBOXED|MPRESERVE|MTOUCH)) ==
-					(MPRESERVE|MTOUCH)) ||
-				edit && !(m->m_flag & MDELETED))
+					(MPRESERVE|MTOUCH))) ||
+				(edit && !(m->m_flag & MDELETED)))
 			held++;
 		if (m->m_flag & MNEW) {
 			m->m_flag &= ~MNEW;
@@ -2779,7 +2779,7 @@ imap_appenduid(struct mailbox *mp, FILE
 	xmb.mb_otf = xmb.mb_itf = fp;
 	initcache(&xmb);
 	memset(&xm, 0, sizeof xm);
-	xm.m_flag = flag&MREAD | MNEW;
+	xm.m_flag = (flag&MREAD) | MNEW;
 	xm.m_time = t;
 	xm.m_block = mailx_blockof(off1);
 	xm.m_offset = mailx_offsetof(off1);
--- junk.c
+++ junk.c	2016-04-08 14:32:27.147010580 +0000
@@ -345,11 +345,11 @@ putdb(void)
 	void	*zp;
 	int	scomp, ncomp;
 
-	if (!super_mmapped && (sfp = dbfp(SUPER, O_WRONLY, &scomp, &sname))
-			== NULL || sfp == (FILE *)-1)
+	if ((!super_mmapped && (sfp = dbfp(SUPER, O_WRONLY, &scomp, &sname))
+			== NULL) || sfp == (FILE *)-1)
 		return;
-	if (!nodes_mmapped && (nfp = dbfp(NODES, O_WRONLY, &ncomp, &nname))
-			== NULL || nfp == (FILE *)-1)
+	if ((!nodes_mmapped && (nfp = dbfp(NODES, O_WRONLY, &ncomp, &nname))
+			== NULL) || nfp == (FILE *)-1)
 		return;
 	if (super_mmapped == 0 || nodes_mmapped == 0)
 		holdint();
@@ -696,8 +696,8 @@ loop:	*stop = 0;
 			}
 			SAVE(c)
 		} else if (constituent(c, *buf, i+j, sp->price, sp->hadamp) ||
-				sp->loc == HEADER && c == '.' &&
-				asccasecmp(sp->field, "subject*")) {
+				(sp->loc == HEADER && c == '.' &&
+				 asccasecmp(sp->field, "subject*"))) {
 			if (c == '&')
 				sp->hadamp = 1;
 			SAVE(c)
@@ -775,9 +775,9 @@ out:	if (i > 0) {
 				 ascncasecmp(sp->field, "x-spam", 6) == 0 ||
 				 ascncasecmp(sp->field, "x-pstn", 6) == 0 ||
 				 ascncasecmp(sp->field, "x-scanned", 9) == 0 ||
-				 asccasecmp(sp->field, "received*") == 0 &&
+				 (asccasecmp(sp->field, "received*") == 0 &&
 				 	((2*c > i) || i < 4 ||
-					asccasestr(*buf, "localhost") != NULL)))
+					asccasestr(*buf, "localhost") != NULL))))
 			goto loop;
 		return *buf;
 	}
@@ -816,14 +816,14 @@ add(const char *word, enum entry entry,
 		switch (entry) {
 		case GOOD:
 			c = get(&n[OF_node_good]);
-			if (incr>0 && c<MAX3-incr || incr<0 && c>=-incr) {
+			if ((incr>0 && c<MAX3-incr) || (incr<0 && c>=-incr)) {
 				c += incr;
 				put(&n[OF_node_good], c);
 			}
 			break;
 		case BAD:
 			c = get(&n[OF_node_bad]);
-			if (incr>0 && c<MAX3-incr || incr<0 && c>=-incr) {
+			if ((incr>0 && c<MAX3-incr) || (incr<0 && c>=-incr)) {
 				c += incr;
 				put(&n[OF_node_bad], c);
 			}
@@ -958,7 +958,7 @@ insert(int *msgvec, enum entry entry, in
 			break;
 		}
 		u += incr;
-		if (entry == GOOD && incr > 0 || entry == BAD && incr < 0)
+		if ((entry == GOOD && incr > 0) || (entry == BAD && incr < 0))
 			message[*ip-1].m_flag &= ~MJUNK;
 		else
 			message[*ip-1].m_flag |= MJUNK;
@@ -1109,10 +1109,10 @@ rate(const char *word, enum entry entry,
 			 * gives the most interesting verbose output.
 			 */
 			if (d > best[i].dist ||
-					d == best[i].dist &&
-						p < best[i].prob ||
-					best[i].loc == HEADER &&
-						d == best[i].dist) {
+					(d == best[i].dist &&
+						p < best[i].prob) ||
+					(best[i].loc == HEADER &&
+						d == best[i].dist)) {
 				for (j = BEST-2; j >= i; j--)
 					best[j+1] = best[j];
 				best[i].dist = d;
--- macro.c
+++ macro.c	2016-04-08 14:34:50.856343786 +0000
@@ -195,7 +195,7 @@ ccall(void *v)
 	char	**args = v;
 	struct macro	*mp;
 
-	if (args[0] == NULL || args[1] != NULL && args[2] != NULL) {
+	if (args[0] == NULL || (args[1] != NULL && args[2] != NULL)) {
 		fprintf(stderr, "Syntax is: call <name>\n");
 		return 1;
 	}
--- md5.c
+++ md5.c	2016-04-08 13:55:12.292417526 +0000
@@ -70,42 +70,42 @@ static unsigned char PADDING[64] = {
 /*
  * F, G, H and I are basic MD5 functions.
  */
-#define	F(x, y, z)	((x) & (y) | ~(x) & (z))
-#define	G(x, y, z)	((x) & (z) | (y) & ~(z))
+#define	F(x, y, z)	(((x) & (y)) | (~(x) & (z)))
+#define	G(x, y, z)	(((x) & (z)) | ((y) & ~(z)))
 #define	H(x, y, z)	((x) ^ (y) ^ (z))
-#define	I(x, y, z)	((y) ^ ((x) | ~(z)&0xffffffff))
+#define	I(x, y, z)	((y) ^ ((x) | (~(z)&0xffffffff)))
 
 /*
  * ROTATE_LEFT rotates x left n bits.
  */
-#define	ROTATE_LEFT(x, n)	((x)<<(n) & 0xffffffff | (x) >> 32-(n))
+#define	ROTATE_LEFT(x, n)	(((x)<<(n) & 0xffffffff) | (x) >> (32-(n)))
 
 /*
  * FF, GG, HH, and II transformations for rounds 1, 2, 3, and 4.
  * Rotation is separate from addition to prevent recomputation.
  */
 #define FF(a, b, c, d, x, s, ac) { \
-	(a) = (a) + F((b), (c), (d)) + (x) + ((ac)&0xffffffff) & 0xffffffff; \
+	(a) = ((a) + F((b), (c), (d)) + (x) + ((ac)&0xffffffff)) & 0xffffffff; \
 	(a) = ROTATE_LEFT((a), (s)); \
-	(a) = (a) + (b) & 0xffffffff; \
+	(a) = ((a) + (b)) & 0xffffffff; \
 }
 
 #define GG(a, b, c, d, x, s, ac) { \
-	(a) = (a) + G((b), (c), (d)) + (x) + ((ac)&0xffffffff) & 0xffffffff; \
+	(a) = ((a) + G((b), (c), (d)) + (x) + ((ac)&0xffffffff)) & 0xffffffff; \
 	(a) = ROTATE_LEFT((a), (s)); \
-	(a) = (a) + (b) & 0xffffffff; \
+	(a) = ((a) + (b)) & 0xffffffff; \
 }
 
 #define HH(a, b, c, d, x, s, ac) { \
-	(a) = (a) + H((b), (c), (d)) + (x) + ((ac)&0xffffffff) & 0xffffffff; \
+	(a) = ((a) + H((b), (c), (d)) + (x) + ((ac)&0xffffffff)) & 0xffffffff; \
 	(a) = ROTATE_LEFT((a), (s)); \
-	(a) = (a) + (b) & 0xffffffff; \
+	(a) = ((a) + (b)) & 0xffffffff; \
 }
 
 #define II(a, b, c, d, x, s, ac) { \
-	(a) = (a) + I((b), (c), (d)) + (x) + ((ac)&0xffffffff) & 0xffffffff; \
+	(a) = ((a) + I((b), (c), (d)) + (x) + ((ac)&0xffffffff)) & 0xffffffff; \
 	(a) = ROTATE_LEFT((a), (s)); \
-	(a) = (a) + (b) & 0xffffffff; \
+	(a) = ((a) + (b)) & 0xffffffff; \
 }
 
 /*
@@ -144,10 +144,10 @@ MD5Update (
 	index = context->count[0]>>3 & 0x3F;
 
 	/* Update number of bits */
-	if ((context->count[0] = context->count[0] + (inputLen<<3) & 0xffffffff)
+	if ((context->count[0] = (context->count[0] + (inputLen<<3)) & 0xffffffff)
 			< (inputLen<<3 & 0xffffffff))
-	context->count[1] = context->count[1] + 1 & 0xffffffff;
-	context->count[1] = context->count[1] + (inputLen>>29) & 0xffffffff;
+	context->count[1] = (context->count[1] + 1) & 0xffffffff;
+	context->count[1] = (context->count[1] + (inputLen>>29)) & 0xffffffff;
 
 	partLen = 64 - index;
 
@@ -285,10 +285,10 @@ MD5Transform(md5_type state[4], unsigned
 	II(c, d, a, b, x[ 2], S43, 0x2ad7d2bb); /* 63 */
 	II(b, c, d, a, x[ 9], S44, 0xeb86d391); /* 64 */
 
-	state[0] = state[0] + a & 0xffffffff;
-	state[1] = state[1] + b & 0xffffffff;
-	state[2] = state[2] + c & 0xffffffff;
-	state[3] = state[3] + d & 0xffffffff;
+	state[0] = (state[0] + a) & 0xffffffff;
+	state[1] = (state[1] + b) & 0xffffffff;
+	state[2] = (state[2] + c) & 0xffffffff;
+	state[3] = (state[3] + d) & 0xffffffff;
 
 	/*
 	 * Zeroize sensitive information.
--- mime.c
+++ mime.c	2016-04-08 14:52:21.924855005 +0000
@@ -916,8 +916,8 @@ get_mime_convert(FILE *fp, char **conten
 	int convert;
 
 	*isclean = mime_isclean(fp);
-	if (*isclean & MIME_HASNUL ||
-			*contenttype && ascncasecmp(*contenttype, "text/", 5)) {
+	if ((*isclean & MIME_HASNUL) ||
+			(*contenttype && ascncasecmp(*contenttype, "text/", 5))) {
 		convert = CONV_TOB64;
 		if (*contenttype == NULL ||
 				ascncasecmp(*contenttype, "text/", 5) == 0)
@@ -990,13 +990,13 @@ mime_write_toqp(struct str *in, FILE *fo
 	upper = in->s + in->l;
 	for (p = in->s, l = 0; p < upper; p++) {
 		if (mustquote(*p&0377) ||
-				p < upper-1 && p[1] == '\n' &&
-					blankchar(p[0]&0377) ||
-				p < upper-4 && l == 0 &&
+				(p < upper-1 && p[1] == '\n' &&
+					blankchar(p[0]&0377)) ||
+				(p < upper-4 && l == 0 &&
 					p[0] == 'F' && p[1] == 'r' &&
-					p[2] == 'o' && p[3] == 'm' ||
-				*p == '.' && l == 0 && p < upper-1 &&
-					p[1] == '\n') {
+					p[2] == 'o' && p[3] == 'm') ||
+				(*p == '.' && l == 0 && p < upper-1 &&
+					p[1] == '\n')) {
 			if (l >= 69) {
 				sz += 2;
 				fwrite("=\n", sizeof (char), 2, fo);
@@ -1036,8 +1036,8 @@ mime_str_toqp(struct str *in, struct str
 	out->l = in->l;
 	upper = in->s + in->l;
 	for (p = in->s; p < upper; p++) {
-		if (mustquote(*p&0377) || p+1 < upper && *(p + 1) == '\n' &&
-				blankchar(*p & 0377)) {
+		if (mustquote(*p&0377) || (p+1 < upper && *(p + 1) == '\n' &&
+				blankchar(*p & 0377))) {
 			if (inhdr && *p == ' ') {
 				*q++ = '_';
 			} else {
@@ -1347,8 +1347,8 @@ mime_write_tohdr(struct str *in, FILE *f
 							wbeg == &upper[-1]))
 					mustquote++;
 			}
-			if (mustquote || broken || (wend - wbeg) >= 74 &&
-					quoteany) {
+			if (mustquote || broken || ((wend - wbeg) >= 74 &&
+					quoteany)) {
 				for (;;) {
 					cin.s = lastwordend ? lastwordend :
 						wbeg;
--- sendout.c
+++ sendout.c	2016-04-08 14:46:47.127059692 +0000
@@ -1372,10 +1372,10 @@ fmt(char *str, struct name *np, FILE *fo
 	if (col) {
 		fwrite(str, sizeof *str, strlen(str), fo);
 		if ((flags&GFILES) == 0 &&
-				col == 3 && asccasecmp(str, "to:") == 0 ||
-				col == 3 && asccasecmp(str, "cc:") == 0 ||
-				col == 4 && asccasecmp(str, "bcc:") == 0 ||
-				col == 10 && asccasecmp(str, "Resent-To:") == 0)
+				((col == 3 && asccasecmp(str, "to:") == 0) ||
+				 (col == 3 && asccasecmp(str, "cc:") == 0) ||
+				 (col == 4 && asccasecmp(str, "bcc:") == 0) ||
+				 (col == 10 && asccasecmp(str, "Resent-To:") == 0)))
 			is_to = 1;
 	}
 	for (; np != NULL; np = np->n_flink) {
--- tty.c
+++ tty.c	2016-04-08 14:47:33.838193954 +0000
@@ -438,6 +438,6 @@ yorn(char *msg)
 	do
 		cp = readtty(msg, NULL);
 	while (cp == NULL ||
-		*cp != 'y' && *cp != 'Y' && *cp != 'n' && *cp != 'N');
+		(*cp != 'y' && *cp != 'Y' && *cp != 'n' && *cp != 'N'));
 	return *cp == 'y' || *cp == 'Y';
 }
