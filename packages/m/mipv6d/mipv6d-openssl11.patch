Index: mipv6-2.0.2-umip-0.4/src/mh.c
===================================================================
--- mipv6-2.0.2-umip-0.4.orig/src/mh.c
+++ mipv6-2.0.2-umip-0.4/src/mh.c
@@ -518,19 +518,19 @@ static int calculate_auth_data(const str
 
 #ifdef HAVE_LIBCRYPTO
 	unsigned int len = HMAC_SHA1_HASH_LEN;
-	HMAC_CTX ctx;
+	HMAC_CTX *ctx;
 	const EVP_MD *evp_md = EVP_sha1();
 
-	HMAC_CTX_init(&ctx);
-	HMAC_Init_ex(&ctx, key, HMAC_SHA1_KEY_SIZE, evp_md, NULL);
+	ctx = HMAC_CTX_new();
+	HMAC_Init_ex(ctx, key, HMAC_SHA1_KEY_SIZE, evp_md, NULL);
 
-	HMAC_Update(&ctx, (uint8_t *)coa, sizeof(*coa));
-	HMAC_Update(&ctx, (uint8_t *)cn, sizeof(*coa));
+	HMAC_Update(ctx, (uint8_t *)coa, sizeof(*coa));
+	HMAC_Update(ctx, (uint8_t *)cn, sizeof(*coa));
 	for (i = 0; i < iovlen; i++) {
-		HMAC_Update(&ctx, (uint8_t *)iov[i].iov_base, iov[i].iov_len);
+		HMAC_Update(ctx, (uint8_t *)iov[i].iov_base, iov[i].iov_len);
 	}
-	HMAC_Final(&ctx, buf, &len);
-	HMAC_CTX_cleanup(&ctx);
+	HMAC_Final(ctx, buf, &len);
+	HMAC_CTX_free(ctx);
 #else
 	HMAC_SHA1_CTX ctx;
 
Index: mipv6-2.0.2-umip-0.4/src/keygen.c
===================================================================
--- mipv6-2.0.2-umip-0.4.orig/src/keygen.c
+++ mipv6-2.0.2-umip-0.4/src/keygen.c
@@ -172,15 +172,15 @@ static void build_kgen_token(struct in6_
 	uint8_t tmp[20];
 #ifdef HAVE_LIBCRYPTO
 	unsigned int len = 20;
-	HMAC_CTX ctx;
+	HMAC_CTX *ctx;
 
-	HMAC_CTX_init(&ctx);
-	HMAC_Init_ex(&ctx, key_cn, sizeof(key_cn), EVP_sha1(), NULL);
-	HMAC_Update(&ctx, (unsigned char *)addr, sizeof(*addr));
-	HMAC_Update(&ctx, nonce, NONCE_LENGTH);
-	HMAC_Update(&ctx, &id, sizeof(id));
-	HMAC_Final(&ctx, tmp, &len);
-	HMAC_CTX_cleanup(&ctx);
+	ctx = HMAC_CTX_new();
+	HMAC_Init_ex(ctx, key_cn, sizeof(key_cn), EVP_sha1(), NULL);
+	HMAC_Update(ctx, (unsigned char *)addr, sizeof(*addr));
+	HMAC_Update(ctx, nonce, NONCE_LENGTH);
+	HMAC_Update(ctx, &id, sizeof(id));
+	HMAC_Final(ctx, tmp, &len);
+	HMAC_CTX_free(ctx);
 #else
 	HMAC_SHA1_CTX ctx;
 
