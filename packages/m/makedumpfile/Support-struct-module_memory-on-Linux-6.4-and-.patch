From f23bb943568188a2746dbf9b6692668f5a2ac3b6 Mon Sep 17 00:00:00 2001
From: Kazuhito Hagio <k-hagio-ab@nec.com>
Date: Wed, 17 May 2023 16:42:46 +0900
Subject: [PATCH] [PATCH] Support struct module_memory on Linux 6.4 and later

* Required for kernel 6.4

Kernel commit [1] replaced module_layout with module_memory on Linux
6.4.  As a result, makedumpfile with --config option cannot load module
symbols correctly and fails with an error like this:

  $ makedumpfile -d 31 --config mkdf.conf -x vmlinux vmcore dumpfile
  ...
  __vtop4_x86_64: Can't get a valid pgd.
  readmem: Can't convert a virtual address(0) to physical address.
  readmem: type_addr: 0, addr:0, size:0
  __load_module_symbol: Can't access module in memory.

  makedumpfile Failed.

To fix this, adopt module offsets to module_memory ones.

[1] https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=ac3b43283923

Signed-off-by: Kazuhito Hagio <k-hagio-ab@nec.com>
---
 makedumpfile.c | 24 ++++++++++++++++++++++++
 makedumpfile.h |  7 +++++++
 2 files changed, 31 insertions(+)

diff --git a/makedumpfile.c b/makedumpfile.c
index ba2bb46fe54e..cadc59662bef 100644
--- a/makedumpfile.c
+++ b/makedumpfile.c
@@ -1710,6 +1710,9 @@ get_symbol_info(void)
 	return TRUE;
 }
 
+#define MOD_DATA	1
+#define MOD_INIT_DATA	5
+
 int
 get_structure_info(void)
 {
@@ -1817,6 +1820,26 @@ get_structure_info(void)
 	OFFSET_INIT(module.num_symtab, "module", "num_symtab");
 	OFFSET_INIT(module.list, "module", "list");
 	OFFSET_INIT(module.name, "module", "name");
+
+	/* kernel >= 6.4 */
+	SIZE_INIT(module_memory, "module_memory");
+	if (SIZE(module_memory) != NOT_FOUND_STRUCTURE) {
+		OFFSET_INIT(module.mem, "module", "mem");
+		OFFSET_INIT(module_memory.base, "module_memory", "base");
+		OFFSET_INIT(module_memory.size, "module_memory", "size");
+
+		OFFSET(module.module_core) = OFFSET(module.mem) +
+			SIZE(module_memory) * MOD_DATA + OFFSET(module_memory.base);
+		OFFSET(module.core_size) = OFFSET(module.mem) +
+			SIZE(module_memory) * MOD_DATA + OFFSET(module_memory.size);
+		OFFSET(module.module_init) = OFFSET(module.mem) +
+			SIZE(module_memory) * MOD_INIT_DATA + OFFSET(module_memory.base);
+		OFFSET(module.init_size) = OFFSET(module.mem) +
+			SIZE(module_memory) * MOD_INIT_DATA + OFFSET(module_memory.size);
+
+		goto module_end;
+	}
+
 	OFFSET_INIT(module.module_core, "module", "module_core");
 	if (OFFSET(module.module_core) == NOT_FOUND_STRUCTURE) {
 		/* for kernel version 4.5 and above */
@@ -1858,6 +1881,7 @@ get_structure_info(void)
 		OFFSET(module.init_size) += init_layout;
 	}
 
+module_end:
 	ENUM_NUMBER_INIT(NR_FREE_PAGES, "NR_FREE_PAGES");
 	ENUM_NUMBER_INIT(N_ONLINE, "N_ONLINE");
 	ENUM_NUMBER_INIT(pgtable_l5_enabled, "pgtable_l5_enabled");
diff --git a/makedumpfile.h b/makedumpfile.h
index 99ccf0a3bd6c..85e5a4932983 100644
--- a/makedumpfile.h
+++ b/makedumpfile.h
@@ -1842,6 +1842,7 @@ struct size_table {
 	 * for loading module symbol data
 	 */
 	long	module;
+	long	module_memory;
 
 	/*
 	 * for sadump
@@ -1944,8 +1945,14 @@ struct offset_table {
 		long	num_symtab;
 		long	symtab;
 		long	strtab;
+		long	mem;
 	} module;
 
+	struct module_memory {
+		long	base;
+		long	size;
+	} module_memory;
+
 	/*
 	 * for loading elf_prstaus symbol data
 	 */
-- 
2.42.0

