hdf5 1.12 compatibility.
Origin: Archlinux: https://github.com/archlinux/svntogit-community/blob/packages/med/trunk/hdf5-1.12.patch

---
 config/cmake_files/medMacros.cmake                | 2 +-
 src/ci/MEDfileCompatibility.c                     | 4 ++--
 src/hdfi/_MEDattributeNumWr.c                     | 2 +-
 src/hdfi/_MEDattributeNumWrByName.c               | 2 +-
 src/hdfi/_MEDcheckAttributeStringFunc.c           | 2 +-
 src/hdfi/_MEDchecknSublinkFunc.c                  | 2 +-
 src/hdfi/_MEDdatagroupExist.c                     | 2 +-
 src/hdfi/_MEDdatasetExist.c                       | 2 +-
 src/hdfi/_MEDfileCreate.c                         | 2 +-
 src/hdfi/_MEDfileOpen.c                           | 2 +-
 src/hdfi/_MEDlinkObjs.c                           | 2 +-
 src/hdfi/_MEDmemFileOpen.c                        | 2 +-
 src/hdfi/_MEDparFileCreate.c                      | 2 +-
 src/hdfi/_MEDparFileOpen.c                        | 2 +-
 tools/medimport/2.3.6/_MEDconvertStringDatasets.c | 2 +-
 15 files changed, 16 insertions(+), 16 deletions(-)

diff --git a/config/cmake_files/medMacros.cmake b/config/cmake_files/medMacros.cmake
index 79698ad..f21778c 100644
--- a/config/cmake_files/medMacros.cmake
+++ b/config/cmake_files/medMacros.cmake
@@ -447,7 +447,7 @@ MACRO(MED_FIND_HDF5)
     ##
     ## Requires 1.10.x version
     ##
-    IF (NOT HDF_VERSION_MAJOR_REF EQUAL 1 OR NOT HDF_VERSION_MINOR_REF EQUAL 10 OR NOT HDF_VERSION_RELEASE_REF GREATER 1)
+    IF (HDF5_VERSION VERSION_LESS 1.10.2)
         MESSAGE(FATAL_ERROR "HDF5 version is ${HDF_VERSION_REF}. Only versions >= 1.10.2 are supported.")
     ENDIF()
     ##
diff --git a/src/ci/MEDfileCompatibility.c b/src/ci/MEDfileCompatibility.c
index ddfa489..54b1be4 100644
--- a/src/ci/MEDfileCompatibility.c
+++ b/src/ci/MEDfileCompatibility.c
@@ -71,7 +71,7 @@ MEDfileCompatibility(const char* const filename,
   _hversionMMR=10000*_hmajeur+100*_hmineur+_hrelease;
   /* ISCRUTE(_hversionMMR); */
   /* ISCRUTE(HDF_VERSION_NUM_REF); */
-  if ( (_hversionMMR >= HDF_VERSION_NUM_REF) && (_hmineur == HDF_VERSION_MINOR_REF) ) *hdfok = MED_TRUE;
+  if (_hversionMMR >= HDF_VERSION_NUM_REF) *hdfok = MED_TRUE;
 
   /* TODO : Vérifier si la version mineure HDF du fichier est supérieure
      à la version mineure de la bibliothèque HDF utilisée :
@@ -113,7 +113,7 @@ MEDfileCompatibility(const char* const filename,
 #if MED_NUM_MAJEUR != 4
 #error "Don't forget to update the test version here when you change the major version of the library !"
 #endif
-#if H5_VERS_MINOR > 10
+#if H5_VERS_MINOR > 12
 #error "Don't forget to check the compatibility version of the library, depending on the internal hdf model choice !"
 #error "Cf. _MEDfileCreate ..."
 #endif
diff --git a/src/hdfi/_MEDattributeNumWr.c b/src/hdfi/_MEDattributeNumWr.c
index 5ec7447..91e784e 100644
--- a/src/hdfi/_MEDattributeNumWr.c
+++ b/src/hdfi/_MEDattributeNumWr.c
@@ -77,7 +77,7 @@ med_err _MEDattributeNumWr(med_idt pid,
 
   if  ( (_attid=H5Aopen( pid, attname, H5P_DEFAULT )) >= 0 ) {
 
-    if ( H5Oget_info( pid, &_oinfo ) <0) {
+    if ( H5Oget_info( pid, &_oinfo, H5O_INFO_ALL ) <0) {
 	MED_ERR_(_ret,MED_ERR_CALL,MED_ERR_API,"H5Oget_info");
 	goto ERROR;
     }
diff --git a/src/hdfi/_MEDattributeNumWrByName.c b/src/hdfi/_MEDattributeNumWrByName.c
index 229c836..131e45d 100644
--- a/src/hdfi/_MEDattributeNumWrByName.c
+++ b/src/hdfi/_MEDattributeNumWrByName.c
@@ -68,7 +68,7 @@ med_err _MEDattributeNumWrByName(med_idt pid,
 
   if  ( (_attid=H5Aopen_by_name( pid, path, attname, H5P_DEFAULT, H5P_DEFAULT )) >= 0 ) {
 
-    if ( H5Oget_info( pid, &_oinfo ) <0) {
+    if ( H5Oget_info( pid, &_oinfo, H5O_INFO_ALL ) <0) {
 	MED_ERR_(_ret,MED_ERR_CALL,MED_ERR_API,"H5Oget_info");
 	goto ERROR;
     }
diff --git a/src/hdfi/_MEDcheckAttributeStringFunc.c b/src/hdfi/_MEDcheckAttributeStringFunc.c
index 4def049..fe360c3 100644
--- a/src/hdfi/_MEDcheckAttributeStringFunc.c
+++ b/src/hdfi/_MEDcheckAttributeStringFunc.c
@@ -40,7 +40,7 @@ med_err _MEDcheckAttributeStringFunc(med_idt id,const char *lname, const H5L_inf
     oinfo.type=H5G_LINK;
     break;
   case H5L_TYPE_HARD:
-    if ( H5Oget_info_by_name( id, lname, &oinfo, H5P_DEFAULT ) <0) {
+    if ( H5Oget_info_by_name( id, lname, &oinfo, H5O_INFO_ALL, H5P_DEFAULT ) <0) {
       MED_ERR_(_ret,MED_ERR_CALL,MED_ERR_API,"H5Oget_info_by_name");
       SSCRUTE(lname);
     }
diff --git a/src/hdfi/_MEDchecknSublinkFunc.c b/src/hdfi/_MEDchecknSublinkFunc.c
index 2e1a284..b12a4d9 100644
--- a/src/hdfi/_MEDchecknSublinkFunc.c
+++ b/src/hdfi/_MEDchecknSublinkFunc.c
@@ -41,7 +41,7 @@ med_err _MEDchecknSublinkFunc(med_idt id,const char *lname, const H5L_info_t *li
     oinfo.type=H5G_LINK;
     break;
   case H5L_TYPE_HARD:
-    if ( H5Oget_info_by_name( id, lname, &oinfo, H5P_DEFAULT ) <0) {
+    if ( H5Oget_info_by_name( id, lname, &oinfo, H5O_INFO_ALL, H5P_DEFAULT ) <0) {
       MED_ERR_(_ret,MED_ERR_CALL,MED_ERR_API,"H5Oget_info_by_name");
       SSCRUTE(lname);
     }
diff --git a/src/hdfi/_MEDdatagroupExist.c b/src/hdfi/_MEDdatagroupExist.c
index e815d5c..d18bf4f 100644
--- a/src/hdfi/_MEDdatagroupExist.c
+++ b/src/hdfi/_MEDdatagroupExist.c
@@ -45,7 +45,7 @@ med_err _MEDdatagroupExist(const med_idt        gid,
 
     case H5L_TYPE_HARD:
       *isasoftlink  = MED_FALSE;
-      if ( H5Oget_info_by_name( gid, datagroupname, &_oinfo, H5P_DEFAULT ) <0) {
+      if ( H5Oget_info_by_name( gid, datagroupname, &_oinfo, H5O_INFO_ALL, H5P_DEFAULT ) <0) {
 	MED_ERR_(_ret,MED_ERR_CALL,MED_ERR_API,"H5Oget_info_by_name");
 	SSCRUTE( datagroupname);
       }
diff --git a/src/hdfi/_MEDdatasetExist.c b/src/hdfi/_MEDdatasetExist.c
index 4852945..8969eb2 100644
--- a/src/hdfi/_MEDdatasetExist.c
+++ b/src/hdfi/_MEDdatasetExist.c
@@ -47,7 +47,7 @@ med_err _MEDdatasetExist(const med_idt       gid,
 
     case H5L_TYPE_HARD:
       *isasoftlink  = MED_FALSE;
-      if ( H5Oget_info_by_name( gid, datasetname, &_oinfo, H5P_DEFAULT ) <0) {
+      if ( H5Oget_info_by_name( gid, datasetname, &_oinfo, H5O_INFO_ALL, H5P_DEFAULT ) <0) {
 	MED_ERR_(_ret,MED_ERR_CALL,MED_ERR_API,"H5Oget_info_by_name");
 	SSCRUTE( datasetname);
       }
diff --git a/src/hdfi/_MEDfileCreate.c b/src/hdfi/_MEDfileCreate.c
index c685eda..5f1bd4a 100644
--- a/src/hdfi/_MEDfileCreate.c
+++ b/src/hdfi/_MEDfileCreate.c
@@ -159,7 +159,7 @@ med_idt _MEDfileCreate(const char * const filename, const med_access_mode access
    * En HDF5-1.10.0p1 cela n'a aucun effet ! 
    * Un test autoconf permet de fixer un intervalle de version HDF à MED.
    */
-#if H5_VERS_MINOR > 10
+#if H5_VERS_MINOR > 12
 #error "Don't forget to change the compatibility version of the library !"
 #endif
    
diff --git a/src/hdfi/_MEDfileOpen.c b/src/hdfi/_MEDfileOpen.c
index 7044763..23a0cfd 100644
--- a/src/hdfi/_MEDfileOpen.c
+++ b/src/hdfi/_MEDfileOpen.c
@@ -72,7 +72,7 @@ med_idt _MEDfileOpen(const char * const filename,const med_access_mode accessmod
 
    •   The creation order tracking property, H5P_CRT_ORDER_TRACKED, has been set in the group creation property list (see H5Pset_link_creation_order). 
   */
-#if H5_VERS_MINOR > 10
+#if H5_VERS_MINOR > 12
 #error "Don't forget to change the compatibility version of the library !"
 #endif
 /* L'avantage de bloquer le modèle interne HDF5 
diff --git a/src/hdfi/_MEDlinkObjs.c b/src/hdfi/_MEDlinkObjs.c
index 6d00f5b..2d50dcd 100644
--- a/src/hdfi/_MEDlinkObjs.c
+++ b/src/hdfi/_MEDlinkObjs.c
@@ -62,7 +62,7 @@ med_err _MEDlinkobjs(med_idt id,const char *lname, const H5L_info_t *linfo, visi
        sur un lien hard
        Sur un lien soft H5O_TYPE_UNKNOWN
     */
-    if ( H5Oget_info_by_name( id, lname, &oinfo, H5P_DEFAULT ) <0) {
+    if ( H5Oget_info_by_name( id, lname, &oinfo, H5O_INFO_ALL, H5P_DEFAULT ) <0) {
       MED_ERR_(_ret,MED_ERR_CALL,MED_ERR_API,"H5Oget_info_by_name");
       SSCRUTE(lname);
     }
diff --git a/src/hdfi/_MEDmemFileOpen.c b/src/hdfi/_MEDmemFileOpen.c
index 7a10e9b..3a3d6ae 100644
--- a/src/hdfi/_MEDmemFileOpen.c
+++ b/src/hdfi/_MEDmemFileOpen.c
@@ -434,7 +434,7 @@ med_idt _MEDmemFileOpen(const char * const filename, med_memfile * const memfile
     goto ERROR;
   }
 
-#if H5_VERS_MINOR > 10
+#if H5_VERS_MINOR > 12
 #error "Don't forget to change the compatibility version of the library !"
 #endif
   if ( H5Pset_libver_bounds( _fapl, H5F_LIBVER_18, H5F_LIBVER_18) ) {
diff --git a/src/hdfi/_MEDparFileCreate.c b/src/hdfi/_MEDparFileCreate.c
index e1fc029..b0d7070 100644
--- a/src/hdfi/_MEDparFileCreate.c
+++ b/src/hdfi/_MEDparFileCreate.c
@@ -64,7 +64,7 @@ med_idt _MEDparFileCreate(const char * const filename, const med_access_mode acc
    * En HDF5-1.10.0p1 cela n'a aucun effet ! 
    * Un test autoconf permet de fixer un intervalle de version HDF à MED.
    */
-#if H5_VERS_MINOR > 10
+#if H5_VERS_MINOR > 12
 #error "Don't forget to change the compatibility version of the library !"
 #endif
    
diff --git a/src/hdfi/_MEDparFileOpen.c b/src/hdfi/_MEDparFileOpen.c
index 875989f..aea4b22 100644
--- a/src/hdfi/_MEDparFileOpen.c
+++ b/src/hdfi/_MEDparFileOpen.c
@@ -55,7 +55,7 @@ med_idt _MEDparFileOpen(const char * const filename,const med_access_mode access
     MED_ERR_(_fid,MED_ERR_INIT,MED_ERR_PROPERTY,MED_ERR_PARALLEL_MSG);
     goto ERROR;
   }
-#if H5_VERS_MINOR > 10
+#if H5_VERS_MINOR > 12
 #error "Don't forget to change the compatibility version of the library !"
 #endif
   if ( H5Pset_libver_bounds( _fapl, H5F_LIBVER_18, H5F_LIBVER_18 ) ) {
diff --git a/tools/medimport/2.3.6/_MEDconvertStringDatasets.c b/tools/medimport/2.3.6/_MEDconvertStringDatasets.c
index 9a1c706..fd749d6 100644
--- a/tools/medimport/2.3.6/_MEDconvertStringDatasets.c
+++ b/tools/medimport/2.3.6/_MEDconvertStringDatasets.c
@@ -52,7 +52,7 @@ med_err _MEDconvertStringDatasets(med_idt id, const char *lname, const H5L_info_
     oinfo.type=(H5O_type_t) H5G_LINK;
     break;
   case H5L_TYPE_HARD:
-    if ( H5Oget_info_by_name( id, lname, &oinfo, H5P_DEFAULT ) <0) {
+    if ( H5Oget_info_by_name( id, lname, &oinfo, H5O_INFO_ALL, H5P_DEFAULT ) <0) {
       MED_ERR_(_ret,MED_ERR_CALL,MED_ERR_API,"H5Oget_info_by_name");
       SSCRUTE(lname);
     }
-- 
2.37.1

