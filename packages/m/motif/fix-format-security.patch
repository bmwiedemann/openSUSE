diff -Nur motif-2.3.8/lib/Mrm/Mrmhier.c new/lib/Mrm/Mrmhier.c
--- motif-2.3.8/lib/Mrm/Mrmhier.c	2017-08-17 02:38:43.000000000 +0200
+++ new/lib/Mrm/Mrmhier.c	2022-04-24 02:34:28.095728812 +0200
@@ -259,10 +259,10 @@
 	    case MrmSUCCESS:
 	      break;
 	    case MrmNOT_VALID:
-	      sprintf (err_stg, _MrmMMsg_0113);
+	      sprintf (err_stg, "%s", _MrmMMsg_0113);
 	      break;
 	    default:
-	      sprintf (err_stg, _MrmMMsg_0114);
+	      sprintf (err_stg, "%s", _MrmMMsg_0114);
 	      break;
 	    }
 	}
diff -Nur motif-2.3.8/lib/Mrm/Mrmicon.c new/lib/Mrm/Mrmicon.c
--- motif-2.3.8/lib/Mrm/Mrmicon.c	2017-08-17 02:38:43.000000000 +0200
+++ new/lib/Mrm/Mrmicon.c	2022-04-24 02:34:28.095728812 +0200
@@ -1170,7 +1170,7 @@
 		}
 		break;
 	      default:
-		sprintf(err_msg, _MrmMMsg_0040);
+		sprintf(err_msg, "%s", _MrmMMsg_0040);
 		return Urm__UT_Error ("Urm__RelizeColorTable",
 				      err_msg, NULL, NULL, MrmFAILURE) ;
 	      }
@@ -1246,7 +1246,7 @@
 	      break;
 	    default:
 	      result = MrmFAILURE;
-	      sprintf (err_msg, _MrmMMsg_0040);
+	      sprintf (err_msg, "%s", _MrmMMsg_0040);
 	      Urm__UT_Error ("Urm__RelizeColorTable",
 			     err_msg, NULL, NULL, MrmFAILURE) ;
 	    }
diff -Nur motif-2.3.8/lib/Mrm/Mrmlread.c new/lib/Mrm/Mrmlread.c
--- motif-2.3.8/lib/Mrm/Mrmlread.c	2017-08-17 02:38:43.000000000 +0200
+++ new/lib/Mrm/Mrmlread.c	2022-04-24 02:34:28.095728812 +0200
@@ -685,7 +685,7 @@
 	 XBlackPixelOfScreen(XDefaultScreenOfDisplay(display)));
       break;
     default:
-      sprintf(err_msg, _MrmMMsg_0040);
+      sprintf(err_msg, "%s", _MrmMMsg_0040);
       result = Urm__UT_Error ("MrmFetchColorLiteral",
 			      err_msg, NULL, NULL, MrmFAILURE) ;
       _MrmAppUnlock(app);
diff -Nur motif-2.3.8/lib/Mrm/Mrmwcrw.c new/lib/Mrm/Mrmwcrw.c
--- motif-2.3.8/lib/Mrm/Mrmwcrw.c	2017-08-17 02:38:43.000000000 +0200
+++ new/lib/Mrm/Mrmwcrw.c	2022-04-24 02:34:28.095728812 +0200
@@ -1385,7 +1385,7 @@
 			}
 		      break;
 		    default:
-		      sprintf (err_msg, _MrmMMsg_0040);
+		      sprintf (err_msg, "%s", _MrmMMsg_0040);
 		      result = Urm__UT_Error ("Urm__CW_ConvertValue",
 					      err_msg, NULL, NULL, MrmFAILURE) ;
 		    };
@@ -2421,7 +2421,7 @@
 	    }
 	  break;
 	default:
-	  sprintf(err_msg, _MrmMMsg_0040);
+	  sprintf(err_msg, "%s", _MrmMMsg_0040);
 	  return Urm__UT_Error ("Urm__CW_ConvertValue",
 				err_msg, NULL, NULL, MrmFAILURE) ;
 	};
diff -Nur motif-2.3.8/tools/wml/wmlouth.c new/tools/wml/wmlouth.c
--- motif-2.3.8/tools/wml/wmlouth.c	2017-08-17 02:38:43.000000000 +0200
+++ new/tools/wml/wmlouth.c	2022-04-24 02:34:28.095728812 +0200
@@ -219,12 +219,12 @@
     printf ("\nCouldn't open UilSymGen.h");
     return;
     }
-fprintf (outfil, canned_warn);
+fprintf (outfil, "%s", canned_warn);
 
 /*
  * Write the sym_k..._object literals
  */
-fprintf (outfil, canned1);
+fprintf (outfil, "%s", canned1);
 for ( ndx=0 ; ndx<wml_obj_class_ptr->cnt ; ndx++ )
     {
     clsobj = (WmlClassDefPtr) wml_obj_class_ptr->hvec[ndx].objptr;
@@ -238,7 +238,7 @@
 /*
  * Define the sym_k_..._reason literals
  */
-fprintf (outfil, canned3);
+fprintf (outfil, "%s", canned3);
 for ( ndx=0 ; ndx<wml_obj_reason_ptr->cnt ; ndx++ )
     {
     resobj = (WmlResourceDefPtr) wml_obj_reason_ptr->hvec[ndx].objptr;
@@ -252,7 +252,7 @@
 /*
  * Define the sym_k_..._arg literals
  */
-fprintf (outfil, canned4);
+fprintf (outfil, "%s", canned4);
 for ( ndx=0 ; ndx<wml_obj_arg_ptr->cnt ; ndx++ )
     {
     resobj = (WmlResourceDefPtr) wml_obj_arg_ptr->hvec[ndx].objptr;
@@ -266,7 +266,7 @@
 /*
  * Define the sym_k_..._enumset structs and literals
  */
-fprintf (outfil, canned5);
+fprintf (outfil, "%s", canned5);
 for ( ndx=0 ; ndx<wml_obj_enumset_ptr->cnt ; ndx++ )
     {
     enumsetobj = (WmlEnumSetDefPtr) wml_obj_enumset_ptr->hvec[ndx].objptr;
@@ -280,7 +280,7 @@
 /*
  * Define the sym_k_..._enumval literals
  */
-fprintf (outfil, canned6);
+fprintf (outfil, "%s", canned6);
 for ( ndx=0 ; ndx<wml_obj_enumval_ptr->cnt ; ndx++ )
     {
     enumvalobj = (WmlEnumValueDefPtr) wml_obj_enumval_ptr->hvec[ndx].objptr;
@@ -295,7 +295,7 @@
  * Define the sym_k_..._charsize literals
  * Define the sym_k_..._charset literals
  */
-fprintf (outfil, canned7);
+fprintf (outfil, "%s", canned7);
 for ( ndx=0 ; ndx<wml_obj_charset_ptr->cnt ; ndx++ )
     {
     charsetobj = (WmlCharSetDefPtr) wml_obj_charset_ptr->hvec[ndx].objptr;
@@ -309,7 +309,7 @@
 /*
  * Define the sym_k_..._child literals
  */
-fprintf (outfil, canned8);
+fprintf (outfil, "%s", canned8);
 for ( ndx=0 ; ndx<wml_obj_child_ptr->cnt ; ndx++ )
     {
     childobj = (WmlChildDefPtr) wml_obj_child_ptr->hvec[ndx].objptr;
@@ -373,12 +373,12 @@
     printf ("\nCouldn't open UilSymChCL.h");
     return;
     }
-fprintf (outfil, canned_warn);
+fprintf (outfil, "%s", canned_warn);
 
 /*
  * Create table entries, similar to writing sym_k...
  */
-fprintf (outfil, canned1);
+fprintf (outfil, "%s", canned1);
 for ( ndx=0 ; ndx<wml_obj_child_ptr->cnt ; ndx++ )
     {
     childobj = (WmlChildDefPtr) wml_obj_child_ptr->hvec[ndx].objptr;
@@ -386,7 +386,7 @@
     fprintf (outfil, "    sym_k_%s_object,\n",
 	     classobj->tkname);
     }
-fprintf (outfil, canned1a);
+fprintf (outfil, "%s", canned1a);
 
 /*
  * close the output file
@@ -440,12 +440,12 @@
     printf ("\nCouldn't open UilSymArTy.h");
     return;
     }
-fprintf (outfil, canned_warn);
+fprintf (outfil, "%s", canned_warn);
 
 /*
  * Create table entries, similar to writing sym_k...
  */
-fprintf (outfil, canned1);
+fprintf (outfil, "%s", canned1);
 for ( ndx=0 ; ndx<wml_obj_arg_ptr->cnt ; ndx++ )
     {
     resobj = (WmlResourceDefPtr) wml_obj_arg_ptr->hvec[ndx].objptr;
@@ -453,7 +453,7 @@
     fprintf (outfil, "    sym_k_%s_value,\n",
 	     datobj->tkname);
     }
-fprintf (outfil, canned1a);
+fprintf (outfil, "%s", canned1a);
 
 /*
  * close the output file
@@ -503,19 +503,19 @@
     printf ("\nCouldn't open UilSymRArg.h");
     return;
     }
-fprintf (outfil, canned_warn);
+fprintf (outfil, "%s", canned_warn);
 
 /*
  * Create table entries, similar to writing sym_k...
  */
-fprintf (outfil, canned1);
+fprintf (outfil, "%s", canned1);
 for ( ndx=0 ; ndx<wml_obj_arg_ptr->cnt ; ndx++ )
     {
     resobj = (WmlResourceDefPtr) wml_obj_arg_ptr->hvec[ndx].objptr;
     fprintf (outfil, "    %d,\n",
 	     resobj->related_code);
     }
-fprintf (outfil, canned1a);
+fprintf (outfil, "%s", canned1a);
 
 /*
  * close the output file
@@ -615,12 +615,12 @@
     printf ("\nCouldn't open UilUrmClas.h");
     return;
     }
-fprintf (outfil, canned_warn);
+fprintf (outfil, "%s", canned_warn);
 
 /*
  * Write entries for widgets
  */
-fprintf (outfil, canned1);
+fprintf (outfil, "%s", canned1);
 for ( ndx=0 ; ndx<wml_obj_class_ptr->cnt ; ndx++ )
     {
     clsobj = (WmlClassDefPtr) wml_obj_class_ptr->hvec[ndx].objptr;
@@ -631,7 +631,7 @@
     else 
 	fprintf (outfil, "  \"%s\",\t\n", synobj->convfunc);
     }
-fprintf (outfil, canned2);
+fprintf (outfil, "%s", canned2);
 
 /*
  * Write entries for gadget variants of widget classes
@@ -655,7 +655,7 @@
 		     synobj->name);
 	}
     }
-fprintf (outfil, canned3);
+fprintf (outfil, "%s", canned3);
 
 /*
  * Write entries for non-dialog widgets
@@ -679,7 +679,7 @@
 		     synobj->name);
 	}
     }
-fprintf (outfil, canned4);
+fprintf (outfil, "%s", canned4);
 
 /*
  * Write entries for the resource a widget's controls map to
@@ -695,7 +695,7 @@
     else
 	fprintf (outfil, "  sym_k_%s_arg,\n", mapresobj->tkname);
     }
-fprintf (outfil, canned5);
+fprintf (outfil, "%s", canned5);
 
 /*
  * Write entries for arguments
@@ -708,7 +708,7 @@
     fprintf (outfil, "  %s,\n",
 	     synres->resliteral);
     }
-fprintf (outfil, canned6);
+fprintf (outfil, "%s", canned6);
 
 /*
  * Write entries for reasons
@@ -721,7 +721,7 @@
     fprintf (outfil, "  %s,\n",
 	     synres->resliteral);
     }
-fprintf (outfil, canned7);
+fprintf (outfil, "%s", canned7);
 
 /*
  * close the output file
@@ -775,13 +775,13 @@
     printf ("\nCouldn't open UilConst.h");
     return;
     }
-fprintf (outfil, canned_warn);
+fprintf (outfil, "%s", canned_warn);
 
 /*
  * Process the arguments in code order. We start with 1, and write out
  * the mask after processing 8 codes.
  */
-fprintf (outfil, canned1);
+fprintf (outfil, "%s", canned1);
 strcpy (maskbuf, "0");
 for ( ndx=0 ; ndx<wml_obj_arg_ptr->cnt ; ndx++ )
     {
@@ -799,7 +799,7 @@
     }
 if ( bitno != 8 )
     fprintf (outfil, "%s", maskbuf);
-fprintf (outfil, canned1a);
+fprintf (outfil, "%s", canned1a);
 
 /*
  * close the output file
@@ -872,8 +872,8 @@
     printf ("\nCouldn't open UilSymReas.h");
     return;
     }
-fprintf (outfil, canned_warn);
-fprintf (outfil, canned1);
+fprintf (outfil, "%s", canned_warn);
+fprintf (outfil, "%s", canned1);
 
 /*
  * Generate the bit vectors for each class. Outer loop on the reason code,
@@ -919,13 +919,13 @@
 /*
  * Write the vector of vectors.
  */
-fprintf (outfil, canned2);
+fprintf (outfil, "%s", canned2);
 for ( resndx=0 ; resndx<wml_obj_reason_ptr->cnt ; resndx++ )
     {
     resobj = (WmlResourceDefPtr) wml_obj_reason_ptr->hvec[resndx].objptr;
     fprintf (outfil, "  reason_class_vec%d,\n", resobj->sym_code);
     }
-fprintf (outfil, canned3);
+fprintf (outfil, "%s", canned3);
 
 /*
  * close the output file
@@ -998,8 +998,8 @@
     printf ("\nCouldn't open UilSymArTa.h");
     return;
     }
-fprintf (outfil, canned_warn);
-fprintf (outfil, canned1);
+fprintf (outfil, "%s", canned_warn);
+fprintf (outfil, "%s", canned1);
 
 /*
  * Generate the bit vectors for each class. Outer loop on the argument code,
@@ -1045,13 +1045,13 @@
 /*
  * Write the vector of vectors.
  */
-fprintf (outfil, canned2);
+fprintf (outfil, "%s", canned2);
 for ( resndx=0 ; resndx<wml_obj_arg_ptr->cnt ; resndx++ )
     {
     resobj = (WmlResourceDefPtr) wml_obj_arg_ptr->hvec[resndx].objptr;
     fprintf (outfil, "  arg_class_vec%d,\n", resobj->sym_code);
     }
-fprintf (outfil, canned3);
+fprintf (outfil, "%s", canned3);
 
 /*
  * close the output file
@@ -1123,8 +1123,8 @@
     printf ("\nCouldn't open UilSymChTa.h");
     return;
     }
-fprintf (outfil, canned_warn);
-fprintf (outfil, canned1);
+fprintf (outfil, "%s", canned_warn);
+fprintf (outfil, "%s", canned1);
 
 /*
  * Generate the bit vectors for each class. Outer loop on the child code,
@@ -1168,13 +1168,13 @@
 /*
  * Write the vector of vectors.
  */
-fprintf (outfil, canned2);
+fprintf (outfil, "%s", canned2);
 for ( childndx=0 ; childndx<wml_obj_child_ptr->cnt ; childndx++ )
     {
     childobj = (WmlChildDefPtr) wml_obj_child_ptr->hvec[childndx].objptr;
     fprintf (outfil, "  child_class_vec%d,\n", childobj->sym_code);
     }
-fprintf (outfil, canned3);
+fprintf (outfil, "%s", canned3);
 
 /*
  * close the output file
@@ -1245,8 +1245,8 @@
     printf ("\nCouldn't open UilSymCtl.h");
     return;
     }
-fprintf (outfil, canned_warn);
-fprintf (outfil, canned1);
+fprintf (outfil, "%s", canned_warn);
+fprintf (outfil, "%s", canned1);
 
 /*
  * Generate the bit vectors for each class. Outer loop on the class code,
@@ -1290,13 +1290,13 @@
 /*
  * Write the vector of vectors.
  */
-fprintf (outfil, canned2);
+fprintf (outfil, "%s", canned2);
 for ( ctlndx=0 ; ctlndx<wml_obj_class_ptr->cnt ; ctlndx++ )
     {
     clsobj = (WmlClassDefPtr) wml_obj_class_ptr->hvec[ctlndx].objptr;
     fprintf (outfil, "  object_class_vec%d,\n", clsobj->sym_code);
     }
-fprintf (outfil, canned3);
+fprintf (outfil, "%s", canned3);
 
 /*
  * close the output file
@@ -1432,7 +1432,7 @@
     printf ("\nCouldn't open UilSymNam.h");
     return;
     }
-fprintf (outfil, canned_warn);
+fprintf (outfil, "%s", canned_warn);
 
 /*
  * Write entries for widgets
@@ -1511,7 +1511,7 @@
     fprintf (outfil, "    \"%s\",\n",
 	     synch->name);
     }
-fprintf (outfil, canned7);
+fprintf (outfil, "%s", canned7);
 
 /*
  * close the output file
@@ -1615,12 +1615,12 @@
     printf ("\nCouldn't open UilSymEnum.h");
     return;
     }
-fprintf (outfil, canned_warn);
+fprintf (outfil, "%s", canned_warn);
 
 /*
  * Generate the enumeration value vectors for each enumeration set.
  */
-fprintf (outfil, canned1);
+fprintf (outfil, "%s", canned1);
 for ( ndx=0 ; ndx<wml_obj_enumset_ptr->cnt ; ndx++ )
     {
     enumsetobj = (WmlEnumSetDefPtr) wml_obj_enumset_ptr->hvec[ndx].objptr;
@@ -1637,7 +1637,7 @@
 /*
  * Generate the enumeration set tables
  */
-fprintf (outfil, canned3);
+fprintf (outfil, "%s", canned3);
 for ( ndx=0 ; ndx<wml_obj_enumset_ptr->cnt ; ndx++ )
     {
     enumsetobj = (WmlEnumSetDefPtr) wml_obj_enumset_ptr->hvec[ndx].objptr;
@@ -1649,7 +1649,7 @@
 /*
  * Create enumset table entries for arguments, similar to writing sym_k...
  */
-fprintf (outfil, canned4);
+fprintf (outfil, "%s", canned4);
 for ( ndx=0 ; ndx<wml_obj_arg_ptr->cnt ; ndx++ )
     {
     resobj = (WmlResourceDefPtr) wml_obj_arg_ptr->hvec[ndx].objptr;
@@ -1663,13 +1663,13 @@
 /*
  * Create the enumval values table.
  */
-fprintf (outfil, canned5);
+fprintf (outfil, "%s", canned5);
 for ( ndx=0 ; ndx<wml_obj_enumval_ptr->cnt ; ndx++ )
     {
     evobj = (WmlEnumValueDefPtr) wml_obj_enumval_ptr->hvec[ndx].objptr;
     fprintf (outfil, "  %s,\n", evobj->syndef->enumlit);
     }
-fprintf (outfil, canned5a);
+fprintf (outfil, "%s", canned5a);
 
 /*
  * close the output file
@@ -1807,12 +1807,12 @@
     printf ("\nCouldn't open UilSymCSet.h");
     return;
     }
-fprintf (outfil, canned_warn);
+fprintf (outfil, "%s", canned_warn);
 
 /*
  * Generate the standards name table
  */
-fprintf (outfil, canned1);
+fprintf (outfil, "%s", canned1);
 for ( ndx=0 ; ndx<wml_obj_charset_ptr->cnt ; ndx++ )
     {
     csobj = (WmlCharSetDefPtr) wml_obj_charset_ptr->hvec[ndx].objptr;
@@ -1830,7 +1830,7 @@
 /*
  * Generate the writing direction table
  */
-fprintf (outfil, canned2);
+fprintf (outfil, "%s", canned2);
 for ( ndx=0 ; ndx<wml_obj_charset_ptr->cnt ; ndx++ )
     {
     csobj = (WmlCharSetDefPtr) wml_obj_charset_ptr->hvec[ndx].objptr;
@@ -1852,7 +1852,7 @@
 /*
  * Generate the parsing direction table
  */
-fprintf (outfil, canned3);
+fprintf (outfil, "%s", canned3);
 for ( ndx=0 ; ndx<wml_obj_charset_ptr->cnt ; ndx++ )
     {
     csobj = (WmlCharSetDefPtr) wml_obj_charset_ptr->hvec[ndx].objptr;
@@ -1874,7 +1874,7 @@
 /*
  * Generate the character size table
  */
-fprintf (outfil, canned4);
+fprintf (outfil, "%s", canned4);
 for ( ndx=0 ; ndx<wml_obj_charset_ptr->cnt ; ndx++ )
     {
     csobj = (WmlCharSetDefPtr) wml_obj_charset_ptr->hvec[ndx].objptr;
@@ -1900,7 +1900,7 @@
 /*
  * Generate the $LANG name recognition table
  */
-fprintf (outfil, canned5);
+fprintf (outfil, "%s", canned5);
 lang_max = 0;
 for ( ndx=0 ; ndx<wml_obj_charset_ptr->cnt ; ndx++ )
     {
@@ -1930,7 +1930,7 @@
 /*
  * Generate the $LANG code lookup table, in upper case
  */
-fprintf (outfil, canned6);
+fprintf (outfil, "%s", canned6);
 for ( ndx=0 ; ndx<wml_obj_charset_ptr->cnt ; ndx++ )
     {
     csobj = (WmlCharSetDefPtr) wml_obj_charset_ptr->hvec[ndx].objptr;
diff -Nur motif-2.3.8/tools/wml/wmloutkey.c new/tools/wml/wmloutkey.c
--- motif-2.3.8/tools/wml/wmloutkey.c	2017-08-17 02:38:43.000000000 +0200
+++ new/tools/wml/wmloutkey.c	2022-04-24 02:34:28.095728812 +0200
@@ -568,16 +568,16 @@
     printf ("\nCouldn't open UilKeyTab.h");
     return;
     }
-fprintf (outfil, canned_warn);
+fprintf (outfil, "%s", canned_warn);
 
 /*
  * Print the case sensitive and insensitive tables
  */
-fprintf (outfil, canned1);
+fprintf (outfil, "%s", canned1);
 wmlOutputUilKeyTabBody (outfil, wml_tok_sens_ptr, &maxlen, &maxkey);
 fprintf (outfil, canned2, maxlen, maxkey);
 wmlOutputUilKeyTabBody (outfil, wml_tok_insens_ptr, &maxlen, &maxkey);
-fprintf (outfil, canned3);
+fprintf (outfil, "%s", canned3);
 
 /*
  * close the output file
@@ -806,8 +806,8 @@
     printf ("\nCouldn't open UilTokName.h");
     return;
     }
-fprintf (outfil, canned_warn);
-fprintf (outfil, canned1);
+fprintf (outfil, "%s", canned_warn);
+fprintf (outfil, "%s", canned1);
 
 /*
  * Print the token name entries
diff -Nur motif-2.3.8/tools/wml/wmloutmm.c new/tools/wml/wmloutmm.c
--- motif-2.3.8/tools/wml/wmloutmm.c	2017-08-17 02:38:43.000000000 +0200
+++ new/tools/wml/wmloutmm.c	2022-04-24 02:34:28.095728812 +0200
@@ -203,9 +203,9 @@
 /*
  * Write out header information
  */
-fprintf (outfil, canned1);
+fprintf (outfil, "%s", canned1);
 fprintf (outfil, "%s\n", name);
-fprintf (outfil, canned2);
+fprintf (outfil, "%s", canned2);
 
 /*
  * Alphabetize the controls, reason, and argument lists
@@ -281,7 +281,7 @@
     else
 	fprintf (outfil, "\n");
     }
-fprintf (outfil, canned3);
+fprintf (outfil, "%s", canned3);
 
 /*
  * Write out the argument table
@@ -317,7 +317,7 @@
     }    
     argndx += 1;
     }
-fprintf (outfil, canned4);
+fprintf (outfil, "%s", canned4);
 
 }
 
