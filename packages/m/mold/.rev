<revisionlist>
  <revision rev="1" vrev="1">
    <srcmd5>858344c2d79be113703f2a53e4c60ac4</srcmd5>
    <version>1.0.0</version>
    <time>1640111945</time>
    <user>dimstar_suse</user>
    <comment>Add new Modern Linker (mold) package.</comment>
    <requestid>941885</requestid>
  </revision>
  <revision rev="2" vrev="2">
    <srcmd5>17f440c248f17eee097cc6f6863c3f5a</srcmd5>
    <version>1.0.0</version>
    <time>1640200690</time>
    <user>dimstar_suse</user>
    <comment>- Ignore -Wno-sign-compare for now.

- Use system package for tbb and xxhash.</comment>
    <requestid>942074</requestid>
  </revision>
  <revision rev="3" vrev="1">
    <srcmd5>47321d9eae1f820067541a2efd750783</srcmd5>
    <version>1.0.1</version>
    <time>1641321449</time>
    <user>dimstar_suse</user>
    <comment>- Start using %{_libexecdir} as an installation location.

- Remove quotationsmarks from build_args as it prevented the use
  of system packages for TBB and xxHash.
- Drop configure-fix.patch as xxHash is used from system package,
  so we don't need to patch the wrong configuration of xxHash.
- Use telling name of source tarball, adjust GitHub url to have
  matching names.

- Update to version 1.0.1:
  * make install now creates /usr/local/libexec/mold/ld as
  a symlink to the mold executable. We do this for GCC.
  By passing -B/usr/local/libexec/mold, you can tell GCC to use ld
  inside that directory instead of /usr/bin/ld. (e8dcecf)
  * xxHash library is now included in the mold's source tree as a subtree for ease of building.
    If you want to link against a libxxhash in a system library directory, pass SYSTEM_XXHASH=1 to make. (665bffa)
  * The extern &quot;C++&quot; directive is now supported in the dynamic list. (7aa5c39)
  * --color-diagnostics is supported. mold used to ignore that flag. (6e290aa)
  * Not only * but also ? are now treated as special characters in the version script wildcard pattern. (31b0248)
  * The --threads=N option has been added as
    an alias for --thread-count=N. (f9ff048)
  * The following option has been added: --defsym (f6e8006), -z nodefaultlib (8c86c28),
    -z separate-code, -z noseparate-code and -z separate-lodable-segments (5601cf4), -z max-page-size (f3766cd)
- Add workaround patch configure-fix.patch.</comment>
    <requestid>943544</requestid>
  </revision>
  <revision rev="4" vrev="1">
    <srcmd5>ccc436b7393d9217d2d764b9fb69f9bd</srcmd5>
    <version>1.0.2</version>
    <time>1642941698</time>
    <user>dimstar_suse</user>
    <comment>- Update to version 1.0.2: complete release notes can be found here:
  https://github.com/rui314/mold/releases/tag/v1.0.2.</comment>
    <requestid>948209</requestid>
  </revision>
  <revision rev="5" vrev="1">
    <srcmd5>e7809f42d4e4d64270bfa2f3b458cbd7</srcmd5>
    <version>1.0.3</version>
    <time>1643838005</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>950270</requestid>
  </revision>
  <revision rev="6" vrev="1">
    <srcmd5>e9fbc80856185c169dc931e905fc945e</srcmd5>
    <version>1.1</version>
    <time>1645462001</time>
    <user>dimstar_suse</user>
    <comment>- Update to version 1.1:
  https://github.com/rui314/mold/releases/tag/v1.1.</comment>
    <requestid>956314</requestid>
  </revision>
  <revision rev="7" vrev="2">
    <srcmd5>0e7b08c9817fd2c1586365b42eccc8dd</srcmd5>
    <version>1.1</version>
    <time>1645723267</time>
    <user>dimstar_suse</user>
    <comment>- Fix building for openSUSE Leap 15.3 and 15.4.</comment>
    <requestid>957354</requestid>
  </revision>
  <revision rev="8" vrev="1">
    <srcmd5>57d103eb56ef4c96e9417f768ac10832</srcmd5>
    <version>1.1.1</version>
    <time>1646767931</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>960207</requestid>
  </revision>
  <revision rev="9" vrev="2">
    <srcmd5>c9e2076a82dfe7726b1f35d9176353c1</srcmd5>
    <version>1.1.1</version>
    <time>1649450786</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>967876</requestid>
  </revision>
  <revision rev="10" vrev="1">
    <srcmd5>a15f31b962df50832508490d57a15dcf</srcmd5>
    <version>1.2</version>
    <time>1650060934</time>
    <user>dimstar_suse</user>
    <comment>- Update to version 1.2.0
  * The ARM32 target is now supported.
  * --gdb-index is implemented.
  * mold now supports the following flags: --start-address, -Tbss,
    -Tdata, -Ttext, --oformat=binary, --disable-new-dtags</comment>
    <requestid>970337</requestid>
  </revision>
  <revision rev="11" vrev="2">
    <srcmd5>66175bad4cac39b2be504654361294f5</srcmd5>
    <version>1.2</version>
    <time>1650466480</time>
    <user>dimstar_suse</user>
    <comment>- Run test serially.
- Install some packages in order to increase test coverage.
- Use ExclusiveArch.

- Add fix-gdb-index.patch.
- Enable tests.</comment>
    <requestid>971086</requestid>
  </revision>
  <revision rev="12" vrev="1">
    <srcmd5>ab9678a15946f5d488e44a4ce85b9048</srcmd5>
    <version>1.2.1</version>
    <time>1651180097</time>
    <user>dimstar_suse</user>
    <comment>- Update to version 1.2.1
  * Various bugs in --gdb-index have been fixed.
  * mold now recognizes --thinlto-cache-dir and --thinlto-cache-policy
    for the sake of compatibility with LLVM lld. (7ebd071)
  * mold can now handle TLS common symbols. It looks like GCC
    sometimes creates such symbol for a thread-local variable. (cf850f8)
  * In some edge cases, mold created a non-versioned symbol and
    a versioned one for the same symbol, even though if one symbol is versioned,
    all symbols of the same name must be versioned.
    This bug has been fixed. (8298c0a)
  * mold used to write a PLT address of a symbol instead
    of its address to .symtab. This bug has been fixed. (e088db7)
  * mold can now handle an input file
    with more than 219 symbols. (f1f2d40)
  * /usr/local/libexec/mold/ld is now installed
    as a relative symlink instead of an absolute symlink. (5803c3c)
- Removed upstreamed fix-gdb-index.patch patch.</comment>
    <requestid>973715</requestid>
  </revision>
  <revision rev="13" vrev="2">
    <srcmd5>15f3b07ff878bfec7632fb24d2d406a3</srcmd5>
    <version>1.2.1</version>
    <time>1652389097</time>
    <user>dimstar_suse</user>
    <comment>- Do not use mimalloc, use system glibc allocator.

- Add valgrind as BuildRequire argument.</comment>
    <requestid>976062</requestid>
  </revision>
  <revision rev="14" vrev="3">
    <srcmd5>217c84804ce650a57354b3182e9985df</srcmd5>
    <version>1.2.1</version>
    <time>1653061870</time>
    <user>dimstar_suse</user>
    <comment>Automatic submission by obs-autosubmit</comment>
    <requestid>978268</requestid>
  </revision>
  <revision rev="15" vrev="1">
    <srcmd5>3c653354621651247df215be4ecacb81</srcmd5>
    <version>1.3.0</version>
    <time>1655582771</time>
    <user>dimstar_suse</user>
    <comment>- Update to version 1.3.0
  * The --icf=safe option has been supported.
  * LTO now works reliably under a heavy load.
  mold used to abort occasionally under such condition on Linux
  due to a spurious failure of pthread_create(2). (d8a8877)
  * mold now prints out undefined symbol errors in a format similar to LLVM lld. (13816a1)
  * mold now prints out a better error message for the disk full situation. (5969260)
  * mold can now build GCC 12 with LTO. (708ad63)
  * Fixed an LTO issue on 32-bits hosts such as i686. (920266b)
  * mold is now AddressSanitizer and UndefinedSanitizer clean. (fafb75b, 3499ee6)
  * mold used to create broken debug info on 32-bits hosts (#490).
    The bug has been fixed. (0abd0a4)
  * mold used to accept not only a single dash but also double
    dashes for single-letter options. For example, --S was accidentally accepted as an alias for-S.
    This is unconventional, and such options are no longer accepted. (232dafa)
  * --color-diagnostics is now an alias for --color-diagnostics=auto
    instead of --color-diagnostics=always for compatibility with LLVM lld.
  * pkg-config is no longer needed to build mold.
  * The --package-metadata option is supported. (#505, e9f6715)</comment>
    <requestid>983544</requestid>
  </revision>
  <revision rev="16" vrev="1">
    <srcmd5>d910c18f7e71121e98b60fe141bca6e5</srcmd5>
    <version>1.3.1</version>
    <time>1656675905</time>
    <user>dimstar_suse</user>
    <comment>- Update to version 1.3.1
  * mold now supports .preinit_array sections. Without this,
    AddressSanitizer didn't work in some environments. (3b75398)
  * [ARM32] R_ARM_MOVT_PREL and R_ARM_PREL31 relocations are now handled
    correctly so that mold no longer emit spurious &quot;recompile with -fPIC&quot; errors. (5294300)</comment>
    <requestid>986181</requestid>
  </revision>
  <revision rev="17" vrev="2">
    <srcmd5>00b6d93ec7a414544a071c106fb3bbc5</srcmd5>
    <version>1.3.1</version>
    <time>1659382374</time>
    <user>RBrownFactory</user>
    <comment>- Add fix-tests.patch which fixes tests on i586.</comment>
    <requestid>992001</requestid>
  </revision>
  <revision rev="18" vrev="1">
    <srcmd5>58c3e9732dc571b1f365a0bd6f93df5b</srcmd5>
    <version>1.4.0</version>
    <time>1659816477</time>
    <user>dimstar_suse</user>
    <comment>- Update to version 1.4.0
  * Initial support for the 32-bit RISC-V (RV32) has landed. (d9db6bc)
  * mold now demangles Rust symbols in error messages thanks to @eddyb's rust-demangle.c. (22e1bba)
  * --export-dynamic-symbol and --export-dynamic-symbol-list are now supported for
    the sake of compatibility with LLVM lld. With these options, you can specify
    symbols that should be exported using glob pattern. (e115aae)
  * [x86-64] PLT entries created by mold now always begins with ENDBR64 instruction
    to improve compatibility with Intel IBT (Indirect Branch Tracking.) (e3e371d)
  * mold now defines __dso_handle symbol. The lack of this linker-synthesized symbol
    caused a link error with GCC in some environments (#507). (764d757)
- Remove fix-tests.patch.</comment>
    <requestid>993355</requestid>
  </revision>
  <revision rev="19" vrev="1">
    <srcmd5>3ff05caac3020c5c5737f6d3e588b3ef</srcmd5>
    <version>1.4.1</version>
    <time>1660834139</time>
    <user>dimstar_suse</user>
    <comment>- Update to version 1.4.1
  * mold/macOS is now available as an alpha feature. We do not recommend using it for anything
    serious though. Starting from this version, we accept not only mold/Unix issues but also
    mold/macOS ones on our GitHub Issues. Feel free to file a bug if you encounter any problem.
  * We started supporting CMake in addition to Make to build mold. Our long-term plan is to migrate
    from Make to CMake because we want to support Windows eventually and CMake provides
    a better Windows support than Make does. (e6a0e67)
  * There was a bug that mold accidentally exported a hidden symbol from an executable
    if a shared library linked to that executable happened to define the same symbol.
    This caused a build issue with Blender (#606). The bug has been fixed. (b163068)
    --hash-style=both is now the default if no --hash-style option is given. Previously,
    --hash-style=sysv was the default. This change shouldn't affect most users because
    the compiler driver (cc, gcc, clang, etc.) always passes --hash-style to the linker.
    We made this change because GNU ld defaults to --hash-style=both.
  * Alias symbols defined by the --defsym option now have the same scope as the aliased symbols.
    Previously, alias symbols defined by --defsym were always hidden and never
    be exported as dynamic symbols. (5dd1227)
  * mold now accepts foo = bar-style linker script directive to define symbol aliases.
    Previously, such statement was treated as a syntax error.
    This change was made to link mariadb-connector-c correctly (f0e1237)
  * Symbols in mergeable string sections now have correct output section
    indices instead of SHN_UNDEF. (a595c48)
  * [ARM32] Previously, calling a function from ARM code to Thumb code
    caused a program crash due to bug #442. This issue has been fixed. (053b90b)
- Run tests in parallel.</comment>
    <requestid>997709</requestid>
  </revision>
  <revision rev="20" vrev="1">
    <srcmd5>5ef0b01a5febffcea9be8dea6ea08dd8</srcmd5>
    <version>1.4.2</version>
    <time>1662322302</time>
    <user>dimstar_suse</user>
    <comment>- Update to version 1.4.2
  * [RV32] We've fixed several issues for 32-bit RISC-V.
    mold can now build complex programs including itself for the target.
  * [ARM32] mold gained range extension thunks so that it can now link programs whose
    .text is larger than 16 MiB. Previously, mold couldn't link such large programs.
    We've also fixed general stability issues for ARM32.</comment>
    <requestid>1001085</requestid>
  </revision>
  <revision rev="21" vrev="1">
    <srcmd5>eac703c4acf7e81e71a252b8e2ab50cb</srcmd5>
    <version>1.5.0</version>
    <time>1664302446</time>
    <user>RBrownFactory</user>
    <comment>- Update to version 1.5.0
  * PPC64LE and SPARC64 are now supported as new targets. They haven't yet been as
    well tested as other targets, but they are already able to link mold itself on
    these platforms. (Note that PPC64LE is very unlikely to work on the most recent
    POWER10 machines as we didn't have a chance to test it due to a limited
    availability (POWER10 was released in 2021). If you can support us on this
    matter, please contact us. We also accept donations, so please consider
    supporting our project!)
  * RV32BE and RV64BE (32-bit and 64-bit big-endian RISC-V) are now supported as
    experimental targets. RISC-V is usually little-endian, but there exists a
    big-endian RISC-V as an extension. You can make gcc to emit code for big-endian
    RISC-V by passing -mbig-endian. mold can now link object files generated with
    that option.
  * --compress-debug-sections=zstd is now supported. This is an option to compress
    debug info embedded to an output file with Zstandard compression algorithm.
    Compared to the existing --compress-debug-sections=zlib, zstd is faster and
    gives a higher compression ratio. You probably can't start using zstd
    compression today though, because other tools such as gdb may not be able to
    read zstd-compressed debug info yet. But adding this option early makes mold
    future-proof. (ede7a5a)
  * mold no longer aligns loadable segments to page boundaries to reduce output file
    size. Previously, we allocated holes between loadable segments. The saving by
    this change is most visible for small programs. For example, a &quot;hello world&quot;
    program used to be ~18 KiB on x86-64. It's now 7.2 KiB. (2941d75)
  * Bug fixes and compatibility improvements
  * [RISCV] We optimized code so that the link speed for RISC-V is now comparable to
    the other targets. As an example, linking mold itself (~150 MiB in size) for
    RV64 used to take ~45 seconds on a simulated 16-core machine. It now takes only
    ~0.25 seconds. (3ab5489)
  * mold used to create more than one .rodata section under a certain condition.</comment>
    <requestid>1006332</requestid>
  </revision>
  <revision rev="22" vrev="1">
    <srcmd5>610131779af2ab210318a2776a6876ea</srcmd5>
    <version>1.5.1</version>
    <time>1664468017</time>
    <user>RBrownFactory</user>
    <comment>- Update to version 1.5.1
  * We changed the memory layout to save both memory and disk space in 1.5.0. Even
    though the new layout works fine on most systems, the change made the linker to
    create unusable executables for systems with large pages. Specifically, if you
    specify a large number for the -z max-page-size option, the loader refused to
    execute it with the error while loading shared libraries: cannot apply
    additional memory protection after relocation: Cannot allocate memory error. We
    reverted our recent commits so that mold creates output files with the same
    memory layout as it did before 1.5.0. (e62de0b)</comment>
    <requestid>1006841</requestid>
  </revision>
  <revision rev="23" vrev="1">
    <srcmd5>61a3d5cb8cb9a1c6e265c341ee1df195</srcmd5>
    <version>1.6.0</version>
    <time>1666257076</time>
    <user>dimstar_suse</user>
    <comment>- Update to version 1.6.0
  * [ppc64] mold now supports the original 64-bit big-endian PowerPC ABI (which is
    also known as PPC64 ELFv1 or just ppc64), so that you can build applications for
    older PPC64 systems with mold. Note that this should not be confused with the
    modern PPC64 ELFv2 ABI (which is also known as ppc64le), which is already
    supported by mold.
  * [s390x] Linux/s390x is now supported. Linux/s390x is the Linux environment
    running on IBM z/Architecture mainframes. I've personally never seen a
    mainframe, but we wanted to support it because many Linux distros actively
    support that target, which in turn means there are many enterprise users who are
    using IBM mainframes. Speaking of the porting effort, we do not only port our
    linker to s390x but also found a couple of issues with the existing GCC
    toolchain for s390x. So, we are improving the whole IBM mainframe ecosystem!
  * mold now creates smaller output files. It is most noticeable on targets with
    large page sizes such as PPC64 (on which the common page size is 64 KiB), but
    even on x86-64, it should save a few kilobytes per an output file.
  * [arm64] mold can now link executables with -static-pie. Previously, executables
    linked with that flag crashed immediately.
- Exclude ppc architecture as it is not supported right now.</comment>
    <requestid>1029962</requestid>
  </revision>
  <revision rev="24" vrev="1">
    <srcmd5>0459bdeafc8a5a20503d2b2b834619d3</srcmd5>
    <version>1.7.0</version>
    <time>1668432557</time>
    <user>dimstar_suse</user>
    <comment>- Update to version 1.7.0
  * [m68k] mold now supports the Motorola 68000 series microprocessors. Yes, it's
    the processor in the original Mac or Sun workstations in the 80s. This work is
    sponsored by m68k hobbyist communities.
  * We fixed a few issues for Facebook/Meta's BOLT optimizer (#789). Starting from
    the next LLVM release (we need llvm/llvm-project@20204db), BOLT should work on
    mold-generated executables out of the box.
  * We fixed a long-standing symbol resolution issue involving GNU UNIQUE symbols
    which caused a link failure for a few programs. (730e970)
  * Previously, if a version script contains a &quot;C++&quot; directive, and a symbol matches
    a non-C++ version pattern and a C++ version pattern, a wrong version could be
    assigned to the symbol. This has been fixed so that the mold's behavior matches
    with GNU ld. (9875150)</comment>
    <requestid>1035624</requestid>
  </revision>
  <revision rev="25" vrev="1">
    <srcmd5>7b0cef7d144aab79cc840d82cb83535a</srcmd5>
    <version>1.7.1</version>
    <time>1668877741</time>
    <user>dimstar_suse</user>
    <comment>- Update to version 1.7.1
  * mold 1.7.0 may generate the same build-id for two different output files. We
    fixed the issue in 1.7.1 so that build-id is guaranteed to be unique for each
    different output file. (d8dd124)</comment>
    <requestid>1036663</requestid>
  </revision>
  <revision rev="26" vrev="1">
    <srcmd5>a9550013594f17477955f2b72ae677ec</srcmd5>
    <version>1.8.0</version>
    <time>1672221268</time>
    <user>dimstar_suse</user>
    <comment>- Update to version 1.8.0
  * The --relocatable (or -r) option has been reimplemented to improve its
    performance and compatibility with the GNU linkers. That option tells the linker
    to combine input object files into another object file instead of into an
    executable or a shared library file. mold has been supporting the feature since
    version 0.9, but until now the output file created with -r looked fairly
    different from what GNU linkers would produce. GHC (Glasgow Haskell Compiler) in
    particular uses re-linkable object files as dynamic libraries instead of real
    .so files, and it didn't work with mold. Now, mold can produce object files that
    GHC can load. Note that this work was funded by Mercury, so thanks to the
    company to help us improve the product. (Yes, you can ask us to prioritize your
    feature request by funding the project.) (c9a7ae7)
  * --relocatable-merge-sections option has been added. By default, mold keeps
    original input section names for the --relocatable output and therefore does not
    merge input sections into a single output sections unless they are of the same
    name. If --relocatable-merge-sections is given, mold merges input by the usual
    default merging rule. For example, .text.foo and .text.bar are merged to .text
    if and only if --relocatable-merge-sections is given for the --relocatable
    output. (c2a0ae1)
  * -z [no]dynamic-undefined-weak options have been added. This option controls
    whether an undefined weak symbol is promoted to a dynamic symbol or not.
    (ed235f3)
  * --[no-]undefined-version options have been supported. Now, mold warns on a
    symbol name in a version script if it does not match with any defined symbol.
    This change was made so that it is easy to find a typo in a version script.
    (e2d7353)
  * mold now warns on symbol type mismatch. If two object files have the same symbol
    with different symbol types, it usually means your program has a bug. Chances
    are, you are using the same identifier as a function name in one translation
    unit and as a global variable name in another. So it makes sense to warn on the</comment>
    <requestid>1045468</requestid>
  </revision>
  <revision rev="27" vrev="1">
    <srcmd5>0b71e27a30babf1ad20d4fd83f537974</srcmd5>
    <version>1.9.0</version>
    <time>1673035649</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>1056408</requestid>
  </revision>
  <revision rev="28" vrev="1">
    <srcmd5>418926d1e4dad14c90a5ddd65c73a925</srcmd5>
    <version>1.10.0</version>
    <time>1674232791</time>
    <user>dimstar_suse</user>
    <comment>- Update to version 1.10.0
  * mold now officially supports the --print-dependencies option to print out
    dependency information between input files. Here is a truncated example output
    when linking mold itself with the option. There are many use cases of the
    option; for example, if you want to eliminate the dependency to some library
    from your program, you can use this option to find out all the functions that
    use the library's function to fix them. (6fd47db)
  * [x86-64][s390x] mold now optimizes thread-local variable accesses in shared
    libraries if the library is linked with -z nodlopen. If your shared library is
    not intended to be used via dlopen(2) and your library frequently accesses
    thread-local variables, you might want to pass that option when linking your
    library. (25d02bb, f32ce33)
  * [arm64] mold is now able to optimize GOT load by rewriting an ADDR+LDR
    instruction pair with an ADDR+ADD if the loaded GOT value is known at link-time.
    (f2311b1)
  * mold 1.9.0 was up to 10% slower than 1.8.0 on some multicore machines. We fixed
    the performance regression and made it even faster than 1.8.0. (7132822)
  * Previously, mold failed to report an undefined symbol error if there's a weak
    undefined symbol of the same name. That bug resulted in producing a non-working
    executable instead of reporting a link failure. Now, mold correctly reports such
    link errors. (8936194)
  * mold 1.9.0 might crash with SIGSEGV if --emit-relocs is used with object files
    containing debug info. That bug has been fixed. (e17d7da)</comment>
    <requestid>1059957</requestid>
  </revision>
  <revision rev="29" vrev="1">
    <srcmd5>5f70da5011551b79ea652564f67957f9</srcmd5>
    <version>1.10.1</version>
    <time>1674495083</time>
    <user>dimstar_suse</user>
    <comment>- Update to version 1.10.1
  * mold 1.10.0 had a buffer overrun bug that causes the linker to terminate
    immediately if compiled with -D_GLIBCXX_ASSERTIONS. We fixed the unsafe memory
    access in this release. (7e65546)</comment>
    <requestid>1060245</requestid>
  </revision>
  <revision rev="30" vrev="1">
    <srcmd5>96266e70515bdc43384efb732b074a7d</srcmd5>
    <version>1.11.0</version>
    <time>1679003931</time>
    <user>dimstar_suse</user>
    <comment>- Update to version 1.11.0
  * IBM Power10 has been supported. Previously, mold created broken executables for
    that target. (5065547)
  * --hash-style=none has been added to cancel --hash-style=sysv, --hash-style=gnu
    or --hash-style=both. (ec75633)
  * [ARM32] R_ARM_PLT32 relocation type has been supported. (e505900)
  * [RISC-V] R_RISCV_PLT32 relocation type has been supported. (51845ac)
  * Previous versions of mold failed to link some programs in rare corner cases if
    Link-Time Optimization (LTO) is enabled. These bugs have been fixed. (e1a7590,
    62d6537)
  * mold used to ignore dependencies between DSOs. Since this version, if a required
    DSO depends on other as-needed DSO, mold keeps the latter DSO as a required one.
    This improves compatibility with GNU linkers. (1adde7a)
  * [x86-64] mold can now link object files generated by old buggy versions of GCC.
    (d2970e0)
  * [x86-64] Previously, a program with a very large .bss section may fail to link
    due to R_X86_64_REX_GOTPCRELX relocation overflow (#975). This bug has been
    fixed. (627bf7c)</comment>
    <requestid>1072308</requestid>
  </revision>
  <revision rev="31" vrev="1">
    <srcmd5>493d3e0e44f3fe397d7b46307271752b</srcmd5>
    <version>2.0.0</version>
    <time>1690469564</time>
    <user>anag+factory</user>
    <comment>- Update to version 2.0.0
  * License changed to MIT.
  * Previously, mold could not produce an object file with more than 65520 sections
    using the --relocatable option. Now the bug has been fixed. (2e8bd0b)
  * mold now interprets -undefined as a synonym for --undefined instead of -u
    ndefined. This seems inconsistent, as -ufoo is generally treated as -u foo
    (which is an alias for --undefined foo), but this is the behavior of the GNU
    linkers and LLVM lld, so we prioritize compatibility over consistency.
  * -nopie is now handled as a synonym for --no-pie.
  * [RISC-V] R_RISCV_SET_ULEB128 and R_RISCV_SUB_ULEB128 relocation types are now
    supported (4bffe26, 1ac5fe7)
  * [PPC64] R_PPC64_REL32 relocation type is now supported. (ebd780e)</comment>
    <requestid>1100863</requestid>
  </revision>
  <revision rev="32" vrev="1">
    <srcmd5>583217e317abb8d239182448e47145e5</srcmd5>
    <version>2.1.0</version>
    <time>1692045329</time>
    <user>dimstar_suse</user>
    <comment>- Update to version 2.1.0
  * Loongson's LoongArch CPU has been supported. (03b1a1c)
  * -z nosectionheader has been added to eliminate section headers from the output
    file. (084ca55)
  * Previously, linking with the -z pack-relative-relocs option produces an
    executable that glibc 2.38 refuses to run with DT_RELR without GLIBC_ABI_DT_RELR
    dependency error. Now, mold produces binaries compatible with glibc 2.38.
    (f467ad1)
  * [ARM64] R_AARCH64_ADR_PREL_PG_HI21_NC relocation type has been supported.
    (17a5c3e)
  * [ARM64] R_AARCH64_MOVW_UABS_G3 relocation type has now been handled as a
    PLT-generating relocation to fix an issue when main is not defined in the main
    executable but rather in a .so file. (e764557)
  * [RISC-V] We now merge input .riscv.attributes contents. Previously, we just
    concatenated them. (aa64491)</comment>
    <requestid>1103723</requestid>
  </revision>
  <revision rev="33" vrev="1">
    <srcmd5>2a88c69111c2f2347aecf36163e6df24</srcmd5>
    <version>2.2.0</version>
    <time>1695853498</time>
    <user>dimstar_suse</user>
    <comment>- Add build-blake-3-as-static.patch that builts BLAKE 3 support as static library
  into mold. The library is not provided in openSUSE yet.

- Update to version 2.2.0
  * We now use BLAKE3 as a cryptographic hash function instead of SHA256. This
    change has made --build-id a few percent faster. libssl is no longer a build
    dependency. (7f7a744)
  * mold is now a few percent faster than the previous version due to an
    optimization of string merging code path. (1a13c50)
  * mold now emits slightly optimized code for thread-local variable accesses.
    (f057fda, d56f528)
  * [RISC-V] mold now supports TLSDESC relocations. TLSDESC is a new mechanism for
    faster thread-local variable access. We (@ishitatsuyuki) actually led the effort
    to ratify the specification (riscv-non-isa/riscv-elf-psabi-doc#373) and
    implement it to compiler toolchain including GCC, GNU binutils and, of course,
    mold. (141556d)
  * mold no longer marks an as-needed .so as &quot;needed&quot; if the .so file is not
    directly used by the output file. Previously, mold marked a .so file as &quot;needed&quot;
    if the .so file was used by another &quot;needed&quot; .so file. (f02db0f)
  * [PPC64] --execute-only now works on 64-bit PowerPC. (ac20d87, 51fec5f)
- Remove openssl dependency.</comment>
    <requestid>1113750</requestid>
  </revision>
  <revision rev="34" vrev="1">
    <srcmd5>f79970109855bc087f5b2fdc460a71a6</srcmd5>
    <version>2.3.0</version>
    <time>1697657184</time>
    <user>anag+factory</user>
    <comment>- Update to version 2.3.0
  * [x86-64] mold 2.3.0 has introduced an experimental flag, -z rewrite-endbr, which
    rewrites superfluous endbr64 instructions as nop.
  * endbr64 is a relatively recent x86 instruction used to mark locations where an
    indirect jump instruction can transfer control. With control-flow integrity
    enabled (meaning endbr64 is effective), an indirect jump can only target an
    endbr64 or it will trigger a runtime exception. This mechanism significantly
    hinders certain control hijacking attacks, such as ROP or JOP, since attackers
    cannot jump to just any location.
  * When given the -fcf-protection flag, GCC conservatively places an endbr64 at the
    beginning of every global function. This is because the function's address might
    be taken as a pointer by other translation units. However, in most cases,
    function addresses are not actually taken. This conservative approach results in
    an overabundance of unnecessary endbr64 instructions, leading to not only code
    bloating but also a potential decrease in security as there are more locations
    for an attacker to exploit.
  * The new linker option, -z rewrite-endbr, aims to alleviate this issue. The
    linker can carry out a whole-program analysis on the input files to identify
    functions whose addresses are never taken. If -z rewrite-endbr is specified,
    mold will conduct this analysis and replace the initial endbr64 with a nop for
    functions whose addresses aren't taken. (17f0d85)
  * mold now produces a more compact .gdb_index section when using the --gdb-index
    flag. Additionally, mold now generates a correct .gdb_index section for object
    files created by Clang. (a396fa4)
  * mold is now capable of handling input sections larger than 4 GiB. (0ce32d3)
  * [PPC] mold can now generate executables for POWER10 processors. Previously,
    executables produced by mold would crash immediately on startup on POWER10.
    (0f71471)
  * [ARM64] When a function with a non-standard calling convention is exported, it's
    mandatory for the linker to turn on the STO_AARCH64_VARIANT_PCS flag to notify</comment>
    <requestid>1118582</requestid>
  </revision>
  <revision rev="35" vrev="1">
    <srcmd5>56fd642f18371d901a4ed8886a9102b6</srcmd5>
    <version>2.3.1</version>
    <time>1697836717</time>
    <user>anag+factory</user>
    <comment>- Update to version 2.3.1
  * [ARM32, ARM64, PowerPC, LoongArch] mold 2.3.0 would crash when handling large
    output files. This was due to a bug in the code that creates range extension
    thunks. This issue has now been resolved. (7be1b66)
  * [LoongArch] mold is now capable of handling relocations generated for the
    -mcmodel=extreme flag. (4bd80ec)</comment>
    <requestid>1119175</requestid>
  </revision>
  <revision rev="36" vrev="2">
    <srcmd5>65372ab56df393c7d23a139cd0c988e1</srcmd5>
    <version>2.3.1</version>
    <time>1698249894</time>
    <user>anag+factory</user>
    <comment>- Add fix-arm.patch in order to fix failing arm-arm_range-extension-thunk2 test.</comment>
    <requestid>1120275</requestid>
  </revision>
  <revision rev="37" vrev="1">
    <srcmd5>aad31fe7504184f260f24a80506d59ff</srcmd5>
    <version>2.3.2</version>
    <time>1699183167</time>
    <user>anag+factory</user>
    <comment>- Update to version 2.3.2
  * Remove upstream patch fix-arm.patch.
  * mold no longer emits dynamic relocations against the text segment for GNU ifunc
    symbols. Previously, mold emitted such relocations for position-dependent
    executables. (4cdfc7e)
  * mold no longer reports the &quot;REL-type relocation table is not supported for this
    target&quot; error and instead ignore incompatible relocation tables. LLVM generates
    such non-conforming relocation tables for the .llvm.call-graph-profile section.
    This change was made for compatibility. (3791900)
  * mold now pads unused gaps in the text segment with interrupt or NOP
    instructions, instead of leaving them filled with zeros. This alteration does
    not change the program's semantics but prevents disassemblers from interpreting
    the spaces between functions as valid instructions. (c86a59a)
  * mold now creates the .mold-lock file for MOLD_JOBS not in the home directory but
    in $XDG_RUNTIME_DIR, which is usually /var/user/&lt;uid&gt;. (39cdf61)
  * [ARM32] There was an issue preventing mold from being built on an ARMv8 64-bit
    ARM processor with an ARM32 userland, such as the 32-bit Raspberry Pi OS running
    on a Raspberry Pi 4. This build issue has been resolved. (02ead29)
  * [LoongArch] mold can now handle R_LARCH_PCALA_LO12 relocation for the jirl
    instruction. (d3188e3)</comment>
    <requestid>1123388</requestid>
  </revision>
  <revision rev="38" vrev="1">
    <srcmd5>3c9fef09a20d48bcbd3005bcbb806f43</srcmd5>
    <version>2.3.3</version>
    <time>1700078899</time>
    <user>anag+factory</user>
    <comment>- Update to version 2.3.3
  * --dynamic-list has different semantics for executables and DSOs. Previously,
    mold implemented only the semantics for executables, causing issues with
    libraries such as musl that used this option. mold now handles the option for
    DSOs correctly. (da3f5dd)
  * Old object files often contain .ctors and .dtors sections, which hold function
    pointers for initializing and finalizing processes, respectively. Their roles
    have been superseded by .init_array and .fini_array on most targets. mold worked
    functioned correctly as long as input object files consistently use the old or
    the new sections. However, mixing object files that contain both types of
    initializers/finalizers resulted in some functions not being executed. This
    issue has been fixed. (3f88964)
  * --defsym can cause the linker to crash if a given symbol is not defined. The
    crash bug has been fixed. (ff3d54d)
  * [POWER10] On rare occasions, pointers statically initialized to functions could
    be left as null pointers. This bug has been fixed. (31c3b53)
- Remove upstreamed patch power10-fix.patch.

- Add power10 fix power10-fix.patch for #1142.</comment>
    <requestid>1126103</requestid>
  </revision>
  <revision rev="39" vrev="1">
    <srcmd5>d8eb5a6c982130a054839fc25bc0f0e6</srcmd5>
    <version>2.4.0</version>
    <time>1701378091</time>
    <user>anag+factory</user>
    <comment>- Update to version 2.4.0
  * mold gained the --spare-program-headers=&lt;number&gt; option, which adds a specified
    number of spare entries at the end of the program header. The option aims to
    make post-processing tools to add program header entries very easily. Note that
    sorting program header entries after adding new ones may be necessary to meet
    the constraints of the ELF file format. For details, see the elf(5) man page.
    (eb6c213)
  * mold's -z rewrite-endbr option rewrites superflous endbr64 instructions with nop
    as a countermeasure against control-flow highjacking attacks. Previously, this
    worked exclusively with object files compiled with -ffunction-sections,
    requiring each function to be compiled into a separate section. Starting from
    this release, -z rewrite-endbr works on object files compiled without it. In
    other words, mold is now capable of rewriting endbr64 instructions even if the
    instruction is not at the beginning of a section. (3cb8a52)
  * Previously, mold couldn't handle object files containing multiple .eh_frame
    sections. The .eh_frame is a section containing data for exception handling.
    Usually, an object file contains only one .eh_frame which describes how to
    handle exceptions for all text sections in the same file. However, on rare
    conditions, it seems ld -r creates an object file containing multiple .eh_frame
    sections. mold is now able to handle such object files. (f4c5a8a)
  * mold -run &lt;command&gt; is an easy way to run the given command with a virtual
    environment in which the ld command is replaced with mold. The feature is
    implemented using LD_PRELOAD to hook fork(2)-family functions. Before this
    release, some invocations of ld were not intercepted correctly because we missed
    the posix_spawnp(2) function. Now, the function is intercepted just like other
    fork(2)-family functions. (3fd1cec)
  * mold used to produce a non-working executable on a rare occasion when all
    thread-local variables lacked an initial value and the read-only data required
    alignment equal to or greater than the page size. This bug has been resolved.
    (de7d37e)</comment>
    <requestid>1129883</requestid>
  </revision>
  <revision rev="40" vrev="1">
    <srcmd5>240b5ffb195223a8efda844b60004ecd</srcmd5>
    <version>2.4.1</version>
    <time>1709332770</time>
    <user>dimstar_suse</user>
    <comment>- Align path for document installation between openSUSE versions.

- Update to version 2.4.1
  * mold 2.4.0 or prior may promote weak dynamic symbols to strong ones under a rare
    circumstance, which caused &quot;undefined symbol&quot; error at runtime. The bug has been
    fixed. (50bdf39)
  * Previously, if two or more VERSION clauses in a version script match to the same
    symbol, the first one took precedence. This was incompatible with GNU ld, which
    gives the last one the highest priority, causing a Qt library link failure. This
    compatibility issue has been resolved. (e1e16bf)
  * By default, we demangle symbols in error messages so that they are easier to
    read. Previously, Rust symbols could accidentally be demangled as C++ symbols.
    Now, mold attempts to demangle symbols as Rust ones only for object files
    created by rustc. (ea9864b)
  * [RISC-V] mold now relaxes a GOT-load instruction sequence into a direct address
    materialization if the symbol address is known at link time. This relaxation
    eliminates one memory load and slightly improves the linked program's
    performance. (2ccaa81)
  * [PowerPC64 ELFv2] GCC may emit references to _savegpr0_*, _restgpr0_*,
    _savegpr1_* and _restgpr1_* symbols for the -Os command line option to optimize
    the output for code size. These symbols are not defined by any object file and
    expected to be synthesized by the linker. mold didn't use to synthesize these
    symbols, and therefore object files created with -Os sometimes failed due to
    missing symbol errors. Now, mold synthesizes these symbols. (d4ff48a)
  * [PowerPC64] R_PPC64_DTPREL16_LO_DS relocation type has now been supported.
    (6d8e6af)
  * [Illumos] On Illumos OS, absolute symbols in DSOs need to be resolved at runtime
    because the dynamic linker treats such symbols in a special manner. Previously,
    mold directly used absolute symbol addresses at link-time and did not place them
    into the dynamic symbol table. That optimization has been removed for</comment>
    <requestid>1154127</requestid>
  </revision>
  <revision rev="41" vrev="1">
    <srcmd5>08099a07bbabdd453b315389001a67d6</srcmd5>
    <version>2.30.0</version>
    <time>1710710195</time>
    <user>anag+factory</user>
    <comment>- Update to version 2.30.0
  * We have increased the version number from 2.4.1 to 2.30.0, even though this
    release contains only minor bug fixes. This change was made to prevent GNU
    libtool from mistaking mold 2.4.1 for GNU ld 2.4.1, which led it to incorrectly
    conclude that our linker was an outdated version of the GNU linker. Bumping up
    the version number to align with GNU ld may not be the most elegant solution,
    but it is a practical approach to resolve the compatibility issue with GNU
    libtool. (c7f6a91)
  * Previously, mold may have inserted an unnecessary gap before the .bss section in
    an output file, thereby creating an extra segment for it. While not technically
    incorrect, it was certainly unnecessary. mold 2.30.0 eliminates this unnecessary
    on-disk gap for .bss. (c395da1)
  * Previously, under rare circumstances, mold might fail with the &quot;ConcurrentMap is
    full&quot; error message if --gdb-index was used. This bug has been resolved.
    (c60d1d0)
  * Previously, mold might generate an excessive number of &quot;ignoring .llvm_addrsig
    section without sh_link&quot; warnings. These warnings are now suppressed. (51f871f)
  * Sections with unknown section types are now reported as errors. (d21207c)
  * [PPC32] A crash bug related to --gc-sections has been fixed. (8eae0a3)</comment>
    <requestid>1158643</requestid>
  </revision>
  <revision rev="42" vrev="1">
    <srcmd5>c453ba5e10812a5e5268b08f229ac2f5</srcmd5>
    <version>2.31.0</version>
    <time>1714758360</time>
    <user>anag+factory</user>
    <comment>- Update to version 2.31.0
  * mold is now up to 10% faster when linking very large, debug info-enabled
    executables such as Blender (~1.8 GiB) or Clang (~3.8 GiB), thanks to several
    improvements we've made to the string merging algorithm. (53ebcd8, d714301,
    40f6b17, c9faf3d)
  * -z start-stop-visibility=hidden is now supported so that linker-synthesized
    __start_&lt;section-name&gt; and __stop_&lt;section-name&gt; symbols can be completely
    hidden from other ELF modules. Previously, only -z
    start-stop-visibility=protected was supported. (99a5b15)
  * -Bsymbolic-non-weak and -Bsymbolic-non-weak-functions options are now supported
    for compatibility with LLVM lld. Just like lld, these options control which
    symbols are exported as dynamic symbols. -Bsymbolic-non-weak makes the linker to
    export only weak symbols, whereas -Bsymbolic-non-weak-functions makes it to
    export only weak function symbols. (7d17aa8)
  * Previously, if a linker script contains a newline character in the beginning
    four bytes of a file, it was not recognized as a linker script by mold. Now,
    mold allows newlines at the beginning of a file. (ea054cc)
  * Under rare circumstances, the INPUT linker script command may have found a
    different file than GNU ld would. Now, mold's behavior aligns with GNU ld's.
    (163975d)
  * Previously, the --repro option produced corrupted tar files. Now the bug has
    been fixed. (32c4a09)
  * mold generally guarantees that its output is reproducible, meaning that if you
    run the linker with the exact same command line options and input files, the
    output is guaranteed to be bit-for-bit identical to the previous outputs.
    However, under rare circumstances, it might produce different output due to a
    bug. It's reported that this nondeterminism caused random crashes for some
    programs (#1247). This bug has been fixed. (6463a7c)
  * mold no longer sets the address of the .text section as the entry point address
    if --entry option is not given, just like LLVM lld. (020b1a7)</comment>
    <requestid>1171501</requestid>
  </revision>
  <revision rev="43" vrev="1">
    <srcmd5>8d515324ea5824c28ea76dbfcf807704</srcmd5>
    <version>2.32.0</version>
    <time>1717957423</time>
    <user>anag+factory</user>
    <comment>- Update to version 2.32.0
  * mold supports a feature called Identical Code Folding, or ICF. As the name
    suggests, ICF finds identical functions and merges them to reduce the size of an
    output file. This is especially effective for template-heavy C++ programs since
    templates tend to be instantiated to the same machine code for different types.
    For example, std::vector&lt;int&gt; is likely to be instantiated to the same code as
    std::vector&lt;unsigned&gt;. We've made an improvement to our ICF algorithm so that
    the --icf feature is ~50% faster than the previous version. (fa8e95a)
  * The -z rodynamic option is now supported for compatibility with LLVM lld. With
    the option, mold places the .dynamic section into a read-only segment. (9a233df)
  * Previously, mold behaved differently compared to other linkers if both -z defs
    and --undefined=ignore-in-object-files were given (#1270). Now, they override
    each other so that the mold's behavior is compatible with others. (8cd85aa)
  * Previously, --dependency-file mistakenly recorded response files as dependencies
    (#1258). This bug has been fixed. (4281f45)
  * There was a bug that mold corrupted debug info section contents when the
    --relocatable option was given (#1265). This issue has been fixed. (08b0a16)
  * [PPC64] The R_PPC64_TPREL16_LO_DS relocation type is supported. (a8cd2e8)
  * [ARM64, PPC64, LoongArch] mold 2.31.0 or earlier may have failed with an
    assertion failure when creating a large output file (#1224). This issue has been
    resolved. (c7c8583)</comment>
    <requestid>1179562</requestid>
  </revision>
  <revision rev="44" vrev="1">
    <srcmd5>7a595251040a338c414807015923ae34</srcmd5>
    <version>2.32.1</version>
    <time>1719497074</time>
    <user>anag+factory</user>
    <comment>- Update to version 2.32.0
  * Previously, shared libraries specified with --as-needed were not considered as
    &quot;needed&quot; if they were referenced only by weak undefined symbols. Such weak
    symbols were converted to absolute symbols at address zero at link-time.
    Although this behavior was not technically wrong, it caused a significant issue
    in a rare occasion (#1286). Now, weak undefined symbols retain --as-needed
    shared libraries. (06b5926)
  * [RISC-V] RISC-V object files contain ISA strings in the .riscv.attributes
    section. Previously, we had reported valid ISA strings containing digits as
    errors. The issue has now been resolved. (841a186)
  * [RISC-V] We no longer write dynamic relocation addends to relocated places
    because it caused static position-independent executables to crash on process
    startup in some environments. In other words, --no-apply-dynamic-relocs is
    enabled by default.
  * LTO now works on MinGW. (50bf031)</comment>
    <requestid>1183534</requestid>
  </revision>
  <revision rev="45" vrev="2">
    <srcmd5>c6f2f72a0cdea49fac171d3b38544f76</srcmd5>
    <version>2.32.1</version>
    <time>1720458494</time>
    <user>anag+factory</user>
    <comment>Automatic submission by obs-autosubmit</comment>
    <requestid>1185859</requestid>
  </revision>
  <revision rev="46" vrev="1">
    <srcmd5>5a343c99bf4d90f55311763e5a68e9c8</srcmd5>
    <version>2.33.0</version>
    <time>1723107455</time>
    <user>dimstar_suse</user>
    <comment>- Update to version 2.33.0
  * mold gained a new linker flag --separate-debug-info to bundle debug info
    sections into a separate file instead of putting them into a main output file.
    You can optionally specify a filename in the form of
    --separate-debug-info=&lt;filename&gt;. By default, a debug info file is created in
    the same directory as the main output file with the .dbg extension. mold embeds
    the debug file's filename into the main output file so that gdb can
    automatically follow the link to find debug info when debugging the main output
    file.
  * The main objective of this flag is to speed up the mold linker even more. By
    default, mold creates a separate debug file in the background after creating a
    main output file, so that you can start running the executable as soon as
    possible while mold is still working on linking its debug info sections. For
    example, linking clang with debug info normally takes ~1.70s on a Threadripper
    7980X machine, while it takes only ~0.52s with --separate-debug-info. Shaving
    off a full second in quick edit-rebuild-run cycles should improve programmers'
    productivity. If you do not want mold to work in the background, pass the
    --no-detach option. (596ffa9)
  * mold now supports the --no-allow-shlib-undefined flag. If the option is given,
    mold checks if all undefined symbols are resolved not only for input object
    files but also for shared libraries passed to the linker. To use the feature,
    you need to pass all shared libraries, including transitively dependent ones, to
    the linker so that the linker can resolve all symbols that are available at
    runtime. (3001f02)
  * mold gained the --dynamic-list-data flag for the sake of compatibility with GNU
    ld. If the flag is given, all data symbols are exported as dynamic symbols.
    (dd8d971)
  * [x86-64] -z x86-64-v2, -z x86-64-v3, -z x86-64-v4 flags are supported. (5606087)
  * [x86-64] Recent x86-64 processors support Intel CET to protect control flow
    integrity. When the feature is enabled, the instruction that is executed</comment>
    <requestid>1192095</requestid>
  </revision>
  <revision rev="47" vrev="1">
    <srcmd5>6a9b25a7ac0b70ca9c3ad51b54cd3267</srcmd5>
    <version>2.34.0</version>
    <time>1727294127</time>
    <user>anag+factory</user>
    <comment>- Update to version 2.34.0
  * [ARM32] mold now deduplicates exception handling records in a .ARM.exidx section
    to reduce the size of the table. (742ea87)
  * [LoongArch] TLSDESC relocations are now supported. (dbaa6d7)
  * --build-id=fast is now supported for compatibility with LLVM lld. mold handles
    it as a synonym for --build-id=sha256. (afc52ee)
  * Previously, if the same symbol was provided both by a static archive and dynamic
    library, and if the symbol's visibility was hidden, mold sometimes failed to
    link it and handled the symbol as if it were undefined. Now, mold can correctly
    link such programs. (1efbe3f)
  * Under rare circumstances, mold could create corrupted binaries if they were
    linked with --retain-symbols-file. This bug has been fixed. (0ee12e4)
  * [LoongArch] R_LARCH_CALL36 relocation with a large offset is now correctly
    written. (1c32102)
  * [FreeBSD] If all thread-local variables in a program have no initial values,
    mold-produced executables could crash or misbehave on FreeBSD. This bug has been
    fixed. (f6822fb)
  * DEC Alpha support has been removed due to lack of demand. In fact, mold's Alpha
    support has never been tested for real-world programs and was likely unable to
    link them in the first place. This should not affect anyone because the last
    Alpha processor was released more than 20 years ago. (3711ddb)</comment>
    <requestid>1203610</requestid>
  </revision>
  <revision rev="48" vrev="1">
    <srcmd5>9356bc1070db159f4983b57780e8e688</srcmd5>
    <version>2.34.1</version>
    <time>1728229935</time>
    <user>anag+factory</user>
    <comment>- Update to version 2.34.1
  * [ARM32] Fixed a regression that R_ARM_TARGET1 wasn't handled as a synonym for
    R_ARM_ABS32 relocation. This issue caused some ARM32 programs to crash on
    startup if linked with mold. (186272a)
  * [RISC-V] mold now sets the STO_RISCV_VARIANT_CC dynamic tag if the ELF module
    exports a function symbol with a non-standard calling convention. (16eb513)</comment>
    <requestid>1205736</requestid>
  </revision>
  <revision rev="49" vrev="1">
    <srcmd5>9e9a724b71952afe9fe03e8c8567fe97</srcmd5>
    <version>2.35.0</version>
    <time>1733775074</time>
    <user>anag+factory</user>
    <comment>- Update to version 2.35.0
  * Big-endian ARM64 is now supported. ARM64 is a bi-endian processor, meaning that
    the processor can run in either little- or big-endian mode. Even though
    little-endian is the de facto standard, the ARM64 processor-specific ABI defines
    its big-endian variant, and the ARM toolchain supports it. Now we support it
    too. (882e7eb)
  * Big-endian SH4 is now supported. SH4 has become a minor CPU nowadays, and its
    big-endian variant is even more so, but some SHARP scientific calculators still
    use SH4 processors in big-endian mode. (0cb9fc6)
  * mold attempts to overwrite an existing file if a specified output file already
    exists because reusing an existing file is much faster than creating a fresh
    file and writing to it on Linux. If an existing file is currently running,
    open(2) for that file fails with ETXTBSY. When that happens, mold falls back to
    creating a new file. The problem here is that Linux kernel version 6.11 changed
    that well-known behavior of open(2), and it now allows user programs to
    overwrite a running executable. That caused a very mysterious issue for programs
    that rebuild themselves during the build, such as gcc or ninja (#1361). Even
    though the kernel's change has been reverted (torvalds/linux@3b83203), we need
    to make adjustments to mold for that particular version of the Linux kernel. So,
    if mold detects that it is running on Linux 6.11, it no longer tries to reuse an
    existing output file. (8e4f7b5)
  * On rare occasions, mold could fail with a &quot;ConcurrentMap is full&quot; error. Now the
    issue has been resolved. (e56b649)
  * Even if a user choose not to use mimalloc memory allocator (i.e. built mold with
    -DMOLD_USE_MIMALLOC=0), mold was still being built with mimalloc. This issue has
    been resolved. (ffd10dd)
  * [s390x] s390x uses nonstandard 8-byte entries for the .hash section. Previously,
    mold created 4-byte entries for .hash, which caused mold-generated executables
    to crash on startup if they were built with -Wl,--hash-style=sysv. Now, mold
    generates a psABI-compliant .hash section. (e2e1146)</comment>
    <requestid>1229097</requestid>
  </revision>
  <revision rev="50" vrev="1">
    <srcmd5>71e4a602234fe542df3e1b0e847bdae1</srcmd5>
    <version>2.35.1</version>
    <time>1734463158</time>
    <user>anag+factory</user>
    <comment>- Update to version 2.35.1
  * mold guarantees that outputs are reproducible, meaning that if you provide the
    exact same set of input files and command-line options to the same version of
    mold, the output is assured to be byte-for-byte identical. However, there was a
    bug where the --icf option caused outputs to be indeterministic, even though all
    possible outputs were logically correct (#1377). This issue has now been
    resolved. (2a78b1b)
  * [RISC-V] Support for obsolete GP-relative relocations has been removed. These
    relocations were ratified (riscv-non-isa/riscv-elf-psabi-doc@d49e480) but then
    removed (riscv-non-isa/riscv-elf-psabi-doc@ad02546) from the processor-specific
    ABI. There are no known real-world use cases for these relocations. (04066d1)</comment>
    <requestid>1231732</requestid>
  </revision>
  <revision rev="51" vrev="1">
    <srcmd5>f7abd6f4a6d1f22553a7bc64441572d0</srcmd5>
    <version>2.36.0</version>
    <time>1736431922</time>
    <user>anag+factory</user>
    <comment>- Update to version 2.36.0
  * The --package-metadata=&lt;string&gt; option has been added to embed a given string
    into the .note.package section. This option is designed for build scripts that
    generate binary packages, such as .rpm or .deb, to include package metadata in
    each executable. It simplifies the process of identifying the corresponding
    package for a given executable or core file. (7ddc8f4)
  * [ARM][PowerPC] We've improved the algorithm for creating range extension thunks
    to reduce memory usage and improve speed. For example, linking clang-19 for
    ARM64 is now ~7% faster than before. (9fc0ace)
  * [RISC-V][LoongArch] We've improved the algorithm for code-shrinking linker
    relaxation to reduce memory usage and improve speed. For example, linking
    clang-19 for RISC-V is now ~4% faster than before. (3234d88)
  * mold created a bad relocation for an IFUNC if the linker's output file type was
    a shared library and the symbol was exported. This bug could cause a
    segmentation fault of a linked program. The problem has now been fixed.
    (a297859)
  * [RISC-V] mold could produce incorrect code as a result of code-shrinking
    relaxation for the R_RISCV_HI20 relocation. That type of relocation was used
    rarely because it is not PC-relative. That being said, if your program used the
    relocation, and the relocation targets were at a low address (from 0x1f800 to
    0x20000), your program would crash at runtime due to the linker's bug. The issue
    has now been resolved. (eec3f6b)
  * [RISC-V][LoongArch] When the linker removed instructions from a function as a
    result of code-shrinking relaxation, the function symbol's size in the output
    file should be updated to reflect the result of relaxation, even though doing it
    is mostly cosmetic. mold did not do that. Now, mold sets correct sizes to output
    function symbols. (e6345d5)
  * [LoongArch] Binaries linked with mold now work on 64 KiB page systems.
    Previously, only up to 16 KiB pages were supported. (2d7b6b2)
  * [s390x] The s390x processor-specific ABI requires the linker to reserve the</comment>
    <requestid>1236113</requestid>
  </revision>
  <revision rev="52" vrev="1">
    <srcmd5>ee1090b60fdc06c0381b79f65edd0bd4</srcmd5>
    <version>2.37.0</version>
    <time>1741268975</time>
    <user>anag+factory</user>
    <comment>- Update to version 2.37.0
  * If an undefined weak symbol is not resolved to a defined symbol at link time,
    the linker can choose whether to promote the symbol to a dynamic symbol or not.
    If promoted, the weak symbol has another chance to be resolved to a defined
    symbol at load time. Otherwise, it is resolved to address 0 at link time.
    Previously, mold always resolved remaining undefined weak symbols in an
    executable to address 0 at link time. Now, you can instruct the linker to
    promote them to dynamic symbols using -z dynamic-undefined-weak. (1822e47)
  * [x86-64] The relocation types
    R_X86_64_CODE_4_{GOTPCRELX,GOTTPOFF,GOTPC32_TLSDESC} and
    R_X86_64_CODE_6_GOTTPOFF are now supported. These relocations are for Intel APX
    (Advanced Performance Extensions), which extends the number of general-purpose
    registers from 16 to 32. (83152ac, a17202d)
  * [ARM32] The R_ARM_THM_JUMP8 relocation type is now supported. (1fbbcec)
  * [ARM32] Previously, the .ARM.exidx section (which contains exception-handling
    records) was not subject to garbage collection, even when --gc-sections was
    specified. This prevented all functions from being garbage-collected, as they
    were referenced by exception-handling records. Now, mold correctly
    garbage-collects unused .ARM.exidx records and functions. (16f7599)
  * Previously, --compress-debug-sections was ignored if --separate-debug-file was
    specified. Now, mold compresses debug information sections even when they are in
    a separate debug file. (bab7dd1)</comment>
    <requestid>1250569</requestid>
  </revision>
  <revision rev="53" vrev="1">
    <srcmd5>3b5849536bfaf6d3ace91d51d005ef8b</srcmd5>
    <version>2.37.1</version>
    <time>1741722281</time>
    <user>anag+factory</user>
    <comment></comment>
    <requestid>1251864</requestid>
  </revision>
  <revision rev="54" vrev="2">
    <srcmd5>754070a0de7bd0c49072f9b5ee76cc83</srcmd5>
    <version>2.37.1</version>
    <time>1744040255</time>
    <user>anag_factory</user>
    <comment></comment>
    <requestid>1267441</requestid>
  </revision>
  <revision rev="55" vrev="1">
    <srcmd5>834a5401f3d2f3ffcfdb7bed758f5652</srcmd5>
    <version>2.38.0</version>
    <time>1745787262</time>
    <user>dimstar_suse</user>
    <comment>- Update to version 2.38.0
  * The --audit and --depaudit options are now supported for compatibility with GNU
    ld. (af396ad)
  * Recent versions of LLVM support an alternative, experimental relocation table
    format called CREL. mold can now read object files containing CREL relocation
    tables. (c43a859)
  * [ARM32][ARM64][PPC32][PPC64] The branch instruction ranges of RISC processors
    are generally insufficient to support the medium code model because their
    instructions are typically 32 bits long, which makes it impossible to embed
    large immediate offsets. For example, ARM64’s branch instruction can target only
    PC ± 128 MiB. If the branch target is farther than that, the linker must emit a
    small piece of code—often called a thunk or branch island—to extend the branch
    range.
  * Previously, mold created unnecessary range extension thunks for symbols that had
    PLT entries. Now, mold does not create thunks unless they are truly needed.
    (a43f395)
  * Previously, --no-allow-shlib-undefined could cause a segmentation fault due to
    an out-of-bounds array access. This has been fixed. (82affb9)
  * --no-allow-shlib-undefined is enabled by default if the output type is an
    executable (as opposed to a shared library) for compatibility with other
    linkers. (43810df)
  * mold could report a spurious &quot;duplicate symbol&quot; error when performing LTO. This
    bug has been fixed. (5d24db5)
  * In rare cases involving symbol versioning, mold mistakenly filtered out
    necessary libraries specified with --as-needed. This bug has been fixed.
    (a97a628)
  * In rare cases involving symbol versioning, mold reported a spurious &quot;undefined
    symbol&quot; error. This bug has been fixed. (2d6061a)
  * If the same symbol was defined with and without the default version (e.g., if an
    object file defined both foo and foo@@VERSION), mold mistakenly hid both symbols</comment>
    <requestid>1272922</requestid>
  </revision>
  <revision rev="56" vrev="1">
    <srcmd5>60c222f2f9be5984556ef6f7e44a03a9</srcmd5>
    <version>2.38.1</version>
    <time>1745937689</time>
    <user>dimstar_suse</user>
    <comment>- Update to version 2.38.1
  * Fixed a bug where mold could fail with a spurious mutually-recursive .so
    detected error message when building an executable. This happened if there was a
    circular dependency between shared libraries given to the linker (i.e.,
    libfoo.so depends on libbar.so and vice versa). Even though libraries with
    circular dependencies are rare and a strong indication of a bug in the original
    program's library layering, the dynamic loader can load such libraries, and the
    linker shouldn't reject them. (21e20e0)</comment>
    <requestid>1273270</requestid>
  </revision>
  <revision rev="57" vrev="1">
    <srcmd5>a2bc7d800a52377a8c9df64e9c3757ae</srcmd5>
    <version>2.39.0</version>
    <time>1746542468</time>
    <user>anag_factory</user>
    <comment>- Update to version 2.39.0
  * [ARM32] Support for 32-bit big-endian ARM has been added. Although running ARM32
    in big-endian mode is very rare, the processor does technically support both
    little- and big-endian modes, and we now support both.
  * There are two variants of big-endian mode for ARM32: BE32 and BE8. BE32 is now
    obsolete and uses big-endian format for both instructions and data. In BE8,
    instructions are always in little-endian (i.e., the same as little-endian
    ARM32), while only the data is in big-endian. mold supports only BE8 output.
    (157b16a)
  * Fixed a spurious --no-allow-shlib-undefined error. (3274bcb)
  * [ARM][PPC] Fixed a regression introduced in 2.38.0 that mold could crash when
    linking a large program. (fded2d8)
  * Previously, --default-symver didn't set versions to symbols if the symbols were
    marked as global: in a version script. Now, --default-symver correctly version
    all symbols with the soname of the output file. (8bae43b)
  * [RISC-V] Fixed an issue where mold reported an error on R_RISCV_32 when the
    target was 64-bit RISC-V. (564757a)
  * [RISC-V] Fixed an issue where a call to an weak undefined symbol within the same
    shared library was mistakenly turned into an infinite loop. Now, such calls are
    promoted to a function call through the PLT entry. (e08e7f6)
  * Fixed an issue that mold falls into an infinite loop in a rare occasion when
    computing an address of the program header. (83dd353)</comment>
    <requestid>1274689</requestid>
  </revision>
  <revision rev="58" vrev="1">
    <srcmd5>a7aa4b5558fbf26df07e213b3de63129</srcmd5>
    <version>2.39.1</version>
    <time>1747159543</time>
    <user>anag_factory</user>
    <comment>- Update to version 2.39.1
  * Fixed a potential use-after-free issue that occurred when doing LTO (link-time
    optimization) with LLVM. (d0dffd5)</comment>
    <requestid>1276942</requestid>
  </revision>
</revisionlist>
