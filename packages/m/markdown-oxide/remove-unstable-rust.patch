From 788da8b981ff33fb89d425f618e3d868be19438b Mon Sep 17 00:00:00 2001
From: Felix Zeller <felixazeller@gmail.com>
Date: Tue, 9 Jul 2024 13:05:36 -0400
Subject: [PATCH] Remove unstable rust requirement

resolve #141
---
 flake.nix   |  3 ++-
 src/main.rs | 30 +++++++++++++++++-------------
 2 files changed, 19 insertions(+), 14 deletions(-)

diff --git a/flake.nix b/flake.nix
index 2323694..8ea9df1 100644
--- a/flake.nix
+++ b/flake.nix
@@ -21,7 +21,8 @@
           buildInputs = [
             openssl
             pkg-config
-            rust-bin.nightly."2024-05-20".default
+            # rust-bin.nightly."2024-05-20".default
+            rust-bin.stable.latest.default
             nodejs_22
             vsce
           ];
diff --git a/src/main.rs b/src/main.rs
index 674db9c..5509dfc 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -1,5 +1,3 @@
-#![feature(async_closure)]
-
 use std::collections::HashSet;
 use std::ops::{Deref, DerefMut};
 use std::path::PathBuf;
@@ -595,15 +593,11 @@ impl LanguageServer for Backend {
     }
 
     async fn execute_command(&self, params: ExecuteCommandParams) -> Result<Option<Value>> {
-        let jump_to_specific = async |day| {
-            let settings = self
-                .bind_settings(|settings| Ok(settings.to_owned()))
-                .await?;
-            let root_dir = self
-                .bind_vault(|vault| Ok(vault.root_dir().to_owned()))
-                .await?;
-            commands::jump(&self.client, &root_dir, &settings, Some(day)).await
-        };
+        let settings = self.bind_settings(|settings| Ok(settings.clone())).await?;
+        let root_dir = self
+            .bind_vault(|vault| Ok(vault.root_dir().to_owned()))
+            .await?;
+
         match params {
             ExecuteCommandParams { command, .. } if *command == *"apply_edits" => {
                 let edits = params
@@ -628,8 +622,9 @@ impl LanguageServer for Backend {
                     .await?;
                 commands::jump(&self.client, &root_dir, &settings, jump_to).await
             }
-            ExecuteCommandParams { command, .. } => jump_to_specific(&command).await,
-            // _ => Ok(None),
+            ExecuteCommandParams { command, .. } => {
+                jump_to_specific(&command, &self.client, &root_dir, &settings).await
+            } // _ => Ok(None),
         }
     }
 
@@ -709,6 +704,15 @@ impl LanguageServer for Backend {
     }
 }
 
+async fn jump_to_specific(
+    day: &str,
+    client: &Client,
+    root_dir: &PathBuf,
+    settings: &Settings,
+) -> Result<Option<Value>> {
+    commands::jump(client, root_dir, settings, Some(day)).await
+}
+
 #[tokio::main]
 async fn main() {
     let stdin = tokio::io::stdin();
