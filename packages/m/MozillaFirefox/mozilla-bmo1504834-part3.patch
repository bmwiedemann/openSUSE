# HG changeset patch
# Parent  d1d66f7e4d0e7fd45e91e4fcee07555e72046d48
For FF68, AntiAliasing of XULTexts seem to be broken on big endian (s390x). Text and icons of the sandwich-menu to the
right of the address bar, as well as plugin-windows appears transparant, which usually means unreadable (white on white).

diff --git a/gfx/skia/skia/include/private/SkNx.h b/gfx/skia/skia/include/private/SkNx.h
--- a/gfx/skia/skia/include/private/SkNx.h
+++ b/gfx/skia/skia/include/private/SkNx.h
@@ -233,17 +233,28 @@ struct SkNx<1,T> {
     AI SkNx operator<<(int bits) const { return fVal << bits; }
     AI SkNx operator>>(int bits) const { return fVal >> bits; }
 
     AI SkNx operator+(const SkNx& y) const { return fVal + y.fVal; }
     AI SkNx operator-(const SkNx& y) const { return fVal - y.fVal; }
     AI SkNx operator*(const SkNx& y) const { return fVal * y.fVal; }
     AI SkNx operator/(const SkNx& y) const { return fVal / y.fVal; }
 
+    // On Big endian the commented out variant doesn't work,
+    // and honestly, I have no idea why it exists in the first place.
+    // The reason its broken is, I think, that it defaults to the double-variant of ToBits()
+    // which gets a 64-bit integer, and FromBits returns 32-bit,
+    // cutting off the wrong half again.
+    // Overall, I see no reason to have ToBits and FromBits at all (even for floats/doubles).
+    // Still we are only "fixing" this for big endian and leave little endian alone (never touch a running system)
+#ifdef SK_CPU_BENDIAN
+    AI SkNx operator&(const SkNx& y) const { return fVal & y.fVal; }
+#else
     AI SkNx operator&(const SkNx& y) const { return FromBits(ToBits(fVal) & ToBits(y.fVal)); }
+#endif
     AI SkNx operator|(const SkNx& y) const { return FromBits(ToBits(fVal) | ToBits(y.fVal)); }
     AI SkNx operator^(const SkNx& y) const { return FromBits(ToBits(fVal) ^ ToBits(y.fVal)); }
 
     AI SkNx operator==(const SkNx& y) const { return FromBits(fVal == y.fVal ? ~0 : 0); }
     AI SkNx operator!=(const SkNx& y) const { return FromBits(fVal != y.fVal ? ~0 : 0); }
     AI SkNx operator<=(const SkNx& y) const { return FromBits(fVal <= y.fVal ? ~0 : 0); }
     AI SkNx operator>=(const SkNx& y) const { return FromBits(fVal >= y.fVal ? ~0 : 0); }
     AI SkNx operator< (const SkNx& y) const { return FromBits(fVal <  y.fVal ? ~0 : 0); }
diff --git a/gfx/skia/skia/src/opts/SkBlitMask_opts.h b/gfx/skia/skia/src/opts/SkBlitMask_opts.h
--- a/gfx/skia/skia/src/opts/SkBlitMask_opts.h
+++ b/gfx/skia/skia/src/opts/SkBlitMask_opts.h
@@ -198,17 +198,23 @@ namespace SK_OPTS_NS {
                                        const SkAlpha* mask, size_t maskRB,
                                        int w, int h) {
         auto fn = [](const Sk4px& d, const Sk4px& aa) {
             //   = (s + d(1-sa))aa + d(1-aa)
             //   = s*aa + d(1-sa*aa)
             //   ~~~>
             // a = 1*aa + d(1-1*aa) = aa + d(1-aa)
             // c = 0*aa + d(1-1*aa) =      d(1-aa)
+
+            // For big endian we have to swap the alpha-mask from 0,0,0,255 to 255,0,0,0
+#ifdef SK_CPU_BENDIAN
+            return Sk4px(Sk16b(aa) & Sk16b(255,0,0,0, 255,0,0,0, 255,0,0,0, 255,0,0,0))
+#else
             return Sk4px(Sk16b(aa) & Sk16b(0,0,0,255, 0,0,0,255, 0,0,0,255, 0,0,0,255))
+#endif
                  + d.approxMulDiv255(aa.inv());
         };
         while (h --> 0) {
             Sk4px::MapDstAlpha(w, dst, mask, fn);
             dst  +=  dstRB / sizeof(*dst);
             mask += maskRB / sizeof(*mask);
         }
     }
