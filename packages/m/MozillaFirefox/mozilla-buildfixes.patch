# HG changeset patch
# User Wolfgang Rosenauer <wr@rosenauer.org>
# Parent  39a0846a4f2df1c4669273933d74567a8774e1da
# References: bmo#1792159 - Add missing includes to AtomicOperationsGenerated.h

diff --git a/js/src/jit/GenerateAtomicOperations.py b/js/src/jit/GenerateAtomicOperations.py
--- a/js/src/jit/GenerateAtomicOperations.py
+++ b/js/src/jit/GenerateAtomicOperations.py
@@ -702,16 +702,18 @@ HEADER_TEMPLATE = """\
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #ifndef jit_AtomicOperationsGenerated_h
 #define jit_AtomicOperationsGenerated_h
 
 /* This file is generated by jit/GenerateAtomicOperations.py. Do not edit! */
 
+#include "mozilla/Attributes.h"
+
 namespace js {
 namespace jit {
 
 %(contents)s
 
 } // namespace jit
 } // namespace js
 
diff --git a/media/ffvpx/config_unix_aarch64.h b/media/ffvpx/config_unix_aarch64.h
--- a/media/ffvpx/config_unix_aarch64.h
+++ b/media/ffvpx/config_unix_aarch64.h
@@ -324,17 +324,17 @@
 #define HAVE_SETCONSOLETEXTATTRIBUTE 0
 #define HAVE_SETCONSOLECTRLHANDLER 0
 #define HAVE_SETDLLDIRECTORY 0
 #define HAVE_SETMODE 0
 #define HAVE_SETRLIMIT 1
 #define HAVE_SLEEP 0
 #define HAVE_STRERROR_R 1
 #define HAVE_SYSCONF 1
-#define HAVE_SYSCTL 1
+#define HAVE_SYSCTL 0
 #define HAVE_USLEEP 1
 #define HAVE_UTGETOSTYPEFROMSTRING 0
 #define HAVE_VIRTUALALLOC 0
 #define HAVE_WGLGETPROCADDRESS 0
 #define HAVE_BCRYPT 0
 #define HAVE_VAAPI_DRM 0
 #define HAVE_VAAPI_X11 0
 #define HAVE_VDPAU_X11 0
diff --git a/mozglue/misc/SIMD_avx2.cpp b/mozglue/misc/SIMD_avx2.cpp
--- a/mozglue/misc/SIMD_avx2.cpp
+++ b/mozglue/misc/SIMD_avx2.cpp
@@ -50,17 +50,17 @@ template <typename TValue>
   }
   if (sizeof(TValue) == 2) {
     return _mm256_cmpeq_epi16(a, b);
   }
 
   return _mm256_cmpeq_epi64(a, b);
 }
 
-#  if defined(__GNUC__) && !defined(__clang__)
+#  if 0
 
 // See the comment in SIMD.cpp over Load32BitsIntoXMM. This is just adapted
 // from that workaround. Testing this, it also yields the correct instructions
 // across all tested compilers.
 __m128i Load64BitsIntoXMM(uintptr_t ptr) {
   int64_t tmp;
   memcpy(&tmp, reinterpret_cast<const void*>(ptr), sizeof(tmp));
   return _mm_cvtsi64_si128(tmp);
