
# HG changeset patch
# User Chun-Min Chang <chun.m.chang@gmail.com>
# Date 1713285444 0
# Node ID 2143ac890f2659f2612c8a1edec1cc93586feffa
# Parent  3b76cb83627af4607b79caf70a03243e6ee6369b
Bug 1886378 - Disable SVE on linux/aarch64 r=glandium

This patch, akin to D204798 in bug 1880814 [1, 2], disables the SVE
features on the Linux/AArch64 platform.

[1] https://phabricator.services.mozilla.com/D204798
[2] https://hg.mozilla.org/mozilla-central/rev/d3a921beb422

Differential Revision: https://phabricator.services.mozilla.com/D206718

diff --git a/media/libvpx/generate_sources_mozbuild.sh b/media/libvpx/generate_sources_mozbuild.sh
--- a/media/libvpx/generate_sources_mozbuild.sh
+++ b/media/libvpx/generate_sources_mozbuild.sh
@@ -209,17 +209,17 @@ disable_sve="--disable-sve" # Bug 188558
 gen_config_files linux/x64 "--target=x86_64-linux-gcc ${all_platforms} ${x86_platforms}"
 gen_config_files linux/ia32 "--target=x86-linux-gcc ${all_platforms} ${x86_platforms}"
 gen_config_files mac/x64 "--target=x86_64-darwin9-gcc ${all_platforms} ${x86_platforms}"
 gen_config_files mac/ia32 "--target=x86-darwin9-gcc ${all_platforms} ${x86_platforms}"
 gen_config_files win/x64 "--target=x86_64-win64-vs15 ${all_platforms} ${x86_platforms}"
 gen_config_files win/ia32 "--target=x86-win32-gcc ${all_platforms} ${x86_platforms}"
 
 gen_config_files linux/arm "--target=armv7-linux-gcc ${all_platforms} ${arm_platforms}"
-gen_config_files linux/arm64 "--target=arm64-linux-gcc ${all_platforms} ${arm64_platforms}"
+gen_config_files linux/arm64 "--target=arm64-linux-gcc ${all_platforms} ${arm64_platforms} ${disable_sve}" # Bug 1889813
 gen_config_files win/aarch64 "--target=arm64-win64-vs15 ${all_platforms} ${arm64_platforms} ${disable_sve}" # Bug 1885585
 
 gen_config_files generic "--target=generic-gnu ${all_platforms}"
 
 echo "Remove temporary directory."
 cd $BASE_DIR
 rm -rf $TEMP_DIR
 
@@ -232,17 +232,17 @@ cd $TEMP_DIR
 gen_rtcd_header linux/x64 x86_64
 gen_rtcd_header linux/ia32 x86
 gen_rtcd_header mac/x64 x86_64
 gen_rtcd_header mac/ia32 x86
 gen_rtcd_header win/x64 x86_64
 gen_rtcd_header win/ia32 x86
 
 gen_rtcd_header linux/arm armv7
-gen_rtcd_header linux/arm64 arm64
+gen_rtcd_header linux/arm64 arm64 $disable_sve # Bug 1889813
 gen_rtcd_header win/aarch64 arm64 $disable_sve # Bug 1885585
 
 gen_rtcd_header generic generic
 
 echo "Prepare Makefile."
 ./configure --target=generic-gnu > /dev/null
 make_clean
 
@@ -273,16 +273,17 @@ make libvpx_srcs.txt target=libs $config
 convert_srcs_to_project_files libvpx_srcs.txt ARM
 
 echo "Generate ARM64 source list."
 config=$(print_config linux/arm64)
 make_clean
 make libvpx_srcs.txt target=libs $config > /dev/null
 convert_srcs_to_project_files libvpx_srcs.txt ARM64
 # Bug 1885585: The sve files will be excluded from the win/aarch64 build in moz.build.
+# Bug 1889813: The sve files will be excluded from the linux/arm64 build in moz.build.
 
 echo "Generate generic source list."
 config=$(print_config generic)
 make_clean
 make libvpx_srcs.txt target=libs $config > /dev/null
 convert_srcs_to_project_files libvpx_srcs.txt GENERIC
 
 echo "}" >> $BASE_DIR/sources.mozbuild


# HG changeset patch
# User Chun-Min Chang <chun.m.chang@gmail.com>
# Date 1713285444 0
# Node ID bdcc287fced58c64dffca97a8d9126606a2b8c1e
# Parent  2143ac890f2659f2612c8a1edec1cc93586feffa
Bug 1886378 - Rework source-list generation across platforms and architectrues r=glandium

Previously, source lists on different platforms were generated solely
based on architecture. Each architecture's source list would be copied
to lists on various platforms with the same architecture, with
modifications as necessary. However, with recently divergent settings
for platforms sharing the same architecture, maintaining a single list
and modifying it across different platforms becomes cumbersome.

To streamline this process and accommodate differing platform-specific
settings, this patch introduces a new approach. It generates source
lists for each platform-architecture combination. Consequently, source
lists for all platform-architecture combinations can be directly copied
without subsequent modifications. This simplifies maintenance across
different platforms and architectures.

Differential Revision: https://phabricator.services.mozilla.com/D206719

diff --git a/media/libvpx/generate_sources_mozbuild.sh b/media/libvpx/generate_sources_mozbuild.sh
--- a/media/libvpx/generate_sources_mozbuild.sh
+++ b/media/libvpx/generate_sources_mozbuild.sh
@@ -199,17 +199,17 @@ cd $TEMP_DIR
 
 echo "Generate config files."
 all_platforms="--enable-external-build --disable-examples --disable-install-docs --disable-unit-tests"
 all_platforms="${all_platforms} --enable-multi-res-encoding --size-limit=8192x4608 --enable-pic"
 all_platforms="${all_platforms} --disable-avx512"
 x86_platforms="--enable-postproc --enable-vp9-postproc --as=yasm"
 arm_platforms="--enable-runtime-cpu-detect --enable-realtime-only"
 arm64_platforms="--enable-realtime-only"
-disable_sve="--disable-sve" # Bug 1885585
+disable_sve="--disable-sve" # Bug 1885585, Bug 1889813
 
 gen_config_files linux/x64 "--target=x86_64-linux-gcc ${all_platforms} ${x86_platforms}"
 gen_config_files linux/ia32 "--target=x86-linux-gcc ${all_platforms} ${x86_platforms}"
 gen_config_files mac/x64 "--target=x86_64-darwin9-gcc ${all_platforms} ${x86_platforms}"
 gen_config_files mac/ia32 "--target=x86-darwin9-gcc ${all_platforms} ${x86_platforms}"
 gen_config_files win/x64 "--target=x86_64-win64-vs15 ${all_platforms} ${x86_platforms}"
 gen_config_files win/ia32 "--target=x86-win32-gcc ${all_platforms} ${x86_platforms}"
 
@@ -246,44 +246,72 @@ echo "Prepare Makefile."
 ./configure --target=generic-gnu > /dev/null
 make_clean
 
 # Remove existing source files.
 rm -rf $BASE_DIR/sources.mozbuild
 write_license $BASE_DIR/sources.mozbuild
 echo "files = {" >> $BASE_DIR/sources.mozbuild
 
-echo "Generate X86_64 source list."
+echo "Generate X86_64 source list on Linux."
 config=$(print_config linux/x64)
 make_clean
 make libvpx_srcs.txt target=libs $config > /dev/null
-convert_srcs_to_project_files libvpx_srcs.txt X64
+convert_srcs_to_project_files libvpx_srcs.txt LINUX_X64
+
+echo "Generate X86_64 source list on Mac."
+config=$(print_config mac/x64)
+make_clean
+make libvpx_srcs.txt target=libs $config > /dev/null
+convert_srcs_to_project_files libvpx_srcs.txt MAC_X64
+
+echo "Generate X86_64 source list on Windows."
+config=$(print_config win/x64)
+make_clean
+make libvpx_srcs.txt target=libs $config > /dev/null
+convert_srcs_to_project_files libvpx_srcs.txt WIN_X64
 
 # Copy vpx_version.h once. The file is the same for all platforms.
 cp vpx_version.h $BASE_DIR/$LIBVPX_CONFIG_DIR
 
-echo "Generate IA32 source list."
+echo "Generate IA32 source list on Linux."
 config=$(print_config linux/ia32)
 make_clean
 make libvpx_srcs.txt target=libs $config > /dev/null
-convert_srcs_to_project_files libvpx_srcs.txt IA32
+convert_srcs_to_project_files libvpx_srcs.txt LINUX_IA32
+
+echo "Generate IA32 source list on Mac."
+config=$(print_config mac/ia32)
+make_clean
+make libvpx_srcs.txt target=libs $config > /dev/null
+convert_srcs_to_project_files libvpx_srcs.txt MAC_IA32
 
-echo "Generate ARM source list."
+echo "Generate IA32 source list on Windows."
+config=$(print_config win/ia32)
+make_clean
+make libvpx_srcs.txt target=libs $config > /dev/null
+convert_srcs_to_project_files libvpx_srcs.txt WIN_IA32
+
+echo "Generate ARM source list on Linux."
 config=$(print_config linux/arm)
 make_clean
 make libvpx_srcs.txt target=libs $config > /dev/null
-convert_srcs_to_project_files libvpx_srcs.txt ARM
+convert_srcs_to_project_files libvpx_srcs.txt LINUX_ARM
 
-echo "Generate ARM64 source list."
+echo "Generate ARM64 source list on Linux"
 config=$(print_config linux/arm64)
 make_clean
 make libvpx_srcs.txt target=libs $config > /dev/null
-convert_srcs_to_project_files libvpx_srcs.txt ARM64
-# Bug 1885585: The sve files will be excluded from the win/aarch64 build in moz.build.
-# Bug 1889813: The sve files will be excluded from the linux/arm64 build in moz.build.
+convert_srcs_to_project_files libvpx_srcs.txt LINUX_ARM64
+
+echo "Generate AARCH64 source list on Windows."
+config=$(print_config win/aarch64)
+make_clean
+make libvpx_srcs.txt target=libs $config > /dev/null
+convert_srcs_to_project_files libvpx_srcs.txt WIN_AARCH64
 
 echo "Generate generic source list."
 config=$(print_config generic)
 make_clean
 make libvpx_srcs.txt target=libs $config > /dev/null
 convert_srcs_to_project_files libvpx_srcs.txt GENERIC
 
 echo "}" >> $BASE_DIR/sources.mozbuild
diff --git a/media/libvpx/moz.build b/media/libvpx/moz.build
--- a/media/libvpx/moz.build
+++ b/media/libvpx/moz.build
@@ -9,55 +9,63 @@ with Files('*'):
 
 include('sources.mozbuild')
 
 if CONFIG['VPX_USE_NASM']:
     USE_NASM = True
 
 # Linux, Mac and Win share file lists for x86* but not configurations.
 if CONFIG['TARGET_CPU'] == 'x86_64':
-    EXPORTS.vpx += files['X64_EXPORTS']
-    SOURCES += files['X64_SOURCES']
     if CONFIG['OS_TARGET'] == 'WINNT':
+        EXPORTS.vpx += files['WIN_X64_EXPORTS']
+        SOURCES += files['WIN_X64_SOURCES']
         ASFLAGS += [ '-I%s/media/libvpx/config/win/x64/' % TOPSRCDIR ]
         LOCAL_INCLUDES += [ '/media/libvpx/config/win/x64/' ]
         SOURCES += [ '/media/libvpx/config/win/x64/vpx_config.c' ]
     elif CONFIG['OS_TARGET'] == 'Darwin':
+        EXPORTS.vpx += files['MAC_X64_EXPORTS']
+        SOURCES += files['MAC_X64_SOURCES']
         ASFLAGS += [ '-I%s/media/libvpx/config/mac/x64/' % TOPSRCDIR ]
         LOCAL_INCLUDES += [ '/media/libvpx/config/mac/x64/' ]
         SOURCES += [ '/media/libvpx/config/mac/x64/vpx_config.c' ]
     else: # Android, Linux, BSDs, etc.
+        EXPORTS.vpx += files['LINUX_X64_EXPORTS']
+        SOURCES += files['LINUX_X64_SOURCES']
         ASFLAGS += [ '-I%s/media/libvpx/config/linux/x64/' % TOPSRCDIR ]
         LOCAL_INCLUDES += [ '/media/libvpx/config/linux/x64/' ]
         SOURCES += [ '/media/libvpx/config/linux/x64/vpx_config.c' ]
 elif CONFIG['TARGET_CPU'] == 'x86':
-    EXPORTS.vpx += files['IA32_EXPORTS']
-    SOURCES += files['IA32_SOURCES']
     if CONFIG['OS_TARGET'] == 'WINNT':
+        EXPORTS.vpx += files['WIN_IA32_EXPORTS']
+        SOURCES += files['WIN_IA32_SOURCES']
         ASFLAGS += [ '-I%s/media/libvpx/config/win/ia32/' % TOPSRCDIR ]
         LOCAL_INCLUDES += [ '/media/libvpx/config/win/ia32/' ]
         SOURCES += [ '/media/libvpx/config/win/ia32/vpx_config.c' ]
     elif CONFIG['OS_TARGET'] == 'Darwin':
+        EXPORTS.vpx += files['MAC_IA32_EXPORTS']
+        SOURCES += files['MAC_IA32_SOURCES']
         ASFLAGS += [ '-I%s/media/libvpx/config/mac/ia32/' % TOPSRCDIR ]
         LOCAL_INCLUDES += [ '/media/libvpx/config/mac/ia32/' ]
         SOURCES += [ '/media/libvpx/config/mac/ia32/vpx_config.c' ]
     else: # Android, Linux, BSDs, etc.
+        EXPORTS.vpx += files['LINUX_IA32_EXPORTS']
+        SOURCES += files['LINUX_IA32_SOURCES']
         ASFLAGS += [ '-I%s/media/libvpx/config/linux/ia32/' % TOPSRCDIR ]
         LOCAL_INCLUDES += [ '/media/libvpx/config/linux/ia32/' ]
         SOURCES += [ '/media/libvpx/config/linux/ia32/vpx_config.c' ]
 elif CONFIG['TARGET_CPU'] == 'arm':
-    EXPORTS.vpx += files['ARM_EXPORTS']
+    EXPORTS.vpx += files['LINUX_ARM_EXPORTS']
     ASFLAGS += [
         '-I%s/media/libvpx/config/linux/arm/' % TOPSRCDIR,
         '-I%s/libvpx' % OBJDIR,
     ]
     LOCAL_INCLUDES += [ '/media/libvpx/config/linux/arm/' ]
     SOURCES += [ '/media/libvpx/config/linux/arm/vpx_config.c' ]
 
-    arm_asm_files = files['ARM_SOURCES']
+    arm_asm_files = files['LINUX_ARM_SOURCES']
 
     if CONFIG['GNU_AS']:
         SOURCES += sorted([
             "!%s.S" % f if f.endswith('.asm') else f for f in arm_asm_files
         ])
     else:
         SOURCES += sorted(arm_asm_files)
 
@@ -66,27 +74,24 @@ elif CONFIG['TARGET_CPU'] == 'arm':
             SOURCES[f].flags += CONFIG['VPX_ASFLAGS']
 
     if CONFIG['OS_TARGET'] == 'Android':
         # For cpu-features.h
         LOCAL_INCLUDES += [
             '%%%s/sources/android/cpufeatures' % CONFIG['ANDROID_NDK'],
         ]
 elif CONFIG['TARGET_CPU'] == 'aarch64' and CONFIG['OS_TARGET'] == 'WINNT':
-    EXPORTS.vpx += files['ARM64_EXPORTS']
-    # Bug 1885585: clang on win/aarch64 cannot compile SVInt8_t type for now.
-    SOURCES += [
-            f for f in files['ARM64_SOURCES'] if not f.endswith('_sve.c')
-        ]
+    EXPORTS.vpx += files['WIN_AARCH64_EXPORTS']
+    SOURCES += files['WIN_AARCH64_SOURCES']
     ASFLAGS += [ '-I%s/media/libvpx/config/win/aarch64/' % TOPSRCDIR ]
     LOCAL_INCLUDES += [ '/media/libvpx/config/win/aarch64/' ]
     SOURCES += [ '/media/libvpx/config/win/aarch64/vpx_config.c' ]
 elif CONFIG['TARGET_CPU'] == 'aarch64':
-    EXPORTS.vpx += files['ARM64_EXPORTS']
-    SOURCES += files['ARM64_SOURCES']
+    EXPORTS.vpx += files['LINUX_ARM64_EXPORTS']
+    SOURCES += files['LINUX_ARM64_SOURCES']
     ASFLAGS += [ '-I%s/media/libvpx/config/linux/arm64/' % TOPSRCDIR ]
     LOCAL_INCLUDES += [ '/media/libvpx/config/linux/arm64/' ]
     SOURCES += [ '/media/libvpx/config/linux/arm64/vpx_config.c' ]
 else:
     # Generic C-only configuration
     EXPORTS.vpx += files['GENERIC_EXPORTS']
     SOURCES += files['GENERIC_SOURCES']
     ASFLAGS += [ '-I%s/media/libvpx/config/generic/' % TOPSRCDIR ]


# HG changeset patch
# User Chun-Min Chang <chun.m.chang@gmail.com>
# Date 1713285445 0
# Node ID e82d37e48dcd7191cbaa50fc592df4c1277fdf86
# Parent  bdcc287fced58c64dffca97a8d9126606a2b8c1e
Bug 1886378 - Include vpx_config.c directly in source list r=glandium

Initially, *vpx_config.c* on various platform-architecture combinations
was revmoed from the input list for source list generation and later
added to the source list in moz.build. This was necessary because the
generated list was based solely on architecture, while the vpx_config.c
differed across platform-architecture combinations.

With the source list generation reworked in the previous patch, each
platform-architecture combination now has its own list. Therefore,
vpx_config.c can be directly included in the source list, simplifying
the process.

Differential Revision: https://phabricator.services.mozilla.com/D207183

diff --git a/media/libvpx/generate_sources_mozbuild.sh b/media/libvpx/generate_sources_mozbuild.sh
--- a/media/libvpx/generate_sources_mozbuild.sh
+++ b/media/libvpx/generate_sources_mozbuild.sh
@@ -64,26 +64,35 @@ function write_sources {
     echo "    'libvpx/$f'," >> "$3"
   done
   echo "]," >> "$3"
 }
 
 # Convert a list of source files into sources.mozbuild.
 # $1 - Input file.
 # $2 - Output prefix.
+# $3 - Path of vpx_config.c under $LIBVPX_CONFIG_DIR
 function convert_srcs_to_project_files {
   # Do the following here:
   # 1. Filter .c, .h, .s, .S and .asm files.
   # 3. Convert .asm.s to .asm because moz.build will do the conversion.
 
   local source_list=$(grep -E '(\.c|\.h|\.S|\.s|\.asm)$' $1)
 
+  # Adjust the path for vpx_config.c while maintaining list order:
+  # Since the config file resides in $BASE_DIR/$LIBVPX_CONFIG_DIR, while the
+  # files in $source_list are placed under $BASE_DIR/libvpx (see write_sources),
+  # the config file path requires adjustment. To ensure the list remains sorted,
+  # we must first remove it and then insert it at the beginning of the list.
+
   # Remove vpx_config.c.
-  # The platform-specific vpx_config.c will be added into in moz.build later.
   source_list=$(echo "$source_list" | grep -v 'vpx_config\.c')
+  # Insert vpx_config.c at the beginning of the list.
+  local config=$(echo "../$LIBVPX_CONFIG_DIR/$3/vpx_config.c")
+  source_list=$(echo "$config" ; echo "$source_list")
 
   # Remove include-only asm files (no object code emitted)
   source_list=$(echo "$source_list" | grep -v 'x86_abi_support\.asm')
   source_list=$(echo "$source_list" | grep -v 'config\.asm')
 
   # The actual ARM files end in .asm. We have rules to translate them to .S
   source_list=$(echo "$source_list" | sed s/\.asm\.s$/.asm/)
 
@@ -250,74 +259,74 @@ make_clean
 rm -rf $BASE_DIR/sources.mozbuild
 write_license $BASE_DIR/sources.mozbuild
 echo "files = {" >> $BASE_DIR/sources.mozbuild
 
 echo "Generate X86_64 source list on Linux."
 config=$(print_config linux/x64)
 make_clean
 make libvpx_srcs.txt target=libs $config > /dev/null
-convert_srcs_to_project_files libvpx_srcs.txt LINUX_X64
+convert_srcs_to_project_files libvpx_srcs.txt LINUX_X64 linux/x64
 
 echo "Generate X86_64 source list on Mac."
 config=$(print_config mac/x64)
 make_clean
 make libvpx_srcs.txt target=libs $config > /dev/null
-convert_srcs_to_project_files libvpx_srcs.txt MAC_X64
+convert_srcs_to_project_files libvpx_srcs.txt MAC_X64 mac/x64
 
 echo "Generate X86_64 source list on Windows."
 config=$(print_config win/x64)
 make_clean
 make libvpx_srcs.txt target=libs $config > /dev/null
-convert_srcs_to_project_files libvpx_srcs.txt WIN_X64
+convert_srcs_to_project_files libvpx_srcs.txt WIN_X64 win/x64
 
 # Copy vpx_version.h once. The file is the same for all platforms.
 cp vpx_version.h $BASE_DIR/$LIBVPX_CONFIG_DIR
 
 echo "Generate IA32 source list on Linux."
 config=$(print_config linux/ia32)
 make_clean
 make libvpx_srcs.txt target=libs $config > /dev/null
-convert_srcs_to_project_files libvpx_srcs.txt LINUX_IA32
+convert_srcs_to_project_files libvpx_srcs.txt LINUX_IA32 linux/ia32
 
 echo "Generate IA32 source list on Mac."
 config=$(print_config mac/ia32)
 make_clean
 make libvpx_srcs.txt target=libs $config > /dev/null
-convert_srcs_to_project_files libvpx_srcs.txt MAC_IA32
+convert_srcs_to_project_files libvpx_srcs.txt MAC_IA32 mac/ia32
 
 echo "Generate IA32 source list on Windows."
 config=$(print_config win/ia32)
 make_clean
 make libvpx_srcs.txt target=libs $config > /dev/null
-convert_srcs_to_project_files libvpx_srcs.txt WIN_IA32
+convert_srcs_to_project_files libvpx_srcs.txt WIN_IA32 win/ia32
 
 echo "Generate ARM source list on Linux."
 config=$(print_config linux/arm)
 make_clean
 make libvpx_srcs.txt target=libs $config > /dev/null
-convert_srcs_to_project_files libvpx_srcs.txt LINUX_ARM
+convert_srcs_to_project_files libvpx_srcs.txt LINUX_ARM linux/arm
 
 echo "Generate ARM64 source list on Linux"
 config=$(print_config linux/arm64)
 make_clean
 make libvpx_srcs.txt target=libs $config > /dev/null
-convert_srcs_to_project_files libvpx_srcs.txt LINUX_ARM64
+convert_srcs_to_project_files libvpx_srcs.txt LINUX_ARM64 linux/arm64
 
 echo "Generate AARCH64 source list on Windows."
 config=$(print_config win/aarch64)
 make_clean
 make libvpx_srcs.txt target=libs $config > /dev/null
-convert_srcs_to_project_files libvpx_srcs.txt WIN_AARCH64
+convert_srcs_to_project_files libvpx_srcs.txt WIN_AARCH64 win/aarch64
 
 echo "Generate generic source list."
 config=$(print_config generic)
 make_clean
 make libvpx_srcs.txt target=libs $config > /dev/null
-convert_srcs_to_project_files libvpx_srcs.txt GENERIC
+convert_srcs_to_project_files libvpx_srcs.txt GENERIC generic
 
 echo "}" >> $BASE_DIR/sources.mozbuild
 
 echo "Remove temporary directory."
 cd $BASE_DIR
 rm -rf $TEMP_DIR
 
 cd $BASE_DIR/$LIBVPX_SRC_DIR
diff --git a/media/libvpx/moz.build b/media/libvpx/moz.build
--- a/media/libvpx/moz.build
+++ b/media/libvpx/moz.build
@@ -14,56 +14,49 @@ if CONFIG['VPX_USE_NASM']:
 
 # Linux, Mac and Win share file lists for x86* but not configurations.
 if CONFIG['TARGET_CPU'] == 'x86_64':
     if CONFIG['OS_TARGET'] == 'WINNT':
         EXPORTS.vpx += files['WIN_X64_EXPORTS']
         SOURCES += files['WIN_X64_SOURCES']
         ASFLAGS += [ '-I%s/media/libvpx/config/win/x64/' % TOPSRCDIR ]
         LOCAL_INCLUDES += [ '/media/libvpx/config/win/x64/' ]
-        SOURCES += [ '/media/libvpx/config/win/x64/vpx_config.c' ]
     elif CONFIG['OS_TARGET'] == 'Darwin':
         EXPORTS.vpx += files['MAC_X64_EXPORTS']
         SOURCES += files['MAC_X64_SOURCES']
         ASFLAGS += [ '-I%s/media/libvpx/config/mac/x64/' % TOPSRCDIR ]
         LOCAL_INCLUDES += [ '/media/libvpx/config/mac/x64/' ]
-        SOURCES += [ '/media/libvpx/config/mac/x64/vpx_config.c' ]
     else: # Android, Linux, BSDs, etc.
         EXPORTS.vpx += files['LINUX_X64_EXPORTS']
         SOURCES += files['LINUX_X64_SOURCES']
         ASFLAGS += [ '-I%s/media/libvpx/config/linux/x64/' % TOPSRCDIR ]
         LOCAL_INCLUDES += [ '/media/libvpx/config/linux/x64/' ]
-        SOURCES += [ '/media/libvpx/config/linux/x64/vpx_config.c' ]
 elif CONFIG['TARGET_CPU'] == 'x86':
     if CONFIG['OS_TARGET'] == 'WINNT':
         EXPORTS.vpx += files['WIN_IA32_EXPORTS']
         SOURCES += files['WIN_IA32_SOURCES']
         ASFLAGS += [ '-I%s/media/libvpx/config/win/ia32/' % TOPSRCDIR ]
         LOCAL_INCLUDES += [ '/media/libvpx/config/win/ia32/' ]
-        SOURCES += [ '/media/libvpx/config/win/ia32/vpx_config.c' ]
     elif CONFIG['OS_TARGET'] == 'Darwin':
         EXPORTS.vpx += files['MAC_IA32_EXPORTS']
         SOURCES += files['MAC_IA32_SOURCES']
         ASFLAGS += [ '-I%s/media/libvpx/config/mac/ia32/' % TOPSRCDIR ]
         LOCAL_INCLUDES += [ '/media/libvpx/config/mac/ia32/' ]
-        SOURCES += [ '/media/libvpx/config/mac/ia32/vpx_config.c' ]
     else: # Android, Linux, BSDs, etc.
         EXPORTS.vpx += files['LINUX_IA32_EXPORTS']
         SOURCES += files['LINUX_IA32_SOURCES']
         ASFLAGS += [ '-I%s/media/libvpx/config/linux/ia32/' % TOPSRCDIR ]
         LOCAL_INCLUDES += [ '/media/libvpx/config/linux/ia32/' ]
-        SOURCES += [ '/media/libvpx/config/linux/ia32/vpx_config.c' ]
 elif CONFIG['TARGET_CPU'] == 'arm':
     EXPORTS.vpx += files['LINUX_ARM_EXPORTS']
     ASFLAGS += [
         '-I%s/media/libvpx/config/linux/arm/' % TOPSRCDIR,
         '-I%s/libvpx' % OBJDIR,
     ]
     LOCAL_INCLUDES += [ '/media/libvpx/config/linux/arm/' ]
-    SOURCES += [ '/media/libvpx/config/linux/arm/vpx_config.c' ]
 
     arm_asm_files = files['LINUX_ARM_SOURCES']
 
     if CONFIG['GNU_AS']:
         SOURCES += sorted([
             "!%s.S" % f if f.endswith('.asm') else f for f in arm_asm_files
         ])
     else:
@@ -78,30 +71,27 @@ elif CONFIG['TARGET_CPU'] == 'arm':
         LOCAL_INCLUDES += [
             '%%%s/sources/android/cpufeatures' % CONFIG['ANDROID_NDK'],
         ]
 elif CONFIG['TARGET_CPU'] == 'aarch64' and CONFIG['OS_TARGET'] == 'WINNT':
     EXPORTS.vpx += files['WIN_AARCH64_EXPORTS']
     SOURCES += files['WIN_AARCH64_SOURCES']
     ASFLAGS += [ '-I%s/media/libvpx/config/win/aarch64/' % TOPSRCDIR ]
     LOCAL_INCLUDES += [ '/media/libvpx/config/win/aarch64/' ]
-    SOURCES += [ '/media/libvpx/config/win/aarch64/vpx_config.c' ]
 elif CONFIG['TARGET_CPU'] == 'aarch64':
     EXPORTS.vpx += files['LINUX_ARM64_EXPORTS']
     SOURCES += files['LINUX_ARM64_SOURCES']
     ASFLAGS += [ '-I%s/media/libvpx/config/linux/arm64/' % TOPSRCDIR ]
     LOCAL_INCLUDES += [ '/media/libvpx/config/linux/arm64/' ]
-    SOURCES += [ '/media/libvpx/config/linux/arm64/vpx_config.c' ]
 else:
     # Generic C-only configuration
     EXPORTS.vpx += files['GENERIC_EXPORTS']
     SOURCES += files['GENERIC_SOURCES']
     ASFLAGS += [ '-I%s/media/libvpx/config/generic/' % TOPSRCDIR ]
     LOCAL_INCLUDES += [ '/media/libvpx/config/generic/' ]
-    SOURCES += [ '/media/libvpx/config/generic/vpx_config.c' ]
 
 # We allow warnings for third-party code that can be updated from upstream.
 AllowCompilerWarnings()
 
 FINAL_LIBRARY = 'gkcodecs'
 NoVisibilityFlags()
 
 DEFINES['HAVE_CONFIG_H'] = 'vpx_config.h'


# HG changeset patch
# User Chun-Min Chang <chun.m.chang@gmail.com>
# Date 1713285445 0
# Node ID bfaf7b3f0e79df98841fc26d892458631b162e11
# Parent  e82d37e48dcd7191cbaa50fc592df4c1277fdf86
Bug 1886378 - Update linux/aarch64 sources to SVE-disabled version r=glandium

This patch updates the linux/aarch64 sources in our code base to the
SVE-disabled version. The commit version remains at 7fb8cec.

Differential Revision: https://phabricator.services.mozilla.com/D206720

diff --git a/media/libvpx/config/linux/arm64/vp9_rtcd.h b/media/libvpx/config/linux/arm64/vp9_rtcd.h
--- a/media/libvpx/config/linux/arm64/vp9_rtcd.h
+++ b/media/libvpx/config/linux/arm64/vp9_rtcd.h
@@ -30,23 +30,21 @@ union int_mv;
 struct yv12_buffer_config;
 
 #ifdef __cplusplus
 extern "C" {
 #endif
 
 int64_t vp9_block_error_c(const tran_low_t *coeff, const tran_low_t *dqcoeff, intptr_t block_size, int64_t *ssz);
 int64_t vp9_block_error_neon(const tran_low_t *coeff, const tran_low_t *dqcoeff, intptr_t block_size, int64_t *ssz);
-int64_t vp9_block_error_sve(const tran_low_t *coeff, const tran_low_t *dqcoeff, intptr_t block_size, int64_t *ssz);
-RTCD_EXTERN int64_t (*vp9_block_error)(const tran_low_t *coeff, const tran_low_t *dqcoeff, intptr_t block_size, int64_t *ssz);
+#define vp9_block_error vp9_block_error_neon
 
 int64_t vp9_block_error_fp_c(const tran_low_t *coeff, const tran_low_t *dqcoeff, int block_size);
 int64_t vp9_block_error_fp_neon(const tran_low_t *coeff, const tran_low_t *dqcoeff, int block_size);
-int64_t vp9_block_error_fp_sve(const tran_low_t *coeff, const tran_low_t *dqcoeff, int block_size);
-RTCD_EXTERN int64_t (*vp9_block_error_fp)(const tran_low_t *coeff, const tran_low_t *dqcoeff, int block_size);
+#define vp9_block_error_fp vp9_block_error_fp_neon
 
 int vp9_diamond_search_sad_c(const struct macroblock *x, const struct search_site_config *cfg,  struct mv *ref_mv, uint32_t start_mv_sad, struct mv *best_mv, int search_param, int sad_per_bit, int *num00, const struct vp9_sad_table *sad_fn_ptr, const struct mv *center_mv);
 int vp9_diamond_search_sad_neon(const struct macroblock *x, const struct search_site_config *cfg,  struct mv *ref_mv, uint32_t start_mv_sad, struct mv *best_mv, int search_param, int sad_per_bit, int *num00, const struct vp9_sad_table *sad_fn_ptr, const struct mv *center_mv);
 #define vp9_diamond_search_sad vp9_diamond_search_sad_neon
 
 void vp9_fht16x16_c(const int16_t *input, tran_low_t *output, int stride, int tx_type);
 void vp9_fht16x16_neon(const int16_t *input, tran_low_t *output, int stride, int tx_type);
 #define vp9_fht16x16 vp9_fht16x16_neon
@@ -93,20 +91,16 @@ void vp9_rtcd(void);
 #ifdef RTCD_C
 #include "vpx_ports/arm.h"
 static void setup_rtcd_internal(void)
 {
     int flags = arm_cpu_caps();
 
     (void)flags;
 
-    vp9_block_error = vp9_block_error_neon;
-    if (flags & HAS_SVE) vp9_block_error = vp9_block_error_sve;
-    vp9_block_error_fp = vp9_block_error_fp_neon;
-    if (flags & HAS_SVE) vp9_block_error_fp = vp9_block_error_fp_sve;
 }
 #endif
 
 #ifdef __cplusplus
 }  // extern "C"
 #endif
 
 #endif
diff --git a/media/libvpx/config/linux/arm64/vpx_config.asm b/media/libvpx/config/linux/arm64/vpx_config.asm
--- a/media/libvpx/config/linux/arm64/vpx_config.asm
+++ b/media/libvpx/config/linux/arm64/vpx_config.asm
@@ -7,18 +7,18 @@
 .equ VPX_ARCH_X86 ,  0
 .equ VPX_ARCH_X86_64 ,  0
 .equ VPX_ARCH_PPC ,  0
 .equ VPX_ARCH_LOONGARCH ,  0
 .equ HAVE_NEON_ASM ,  0
 .equ HAVE_NEON ,  1
 .equ HAVE_NEON_DOTPROD ,  1
 .equ HAVE_NEON_I8MM ,  1
-.equ HAVE_SVE ,  1
-.equ HAVE_SVE2 ,  1
+.equ HAVE_SVE ,  0
+.equ HAVE_SVE2 ,  0
 .equ HAVE_MIPS32 ,  0
 .equ HAVE_DSPR2 ,  0
 .equ HAVE_MSA ,  0
 .equ HAVE_MIPS64 ,  0
 .equ HAVE_MMX ,  0
 .equ HAVE_SSE ,  0
 .equ HAVE_SSE2 ,  0
 .equ HAVE_SSE3 ,  0
diff --git a/media/libvpx/config/linux/arm64/vpx_config.c b/media/libvpx/config/linux/arm64/vpx_config.c
--- a/media/libvpx/config/linux/arm64/vpx_config.c
+++ b/media/libvpx/config/linux/arm64/vpx_config.c
@@ -1,10 +1,10 @@
 /* Copyright (c) 2011 The WebM project authors. All Rights Reserved. */
 /*  */
 /* Use of this source code is governed by a BSD-style license */
 /* that can be found in the LICENSE file in the root of the source */
 /* tree. An additional intellectual property rights grant can be found */
 /* in the file PATENTS.  All contributing project authors may */
 /* be found in the AUTHORS file in the root of the source tree. */
 #include "vpx/vpx_codec.h"
-static const char* const cfg = "--target=arm64-linux-gcc --enable-external-build --disable-examples --disable-install-docs --disable-unit-tests --enable-multi-res-encoding --size-limit=8192x4608 --enable-pic --disable-avx512 --enable-realtime-only --log=/home/cm/Work/gecko-dev/media/libvpx/config/linux/arm64/config.log";
+static const char* const cfg = "--target=arm64-linux-gcc --enable-external-build --disable-examples --disable-install-docs --disable-unit-tests --enable-multi-res-encoding --size-limit=8192x4608 --enable-pic --disable-avx512 --enable-realtime-only --disable-sve --log=/home/cm/Work/gecko-dev/media/libvpx/config/linux/arm64/config.log";
 const char *vpx_codec_build_config(void) {return cfg;}
diff --git a/media/libvpx/config/linux/arm64/vpx_config.h b/media/libvpx/config/linux/arm64/vpx_config.h
--- a/media/libvpx/config/linux/arm64/vpx_config.h
+++ b/media/libvpx/config/linux/arm64/vpx_config.h
@@ -16,18 +16,18 @@
 #define VPX_ARCH_X86 0
 #define VPX_ARCH_X86_64 0
 #define VPX_ARCH_PPC 0
 #define VPX_ARCH_LOONGARCH 0
 #define HAVE_NEON_ASM 0
 #define HAVE_NEON 1
 #define HAVE_NEON_DOTPROD 1
 #define HAVE_NEON_I8MM 1
-#define HAVE_SVE 1
-#define HAVE_SVE2 1
+#define HAVE_SVE 0
+#define HAVE_SVE2 0
 #define HAVE_MIPS32 0
 #define HAVE_DSPR2 0
 #define HAVE_MSA 0
 #define HAVE_MIPS64 0
 #define HAVE_MMX 0
 #define HAVE_SSE 0
 #define HAVE_SSE2 0
 #define HAVE_SSE3 0
diff --git a/media/libvpx/config/linux/arm64/vpx_dsp_rtcd.h b/media/libvpx/config/linux/arm64/vpx_dsp_rtcd.h
--- a/media/libvpx/config/linux/arm64/vpx_dsp_rtcd.h
+++ b/media/libvpx/config/linux/arm64/vpx_dsp_rtcd.h
@@ -911,18 +911,17 @@ uint32_t vpx_sub_pixel_variance8x8_neon(
 #define vpx_sub_pixel_variance8x8 vpx_sub_pixel_variance8x8_neon
 
 void vpx_subtract_block_c(int rows, int cols, int16_t *diff_ptr, ptrdiff_t diff_stride, const uint8_t *src_ptr, ptrdiff_t src_stride, const uint8_t *pred_ptr, ptrdiff_t pred_stride);
 void vpx_subtract_block_neon(int rows, int cols, int16_t *diff_ptr, ptrdiff_t diff_stride, const uint8_t *src_ptr, ptrdiff_t src_stride, const uint8_t *pred_ptr, ptrdiff_t pred_stride);
 #define vpx_subtract_block vpx_subtract_block_neon
 
 uint64_t vpx_sum_squares_2d_i16_c(const int16_t *src, int stride, int size);
 uint64_t vpx_sum_squares_2d_i16_neon(const int16_t *src, int stride, int size);
-uint64_t vpx_sum_squares_2d_i16_sve(const int16_t *src, int stride, int size);
-RTCD_EXTERN uint64_t (*vpx_sum_squares_2d_i16)(const int16_t *src, int stride, int size);
+#define vpx_sum_squares_2d_i16 vpx_sum_squares_2d_i16_neon
 
 void vpx_tm_predictor_16x16_c(uint8_t *dst, ptrdiff_t stride, const uint8_t *above, const uint8_t *left);
 void vpx_tm_predictor_16x16_neon(uint8_t *dst, ptrdiff_t stride, const uint8_t *above, const uint8_t *left);
 #define vpx_tm_predictor_16x16 vpx_tm_predictor_16x16_neon
 
 void vpx_tm_predictor_32x32_c(uint8_t *dst, ptrdiff_t stride, const uint8_t *above, const uint8_t *left);
 void vpx_tm_predictor_32x32_neon(uint8_t *dst, ptrdiff_t stride, const uint8_t *above, const uint8_t *left);
 #define vpx_tm_predictor_32x32 vpx_tm_predictor_32x32_neon
@@ -1144,18 +1143,16 @@ static void setup_rtcd_internal(void)
     vpx_sad_skip_64x32x4d = vpx_sad_skip_64x32x4d_neon;
     if (flags & HAS_NEON_DOTPROD) vpx_sad_skip_64x32x4d = vpx_sad_skip_64x32x4d_neon_dotprod;
     vpx_sad_skip_64x64 = vpx_sad_skip_64x64_neon;
     if (flags & HAS_NEON_DOTPROD) vpx_sad_skip_64x64 = vpx_sad_skip_64x64_neon_dotprod;
     vpx_sad_skip_64x64x4d = vpx_sad_skip_64x64x4d_neon;
     if (flags & HAS_NEON_DOTPROD) vpx_sad_skip_64x64x4d = vpx_sad_skip_64x64x4d_neon_dotprod;
     vpx_sse = vpx_sse_neon;
     if (flags & HAS_NEON_DOTPROD) vpx_sse = vpx_sse_neon_dotprod;
-    vpx_sum_squares_2d_i16 = vpx_sum_squares_2d_i16_neon;
-    if (flags & HAS_SVE) vpx_sum_squares_2d_i16 = vpx_sum_squares_2d_i16_sve;
     vpx_variance16x16 = vpx_variance16x16_neon;
     if (flags & HAS_NEON_DOTPROD) vpx_variance16x16 = vpx_variance16x16_neon_dotprod;
     vpx_variance16x32 = vpx_variance16x32_neon;
     if (flags & HAS_NEON_DOTPROD) vpx_variance16x32 = vpx_variance16x32_neon_dotprod;
     vpx_variance16x8 = vpx_variance16x8_neon;
     if (flags & HAS_NEON_DOTPROD) vpx_variance16x8 = vpx_variance16x8_neon_dotprod;
     vpx_variance32x16 = vpx_variance32x16_neon;
     if (flags & HAS_NEON_DOTPROD) vpx_variance32x16 = vpx_variance32x16_neon_dotprod;
diff --git a/media/libvpx/generate_sources_mozbuild.sh b/media/libvpx/generate_sources_mozbuild.sh
--- a/media/libvpx/generate_sources_mozbuild.sh
+++ b/media/libvpx/generate_sources_mozbuild.sh
@@ -78,17 +78,17 @@ function convert_srcs_to_project_files {
   local source_list=$(grep -E '(\.c|\.h|\.S|\.s|\.asm)$' $1)
 
   # Adjust the path for vpx_config.c while maintaining list order:
   # Since the config file resides in $BASE_DIR/$LIBVPX_CONFIG_DIR, while the
   # files in $source_list are placed under $BASE_DIR/libvpx (see write_sources),
   # the config file path requires adjustment. To ensure the list remains sorted,
   # we must first remove it and then insert it at the beginning of the list.
 
-  # Remove vpx_config.c.
+  # Remove vpx_config.c
   source_list=$(echo "$source_list" | grep -v 'vpx_config\.c')
   # Insert vpx_config.c at the beginning of the list.
   local config=$(echo "../$LIBVPX_CONFIG_DIR/$3/vpx_config.c")
   source_list=$(echo "$config" ; echo "$source_list")
 
   # Remove include-only asm files (no object code emitted)
   source_list=$(echo "$source_list" | grep -v 'x86_abi_support\.asm')
   source_list=$(echo "$source_list" | grep -v 'config\.asm')
diff --git a/media/libvpx/sources.mozbuild b/media/libvpx/sources.mozbuild
--- a/media/libvpx/sources.mozbuild
+++ b/media/libvpx/sources.mozbuild
@@ -1,12 +1,12 @@
 # This file is generated. Do not edit.
 
 files = {
-  'X64_EXPORTS': [
+  'LINUX_X64_EXPORTS': [
     'libvpx/vpx/vp8.h',
     'libvpx/vpx/vp8cx.h',
     'libvpx/vpx/vp8dx.h',
     'libvpx/vpx/vpx_codec.h',
     'libvpx/vpx/vpx_decoder.h',
     'libvpx/vpx/vpx_encoder.h',
     'libvpx/vpx/vpx_ext_ratectrl.h',
     'libvpx/vpx/vpx_frame_buffer.h',
@@ -20,17 +20,574 @@ files = {
     'libvpx/vpx_ports/mem.h',
     'libvpx/vpx_ports/static_assert.h',
     'libvpx/vpx_ports/system_state.h',
     'libvpx/vpx_ports/vpx_timer.h',
     'libvpx/vpx_ports/x86.h',
     'libvpx/vpx_scale/vpx_scale.h',
     'libvpx/vpx_scale/yv12config.h',
 ],
-  'X64_SOURCES': [
+  'LINUX_X64_SOURCES': [
+    'libvpx/../config/linux/x64/vpx_config.c',
+    'libvpx/vp8/common/alloccommon.c',
+    'libvpx/vp8/common/blockd.c',
+    'libvpx/vp8/common/dequantize.c',
+    'libvpx/vp8/common/entropy.c',
+    'libvpx/vp8/common/entropymode.c',
+    'libvpx/vp8/common/entropymv.c',
+    'libvpx/vp8/common/extend.c',
+    'libvpx/vp8/common/filter.c',
+    'libvpx/vp8/common/findnearmv.c',
+    'libvpx/vp8/common/generic/systemdependent.c',
+    'libvpx/vp8/common/idct_blk.c',
+    'libvpx/vp8/common/idctllm.c',
+    'libvpx/vp8/common/loopfilter_filters.c',
+    'libvpx/vp8/common/mbpitch.c',
+    'libvpx/vp8/common/mfqe.c',
+    'libvpx/vp8/common/modecont.c',
+    'libvpx/vp8/common/postproc.c',
+    'libvpx/vp8/common/quant_common.c',
+    'libvpx/vp8/common/reconinter.c',
+    'libvpx/vp8/common/reconintra.c',
+    'libvpx/vp8/common/reconintra4x4.c',
+    'libvpx/vp8/common/rtcd.c',
+    'libvpx/vp8/common/setupintrarecon.c',
+    'libvpx/vp8/common/swapyv12buffer.c',
+    'libvpx/vp8/common/treecoder.c',
+    'libvpx/vp8/common/vp8_loopfilter.c',
+    'libvpx/vp8/common/vp8_skin_detection.c',
+    'libvpx/vp8/common/x86/bilinear_filter_sse2.c',
+    'libvpx/vp8/common/x86/dequantize_mmx.asm',
+    'libvpx/vp8/common/x86/idct_blk_mmx.c',
+    'libvpx/vp8/common/x86/idct_blk_sse2.c',
+    'libvpx/vp8/common/x86/idctllm_mmx.asm',
+    'libvpx/vp8/common/x86/idctllm_sse2.asm',
+    'libvpx/vp8/common/x86/iwalsh_sse2.asm',
+    'libvpx/vp8/common/x86/loopfilter_block_sse2_x86_64.asm',
+    'libvpx/vp8/common/x86/loopfilter_sse2.asm',
+    'libvpx/vp8/common/x86/loopfilter_x86.c',
+    'libvpx/vp8/common/x86/mfqe_sse2.asm',
+    'libvpx/vp8/common/x86/recon_mmx.asm',
+    'libvpx/vp8/common/x86/recon_sse2.asm',
+    'libvpx/vp8/common/x86/subpixel_mmx.asm',
+    'libvpx/vp8/common/x86/subpixel_sse2.asm',
+    'libvpx/vp8/common/x86/subpixel_ssse3.asm',
+    'libvpx/vp8/common/x86/vp8_asm_stubs.c',
+    'libvpx/vp8/decoder/dboolhuff.c',
+    'libvpx/vp8/decoder/decodeframe.c',
+    'libvpx/vp8/decoder/decodemv.c',
+    'libvpx/vp8/decoder/detokenize.c',
+    'libvpx/vp8/decoder/onyxd_if.c',
+    'libvpx/vp8/decoder/threading.c',
+    'libvpx/vp8/encoder/bitstream.c',
+    'libvpx/vp8/encoder/boolhuff.c',
+    'libvpx/vp8/encoder/copy_c.c',
+    'libvpx/vp8/encoder/dct.c',
+    'libvpx/vp8/encoder/denoising.c',
+    'libvpx/vp8/encoder/encodeframe.c',
+    'libvpx/vp8/encoder/encodeintra.c',
+    'libvpx/vp8/encoder/encodemb.c',
+    'libvpx/vp8/encoder/encodemv.c',
+    'libvpx/vp8/encoder/ethreading.c',
+    'libvpx/vp8/encoder/firstpass.c',
+    'libvpx/vp8/encoder/lookahead.c',
+    'libvpx/vp8/encoder/mcomp.c',
+    'libvpx/vp8/encoder/modecosts.c',
+    'libvpx/vp8/encoder/mr_dissim.c',
+    'libvpx/vp8/encoder/onyx_if.c',
+    'libvpx/vp8/encoder/pickinter.c',
+    'libvpx/vp8/encoder/picklpf.c',
+    'libvpx/vp8/encoder/ratectrl.c',
+    'libvpx/vp8/encoder/rdopt.c',
+    'libvpx/vp8/encoder/segmentation.c',
+    'libvpx/vp8/encoder/temporal_filter.c',
+    'libvpx/vp8/encoder/tokenize.c',
+    'libvpx/vp8/encoder/treewriter.c',
+    'libvpx/vp8/encoder/vp8_quantize.c',
+    'libvpx/vp8/encoder/x86/block_error_sse2.asm',
+    'libvpx/vp8/encoder/x86/copy_sse2.asm',
+    'libvpx/vp8/encoder/x86/copy_sse3.asm',
+    'libvpx/vp8/encoder/x86/dct_sse2.asm',
+    'libvpx/vp8/encoder/x86/denoising_sse2.c',
+    'libvpx/vp8/encoder/x86/fwalsh_sse2.asm',
+    'libvpx/vp8/encoder/x86/quantize_sse4.c',
+    'libvpx/vp8/encoder/x86/temporal_filter_apply_sse2.asm',
+    'libvpx/vp8/encoder/x86/vp8_enc_stubs_sse2.c',
+    'libvpx/vp8/encoder/x86/vp8_quantize_sse2.c',
+    'libvpx/vp8/encoder/x86/vp8_quantize_ssse3.c',
+    'libvpx/vp8/vp8_cx_iface.c',
+    'libvpx/vp8/vp8_dx_iface.c',
+    'libvpx/vp9/common/vp9_alloccommon.c',
+    'libvpx/vp9/common/vp9_blockd.c',
+    'libvpx/vp9/common/vp9_common_data.c',
+    'libvpx/vp9/common/vp9_entropy.c',
+    'libvpx/vp9/common/vp9_entropymode.c',
+    'libvpx/vp9/common/vp9_entropymv.c',
+    'libvpx/vp9/common/vp9_filter.c',
+    'libvpx/vp9/common/vp9_frame_buffers.c',
+    'libvpx/vp9/common/vp9_idct.c',
+    'libvpx/vp9/common/vp9_loopfilter.c',
+    'libvpx/vp9/common/vp9_mfqe.c',
+    'libvpx/vp9/common/vp9_mvref_common.c',
+    'libvpx/vp9/common/vp9_postproc.c',
+    'libvpx/vp9/common/vp9_pred_common.c',
+    'libvpx/vp9/common/vp9_quant_common.c',
+    'libvpx/vp9/common/vp9_reconinter.c',
+    'libvpx/vp9/common/vp9_reconintra.c',
+    'libvpx/vp9/common/vp9_rtcd.c',
+    'libvpx/vp9/common/vp9_scale.c',
+    'libvpx/vp9/common/vp9_scan.c',
+    'libvpx/vp9/common/vp9_seg_common.c',
+    'libvpx/vp9/common/vp9_thread_common.c',
+    'libvpx/vp9/common/vp9_tile_common.c',
+    'libvpx/vp9/common/x86/vp9_idct_intrin_sse2.c',
+    'libvpx/vp9/common/x86/vp9_mfqe_sse2.asm',
+    'libvpx/vp9/decoder/vp9_decodeframe.c',
+    'libvpx/vp9/decoder/vp9_decodemv.c',
+    'libvpx/vp9/decoder/vp9_decoder.c',
+    'libvpx/vp9/decoder/vp9_detokenize.c',
+    'libvpx/vp9/decoder/vp9_dsubexp.c',
+    'libvpx/vp9/decoder/vp9_job_queue.c',
+    'libvpx/vp9/encoder/vp9_alt_ref_aq.c',
+    'libvpx/vp9/encoder/vp9_aq_360.c',
+    'libvpx/vp9/encoder/vp9_aq_complexity.c',
+    'libvpx/vp9/encoder/vp9_aq_cyclicrefresh.c',
+    'libvpx/vp9/encoder/vp9_aq_variance.c',
+    'libvpx/vp9/encoder/vp9_bitstream.c',
+    'libvpx/vp9/encoder/vp9_context_tree.c',
+    'libvpx/vp9/encoder/vp9_cost.c',
+    'libvpx/vp9/encoder/vp9_dct.c',
+    'libvpx/vp9/encoder/vp9_encodeframe.c',
+    'libvpx/vp9/encoder/vp9_encodemb.c',
+    'libvpx/vp9/encoder/vp9_encodemv.c',
+    'libvpx/vp9/encoder/vp9_encoder.c',
+    'libvpx/vp9/encoder/vp9_ethread.c',
+    'libvpx/vp9/encoder/vp9_ext_ratectrl.c',
+    'libvpx/vp9/encoder/vp9_extend.c',
+    'libvpx/vp9/encoder/vp9_firstpass.c',
+    'libvpx/vp9/encoder/vp9_frame_scale.c',
+    'libvpx/vp9/encoder/vp9_lookahead.c',
+    'libvpx/vp9/encoder/vp9_mbgraph.c',
+    'libvpx/vp9/encoder/vp9_mcomp.c',
+    'libvpx/vp9/encoder/vp9_multi_thread.c',
+    'libvpx/vp9/encoder/vp9_noise_estimate.c',
+    'libvpx/vp9/encoder/vp9_picklpf.c',
+    'libvpx/vp9/encoder/vp9_pickmode.c',
+    'libvpx/vp9/encoder/vp9_quantize.c',
+    'libvpx/vp9/encoder/vp9_ratectrl.c',
+    'libvpx/vp9/encoder/vp9_rd.c',
+    'libvpx/vp9/encoder/vp9_rdopt.c',
+    'libvpx/vp9/encoder/vp9_resize.c',
+    'libvpx/vp9/encoder/vp9_segmentation.c',
+    'libvpx/vp9/encoder/vp9_skin_detection.c',
+    'libvpx/vp9/encoder/vp9_speed_features.c',
+    'libvpx/vp9/encoder/vp9_subexp.c',
+    'libvpx/vp9/encoder/vp9_svc_layercontext.c',
+    'libvpx/vp9/encoder/vp9_temporal_filter.c',
+    'libvpx/vp9/encoder/vp9_tokenize.c',
+    'libvpx/vp9/encoder/vp9_tpl_model.c',
+    'libvpx/vp9/encoder/vp9_treewriter.c',
+    'libvpx/vp9/encoder/x86/temporal_filter_sse4.c',
+    'libvpx/vp9/encoder/x86/vp9_dct_intrin_sse2.c',
+    'libvpx/vp9/encoder/x86/vp9_dct_sse2.asm',
+    'libvpx/vp9/encoder/x86/vp9_error_avx2.c',
+    'libvpx/vp9/encoder/x86/vp9_error_sse2.asm',
+    'libvpx/vp9/encoder/x86/vp9_frame_scale_ssse3.c',
+    'libvpx/vp9/encoder/x86/vp9_quantize_avx2.c',
+    'libvpx/vp9/encoder/x86/vp9_quantize_sse2.c',
+    'libvpx/vp9/encoder/x86/vp9_quantize_ssse3.c',
+    'libvpx/vp9/vp9_cx_iface.c',
+    'libvpx/vp9/vp9_dx_iface.c',
+    'libvpx/vp9/vp9_iface_common.c',
+    'libvpx/vpx/src/vpx_codec.c',
+    'libvpx/vpx/src/vpx_decoder.c',
+    'libvpx/vpx/src/vpx_encoder.c',
+    'libvpx/vpx/src/vpx_image.c',
+    'libvpx/vpx/src/vpx_tpl.c',
+    'libvpx/vpx_dsp/add_noise.c',
+    'libvpx/vpx_dsp/avg.c',
+    'libvpx/vpx_dsp/bitreader.c',
+    'libvpx/vpx_dsp/bitreader_buffer.c',
+    'libvpx/vpx_dsp/bitwriter.c',
+    'libvpx/vpx_dsp/bitwriter_buffer.c',
+    'libvpx/vpx_dsp/deblock.c',
+    'libvpx/vpx_dsp/fwd_txfm.c',
+    'libvpx/vpx_dsp/intrapred.c',
+    'libvpx/vpx_dsp/inv_txfm.c',
+    'libvpx/vpx_dsp/loopfilter.c',
+    'libvpx/vpx_dsp/prob.c',
+    'libvpx/vpx_dsp/psnr.c',
+    'libvpx/vpx_dsp/quantize.c',
+    'libvpx/vpx_dsp/sad.c',
+    'libvpx/vpx_dsp/skin_detection.c',
+    'libvpx/vpx_dsp/sse.c',
+    'libvpx/vpx_dsp/subtract.c',
+    'libvpx/vpx_dsp/sum_squares.c',
+    'libvpx/vpx_dsp/variance.c',
+    'libvpx/vpx_dsp/vpx_convolve.c',
+    'libvpx/vpx_dsp/vpx_dsp_rtcd.c',
+    'libvpx/vpx_dsp/x86/add_noise_sse2.asm',
+    'libvpx/vpx_dsp/x86/avg_intrin_avx2.c',
+    'libvpx/vpx_dsp/x86/avg_intrin_sse2.c',
+    'libvpx/vpx_dsp/x86/avg_pred_avx2.c',
+    'libvpx/vpx_dsp/x86/avg_pred_sse2.c',
+    'libvpx/vpx_dsp/x86/avg_ssse3_x86_64.asm',
+    'libvpx/vpx_dsp/x86/deblock_sse2.asm',
+    'libvpx/vpx_dsp/x86/fwd_txfm_avx2.c',
+    'libvpx/vpx_dsp/x86/fwd_txfm_sse2.c',
+    'libvpx/vpx_dsp/x86/fwd_txfm_ssse3_x86_64.asm',
+    'libvpx/vpx_dsp/x86/intrapred_sse2.asm',
+    'libvpx/vpx_dsp/x86/intrapred_ssse3.asm',
+    'libvpx/vpx_dsp/x86/inv_txfm_avx2.c',
+    'libvpx/vpx_dsp/x86/inv_txfm_sse2.c',
+    'libvpx/vpx_dsp/x86/inv_txfm_ssse3.c',
+    'libvpx/vpx_dsp/x86/inv_wht_sse2.asm',
+    'libvpx/vpx_dsp/x86/loopfilter_avx2.c',
+    'libvpx/vpx_dsp/x86/loopfilter_intrin_sse2.c',
+    'libvpx/vpx_dsp/x86/post_proc_sse2.c',
+    'libvpx/vpx_dsp/x86/quantize_avx.c',
+    'libvpx/vpx_dsp/x86/quantize_avx2.c',
+    'libvpx/vpx_dsp/x86/quantize_sse2.c',
+    'libvpx/vpx_dsp/x86/quantize_ssse3.c',
+    'libvpx/vpx_dsp/x86/sad4d_avx2.c',
+    'libvpx/vpx_dsp/x86/sad4d_sse2.asm',
+    'libvpx/vpx_dsp/x86/sad_avx2.c',
+    'libvpx/vpx_dsp/x86/sad_sse2.asm',
+    'libvpx/vpx_dsp/x86/sse_avx2.c',
+    'libvpx/vpx_dsp/x86/sse_sse4.c',
+    'libvpx/vpx_dsp/x86/ssim_opt_x86_64.asm',
+    'libvpx/vpx_dsp/x86/subpel_variance_sse2.asm',
+    'libvpx/vpx_dsp/x86/subtract_avx2.c',
+    'libvpx/vpx_dsp/x86/subtract_sse2.asm',
+    'libvpx/vpx_dsp/x86/sum_squares_sse2.c',
+    'libvpx/vpx_dsp/x86/variance_avx2.c',
+    'libvpx/vpx_dsp/x86/variance_sse2.c',
+    'libvpx/vpx_dsp/x86/vpx_convolve_copy_sse2.asm',
+    'libvpx/vpx_dsp/x86/vpx_subpixel_4t_intrin_sse2.c',
+    'libvpx/vpx_dsp/x86/vpx_subpixel_8t_intrin_avx2.c',
+    'libvpx/vpx_dsp/x86/vpx_subpixel_8t_intrin_ssse3.c',
+    'libvpx/vpx_dsp/x86/vpx_subpixel_8t_sse2.asm',
+    'libvpx/vpx_dsp/x86/vpx_subpixel_8t_ssse3.asm',
+    'libvpx/vpx_dsp/x86/vpx_subpixel_bilinear_sse2.asm',
+    'libvpx/vpx_dsp/x86/vpx_subpixel_bilinear_ssse3.asm',
+    'libvpx/vpx_mem/vpx_mem.c',
+    'libvpx/vpx_ports/emms_mmx.asm',
+    'libvpx/vpx_ports/float_control_word.asm',
+    'libvpx/vpx_scale/generic/gen_scalers.c',
+    'libvpx/vpx_scale/generic/vpx_scale.c',
+    'libvpx/vpx_scale/generic/yv12config.c',
+    'libvpx/vpx_scale/generic/yv12extend.c',
+    'libvpx/vpx_scale/vpx_scale_rtcd.c',
+    'libvpx/vpx_util/vpx_thread.c',
+    'libvpx/vpx_util/vpx_write_yuv_frame.c',
+],
+  'MAC_X64_EXPORTS': [
+    'libvpx/vpx/vp8.h',
+    'libvpx/vpx/vp8cx.h',
+    'libvpx/vpx/vp8dx.h',
+    'libvpx/vpx/vpx_codec.h',
+    'libvpx/vpx/vpx_decoder.h',
+    'libvpx/vpx/vpx_encoder.h',
+    'libvpx/vpx/vpx_ext_ratectrl.h',
+    'libvpx/vpx/vpx_frame_buffer.h',
+    'libvpx/vpx/vpx_image.h',
+    'libvpx/vpx/vpx_integer.h',
+    'libvpx/vpx/vpx_tpl.h',
+    'libvpx/vpx_mem/include/vpx_mem_intrnl.h',
+    'libvpx/vpx_mem/vpx_mem.h',
+    'libvpx/vpx_ports/bitops.h',
+    'libvpx/vpx_ports/compiler_attributes.h',
+    'libvpx/vpx_ports/mem.h',
+    'libvpx/vpx_ports/static_assert.h',
+    'libvpx/vpx_ports/system_state.h',
+    'libvpx/vpx_ports/vpx_timer.h',
+    'libvpx/vpx_ports/x86.h',
+    'libvpx/vpx_scale/vpx_scale.h',
+    'libvpx/vpx_scale/yv12config.h',
+],
+  'MAC_X64_SOURCES': [
+    'libvpx/../config/mac/x64/vpx_config.c',
+    'libvpx/vp8/common/alloccommon.c',
+    'libvpx/vp8/common/blockd.c',
+    'libvpx/vp8/common/dequantize.c',
+    'libvpx/vp8/common/entropy.c',
+    'libvpx/vp8/common/entropymode.c',
+    'libvpx/vp8/common/entropymv.c',
+    'libvpx/vp8/common/extend.c',
+    'libvpx/vp8/common/filter.c',
+    'libvpx/vp8/common/findnearmv.c',
+    'libvpx/vp8/common/generic/systemdependent.c',
+    'libvpx/vp8/common/idct_blk.c',
+    'libvpx/vp8/common/idctllm.c',
+    'libvpx/vp8/common/loopfilter_filters.c',
+    'libvpx/vp8/common/mbpitch.c',
+    'libvpx/vp8/common/mfqe.c',
+    'libvpx/vp8/common/modecont.c',
+    'libvpx/vp8/common/postproc.c',
+    'libvpx/vp8/common/quant_common.c',
+    'libvpx/vp8/common/reconinter.c',
+    'libvpx/vp8/common/reconintra.c',
+    'libvpx/vp8/common/reconintra4x4.c',
+    'libvpx/vp8/common/rtcd.c',
+    'libvpx/vp8/common/setupintrarecon.c',
+    'libvpx/vp8/common/swapyv12buffer.c',
+    'libvpx/vp8/common/treecoder.c',
+    'libvpx/vp8/common/vp8_loopfilter.c',
+    'libvpx/vp8/common/vp8_skin_detection.c',
+    'libvpx/vp8/common/x86/bilinear_filter_sse2.c',
+    'libvpx/vp8/common/x86/dequantize_mmx.asm',
+    'libvpx/vp8/common/x86/idct_blk_mmx.c',
+    'libvpx/vp8/common/x86/idct_blk_sse2.c',
+    'libvpx/vp8/common/x86/idctllm_mmx.asm',
+    'libvpx/vp8/common/x86/idctllm_sse2.asm',
+    'libvpx/vp8/common/x86/iwalsh_sse2.asm',
+    'libvpx/vp8/common/x86/loopfilter_block_sse2_x86_64.asm',
+    'libvpx/vp8/common/x86/loopfilter_sse2.asm',
+    'libvpx/vp8/common/x86/loopfilter_x86.c',
+    'libvpx/vp8/common/x86/mfqe_sse2.asm',
+    'libvpx/vp8/common/x86/recon_mmx.asm',
+    'libvpx/vp8/common/x86/recon_sse2.asm',
+    'libvpx/vp8/common/x86/subpixel_mmx.asm',
+    'libvpx/vp8/common/x86/subpixel_sse2.asm',
+    'libvpx/vp8/common/x86/subpixel_ssse3.asm',
+    'libvpx/vp8/common/x86/vp8_asm_stubs.c',
+    'libvpx/vp8/decoder/dboolhuff.c',
+    'libvpx/vp8/decoder/decodeframe.c',
+    'libvpx/vp8/decoder/decodemv.c',
+    'libvpx/vp8/decoder/detokenize.c',
+    'libvpx/vp8/decoder/onyxd_if.c',
+    'libvpx/vp8/decoder/threading.c',
+    'libvpx/vp8/encoder/bitstream.c',
+    'libvpx/vp8/encoder/boolhuff.c',
+    'libvpx/vp8/encoder/copy_c.c',
+    'libvpx/vp8/encoder/dct.c',
+    'libvpx/vp8/encoder/denoising.c',
+    'libvpx/vp8/encoder/encodeframe.c',
+    'libvpx/vp8/encoder/encodeintra.c',
+    'libvpx/vp8/encoder/encodemb.c',
+    'libvpx/vp8/encoder/encodemv.c',
+    'libvpx/vp8/encoder/ethreading.c',
+    'libvpx/vp8/encoder/firstpass.c',
+    'libvpx/vp8/encoder/lookahead.c',
+    'libvpx/vp8/encoder/mcomp.c',
+    'libvpx/vp8/encoder/modecosts.c',
+    'libvpx/vp8/encoder/mr_dissim.c',
+    'libvpx/vp8/encoder/onyx_if.c',
+    'libvpx/vp8/encoder/pickinter.c',
+    'libvpx/vp8/encoder/picklpf.c',
+    'libvpx/vp8/encoder/ratectrl.c',
+    'libvpx/vp8/encoder/rdopt.c',
+    'libvpx/vp8/encoder/segmentation.c',
+    'libvpx/vp8/encoder/temporal_filter.c',
+    'libvpx/vp8/encoder/tokenize.c',
+    'libvpx/vp8/encoder/treewriter.c',
+    'libvpx/vp8/encoder/vp8_quantize.c',
+    'libvpx/vp8/encoder/x86/block_error_sse2.asm',
+    'libvpx/vp8/encoder/x86/copy_sse2.asm',
+    'libvpx/vp8/encoder/x86/copy_sse3.asm',
+    'libvpx/vp8/encoder/x86/dct_sse2.asm',
+    'libvpx/vp8/encoder/x86/denoising_sse2.c',
+    'libvpx/vp8/encoder/x86/fwalsh_sse2.asm',
+    'libvpx/vp8/encoder/x86/quantize_sse4.c',
+    'libvpx/vp8/encoder/x86/temporal_filter_apply_sse2.asm',
+    'libvpx/vp8/encoder/x86/vp8_enc_stubs_sse2.c',
+    'libvpx/vp8/encoder/x86/vp8_quantize_sse2.c',
+    'libvpx/vp8/encoder/x86/vp8_quantize_ssse3.c',
+    'libvpx/vp8/vp8_cx_iface.c',
+    'libvpx/vp8/vp8_dx_iface.c',
+    'libvpx/vp9/common/vp9_alloccommon.c',
+    'libvpx/vp9/common/vp9_blockd.c',
+    'libvpx/vp9/common/vp9_common_data.c',
+    'libvpx/vp9/common/vp9_entropy.c',
+    'libvpx/vp9/common/vp9_entropymode.c',
+    'libvpx/vp9/common/vp9_entropymv.c',
+    'libvpx/vp9/common/vp9_filter.c',
+    'libvpx/vp9/common/vp9_frame_buffers.c',
+    'libvpx/vp9/common/vp9_idct.c',
+    'libvpx/vp9/common/vp9_loopfilter.c',
+    'libvpx/vp9/common/vp9_mfqe.c',
+    'libvpx/vp9/common/vp9_mvref_common.c',
+    'libvpx/vp9/common/vp9_postproc.c',
+    'libvpx/vp9/common/vp9_pred_common.c',
+    'libvpx/vp9/common/vp9_quant_common.c',
+    'libvpx/vp9/common/vp9_reconinter.c',
+    'libvpx/vp9/common/vp9_reconintra.c',
+    'libvpx/vp9/common/vp9_rtcd.c',
+    'libvpx/vp9/common/vp9_scale.c',
+    'libvpx/vp9/common/vp9_scan.c',
+    'libvpx/vp9/common/vp9_seg_common.c',
+    'libvpx/vp9/common/vp9_thread_common.c',
+    'libvpx/vp9/common/vp9_tile_common.c',
+    'libvpx/vp9/common/x86/vp9_idct_intrin_sse2.c',
+    'libvpx/vp9/common/x86/vp9_mfqe_sse2.asm',
+    'libvpx/vp9/decoder/vp9_decodeframe.c',
+    'libvpx/vp9/decoder/vp9_decodemv.c',
+    'libvpx/vp9/decoder/vp9_decoder.c',
+    'libvpx/vp9/decoder/vp9_detokenize.c',
+    'libvpx/vp9/decoder/vp9_dsubexp.c',
+    'libvpx/vp9/decoder/vp9_job_queue.c',
+    'libvpx/vp9/encoder/vp9_alt_ref_aq.c',
+    'libvpx/vp9/encoder/vp9_aq_360.c',
+    'libvpx/vp9/encoder/vp9_aq_complexity.c',
+    'libvpx/vp9/encoder/vp9_aq_cyclicrefresh.c',
+    'libvpx/vp9/encoder/vp9_aq_variance.c',
+    'libvpx/vp9/encoder/vp9_bitstream.c',
+    'libvpx/vp9/encoder/vp9_context_tree.c',
+    'libvpx/vp9/encoder/vp9_cost.c',
+    'libvpx/vp9/encoder/vp9_dct.c',
+    'libvpx/vp9/encoder/vp9_encodeframe.c',
+    'libvpx/vp9/encoder/vp9_encodemb.c',
+    'libvpx/vp9/encoder/vp9_encodemv.c',
+    'libvpx/vp9/encoder/vp9_encoder.c',
+    'libvpx/vp9/encoder/vp9_ethread.c',
+    'libvpx/vp9/encoder/vp9_ext_ratectrl.c',
+    'libvpx/vp9/encoder/vp9_extend.c',
+    'libvpx/vp9/encoder/vp9_firstpass.c',
+    'libvpx/vp9/encoder/vp9_frame_scale.c',
+    'libvpx/vp9/encoder/vp9_lookahead.c',
+    'libvpx/vp9/encoder/vp9_mbgraph.c',
+    'libvpx/vp9/encoder/vp9_mcomp.c',
+    'libvpx/vp9/encoder/vp9_multi_thread.c',
+    'libvpx/vp9/encoder/vp9_noise_estimate.c',
+    'libvpx/vp9/encoder/vp9_picklpf.c',
+    'libvpx/vp9/encoder/vp9_pickmode.c',
+    'libvpx/vp9/encoder/vp9_quantize.c',
+    'libvpx/vp9/encoder/vp9_ratectrl.c',
+    'libvpx/vp9/encoder/vp9_rd.c',
+    'libvpx/vp9/encoder/vp9_rdopt.c',
+    'libvpx/vp9/encoder/vp9_resize.c',
+    'libvpx/vp9/encoder/vp9_segmentation.c',
+    'libvpx/vp9/encoder/vp9_skin_detection.c',
+    'libvpx/vp9/encoder/vp9_speed_features.c',
+    'libvpx/vp9/encoder/vp9_subexp.c',
+    'libvpx/vp9/encoder/vp9_svc_layercontext.c',
+    'libvpx/vp9/encoder/vp9_temporal_filter.c',
+    'libvpx/vp9/encoder/vp9_tokenize.c',
+    'libvpx/vp9/encoder/vp9_tpl_model.c',
+    'libvpx/vp9/encoder/vp9_treewriter.c',
+    'libvpx/vp9/encoder/x86/temporal_filter_sse4.c',
+    'libvpx/vp9/encoder/x86/vp9_dct_intrin_sse2.c',
+    'libvpx/vp9/encoder/x86/vp9_dct_sse2.asm',
+    'libvpx/vp9/encoder/x86/vp9_error_avx2.c',
+    'libvpx/vp9/encoder/x86/vp9_error_sse2.asm',
+    'libvpx/vp9/encoder/x86/vp9_frame_scale_ssse3.c',
+    'libvpx/vp9/encoder/x86/vp9_quantize_avx2.c',
+    'libvpx/vp9/encoder/x86/vp9_quantize_sse2.c',
+    'libvpx/vp9/encoder/x86/vp9_quantize_ssse3.c',
+    'libvpx/vp9/vp9_cx_iface.c',
+    'libvpx/vp9/vp9_dx_iface.c',
+    'libvpx/vp9/vp9_iface_common.c',
+    'libvpx/vpx/src/vpx_codec.c',
+    'libvpx/vpx/src/vpx_decoder.c',
+    'libvpx/vpx/src/vpx_encoder.c',
+    'libvpx/vpx/src/vpx_image.c',
+    'libvpx/vpx/src/vpx_tpl.c',
+    'libvpx/vpx_dsp/add_noise.c',
+    'libvpx/vpx_dsp/avg.c',
+    'libvpx/vpx_dsp/bitreader.c',
+    'libvpx/vpx_dsp/bitreader_buffer.c',
+    'libvpx/vpx_dsp/bitwriter.c',
+    'libvpx/vpx_dsp/bitwriter_buffer.c',
+    'libvpx/vpx_dsp/deblock.c',
+    'libvpx/vpx_dsp/fwd_txfm.c',
+    'libvpx/vpx_dsp/intrapred.c',
+    'libvpx/vpx_dsp/inv_txfm.c',
+    'libvpx/vpx_dsp/loopfilter.c',
+    'libvpx/vpx_dsp/prob.c',
+    'libvpx/vpx_dsp/psnr.c',
+    'libvpx/vpx_dsp/quantize.c',
+    'libvpx/vpx_dsp/sad.c',
+    'libvpx/vpx_dsp/skin_detection.c',
+    'libvpx/vpx_dsp/sse.c',
+    'libvpx/vpx_dsp/subtract.c',
+    'libvpx/vpx_dsp/sum_squares.c',
+    'libvpx/vpx_dsp/variance.c',
+    'libvpx/vpx_dsp/vpx_convolve.c',
+    'libvpx/vpx_dsp/vpx_dsp_rtcd.c',
+    'libvpx/vpx_dsp/x86/add_noise_sse2.asm',
+    'libvpx/vpx_dsp/x86/avg_intrin_avx2.c',
+    'libvpx/vpx_dsp/x86/avg_intrin_sse2.c',
+    'libvpx/vpx_dsp/x86/avg_pred_avx2.c',
+    'libvpx/vpx_dsp/x86/avg_pred_sse2.c',
+    'libvpx/vpx_dsp/x86/avg_ssse3_x86_64.asm',
+    'libvpx/vpx_dsp/x86/deblock_sse2.asm',
+    'libvpx/vpx_dsp/x86/fwd_txfm_avx2.c',
+    'libvpx/vpx_dsp/x86/fwd_txfm_sse2.c',
+    'libvpx/vpx_dsp/x86/fwd_txfm_ssse3_x86_64.asm',
+    'libvpx/vpx_dsp/x86/intrapred_sse2.asm',
+    'libvpx/vpx_dsp/x86/intrapred_ssse3.asm',
+    'libvpx/vpx_dsp/x86/inv_txfm_avx2.c',
+    'libvpx/vpx_dsp/x86/inv_txfm_sse2.c',
+    'libvpx/vpx_dsp/x86/inv_txfm_ssse3.c',
+    'libvpx/vpx_dsp/x86/inv_wht_sse2.asm',
+    'libvpx/vpx_dsp/x86/loopfilter_avx2.c',
+    'libvpx/vpx_dsp/x86/loopfilter_intrin_sse2.c',
+    'libvpx/vpx_dsp/x86/post_proc_sse2.c',
+    'libvpx/vpx_dsp/x86/quantize_avx.c',
+    'libvpx/vpx_dsp/x86/quantize_avx2.c',
+    'libvpx/vpx_dsp/x86/quantize_sse2.c',
+    'libvpx/vpx_dsp/x86/quantize_ssse3.c',
+    'libvpx/vpx_dsp/x86/sad4d_avx2.c',
+    'libvpx/vpx_dsp/x86/sad4d_sse2.asm',
+    'libvpx/vpx_dsp/x86/sad_avx2.c',
+    'libvpx/vpx_dsp/x86/sad_sse2.asm',
+    'libvpx/vpx_dsp/x86/sse_avx2.c',
+    'libvpx/vpx_dsp/x86/sse_sse4.c',
+    'libvpx/vpx_dsp/x86/ssim_opt_x86_64.asm',
+    'libvpx/vpx_dsp/x86/subpel_variance_sse2.asm',
+    'libvpx/vpx_dsp/x86/subtract_avx2.c',
+    'libvpx/vpx_dsp/x86/subtract_sse2.asm',
+    'libvpx/vpx_dsp/x86/sum_squares_sse2.c',
+    'libvpx/vpx_dsp/x86/variance_avx2.c',
+    'libvpx/vpx_dsp/x86/variance_sse2.c',
+    'libvpx/vpx_dsp/x86/vpx_convolve_copy_sse2.asm',
+    'libvpx/vpx_dsp/x86/vpx_subpixel_4t_intrin_sse2.c',
+    'libvpx/vpx_dsp/x86/vpx_subpixel_8t_intrin_avx2.c',
+    'libvpx/vpx_dsp/x86/vpx_subpixel_8t_intrin_ssse3.c',
+    'libvpx/vpx_dsp/x86/vpx_subpixel_8t_sse2.asm',
+    'libvpx/vpx_dsp/x86/vpx_subpixel_8t_ssse3.asm',
+    'libvpx/vpx_dsp/x86/vpx_subpixel_bilinear_sse2.asm',
+    'libvpx/vpx_dsp/x86/vpx_subpixel_bilinear_ssse3.asm',
+    'libvpx/vpx_mem/vpx_mem.c',
+    'libvpx/vpx_ports/emms_mmx.asm',
+    'libvpx/vpx_ports/float_control_word.asm',
+    'libvpx/vpx_scale/generic/gen_scalers.c',
+    'libvpx/vpx_scale/generic/vpx_scale.c',
+    'libvpx/vpx_scale/generic/yv12config.c',
+    'libvpx/vpx_scale/generic/yv12extend.c',
+    'libvpx/vpx_scale/vpx_scale_rtcd.c',
+    'libvpx/vpx_util/vpx_thread.c',
+    'libvpx/vpx_util/vpx_write_yuv_frame.c',
+],
+  'WIN_X64_EXPORTS': [
+    'libvpx/vpx/vp8.h',
+    'libvpx/vpx/vp8cx.h',
+    'libvpx/vpx/vp8dx.h',
+    'libvpx/vpx/vpx_codec.h',
+    'libvpx/vpx/vpx_decoder.h',
+    'libvpx/vpx/vpx_encoder.h',
+    'libvpx/vpx/vpx_ext_ratectrl.h',
+    'libvpx/vpx/vpx_frame_buffer.h',
+    'libvpx/vpx/vpx_image.h',
+    'libvpx/vpx/vpx_integer.h',
+    'libvpx/vpx/vpx_tpl.h',
+    'libvpx/vpx_mem/include/vpx_mem_intrnl.h',
+    'libvpx/vpx_mem/vpx_mem.h',
+    'libvpx/vpx_ports/bitops.h',
+    'libvpx/vpx_ports/compiler_attributes.h',
+    'libvpx/vpx_ports/mem.h',
+    'libvpx/vpx_ports/static_assert.h',
+    'libvpx/vpx_ports/system_state.h',
+    'libvpx/vpx_ports/vpx_timer.h',
+    'libvpx/vpx_ports/x86.h',
+    'libvpx/vpx_scale/vpx_scale.h',
+    'libvpx/vpx_scale/yv12config.h',
+],
+  'WIN_X64_SOURCES': [
+    'libvpx/../config/win/x64/vpx_config.c',
     'libvpx/vp8/common/alloccommon.c',
     'libvpx/vp8/common/blockd.c',
     'libvpx/vp8/common/dequantize.c',
     'libvpx/vp8/common/entropy.c',
     'libvpx/vp8/common/entropymode.c',
     'libvpx/vp8/common/entropymv.c',
     'libvpx/vp8/common/extend.c',
     'libvpx/vp8/common/filter.c',
@@ -273,17 +830,17 @@ files = {
     'libvpx/vpx_scale/generic/gen_scalers.c',
     'libvpx/vpx_scale/generic/vpx_scale.c',
     'libvpx/vpx_scale/generic/yv12config.c',
     'libvpx/vpx_scale/generic/yv12extend.c',
     'libvpx/vpx_scale/vpx_scale_rtcd.c',
     'libvpx/vpx_util/vpx_thread.c',
     'libvpx/vpx_util/vpx_write_yuv_frame.c',
 ],
-  'IA32_EXPORTS': [
+  'LINUX_IA32_EXPORTS': [
     'libvpx/vpx/vp8.h',
     'libvpx/vpx/vp8cx.h',
     'libvpx/vpx/vp8dx.h',
     'libvpx/vpx/vpx_codec.h',
     'libvpx/vpx/vpx_decoder.h',
     'libvpx/vpx/vpx_encoder.h',
     'libvpx/vpx/vpx_ext_ratectrl.h',
     'libvpx/vpx/vpx_frame_buffer.h',
@@ -297,17 +854,564 @@ files = {
     'libvpx/vpx_ports/mem.h',
     'libvpx/vpx_ports/static_assert.h',
     'libvpx/vpx_ports/system_state.h',
     'libvpx/vpx_ports/vpx_timer.h',
     'libvpx/vpx_ports/x86.h',
     'libvpx/vpx_scale/vpx_scale.h',
     'libvpx/vpx_scale/yv12config.h',
 ],
-  'IA32_SOURCES': [
+  'LINUX_IA32_SOURCES': [
+    'libvpx/../config/linux/ia32/vpx_config.c',
+    'libvpx/vp8/common/alloccommon.c',
+    'libvpx/vp8/common/blockd.c',
+    'libvpx/vp8/common/dequantize.c',
+    'libvpx/vp8/common/entropy.c',
+    'libvpx/vp8/common/entropymode.c',
+    'libvpx/vp8/common/entropymv.c',
+    'libvpx/vp8/common/extend.c',
+    'libvpx/vp8/common/filter.c',
+    'libvpx/vp8/common/findnearmv.c',
+    'libvpx/vp8/common/generic/systemdependent.c',
+    'libvpx/vp8/common/idct_blk.c',
+    'libvpx/vp8/common/idctllm.c',
+    'libvpx/vp8/common/loopfilter_filters.c',
+    'libvpx/vp8/common/mbpitch.c',
+    'libvpx/vp8/common/mfqe.c',
+    'libvpx/vp8/common/modecont.c',
+    'libvpx/vp8/common/postproc.c',
+    'libvpx/vp8/common/quant_common.c',
+    'libvpx/vp8/common/reconinter.c',
+    'libvpx/vp8/common/reconintra.c',
+    'libvpx/vp8/common/reconintra4x4.c',
+    'libvpx/vp8/common/rtcd.c',
+    'libvpx/vp8/common/setupintrarecon.c',
+    'libvpx/vp8/common/swapyv12buffer.c',
+    'libvpx/vp8/common/treecoder.c',
+    'libvpx/vp8/common/vp8_loopfilter.c',
+    'libvpx/vp8/common/vp8_skin_detection.c',
+    'libvpx/vp8/common/x86/bilinear_filter_sse2.c',
+    'libvpx/vp8/common/x86/dequantize_mmx.asm',
+    'libvpx/vp8/common/x86/idct_blk_mmx.c',
+    'libvpx/vp8/common/x86/idct_blk_sse2.c',
+    'libvpx/vp8/common/x86/idctllm_mmx.asm',
+    'libvpx/vp8/common/x86/idctllm_sse2.asm',
+    'libvpx/vp8/common/x86/iwalsh_sse2.asm',
+    'libvpx/vp8/common/x86/loopfilter_sse2.asm',
+    'libvpx/vp8/common/x86/loopfilter_x86.c',
+    'libvpx/vp8/common/x86/mfqe_sse2.asm',
+    'libvpx/vp8/common/x86/recon_mmx.asm',
+    'libvpx/vp8/common/x86/recon_sse2.asm',
+    'libvpx/vp8/common/x86/subpixel_mmx.asm',
+    'libvpx/vp8/common/x86/subpixel_sse2.asm',
+    'libvpx/vp8/common/x86/subpixel_ssse3.asm',
+    'libvpx/vp8/common/x86/vp8_asm_stubs.c',
+    'libvpx/vp8/decoder/dboolhuff.c',
+    'libvpx/vp8/decoder/decodeframe.c',
+    'libvpx/vp8/decoder/decodemv.c',
+    'libvpx/vp8/decoder/detokenize.c',
+    'libvpx/vp8/decoder/onyxd_if.c',
+    'libvpx/vp8/decoder/threading.c',
+    'libvpx/vp8/encoder/bitstream.c',
+    'libvpx/vp8/encoder/boolhuff.c',
+    'libvpx/vp8/encoder/copy_c.c',
+    'libvpx/vp8/encoder/dct.c',
+    'libvpx/vp8/encoder/denoising.c',
+    'libvpx/vp8/encoder/encodeframe.c',
+    'libvpx/vp8/encoder/encodeintra.c',
+    'libvpx/vp8/encoder/encodemb.c',
+    'libvpx/vp8/encoder/encodemv.c',
+    'libvpx/vp8/encoder/ethreading.c',
+    'libvpx/vp8/encoder/firstpass.c',
+    'libvpx/vp8/encoder/lookahead.c',
+    'libvpx/vp8/encoder/mcomp.c',
+    'libvpx/vp8/encoder/modecosts.c',
+    'libvpx/vp8/encoder/mr_dissim.c',
+    'libvpx/vp8/encoder/onyx_if.c',
+    'libvpx/vp8/encoder/pickinter.c',
+    'libvpx/vp8/encoder/picklpf.c',
+    'libvpx/vp8/encoder/ratectrl.c',
+    'libvpx/vp8/encoder/rdopt.c',
+    'libvpx/vp8/encoder/segmentation.c',
+    'libvpx/vp8/encoder/temporal_filter.c',
+    'libvpx/vp8/encoder/tokenize.c',
+    'libvpx/vp8/encoder/treewriter.c',
+    'libvpx/vp8/encoder/vp8_quantize.c',
+    'libvpx/vp8/encoder/x86/block_error_sse2.asm',
+    'libvpx/vp8/encoder/x86/copy_sse2.asm',
+    'libvpx/vp8/encoder/x86/copy_sse3.asm',
+    'libvpx/vp8/encoder/x86/dct_sse2.asm',
+    'libvpx/vp8/encoder/x86/denoising_sse2.c',
+    'libvpx/vp8/encoder/x86/fwalsh_sse2.asm',
+    'libvpx/vp8/encoder/x86/quantize_sse4.c',
+    'libvpx/vp8/encoder/x86/temporal_filter_apply_sse2.asm',
+    'libvpx/vp8/encoder/x86/vp8_enc_stubs_sse2.c',
+    'libvpx/vp8/encoder/x86/vp8_quantize_sse2.c',
+    'libvpx/vp8/encoder/x86/vp8_quantize_ssse3.c',
+    'libvpx/vp8/vp8_cx_iface.c',
+    'libvpx/vp8/vp8_dx_iface.c',
+    'libvpx/vp9/common/vp9_alloccommon.c',
+    'libvpx/vp9/common/vp9_blockd.c',
+    'libvpx/vp9/common/vp9_common_data.c',
+    'libvpx/vp9/common/vp9_entropy.c',
+    'libvpx/vp9/common/vp9_entropymode.c',
+    'libvpx/vp9/common/vp9_entropymv.c',
+    'libvpx/vp9/common/vp9_filter.c',
+    'libvpx/vp9/common/vp9_frame_buffers.c',
+    'libvpx/vp9/common/vp9_idct.c',
+    'libvpx/vp9/common/vp9_loopfilter.c',
+    'libvpx/vp9/common/vp9_mfqe.c',
+    'libvpx/vp9/common/vp9_mvref_common.c',
+    'libvpx/vp9/common/vp9_postproc.c',
+    'libvpx/vp9/common/vp9_pred_common.c',
+    'libvpx/vp9/common/vp9_quant_common.c',
+    'libvpx/vp9/common/vp9_reconinter.c',
+    'libvpx/vp9/common/vp9_reconintra.c',
+    'libvpx/vp9/common/vp9_rtcd.c',
+    'libvpx/vp9/common/vp9_scale.c',
+    'libvpx/vp9/common/vp9_scan.c',
+    'libvpx/vp9/common/vp9_seg_common.c',
+    'libvpx/vp9/common/vp9_thread_common.c',
+    'libvpx/vp9/common/vp9_tile_common.c',
+    'libvpx/vp9/common/x86/vp9_idct_intrin_sse2.c',
+    'libvpx/vp9/common/x86/vp9_mfqe_sse2.asm',
+    'libvpx/vp9/decoder/vp9_decodeframe.c',
+    'libvpx/vp9/decoder/vp9_decodemv.c',
+    'libvpx/vp9/decoder/vp9_decoder.c',
+    'libvpx/vp9/decoder/vp9_detokenize.c',
+    'libvpx/vp9/decoder/vp9_dsubexp.c',
+    'libvpx/vp9/decoder/vp9_job_queue.c',
+    'libvpx/vp9/encoder/vp9_alt_ref_aq.c',
+    'libvpx/vp9/encoder/vp9_aq_360.c',
+    'libvpx/vp9/encoder/vp9_aq_complexity.c',
+    'libvpx/vp9/encoder/vp9_aq_cyclicrefresh.c',
+    'libvpx/vp9/encoder/vp9_aq_variance.c',
+    'libvpx/vp9/encoder/vp9_bitstream.c',
+    'libvpx/vp9/encoder/vp9_context_tree.c',
+    'libvpx/vp9/encoder/vp9_cost.c',
+    'libvpx/vp9/encoder/vp9_dct.c',
+    'libvpx/vp9/encoder/vp9_encodeframe.c',
+    'libvpx/vp9/encoder/vp9_encodemb.c',
+    'libvpx/vp9/encoder/vp9_encodemv.c',
+    'libvpx/vp9/encoder/vp9_encoder.c',
+    'libvpx/vp9/encoder/vp9_ethread.c',
+    'libvpx/vp9/encoder/vp9_ext_ratectrl.c',
+    'libvpx/vp9/encoder/vp9_extend.c',
+    'libvpx/vp9/encoder/vp9_firstpass.c',
+    'libvpx/vp9/encoder/vp9_frame_scale.c',
+    'libvpx/vp9/encoder/vp9_lookahead.c',
+    'libvpx/vp9/encoder/vp9_mbgraph.c',
+    'libvpx/vp9/encoder/vp9_mcomp.c',
+    'libvpx/vp9/encoder/vp9_multi_thread.c',
+    'libvpx/vp9/encoder/vp9_noise_estimate.c',
+    'libvpx/vp9/encoder/vp9_picklpf.c',
+    'libvpx/vp9/encoder/vp9_pickmode.c',
+    'libvpx/vp9/encoder/vp9_quantize.c',
+    'libvpx/vp9/encoder/vp9_ratectrl.c',
+    'libvpx/vp9/encoder/vp9_rd.c',
+    'libvpx/vp9/encoder/vp9_rdopt.c',
+    'libvpx/vp9/encoder/vp9_resize.c',
+    'libvpx/vp9/encoder/vp9_segmentation.c',
+    'libvpx/vp9/encoder/vp9_skin_detection.c',
+    'libvpx/vp9/encoder/vp9_speed_features.c',
+    'libvpx/vp9/encoder/vp9_subexp.c',
+    'libvpx/vp9/encoder/vp9_svc_layercontext.c',
+    'libvpx/vp9/encoder/vp9_temporal_filter.c',
+    'libvpx/vp9/encoder/vp9_tokenize.c',
+    'libvpx/vp9/encoder/vp9_tpl_model.c',
+    'libvpx/vp9/encoder/vp9_treewriter.c',
+    'libvpx/vp9/encoder/x86/temporal_filter_sse4.c',
+    'libvpx/vp9/encoder/x86/vp9_dct_intrin_sse2.c',
+    'libvpx/vp9/encoder/x86/vp9_dct_sse2.asm',
+    'libvpx/vp9/encoder/x86/vp9_error_avx2.c',
+    'libvpx/vp9/encoder/x86/vp9_error_sse2.asm',
+    'libvpx/vp9/encoder/x86/vp9_frame_scale_ssse3.c',
+    'libvpx/vp9/encoder/x86/vp9_quantize_avx2.c',
+    'libvpx/vp9/encoder/x86/vp9_quantize_sse2.c',
+    'libvpx/vp9/encoder/x86/vp9_quantize_ssse3.c',
+    'libvpx/vp9/vp9_cx_iface.c',
+    'libvpx/vp9/vp9_dx_iface.c',
+    'libvpx/vp9/vp9_iface_common.c',
+    'libvpx/vpx/src/vpx_codec.c',
+    'libvpx/vpx/src/vpx_decoder.c',
+    'libvpx/vpx/src/vpx_encoder.c',
+    'libvpx/vpx/src/vpx_image.c',
+    'libvpx/vpx/src/vpx_tpl.c',
+    'libvpx/vpx_dsp/add_noise.c',
+    'libvpx/vpx_dsp/avg.c',
+    'libvpx/vpx_dsp/bitreader.c',
+    'libvpx/vpx_dsp/bitreader_buffer.c',
+    'libvpx/vpx_dsp/bitwriter.c',
+    'libvpx/vpx_dsp/bitwriter_buffer.c',
+    'libvpx/vpx_dsp/deblock.c',
+    'libvpx/vpx_dsp/fwd_txfm.c',
+    'libvpx/vpx_dsp/intrapred.c',
+    'libvpx/vpx_dsp/inv_txfm.c',
+    'libvpx/vpx_dsp/loopfilter.c',
+    'libvpx/vpx_dsp/prob.c',
+    'libvpx/vpx_dsp/psnr.c',
+    'libvpx/vpx_dsp/quantize.c',
+    'libvpx/vpx_dsp/sad.c',
+    'libvpx/vpx_dsp/skin_detection.c',
+    'libvpx/vpx_dsp/sse.c',
+    'libvpx/vpx_dsp/subtract.c',
+    'libvpx/vpx_dsp/sum_squares.c',
+    'libvpx/vpx_dsp/variance.c',
+    'libvpx/vpx_dsp/vpx_convolve.c',
+    'libvpx/vpx_dsp/vpx_dsp_rtcd.c',
+    'libvpx/vpx_dsp/x86/add_noise_sse2.asm',
+    'libvpx/vpx_dsp/x86/avg_intrin_avx2.c',
+    'libvpx/vpx_dsp/x86/avg_intrin_sse2.c',
+    'libvpx/vpx_dsp/x86/avg_pred_avx2.c',
+    'libvpx/vpx_dsp/x86/avg_pred_sse2.c',
+    'libvpx/vpx_dsp/x86/deblock_sse2.asm',
+    'libvpx/vpx_dsp/x86/fwd_txfm_avx2.c',
+    'libvpx/vpx_dsp/x86/fwd_txfm_sse2.c',
+    'libvpx/vpx_dsp/x86/intrapred_sse2.asm',
+    'libvpx/vpx_dsp/x86/intrapred_ssse3.asm',
+    'libvpx/vpx_dsp/x86/inv_txfm_avx2.c',
+    'libvpx/vpx_dsp/x86/inv_txfm_sse2.c',
+    'libvpx/vpx_dsp/x86/inv_txfm_ssse3.c',
+    'libvpx/vpx_dsp/x86/inv_wht_sse2.asm',
+    'libvpx/vpx_dsp/x86/loopfilter_avx2.c',
+    'libvpx/vpx_dsp/x86/loopfilter_intrin_sse2.c',
+    'libvpx/vpx_dsp/x86/post_proc_sse2.c',
+    'libvpx/vpx_dsp/x86/quantize_avx.c',
+    'libvpx/vpx_dsp/x86/quantize_avx2.c',
+    'libvpx/vpx_dsp/x86/quantize_sse2.c',
+    'libvpx/vpx_dsp/x86/quantize_ssse3.c',
+    'libvpx/vpx_dsp/x86/sad4d_avx2.c',
+    'libvpx/vpx_dsp/x86/sad4d_sse2.asm',
+    'libvpx/vpx_dsp/x86/sad_avx2.c',
+    'libvpx/vpx_dsp/x86/sad_sse2.asm',
+    'libvpx/vpx_dsp/x86/sse_avx2.c',
+    'libvpx/vpx_dsp/x86/sse_sse4.c',
+    'libvpx/vpx_dsp/x86/subpel_variance_sse2.asm',
+    'libvpx/vpx_dsp/x86/subtract_avx2.c',
+    'libvpx/vpx_dsp/x86/subtract_sse2.asm',
+    'libvpx/vpx_dsp/x86/sum_squares_sse2.c',
+    'libvpx/vpx_dsp/x86/variance_avx2.c',
+    'libvpx/vpx_dsp/x86/variance_sse2.c',
+    'libvpx/vpx_dsp/x86/vpx_convolve_copy_sse2.asm',
+    'libvpx/vpx_dsp/x86/vpx_subpixel_4t_intrin_sse2.c',
+    'libvpx/vpx_dsp/x86/vpx_subpixel_8t_intrin_avx2.c',
+    'libvpx/vpx_dsp/x86/vpx_subpixel_8t_intrin_ssse3.c',
+    'libvpx/vpx_dsp/x86/vpx_subpixel_8t_sse2.asm',
+    'libvpx/vpx_dsp/x86/vpx_subpixel_8t_ssse3.asm',
+    'libvpx/vpx_dsp/x86/vpx_subpixel_bilinear_sse2.asm',
+    'libvpx/vpx_dsp/x86/vpx_subpixel_bilinear_ssse3.asm',
+    'libvpx/vpx_mem/vpx_mem.c',
+    'libvpx/vpx_ports/emms_mmx.c',
+    'libvpx/vpx_scale/generic/gen_scalers.c',
+    'libvpx/vpx_scale/generic/vpx_scale.c',
+    'libvpx/vpx_scale/generic/yv12config.c',
+    'libvpx/vpx_scale/generic/yv12extend.c',
+    'libvpx/vpx_scale/vpx_scale_rtcd.c',
+    'libvpx/vpx_util/vpx_thread.c',
+    'libvpx/vpx_util/vpx_write_yuv_frame.c',
+],
+  'MAC_IA32_EXPORTS': [
+    'libvpx/vpx/vp8.h',
+    'libvpx/vpx/vp8cx.h',
+    'libvpx/vpx/vp8dx.h',
+    'libvpx/vpx/vpx_codec.h',
+    'libvpx/vpx/vpx_decoder.h',
+    'libvpx/vpx/vpx_encoder.h',
+    'libvpx/vpx/vpx_ext_ratectrl.h',
+    'libvpx/vpx/vpx_frame_buffer.h',
+    'libvpx/vpx/vpx_image.h',
+    'libvpx/vpx/vpx_integer.h',
+    'libvpx/vpx/vpx_tpl.h',
+    'libvpx/vpx_mem/include/vpx_mem_intrnl.h',
+    'libvpx/vpx_mem/vpx_mem.h',
+    'libvpx/vpx_ports/bitops.h',
+    'libvpx/vpx_ports/compiler_attributes.h',
+    'libvpx/vpx_ports/mem.h',
+    'libvpx/vpx_ports/static_assert.h',
+    'libvpx/vpx_ports/system_state.h',
+    'libvpx/vpx_ports/vpx_timer.h',
+    'libvpx/vpx_ports/x86.h',
+    'libvpx/vpx_scale/vpx_scale.h',
+    'libvpx/vpx_scale/yv12config.h',
+],
+  'MAC_IA32_SOURCES': [
+    'libvpx/../config/mac/ia32/vpx_config.c',
+    'libvpx/vp8/common/alloccommon.c',
+    'libvpx/vp8/common/blockd.c',
+    'libvpx/vp8/common/dequantize.c',
+    'libvpx/vp8/common/entropy.c',
+    'libvpx/vp8/common/entropymode.c',
+    'libvpx/vp8/common/entropymv.c',
+    'libvpx/vp8/common/extend.c',
+    'libvpx/vp8/common/filter.c',
+    'libvpx/vp8/common/findnearmv.c',
+    'libvpx/vp8/common/generic/systemdependent.c',
+    'libvpx/vp8/common/idct_blk.c',
+    'libvpx/vp8/common/idctllm.c',
+    'libvpx/vp8/common/loopfilter_filters.c',
+    'libvpx/vp8/common/mbpitch.c',
+    'libvpx/vp8/common/mfqe.c',
+    'libvpx/vp8/common/modecont.c',
+    'libvpx/vp8/common/postproc.c',
+    'libvpx/vp8/common/quant_common.c',
+    'libvpx/vp8/common/reconinter.c',
+    'libvpx/vp8/common/reconintra.c',
+    'libvpx/vp8/common/reconintra4x4.c',
+    'libvpx/vp8/common/rtcd.c',
+    'libvpx/vp8/common/setupintrarecon.c',
+    'libvpx/vp8/common/swapyv12buffer.c',
+    'libvpx/vp8/common/treecoder.c',
+    'libvpx/vp8/common/vp8_loopfilter.c',
+    'libvpx/vp8/common/vp8_skin_detection.c',
+    'libvpx/vp8/common/x86/bilinear_filter_sse2.c',
+    'libvpx/vp8/common/x86/dequantize_mmx.asm',
+    'libvpx/vp8/common/x86/idct_blk_mmx.c',
+    'libvpx/vp8/common/x86/idct_blk_sse2.c',
+    'libvpx/vp8/common/x86/idctllm_mmx.asm',
+    'libvpx/vp8/common/x86/idctllm_sse2.asm',
+    'libvpx/vp8/common/x86/iwalsh_sse2.asm',
+    'libvpx/vp8/common/x86/loopfilter_sse2.asm',
+    'libvpx/vp8/common/x86/loopfilter_x86.c',
+    'libvpx/vp8/common/x86/mfqe_sse2.asm',
+    'libvpx/vp8/common/x86/recon_mmx.asm',
+    'libvpx/vp8/common/x86/recon_sse2.asm',
+    'libvpx/vp8/common/x86/subpixel_mmx.asm',
+    'libvpx/vp8/common/x86/subpixel_sse2.asm',
+    'libvpx/vp8/common/x86/subpixel_ssse3.asm',
+    'libvpx/vp8/common/x86/vp8_asm_stubs.c',
+    'libvpx/vp8/decoder/dboolhuff.c',
+    'libvpx/vp8/decoder/decodeframe.c',
+    'libvpx/vp8/decoder/decodemv.c',
+    'libvpx/vp8/decoder/detokenize.c',
+    'libvpx/vp8/decoder/onyxd_if.c',
+    'libvpx/vp8/decoder/threading.c',
+    'libvpx/vp8/encoder/bitstream.c',
+    'libvpx/vp8/encoder/boolhuff.c',
+    'libvpx/vp8/encoder/copy_c.c',
+    'libvpx/vp8/encoder/dct.c',
+    'libvpx/vp8/encoder/denoising.c',
+    'libvpx/vp8/encoder/encodeframe.c',
+    'libvpx/vp8/encoder/encodeintra.c',
+    'libvpx/vp8/encoder/encodemb.c',
+    'libvpx/vp8/encoder/encodemv.c',
+    'libvpx/vp8/encoder/ethreading.c',
+    'libvpx/vp8/encoder/firstpass.c',
+    'libvpx/vp8/encoder/lookahead.c',
+    'libvpx/vp8/encoder/mcomp.c',
+    'libvpx/vp8/encoder/modecosts.c',
+    'libvpx/vp8/encoder/mr_dissim.c',
+    'libvpx/vp8/encoder/onyx_if.c',
+    'libvpx/vp8/encoder/pickinter.c',
+    'libvpx/vp8/encoder/picklpf.c',
+    'libvpx/vp8/encoder/ratectrl.c',
+    'libvpx/vp8/encoder/rdopt.c',
+    'libvpx/vp8/encoder/segmentation.c',
+    'libvpx/vp8/encoder/temporal_filter.c',
+    'libvpx/vp8/encoder/tokenize.c',
+    'libvpx/vp8/encoder/treewriter.c',
+    'libvpx/vp8/encoder/vp8_quantize.c',
+    'libvpx/vp8/encoder/x86/block_error_sse2.asm',
+    'libvpx/vp8/encoder/x86/copy_sse2.asm',
+    'libvpx/vp8/encoder/x86/copy_sse3.asm',
+    'libvpx/vp8/encoder/x86/dct_sse2.asm',
+    'libvpx/vp8/encoder/x86/denoising_sse2.c',
+    'libvpx/vp8/encoder/x86/fwalsh_sse2.asm',
+    'libvpx/vp8/encoder/x86/quantize_sse4.c',
+    'libvpx/vp8/encoder/x86/temporal_filter_apply_sse2.asm',
+    'libvpx/vp8/encoder/x86/vp8_enc_stubs_sse2.c',
+    'libvpx/vp8/encoder/x86/vp8_quantize_sse2.c',
+    'libvpx/vp8/encoder/x86/vp8_quantize_ssse3.c',
+    'libvpx/vp8/vp8_cx_iface.c',
+    'libvpx/vp8/vp8_dx_iface.c',
+    'libvpx/vp9/common/vp9_alloccommon.c',
+    'libvpx/vp9/common/vp9_blockd.c',
+    'libvpx/vp9/common/vp9_common_data.c',
+    'libvpx/vp9/common/vp9_entropy.c',
+    'libvpx/vp9/common/vp9_entropymode.c',
+    'libvpx/vp9/common/vp9_entropymv.c',
+    'libvpx/vp9/common/vp9_filter.c',
+    'libvpx/vp9/common/vp9_frame_buffers.c',
+    'libvpx/vp9/common/vp9_idct.c',
+    'libvpx/vp9/common/vp9_loopfilter.c',
+    'libvpx/vp9/common/vp9_mfqe.c',
+    'libvpx/vp9/common/vp9_mvref_common.c',
+    'libvpx/vp9/common/vp9_postproc.c',
+    'libvpx/vp9/common/vp9_pred_common.c',
+    'libvpx/vp9/common/vp9_quant_common.c',
+    'libvpx/vp9/common/vp9_reconinter.c',
+    'libvpx/vp9/common/vp9_reconintra.c',
+    'libvpx/vp9/common/vp9_rtcd.c',
+    'libvpx/vp9/common/vp9_scale.c',
+    'libvpx/vp9/common/vp9_scan.c',
+    'libvpx/vp9/common/vp9_seg_common.c',
+    'libvpx/vp9/common/vp9_thread_common.c',
+    'libvpx/vp9/common/vp9_tile_common.c',
+    'libvpx/vp9/common/x86/vp9_idct_intrin_sse2.c',
+    'libvpx/vp9/common/x86/vp9_mfqe_sse2.asm',
+    'libvpx/vp9/decoder/vp9_decodeframe.c',
+    'libvpx/vp9/decoder/vp9_decodemv.c',
+    'libvpx/vp9/decoder/vp9_decoder.c',
+    'libvpx/vp9/decoder/vp9_detokenize.c',
+    'libvpx/vp9/decoder/vp9_dsubexp.c',
+    'libvpx/vp9/decoder/vp9_job_queue.c',
+    'libvpx/vp9/encoder/vp9_alt_ref_aq.c',
+    'libvpx/vp9/encoder/vp9_aq_360.c',
+    'libvpx/vp9/encoder/vp9_aq_complexity.c',
+    'libvpx/vp9/encoder/vp9_aq_cyclicrefresh.c',
+    'libvpx/vp9/encoder/vp9_aq_variance.c',
+    'libvpx/vp9/encoder/vp9_bitstream.c',
+    'libvpx/vp9/encoder/vp9_context_tree.c',
+    'libvpx/vp9/encoder/vp9_cost.c',
+    'libvpx/vp9/encoder/vp9_dct.c',
+    'libvpx/vp9/encoder/vp9_encodeframe.c',
+    'libvpx/vp9/encoder/vp9_encodemb.c',
+    'libvpx/vp9/encoder/vp9_encodemv.c',
+    'libvpx/vp9/encoder/vp9_encoder.c',
+    'libvpx/vp9/encoder/vp9_ethread.c',
+    'libvpx/vp9/encoder/vp9_ext_ratectrl.c',
+    'libvpx/vp9/encoder/vp9_extend.c',
+    'libvpx/vp9/encoder/vp9_firstpass.c',
+    'libvpx/vp9/encoder/vp9_frame_scale.c',
+    'libvpx/vp9/encoder/vp9_lookahead.c',
+    'libvpx/vp9/encoder/vp9_mbgraph.c',
+    'libvpx/vp9/encoder/vp9_mcomp.c',
+    'libvpx/vp9/encoder/vp9_multi_thread.c',
+    'libvpx/vp9/encoder/vp9_noise_estimate.c',
+    'libvpx/vp9/encoder/vp9_picklpf.c',
+    'libvpx/vp9/encoder/vp9_pickmode.c',
+    'libvpx/vp9/encoder/vp9_quantize.c',
+    'libvpx/vp9/encoder/vp9_ratectrl.c',
+    'libvpx/vp9/encoder/vp9_rd.c',
+    'libvpx/vp9/encoder/vp9_rdopt.c',
+    'libvpx/vp9/encoder/vp9_resize.c',
+    'libvpx/vp9/encoder/vp9_segmentation.c',
+    'libvpx/vp9/encoder/vp9_skin_detection.c',
+    'libvpx/vp9/encoder/vp9_speed_features.c',
+    'libvpx/vp9/encoder/vp9_subexp.c',
+    'libvpx/vp9/encoder/vp9_svc_layercontext.c',
+    'libvpx/vp9/encoder/vp9_temporal_filter.c',
+    'libvpx/vp9/encoder/vp9_tokenize.c',
+    'libvpx/vp9/encoder/vp9_tpl_model.c',
+    'libvpx/vp9/encoder/vp9_treewriter.c',
+    'libvpx/vp9/encoder/x86/temporal_filter_sse4.c',
+    'libvpx/vp9/encoder/x86/vp9_dct_intrin_sse2.c',
+    'libvpx/vp9/encoder/x86/vp9_dct_sse2.asm',
+    'libvpx/vp9/encoder/x86/vp9_error_avx2.c',
+    'libvpx/vp9/encoder/x86/vp9_error_sse2.asm',
+    'libvpx/vp9/encoder/x86/vp9_frame_scale_ssse3.c',
+    'libvpx/vp9/encoder/x86/vp9_quantize_avx2.c',
+    'libvpx/vp9/encoder/x86/vp9_quantize_sse2.c',
+    'libvpx/vp9/encoder/x86/vp9_quantize_ssse3.c',
+    'libvpx/vp9/vp9_cx_iface.c',
+    'libvpx/vp9/vp9_dx_iface.c',
+    'libvpx/vp9/vp9_iface_common.c',
+    'libvpx/vpx/src/vpx_codec.c',
+    'libvpx/vpx/src/vpx_decoder.c',
+    'libvpx/vpx/src/vpx_encoder.c',
+    'libvpx/vpx/src/vpx_image.c',
+    'libvpx/vpx/src/vpx_tpl.c',
+    'libvpx/vpx_dsp/add_noise.c',
+    'libvpx/vpx_dsp/avg.c',
+    'libvpx/vpx_dsp/bitreader.c',
+    'libvpx/vpx_dsp/bitreader_buffer.c',
+    'libvpx/vpx_dsp/bitwriter.c',
+    'libvpx/vpx_dsp/bitwriter_buffer.c',
+    'libvpx/vpx_dsp/deblock.c',
+    'libvpx/vpx_dsp/fwd_txfm.c',
+    'libvpx/vpx_dsp/intrapred.c',
+    'libvpx/vpx_dsp/inv_txfm.c',
+    'libvpx/vpx_dsp/loopfilter.c',
+    'libvpx/vpx_dsp/prob.c',
+    'libvpx/vpx_dsp/psnr.c',
+    'libvpx/vpx_dsp/quantize.c',
+    'libvpx/vpx_dsp/sad.c',
+    'libvpx/vpx_dsp/skin_detection.c',
+    'libvpx/vpx_dsp/sse.c',
+    'libvpx/vpx_dsp/subtract.c',
+    'libvpx/vpx_dsp/sum_squares.c',
+    'libvpx/vpx_dsp/variance.c',
+    'libvpx/vpx_dsp/vpx_convolve.c',
+    'libvpx/vpx_dsp/vpx_dsp_rtcd.c',
+    'libvpx/vpx_dsp/x86/add_noise_sse2.asm',
+    'libvpx/vpx_dsp/x86/avg_intrin_avx2.c',
+    'libvpx/vpx_dsp/x86/avg_intrin_sse2.c',
+    'libvpx/vpx_dsp/x86/avg_pred_avx2.c',
+    'libvpx/vpx_dsp/x86/avg_pred_sse2.c',
+    'libvpx/vpx_dsp/x86/deblock_sse2.asm',
+    'libvpx/vpx_dsp/x86/fwd_txfm_avx2.c',
+    'libvpx/vpx_dsp/x86/fwd_txfm_sse2.c',
+    'libvpx/vpx_dsp/x86/intrapred_sse2.asm',
+    'libvpx/vpx_dsp/x86/intrapred_ssse3.asm',
+    'libvpx/vpx_dsp/x86/inv_txfm_avx2.c',
+    'libvpx/vpx_dsp/x86/inv_txfm_sse2.c',
+    'libvpx/vpx_dsp/x86/inv_txfm_ssse3.c',
+    'libvpx/vpx_dsp/x86/inv_wht_sse2.asm',
+    'libvpx/vpx_dsp/x86/loopfilter_avx2.c',
+    'libvpx/vpx_dsp/x86/loopfilter_intrin_sse2.c',
+    'libvpx/vpx_dsp/x86/post_proc_sse2.c',
+    'libvpx/vpx_dsp/x86/quantize_avx.c',
+    'libvpx/vpx_dsp/x86/quantize_avx2.c',
+    'libvpx/vpx_dsp/x86/quantize_sse2.c',
+    'libvpx/vpx_dsp/x86/quantize_ssse3.c',
+    'libvpx/vpx_dsp/x86/sad4d_avx2.c',
+    'libvpx/vpx_dsp/x86/sad4d_sse2.asm',
+    'libvpx/vpx_dsp/x86/sad_avx2.c',
+    'libvpx/vpx_dsp/x86/sad_sse2.asm',
+    'libvpx/vpx_dsp/x86/sse_avx2.c',
+    'libvpx/vpx_dsp/x86/sse_sse4.c',
+    'libvpx/vpx_dsp/x86/subpel_variance_sse2.asm',
+    'libvpx/vpx_dsp/x86/subtract_avx2.c',
+    'libvpx/vpx_dsp/x86/subtract_sse2.asm',
+    'libvpx/vpx_dsp/x86/sum_squares_sse2.c',
+    'libvpx/vpx_dsp/x86/variance_avx2.c',
+    'libvpx/vpx_dsp/x86/variance_sse2.c',
+    'libvpx/vpx_dsp/x86/vpx_convolve_copy_sse2.asm',
+    'libvpx/vpx_dsp/x86/vpx_subpixel_4t_intrin_sse2.c',
+    'libvpx/vpx_dsp/x86/vpx_subpixel_8t_intrin_avx2.c',
+    'libvpx/vpx_dsp/x86/vpx_subpixel_8t_intrin_ssse3.c',
+    'libvpx/vpx_dsp/x86/vpx_subpixel_8t_sse2.asm',
+    'libvpx/vpx_dsp/x86/vpx_subpixel_8t_ssse3.asm',
+    'libvpx/vpx_dsp/x86/vpx_subpixel_bilinear_sse2.asm',
+    'libvpx/vpx_dsp/x86/vpx_subpixel_bilinear_ssse3.asm',
+    'libvpx/vpx_mem/vpx_mem.c',
+    'libvpx/vpx_ports/emms_mmx.c',
+    'libvpx/vpx_scale/generic/gen_scalers.c',
+    'libvpx/vpx_scale/generic/vpx_scale.c',
+    'libvpx/vpx_scale/generic/yv12config.c',
+    'libvpx/vpx_scale/generic/yv12extend.c',
+    'libvpx/vpx_scale/vpx_scale_rtcd.c',
+    'libvpx/vpx_util/vpx_thread.c',
+    'libvpx/vpx_util/vpx_write_yuv_frame.c',
+],
+  'WIN_IA32_EXPORTS': [
+    'libvpx/vpx/vp8.h',
+    'libvpx/vpx/vp8cx.h',
+    'libvpx/vpx/vp8dx.h',
+    'libvpx/vpx/vpx_codec.h',
+    'libvpx/vpx/vpx_decoder.h',
+    'libvpx/vpx/vpx_encoder.h',
+    'libvpx/vpx/vpx_ext_ratectrl.h',
+    'libvpx/vpx/vpx_frame_buffer.h',
+    'libvpx/vpx/vpx_image.h',
+    'libvpx/vpx/vpx_integer.h',
+    'libvpx/vpx/vpx_tpl.h',
+    'libvpx/vpx_mem/include/vpx_mem_intrnl.h',
+    'libvpx/vpx_mem/vpx_mem.h',
+    'libvpx/vpx_ports/bitops.h',
+    'libvpx/vpx_ports/compiler_attributes.h',
+    'libvpx/vpx_ports/mem.h',
+    'libvpx/vpx_ports/static_assert.h',
+    'libvpx/vpx_ports/system_state.h',
+    'libvpx/vpx_ports/vpx_timer.h',
+    'libvpx/vpx_ports/x86.h',
+    'libvpx/vpx_scale/vpx_scale.h',
+    'libvpx/vpx_scale/yv12config.h',
+],
+  'WIN_IA32_SOURCES': [
+    'libvpx/../config/win/ia32/vpx_config.c',
     'libvpx/vp8/common/alloccommon.c',
     'libvpx/vp8/common/blockd.c',
     'libvpx/vp8/common/dequantize.c',
     'libvpx/vp8/common/entropy.c',
     'libvpx/vp8/common/entropymode.c',
     'libvpx/vp8/common/entropymv.c',
     'libvpx/vp8/common/extend.c',
     'libvpx/vp8/common/filter.c',
@@ -545,17 +1649,17 @@ files = {
     'libvpx/vpx_scale/generic/gen_scalers.c',
     'libvpx/vpx_scale/generic/vpx_scale.c',
     'libvpx/vpx_scale/generic/yv12config.c',
     'libvpx/vpx_scale/generic/yv12extend.c',
     'libvpx/vpx_scale/vpx_scale_rtcd.c',
     'libvpx/vpx_util/vpx_thread.c',
     'libvpx/vpx_util/vpx_write_yuv_frame.c',
 ],
-  'ARM_EXPORTS': [
+  'LINUX_ARM_EXPORTS': [
     'libvpx/vpx/vp8.h',
     'libvpx/vpx/vp8cx.h',
     'libvpx/vpx/vp8dx.h',
     'libvpx/vpx/vpx_codec.h',
     'libvpx/vpx/vpx_decoder.h',
     'libvpx/vpx/vpx_encoder.h',
     'libvpx/vpx/vpx_ext_ratectrl.h',
     'libvpx/vpx/vpx_frame_buffer.h',
@@ -570,17 +1674,18 @@ files = {
     'libvpx/vpx_ports/compiler_attributes.h',
     'libvpx/vpx_ports/mem.h',
     'libvpx/vpx_ports/static_assert.h',
     'libvpx/vpx_ports/system_state.h',
     'libvpx/vpx_ports/vpx_timer.h',
     'libvpx/vpx_scale/vpx_scale.h',
     'libvpx/vpx_scale/yv12config.h',
 ],
-  'ARM_SOURCES': [
+  'LINUX_ARM_SOURCES': [
+    'libvpx/../config/linux/arm/vpx_config.c',
     'libvpx/vp8/common/alloccommon.c',
     'libvpx/vp8/common/arm/loopfilter_arm.c',
     'libvpx/vp8/common/arm/neon/bilinearpredict_neon.c',
     'libvpx/vp8/common/arm/neon/copymem_neon.c',
     'libvpx/vp8/common/arm/neon/dc_only_idct_add_neon.c',
     'libvpx/vp8/common/arm/neon/dequant_idct_neon.c',
     'libvpx/vp8/common/arm/neon/dequantizeb_neon.c',
     'libvpx/vp8/common/arm/neon/idct_blk_neon.c',
@@ -796,17 +1901,17 @@ files = {
     'libvpx/vpx_scale/generic/gen_scalers.c',
     'libvpx/vpx_scale/generic/vpx_scale.c',
     'libvpx/vpx_scale/generic/yv12config.c',
     'libvpx/vpx_scale/generic/yv12extend.c',
     'libvpx/vpx_scale/vpx_scale_rtcd.c',
     'libvpx/vpx_util/vpx_thread.c',
     'libvpx/vpx_util/vpx_write_yuv_frame.c',
 ],
-  'ARM64_EXPORTS': [
+  'LINUX_ARM64_EXPORTS': [
     'libvpx/vpx/vp8.h',
     'libvpx/vpx/vp8cx.h',
     'libvpx/vpx/vp8dx.h',
     'libvpx/vpx/vpx_codec.h',
     'libvpx/vpx/vpx_decoder.h',
     'libvpx/vpx/vpx_encoder.h',
     'libvpx/vpx/vpx_ext_ratectrl.h',
     'libvpx/vpx/vpx_frame_buffer.h',
@@ -821,17 +1926,18 @@ files = {
     'libvpx/vpx_ports/compiler_attributes.h',
     'libvpx/vpx_ports/mem.h',
     'libvpx/vpx_ports/static_assert.h',
     'libvpx/vpx_ports/system_state.h',
     'libvpx/vpx_ports/vpx_timer.h',
     'libvpx/vpx_scale/vpx_scale.h',
     'libvpx/vpx_scale/yv12config.h',
 ],
-  'ARM64_SOURCES': [
+  'LINUX_ARM64_SOURCES': [
+    'libvpx/../config/linux/arm64/vpx_config.c',
     'libvpx/vp8/common/alloccommon.c',
     'libvpx/vp8/common/arm/loopfilter_arm.c',
     'libvpx/vp8/common/arm/neon/bilinearpredict_neon.c',
     'libvpx/vp8/common/arm/neon/copymem_neon.c',
     'libvpx/vp8/common/arm/neon/dc_only_idct_add_neon.c',
     'libvpx/vp8/common/arm/neon/dequant_idct_neon.c',
     'libvpx/vp8/common/arm/neon/dequantizeb_neon.c',
     'libvpx/vp8/common/arm/neon/idct_blk_neon.c',
@@ -929,17 +2035,16 @@ files = {
     'libvpx/vp9/decoder/vp9_decodemv.c',
     'libvpx/vp9/decoder/vp9_decoder.c',
     'libvpx/vp9/decoder/vp9_detokenize.c',
     'libvpx/vp9/decoder/vp9_dsubexp.c',
     'libvpx/vp9/decoder/vp9_job_queue.c',
     'libvpx/vp9/encoder/arm/neon/vp9_dct_neon.c',
     'libvpx/vp9/encoder/arm/neon/vp9_diamond_search_sad_neon.c',
     'libvpx/vp9/encoder/arm/neon/vp9_error_neon.c',
-    'libvpx/vp9/encoder/arm/neon/vp9_error_sve.c',
     'libvpx/vp9/encoder/arm/neon/vp9_frame_scale_neon.c',
     'libvpx/vp9/encoder/arm/neon/vp9_quantize_neon.c',
     'libvpx/vp9/encoder/vp9_aq_cyclicrefresh.c',
     'libvpx/vp9/encoder/vp9_bitstream.c',
     'libvpx/vp9/encoder/vp9_context_tree.c',
     'libvpx/vp9/encoder/vp9_cost.c',
     'libvpx/vp9/encoder/vp9_dct.c',
     'libvpx/vp9/encoder/vp9_encodeframe.c',
@@ -1002,17 +2107,261 @@ files = {
     'libvpx/vpx_dsp/arm/sad4d_neon_dotprod.c',
     'libvpx/vpx_dsp/arm/sad_neon.c',
     'libvpx/vpx_dsp/arm/sad_neon_dotprod.c',
     'libvpx/vpx_dsp/arm/sse_neon.c',
     'libvpx/vpx_dsp/arm/sse_neon_dotprod.c',
     'libvpx/vpx_dsp/arm/subpel_variance_neon.c',
     'libvpx/vpx_dsp/arm/subtract_neon.c',
     'libvpx/vpx_dsp/arm/sum_squares_neon.c',
-    'libvpx/vpx_dsp/arm/sum_squares_sve.c',
+    'libvpx/vpx_dsp/arm/variance_neon.c',
+    'libvpx/vpx_dsp/arm/variance_neon_dotprod.c',
+    'libvpx/vpx_dsp/arm/vpx_convolve8_neon.c',
+    'libvpx/vpx_dsp/arm/vpx_convolve8_neon_dotprod.c',
+    'libvpx/vpx_dsp/arm/vpx_convolve8_neon_i8mm.c',
+    'libvpx/vpx_dsp/arm/vpx_convolve_avg_neon.c',
+    'libvpx/vpx_dsp/arm/vpx_convolve_copy_neon.c',
+    'libvpx/vpx_dsp/arm/vpx_convolve_neon.c',
+    'libvpx/vpx_dsp/arm/vpx_scaled_convolve8_neon.c',
+    'libvpx/vpx_dsp/avg.c',
+    'libvpx/vpx_dsp/bitreader.c',
+    'libvpx/vpx_dsp/bitreader_buffer.c',
+    'libvpx/vpx_dsp/bitwriter.c',
+    'libvpx/vpx_dsp/bitwriter_buffer.c',
+    'libvpx/vpx_dsp/fwd_txfm.c',
+    'libvpx/vpx_dsp/intrapred.c',
+    'libvpx/vpx_dsp/inv_txfm.c',
+    'libvpx/vpx_dsp/loopfilter.c',
+    'libvpx/vpx_dsp/prob.c',
+    'libvpx/vpx_dsp/psnr.c',
+    'libvpx/vpx_dsp/quantize.c',
+    'libvpx/vpx_dsp/sad.c',
+    'libvpx/vpx_dsp/skin_detection.c',
+    'libvpx/vpx_dsp/sse.c',
+    'libvpx/vpx_dsp/subtract.c',
+    'libvpx/vpx_dsp/sum_squares.c',
+    'libvpx/vpx_dsp/variance.c',
+    'libvpx/vpx_dsp/vpx_convolve.c',
+    'libvpx/vpx_dsp/vpx_dsp_rtcd.c',
+    'libvpx/vpx_mem/vpx_mem.c',
+    'libvpx/vpx_ports/aarch64_cpudetect.c',
+    'libvpx/vpx_scale/generic/gen_scalers.c',
+    'libvpx/vpx_scale/generic/vpx_scale.c',
+    'libvpx/vpx_scale/generic/yv12config.c',
+    'libvpx/vpx_scale/generic/yv12extend.c',
+    'libvpx/vpx_scale/vpx_scale_rtcd.c',
+    'libvpx/vpx_util/vpx_thread.c',
+    'libvpx/vpx_util/vpx_write_yuv_frame.c',
+],
+  'WIN_AARCH64_EXPORTS': [
+    'libvpx/vpx/vp8.h',
+    'libvpx/vpx/vp8cx.h',
+    'libvpx/vpx/vp8dx.h',
+    'libvpx/vpx/vpx_codec.h',
+    'libvpx/vpx/vpx_decoder.h',
+    'libvpx/vpx/vpx_encoder.h',
+    'libvpx/vpx/vpx_ext_ratectrl.h',
+    'libvpx/vpx/vpx_frame_buffer.h',
+    'libvpx/vpx/vpx_image.h',
+    'libvpx/vpx/vpx_integer.h',
+    'libvpx/vpx/vpx_tpl.h',
+    'libvpx/vpx_mem/include/vpx_mem_intrnl.h',
+    'libvpx/vpx_mem/vpx_mem.h',
+    'libvpx/vpx_ports/arm.h',
+    'libvpx/vpx_ports/arm_cpudetect.h',
+    'libvpx/vpx_ports/bitops.h',
+    'libvpx/vpx_ports/compiler_attributes.h',
+    'libvpx/vpx_ports/mem.h',
+    'libvpx/vpx_ports/static_assert.h',
+    'libvpx/vpx_ports/system_state.h',
+    'libvpx/vpx_ports/vpx_timer.h',
+    'libvpx/vpx_scale/vpx_scale.h',
+    'libvpx/vpx_scale/yv12config.h',
+],
+  'WIN_AARCH64_SOURCES': [
+    'libvpx/../config/win/aarch64/vpx_config.c',
+    'libvpx/vp8/common/alloccommon.c',
+    'libvpx/vp8/common/arm/loopfilter_arm.c',
+    'libvpx/vp8/common/arm/neon/bilinearpredict_neon.c',
+    'libvpx/vp8/common/arm/neon/copymem_neon.c',
+    'libvpx/vp8/common/arm/neon/dc_only_idct_add_neon.c',
+    'libvpx/vp8/common/arm/neon/dequant_idct_neon.c',
+    'libvpx/vp8/common/arm/neon/dequantizeb_neon.c',
+    'libvpx/vp8/common/arm/neon/idct_blk_neon.c',
+    'libvpx/vp8/common/arm/neon/iwalsh_neon.c',
+    'libvpx/vp8/common/arm/neon/loopfiltersimplehorizontaledge_neon.c',
+    'libvpx/vp8/common/arm/neon/loopfiltersimpleverticaledge_neon.c',
+    'libvpx/vp8/common/arm/neon/mbloopfilter_neon.c',
+    'libvpx/vp8/common/arm/neon/shortidct4x4llm_neon.c',
+    'libvpx/vp8/common/arm/neon/sixtappredict_neon.c',
+    'libvpx/vp8/common/arm/neon/vp8_loopfilter_neon.c',
+    'libvpx/vp8/common/blockd.c',
+    'libvpx/vp8/common/dequantize.c',
+    'libvpx/vp8/common/entropy.c',
+    'libvpx/vp8/common/entropymode.c',
+    'libvpx/vp8/common/entropymv.c',
+    'libvpx/vp8/common/extend.c',
+    'libvpx/vp8/common/filter.c',
+    'libvpx/vp8/common/findnearmv.c',
+    'libvpx/vp8/common/generic/systemdependent.c',
+    'libvpx/vp8/common/idct_blk.c',
+    'libvpx/vp8/common/idctllm.c',
+    'libvpx/vp8/common/loopfilter_filters.c',
+    'libvpx/vp8/common/mbpitch.c',
+    'libvpx/vp8/common/modecont.c',
+    'libvpx/vp8/common/quant_common.c',
+    'libvpx/vp8/common/reconinter.c',
+    'libvpx/vp8/common/reconintra.c',
+    'libvpx/vp8/common/reconintra4x4.c',
+    'libvpx/vp8/common/rtcd.c',
+    'libvpx/vp8/common/setupintrarecon.c',
+    'libvpx/vp8/common/swapyv12buffer.c',
+    'libvpx/vp8/common/treecoder.c',
+    'libvpx/vp8/common/vp8_loopfilter.c',
+    'libvpx/vp8/common/vp8_skin_detection.c',
+    'libvpx/vp8/decoder/dboolhuff.c',
+    'libvpx/vp8/decoder/decodeframe.c',
+    'libvpx/vp8/decoder/decodemv.c',
+    'libvpx/vp8/decoder/detokenize.c',
+    'libvpx/vp8/decoder/onyxd_if.c',
+    'libvpx/vp8/decoder/threading.c',
+    'libvpx/vp8/encoder/arm/neon/denoising_neon.c',
+    'libvpx/vp8/encoder/arm/neon/fastquantizeb_neon.c',
+    'libvpx/vp8/encoder/arm/neon/shortfdct_neon.c',
+    'libvpx/vp8/encoder/arm/neon/vp8_shortwalsh4x4_neon.c',
+    'libvpx/vp8/encoder/bitstream.c',
+    'libvpx/vp8/encoder/boolhuff.c',
+    'libvpx/vp8/encoder/copy_c.c',
+    'libvpx/vp8/encoder/dct.c',
+    'libvpx/vp8/encoder/denoising.c',
+    'libvpx/vp8/encoder/encodeframe.c',
+    'libvpx/vp8/encoder/encodeintra.c',
+    'libvpx/vp8/encoder/encodemb.c',
+    'libvpx/vp8/encoder/encodemv.c',
+    'libvpx/vp8/encoder/ethreading.c',
+    'libvpx/vp8/encoder/lookahead.c',
+    'libvpx/vp8/encoder/mcomp.c',
+    'libvpx/vp8/encoder/modecosts.c',
+    'libvpx/vp8/encoder/mr_dissim.c',
+    'libvpx/vp8/encoder/onyx_if.c',
+    'libvpx/vp8/encoder/pickinter.c',
+    'libvpx/vp8/encoder/picklpf.c',
+    'libvpx/vp8/encoder/ratectrl.c',
+    'libvpx/vp8/encoder/rdopt.c',
+    'libvpx/vp8/encoder/segmentation.c',
+    'libvpx/vp8/encoder/tokenize.c',
+    'libvpx/vp8/encoder/treewriter.c',
+    'libvpx/vp8/encoder/vp8_quantize.c',
+    'libvpx/vp8/vp8_cx_iface.c',
+    'libvpx/vp8/vp8_dx_iface.c',
+    'libvpx/vp9/common/arm/neon/vp9_iht16x16_add_neon.c',
+    'libvpx/vp9/common/arm/neon/vp9_iht4x4_add_neon.c',
+    'libvpx/vp9/common/arm/neon/vp9_iht8x8_add_neon.c',
+    'libvpx/vp9/common/vp9_alloccommon.c',
+    'libvpx/vp9/common/vp9_blockd.c',
+    'libvpx/vp9/common/vp9_common_data.c',
+    'libvpx/vp9/common/vp9_entropy.c',
+    'libvpx/vp9/common/vp9_entropymode.c',
+    'libvpx/vp9/common/vp9_entropymv.c',
+    'libvpx/vp9/common/vp9_filter.c',
+    'libvpx/vp9/common/vp9_frame_buffers.c',
+    'libvpx/vp9/common/vp9_idct.c',
+    'libvpx/vp9/common/vp9_loopfilter.c',
+    'libvpx/vp9/common/vp9_mvref_common.c',
+    'libvpx/vp9/common/vp9_pred_common.c',
+    'libvpx/vp9/common/vp9_quant_common.c',
+    'libvpx/vp9/common/vp9_reconinter.c',
+    'libvpx/vp9/common/vp9_reconintra.c',
+    'libvpx/vp9/common/vp9_rtcd.c',
+    'libvpx/vp9/common/vp9_scale.c',
+    'libvpx/vp9/common/vp9_scan.c',
+    'libvpx/vp9/common/vp9_seg_common.c',
+    'libvpx/vp9/common/vp9_thread_common.c',
+    'libvpx/vp9/common/vp9_tile_common.c',
+    'libvpx/vp9/decoder/vp9_decodeframe.c',
+    'libvpx/vp9/decoder/vp9_decodemv.c',
+    'libvpx/vp9/decoder/vp9_decoder.c',
+    'libvpx/vp9/decoder/vp9_detokenize.c',
+    'libvpx/vp9/decoder/vp9_dsubexp.c',
+    'libvpx/vp9/decoder/vp9_job_queue.c',
+    'libvpx/vp9/encoder/arm/neon/vp9_dct_neon.c',
+    'libvpx/vp9/encoder/arm/neon/vp9_diamond_search_sad_neon.c',
+    'libvpx/vp9/encoder/arm/neon/vp9_error_neon.c',
+    'libvpx/vp9/encoder/arm/neon/vp9_frame_scale_neon.c',
+    'libvpx/vp9/encoder/arm/neon/vp9_quantize_neon.c',
+    'libvpx/vp9/encoder/vp9_aq_cyclicrefresh.c',
+    'libvpx/vp9/encoder/vp9_bitstream.c',
+    'libvpx/vp9/encoder/vp9_context_tree.c',
+    'libvpx/vp9/encoder/vp9_cost.c',
+    'libvpx/vp9/encoder/vp9_dct.c',
+    'libvpx/vp9/encoder/vp9_encodeframe.c',
+    'libvpx/vp9/encoder/vp9_encodemb.c',
+    'libvpx/vp9/encoder/vp9_encodemv.c',
+    'libvpx/vp9/encoder/vp9_encoder.c',
+    'libvpx/vp9/encoder/vp9_ethread.c',
+    'libvpx/vp9/encoder/vp9_ext_ratectrl.c',
+    'libvpx/vp9/encoder/vp9_extend.c',
+    'libvpx/vp9/encoder/vp9_frame_scale.c',
+    'libvpx/vp9/encoder/vp9_lookahead.c',
+    'libvpx/vp9/encoder/vp9_mcomp.c',
+    'libvpx/vp9/encoder/vp9_multi_thread.c',
+    'libvpx/vp9/encoder/vp9_noise_estimate.c',
+    'libvpx/vp9/encoder/vp9_picklpf.c',
+    'libvpx/vp9/encoder/vp9_pickmode.c',
+    'libvpx/vp9/encoder/vp9_quantize.c',
+    'libvpx/vp9/encoder/vp9_ratectrl.c',
+    'libvpx/vp9/encoder/vp9_rd.c',
+    'libvpx/vp9/encoder/vp9_rdopt.c',
+    'libvpx/vp9/encoder/vp9_resize.c',
+    'libvpx/vp9/encoder/vp9_segmentation.c',
+    'libvpx/vp9/encoder/vp9_skin_detection.c',
+    'libvpx/vp9/encoder/vp9_speed_features.c',
+    'libvpx/vp9/encoder/vp9_subexp.c',
+    'libvpx/vp9/encoder/vp9_svc_layercontext.c',
+    'libvpx/vp9/encoder/vp9_tokenize.c',
+    'libvpx/vp9/encoder/vp9_tpl_model.c',
+    'libvpx/vp9/encoder/vp9_treewriter.c',
+    'libvpx/vp9/vp9_cx_iface.c',
+    'libvpx/vp9/vp9_dx_iface.c',
+    'libvpx/vp9/vp9_iface_common.c',
+    'libvpx/vpx/src/vpx_codec.c',
+    'libvpx/vpx/src/vpx_decoder.c',
+    'libvpx/vpx/src/vpx_encoder.c',
+    'libvpx/vpx/src/vpx_image.c',
+    'libvpx/vpx/src/vpx_tpl.c',
+    'libvpx/vpx_dsp/arm/avg_neon.c',
+    'libvpx/vpx_dsp/arm/avg_pred_neon.c',
+    'libvpx/vpx_dsp/arm/fdct16x16_neon.c',
+    'libvpx/vpx_dsp/arm/fdct32x32_neon.c',
+    'libvpx/vpx_dsp/arm/fdct4x4_neon.c',
+    'libvpx/vpx_dsp/arm/fdct8x8_neon.c',
+    'libvpx/vpx_dsp/arm/fdct_partial_neon.c',
+    'libvpx/vpx_dsp/arm/hadamard_neon.c',
+    'libvpx/vpx_dsp/arm/idct16x16_1_add_neon.c',
+    'libvpx/vpx_dsp/arm/idct16x16_add_neon.c',
+    'libvpx/vpx_dsp/arm/idct32x32_135_add_neon.c',
+    'libvpx/vpx_dsp/arm/idct32x32_1_add_neon.c',
+    'libvpx/vpx_dsp/arm/idct32x32_34_add_neon.c',
+    'libvpx/vpx_dsp/arm/idct32x32_add_neon.c',
+    'libvpx/vpx_dsp/arm/idct4x4_1_add_neon.c',
+    'libvpx/vpx_dsp/arm/idct4x4_add_neon.c',
+    'libvpx/vpx_dsp/arm/idct8x8_1_add_neon.c',
+    'libvpx/vpx_dsp/arm/idct8x8_add_neon.c',
+    'libvpx/vpx_dsp/arm/intrapred_neon.c',
+    'libvpx/vpx_dsp/arm/loopfilter_neon.c',
+    'libvpx/vpx_dsp/arm/quantize_neon.c',
+    'libvpx/vpx_dsp/arm/sad4d_neon.c',
+    'libvpx/vpx_dsp/arm/sad4d_neon_dotprod.c',
+    'libvpx/vpx_dsp/arm/sad_neon.c',
+    'libvpx/vpx_dsp/arm/sad_neon_dotprod.c',
+    'libvpx/vpx_dsp/arm/sse_neon.c',
+    'libvpx/vpx_dsp/arm/sse_neon_dotprod.c',
+    'libvpx/vpx_dsp/arm/subpel_variance_neon.c',
+    'libvpx/vpx_dsp/arm/subtract_neon.c',
+    'libvpx/vpx_dsp/arm/sum_squares_neon.c',
     'libvpx/vpx_dsp/arm/variance_neon.c',
     'libvpx/vpx_dsp/arm/variance_neon_dotprod.c',
     'libvpx/vpx_dsp/arm/vpx_convolve8_neon.c',
     'libvpx/vpx_dsp/arm/vpx_convolve8_neon_dotprod.c',
     'libvpx/vpx_dsp/arm/vpx_convolve8_neon_i8mm.c',
     'libvpx/vpx_dsp/arm/vpx_convolve_avg_neon.c',
     'libvpx/vpx_dsp/arm/vpx_convolve_copy_neon.c',
     'libvpx/vpx_dsp/arm/vpx_convolve_neon.c',
@@ -1066,16 +2415,17 @@ files = {
     'libvpx/vpx_ports/mem.h',
     'libvpx/vpx_ports/static_assert.h',
     'libvpx/vpx_ports/system_state.h',
     'libvpx/vpx_ports/vpx_timer.h',
     'libvpx/vpx_scale/vpx_scale.h',
     'libvpx/vpx_scale/yv12config.h',
 ],
   'GENERIC_SOURCES': [
+    'libvpx/../config/generic/vpx_config.c',
     'libvpx/vp8/common/alloccommon.c',
     'libvpx/vp8/common/blockd.c',
     'libvpx/vp8/common/dequantize.c',
     'libvpx/vp8/common/entropy.c',
     'libvpx/vp8/common/entropymode.c',
     'libvpx/vp8/common/entropymv.c',
     'libvpx/vp8/common/extend.c',
     'libvpx/vp8/common/filter.c',

