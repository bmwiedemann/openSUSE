--- a/run_tests.py
+++ b/run_tests.py
@@ -104,18 +104,10 @@ def get_meson_script():
     Also used by run_unittests.py to determine what meson to run when not
     running in-process (which is the default).
     '''
-    # Is there a meson.py next to the mesonbuild currently in use?
-    mesonbuild_dir = Path(mesonbuild.__file__).resolve().parent.parent
-    meson_script = mesonbuild_dir / 'meson.py'
-    if meson_script.is_file():
-        return str(meson_script)
-    # Then if mesonbuild is in PYTHONPATH, meson must be in PATH
-    mlog.warning('Could not find meson.py next to the mesonbuild module. '
-                 'Trying system meson...')
     meson_cmd = shutil.which('meson')
-    if meson_cmd:
+    if meson_cmd and os.path.isfile(meson_cmd):
         return meson_cmd
-    raise RuntimeError('Could not find {!r} or a meson in PATH'.format(meson_script))
+    raise RuntimeError('Could not find a meson in PATH')
 
 def get_backend_args_for_dir(backend, builddir):
     '''
@@ -296,12 +288,12 @@ def main():
             else:
                 env['PYTHONPATH'] = temp_dir
         if not cross:
-            cmd = mesonlib.python_command + ['run_meson_command_tests.py', '-v']
-            if options.failfast:
-                cmd += ['--failfast']
-            returncode += subprocess.call(cmd, env=env)
-            if options.failfast and returncode != 0:
-                return returncode
+            #cmd = mesonlib.python_command + ['run_meson_command_tests.py', '-v']
+            #if options.failfast:
+            #    cmd += ['--failfast']
+            #returncode += subprocess.call(cmd, env=env)
+            #if options.failfast and returncode != 0:
+            #    return returncode
             cmd = mesonlib.python_command + ['run_unittests.py', '-v']
             if options.failfast:
                 cmd += ['--failfast']
