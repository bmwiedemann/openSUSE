Index: src/subprocess_test.cc
===================================================================
--- a/src/subprocess_test.cc.orig
+++ b/src/subprocess_test.cc
@@ -216,36 +216,6 @@ TEST_F(SubprocessTest, SetWithMulti) {
   }
 }
 
-#if defined(USE_PPOLL)
-TEST_F(SubprocessTest, SetWithLots) {
-  // Arbitrary big number; needs to be over 1024 to confirm we're no longer
-  // hostage to pselect.
-  const unsigned kNumProcs = 1025;
-
-  // Make sure [ulimit -n] isn't going to stop us from working.
-  rlimit rlim;
-  ASSERT_EQ(0, getrlimit(RLIMIT_NOFILE, &rlim));
-  if (rlim.rlim_cur < kNumProcs) {
-    printf("Raise [ulimit -n] above %u (currently %lu) to make this test go\n",
-           kNumProcs, rlim.rlim_cur);
-    return;
-  }
-
-  vector<Subprocess*> procs;
-  for (size_t i = 0; i < kNumProcs; ++i) {
-    Subprocess* subproc = subprocs_.Add("/bin/echo");
-    ASSERT_NE((Subprocess *) 0, subproc);
-    procs.push_back(subproc);
-  }
-  while (!subprocs_.running_.empty())
-    subprocs_.DoWork();
-  for (size_t i = 0; i < procs.size(); ++i) {
-    ASSERT_EQ(ExitSuccess, procs[i]->Finish());
-    ASSERT_NE("", procs[i]->GetOutput());
-  }
-  ASSERT_EQ(kNumProcs, subprocs_.finished_.size());
-}
-#endif  // !__APPLE__ && !_WIN32
 
 // TODO: this test could work on Windows, just not sure how to simply
 // read stdin.
