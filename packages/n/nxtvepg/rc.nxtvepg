#! /bin/sh
# Copyright (c) 1995-2002 SuSE Linux AG, Nuernberg, Germany.
# All rights reserved.
#
# How to run nxtvepg in daemon mode
# =================================
# 
# (1) Setup nxtvepg using the GUI:  Just start nxtvepg, specify the
#     device, let it scan for EPG providers, configure everything
#     the way you like it.
# (2) Copy the resulting config file $HOME/.nxtvepgrc to
#     /etc/nxtvepgrc
# (3) "rcnxtvepg start" (as root) will start nxtvepg in daemon mode.
# (4) "insserv nxtvepg" (as root) will enable the start script, so
#     nxtvepg will be started every time you boot the system.
#
### BEGIN INIT INFO
# Provides:          nxtvepg
# Required-Start:    $syslog $remote_fs
# Required-Stop:     $syslog $remote_fs
# Default-Start:     3 5
# Default-Stop:      0 1 2 6
# Short-Description: nxtvepg data acquisition daemon
# Description:       Starts nxtvepg in daemon mode.
#	It will collect EPG (Electronic Program Guide) data
#	in the background.  Needs a TV card where it can read
#	vbi data from and must be configured before using.
### END INIT INFO

# Check for missing binaries
NXTVEPG_BIN=/usr/bin/nxtvepg
test -x $NXTVEPG_BIN || exit 5

# Check for existence of needed config file
NXTVEPG_CONFIG=/etc/nxtvepgrc
test -r $NXTVEPG_CONFIG || exit 6

# Shell functions sourced from /etc/rc.status:
#      rc_check         check and set local and overall rc status
#      rc_status        check and set local and overall rc status
#      rc_status -v     be verbose in local rc status and clear it afterwards
#      rc_status -v -r  ditto and clear both the local and overall rc status
#      rc_status -s     display "skipped" and exit with status 3
#      rc_status -u     display "unused" and exit with status 3
#      rc_failed        set local and overall rc status to failed
#      rc_failed <num>  set local and overall rc status to <num>
#      rc_reset         clear both the local and overall rc status
#      rc_exit          exit appropriate to overall rc status
#      rc_active        checks whether a service is activated by symlinks
#      rc_splash arg    sets the boot splash screen to arg (if active)
. /etc/rc.status

# Reset status of this service
rc_reset

# Return values acc. to LSB for all commands but status:
# 0	  - success
# 1       - generic or unspecified error
# 2       - invalid or excess argument(s)
# 3       - unimplemented feature (e.g. "reload")
# 4       - user had insufficient privileges
# 5       - program is not installed
# 6       - program is not configured
# 7       - program is not running
# 8--199  - reserved (8--99 LSB, 100--149 distrib, 150--199 appl)
# 
# Note that starting an already running service, stopping
# or restarting a not-running service as well as the restart
# with force-reload (in case signaling is not supported) are
# considered a success.

case "$1" in
    start)
	echo -n "Starting nxtvepg "
	## Start daemon with startproc(8). If this fails
	## the return value is set appropriately by startproc.
	startproc -u nobody -g nogroup \
		$NXTVEPG_BIN -daemon -rcfile $NXTVEPG_CONFIG

	# Remember status and be verbose
	rc_status -v
	;;
    stop)
	echo -n "Shutting down nxtvepg "
	## Stop daemon with killproc(8) and if this fails
	## killproc sets the return value according to LSB.

	killproc -TERM $NXTVEPG_BIN

	# Remember status and be verbose
	rc_status -v
	;;
    try-restart)
	## Do a restart only if the service was active before.
	## Note: try-restart is not (yet) part of LSB (as of 1.2)
	$0 status >/dev/null &&  $0 restart

	# Remember status and be quiet
	rc_status
	;;
    restart)
	## Stop the service and regardless of whether it was
	## running or not, start it again.
	$0 stop
	$0 start

	# Remember status and be quiet
	rc_status
	;;
    force-reload)
	## Signal the daemon to reload its config. Most daemons
	## do this on signal 1 (SIGHUP).
	## If it does not support it, restart.
	$0 restart

	;;
    reload)
	## Like force-reload, but if daemon does not support
	## signaling, do nothing (!)

	## Otherwise if it does not support reload:
	rc_failed 3
	rc_status -v
	;;
    status)
	echo -n "Checking for service nxtvepg "
	## Check status with checkproc(8), if process is running
	## checkproc will return with exit status 0.

	# NOTE: checkproc returns LSB compliant status values.
	checkproc $NXTVEPG_BIN
	rc_status -v
	;;
    *)
	echo "Usage: $0 {start|stop|status|try-restart|restart|force-reload|reload}"
	exit 1
	;;
esac
rc_exit
