From: Egbert Eich <eich@suse.com>
Date: Sun Jul 11 10:01:41 2021 +0200
Subject: swap[4|8]b: Satisfy strict aliasing rules
Patch-mainline: Not yet
Git-repo: https://github.com/Unidata/netcdf-c
Git-commit: e1f5896ab561cb774735fd9e1445533ceb152b76
References: 

gcc11 made assumptions about optimization based on strict aliasing rules
that led to this code malfunction, which was caught by the test suite.

gcc printed out a warning whose meaning was not immediately obvious:
ncx.c: In function 'ncx_putn_float_schar':
ncx.c:272:20: warning: 'xx' may be used uninitialized [-Wmaybe-uninitialized]
  272 |     uint32_t tmp = *(uint32_t*)src;
      |                    ^~~~~~~~~~~~~~~
ncx.c:3512:14: note: 'xx' was declared here
 3512 |     ix_float xx = NC_FILL_FLOAT;
      |              ^~
Due to optimization and inlining, the initialization of this variable was
lost.

Signed-off-by: Egbert Eich <eich@suse.com>
Signed-off-by: Egbert Eich <eich@suse.de>
---
 libsrc/ncx.m4 | 8 ++++++--
 1 file changed, 6 insertions(+), 2 deletions(-)
diff --git a/libsrc/ncx.m4 b/libsrc/ncx.m4
index 72931afb..58c7f02e 100644
--- a/libsrc/ncx.m4
+++ b/libsrc/ncx.m4
@@ -348,7 +348,9 @@ inline static void
 swap4b(void *dst, const void *src)
 {
     /* copy over, make the below swap in-place */
-    uint32_t tmp = *(uint32_t*)src;
+    uint32_t tmp;
+    /* use memcpy to avoid type punning */
+    memcpy(&tmp, src, sizeof(tmp));
     tmp = SWAP4(tmp);
     memcpy(dst, &tmp, 4);
 
@@ -464,7 +466,9 @@ swap8b(void *dst, const void *src)
     op = (uint32_t*)((char*)dst+4);
     *op = SWAP4(*op);
 #else
-    uint64_t tmp = *(uint64_t*)src;
+    uint64_t tmp;
+    /* use memcpy to avoid type punning */
+    memcpy(&tmp, src, sizeof(tmp));
     tmp = SWAP8(tmp);
     memcpy(dst, &tmp, 8);
 
