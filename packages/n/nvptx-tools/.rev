<revisionlist>
  <revision rev="1" vrev="1">
    <srcmd5>353baab80dc4eff17ba732d0980d4e21</srcmd5>
    <version>1.0</version>
    <time>1487384320</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>457020</requestid>
  </revision>
  <revision rev="2" vrev="2">
    <srcmd5>248a46a99602cc5f0a02d26c2a5f27be</srcmd5>
    <version>1.0</version>
    <time>1504617563</time>
    <user>dimstar_suse</user>
    <comment>- Update nvptx-tools.patch to check for getopt to avoid providing
  an incompatible declaration.</comment>
    <requestid>520987</requestid>
  </revision>
  <revision rev="3" vrev="3">
    <srcmd5>16b9bce677c82e3891713dfd3af7a2b9</srcmd5>
    <version>1.0</version>
    <time>1591654201</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>812637</requestid>
  </revision>
  <revision rev="4" vrev="4">
    <srcmd5>6d7f147c955e155ef639054abe22e582</srcmd5>
    <version>1.0</version>
    <time>1665754908</time>
    <user>dimstar_suse</user>
    <comment>- Update nvptx-tools tarball from git
  * includes changes in nvptx-tools.patch
  * deals with CUDA 11 dropping support for NVIDIA Kepler sm_30 and sm_32
- Package nvptx-none-run and nvptx-none-run-single tools</comment>
    <requestid>1010459</requestid>
  </revision>
  <revision rev="5" vrev="5">
    <srcmd5>9eaff8b7300b87d95f47005504031401</srcmd5>
    <version>1.0</version>
    <time>1666089881</time>
    <user>dimstar_suse</user>
    <comment>Fix Wolfang Engel complaints, rejecting the SLE update because of
&quot;missing nvptx-tools.patch removal&quot; notes.

- Remove nvptx-tools.patch as it is included in the above tarball update</comment>
    <requestid>1029657</requestid>
  </revision>
  <revision rev="6" vrev="1">
    <srcmd5>49e977e6d2f527a0f3864341ebf5b61d</srcmd5>
    <version>1.0+git.20230122.93e0090</version>
    <time>1679520668</time>
    <user>dimstar_suse</user>
    <comment>- Start using tar_scm OBS server for a tarball.
- Update to version 1.0+git.20230122.93e0090:
  * nm: '#define __STDC_FORMAT_MACROS' for '#include &lt;inttypes.h&gt;' [#40]
  * 'nm'
  * ld: Clean up the 'symbol_table' when we're done
  * as: Clean up the 'symbol_table' when we're done
  * ld: Clean up 'file_hash_entry' instances when we're done with the 'symbol_table'
  * as: Always 'free' the 'tok_preamble_target_arg'-deduced 'target_arg' string after 'ptxas' verification
  * as: 'obstack_free' after 'ptxas' verification
  * run: Close files after use (forwarded request 1073654 from marxin)</comment>
    <requestid>1073728</requestid>
  </revision>
  <revision rev="7" vrev="1">
    <srcmd5>a4271973cd84468921b3c28d7bc75c7b</srcmd5>
    <version>1.0+git.20230718.bbb6fe6</version>
    <time>1690215964</time>
    <user>anag+factory</user>
    <comment>- Update to version 1.0+git.20230718.bbb6fe6:
  * Document &quot;Program Instrumentation: Sanitizers&quot; in 'README-development'
  * run: Move 'cuModuleGetFunction' for '__main' out of 'compile_file'
  * run: Plug 'compile_file' memory leaks
  * run: Localize 'cuda_lib'
  * as: Localize 'collect_wait'
  * as: Don't 'unlink (NULL)'
  * as: Don't use an obstack for 'ptxas' invocation [#1]
  * ld: Remove unused '#include &quot;obstack.h&quot;' [#1]
  * ld, nm: Stop 'using namespace std;'
  * run: For auto '--stack-size', consider free instead of total device memory [#8]
  * ld: Support archives appearing as input files
  * ld: Don't reject empty archives
  * ld: Make resolving of '-l'ibraries a separate step
  * ld: Verify no NUL-separated parts for 'process_refs_defs'
  * ld: Fix undefined behavior reading objects from archives
  * ld: Document padding of objects in archives
  * as: Plug 'alloc_stmt' memory leak
  * as: Plug 'read_file' memory leak
  * as: Plug 'tokenize' memory leak
  * as: Conceptually simplify capture of preamble '.target' directive's argument
  * 'test/GLOBAL_FUNCTION_DECL_f.s': 'f' is '.extern', not '.visible' [#38]</comment>
    <requestid>1099901</requestid>
  </revision>
  <revision rev="8" vrev="1">
    <srcmd5>e1884c422c0e9a82a89aa6cd4f1267a3</srcmd5>
    <version>1.0+git.20230913.c321f1a</version>
    <time>1695758541</time>
    <user>anag+factory</user>
    <comment>- Update to version 1.0+git.20230913.c321f1a:
  * as: Allow for arbitrary number of tokens in a 'stmt'
  * Ensure :VAR_MAP and :FUNC_MAP are output in order, part II [#29]
  * Ensure :VAR_MAP and :FUNC_MAP are output in order: add more test cases [#29]
  * as: Pass 'Vis' into 'parse_line_nosemi'
  * as: Inline 'alloc_comment'
  * as: When tokenizing a block comment, don't lose a preceding end of line marker
  * as: Add 'test/as/block_comment-1.test'
  * Bump architecture baseline from sm_35 to sm_50 [#30]
  * as: Remove unused 'FUNC_MAP', 'VAR_MAP' scanning
  * as: Clean up 'symbol's via C++ destructor
  * Enable 'test/as/ptxas/missing-1.test' also if 'ptxas' is available
  * Adjust for 'pex_run' error message change in &quot;Update imported files: GCC, 2018-10-29 [#1, #42]&quot;
  * Update imported files: GCC, 2023-06-16 [#1, #42]
  * Update imported files: GCC, 2022-05-18, II [#1, #42]
  * Update imported files: GCC, 2022-05-18 [#1, #42]
  * Update imported files: GCC, 2022-04-06 [#1, #42]
  * Update imported files: GCC, 2022-03-20 [#1, #42]
  * Switch to Autoconf 2.69, Automake 1.15.1 [#42]
  * Update imported files: GCC, 2018-10-31 [#1, #42]
  * Update imported files: GCC, 2018-10-29 [#1, #42]
  * Update imported files: GCC, 2016-07-29 [#1, #42]
  * Update imported files: GCC, 2014-05-01 [#1, #42]
  * Note &quot;Imported Files&quot; in 'README-development' [#1]
  * Add 'move-if-change' [#1]
  * Remove 'acinclude.m4'
  * Don't use 'gcc_AC_PROG_INSTALL'; use standard 'AC_PROG_INSTALL'
  * Don't use 'gcc_AC_PROG_LN_S'; assume that 'ln -s' does work
  * Have 'aclocal.m4' be &quot;generated automatically by aclocal&quot;
  * Move 'ACX_PKGVERSION', 'ACX_BUGURL' into 'config/acx.m4'</comment>
    <requestid>1113614</requestid>
  </revision>
  <revision rev="9" vrev="1">
    <srcmd5>d22704b7257b5f40e7b7b6ae3cf0fa6a</srcmd5>
    <version>1.0+git.20240419.9962793</version>
    <time>1715097897</time>
    <user>dimstar_suse</user>
    <comment>- Update to version 1.0+git.20240419.9962793:
  * as: Document current handling of '//:IND_FUNC_MAP' [#45]
  * Handle &quot;:IND_FUNC_MAP&quot; in nvptx-as to ensure map-directive order is kept
  * Handle --hash-style argument in nvptx-ld</comment>
    <requestid>1172434</requestid>
  </revision>
  <revision rev="10" vrev="1">
    <srcmd5>46cf3190d1bf3f26014ac58aa7ae5e3c</srcmd5>
    <version>1.0+git.20240530.96f8fc5</version>
    <time>1717429302</time>
    <user>anag+factory</user>
    <comment>- Update to version 1.0+git.20240530.96f8fc5:
  * ld: Global constructor/destructor support
  * Build in C++11 mode
  * Import 'config/ax_cxx_compile_stdcxx.m4' from GCC
  * Replace 'nvptx-none-run-single' with a locking mechanism in 'nvptx-none-run.exp'
  * Change github.com/MentorEmbedded to github.com/SourceryTools</comment>
    <requestid>1177955</requestid>
  </revision>
  <revision rev="11" vrev="1">
    <srcmd5>392a6ad16cbb871065a2b043bba514a5</srcmd5>
    <version>1.0+git.20240904.a0c1fff</version>
    <time>1750262367</time>
    <user>anag_factory</user>
    <comment>- Update to version 1.0+git.20240904.a0c1fff: [bsc#1244683]
  * Auto packing the repository in background for optimum performance.
  * See &quot;git help gc&quot; for manual housekeeping.
  * as: Switch to standard formatting of guard predicates
  * as: Make processing of guard predicates idempotent
  * Add 'test/as/guard_predicates-1.test'
  * as: Make order of symbol emission deterministic
  * as: Only 'symbol_hash_lookup' 'def_token' if we're actually using it
  * Add 'test/as/order-2.test'
  * Rename 'test/as/order-1.test' artifacts
  * as: Don't keep 'sym' in 'Stmt'
  * as: Get rid of global variables 'Stmt *decls', 'Stmt *fns'
  * as, ld, nm: Use a constant for &quot;initial symbol table size&quot;
  * as: Strengthen static typing in 'symbol_hash_lookup'
  * as: C++-ify writing to the output file
  * as: Don't call 'fatal_error' from 'output_symbol'
  * as: Don't call 'fatal_error' from 'parse_file'
  * as: Don't call 'fatal_error' from 'verify_preamble'
  * as: Don't call 'fatal_error' from 'tokenize'
  * as: Move &quot;Minimalistic verification of the preamble as generated by GCC&quot; into a separate function
  * C++-ify: 'fatal_error'
  * Add 'test/as/circular_reference.test'
  * Add 'test/as/parser-expected_identifier.test' [#19]
  * Add 'test/as/tokenizer-non-ascii.test' [#19]
  * Add 'test/as/invoke-1.test'
  * ld: Diagnose multiple definitions
  * ld, nm: Some support for &quot;weak&quot; symbols
  * Add 'test/nm/sort-2.test'
  * ld: Implement '--ignore-unresolved-symbol SYMBOL'
  * ld: Every 'included' symbol must have a 'def'</comment>
    <requestid>1286710</requestid>
  </revision>
</revisionlist>
