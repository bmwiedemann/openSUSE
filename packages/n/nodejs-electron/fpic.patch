Build targets which go in shared libraries as PIC to avoid linker error
Use -fpic for code which goes only in dlls (gives smaller code),
    -fPIC for code which goes in both dlls and main executable


--- a/third_party/angle/BUILD.gn
+++ b/third_party/angle/BUILD.gn
@@ -119,6 +119,8 @@
 
 # This config is applied to internal Angle targets (not pushed to dependents).
 config("internal_config") {
+  cflags = ["-fPIC", "-fno-semantic-interposition"]
+  asmflags = ["-fPIC", "-fno-semantic-interposition"]
   include_dirs = [
     "include",
     "src",
--- a/third_party/angle/src/third_party/volk/BUILD.gn
+++ b/third_party/angle/src/third_party/volk/BUILD.gn
@@ -13,6 +13,8 @@
 }
 
 source_set("volk") {
+  cflags = ["-fPIC", "-fno-semantic-interposition"]
+  asmflags = ["-fPIC", "-fno-semantic-interposition"]
   sources = [
     "volk.c",
     "volk.h",
--- a/third_party/swiftshader/BUILD.gn
+++ b/third_party/swiftshader/BUILD.gn
@@ -15,9 +15,9 @@
 import("src/Reactor/reactor.gni")
 
 config("swiftshader_config") {
-  cflags = []
+  cflags = ["-fpic", "-fno-semantic-interposition"]
   defines = []
-  asmflags = []
+  asmflags = ["-fpic", "-fno-semantic-interposition"]
 
   if (is_clang) {
     cflags += [ "-Wno-shadow" ]
--- a/third_party/swiftshader/third_party/SPIRV-Tools/BUILD.gn
+++ b/third_party/swiftshader/third_party/SPIRV-Tools/BUILD.gn
@@ -356,7 +356,8 @@
     ":spvtools_include_gen_dirs",
   ]
 
-  cflags = []
+  cflags = ["-fpic", "-fno-semantic-interposition"]
+  asmflags = ["-fpic", "-fno-semantic-interposition"]
   if (is_clang) {
     cflags += [
       "-Wno-implicit-fallthrough",
--- a/third_party/vulkan-deps/spirv-tools/src/BUILD.gn
+++ b/third_party/vulkan-deps/spirv-tools/src/BUILD.gn
@@ -356,7 +356,8 @@
     ":spvtools_include_gen_dirs",
   ]
 
-  cflags = []
+  cflags = ["-fpic", "-fno-semantic-interposition"]
+  asmflags = ["-fpic", "-fno-semantic-interposition"]
   if (is_clang) {
     cflags += [
       "-Wno-implicit-fallthrough",
--- a/third_party/vulkan_memory_allocator/BUILD.gn
+++ b/third_party/vulkan_memory_allocator/BUILD.gn
@@ -35,6 +35,8 @@
 }
 
 source_set("vulkan_memory_allocator") {
+  cflags = ["-fPIC", "-fno-semantic-interposition"]
+  asmflags = ["-fPIC", "-fno-semantic-interposition"]
   sources = [
     "include/vk_mem_alloc.h",
     "vma.cpp",
--- a/third_party/zlib/google/BUILD.gn
+++ b/third_party/zlib/google/BUILD.gn
@@ -40,6 +40,8 @@
 # This allows other users of Chromium's zlib library, but don't use Chromium's
 # //base, to reuse some boilerplate code.
 static_library("compression_utils_portable") {
+  cflags = ["-fPIC", "-fno-semantic-interposition"]
+  asmflags = ["-fPIC", "-fno-semantic-interposition"]
   sources = [
     "compression_utils_portable.cc",
     "compression_utils_portable.h",
