From 0d76f68f2c233c18eebf16d6e5f2afce2f7c0726 Mon Sep 17 00:00:00 2001
From: PatR <rankin@nethack.org>
Date: Sat, 5 Oct 2019 16:49:34 -0700
Subject: tty xputc()

Another part of github issue 227.  Casting a function pointer when
passing it to another function is iffy when lying about the return
type.  tputs() expects a routine which returns int, so give it one.
Other xputc() usage is equivalent to putchar(), so define xputc()
with the same function signature as that has.

The tputs() declarations in system.h should probably be changed
(third argument is a function which takes an int rather than
unspecified parameters) but I've left them alone.  I made that change
to tputs() in sys/share/tclib.c though.

NT and MSDOS changes are untested.  tclib.c compiles ok with clang-
as-gcc on OSX but hasn't been tested with the port that uses it (VMS).
---
 include/wintty.h  | 11 +-------
 sys/msdos/video.c | 13 ++++++----
 sys/share/tclib.c |  9 ++++---
 sys/winnt/nttty.c | 10 +++++---
 sys/winnt/stubs.c |  6 ++---
 win/tty/termcap.c | 64 +++++++++++++++++++++++------------------------
 6 files changed, 54 insertions(+), 59 deletions(-)

Index: nethack-3.4.3/include/wintty.h
===================================================================
--- nethack-3.4.3.orig/include/wintty.h
+++ nethack-3.4.3/include/wintty.h
@@ -99,16 +99,7 @@ E void FDECL(tty_startup,(int*, int*));
 #ifndef NO_TERMS
 E void NDECL(tty_shutdown);
 #endif
-#if defined(apollo)
-/* Apollos don't widen old-style function definitions properly -- they try to
- * be smart and use the prototype, or some such strangeness.  So we have to
- * define UNWIDENDED_PROTOTYPES (in tradstdc.h), which makes CHAR_P below a
- * char.  But the tputs termcap call was compiled as if xputc's argument
- * actually would be expanded.	So here, we have to make an exception. */
-E void FDECL(xputc, (int));
-#else
-E void FDECL(xputc, (CHAR_P));
-#endif
+E int FDECL(xputc, (int));
 E void FDECL(xputs, (const char *));
 #if defined(SCREEN_VGA) || defined(SCREEN_8514)
 E void FDECL(xputg, (int, int, unsigned));
Index: nethack-3.4.3/sys/msdos/video.c
===================================================================
--- nethack-3.4.3.orig/sys/msdos/video.c
+++ nethack-3.4.3/sys/msdos/video.c
@@ -565,9 +565,10 @@ const char *s;
 	}
 }
 
-void
-xputc(ch)	/* write out character (and attribute) */
-char ch;
+/* same signature as 'putchar()' with potential failure result ignored */
+int
+xputc(ch) /* write out character (and attribute) */
+int ch;
 {
 	int i;
 	char attribute;
@@ -583,16 +584,17 @@ char ch;
 		vga_xputc(ch,attribute);
 #  endif /*SCREEN_VGA*/
 	}
+	return 0;
 }
 
-void
-xputg(glyphnum,ch,special)	/* write out a glyph picture at current location */
+/* write out a glyph picture at current location */
+void xputg(glyphnum, ch, special)
 int glyphnum;
 int ch;
 unsigned special;
 {
 	if (!iflags.grmode || !iflags.tile_view) {
-		xputc((char)ch);
+		(void) xputc((char) ch);
 #  ifdef SCREEN_VGA
 	} else {
 		vga_xputg(glyphnum, ch, special);
Index: nethack-3.4.3/sys/share/tclib.c
===================================================================
--- nethack-3.4.3.orig/sys/share/tclib.c
+++ nethack-3.4.3/sys/share/tclib.c
@@ -27,7 +27,7 @@ int   FDECL(tgetnum,  (const char *));
 char *FDECL(tgetstr,  (const char *,char **));
 char *FDECL(tgoto,    (const char *,int,int));
 char *FDECL(tparam,   (const char *,char *,int,int,int,int,int));
-void  FDECL(tputs,    (const char *,int,int (*)()));
+void FDECL(tputs, (const char *, int, int (*)(int)));
 
 /* local support data */
 static char *tc_entry;
@@ -431,9 +431,10 @@ tparam(ctl, buf, buflen, row, col, row2,
 /* send a string to the terminal, possibly padded with trailing NULs */
 void
 tputs( string, range, output_func )
-const char *string;	/* characters to output */
-int range;		/* number of lines affected, used for `*' delays */
-int (*output_func)();	/* actual output routine; return value ignored */
+const char *string; /* characters to output */
+int range;          /* number of lines affected, used for `*' delays */
+int FDECL((*output_func),(int)); /* actual output routine;
+                                  * return value ignored */
 {
     register int c, num = 0;
     register const char *p = string;
Index: nethack-3.4.3/sys/winnt/nttty.c
===================================================================
--- nethack-3.4.3.orig/sys/winnt/nttty.c
+++ nethack-3.4.3/sys/winnt/nttty.c
@@ -435,13 +435,15 @@ char ch;
 	}
 }
 
-void
+/* same signature as 'putchar()' with potential failure result ignored */
+int
 xputc(ch)
-char ch;
+int ch;
 {
 	cursor.X = ttyDisplay->curx;
 	cursor.Y = ttyDisplay->cury;
-	xputc_core(ch);
+	xputc_core((char) ch);
+	return 0;
 }
 
 void
@@ -449,7 +451,7 @@ xputs(s)
 const char *s;
 {
 	int k;
-	int slen = strlen(s);
+	int slen = (int) strlen(s);
 
 	if (ttyDisplay) {
 		cursor.X = ttyDisplay->curx;
Index: nethack-3.4.3/win/tty/termcap.c
===================================================================
--- nethack-3.4.3.orig/win/tty/termcap.c
+++ nethack-3.4.3/win/tty/termcap.c
@@ -492,11 +492,11 @@ tty_end_screen()
 #endif /* OVLB */
 
 #ifdef OVL0
-/* Note to OVLx tinkerers.  The placement of this overlay controls the location
-   of the function xputc().  This function is not currently in trampoli.[ch]
-   files for what is deemed to be performance reasons.  If this define is moved
-   and or xputc() is taken out of the ROOT overlay, then action must be taken
-   in trampoli.[ch]. */
+/* Note to OVLx tinkerers.  The placement of this overlay controls the
+   location of the function xputc().  This function is not currently in
+   trampoli.[ch] files for what is deemed to be performance reasons.  If
+   this define is moved and or xputc() is taken out of the ROOT overlay,
+   then action must be taken in trampoli.[ch]. */
 
 void
 nocmov(x, y)
@@ -524,7 +524,7 @@ int x,y;
 			cmov(x, y);
 		} else {
 			while((int) ttyDisplay->cury < y) {
-				xputc('\n');
+				(void) xputc('\n');
 				ttyDisplay->curx = 0;
 				ttyDisplay->cury++;
 			}
@@ -554,16 +554,27 @@ register int x, y;
 	ttyDisplay->curx = x;
 }
 
-/* See note at OVLx ifdef above.   xputc() is a special function. */
-void
+/* See note above.  xputc() is a special function for overlays. */
+int
 xputc(c)
-#if defined(apollo)
-int c;
-#else
-char c;
-#endif
+int c; /* actually char, but explicitly specify its widened type */
 {
-	(void) putchar(c);
+	/*
+	 * Note:  xputc() as a direct all to putchar() doesn't make any
+	 * sense _if_ putchar() is a function.  But if it is a macro, an
+	 * overlay configuration would want to avoid hidden code bloat
+	 * from multiple putchar() expansions.  And it gets passed as an
+	 * argument to tputs() so we have to guarantee an actual function
+	 * (while possibly lacking ANSI's (func) syntax to override macro).
+	 *
+	 * xputc() used to be declared as 'void xputc(c) char c; {}' but
+	 * avoiding the proper type 'int' just to avoid (void) casts when
+	 * ignoring the result can't have been sufficent reason to add it.
+	 * It also had '#if apollo' conditional to have the arg be int.
+	 * Matching putchar()'s declaration and using explicit casts where
+	 * warranted is more robust, so we're just a jacket around that.
+	 */
+	return putchar(c);
 }
 
 void
@@ -573,11 +584,7 @@ const char *s;
 # ifndef TERMLIB
 	(void) fputs(s, stdout);
 # else
-#  if defined(NHSTDC) || defined(ULTRIX_PROTO)
-	tputs(s, 1, (int (*)())xputc);
-#  else
 	tputs(s, 1, xputc);
-#  endif
 # endif
 }
 
@@ -592,7 +599,7 @@ cl_end()
 		register int cx = ttyDisplay->curx+1;
 
 		while(cx < CO) {
-			xputc(' ');
+			(void) xputc(' ');
 			cx++;
 		}
 		tty_curs(BASE_WINDOW, (int)ttyDisplay->curx+1,
@@ -747,25 +754,18 @@ tty_delay_output()
 	/* BUG: if the padding character is visible, as it is on the 5620
 	   then this looks terrible. */
 	if(flags.null)
+		tputs(
 # ifdef TERMINFO
-		/* cbosgd!cbcephus!pds for SYS V R2 */
-#  ifdef NHSTDC
-		tputs("$<50>", 1, (int (*)())xputc);
-#  else
-		tputs("$<50>", 1, xputc);
-#  endif
-# else
-#  if defined(NHSTDC) || defined(ULTRIX_PROTO)
-		tputs("50", 1, (int (*)())xputc);
+		    "$<50>",
 #  else
-		tputs("50", 1, xputc);
-#  endif
+		    "50",
 # endif
+		    1, xputc);
 
 	else if(ospeed > 0 && ospeed < SIZE(tmspc10) && nh_CM) {
 		/* delay by sending cm(here) an appropriate number of times */
-		register int cmlen = strlen(tgoto(nh_CM, ttyDisplay->curx,
-							ttyDisplay->cury));
+		register int cmlen =
+			(int) strlen(tgoto(nh_CM, ttyDisplay->curx, ttyDisplay->cury));
 		register int i = 500 + tmspc10[ospeed]/2;
 
 		while(i > 0) {
@@ -789,7 +789,7 @@ cl_eos()			/* free after Robert Viduya *
 		register int cy = ttyDisplay->cury+1;
 		while(cy <= LI-2) {
 			cl_end();
-			xputc('\n');
+			(void) xputc('\n');
 			cy++;
 		}
 		cl_end();
