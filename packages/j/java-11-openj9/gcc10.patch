--- openj9/runtime/tests/jvmtitests/src/com/ibm/jvmti/tests/verboseGC/vgc001.c
+++ openj9/runtime/tests/jvmtitests/src/com/ibm/jvmti/tests/verboseGC/vgc001.c
@@ -31,7 +31,7 @@ static agentEnv * env;
 static jvmtiExtensionFunction subscribe  = NULL;
 static jvmtiExtensionFunction unsubscribe  = NULL;
 
-void *subscriptionID;
+void *subscriptionID1;
 volatile static jint bufferCount = 0;
 volatile static int alarmed = 0;
 
@@ -131,7 +131,7 @@ Java_com_ibm_jvmti_tests_verboseGC_vgc001_tryRegisterVerboseGCSubscriber(JNIEnv
 	jvmtiError err;
 	jvmtiEnv *jvmti_env = env->jvmtiEnv;
 
-	err = subscribe(jvmti_env, "vgc001 subscriber", vgc001Callback, vgc001Alarm, NULL, &subscriptionID);
+	err = subscribe(jvmti_env, "vgc001 subscriber", vgc001Callback, vgc001Alarm, NULL, &subscriptionID1);
 	if (err != JVMTI_ERROR_NONE) {
 		error(env, err, "RegisterVerboseGCSubscriber failed");
 		return FALSE;
@@ -147,7 +147,7 @@ Java_com_ibm_jvmti_tests_verboseGC_vgc001_tryDeregisterVerboseGCSubscriber(JNIEn
 	jvmtiError err = JVMTI_ERROR_NONE;
 	jvmtiEnv *jvmti_env = env->jvmtiEnv;
 
-	err = unsubscribe(jvmti_env, subscriptionID, NULL);
+	err = unsubscribe(jvmti_env, subscriptionID1, NULL);
 	if (err != JVMTI_ERROR_NONE && err != JVMTI_ERROR_NOT_AVAILABLE) {
 		error(env, err, "DeregisterVerboseGCSubscriber failed");
 		return -1;
