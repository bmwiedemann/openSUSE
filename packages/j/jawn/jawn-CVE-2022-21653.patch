Index: jawn-0.14.1/parser/src/main/scala/jawn/MutableFacade.scala
===================================================================
--- jawn-0.14.1.orig/parser/src/main/scala/jawn/MutableFacade.scala
+++ jawn-0.14.1/parser/src/main/scala/jawn/MutableFacade.scala
@@ -1,6 +1,8 @@
 package org.typelevel.jawn
 
 import scala.collection.mutable
+import scala.collection.JavaConverters._
+import java.util.HashMap
 
 trait MutableFacade[J] extends Facade[J] {
   def jarray(vs: mutable.ArrayBuffer[J]): J
@@ -24,7 +26,7 @@ trait MutableFacade[J] extends Facade[J]
 
   def objectContext() = new FContext[J] {
     var key: String = null
-    val vs = mutable.Map.empty[String, J]
+    val vs = (new HashMap[String, J]).asScala
     def add(s: CharSequence): Unit =
       if (key == null) { key = s.toString } else { vs(key) = jstring(s); key = null }
     def add(v: J): Unit =
Index: jawn-0.14.1/parser/src/main/scala/jawn/SimpleFacade.scala
===================================================================
--- jawn-0.14.1.orig/parser/src/main/scala/jawn/SimpleFacade.scala
+++ jawn-0.14.1/parser/src/main/scala/jawn/SimpleFacade.scala
@@ -1,6 +1,8 @@
 package org.typelevel.jawn
 
 import scala.collection.mutable
+import scala.collection.immutable.TreeMap
+import scala.collection.JavaConverters._
 
 /**
  * Facade is a type class that describes how Jawn should construct
@@ -31,7 +33,7 @@ trait SimpleFacade[J] extends Facade[J]
 
   def objectContext() = new FContext[J] {
     var key: String = null
-    var vs = Map.empty[String, J]
+    var vs = TreeMap.empty[String, J]
     def add(s: CharSequence): Unit =
       if (key == null) { key = s.toString } else { vs = vs.updated(key, jstring(s)); key = null }
     def add(v: J): Unit =
