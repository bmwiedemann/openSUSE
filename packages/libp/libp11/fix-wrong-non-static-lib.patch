Index: libp11-0.4.13/src/Makefile.am
===================================================================
--- libp11-0.4.13.orig/src/Makefile.am
+++ libp11-0.4.13/src/Makefile.am
@@ -6,7 +6,11 @@ EXTRA_DIST = Makefile.mak libp11.rc.in p
 
 noinst_HEADERS= libp11-int.h pkcs11.h p11_pthread.h
 include_HEADERS= libp11.h p11_err.h
+if ENABLE_STATIC_ENGINE
 lib_LTLIBRARIES = libp11.la libpkcs11.la
+else
+lib_LTLIBRARIES = libp11.la
+endif
 enginesexec_LTLIBRARIES = pkcs11.la
 pkgconfig_DATA = libp11.pc
 
@@ -52,9 +56,11 @@ pkcs11_la_LDFLAGS = $(AM_LDFLAGS) -modul
 # Create a static version of the engine as well to allow applications
 # to statically link into it.
 
+if ENABLE_STATIC_ENGINE
 libpkcs11_la_SOURCES = $(pkcs11_la_SOURCES)
 libpkcs11_la_CFLAGS = $(pkcs11_la_CFLAGS)
 libpkcs11_la_LIBADD = $(pkcs11_la_LIBADD)
+endif
 
 # OpenSSL older than 1.1.0 expected libpkcs11.so instead of pkcs11.so
 check-local: $(LTLIBRARIES)
Index: libp11-0.4.13/configure.ac
===================================================================
--- libp11-0.4.13.orig/configure.ac
+++ libp11-0.4.13/configure.ac
@@ -149,6 +149,13 @@ AC_ARG_WITH(
 	]
 )
 
+AC_ARG_ENABLE(
+	[static-engine],
+	[AS_HELP_STRING([--enable-static-engine], [enable static engine (libpkcs11.a) build @<:@disabled@:>@])],
+	,
+	[enable_static_engine="no"]
+)
+
 AC_ARG_WITH(
 	[pkcs11-module],
 	[AS_HELP_STRING([--with-pkcs11-module], [default PKCS11 module])],
@@ -226,6 +233,7 @@ AC_SUBST([SHARED_EXT], $(eval echo "${sh
 AM_CONDITIONAL([WIN32], [test "${WIN32}" = "yes"])
 AM_CONDITIONAL([CYGWIN], [test "${CYGWIN}" = "yes"])
 AM_CONDITIONAL([ENABLE_API_DOC], [test "${enable_api_doc}" = "yes"])
+AM_CONDITIONAL([ENABLE_STATIC_ENGINE], [test "${enable_static_engine}" = "yes"])
 
 if test "${enable_pedantic}" = "yes"; then
 	enable_strict="yes";
@@ -283,6 +291,7 @@ libp11 directory:        $(eval eval eva
 Engine directory:        ${enginesexecdir}
 Default PKCS11 module:   ${pkcs11_module}
 API doc support:         ${enable_api_doc}
+Static PKCS#11 engine    ${enable_static_engine}
 
 Host:                    ${host}
 Compiler:                ${CC}
