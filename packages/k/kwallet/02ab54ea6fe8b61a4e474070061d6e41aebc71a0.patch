From 02ab54ea6fe8b61a4e474070061d6e41aebc71a0 Mon Sep 17 00:00:00 2001
From: Ahmad Samir <a.samirh78@gmail.com>
Date: Fri, 17 Jan 2020 20:20:38 +0200
Subject: Revert readEntryList() to use QRegExp::Wildcard

Summary:
The issue with QRegularExpression::wildcardToRegularExpression() is
that it's more strict in its interpretation of a wildcard, i.e. it
makes it correctly work with file globbing patterns, meaning it would
return this pattern "\\A(?:[^/]*)\\z" when called with "*", it excludes
"/" which is a forbidden character in a filename, and it anchors the pattern
(which is what users of QRegExp did by using QRegExp::exactMatch()).
readEntryList() uses the regex to match against entries of the form:
WEBSITE / USERNAME, which includes a "/".

Test Plan:
- Install falkon (and falkon-kde for kwallet integration, or whatever
  your distro calls it) and log in to a website with a user name and a
  password and select to remember it when asked to.
- Restart falkon and see if the login data is shown

with this patch it should show the login data.

Reviewers: #frameworks, dfaure, apol

Reviewed By: dfaure

Subscribers: blaze, kde-frameworks-devel

Tags: #frameworks

Differential Revision: https://phabricator.kde.org/D26734
---
 src/api/KWallet/kwallet.cpp                    | 6 ++----
 src/runtime/kwalletd/backend/kwalletbackend.cc | 8 +++-----
 2 files changed, 5 insertions(+), 9 deletions(-)

diff --git a/src/api/KWallet/kwallet.cpp b/src/api/KWallet/kwallet.cpp
index 7d4940f..8e4e3c3 100644
--- a/src/api/KWallet/kwallet.cpp
+++ b/src/api/KWallet/kwallet.cpp
@@ -176,15 +176,13 @@ public:
         attrs[KSS_ATTR_ENTRYFOLDER] = folder;
         KSecretsService::SearchCollectionItemsJob *searchItemsJob = secretsCollection->searchItems(attrs);
         if (searchItemsJob->exec()) {
-            const QRegularExpression re(QRegularExpression::wildcardToRegularExpression(key));
+            const QRegExp re(key, Qt::CaseSensitive, QRegExp::Wildcard);
             const auto list = searchItemsJob->items();
-            QRegularExpressionMatch match;
             for (KSecretsService::SearchCollectionItemsJob::Item item : list) {
                 KSecretsService::ReadItemPropertyJob *readLabelJob = item->label();
                 if (readLabelJob->exec()) {
                     QString label = readLabelJob->propertyValue().toString();
-                    match = re.match(label);
-                    if (match.hasMatch()) {
+                    if (re.exactMatch(label)) {
                         if (verb(this, label, item.data())) {
                             rc = 0; // one successful iteration already produced results, so success return
                         }
diff --git a/src/runtime/kwalletd/backend/kwalletbackend.cc b/src/runtime/kwalletd/backend/kwalletbackend.cc
index f30f887..5e2aa07 100644
--- a/src/runtime/kwalletd/backend/kwalletbackend.cc
+++ b/src/runtime/kwalletd/backend/kwalletbackend.cc
@@ -35,7 +35,7 @@
 #include <QFile>
 #include <QFileInfo>
 #include <QSaveFile>
-#include <QRegularExpression>
+#include <QRegExp>
 #include <QCryptographicHash>
 #include <QStandardPaths>
 
@@ -530,13 +530,11 @@ QList<Entry *> Backend::readEntryList(const QString &key)
         return rc;
     }
 
-    QRegularExpression re(QRegularExpression::wildcardToRegularExpression(key));
+    const QRegExp re(key, Qt::CaseSensitive, QRegExp::Wildcard);
 
     const EntryMap &map = _entries[_folder];
-    QRegularExpressionMatch match;
     for (EntryMap::ConstIterator i = map.begin(); i != map.end(); ++i) {
-        match = re.match(i.key());
-        if (match.hasMatch()) {
+        if (re.exactMatch(i.key())) {
             rc.append(i.value());
         }
     }
-- 
cgit v1.1

