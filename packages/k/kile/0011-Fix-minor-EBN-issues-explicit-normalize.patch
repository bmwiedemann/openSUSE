From b1f12d8efd9febbc9888f2a544e2d19d4c86a99a Mon Sep 17 00:00:00 2001
From: Yuri Chornoivan <yurchor@ukr.net>
Date: Tue, 4 Sep 2018 19:24:35 +0300
Subject: [PATCH 11/35] Fix minor EBN issues [explicit] + [normalize]

---
 src/configtester.cpp                       |   2 +-
 src/configtester.h                         |   2 +-
 src/convert.h                              |   2 +-
 src/dialogs/configcheckerdialog.h          |   2 +-
 src/dialogs/newtoolwizard.cpp              |   4 +-
 src/dialogs/pdf-wizard/pdfdialog.cpp       |   6 +-
 src/dialogs/postscriptdialog.cpp           |   4 +-
 src/dialogs/quickdocumentdialog.cpp        |  10 +-
 src/dialogs/quickdocumentdialog.h          |   2 +-
 src/dialogs/tabular/newtabulardialog.cpp   |   4 +-
 src/dialogs/tabular/tabularcell.h          |   2 +-
 src/dialogs/tabular/tabularcelldelegate.h  |   2 +-
 src/dialogs/tabular/tabularheaderitem.h    |   2 +-
 src/dialogs/tabular/tabulartable.h         |   2 +-
 src/dialogs/texdocumentationdialog.h       |   2 +-
 src/dialogs/usermenu/usermenutree.h        |   2 +-
 src/docpart.h                              |   2 +-
 src/editorcommands.h                       |   2 +-
 src/editorextension.h                      |   2 +-
 src/editorkeysequencemanager.cpp           |   2 +-
 src/errorhandler.cpp                       |  20 +-
 src/kileactions.cpp                        |  14 +-
 src/kiledocmanager.cpp                     |   2 +-
 src/kileinfo.h                             |   2 +-
 src/kilelauncher.cpp                       |   2 +-
 src/kilelyxserver.h                        |   2 +-
 src/kileproject.cpp                        |   2 +-
 src/kilestdactions.cpp                     | 416 ++++++++++-----------
 src/kiletool.cpp                           |   4 +-
 src/kiletoolmanager.cpp                    |  12 +-
 src/kileviewmanager.cpp                    |   6 +-
 src/kileviewmanager.h                      |   2 +-
 src/livepreview.cpp                        |   6 +-
 src/parser/parsermanager.cpp               |   8 +-
 src/parser/parserthread.h                  |   6 +-
 src/quickpreview.h                         |   2 +-
 src/scripting/kilescriptobject.h           |   4 +-
 src/scriptmanager.cpp                      |   6 +-
 src/templates.cpp                          |   2 +-
 src/templates.h                            |   2 +-
 src/userhelp.cpp                           |   2 +-
 src/usermenu/usermenu.cpp                  |   4 +-
 src/widgets/abbreviationview.cpp           |   2 +-
 src/widgets/abbreviationview.h             |   2 +-
 src/widgets/appearanceconfigwidget.h       |   2 +-
 src/widgets/codecompletionconfigwidget.cpp |   4 +-
 src/widgets/configcheckerwidget.h          |   2 +-
 src/widgets/environmentconfigwidget.h      |   2 +-
 src/widgets/filebrowserwidget.cpp          |   8 +-
 src/widgets/generalconfigwidget.h          |   2 +-
 src/widgets/graphicsconfigwidget.h         |   2 +-
 src/widgets/helpconfigwidget.h             |   2 +-
 src/widgets/latexconfigwidget.h            |   2 +-
 src/widgets/latextoolconfigwidget.h        |   2 +-
 src/widgets/livepreviewconfigwidget.h      |   2 +-
 src/widgets/logwidget.h                    |   4 +-
 src/widgets/maintoolconfigwidget.h         |   2 +-
 src/widgets/newdocumentwidget.h            |   2 +-
 src/widgets/outputview.h                   |   2 +-
 src/widgets/processtoolconfigwidget.h      |   2 +-
 src/widgets/progressdialog.h               |   2 +-
 src/widgets/projectview.cpp                |   4 +-
 src/widgets/quicktoolconfigwidget.cpp      |   2 +-
 src/widgets/quicktoolconfigwidget.h        |   2 +-
 src/widgets/scriptingconfigwidget.h        |   2 +-
 src/widgets/scriptsmanagementwidget.cpp    |   4 +-
 src/widgets/scriptsmanagementwidget.h      |   2 +-
 src/widgets/sidebar.h                      |   2 +-
 src/widgets/statusbar.h                    |   2 +-
 src/widgets/structureviewconfigwidget.h    |   2 +-
 src/widgets/structurewidget.cpp            |   6 +-
 src/widgets/symbolviewconfigwidget.h       |   2 +-
 src/widgets/toolconfigwidget.cpp           |  16 +-
 src/widgets/usermenuconfigwidget.h         |   2 +-
 74 files changed, 340 insertions(+), 340 deletions(-)

diff --git a/src/configtester.cpp b/src/configtester.cpp
index e61ec0ec..33072f9f 100644
--- a/src/configtester.cpp
+++ b/src/configtester.cpp
@@ -256,7 +256,7 @@ void TestToolInKileTest::call()
     // parsing is complete, which could trigger a "root document not found" error message.
     tool->setEntry("autoRun", "no");
     connect(tool, SIGNAL(done(KileTool::Base*,int,bool)), this, SLOT(handleToolExit(KileTool::Base*,int,bool)), Qt::UniqueConnection);
-    connect(tool, SIGNAL(failedToRun(KileTool::Base*, int)), this, SLOT(reportFailure()));
+    connect(tool, SIGNAL(failedToRun(KileTool::Base*,int)), this, SLOT(reportFailure()));
     m_ki->toolManager()->run(tool);
 }
 
diff --git a/src/configtester.h b/src/configtester.h
index c3902207..b5ccf13e 100644
--- a/src/configtester.h
+++ b/src/configtester.h
@@ -198,7 +198,7 @@ class Tester : public QObject
     Q_OBJECT
 
 public:
-    Tester(KileInfo *kileInfo, QObject *parent = 0);
+    explicit Tester(KileInfo *kileInfo, QObject *parent = 0);
     ~Tester();
 
     QStringList testGroups();
diff --git a/src/convert.h b/src/convert.h
index 49d07384..0500a9d5 100644
--- a/src/convert.h
+++ b/src/convert.h
@@ -81,7 +81,7 @@ private:
 class ConvertIO
 {
 public:
-    ConvertIO(KTextEditor::Document *doc);
+    explicit ConvertIO(KTextEditor::Document *doc);
     virtual ~ConvertIO() {}
 
     virtual void nextLine(); //read next line
diff --git a/src/dialogs/configcheckerdialog.h b/src/dialogs/configcheckerdialog.h
index e3654a63..f6bd3c13 100644
--- a/src/dialogs/configcheckerdialog.h
+++ b/src/dialogs/configcheckerdialog.h
@@ -40,7 +40,7 @@ class ConfigChecker : public KAssistantDialog
     Q_OBJECT
 
 public:
-    ConfigChecker(KileInfo *kileInfo, QWidget* parent = Q_NULLPTR);
+    explicit ConfigChecker(KileInfo *kileInfo, QWidget* parent = Q_NULLPTR);
     ~ConfigChecker();
 
 public Q_SLOTS:
diff --git a/src/dialogs/newtoolwizard.cpp b/src/dialogs/newtoolwizard.cpp
index 28d55017..486e1314 100644
--- a/src/dialogs/newtoolwizard.cpp
+++ b/src/dialogs/newtoolwizard.cpp
@@ -33,8 +33,8 @@ NewToolWizard::NewToolWizard(QWidget *parent, Qt::WindowFlags fl) : KAssistantDi
 
     buttonBox()->button(QDialogButtonBox::Help)->setVisible(false);
 
-    connect(this, SIGNAL(currentPageChanged(KPageWidgetItem*, KPageWidgetItem*)), this, SLOT(slotCurrentPageChanged(KPageWidgetItem*, KPageWidgetItem*)));
-    connect(m_leName, SIGNAL(textChanged(const QString &)), this, SLOT(nameChanged(const QString &)));
+    connect(this, SIGNAL(currentPageChanged(KPageWidgetItem*,KPageWidgetItem*)), this, SLOT(slotCurrentPageChanged(KPageWidgetItem*,KPageWidgetItem*)));
+    connect(m_leName, SIGNAL(textChanged(QString)), this, SLOT(nameChanged(QString)));
     setValid(toolNamePage, false);
 
     //setup the Behavior page (page 1)
diff --git a/src/dialogs/pdf-wizard/pdfdialog.cpp b/src/dialogs/pdf-wizard/pdfdialog.cpp
index 6abc5fac..c51d9ad1 100644
--- a/src/dialogs/pdf-wizard/pdfdialog.cpp
+++ b/src/dialogs/pdf-wizard/pdfdialog.cpp
@@ -259,7 +259,7 @@ void PdfDialog::initUtilities()
 
     // if we found at least one utility, we can enable some connections
     if ( m_pdftk || m_pdfpages) {
-        connect(m_PdfDialog.m_edOutfile->lineEdit(), SIGNAL(textChanged(const QString &)), this, SLOT(slotOutputfileChanged(const QString &)));
+        connect(m_PdfDialog.m_edOutfile->lineEdit(), SIGNAL(textChanged(QString)), this, SLOT(slotOutputfileChanged(QString)));
         connect(m_PdfDialog.m_cbOverwrite, SIGNAL(stateChanged(int)), this, SLOT(slotOverwriteChanged(int)));
         connect(m_cbTask, SIGNAL(activated(int)), this, SLOT(slotTaskChanged(int)));
     }
@@ -1070,8 +1070,8 @@ void PdfDialog::executeScript(const QString &command, const QString &dir, int sc
             this, SLOT(slotProcessOutput()));
     connect(m_proc, SIGNAL(readyReadStandardError()),
             this, SLOT(slotProcessOutput()));
-    connect(m_proc, SIGNAL(finished(int, QProcess::ExitStatus)),
-            this, SLOT(slotProcessExited(int, QProcess::ExitStatus)));
+    connect(m_proc, SIGNAL(finished(int,QProcess::ExitStatus)),
+            this, SLOT(slotProcessExited(int,QProcess::ExitStatus)));
 
     KILE_DEBUG_MAIN << "=== PdfDialog::runPdfutils() ====================";
     KILE_DEBUG_MAIN << "execute '" << command << "'";
diff --git a/src/dialogs/postscriptdialog.cpp b/src/dialogs/postscriptdialog.cpp
index 63b5c97b..d6fd61a2 100644
--- a/src/dialogs/postscriptdialog.cpp
+++ b/src/dialogs/postscriptdialog.cpp
@@ -231,8 +231,8 @@ void PostscriptDialog::execute()
                 this, SLOT(slotProcessOutput()));
         connect(m_proc, SIGNAL(readyReadStandardError()),
                 this, SLOT(slotProcessOutput()));
-        connect(m_proc, SIGNAL(finished(int, QProcess::ExitStatus)),
-                this, SLOT(slotProcessExited(int, QProcess::ExitStatus)));
+        connect(m_proc, SIGNAL(finished(int,QProcess::ExitStatus)),
+                this, SLOT(slotProcessExited(int,QProcess::ExitStatus)));
 
         KILE_DEBUG_MAIN << "=== PostscriptDialog::runPsutils() ====================";
         KILE_DEBUG_MAIN << "   execute '" << m_tempfile << "'";
diff --git a/src/dialogs/quickdocumentdialog.cpp b/src/dialogs/quickdocumentdialog.cpp
index 9915570e..e0dfd8f7 100644
--- a/src/dialogs/quickdocumentdialog.cpp
+++ b/src/dialogs/quickdocumentdialog.cpp
@@ -225,8 +225,8 @@ QWidget *QuickDocument::setupClassOptions(QTabWidget *tab)
     gl->addWidget(m_lvClassOptions, 4, 1, 1, 3);
     connect(m_lvClassOptions, SIGNAL(itemSelectionChanged()),
             this, SLOT(slotEnableButtons()));
-    connect(m_lvClassOptions, SIGNAL(itemDoubleClicked(QTreeWidgetItem*, int)),
-            this, SLOT(slotOptionDoubleClicked(QTreeWidgetItem*, int)));
+    connect(m_lvClassOptions, SIGNAL(itemDoubleClicked(QTreeWidgetItem*,int)),
+            this, SLOT(slotOptionDoubleClicked(QTreeWidgetItem*,int)));
 
     label = new QLabel(i18n("Cl&ass options:"), classOptions);
     label->setBuddy(m_lvClassOptions);
@@ -279,13 +279,13 @@ QWidget *QuickDocument::setupPackages(QTabWidget *tab)
     m_lvPackages->setAllColumnsShowFocus(true);
     m_lvPackages->setItemDelegateForColumn(1, new EditableItemDelegate());
     label->setBuddy(m_lvPackages);
-    connect(m_lvPackages, SIGNAL(itemClicked(QTreeWidgetItem*, int)),
+    connect(m_lvPackages, SIGNAL(itemClicked(QTreeWidgetItem*,int)),
             this, SLOT(slotCheckParent(QTreeWidgetItem*)));
-    connect(m_lvPackages, SIGNAL(itemChanged(QTreeWidgetItem*, int)),
+    connect(m_lvPackages, SIGNAL(itemChanged(QTreeWidgetItem*,int)),
             this, SLOT(slotCheckParent(QTreeWidgetItem*)));
     connect(m_lvPackages, SIGNAL(itemSelectionChanged()),
             this, SLOT(slotEnableButtons()));
-    connect(m_lvPackages, SIGNAL(itemDoubleClicked(QTreeWidgetItem*, int)),
+    connect(m_lvPackages, SIGNAL(itemDoubleClicked(QTreeWidgetItem*,int)),
             this, SLOT(slotPackageDoubleClicked(QTreeWidgetItem*)));
 
     QWidget *frame = new QWidget(packages);
diff --git a/src/dialogs/quickdocumentdialog.h b/src/dialogs/quickdocumentdialog.h
index 389180b9..ffd78174 100644
--- a/src/dialogs/quickdocumentdialog.h
+++ b/src/dialogs/quickdocumentdialog.h
@@ -206,7 +206,7 @@ private Q_SLOTS:
 class QuickDocumentInputDialog : public QDialog {
     Q_OBJECT
 public:
-    QuickDocumentInputDialog(const QStringList &list, int check = 0,
+    explicit QuickDocumentInputDialog(const QStringList &list, int check = 0,
                              QuickDocument *parent = 0, const char *name = 0);
     ~QuickDocumentInputDialog();
 
diff --git a/src/dialogs/tabular/newtabulardialog.cpp b/src/dialogs/tabular/newtabulardialog.cpp
index 344d103f..35cb9abd 100644
--- a/src/dialogs/tabular/newtabulardialog.cpp
+++ b/src/dialogs/tabular/newtabulardialog.cpp
@@ -99,11 +99,11 @@ NewTabularDialog::NewTabularDialog(const QString &environment, KileDocument::Lat
     m_acBackground = new SelectColorAction(QIcon::fromTheme("format-fill-color"), i18n("Background Color"), page);
     m_acBackground->setIcon(generateColorIcon(true));
     connect(m_acBackground, SIGNAL(triggered(bool)), this, SLOT(slotCurrentBackground()));
-    connect(m_acBackground, SIGNAL(colorSelected(const QColor&)), this, SLOT(slotBackground(const QColor&)));
+    connect(m_acBackground, SIGNAL(colorSelected(QColor)), this, SLOT(slotBackground(QColor)));
     m_tbFormat->addAction(m_acBackground);
     m_acForeground = new SelectColorAction(QIcon::fromTheme("format-stroke-color"), i18n("Text Color"), page);
     m_acForeground->setIcon(generateColorIcon(false));
-    connect(m_acForeground, SIGNAL(colorSelected(const QColor&)), this, SLOT(slotForeground(const QColor&)));
+    connect(m_acForeground, SIGNAL(colorSelected(QColor)), this, SLOT(slotForeground(QColor)));
     connect(m_acForeground, SIGNAL(triggered(bool)), this, SLOT(slotCurrentForeground()));
     m_tbFormat->addAction(m_acForeground);
 
diff --git a/src/dialogs/tabular/tabularcell.h b/src/dialogs/tabular/tabularcell.h
index cd6cea04..118f2ca0 100644
--- a/src/dialogs/tabular/tabularcell.h
+++ b/src/dialogs/tabular/tabularcell.h
@@ -31,7 +31,7 @@ public:
     enum { None = 0, Left = 1, Top = 2, Right = 4, Bottom = 8 };
 
     TabularCell();
-    TabularCell(const QString &text);
+    explicit TabularCell(const QString &text);
 
     void setBorder(int border);
     int border() const;
diff --git a/src/dialogs/tabular/tabularcelldelegate.h b/src/dialogs/tabular/tabularcelldelegate.h
index ebd445a0..caee042b 100644
--- a/src/dialogs/tabular/tabularcelldelegate.h
+++ b/src/dialogs/tabular/tabularcelldelegate.h
@@ -28,7 +28,7 @@ namespace KileDialog {
 
 class TabularCellDelegate : public QStyledItemDelegate {
 public:
-    TabularCellDelegate(QTableWidget *parent = 0);
+    explicit TabularCellDelegate(QTableWidget *parent = 0);
 
     virtual void paint(QPainter *painter, const QStyleOptionViewItem &option, const QModelIndex &index) const;
 
diff --git a/src/dialogs/tabular/tabularheaderitem.h b/src/dialogs/tabular/tabularheaderitem.h
index 83f52684..607d780f 100644
--- a/src/dialogs/tabular/tabularheaderitem.h
+++ b/src/dialogs/tabular/tabularheaderitem.h
@@ -30,7 +30,7 @@ class TabularHeaderItem : public QObject, public QTableWidgetItem {
 public:
     enum { AlignP = 0x0200, AlignB = 0x0400, AlignM = 0x0800, AlignX = 0x1000 };
 
-    TabularHeaderItem(QWidget *parent);
+    explicit TabularHeaderItem(QWidget *parent);
 
     void setAlignment(int alignment);
     int alignment() const;
diff --git a/src/dialogs/tabular/tabulartable.h b/src/dialogs/tabular/tabulartable.h
index dc4799b6..933a1634 100644
--- a/src/dialogs/tabular/tabulartable.h
+++ b/src/dialogs/tabular/tabulartable.h
@@ -28,7 +28,7 @@ class TabularTable : public QTableWidget {
     Q_OBJECT
 
 public:
-    TabularTable(QWidget *parent = 0);
+    explicit TabularTable(QWidget *parent = 0);
 
 public Q_SLOTS:
     void paste();
diff --git a/src/dialogs/texdocumentationdialog.h b/src/dialogs/texdocumentationdialog.h
index 7a850e7b..1e2ea476 100644
--- a/src/dialogs/texdocumentationdialog.h
+++ b/src/dialogs/texdocumentationdialog.h
@@ -41,7 +41,7 @@ class TexDocDialog : public QDialog
     Q_OBJECT
 
 public:
-    TexDocDialog(QWidget *parent = 0);
+    explicit TexDocDialog(QWidget *parent = 0);
     ~TexDocDialog();
 
 private:
diff --git a/src/dialogs/usermenu/usermenutree.h b/src/dialogs/usermenu/usermenutree.h
index 5ad86d76..28ccd8db 100644
--- a/src/dialogs/usermenu/usermenutree.h
+++ b/src/dialogs/usermenu/usermenutree.h
@@ -36,7 +36,7 @@ class UserMenuTree : public QTreeWidget
     Q_OBJECT
 
 public:
-    UserMenuTree(QWidget *parent);
+    explicit UserMenuTree(QWidget *parent);
     ~UserMenuTree() {}
 
     bool insertMenuItem(QTreeWidgetItem *current, bool below=true);
diff --git a/src/docpart.h b/src/docpart.h
index ec509e62..0f0740f8 100644
--- a/src/docpart.h
+++ b/src/docpart.h
@@ -24,7 +24,7 @@ class DocumentationViewer : public KHTMLPart
     Q_OBJECT
 
 public:
-    DocumentationViewer(QWidget *parent = Q_NULLPTR);
+    explicit DocumentationViewer(QWidget *parent = Q_NULLPTR);
     ~DocumentationViewer();
 
     bool backEnable();
diff --git a/src/editorcommands.h b/src/editorcommands.h
index ee89594c..a8b76906 100644
--- a/src/editorcommands.h
+++ b/src/editorcommands.h
@@ -27,7 +27,7 @@ class KileInfo;
  **/
 class EditorCommands : public KTextEditor::Command {
 public:
-    EditorCommands(KileInfo *info);
+    explicit EditorCommands(KileInfo *info);
     virtual ~EditorCommands();
 
     virtual bool exec(KTextEditor::View *view, const QString &cmd, QString &msg,
diff --git a/src/editorextension.h b/src/editorextension.h
index d8f8ae9b..938dd01e 100644
--- a/src/editorextension.h
+++ b/src/editorextension.h
@@ -39,7 +39,7 @@ class EditorExtension : public QObject
     Q_OBJECT
 
 public:
-    EditorExtension(KileInfo *);
+    explicit EditorExtension(KileInfo *);
     ~EditorExtension();
 
     enum EnvType {EnvNone, EnvList, EnvTab, EnvCrTab};
diff --git a/src/editorkeysequencemanager.cpp b/src/editorkeysequencemanager.cpp
index 986a0893..645149df 100644
--- a/src/editorkeysequencemanager.cpp
+++ b/src/editorkeysequencemanager.cpp
@@ -163,7 +163,7 @@ QPair<int, QString> Manager::checkSequence(const QString& seq, const QString& sk
 Recorder::Recorder(KTextEditor::View *view, Manager *manager) : QObject(view), m_manager(manager), m_view(view)
 {
     connect(m_manager, SIGNAL(watchedKeySequencesChanged()), this, SLOT(reloadWatchedKeySequences()));
-    connect(this, SIGNAL(detectedTypedKeySequence(const QString&)), m_manager, SLOT(keySequenceTyped(const QString&)));
+    connect(this, SIGNAL(detectedTypedKeySequence(QString)), m_manager, SLOT(keySequenceTyped(QString)));
     KTextEditor::Cursor cursor = m_view->cursorPosition();
     m_oldLine = cursor.line();
     m_oldCol = cursor.column();
diff --git a/src/errorhandler.cpp b/src/errorhandler.cpp
index 25d6d7c8..89b32596 100644
--- a/src/errorhandler.cpp
+++ b/src/errorhandler.cpp
@@ -54,21 +54,21 @@ KileErrorHandler::KileErrorHandler(QObject *parent, KileInfo *info, KActionColle
     m_mainLogWidget->setFocusPolicy(Qt::ClickFocus);
     m_mainLogWidget->setMinimumHeight(40);
 
-    connect(m_mainLogWidget, SIGNAL(outputInfoSelected(const OutputInfo&)),
-            this, SLOT(jumpToProblem(const OutputInfo&)));
+    connect(m_mainLogWidget, SIGNAL(outputInfoSelected(OutputInfo)),
+            this, SLOT(jumpToProblem(OutputInfo)));
     connect(m_mainLogWidget, SIGNAL(showingErrorMessage(QWidget*)),
             this, SIGNAL(showingErrorMessage(QWidget*)));
     connect(m_mainLogWidget, SIGNAL(showingErrorMessage(QWidget*)),
             this, SLOT(showMessagesOutput()));
     m_errorLogWidget = new KileWidget::LogWidget(KileWidget::LogWidget::NoHideActions);
-    connect(m_errorLogWidget, SIGNAL(outputInfoSelected(const OutputInfo&)),
-            this, SLOT(jumpToProblem(const OutputInfo&)));
+    connect(m_errorLogWidget, SIGNAL(outputInfoSelected(OutputInfo)),
+            this, SLOT(jumpToProblem(OutputInfo)));
     m_warningLogWidget = new KileWidget::LogWidget(KileWidget::LogWidget::NoHideActions);
-    connect(m_warningLogWidget, SIGNAL(outputInfoSelected(const OutputInfo&)),
-            this, SLOT(jumpToProblem(const OutputInfo&)));
+    connect(m_warningLogWidget, SIGNAL(outputInfoSelected(OutputInfo)),
+            this, SLOT(jumpToProblem(OutputInfo)));
     m_badBoxLogWidget = new KileWidget::LogWidget(KileWidget::LogWidget::NoHideActions);
-    connect(m_badBoxLogWidget, SIGNAL(outputInfoSelected(const OutputInfo&)),
-            this, SLOT(jumpToProblem(const OutputInfo&)));
+    connect(m_badBoxLogWidget, SIGNAL(outputInfoSelected(OutputInfo)),
+            this, SLOT(jumpToProblem(OutputInfo)));
 
     // FIXME: suggestions for icons: utilities-log-viewer, script-error, dialog-warning
     m_outputTabWidget = new QTabWidget();
@@ -271,8 +271,8 @@ void KileErrorHandler::handleSpawnedChildTool(KileTool::Base *parent, KileTool::
         return;
     }
 
-    connect(child, SIGNAL(done(KileTool::Base*, int, bool)),
-            this, SLOT(handleLaTeXToolDone(KileTool::Base*, int, bool)));
+    connect(child, SIGNAL(done(KileTool::Base*,int,bool)),
+            this, SLOT(handleLaTeXToolDone(KileTool::Base*,int,bool)));
 }
 
 void KileErrorHandler::updateCurrentLaTeXOutputHandler()
diff --git a/src/kileactions.cpp b/src/kileactions.cpp
index c373751d..d4f2a0df 100644
--- a/src/kileactions.cpp
+++ b/src/kileactions.cpp
@@ -116,7 +116,7 @@ Tag::~Tag()
 void Tag::init(const QObject *receiver, const char *slot)
 {
     connect(this, SIGNAL(triggered()), SLOT(emitData()));
-    connect(this, SIGNAL(triggered(const KileAction::TagData&)), receiver, slot);
+    connect(this, SIGNAL(triggered(KileAction::TagData)), receiver, slot);
 }
 
 void Tag::emitData()
@@ -256,8 +256,8 @@ InputDialog::InputDialog(const QString &caption, uint options, const QStringList
         input->setMinimumWidth(300);
         focus = input;
 
-        connect(input, SIGNAL(textChanged(const QString&)), this, SLOT(setTag(const QString&)));
-        connect(this,  SIGNAL(setInput(const QString&)), input, SLOT(setEditText(const QString&)));
+        connect(input, SIGNAL(textChanged(QString)), this, SLOT(setTag(QString)));
+        connect(this,  SIGNAL(setInput(QString)), input, SLOT(setEditText(QString)));
         if(options & KileAction::ShowBrowseButton) {
             gbox->addWidget(input, 1, 0);
         }
@@ -294,8 +294,8 @@ InputDialog::InputDialog(const QString &caption, uint options, const QStringList
         input->setMinimumWidth(300);
         focus = input;
 
-        connect(input, SIGNAL(textChanged(const QString&)), this, SLOT(setTag(const QString&)));
-        connect(this,  SIGNAL(setInput(const QString&)), input, SLOT(setText(const QString&)));
+        connect(input, SIGNAL(textChanged(QString)), this, SLOT(setTag(QString)));
+        connect(this,  SIGNAL(setInput(QString)), input, SLOT(setText(QString)));
         if(options & KileAction::ShowBrowseButton) {
             gbox->addWidget(input, 1, 0);
         }
@@ -603,8 +603,8 @@ QWidget* ToolbarSelectAction::createWidget(QWidget *parent)
     button->setPopupMode(QToolButton::MenuButtonPopup);
     button->setIconSize(parentToolBar->iconSize());
     button->setToolButtonStyle(parentToolBar->toolButtonStyle());
-    connect(parent, SIGNAL(iconSizeChanged(const QSize&)),
-            button, SLOT(setIconSize(const QSize&)));
+    connect(parent, SIGNAL(iconSizeChanged(QSize)),
+            button, SLOT(setIconSize(QSize)));
     connect(parent, SIGNAL(toolButtonStyleChanged(Qt::ToolButtonStyle)),
             button, SLOT(setToolButtonStyle(Qt::ToolButtonStyle)));
     button->setDefaultAction(this);
diff --git a/src/kiledocmanager.cpp b/src/kiledocmanager.cpp
index 29e95f65..1d67a6b6 100644
--- a/src/kiledocmanager.cpp
+++ b/src/kiledocmanager.cpp
@@ -1376,7 +1376,7 @@ void Manager::addProject(KileProject *project)
     m_projects.append(project);
     KILE_DEBUG_MAIN << "\tnow " << m_projects.count() << " projects";
     emit addToProjectView(project);
-    connect(project, SIGNAL(projectTreeChanged(const KileProject *)), this, SIGNAL(projectTreeChanged(const KileProject *)));
+    connect(project, SIGNAL(projectTreeChanged(const KileProject*)), this, SIGNAL(projectTreeChanged(const KileProject*)));
 }
 
 KileProject* Manager::selectProject(const QString& caption)
diff --git a/src/kileinfo.h b/src/kileinfo.h
index ff889885..992be3e5 100644
--- a/src/kileinfo.h
+++ b/src/kileinfo.h
@@ -106,7 +106,7 @@ class KileInfo
     friend class KileMainWindow;
 
 public:
-    KileInfo(KParts::MainWindow *mainWindow);
+    explicit KileInfo(KParts::MainWindow *mainWindow);
     virtual ~KileInfo();
 
 public:
diff --git a/src/kilelauncher.cpp b/src/kilelauncher.cpp
index edf1cd7c..c0bcdf9d 100644
--- a/src/kilelauncher.cpp
+++ b/src/kilelauncher.cpp
@@ -62,7 +62,7 @@ ProcessLauncher::ProcessLauncher() :
     m_proc->setReadChannel(QProcess::StandardOutput);
 
     connect(m_proc, SIGNAL(readyReadStandardOutput()), this, SLOT(slotProcessOutput()));
-    connect(m_proc, SIGNAL(finished(int, QProcess::ExitStatus)), this, SLOT(slotProcessExited(int, QProcess::ExitStatus)));
+    connect(m_proc, SIGNAL(finished(int,QProcess::ExitStatus)), this, SLOT(slotProcessExited(int,QProcess::ExitStatus)));
     connect(m_proc, SIGNAL(error(QProcess::ProcessError)), this, SLOT(slotProcessError(QProcess::ProcessError)));
 }
 
diff --git a/src/kilelyxserver.h b/src/kilelyxserver.h
index ebe1796b..e64e0058 100644
--- a/src/kilelyxserver.h
+++ b/src/kilelyxserver.h
@@ -52,7 +52,7 @@ class KileLyxServer : public QObject
     Q_OBJECT
 
 public:
-    KileLyxServer(bool start = true);
+    explicit KileLyxServer(bool start = true);
     ~KileLyxServer();
 
     bool isRunning() {
diff --git a/src/kileproject.cpp b/src/kileproject.cpp
index bd4e333c..d7a125c6 100644
--- a/src/kileproject.cpp
+++ b/src/kileproject.cpp
@@ -220,7 +220,7 @@ void KileProjectItem::setInfo(KileDocument::TextInfo *docinfo)
     m_docinfo = docinfo;
     if(docinfo)
     {
-        connect(docinfo,SIGNAL(urlChanged(KileDocument::Info*, const QUrl &)), this, SLOT(slotChangeURL(KileDocument::Info*, const QUrl &)));
+        connect(docinfo,SIGNAL(urlChanged(KileDocument::Info*,QUrl)), this, SLOT(slotChangeURL(KileDocument::Info*,QUrl)));
         connect(docinfo,SIGNAL(depChanged()), m_project, SLOT(buildProjectTree()));
     }
 }
diff --git a/src/kilestdactions.cpp b/src/kilestdactions.cpp
index e6da6aa4..7c911728 100644
--- a/src/kilestdactions.cpp
+++ b/src/kilestdactions.cpp
@@ -28,115 +28,115 @@ namespace KileStdActions
 
 void setupStdTags(KileInfo *ki, const QObject* receiver, KActionCollection *actionCollection, QWidget *parentWidget)
 {
-    (void) new KileAction::Tag(i18n("Document Class Selection - \\documentclass{}"), i18n("Document Class"), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection, "tag_documentclass",
+    (void) new KileAction::Tag(i18n("Document Class Selection - \\documentclass{}"), i18n("Document Class"), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection, "tag_documentclass",
                                "\\documentclass[10pt]{","}", 21, 0, i18n("\\documentclass[options]{class}\nclass : article,report,book,letter\nsize options : 10pt, 11pt, 12pt\npaper size options: a4paper, a5paper, b5paper, letterpaper, legalpaper, executivepaper\n"
                                        "other options: \nlandscape -- selects landscape format; default is portrait. \ntitlepage, notitlepage -- selects if there should be a separate title page.\nleqno -- display equation number on left side of equations; default is right side.\n"
                                        "fleqn -- display formulae flush left; default is centered.\nonecolumn, twocolumn -- one or two columns; defaults to one column\noneside, twoside -- selects one- or two-sided layout.\n" ));
 
-    (void) new KileAction::Tag(i18n("Package Import - \\usepackage{}"), i18n("Package Import"), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_usepackage",
+    (void) new KileAction::Tag(i18n("Package Import - \\usepackage{}"), i18n("Package Import"), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_usepackage",
                                "\\usepackage{","}", 12, 0, i18n("Any options given in the \\documentclass command that are unknown by the selected document class\n"
                                        "are passed on to the packages loaded with \\usepackage."));
 
-    (void) new KileAction::Tag(i18n("AMS Packages"), QString(), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_amspackages","\\usepackage{amsmath}\n\\usepackage{amsfonts}\n\\usepackage{amssymb}\n",QString(),0,3,i18n("The principal American Mathematical Society packages"));
-    (void) new KileAction::Tag(i18n("Start Document Body - \\begin{document}"), i18n("Start Document Body"), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_env_document","\\begin{document}\n", "\n\\end{document}", 0,1,i18n("Text is allowed only between \\begin{document} and \\end{document}.\nThe 'preamble' (before \\begin{document} ) may contain declarations only."));
-    (void) new KileAction::Tag(i18n("Generate Title - \\maketitle"), i18n("Generate Title"), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_maketitle","\\maketitle",QString(),10,0,i18n("This command generates a title on a separate title page\n- except in the article class, where the title normally goes at the top of the first page."));
-    (void) new KileAction::Tag(i18n("Table of Contents - \\tableofcontents"), i18n("Table of Contents"), "view-table-of-contents-ltr", QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_tableofcontents","\\tableofcontents",QString(),16,0,i18n("Put this command where you want the table of contents to go"));
-    (void) new KileAction::Tag(i18n("Title Definition - \\title{}"), i18n("Title Definition"), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_title","\\title{","}",7,0,i18n( "\\title{text}\nThe \\title command declares text to be the title.\nUse \\\\ to tell LaTeX where to start a new line in a long title."));
-    (void) new KileAction::Tag(i18n("Author Definition - \\author{}"), i18n("Author Definition"), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_author","\\author{","}",8,0,i18n( "\\author{names}\nThe \\author command declares the author(s), where names is a list of authors separated by \\and commands."));
-
-    (void) new KileAction::Tag(i18n("Center - \\begin{center}"), i18n("Center"), "format-justify-center", QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_center", "\\begin{center}\n","%E\n\\end{center}", 0,1, i18n("Each line must be terminated with the string \\\\."));
-    (void) new KileAction::Tag(i18n("Align Left - \\begin{flushleft}"), i18n("Align Left"), "format-justify-left", QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_flushleft", "\\begin{flushleft}\n","%E\n\\end{flushleft}", 0,1, i18n("Each line must be terminated with the string \\\\.") );
-    (void) new KileAction::Tag(i18n("Align Right - \\begin{flushright}"), i18n("Align Right"), "format-justify-right", QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_flushright", "\\begin{flushright}\n","%E\n\\end{flushright}", 0,1, i18n("Each line must be terminated with the string \\\\.") );
-    (void) new KileAction::Tag(i18n("Quote - \\begin{quote}"), i18n("Quote"), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_quote","\\begin{quote}\n","%E\n\\end{quote} ",0,1,i18n("The text is justified at both margins.\nLeaving a blank line between text produces a new paragraph.") );
-    (void) new KileAction::Tag(i18n("Quotation - \\begin{quotation}"), i18n("Quotation"), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_quotation","\\begin{quotation}\n","%E\n\\end{quotation} ",0,1, i18n("The text is justified at both margins and there is paragraph indentation.\nLeaving a blank line between text produces a new paragraph.") );
-    (void) new KileAction::Tag(i18n("Verse - \\begin{verse}"), i18n("Verse"), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_verse", "\\begin{verse}\n","%E\n\\end{verse} ",0,1,i18n("The verse environment is designed for poetry.\nSeparate the lines of each stanza with \\\\, and use one or more blank lines to separate the stanzas.") );
-
-    (void) new KileAction::Tag(i18n("Verbatim - \\begin{verbatim}"), i18n("Verbatim"), "verbatim", QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_verbatim","\\begin{verbatim}\n","%E\n\\end{verbatim} ",0,1,i18n("Environment that gets LaTeX to print exactly what you type in."));
-    (void) new KileAction::Tag(i18n("Bulleted List - \\begin{itemize}"), i18n("Bulleted List"), "itemize", QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_env_itemize","\\begin{itemize}\n%E\\item \n", "\\end{itemize}\n", 6,1,i18n("The itemize environment produces a 'bulleted' list.\nEach item of an itemized list begins with an \\item command."));
-    (void) new KileAction::Tag(i18n("Enumeration - \\begin{enumerate}"), i18n("Enumeration"), "enumerate", QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_env_enumerate","\\begin{enumerate}\n%E\\item \n","\\end{enumerate}\n", 6,1,i18n("The enumerate environment produces a numbered list.\nEach item of an enumerated list begins with an \\item command."));
-    (void) new KileAction::Tag(i18n("Description - \\begin{description}"), i18n("Description"), "description", QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_env_description","\\begin{description}\n%E\\item[] \n", "\\end{description}",6,1,i18n("The description environment is used to make labeled lists.\nEach item of the list begins with an \\item[label] command.\nThe 'label' is bold face and flushed right."));
-
-    (void) new KileAction::Tag(i18n("Table - \\begin{table}"), i18n("Table"), "table-env", QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_table","\\begin{table}\n","%E\n\\caption{}\n\\end{table} ",0,1,
+    (void) new KileAction::Tag(i18n("AMS Packages"), QString(), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_amspackages","\\usepackage{amsmath}\n\\usepackage{amsfonts}\n\\usepackage{amssymb}\n",QString(),0,3,i18n("The principal American Mathematical Society packages"));
+    (void) new KileAction::Tag(i18n("Start Document Body - \\begin{document}"), i18n("Start Document Body"), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_env_document","\\begin{document}\n", "\n\\end{document}", 0,1,i18n("Text is allowed only between \\begin{document} and \\end{document}.\nThe 'preamble' (before \\begin{document} ) may contain declarations only."));
+    (void) new KileAction::Tag(i18n("Generate Title - \\maketitle"), i18n("Generate Title"), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_maketitle","\\maketitle",QString(),10,0,i18n("This command generates a title on a separate title page\n- except in the article class, where the title normally goes at the top of the first page."));
+    (void) new KileAction::Tag(i18n("Table of Contents - \\tableofcontents"), i18n("Table of Contents"), "view-table-of-contents-ltr", QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_tableofcontents","\\tableofcontents",QString(),16,0,i18n("Put this command where you want the table of contents to go"));
+    (void) new KileAction::Tag(i18n("Title Definition - \\title{}"), i18n("Title Definition"), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_title","\\title{","}",7,0,i18n( "\\title{text}\nThe \\title command declares text to be the title.\nUse \\\\ to tell LaTeX where to start a new line in a long title."));
+    (void) new KileAction::Tag(i18n("Author Definition - \\author{}"), i18n("Author Definition"), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_author","\\author{","}",8,0,i18n( "\\author{names}\nThe \\author command declares the author(s), where names is a list of authors separated by \\and commands."));
+
+    (void) new KileAction::Tag(i18n("Center - \\begin{center}"), i18n("Center"), "format-justify-center", QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_center", "\\begin{center}\n","%E\n\\end{center}", 0,1, i18n("Each line must be terminated with the string \\\\."));
+    (void) new KileAction::Tag(i18n("Align Left - \\begin{flushleft}"), i18n("Align Left"), "format-justify-left", QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_flushleft", "\\begin{flushleft}\n","%E\n\\end{flushleft}", 0,1, i18n("Each line must be terminated with the string \\\\.") );
+    (void) new KileAction::Tag(i18n("Align Right - \\begin{flushright}"), i18n("Align Right"), "format-justify-right", QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_flushright", "\\begin{flushright}\n","%E\n\\end{flushright}", 0,1, i18n("Each line must be terminated with the string \\\\.") );
+    (void) new KileAction::Tag(i18n("Quote - \\begin{quote}"), i18n("Quote"), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_quote","\\begin{quote}\n","%E\n\\end{quote} ",0,1,i18n("The text is justified at both margins.\nLeaving a blank line between text produces a new paragraph.") );
+    (void) new KileAction::Tag(i18n("Quotation - \\begin{quotation}"), i18n("Quotation"), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_quotation","\\begin{quotation}\n","%E\n\\end{quotation} ",0,1, i18n("The text is justified at both margins and there is paragraph indentation.\nLeaving a blank line between text produces a new paragraph.") );
+    (void) new KileAction::Tag(i18n("Verse - \\begin{verse}"), i18n("Verse"), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_verse", "\\begin{verse}\n","%E\n\\end{verse} ",0,1,i18n("The verse environment is designed for poetry.\nSeparate the lines of each stanza with \\\\, and use one or more blank lines to separate the stanzas.") );
+
+    (void) new KileAction::Tag(i18n("Verbatim - \\begin{verbatim}"), i18n("Verbatim"), "verbatim", QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_verbatim","\\begin{verbatim}\n","%E\n\\end{verbatim} ",0,1,i18n("Environment that gets LaTeX to print exactly what you type in."));
+    (void) new KileAction::Tag(i18n("Bulleted List - \\begin{itemize}"), i18n("Bulleted List"), "itemize", QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_env_itemize","\\begin{itemize}\n%E\\item \n", "\\end{itemize}\n", 6,1,i18n("The itemize environment produces a 'bulleted' list.\nEach item of an itemized list begins with an \\item command."));
+    (void) new KileAction::Tag(i18n("Enumeration - \\begin{enumerate}"), i18n("Enumeration"), "enumerate", QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_env_enumerate","\\begin{enumerate}\n%E\\item \n","\\end{enumerate}\n", 6,1,i18n("The enumerate environment produces a numbered list.\nEach item of an enumerated list begins with an \\item command."));
+    (void) new KileAction::Tag(i18n("Description - \\begin{description}"), i18n("Description"), "description", QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_env_description","\\begin{description}\n%E\\item[] \n", "\\end{description}",6,1,i18n("The description environment is used to make labeled lists.\nEach item of the list begins with an \\item[label] command.\nThe 'label' is bold face and flushed right."));
+
+    (void) new KileAction::Tag(i18n("Table - \\begin{table}"), i18n("Table"), "table-env", QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_table","\\begin{table}\n","%E\n\\caption{}\n\\end{table} ",0,1,
                                i18n("\\begin{table}[placement]\nbody of the table\n\\caption{table title}\n\\end{table}\nTables are objects that are not part of the normal text, and are usually floated to a convenient place.\n"
                                     "The optional argument [placement] determines where LaTeX will try to place your table\nh : Here - at the position in the text where the table environment appears\nt : Top - at the top of a text page\nb : Bottom - at the bottom of a text page\n"
                                     "p : Page of floats - on a separate float page, which is a page containing no text, only floats.\nThe body of the table is made up of whatever text or LaTeX commands, etc., you wish.\nThe \\caption command allows you to title your table."));
 
-    (void) new KileAction::Tag(i18n("Figure - \\begin{figure}"), i18n("Figure"), "figure-env", QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_figure","\\begin{figure}\n","%E\n\\caption{}\n\\end{figure} ",0,1,
+    (void) new KileAction::Tag(i18n("Figure - \\begin{figure}"), i18n("Figure"), "figure-env", QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_figure","\\begin{figure}\n","%E\n\\caption{}\n\\end{figure} ",0,1,
                                i18n("\\begin{figure}[placement]\nbody of the figure\n\\caption{figure title}\n\\end{figure}\nFigures are objects that are not part of the normal text, and are usually floated to a convenient place.\n"
                                     "The optional argument [placement] determines where LaTeX will try to place your figure\nh : Here - at the position in the text where the figure environment appears\nt : Top - at the top of a text page\n"
                                     "b : Bottom - at the bottom of a text page\np : Page of floats - on a separate float page, which is a page containing no text, only floats.\nThe body of the figure is made up of whatever text or LaTeX commands, etc., you wish.\nThe \\caption command allows you to title your figure."));
 
-    (void) new KileAction::Tag(i18n("Title Page - \\begin{titlepage}"), i18n("Title Page"), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_titlepage","\\begin{titlepage}\n","%E\n\\end{titlepage} ",0,1,
+    (void) new KileAction::Tag(i18n("Title Page - \\begin{titlepage}"), i18n("Title Page"), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_titlepage","\\begin{titlepage}\n","%E\n\\end{titlepage} ",0,1,
                                i18n("\\begin{titlepage}\ntext\n\\end{titlepage}\nThe titlepage environment creates a title page, i.e. a page with no printed page number or heading."));
 
-    new KileAction::Tag(i18n("Italics - \\textit{}"), i18n("Italics"), "format-text-italic", QKeySequence(Qt::ALT+Qt::SHIFT+Qt::Key_I), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_textit","\\textit{","}",8,0,i18n("\\textit{italic text}"));
-    new KileAction::Tag(i18n("Slanted - \\textsl{}"), i18n("Slanted"), "slanted", QKeySequence(Qt::ALT+Qt::SHIFT+Qt::Key_A), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_textsl","\\textsl{","}",8,0,i18n("\\textsl{slanted text}"));
-    new KileAction::Tag(i18n("Boldface - \\textbf{}"), i18n("Boldface"), "format-text-bold", QKeySequence(Qt::ALT+Qt::SHIFT+Qt::Key_B), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_textbf","\\textbf{","}",8,0,i18n("\\textbf{boldface text}"));
-    new KileAction::Tag(i18n("Typewriter - \\texttt{}"), i18n("Typewriter"), "typewriter", QKeySequence(Qt::ALT+Qt::SHIFT+Qt::Key_T), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_texttt","\\texttt{","}",8,0,i18n("\\texttt{typewriter text}"));
-    new KileAction::Tag(i18n("Small Caps - \\textsc{}"), i18n("Small Caps"), QKeySequence(Qt::ALT+Qt::SHIFT+Qt::Key_C), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_textsc","\\textsc{","}",8,0,i18n("\\textsc{small caps text}"));
-    new KileAction::Tag("\\item", QString(), "item", QKeySequence(Qt::ALT+Qt::SHIFT+Qt::Key_H), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_item","\\item ",QString(),6,0, i18n("\\item[label] Hello!"));
-
-    (void) new KileAction::Tag(i18n("Tabbing - \\begin{tabbing}"), i18n("Tabbing"), "tabbing", QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_env_tabbing","\\begin{tabbing}\n","%E\n\\end{tabbing} ",0,1,i18n("The tabbing environment provides a way to align text in columns.\n\\begin{tabbing}\ntext \\= more text \\= still more text \\= last text \\\\\nsecond row \\&gt;  \\&gt; more \\\\\n\\end{tabbing}\nCommands :\n\\=  Sets a tab stop at the current position.\n\\>  Advances to the next tab stop.\n\\&lt;  Allows you to put something to the left of the local margin without changing the margin. Can only be used at the start of the line.\n\\+  Moves the left margin of the next and all the following commands one tab stop to the right\n\\-  Moves the left margin of the next and all the following commands one tab stop to the left\n\\' Moves everything that you have typed so far in the current column to the right of the previous column, flush against the current column's tab stop. \n\\`  Allows you to put text flush right against any tab stop, including tab stop 0\n\\kill  Sets tab stops without producing text.\n\\a  In a tabbing environment, the commands \\=, \\' and \\` do not produce accents as normal. Instead, the commands \\a=, \\a' and \\a` are used."));
-    (void) new KileAction::Tag(i18n("Tabular - \\begin{tabular}"), i18n("Tabular"), "tabular", QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_env_tabular","\\begin{tabular}{","}\n%E\n\\end{tabular} ",16,0,i18n("\\begin{tabular}[pos]{cols}\ncolumn 1 entry & column 2 entry ... & column n entry \\\\\n...\n\\end{tabular}\npos : Specifies the vertical position; default is alignment on the center of the environment.\n     t - align on top row\n     b - align on bottom row\ncols : Specifies the column formatting.\n     l - A column of left-aligned items.\n     r - A column of right-aligned items.\n     c - A column of centered items.\n     | - A vertical line the full height and depth of the environment.\n     @{text} - this inserts text in every row.\nThe \\hline command draws a horizontal line the width of the table.\nThe \\cline{i-j} command draws horizontal lines across the columns specified, beginning in column i and ending in column j.\nThe \\vline command draws a vertical line extending the full height and depth of its row."));
-    (void) new KileAction::Tag(i18n("Multicolumn Cells - \\multicolumn"), i18n("Multicolumn Cells"), "multicolumn", QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)),actionCollection,"tag_multicolumn","\\multicolumn{","}{}{} ",13,0,i18n("\\multicolumn{cols}{pos}{text}\ncol, specifies the number of columns to span.\npos specifies the formatting of the entry: c for centered, l for flushleft, r for flushright.\ntext specifies what text is to make up the entry."));
-    (void) new KileAction::Tag(i18n("Horizontal Line - \\hline"), i18n("Horizontal Line"), "hline", QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_hline","\\hline ",QString(),7,0,i18n("The \\hline command draws a horizontal line the width of the table."));
-    (void) new KileAction::Tag(i18n("Vertical Line - \\vline"), i18n("Vertical Line"), "vline", QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_vline","\\vline ",QString(),7,0,i18n("The \\vline command draws a vertical line extending the full height and depth of its row."));
-    (void) new KileAction::Tag(i18n("Horizontal Line Across Columns - \\cline{m-n}"), i18n("Horizontal Line Across Columns"), "cline", QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_cline","\\cline{-} ",QString(),7,0,i18n("The \\cline{i-j} command draws horizontal lines across the columns specified, beginning in column i and ending in column j,"));
-
-    (void) new KileAction::Tag(i18n("New Page - \\newpage"), i18n("New Page"), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_newpage","\\newpage ",QString(),9,0,i18n("The \\newpage command ends the current page"));
-    (void) new KileAction::Tag(i18n("Line Break - \\linebreak"), i18n("Line Break"), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_linebreak","\\linebreak ",QString(),11,0,i18n("The \\linebreak command tells LaTeX to break the current line at the point of the command."));
-    (void) new KileAction::Tag(i18n("Page Break - \\pagebreak"), i18n("Page Break"), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_pagebreak","\\pagebreak ",QString(),11,0,i18n("The \\pagebreak command tells LaTeX to break the current page at the point of the command."));
-    (void) new KileAction::Tag(i18n("\"Big\" Vertical Space - \\bigskip"), i18n("\"Big\" Vertical Space"), "bigskip", QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_bigskip","\\bigskip ",QString(),9,0,i18n("The \\bigskip command adds a 'big' vertical space."));
-    (void) new KileAction::Tag(i18n("\"Medium\" Vertical Space - \\medskip"), i18n("\"Medium\" Vertical Space"), "medskip", QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_medskip","\\medskip ",QString(),9,0,i18n("The \\medskip command adds a 'medium' vertical space."));
+    new KileAction::Tag(i18n("Italics - \\textit{}"), i18n("Italics"), "format-text-italic", QKeySequence(Qt::ALT+Qt::SHIFT+Qt::Key_I), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_textit","\\textit{","}",8,0,i18n("\\textit{italic text}"));
+    new KileAction::Tag(i18n("Slanted - \\textsl{}"), i18n("Slanted"), "slanted", QKeySequence(Qt::ALT+Qt::SHIFT+Qt::Key_A), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_textsl","\\textsl{","}",8,0,i18n("\\textsl{slanted text}"));
+    new KileAction::Tag(i18n("Boldface - \\textbf{}"), i18n("Boldface"), "format-text-bold", QKeySequence(Qt::ALT+Qt::SHIFT+Qt::Key_B), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_textbf","\\textbf{","}",8,0,i18n("\\textbf{boldface text}"));
+    new KileAction::Tag(i18n("Typewriter - \\texttt{}"), i18n("Typewriter"), "typewriter", QKeySequence(Qt::ALT+Qt::SHIFT+Qt::Key_T), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_texttt","\\texttt{","}",8,0,i18n("\\texttt{typewriter text}"));
+    new KileAction::Tag(i18n("Small Caps - \\textsc{}"), i18n("Small Caps"), QKeySequence(Qt::ALT+Qt::SHIFT+Qt::Key_C), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_textsc","\\textsc{","}",8,0,i18n("\\textsc{small caps text}"));
+    new KileAction::Tag("\\item", QString(), "item", QKeySequence(Qt::ALT+Qt::SHIFT+Qt::Key_H), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_item","\\item ",QString(),6,0, i18n("\\item[label] Hello!"));
+
+    (void) new KileAction::Tag(i18n("Tabbing - \\begin{tabbing}"), i18n("Tabbing"), "tabbing", QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_env_tabbing","\\begin{tabbing}\n","%E\n\\end{tabbing} ",0,1,i18n("The tabbing environment provides a way to align text in columns.\n\\begin{tabbing}\ntext \\= more text \\= still more text \\= last text \\\\\nsecond row \\&gt;  \\&gt; more \\\\\n\\end{tabbing}\nCommands :\n\\=  Sets a tab stop at the current position.\n\\>  Advances to the next tab stop.\n\\&lt;  Allows you to put something to the left of the local margin without changing the margin. Can only be used at the start of the line.\n\\+  Moves the left margin of the next and all the following commands one tab stop to the right\n\\-  Moves the left margin of the next and all the following commands one tab stop to the left\n\\' Moves everything that you have typed so far in the current column to the right of the previous column, flush against the current column's tab stop. \n\\`  Allows you to put text flush right against any tab stop, including tab stop 0\n\\kill  Sets tab stops without producing text.\n\\a  In a tabbing environment, the commands \\=, \\' and \\` do not produce accents as normal. Instead, the commands \\a=, \\a' and \\a` are used."));
+    (void) new KileAction::Tag(i18n("Tabular - \\begin{tabular}"), i18n("Tabular"), "tabular", QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_env_tabular","\\begin{tabular}{","}\n%E\n\\end{tabular} ",16,0,i18n("\\begin{tabular}[pos]{cols}\ncolumn 1 entry & column 2 entry ... & column n entry \\\\\n...\n\\end{tabular}\npos : Specifies the vertical position; default is alignment on the center of the environment.\n     t - align on top row\n     b - align on bottom row\ncols : Specifies the column formatting.\n     l - A column of left-aligned items.\n     r - A column of right-aligned items.\n     c - A column of centered items.\n     | - A vertical line the full height and depth of the environment.\n     @{text} - this inserts text in every row.\nThe \\hline command draws a horizontal line the width of the table.\nThe \\cline{i-j} command draws horizontal lines across the columns specified, beginning in column i and ending in column j.\nThe \\vline command draws a vertical line extending the full height and depth of its row."));
+    (void) new KileAction::Tag(i18n("Multicolumn Cells - \\multicolumn"), i18n("Multicolumn Cells"), "multicolumn", QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)),actionCollection,"tag_multicolumn","\\multicolumn{","}{}{} ",13,0,i18n("\\multicolumn{cols}{pos}{text}\ncol, specifies the number of columns to span.\npos specifies the formatting of the entry: c for centered, l for flushleft, r for flushright.\ntext specifies what text is to make up the entry."));
+    (void) new KileAction::Tag(i18n("Horizontal Line - \\hline"), i18n("Horizontal Line"), "hline", QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_hline","\\hline ",QString(),7,0,i18n("The \\hline command draws a horizontal line the width of the table."));
+    (void) new KileAction::Tag(i18n("Vertical Line - \\vline"), i18n("Vertical Line"), "vline", QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_vline","\\vline ",QString(),7,0,i18n("The \\vline command draws a vertical line extending the full height and depth of its row."));
+    (void) new KileAction::Tag(i18n("Horizontal Line Across Columns - \\cline{m-n}"), i18n("Horizontal Line Across Columns"), "cline", QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_cline","\\cline{-} ",QString(),7,0,i18n("The \\cline{i-j} command draws horizontal lines across the columns specified, beginning in column i and ending in column j,"));
+
+    (void) new KileAction::Tag(i18n("New Page - \\newpage"), i18n("New Page"), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_newpage","\\newpage ",QString(),9,0,i18n("The \\newpage command ends the current page"));
+    (void) new KileAction::Tag(i18n("Line Break - \\linebreak"), i18n("Line Break"), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_linebreak","\\linebreak ",QString(),11,0,i18n("The \\linebreak command tells LaTeX to break the current line at the point of the command."));
+    (void) new KileAction::Tag(i18n("Page Break - \\pagebreak"), i18n("Page Break"), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_pagebreak","\\pagebreak ",QString(),11,0,i18n("The \\pagebreak command tells LaTeX to break the current page at the point of the command."));
+    (void) new KileAction::Tag(i18n("\"Big\" Vertical Space - \\bigskip"), i18n("\"Big\" Vertical Space"), "bigskip", QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_bigskip","\\bigskip ",QString(),9,0,i18n("The \\bigskip command adds a 'big' vertical space."));
+    (void) new KileAction::Tag(i18n("\"Medium\" Vertical Space - \\medskip"), i18n("\"Medium\" Vertical Space"), "medskip", QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_medskip","\\medskip ",QString(),9,0,i18n("The \\medskip command adds a 'medium' vertical space."));
 
     // includegraphics (dani)
     (void) new KileAction::Tag(i18n("Image Insertion - \\includegraphics{file}"), i18n("Image Insertion"), "insert-image", QKeySequence("Alt+I, G"),receiver,SLOT(includeGraphics()), actionCollection,"tag_includegraphics",0L);
     // two new shortcuts (dani)
-    (void) new KileAction::InputTag(ki, i18n("Customizable File Inclusion - \\include{file}"), i18n("Customizable File Inclusion"), "include-file", QKeySequence("Alt+I, F"), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_include", parentWidget, KileAction::KeepHistory | KileAction::ShowBrowseButton | KileAction::AddProjectFile, "\\include{%R","}",9,0, i18n("\\include{file}\nThe \\include command is used in conjunction with the \\includeonly command for selective inclusion of files."),i18n("Type or select a filename: "));
-    (void) new KileAction::InputTag(ki, i18n("File Inclusion - \\input{file}"), i18n("File Inclusion"), "input-file", QKeySequence("Alt+I, P"), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_input", parentWidget, KileAction::KeepHistory | KileAction::ShowBrowseButton | KileAction::AddProjectFile, "\\input{%R","}",7,0,i18n("\\input{file}\nThe \\input command causes the indicated file to be read and processed, exactly as if its contents had been inserted in the current file at that point."),i18n("Type or select a filename: "));
+    (void) new KileAction::InputTag(ki, i18n("Customizable File Inclusion - \\include{file}"), i18n("Customizable File Inclusion"), "include-file", QKeySequence("Alt+I, F"), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_include", parentWidget, KileAction::KeepHistory | KileAction::ShowBrowseButton | KileAction::AddProjectFile, "\\include{%R","}",9,0, i18n("\\include{file}\nThe \\include command is used in conjunction with the \\includeonly command for selective inclusion of files."),i18n("Type or select a filename: "));
+    (void) new KileAction::InputTag(ki, i18n("File Inclusion - \\input{file}"), i18n("File Inclusion"), "input-file", QKeySequence("Alt+I, P"), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_input", parentWidget, KileAction::KeepHistory | KileAction::ShowBrowseButton | KileAction::AddProjectFile, "\\input{%R","}",7,0,i18n("\\input{file}\nThe \\input command causes the indicated file to be read and processed, exactly as if its contents had been inserted in the current file at that point."),i18n("Type or select a filename: "));
 
     ToolbarSelectAction *actionstructure_list = new ToolbarSelectAction(i18n("Sectioning"), actionCollection,false);
     actionCollection->addAction("structure_list", actionstructure_list);
-    actionstructure_list->addAction(new KileAction::InputTag(ki,"&part", QString(), "part", QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_part", parentWidget, KileAction::ShowAlternative|KileAction::ShowLabel, "\\part%A{%R}","\n", 0,1,i18n("\\part{title}\n\\part*{title} : do not include a number and do not make an entry in the table of contents\n"), i18n("&Part"),i18n("No &numbering")));
+    actionstructure_list->addAction(new KileAction::InputTag(ki,"&part", QString(), "part", QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_part", parentWidget, KileAction::ShowAlternative|KileAction::ShowLabel, "\\part%A{%R}","\n", 0,1,i18n("\\part{title}\n\\part*{title} : do not include a number and do not make an entry in the table of contents\n"), i18n("&Part"),i18n("No &numbering")));
     actionstructure_list->addSeparator();
-    actionstructure_list->addAction(new KileAction::InputTag(ki,"&chapter", QString(), "chapter", QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_chapter", parentWidget, KileAction::ShowAlternative|KileAction::ShowLabel, "\\chapter%A{%R}","\n", 0,1,i18n("\\chapter{title}\n\\chapter*{title} : do not include a number and do not make an entry in the table of contents\nOnly for 'report' and 'book' class document."), i18n("C&hapter"),i18n("No &numbering")));
-    actionstructure_list->addAction(new KileAction::InputTag(ki,"&section", QString(), "section", QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_section", parentWidget, KileAction::ShowAlternative|KileAction::ShowLabel, "\\section%A{%R}","\n", 0,1,i18n("\\section{title}\n\\section*{title} : do not include a number and do not make an entry in the table of contents"), i18n("&Section"),i18n("No &numbering")));
-    actionstructure_list->addAction(new KileAction::InputTag(ki,"s&ubsection", QString(), "subsection", QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_subsection", parentWidget, KileAction::ShowAlternative|KileAction::ShowLabel, "\\subsection%A{%R}","\n", 0,1,i18n("\\subsection{title}\n\\subsection*{title} : do not include a number and do not make an entry in the table of contents"), i18n("&Subsection"),i18n("No &numbering")));
-    actionstructure_list->addAction(new KileAction::InputTag(ki,"su&bsubsection", QString(), "subsubsection", QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_subsubsection", parentWidget, KileAction::ShowAlternative|KileAction::ShowLabel, "\\subsubsection%A{%R}","\n", 0,1,i18n("\\subsubsection{title}\n\\subsubsection*{title} : do not include a number and do not make an entry in the table of contents"), i18n("&Subsubsection"),i18n("No &numbering")));
+    actionstructure_list->addAction(new KileAction::InputTag(ki,"&chapter", QString(), "chapter", QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_chapter", parentWidget, KileAction::ShowAlternative|KileAction::ShowLabel, "\\chapter%A{%R}","\n", 0,1,i18n("\\chapter{title}\n\\chapter*{title} : do not include a number and do not make an entry in the table of contents\nOnly for 'report' and 'book' class document."), i18n("C&hapter"),i18n("No &numbering")));
+    actionstructure_list->addAction(new KileAction::InputTag(ki,"&section", QString(), "section", QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_section", parentWidget, KileAction::ShowAlternative|KileAction::ShowLabel, "\\section%A{%R}","\n", 0,1,i18n("\\section{title}\n\\section*{title} : do not include a number and do not make an entry in the table of contents"), i18n("&Section"),i18n("No &numbering")));
+    actionstructure_list->addAction(new KileAction::InputTag(ki,"s&ubsection", QString(), "subsection", QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_subsection", parentWidget, KileAction::ShowAlternative|KileAction::ShowLabel, "\\subsection%A{%R}","\n", 0,1,i18n("\\subsection{title}\n\\subsection*{title} : do not include a number and do not make an entry in the table of contents"), i18n("&Subsection"),i18n("No &numbering")));
+    actionstructure_list->addAction(new KileAction::InputTag(ki,"su&bsubsection", QString(), "subsubsection", QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_subsubsection", parentWidget, KileAction::ShowAlternative|KileAction::ShowLabel, "\\subsubsection%A{%R}","\n", 0,1,i18n("\\subsubsection{title}\n\\subsubsection*{title} : do not include a number and do not make an entry in the table of contents"), i18n("&Subsubsection"),i18n("No &numbering")));
     actionstructure_list->addSeparator();
-    actionstructure_list->addAction(new KileAction::InputTag(ki,"p&aragraph", QString(), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_paragraph", parentWidget, KileAction::ShowAlternative|KileAction::ShowLabel, "\\paragraph%A{%R}","\n", 0,1,i18n("\\paragraph{title}\n\\paragraph*{title} : do not include a number and do not make an entry in the table of contents"), i18n("&Paragraph"),i18n("No &numbering")));
-    actionstructure_list->addAction(new KileAction::InputTag(ki,"subpa&ragraph", QString(), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_subparagraph", parentWidget, KileAction::ShowAlternative|KileAction::ShowLabel, "\\subparagraph%A{%R}","\n", 0,1,i18n("\\subparagraph{title}\n\\subparagraph*{title} : do not include a number and do not make an entry in the table of contents"), i18n("&Subparagraph"),i18n("No &numbering")));
+    actionstructure_list->addAction(new KileAction::InputTag(ki,"p&aragraph", QString(), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_paragraph", parentWidget, KileAction::ShowAlternative|KileAction::ShowLabel, "\\paragraph%A{%R}","\n", 0,1,i18n("\\paragraph{title}\n\\paragraph*{title} : do not include a number and do not make an entry in the table of contents"), i18n("&Paragraph"),i18n("No &numbering")));
+    actionstructure_list->addAction(new KileAction::InputTag(ki,"subpa&ragraph", QString(), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_subparagraph", parentWidget, KileAction::ShowAlternative|KileAction::ShowLabel, "\\subparagraph%A{%R}","\n", 0,1,i18n("\\subparagraph{title}\n\\subparagraph*{title} : do not include a number and do not make an entry in the table of contents"), i18n("&Subparagraph"),i18n("No &numbering")));
 
     ToolbarSelectAction *actionsize_list = new ToolbarSelectAction(i18n("Size"), actionCollection,false);
     actionCollection->addAction("size_list", actionsize_list);
-    actionsize_list->addAction(new KileAction::Tag(i18n("tiny"), QString(), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection, "tag_tiny", "\\begin{tiny}", "\\end{tiny}", 12, 0));
-    actionsize_list->addAction(new KileAction::Tag(i18n("scriptsize"), QString(), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection, "tag_scriptsize", "\\begin{scriptsize}", "\\end{scriptsize}", 18, 0));
-    actionsize_list->addAction(new KileAction::Tag(i18n("footnotesize"), QString(), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection, "tag_footnotesize", "\\begin{footnotesize}", "\\end{footnotesize}", 20, 0));
-    actionsize_list->addAction(new KileAction::Tag(i18n("small"), QString(), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection, "tag_small", "\\begin{small}", "\\end{small}", 13, 0));
+    actionsize_list->addAction(new KileAction::Tag(i18n("tiny"), QString(), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection, "tag_tiny", "\\begin{tiny}", "\\end{tiny}", 12, 0));
+    actionsize_list->addAction(new KileAction::Tag(i18n("scriptsize"), QString(), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection, "tag_scriptsize", "\\begin{scriptsize}", "\\end{scriptsize}", 18, 0));
+    actionsize_list->addAction(new KileAction::Tag(i18n("footnotesize"), QString(), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection, "tag_footnotesize", "\\begin{footnotesize}", "\\end{footnotesize}", 20, 0));
+    actionsize_list->addAction(new KileAction::Tag(i18n("small"), QString(), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection, "tag_small", "\\begin{small}", "\\end{small}", 13, 0));
     actionsize_list->addSeparator();
-    actionsize_list->addAction(new KileAction::Tag(i18n("normalsize"), QString(), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection, "tag_normalsize", "\\begin{normalsize}", "\\end{normalsize}", 18, 0));
+    actionsize_list->addAction(new KileAction::Tag(i18n("normalsize"), QString(), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection, "tag_normalsize", "\\begin{normalsize}", "\\end{normalsize}", 18, 0));
     actionsize_list->addSeparator();
-    actionsize_list->addAction(new KileAction::Tag(i18n("large"), QString(), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_large", "\\begin{large}", "\\end{large}", 13, 0));
-    actionsize_list->addAction(new KileAction::Tag(i18n("Large"), QString(), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_Large", "\\begin{Large}", "\\end{Large}", 13, 0));
-    actionsize_list->addAction(new KileAction::Tag(i18n("LARGE"), QString(), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_LARGE", "\\begin{LARGE}", "\\end{LARGE}", 13, 0));
-    actionsize_list->addAction(new KileAction::Tag(i18n("huge"), QString(), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection, "tag_huge", "\\begin{huge}", "\\end{huge}", 12, 0));
-    actionsize_list->addAction(new KileAction::Tag(i18n("Huge"), QString(), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection, "tag_Huge", "\\begin{Huge}", "\\end{Huge}", 12, 0));
+    actionsize_list->addAction(new KileAction::Tag(i18n("large"), QString(), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_large", "\\begin{large}", "\\end{large}", 13, 0));
+    actionsize_list->addAction(new KileAction::Tag(i18n("Large"), QString(), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_Large", "\\begin{Large}", "\\end{Large}", 13, 0));
+    actionsize_list->addAction(new KileAction::Tag(i18n("LARGE"), QString(), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_LARGE", "\\begin{LARGE}", "\\end{LARGE}", 13, 0));
+    actionsize_list->addAction(new KileAction::Tag(i18n("huge"), QString(), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection, "tag_huge", "\\begin{huge}", "\\end{huge}", 12, 0));
+    actionsize_list->addAction(new KileAction::Tag(i18n("Huge"), QString(), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection, "tag_Huge", "\\begin{Huge}", "\\end{Huge}", 12, 0));
 
     ToolbarSelectAction *actionother_list = new ToolbarSelectAction(i18n("Other"), actionCollection,false);
     actionCollection->addAction("other_list", actionother_list);
-    actionother_list->addAction(new KileAction::Tag("label", QString(), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_label", "\\label{","} ",7,0,i18n("\\label{key}")));
-    actionother_list->addAction(new KileAction::InputTag(ki,"ref", QString(), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_ref", parentWidget, KileAction::FromLabelList, "\\ref{%R", "}", 5,0, QString(), i18n("Label") ));
-    actionother_list->addAction(new KileAction::InputTag(ki,"pageref", QString(), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_pageref", parentWidget, KileAction::FromLabelList, "\\pageref{%R", "}", 9,0, QString(), i18n("Label") ));
+    actionother_list->addAction(new KileAction::Tag("label", QString(), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_label", "\\label{","} ",7,0,i18n("\\label{key}")));
+    actionother_list->addAction(new KileAction::InputTag(ki,"ref", QString(), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_ref", parentWidget, KileAction::FromLabelList, "\\ref{%R", "}", 5,0, QString(), i18n("Label") ));
+    actionother_list->addAction(new KileAction::InputTag(ki,"pageref", QString(), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_pageref", parentWidget, KileAction::FromLabelList, "\\pageref{%R", "}", 9,0, QString(), i18n("Label") ));
     actionother_list->addSeparator();
-    actionother_list->addAction(new KileAction::Tag("index", QString(), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_index","\\index{","}",7,0,i18n( "\\index{word}")));
-    actionother_list->addAction(new KileAction::Tag("footnote", QString(), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_footnote", "\\footnote{","}",10,0,i18n( "\\footnote{text}")));
+    actionother_list->addAction(new KileAction::Tag("index", QString(), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_index","\\index{","}",7,0,i18n( "\\index{word}")));
+    actionother_list->addAction(new KileAction::Tag("footnote", QString(), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_footnote", "\\footnote{","}",10,0,i18n( "\\footnote{text}")));
     actionother_list->addSeparator();
-    actionother_list->addAction(new KileAction::InputTag(ki,"cite", QString(), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_cite", parentWidget, KileAction::FromBibItemList, "\\cite{%R", "}", 6,0, i18n("This command generates an in-text citation to the reference associated with the ref entry in the bib file\nYou can open the bib file with Kile to see all the available references"), i18n("Reference")));
+    actionother_list->addAction(new KileAction::InputTag(ki,"cite", QString(), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_cite", parentWidget, KileAction::FromBibItemList, "\\cite{%R", "}", 6,0, i18n("This command generates an in-text citation to the reference associated with the ref entry in the bib file\nYou can open the bib file with Kile to see all the available references"), i18n("Reference")));
 // 	QAction *action = actionCollection->addAction("citeViewBib", receiver, SLOT(citeViewBib()));
 // 	action->setText(i18n("cite from ViewBib"));
 // 	actionother_list->addAction(action);
 
-    (void) new KileAction::Tag(i18n("Underline - \\underline{}"), i18n("Underline"), "format-text-underline", QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_underline", "\\underline{","}",11);
+    (void) new KileAction::Tag(i18n("Underline - \\underline{}"), i18n("Underline"), "format-text-underline", QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_underline", "\\underline{","}",11);
 
     QAction *action = actionCollection->addAction("tag_newline", ki->editorExtension(), SLOT(insertIntelligentNewline()));
     action->setText(i18n("Smart New Line"));
@@ -151,68 +151,68 @@ void setupStdTags(KileInfo *ki, const QObject* receiver, KActionCollection *acti
     KActionCollection* ac = actionCollection;
 
     // environments
-    (void) new KileAction::Tag(i18n("Abstract - \\begin{abstract}"), i18n("Abstract"), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), ac,"tag_env_abstract","\\begin{abstract}\n","%E\n\\end{abstract} ",0,1, i18n("\\begin{abstract}\ntext\n\\end{abstract}\nThe abstract environment creates a title page, i.e. a page with no printed page number or heading."));
+    (void) new KileAction::Tag(i18n("Abstract - \\begin{abstract}"), i18n("Abstract"), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), ac,"tag_env_abstract","\\begin{abstract}\n","%E\n\\end{abstract} ",0,1, i18n("\\begin{abstract}\ntext\n\\end{abstract}\nThe abstract environment creates a title page, i.e. a page with no printed page number or heading."));
 
-    (void) new KileAction::Tag(i18n("Tabular* - \\begin{tabular*}"), i18n("Tabular*"), "tabular-star", QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), ac,"tag_env_tabular*","\\begin{tabular*}{}{","}\n%E\n\\end{tabular*}\n",17,0, i18n("\\begin{tabular*}{width}[pos]{cols}\ncolumn 1 entry & column 2 entry ... & column n entry \\\\\n...\n\\end{tabular*}\nThis is an extended version of the tabular environment with an extra parameter for the width. There must be rubber space between columns that can stretch to fill out the specified width."));
+    (void) new KileAction::Tag(i18n("Tabular* - \\begin{tabular*}"), i18n("Tabular*"), "tabular-star", QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), ac,"tag_env_tabular*","\\begin{tabular*}{}{","}\n%E\n\\end{tabular*}\n",17,0, i18n("\\begin{tabular*}{width}[pos]{cols}\ncolumn 1 entry & column 2 entry ... & column n entry \\\\\n...\n\\end{tabular*}\nThis is an extended version of the tabular environment with an extra parameter for the width. There must be rubber space between columns that can stretch to fill out the specified width."));
 
-    (void) new KileAction::Tag(i18n("Minipage - \\begin{minipage}"), i18n("Minipage"), "minipage", QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)),ac,"tag_env_minipage","\\begin{minipage}[","]{}\n%E\n\\end{minipage} ",17,0, i18n("The minipage environment is similar to a \\parbox command. It takes the same optional position argument and mandatory width argument. You may use other paragraph-making environments inside a minipage."));
+    (void) new KileAction::Tag(i18n("Minipage - \\begin{minipage}"), i18n("Minipage"), "minipage", QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)),ac,"tag_env_minipage","\\begin{minipage}[","]{}\n%E\n\\end{minipage} ",17,0, i18n("The minipage environment is similar to a \\parbox command. It takes the same optional position argument and mandatory width argument. You may use other paragraph-making environments inside a minipage."));
 
     // lists
-    (void) new KileAction::Tag(i18n("Table of Figures - \\listoffigures"), i18n("Table of Figures"), QKeySequence(), receiver,SLOT(insertTag(const KileAction::TagData&)), ac,"tag_listoffigures","\\listoffigures",QString(),14,0, i18n("Put this command where you want the list of figures to go."));
+    (void) new KileAction::Tag(i18n("Table of Figures - \\listoffigures"), i18n("Table of Figures"), QKeySequence(), receiver,SLOT(insertTag(KileAction::TagData)), ac,"tag_listoffigures","\\listoffigures",QString(),14,0, i18n("Put this command where you want the list of figures to go."));
 
-    (void) new KileAction::Tag(i18n("Table of Tables - \\listoftables"), i18n("Table of Tables"), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), ac,"tag_listoftables","\\listoftables",QString(),14,0, i18n("Put this command where you want the list of tables to go."));
+    (void) new KileAction::Tag(i18n("Table of Tables - \\listoftables"), i18n("Table of Tables"), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), ac,"tag_listoftables","\\listoftables",QString(),14,0, i18n("Put this command where you want the list of tables to go."));
 
-    (void) new KileAction::Tag(i18n("Generate Index - \\makeindex"), i18n("Generate Index"), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), ac,"tag_makeindex","\\makeindex",QString(),10,0, i18n("Put this command when you want to generate the raw index."));
+    (void) new KileAction::Tag(i18n("Generate Index - \\makeindex"), i18n("Generate Index"), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), ac,"tag_makeindex","\\makeindex",QString(),10,0, i18n("Put this command when you want to generate the raw index."));
 
-    (void) new KileAction::Tag(i18n("Print Index - \\printindex"), i18n("Print Index"), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), ac,"tag_printindex","\\printindex",QString(),11,0, i18n("Put this command when you want to print the formatted index."));
+    (void) new KileAction::Tag(i18n("Print Index - \\printindex"), i18n("Print Index"), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), ac,"tag_printindex","\\printindex",QString(),11,0, i18n("Put this command when you want to print the formatted index."));
 
-    (void) new KileAction::Tag(i18n("Glossary - \\makeglossary"), i18n("Glossary"), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), ac,"tag_makeglossary","\\makeglossary",QString(),13,0, i18n("Put this command when you want to print a glossary."));
+    (void) new KileAction::Tag(i18n("Glossary - \\makeglossary"), i18n("Glossary"), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), ac,"tag_makeglossary","\\makeglossary",QString(),13,0, i18n("Put this command when you want to print a glossary."));
 
-    (void) new KileAction::Tag(i18n("Bibliography - \\begin{thebibliography}"), i18n("Bibliography"), QKeySequence(), receiver,SLOT(insertTag(const KileAction::TagData&)), ac,"tag_env_thebibliography","\\begin{thebibliography}{","}\n\n\\end{thebibliography} ",24,0, i18n("\\begin{thebibliography}{widest-label}\n\\bibitem[label]{cite_key}\n...\n\\end{thebibliography}\n\nwidest-label : Text that, when printed, is approximately as wide as the widest item label produces by the \\bibitem commands\n\\bibitem : Specify a bibliography item"));
+    (void) new KileAction::Tag(i18n("Bibliography - \\begin{thebibliography}"), i18n("Bibliography"), QKeySequence(), receiver,SLOT(insertTag(KileAction::TagData)), ac,"tag_env_thebibliography","\\begin{thebibliography}{","}\n\n\\end{thebibliography} ",24,0, i18n("\\begin{thebibliography}{widest-label}\n\\bibitem[label]{cite_key}\n...\n\\end{thebibliography}\n\nwidest-label : Text that, when printed, is approximately as wide as the widest item label produces by the \\bibitem commands\n\\bibitem : Specify a bibliography item"));
 
     // verbatim code
-    (void) new KileAction::Tag(i18n("Verbatim (show spaces) - \\begin{verbatim*}"), i18n("Verbatim (show spaces)"), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)),ac,"tag_env_verbatim*","\\begin{verbatim*}\n","%E\n\\end{verbatim*}\n",0,1, i18n("Environment that gets LaTeX to print exactly what you type in. In this variant, spaces are printed in a special manner."));
+    (void) new KileAction::Tag(i18n("Verbatim (show spaces) - \\begin{verbatim*}"), i18n("Verbatim (show spaces)"), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)),ac,"tag_env_verbatim*","\\begin{verbatim*}\n","%E\n\\end{verbatim*}\n",0,1, i18n("Environment that gets LaTeX to print exactly what you type in. In this variant, spaces are printed in a special manner."));
 
-    (void) new KileAction::Tag(i18n("Embedded Code - \\verb||"), i18n("Embedded Code"), "verb", QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)),ac,"tag_verb","\\verb|","|",6,0, i18n("Macro form of the verbatim environment."));
+    (void) new KileAction::Tag(i18n("Embedded Code - \\verb||"), i18n("Embedded Code"), "verb", QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)),ac,"tag_verb","\\verb|","|",6,0, i18n("Macro form of the verbatim environment."));
 
-    (void) new KileAction::Tag(i18n("Embedded Code (show spaces) - \\verb*||"), i18n("Embedded Code (show spaces)"), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)),ac,"tag_verb*","\\verb*|","|",7,0, i18n("Macro form of the verbatim* environment."));
+    (void) new KileAction::Tag(i18n("Embedded Code (show spaces) - \\verb*||"), i18n("Embedded Code (show spaces)"), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)),ac,"tag_verb*","\\verb*|","|",7,0, i18n("Macro form of the verbatim* environment."));
 
     // horizontal/vertical space
-    (void) new KileAction::Tag(i18n("\"Small\" Vertical Space - \\smallskip"), i18n("\"Small\" Vertical Space"), "smallskip", QKeySequence(), receiver,SLOT(insertTag(const KileAction::TagData&)), ac,"tag_smallskip","\\smallskip ",QString(),10,0, i18n("The \\smallskip command adds a 'small' vertical space."));
+    (void) new KileAction::Tag(i18n("\"Small\" Vertical Space - \\smallskip"), i18n("\"Small\" Vertical Space"), "smallskip", QKeySequence(), receiver,SLOT(insertTag(KileAction::TagData)), ac,"tag_smallskip","\\smallskip ",QString(),10,0, i18n("The \\smallskip command adds a 'small' vertical space."));
 
-    (void) new KileAction::Tag(i18n("\\enskip"), QString(), "enskip", QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), ac,"tag_enskip", "\\enskip ", QString(), 8);
+    (void) new KileAction::Tag(i18n("\\enskip"), QString(), "enskip", QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), ac,"tag_enskip", "\\enskip ", QString(), 8);
 
-    (void) new KileAction::Tag(i18n("Horizontal Variable Space - \\hfill"), i18n("Horizontal Variable Space"), QKeySequence(), receiver,SLOT(insertTag(const KileAction::TagData&)),ac,"tag_hfill","\\hfill",QString(),6,0, i18n("The \\hfill fill command produces a \"rubber length\" which can stretch or shrink horizontally. It will be filled with spaces."));
+    (void) new KileAction::Tag(i18n("Horizontal Variable Space - \\hfill"), i18n("Horizontal Variable Space"), QKeySequence(), receiver,SLOT(insertTag(KileAction::TagData)),ac,"tag_hfill","\\hfill",QString(),6,0, i18n("The \\hfill fill command produces a \"rubber length\" which can stretch or shrink horizontally. It will be filled with spaces."));
 
-    (void) new KileAction::Tag(i18n("Horizontal Dots - \\dotfill"), i18n("Horizontal Dots"), QKeySequence(), receiver,SLOT(insertTag(const KileAction::TagData&)),ac,"tag_dotfill","\\dotfill",QString(),8,0, i18n("The \\dotfill command produces a \"rubber length\" that produces dots instead of just spaces."));
+    (void) new KileAction::Tag(i18n("Horizontal Dots - \\dotfill"), i18n("Horizontal Dots"), QKeySequence(), receiver,SLOT(insertTag(KileAction::TagData)),ac,"tag_dotfill","\\dotfill",QString(),8,0, i18n("The \\dotfill command produces a \"rubber length\" that produces dots instead of just spaces."));
 
-    (void) new KileAction::Tag(i18n("Horizontal Rule - \\hrulefill"), i18n("Horizontal Rule"), QKeySequence(), receiver,SLOT(insertTag(const KileAction::TagData&)),ac,"tag_hrulefill","\\hrulefill",QString(),10,0, i18n("The \\hrulefill fill command produces a \"rubber length\" which can stretch or shrink horizontally. It will be filled with a horizontal rule."));
+    (void) new KileAction::Tag(i18n("Horizontal Rule - \\hrulefill"), i18n("Horizontal Rule"), QKeySequence(), receiver,SLOT(insertTag(KileAction::TagData)),ac,"tag_hrulefill","\\hrulefill",QString(),10,0, i18n("The \\hrulefill fill command produces a \"rubber length\" which can stretch or shrink horizontally. It will be filled with a horizontal rule."));
 
-    (void) new KileAction::Tag(i18n("Vertical Variable Space - \\vfill"), i18n("Vertical Variable Space"), QKeySequence(), receiver,SLOT(insertTag(const KileAction::TagData&)),ac,"tag_vfill","\\vfill",QString(),6,0, i18n("The \\vfill fill command produces a \"rubber length\" which can stretch or shrink vertically."));
+    (void) new KileAction::Tag(i18n("Vertical Variable Space - \\vfill"), i18n("Vertical Variable Space"), QKeySequence(), receiver,SLOT(insertTag(KileAction::TagData)),ac,"tag_vfill","\\vfill",QString(),6,0, i18n("The \\vfill fill command produces a \"rubber length\" which can stretch or shrink vertically."));
 
-    (void) new KileAction::Tag(i18n("Horizontal Space - \\hspace{}"), i18n("Horizontal Space"), "hspace", QKeySequence(), receiver,SLOT(insertTag(const KileAction::TagData&)),ac,"tag_hspace","\\hspace{","}",8,0, i18n("The \\hspace command adds horizontal space. The length of the space can be expressed in any terms that LaTeX understands, i.e., points, inches, etc. You can add negative as well as positive space with an \\hspace command. Adding negative space is like backspacing."));
+    (void) new KileAction::Tag(i18n("Horizontal Space - \\hspace{}"), i18n("Horizontal Space"), "hspace", QKeySequence(), receiver,SLOT(insertTag(KileAction::TagData)),ac,"tag_hspace","\\hspace{","}",8,0, i18n("The \\hspace command adds horizontal space. The length of the space can be expressed in any terms that LaTeX understands, i.e., points, inches, etc. You can add negative as well as positive space with an \\hspace command. Adding negative space is like backspacing."));
 
-    (void) new KileAction::Tag(i18n("Horizontal Space (forced) - \\hspace*{}"), i18n("Horizontal Space (forced)"), "hspace-star", QKeySequence(), receiver,SLOT(insertTag(const KileAction::TagData&)),ac,"tag_hspace*","\\hspace*{","}",9,0, i18n("The \\hspace* command adds horizontal space like the \\hspace command. LaTeX removes horizontal space that comes at the end of a line. If you do not want LaTeX to remove this space, include the optional * argument. Then the space is never removed."));
+    (void) new KileAction::Tag(i18n("Horizontal Space (forced) - \\hspace*{}"), i18n("Horizontal Space (forced)"), "hspace-star", QKeySequence(), receiver,SLOT(insertTag(KileAction::TagData)),ac,"tag_hspace*","\\hspace*{","}",9,0, i18n("The \\hspace* command adds horizontal space like the \\hspace command. LaTeX removes horizontal space that comes at the end of a line. If you do not want LaTeX to remove this space, include the optional * argument. Then the space is never removed."));
 
-    (void) new KileAction::Tag(i18n("Vertical Space - \\vspace{}"), i18n("Vertical Space"), "vspace", QKeySequence(), receiver,SLOT(insertTag(const KileAction::TagData&)),ac,"tag_vspace","\\vspace{","}",8,0, i18n("The \\vspace command adds vertical space. The length of the space can be expressed in any terms that LaTeX understands, i.e., points, inches, etc. You can add negative as well as positive space with an \\vspace command."));
+    (void) new KileAction::Tag(i18n("Vertical Space - \\vspace{}"), i18n("Vertical Space"), "vspace", QKeySequence(), receiver,SLOT(insertTag(KileAction::TagData)),ac,"tag_vspace","\\vspace{","}",8,0, i18n("The \\vspace command adds vertical space. The length of the space can be expressed in any terms that LaTeX understands, i.e., points, inches, etc. You can add negative as well as positive space with an \\vspace command."));
 
-    (void) new KileAction::Tag(i18n("Vertical Space (forced) - \\vspace*{}"), i18n("Vertical Space (forced)"), "vspace-star", QKeySequence(), receiver,SLOT(insertTag(const KileAction::TagData&)),ac,"tag_vspace*","\\vspace*{","}",9,0, i18n("The \\vspace* command adds vertical space like the \\vspace command. LaTeX removes vertical space that comes at the end of a page. If you do not want LaTeX to remove this space, include the optional * argument. Then the space is never removed."));
+    (void) new KileAction::Tag(i18n("Vertical Space (forced) - \\vspace*{}"), i18n("Vertical Space (forced)"), "vspace-star", QKeySequence(), receiver,SLOT(insertTag(KileAction::TagData)),ac,"tag_vspace*","\\vspace*{","}",9,0, i18n("The \\vspace* command adds vertical space like the \\vspace command. LaTeX removes vertical space that comes at the end of a page. If you do not want LaTeX to remove this space, include the optional * argument. Then the space is never removed."));
 
     // fonts
-    new KileAction::Tag(i18n("Emphasized - \\emph{}"), i18n("Emphasized"), "emph", QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), ac,"tag_emph","\\emph{","}",6,0,i18n("\\emph{emphasized text}"));
-    new KileAction::Tag(i18n("Strong - \\strong{}"), i18n("Strong"), "strong", QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), ac,"tag_strong","\\strong{","}",8,0,i18n("\\strong{text}"));
+    new KileAction::Tag(i18n("Emphasized - \\emph{}"), i18n("Emphasized"), "emph", QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), ac,"tag_emph","\\emph{","}",6,0,i18n("\\emph{emphasized text}"));
+    new KileAction::Tag(i18n("Strong - \\strong{}"), i18n("Strong"), "strong", QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), ac,"tag_strong","\\strong{","}",8,0,i18n("\\strong{text}"));
 
-    (void) new KileAction::Tag(i18n("Roman - \\rmfamily"), i18n("Roman"), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), ac,"tag_rmfamily", "\\rmfamily", QString(), 9);
-    (void) new KileAction::Tag(i18n("Sans Serif - \\sffamily"), i18n("Sans Serif"), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), ac,"tag_sffamily", "\\sffamily", QString(), 9);
-    (void) new KileAction::Tag(i18n("Monospace - \\ttfamily"), i18n("Monospace"), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), ac,"tag_ttfamily", "\\ttfamily", QString(), 9);
+    (void) new KileAction::Tag(i18n("Roman - \\rmfamily"), i18n("Roman"), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), ac,"tag_rmfamily", "\\rmfamily", QString(), 9);
+    (void) new KileAction::Tag(i18n("Sans Serif - \\sffamily"), i18n("Sans Serif"), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), ac,"tag_sffamily", "\\sffamily", QString(), 9);
+    (void) new KileAction::Tag(i18n("Monospace - \\ttfamily"), i18n("Monospace"), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), ac,"tag_ttfamily", "\\ttfamily", QString(), 9);
 
-    (void) new KileAction::Tag(i18n("Medium - \\mdseries"), i18n("Medium"), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), ac,"tag_mdseries", "\\mdseries", QString(), 9);
-    (void) new KileAction::Tag(i18n("Bold - \\bfseries"), i18n("Bold"), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), ac,"tag_bfseries", "\\bfseries", QString(), 9);
+    (void) new KileAction::Tag(i18n("Medium - \\mdseries"), i18n("Medium"), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), ac,"tag_mdseries", "\\mdseries", QString(), 9);
+    (void) new KileAction::Tag(i18n("Bold - \\bfseries"), i18n("Bold"), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), ac,"tag_bfseries", "\\bfseries", QString(), 9);
 
-    (void) new KileAction::Tag(i18n("Upright - \\upshape"), i18n("Upright"), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), ac,"tag_upshape", "\\upshape", QString(), 8);
-    (void) new KileAction::Tag(i18n("Italic - \\itshape"), i18n("Italic"), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), ac,"tag_itshape", "\\itshape", QString(), 8);
-    (void) new KileAction::Tag(i18n("Slanted - \\slshape"), i18n("Slanted"), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), ac,"tag_slshape", "\\slshape", QString(), 8);
-    (void) new KileAction::Tag(i18n("Smallcaps - \\scshape"), i18n("Smallcaps"), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), ac,"tag_scshape", "\\scshape", QString(), 8);
+    (void) new KileAction::Tag(i18n("Upright - \\upshape"), i18n("Upright"), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), ac,"tag_upshape", "\\upshape", QString(), 8);
+    (void) new KileAction::Tag(i18n("Italic - \\itshape"), i18n("Italic"), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), ac,"tag_itshape", "\\itshape", QString(), 8);
+    (void) new KileAction::Tag(i18n("Slanted - \\slshape"), i18n("Slanted"), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), ac,"tag_slshape", "\\slshape", QString(), 8);
+    (void) new KileAction::Tag(i18n("Smallcaps - \\scshape"), i18n("Smallcaps"), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), ac,"tag_scshape", "\\scshape", QString(), 8);
 
 }
 
@@ -224,22 +224,22 @@ void setupBibTags(const QObject *receiver, KActionCollection *actionCollection,
 
     if(KileConfig::bibliographyType().isEmpty() || KileConfig::bibliographyType() == QString("bibtex") ) {
 
-        menu->addAction(new KileAction::Tag(i18n("Bibliography Style Selection - \\bibliographystyle{}"), i18n("Bibliography Style Selection"), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_bibliographystyle", "\\bibliographystyle{","} ",19,0,i18n("The argument to \\bibliographystyle refers to a file style.bst, which defines how your citations will look\nThe standard styles distributed with BibTeX are:\nalpha : sorted alphabetically. Labels are formed from name of author and year of publication.\nplain  : sorted alphabetically. Labels are numeric.\nunsrt : like plain, but entries are in order of citation.\nabbrv  : like plain, but more compact labels.")));
-        menu->addAction(new KileAction::Tag(i18n("Bibliography Generation - \\bibliography{}"), i18n("Bibliography Generation"), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_bibliography","\\bibliography{%S", "}\n",14, 0,i18n("The argument to \\bibliography refers to the bib file (without extension)\nwhich should contain your database in BibTeX format.\nKile inserts automatically the base name of the TeX file")));
+        menu->addAction(new KileAction::Tag(i18n("Bibliography Style Selection - \\bibliographystyle{}"), i18n("Bibliography Style Selection"), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_bibliographystyle", "\\bibliographystyle{","} ",19,0,i18n("The argument to \\bibliographystyle refers to a file style.bst, which defines how your citations will look\nThe standard styles distributed with BibTeX are:\nalpha : sorted alphabetically. Labels are formed from name of author and year of publication.\nplain  : sorted alphabetically. Labels are numeric.\nunsrt : like plain, but entries are in order of citation.\nabbrv  : like plain, but more compact labels.")));
+        menu->addAction(new KileAction::Tag(i18n("Bibliography Generation - \\bibliography{}"), i18n("Bibliography Generation"), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_bibliography","\\bibliography{%S", "}\n",14, 0,i18n("The argument to \\bibliography refers to the bib file (without extension)\nwhich should contain your database in BibTeX format.\nKile inserts automatically the base name of the TeX file")));
         menu->addSeparator();
 
         filename = QStandardPaths::locate(QStandardPaths::DataLocation, "bibtexentries.rc");
     }
     else if(KileConfig::bibliographyType() == QString("biblatex")) {
 
-        menu->addAction(new KileAction::Tag(i18n("Load Biblatex Package - \\usepackage{biblatex}"), i18n("Load Biblatex Package"), QKeySequence(), receiver,SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_bibliographyPackage", "\\usepackage{biblatex}\n",QString(),21,0,i18n("This includes the package biblatex")));
-        menu->addAction(new KileAction::Tag(i18n("Bibliography Generation - \\bibliography{}"), i18n("Bibliography Generation"), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_bibliography","\\bibliography{%S", "}\n",14, 0,i18n("The argument to \\bibliography refers to the bib file (without extension)\nwhich should contain your database in BibTeX format.\nKile inserts automatically the base name of the TeX file")));
-        menu->addAction(new KileAction::Tag(i18n("Print Bibliography"), QString(), QKeySequence(), receiver,SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_printbibliography", "\\printbibliography",QString(),18,0,i18n("Prints the complete bibliography")));
-        menu->addAction(new KileAction::Tag(i18n("Print Bibliography by Section"), QString(), QKeySequence(), receiver,SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_bibliographyBySection", "\\bibbysection[","]",14,0,i18n("Print the bibliography for each section")));
-        menu->addAction(new KileAction::Tag(i18n("Print List of Shorthands"), QString(), QKeySequence(), receiver,SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_bibliographyShortHands", "\\printshorthands",QString(),16,0,QString()));
+        menu->addAction(new KileAction::Tag(i18n("Load Biblatex Package - \\usepackage{biblatex}"), i18n("Load Biblatex Package"), QKeySequence(), receiver,SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_bibliographyPackage", "\\usepackage{biblatex}\n",QString(),21,0,i18n("This includes the package biblatex")));
+        menu->addAction(new KileAction::Tag(i18n("Bibliography Generation - \\bibliography{}"), i18n("Bibliography Generation"), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_bibliography","\\bibliography{%S", "}\n",14, 0,i18n("The argument to \\bibliography refers to the bib file (without extension)\nwhich should contain your database in BibTeX format.\nKile inserts automatically the base name of the TeX file")));
+        menu->addAction(new KileAction::Tag(i18n("Print Bibliography"), QString(), QKeySequence(), receiver,SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_printbibliography", "\\printbibliography",QString(),18,0,i18n("Prints the complete bibliography")));
+        menu->addAction(new KileAction::Tag(i18n("Print Bibliography by Section"), QString(), QKeySequence(), receiver,SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_bibliographyBySection", "\\bibbysection[","]",14,0,i18n("Print the bibliography for each section")));
+        menu->addAction(new KileAction::Tag(i18n("Print List of Shorthands"), QString(), QKeySequence(), receiver,SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_bibliographyShortHands", "\\printshorthands",QString(),16,0,QString()));
         menu->addSeparator();
         /* use this to insert more
-        		menu->addAction(new KileAction::Tag(i18n(""), QKeySequence(), receiver,SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_", "\\",QString(),,0,i18n("")));
+        		menu->addAction(new KileAction::Tag(i18n(""), QKeySequence(), receiver,SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_", "\\",QString(),,0,i18n("")));
         Load Biblatex-Package - \usepackage{biblatex}
         Bibliography File - \bibliography{}
         Print Bibliography - \printbibliography
@@ -346,150 +346,150 @@ void setupBibTags(const QObject *receiver, KActionCollection *actionCollection,
             compText.append(optText);
         }
 
-        menu->addAction(new KileAction::Tag(name, QString(), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,internalName,keys,QString(),length,0,compText));
+        menu->addAction(new KileAction::Tag(name, QString(), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,internalName,keys,QString(),length,0,compText));
     }
 }
 
 void setupMathTags(const QObject *receiver, KActionCollection *actionCollection)
 {
-    (void) new KileAction::Tag(i18n("\\mathrm{}"), QString(), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_mathrm","\\mathrm{","}",8);
-    (void) new KileAction::Tag(i18n("\\mathit{}"), QString(), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_mathit","\\mathit{","}",8);
-    (void) new KileAction::Tag(i18n("\\mathbf{}"), QString(), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_mathbf","\\mathbf{","}",8);
-    (void) new KileAction::Tag(i18n("\\mathsf{}"), QString(), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_mathsf","\\mathsf{","}",8);
-    (void) new KileAction::Tag(i18n("\\mathtt{}"), QString(), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_mathtt","\\mathtt{","}",8);
-    (void) new KileAction::Tag(i18n("\\mathcal{}"), QString(), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_mathcal","\\mathcal{","}",9);
-    (void) new KileAction::Tag(i18n("\\mathbb{}"), QString(), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_mathbb","\\mathbb{","}",8);
-    (void) new KileAction::Tag(i18n("\\mathfrak{}"), QString(), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_mathfrak","\\mathfrak{","}",10);
-
-    (void) new KileAction::Tag(i18n("\\acute{}"), QString(), "acute", QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_acute", "\\acute{","}",7);
-    (void) new KileAction::Tag(i18n("\\grave{}"), QString(), "grave", QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_grave", "\\grave{","}", 7);
-    (void) new KileAction::Tag(i18n("\\tilde{}"), QString(), "tilde", QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_tilde", "\\tilde{","}", 7);
-    (void) new KileAction::Tag(i18n("\\bar{}"), QString(), "bar",    QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_bar", "\\bar{","}", 5);
-    (void) new KileAction::Tag(i18n("\\vec{}"), QString(), "vec",    QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_vec", "\\vec{","}", 5);
-    (void) new KileAction::Tag(i18n("\\hat{}"), QString(), "hat",    QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_hat", "\\hat{","}", 5);
-    (void) new KileAction::Tag(i18n("\\check{}"), QString(), "check", QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_check", "\\check{","}", 7);
-    (void) new KileAction::Tag(i18n("\\breve{}"), QString(), "breve", QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_breve", "\\breve{","}", 7);
-    (void) new KileAction::Tag(i18n("\\dot{}"), QString(), "dot",    QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_dot", "\\dot{","}", 5);
-    (void) new KileAction::Tag(i18n("\\ddot{}"), QString(), "ddot",  QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_ddot", "\\ddot{","}", 6);
-
-    (void) new KileAction::Tag(i18n("Small Space"), QString(), "thinspace", QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_space_small", "\\,", QString(), 2);
-    (void) new KileAction::Tag(i18n("Medium Space"), QString(), "medspace", QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_space_medium", "\\:", QString(),2);
-    (void) new KileAction::Tag(i18n("Large Space"), QString(), "bigspace", QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_space_large", "\\;", QString(),2);
-    (void) new KileAction::Tag(i18n("\\quad"), QString(), "quad", QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_quad", "\\quad ", QString(), 6);
-    (void) new KileAction::Tag(i18n("\\qquad"), QString(), "qquad", QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_qquad", "\\qquad ", QString(), 7);
-
-    (void) new KileAction::Tag(i18n("Math Mode - $...$"), i18n("Math Mode"), "mathmode", QKeySequence(Qt::ALT+Qt::SHIFT+Qt::Key_M), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_mathmode","$","$",1);
-    (void) new KileAction::Tag(i18n("Displaymath Mode - \\[...\\]"), i18n("Displaymath Mode"), "displaymathmode", QKeySequence(Qt::ALT+Qt::SHIFT+Qt::Key_E), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_equation", "\\[","\\]", 2);
-    (void) new KileAction::Tag(i18n("Equation - \\begin{equation}"), i18n("Equation"), "equation", QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_env_equation","\\begin{equation}\n","%E\n\\end{equation} ",0,1);
-    (void) new KileAction::Tag(i18n("Subscript - _{}"), i18n("Subscript"), "format-text-subscript", QKeySequence(Qt::ALT+Qt::SHIFT+Qt::Key_D), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_subscript","_{","}",2);
-    (void) new KileAction::Tag(i18n("Superscript - ^{}"), i18n("Superscript"), "format-text-superscript", QKeySequence(Qt::ALT+Qt::SHIFT+Qt::Key_U), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_superscript","^{","}",2);
-    (void) new KileAction::Tag(i18n("Normal Fraction - \\frac{}{}"), i18n("Normal Fraction"), "smallfrac", QKeySequence(Qt::ALT+Qt::SHIFT+Qt::Key_F), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_frac", "\\frac{","}{}",6);
-    (void) new KileAction::Tag(i18n("Displaystyle Fraction - \\dfrac{}{}"), i18n("Displaystyle Fraction"), "dfrac", QKeySequence(Qt::ALT+Qt::SHIFT+Qt::Key_Q), receiver, SLOT(insertAmsTag(const KileAction::TagData&)), actionCollection,"tag_dfrac", "\\dfrac{","}{}", 7);
-    (void) new KileAction::Tag(i18n("Textstyle Fraction - \\tfrac{}{}"), i18n("Textstyle Fraction"), QKeySequence(), receiver, SLOT(insertAmsTag(const KileAction::TagData&)), actionCollection, "tag_tfrac", "\\tfrac{", "}{}", 7);
-    (void) new KileAction::Tag(i18n("Square Root - \\sqrt{}"), i18n("Square Root"), "sqrt", QKeySequence(Qt::ALT+Qt::SHIFT+Qt::Key_S), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_sqrt", "\\sqrt{","}", 6);
-    (void) new KileAction::Tag(i18n("\\left"), QString(), QKeySequence(Qt::ALT+Qt::SHIFT+Qt::Key_L), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_left", "\\left", QString(), 5);
-    (void) new KileAction::Tag(i18n("\\right"), QString(), QKeySequence(Qt::ALT+Qt::SHIFT+Qt::Key_R), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_right", "\\right", QString(), 6);
-    (void) new KileAction::Tag(i18n("Array - \\begin{array}"), i18n("Array"), "array", QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection,"tag_env_array", "\\begin{array}{}\n", "%E\n\\end{array}", 14, 0,
+    (void) new KileAction::Tag(i18n("\\mathrm{}"), QString(), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_mathrm","\\mathrm{","}",8);
+    (void) new KileAction::Tag(i18n("\\mathit{}"), QString(), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_mathit","\\mathit{","}",8);
+    (void) new KileAction::Tag(i18n("\\mathbf{}"), QString(), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_mathbf","\\mathbf{","}",8);
+    (void) new KileAction::Tag(i18n("\\mathsf{}"), QString(), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_mathsf","\\mathsf{","}",8);
+    (void) new KileAction::Tag(i18n("\\mathtt{}"), QString(), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_mathtt","\\mathtt{","}",8);
+    (void) new KileAction::Tag(i18n("\\mathcal{}"), QString(), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_mathcal","\\mathcal{","}",9);
+    (void) new KileAction::Tag(i18n("\\mathbb{}"), QString(), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_mathbb","\\mathbb{","}",8);
+    (void) new KileAction::Tag(i18n("\\mathfrak{}"), QString(), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_mathfrak","\\mathfrak{","}",10);
+
+    (void) new KileAction::Tag(i18n("\\acute{}"), QString(), "acute", QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_acute", "\\acute{","}",7);
+    (void) new KileAction::Tag(i18n("\\grave{}"), QString(), "grave", QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_grave", "\\grave{","}", 7);
+    (void) new KileAction::Tag(i18n("\\tilde{}"), QString(), "tilde", QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_tilde", "\\tilde{","}", 7);
+    (void) new KileAction::Tag(i18n("\\bar{}"), QString(), "bar",    QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_bar", "\\bar{","}", 5);
+    (void) new KileAction::Tag(i18n("\\vec{}"), QString(), "vec",    QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_vec", "\\vec{","}", 5);
+    (void) new KileAction::Tag(i18n("\\hat{}"), QString(), "hat",    QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_hat", "\\hat{","}", 5);
+    (void) new KileAction::Tag(i18n("\\check{}"), QString(), "check", QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_check", "\\check{","}", 7);
+    (void) new KileAction::Tag(i18n("\\breve{}"), QString(), "breve", QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_breve", "\\breve{","}", 7);
+    (void) new KileAction::Tag(i18n("\\dot{}"), QString(), "dot",    QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_dot", "\\dot{","}", 5);
+    (void) new KileAction::Tag(i18n("\\ddot{}"), QString(), "ddot",  QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_ddot", "\\ddot{","}", 6);
+
+    (void) new KileAction::Tag(i18n("Small Space"), QString(), "thinspace", QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_space_small", "\\,", QString(), 2);
+    (void) new KileAction::Tag(i18n("Medium Space"), QString(), "medspace", QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_space_medium", "\\:", QString(),2);
+    (void) new KileAction::Tag(i18n("Large Space"), QString(), "bigspace", QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_space_large", "\\;", QString(),2);
+    (void) new KileAction::Tag(i18n("\\quad"), QString(), "quad", QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_quad", "\\quad ", QString(), 6);
+    (void) new KileAction::Tag(i18n("\\qquad"), QString(), "qquad", QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_qquad", "\\qquad ", QString(), 7);
+
+    (void) new KileAction::Tag(i18n("Math Mode - $...$"), i18n("Math Mode"), "mathmode", QKeySequence(Qt::ALT+Qt::SHIFT+Qt::Key_M), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_mathmode","$","$",1);
+    (void) new KileAction::Tag(i18n("Displaymath Mode - \\[...\\]"), i18n("Displaymath Mode"), "displaymathmode", QKeySequence(Qt::ALT+Qt::SHIFT+Qt::Key_E), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_equation", "\\[","\\]", 2);
+    (void) new KileAction::Tag(i18n("Equation - \\begin{equation}"), i18n("Equation"), "equation", QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_env_equation","\\begin{equation}\n","%E\n\\end{equation} ",0,1);
+    (void) new KileAction::Tag(i18n("Subscript - _{}"), i18n("Subscript"), "format-text-subscript", QKeySequence(Qt::ALT+Qt::SHIFT+Qt::Key_D), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_subscript","_{","}",2);
+    (void) new KileAction::Tag(i18n("Superscript - ^{}"), i18n("Superscript"), "format-text-superscript", QKeySequence(Qt::ALT+Qt::SHIFT+Qt::Key_U), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_superscript","^{","}",2);
+    (void) new KileAction::Tag(i18n("Normal Fraction - \\frac{}{}"), i18n("Normal Fraction"), "smallfrac", QKeySequence(Qt::ALT+Qt::SHIFT+Qt::Key_F), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_frac", "\\frac{","}{}",6);
+    (void) new KileAction::Tag(i18n("Displaystyle Fraction - \\dfrac{}{}"), i18n("Displaystyle Fraction"), "dfrac", QKeySequence(Qt::ALT+Qt::SHIFT+Qt::Key_Q), receiver, SLOT(insertAmsTag(KileAction::TagData)), actionCollection,"tag_dfrac", "\\dfrac{","}{}", 7);
+    (void) new KileAction::Tag(i18n("Textstyle Fraction - \\tfrac{}{}"), i18n("Textstyle Fraction"), QKeySequence(), receiver, SLOT(insertAmsTag(KileAction::TagData)), actionCollection, "tag_tfrac", "\\tfrac{", "}{}", 7);
+    (void) new KileAction::Tag(i18n("Square Root - \\sqrt{}"), i18n("Square Root"), "sqrt", QKeySequence(Qt::ALT+Qt::SHIFT+Qt::Key_S), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_sqrt", "\\sqrt{","}", 6);
+    (void) new KileAction::Tag(i18n("\\left"), QString(), QKeySequence(Qt::ALT+Qt::SHIFT+Qt::Key_L), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_left", "\\left", QString(), 5);
+    (void) new KileAction::Tag(i18n("\\right"), QString(), QKeySequence(Qt::ALT+Qt::SHIFT+Qt::Key_R), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_right", "\\right", QString(), 6);
+    (void) new KileAction::Tag(i18n("Array - \\begin{array}"), i18n("Array"), "array", QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection,"tag_env_array", "\\begin{array}{}\n", "%E\n\\end{array}", 14, 0,
                                i18n("\\begin{array}{col1col2...coln}\ncolumn 1 entry & column 2 entry ... & column n entry \\\\ \n...\n\\end{array}\nEach column, coln, is specified by a single letter that tells how items in that column should be formatted.\n"
                                     "     c -- for centered \n     l -- for flush left \n     r -- for flush right\n"));
 
     ToolbarSelectAction *actionleft_list = new ToolbarSelectAction(i18n("Left Delimiter"), actionCollection,false);
     actionCollection->addAction("left_list", actionleft_list);
-    actionleft_list->addAction(new KileAction::Tag(i18n("left ("), QString(), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection, "tag_left_(", "\\left( ", QString(), 7, 0));
-    actionleft_list->addAction(new KileAction::Tag(i18n("left ["), QString(), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection, "tag_left_[", "\\left[ ", QString(), 7, 0));
-    actionleft_list->addAction(new KileAction::Tag(i18n("left {"), QString(), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection, "tag_left_{", "\\left\\lbrace ", QString(), 14, 0));
-    actionleft_list->addAction(new KileAction::Tag(i18n("left &lt;"), QString(), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection, "tag_left_<", "\\left\\langle ", QString(), 14, 0));
+    actionleft_list->addAction(new KileAction::Tag(i18n("left ("), QString(), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection, "tag_left_(", "\\left( ", QString(), 7, 0));
+    actionleft_list->addAction(new KileAction::Tag(i18n("left ["), QString(), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection, "tag_left_[", "\\left[ ", QString(), 7, 0));
+    actionleft_list->addAction(new KileAction::Tag(i18n("left {"), QString(), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection, "tag_left_{", "\\left\\lbrace ", QString(), 14, 0));
+    actionleft_list->addAction(new KileAction::Tag(i18n("left &lt;"), QString(), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection, "tag_left_<", "\\left\\langle ", QString(), 14, 0));
     actionleft_list->addSeparator();
-    actionleft_list->addAction(new KileAction::Tag(i18n("left )"), QString(), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection, "tag_left_)", "\\left) ", QString(), 7, 0));
-    actionleft_list->addAction(new KileAction::Tag(i18n("left ]"), QString(), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection, "tag_left_]", "\\left] ", QString(), 7, 0));
-    actionleft_list->addAction(new KileAction::Tag(i18n("left }"), QString(), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection, "tag_left_}", "\\left\\rbrace ", QString(), 14, 0));
-    actionleft_list->addAction(new KileAction::Tag(i18n("left &gt;"), QString(), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection, "tag_left_>", "\\left\\rangle ", QString(), 14, 0));
+    actionleft_list->addAction(new KileAction::Tag(i18n("left )"), QString(), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection, "tag_left_)", "\\left) ", QString(), 7, 0));
+    actionleft_list->addAction(new KileAction::Tag(i18n("left ]"), QString(), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection, "tag_left_]", "\\left] ", QString(), 7, 0));
+    actionleft_list->addAction(new KileAction::Tag(i18n("left }"), QString(), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection, "tag_left_}", "\\left\\rbrace ", QString(), 14, 0));
+    actionleft_list->addAction(new KileAction::Tag(i18n("left &gt;"), QString(), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection, "tag_left_>", "\\left\\rangle ", QString(), 14, 0));
     actionleft_list->addSeparator();
-    actionleft_list->addAction(new KileAction::Tag(i18n("left ."), QString(), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection, "tag_left_.", "\\left. ", QString(), 7, 0));
+    actionleft_list->addAction(new KileAction::Tag(i18n("left ."), QString(), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection, "tag_left_.", "\\left. ", QString(), 7, 0));
 
     ToolbarSelectAction *actionright_list = new ToolbarSelectAction(i18n("Right Delimiter"), actionCollection,false);
     actionCollection->addAction("right_list", actionright_list);
-    actionright_list->addAction(new KileAction::Tag(i18n("right )"), QString(), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection, "tag_right_)", "\\right) ", QString(), 8, 0));
-    actionright_list->addAction(new KileAction::Tag(i18n("right ]"), QString(), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection, "tag_right_]", "\\right] ", QString(), 8, 0));
-    actionright_list->addAction(new KileAction::Tag(i18n("right }"), QString(), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection, "tag_right_}", "\\right\\rbrace ", QString(), 14, 0));
-    actionright_list->addAction(new KileAction::Tag(i18n("right &gt;"), QString(), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection, "tag_right_>", "\\right\\rangle ", QString(), 14, 0));
+    actionright_list->addAction(new KileAction::Tag(i18n("right )"), QString(), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection, "tag_right_)", "\\right) ", QString(), 8, 0));
+    actionright_list->addAction(new KileAction::Tag(i18n("right ]"), QString(), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection, "tag_right_]", "\\right] ", QString(), 8, 0));
+    actionright_list->addAction(new KileAction::Tag(i18n("right }"), QString(), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection, "tag_right_}", "\\right\\rbrace ", QString(), 14, 0));
+    actionright_list->addAction(new KileAction::Tag(i18n("right &gt;"), QString(), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection, "tag_right_>", "\\right\\rangle ", QString(), 14, 0));
     actionright_list->addSeparator();
-    actionright_list->addAction(new KileAction::Tag(i18n("right ("), QString(), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection, "tag_right_(", "\\right( ", QString(), 8, 0));
-    actionright_list->addAction(new KileAction::Tag(i18n("right ["), QString(), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection, "tag_right_[", "\\right[ ", QString(), 8, 0));
-    actionright_list->addAction(new KileAction::Tag(i18n("right {"), QString(), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection, "tag_right_{", "\\right\\lbrace ", QString(), 14, 0));
-    actionright_list->addAction(new KileAction::Tag(i18n("right &lt;"), QString(), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection, "tag_right_<", "\\right\\langle ", QString(), 14, 0));
+    actionright_list->addAction(new KileAction::Tag(i18n("right ("), QString(), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection, "tag_right_(", "\\right( ", QString(), 8, 0));
+    actionright_list->addAction(new KileAction::Tag(i18n("right ["), QString(), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection, "tag_right_[", "\\right[ ", QString(), 8, 0));
+    actionright_list->addAction(new KileAction::Tag(i18n("right {"), QString(), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection, "tag_right_{", "\\right\\lbrace ", QString(), 14, 0));
+    actionright_list->addAction(new KileAction::Tag(i18n("right &lt;"), QString(), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection, "tag_right_<", "\\right\\langle ", QString(), 14, 0));
     actionright_list->addSeparator();
-    actionright_list->addAction(new KileAction::Tag(i18n("right ."), QString(), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), actionCollection, "tag_right_.", "\\right. ", QString(), 8, 0));
+    actionright_list->addAction(new KileAction::Tag(i18n("right ."), QString(), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), actionCollection, "tag_right_.", "\\right. ", QString(), 8, 0));
 
     // new math tags (dani 29.01.2005)
     KActionCollection* ac = actionCollection;
 
-    (void) new KileAction::Tag(i18n("Normal Binomial - \\binom{}{}"), i18n("Normal Binomial"), "binom", QKeySequence(), receiver, SLOT(insertAmsTag(const KileAction::TagData&)), ac,"tag_binom", "\\binom{","}{}", 7);
+    (void) new KileAction::Tag(i18n("Normal Binomial - \\binom{}{}"), i18n("Normal Binomial"), "binom", QKeySequence(), receiver, SLOT(insertAmsTag(KileAction::TagData)), ac,"tag_binom", "\\binom{","}{}", 7);
 
-    (void) new KileAction::Tag(i18n("Displaystyle Binomial - \\dbinom{}{}"), i18n("Displaystyle Binomial"), QKeySequence(), receiver,SLOT(insertAmsTag(const KileAction::TagData&)), ac,"tag_dbinom", "\\dbinom{","}{}", 8);
+    (void) new KileAction::Tag(i18n("Displaystyle Binomial - \\dbinom{}{}"), i18n("Displaystyle Binomial"), QKeySequence(), receiver,SLOT(insertAmsTag(KileAction::TagData)), ac,"tag_dbinom", "\\dbinom{","}{}", 8);
 
-    (void) new KileAction::Tag(i18n("Textstyle Binomial - \\tbinom{}{}"), i18n("Textstyle Binomial"), QKeySequence(), receiver, SLOT(insertAmsTag(const KileAction::TagData&)), ac,"tag_tbinom", "\\tbinom{","}{}", 8);
+    (void) new KileAction::Tag(i18n("Textstyle Binomial - \\tbinom{}{}"), i18n("Textstyle Binomial"), QKeySequence(), receiver, SLOT(insertAmsTag(KileAction::TagData)), ac,"tag_tbinom", "\\tbinom{","}{}", 8);
 
-    (void) new KileAction::Tag(i18n("N-th Root - \\sqrt[]{}"), i18n("N-th Root"), "nroot", QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), ac,"tag_nroot", "\\sqrt[]{","}", 6);
+    (void) new KileAction::Tag(i18n("N-th Root - \\sqrt[]{}"), i18n("N-th Root"), "nroot", QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), ac,"tag_nroot", "\\sqrt[]{","}", 6);
 
-    (void) new KileAction::Tag(i18n("Left-Right () - \\left(..\\right)"), i18n("Left-Right ()"), "lr", QKeySequence(Qt::ALT+Qt::Key_ParenLeft), receiver, SLOT(insertTag(const KileAction::TagData&)), ac,"tag_leftright", "\\left(  \\right)", QString(), 7);
+    (void) new KileAction::Tag(i18n("Left-Right () - \\left(..\\right)"), i18n("Left-Right ()"), "lr", QKeySequence(Qt::ALT+Qt::Key_ParenLeft), receiver, SLOT(insertTag(KileAction::TagData)), ac,"tag_leftright", "\\left(  \\right)", QString(), 7);
 
-    (void) new KileAction::Tag(i18n("Extendable Left Arrow - \\xleftarrow{}"), i18n("Extendable Left Arrow"), QKeySequence(), receiver, SLOT(insertAmsTag(const KileAction::TagData&)), ac,"tag_xleftarrow", "\\xleftarrow{","}", 12);
+    (void) new KileAction::Tag(i18n("Extendable Left Arrow - \\xleftarrow{}"), i18n("Extendable Left Arrow"), QKeySequence(), receiver, SLOT(insertAmsTag(KileAction::TagData)), ac,"tag_xleftarrow", "\\xleftarrow{","}", 12);
 
-    (void) new KileAction::Tag(i18n("Extendable Right Arrow - \\xrightarrow{}"), i18n("Extendable Right Arrow"), QKeySequence(), receiver, SLOT(insertAmsTag(const KileAction::TagData&)), ac,"tag_xrightarrow", "\\xrightarrow{","}", 13);
+    (void) new KileAction::Tag(i18n("Extendable Right Arrow - \\xrightarrow{}"), i18n("Extendable Right Arrow"), QKeySequence(), receiver, SLOT(insertAmsTag(KileAction::TagData)), ac,"tag_xrightarrow", "\\xrightarrow{","}", 13);
 
-    (void) new KileAction::Tag(i18n("Boxed Formula - \\boxed{}"), i18n("Boxed Formula"), QKeySequence(), receiver, SLOT(insertAmsTag(const KileAction::TagData&)), ac,"tag_boxed", "\\boxed{","}", 7);
+    (void) new KileAction::Tag(i18n("Boxed Formula - \\boxed{}"), i18n("Boxed Formula"), QKeySequence(), receiver, SLOT(insertAmsTag(KileAction::TagData)), ac,"tag_boxed", "\\boxed{","}", 7);
 
-    (void) new KileAction::Tag(i18n("bigl - \\bigl"), i18n("bigl"), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), ac,"tag_bigl", "\\bigl",QString(), 5);
-    (void) new KileAction::Tag(i18n("Bigl - \\Bigl"), i18n("Bigl"), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), ac,"tag_Bigl", "\\Bigl",QString(), 5);
-    (void) new KileAction::Tag(i18n("biggl - \\biggl"), i18n("biggl"), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), ac,"tag_biggl", "\\biggl",QString(), 6);
-    (void) new KileAction::Tag(i18n("Biggl - \\Biggl"), i18n("Biggl"), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), ac,"tag_Biggl", "\\Biggl",QString(), 6);
+    (void) new KileAction::Tag(i18n("bigl - \\bigl"), i18n("bigl"), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), ac,"tag_bigl", "\\bigl",QString(), 5);
+    (void) new KileAction::Tag(i18n("Bigl - \\Bigl"), i18n("Bigl"), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), ac,"tag_Bigl", "\\Bigl",QString(), 5);
+    (void) new KileAction::Tag(i18n("biggl - \\biggl"), i18n("biggl"), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), ac,"tag_biggl", "\\biggl",QString(), 6);
+    (void) new KileAction::Tag(i18n("Biggl - \\Biggl"), i18n("Biggl"), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), ac,"tag_Biggl", "\\Biggl",QString(), 6);
 
-    (void) new KileAction::Tag(i18n("bigr - \\bigr"), i18n("bigr"), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), ac,"tag_bigr", "\\bigr",QString(), 5);
-    (void) new KileAction::Tag(i18n("Bigr - \\Bigr"), i18n("Bigr"), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), ac,"tag_Bigr", "\\Bigr",QString(), 5);
-    (void) new KileAction::Tag(i18n("biggr - \\biggr"), i18n("biggr"), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), ac,"tag_biggr", "\\biggr",QString(), 6);
-    (void) new KileAction::Tag(i18n("Biggr - \\Biggr"), i18n("Biggr"), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), ac,"tag_Biggr", "\\Biggr",QString(), 6);
+    (void) new KileAction::Tag(i18n("bigr - \\bigr"), i18n("bigr"), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), ac,"tag_bigr", "\\bigr",QString(), 5);
+    (void) new KileAction::Tag(i18n("Bigr - \\Bigr"), i18n("Bigr"), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), ac,"tag_Bigr", "\\Bigr",QString(), 5);
+    (void) new KileAction::Tag(i18n("biggr - \\biggr"), i18n("biggr"), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), ac,"tag_biggr", "\\biggr",QString(), 6);
+    (void) new KileAction::Tag(i18n("Biggr - \\Biggr"), i18n("Biggr"), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), ac,"tag_Biggr", "\\Biggr",QString(), 6);
 
     // text in mathmode
-    (void) new KileAction::Tag(i18n("Text in Mathmode - \\text{}"), i18n("Text in Mathmode"), QKeySequence(), receiver, SLOT(insertAmsTag(const KileAction::TagData&)), ac,"tag_text", "\\text{","}", 6);
+    (void) new KileAction::Tag(i18n("Text in Mathmode - \\text{}"), i18n("Text in Mathmode"), QKeySequence(), receiver, SLOT(insertAmsTag(KileAction::TagData)), ac,"tag_text", "\\text{","}", 6);
 
-    (void) new KileAction::Tag(i18n("Intertext - \\intertext{}"), i18n("Intertext"), QKeySequence(), receiver, SLOT(insertAmsTag(const KileAction::TagData&)), ac,"tag_intertext", "\\intertext{","}\n", 11);
+    (void) new KileAction::Tag(i18n("Intertext - \\intertext{}"), i18n("Intertext"), QKeySequence(), receiver, SLOT(insertAmsTag(KileAction::TagData)), ac,"tag_intertext", "\\intertext{","}\n", 11);
 
     // math environments
-    (void) new KileAction::Tag(i18n("Displaymath - \\begin{displaymath}"), i18n("Displaymath"), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), ac,"tag_env_displaymath","\\begin{displaymath}\n","%E\n\\end{displaymath}\n",0,1);
+    (void) new KileAction::Tag(i18n("Displaymath - \\begin{displaymath}"), i18n("Displaymath"), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), ac,"tag_env_displaymath","\\begin{displaymath}\n","%E\n\\end{displaymath}\n",0,1);
 
-    (void) new KileAction::Tag(i18n("Equation (not numbered) - \\begin{equation*}"), i18n("Equation (not numbered)"), QKeySequence(), receiver, SLOT(insertTag(const KileAction::TagData&)), ac,"tag_env_equation*","\\begin{equation*}\n","%E\n\\end{equation*}\n",0,1);
+    (void) new KileAction::Tag(i18n("Equation (not numbered) - \\begin{equation*}"), i18n("Equation (not numbered)"), QKeySequence(), receiver, SLOT(insertTag(KileAction::TagData)), ac,"tag_env_equation*","\\begin{equation*}\n","%E\n\\end{equation*}\n",0,1);
 
     // AMS environments
-    (void) new KileAction::Tag(i18n("Multline - \\begin{multline}"), i18n("Multline"), "multline", QKeySequence(), receiver, SLOT(insertAmsTag(const KileAction::TagData&)),ac,"tag_env_multline","\\begin{multline}\n","%E\n\\end{multline}\n", 0,1);
-    (void) new KileAction::Tag(i18n("Multline* - \\begin{multline*}"), i18n("Multline*"), QKeySequence(), receiver, SLOT(insertAmsTag(const KileAction::TagData&)),ac,"tag_env_multline*","\\begin{multline*}\n","%E\n\\end{multline*}\n", 0,1);
+    (void) new KileAction::Tag(i18n("Multline - \\begin{multline}"), i18n("Multline"), "multline", QKeySequence(), receiver, SLOT(insertAmsTag(KileAction::TagData)),ac,"tag_env_multline","\\begin{multline}\n","%E\n\\end{multline}\n", 0,1);
+    (void) new KileAction::Tag(i18n("Multline* - \\begin{multline*}"), i18n("Multline*"), QKeySequence(), receiver, SLOT(insertAmsTag(KileAction::TagData)),ac,"tag_env_multline*","\\begin{multline*}\n","%E\n\\end{multline*}\n", 0,1);
 
-    (void) new KileAction::Tag(i18n("Split - \\begin{split}"), i18n("Split"), QKeySequence(), receiver, SLOT(insertAmsTag(const KileAction::TagData&)),ac,"tag_env_split","\\begin{split}\n","%E\n\\end{split}\n", 0,1);
+    (void) new KileAction::Tag(i18n("Split - \\begin{split}"), i18n("Split"), QKeySequence(), receiver, SLOT(insertAmsTag(KileAction::TagData)),ac,"tag_env_split","\\begin{split}\n","%E\n\\end{split}\n", 0,1);
 
-    (void) new KileAction::Tag(i18n("Gather - \\begin{gather}"), i18n("Gather"), "gather", QKeySequence(), receiver, SLOT(insertAmsTag(const KileAction::TagData&)),ac,"tag_env_gather","\\begin{gather}\n","%E\n\\end{gather}\n", 0,1);
-    (void) new KileAction::Tag(i18n("Gather* - \\begin{gather*}"), i18n("Gather*"), QKeySequence(), receiver, SLOT(insertAmsTag(const KileAction::TagData&)),ac,"tag_env_gather*","\\begin{gather*}\n","%E\n\\end{gather*}\n", 0,1);
+    (void) new KileAction::Tag(i18n("Gather - \\begin{gather}"), i18n("Gather"), "gather", QKeySequence(), receiver, SLOT(insertAmsTag(KileAction::TagData)),ac,"tag_env_gather","\\begin{gather}\n","%E\n\\end{gather}\n", 0,1);
+    (void) new KileAction::Tag(i18n("Gather* - \\begin{gather*}"), i18n("Gather*"), QKeySequence(), receiver, SLOT(insertAmsTag(KileAction::TagData)),ac,"tag_env_gather*","\\begin{gather*}\n","%E\n\\end{gather*}\n", 0,1);
 
-    (void) new KileAction::Tag(i18n("Align - \\begin{align}"), i18n("Align"), "align", QKeySequence(), receiver, SLOT(insertAmsTag(const KileAction::TagData&)),ac,"tag_env_align","\\begin{align}\n","%E\n\\end{align}\n", 0,1);
-    (void) new KileAction::Tag(i18n("Align* - \\begin{align*}"), i18n("Align*"), QKeySequence(), receiver, SLOT(insertAmsTag(const KileAction::TagData&)),ac,"tag_env_align*","\\begin{align*}\n","%E\n\\end{align*}\n", 0,1);
+    (void) new KileAction::Tag(i18n("Align - \\begin{align}"), i18n("Align"), "align", QKeySequence(), receiver, SLOT(insertAmsTag(KileAction::TagData)),ac,"tag_env_align","\\begin{align}\n","%E\n\\end{align}\n", 0,1);
+    (void) new KileAction::Tag(i18n("Align* - \\begin{align*}"), i18n("Align*"), QKeySequence(), receiver, SLOT(insertAmsTag(KileAction::TagData)),ac,"tag_env_align*","\\begin{align*}\n","%E\n\\end{align*}\n", 0,1);
 
-    (void) new KileAction::Tag(i18n("Flalign - \\begin{flalign}"), i18n("Flalign"), "flalign", QKeySequence(), receiver, SLOT(insertAmsTag(const KileAction::TagData&)),ac,"tag_env_flalign","\\begin{flalign}\n","%E\n\\end{flalign}\n", 0,1);
-    (void) new KileAction::Tag(i18n("Flalign* - \\begin{flalign*}"), i18n("Flalign*"), QKeySequence(), receiver, SLOT(insertAmsTag(const KileAction::TagData&)),ac,"tag_env_flalign*","\\begin{flalign*}\n","%E\n\\end{flalign*}\n", 0,1);
+    (void) new KileAction::Tag(i18n("Flalign - \\begin{flalign}"), i18n("Flalign"), "flalign", QKeySequence(), receiver, SLOT(insertAmsTag(KileAction::TagData)),ac,"tag_env_flalign","\\begin{flalign}\n","%E\n\\end{flalign}\n", 0,1);
+    (void) new KileAction::Tag(i18n("Flalign* - \\begin{flalign*}"), i18n("Flalign*"), QKeySequence(), receiver, SLOT(insertAmsTag(KileAction::TagData)),ac,"tag_env_flalign*","\\begin{flalign*}\n","%E\n\\end{flalign*}\n", 0,1);
 
-    (void) new KileAction::Tag(i18n("Alignat - \\begin{alignat}"), i18n("Alignat"), QKeySequence(), receiver, SLOT(insertAmsTag(const KileAction::TagData&)),ac,"tag_env_alignat","\\begin{alignat}{","}\n%E\n\\end{alignat}\n", 16,0);
-    (void) new KileAction::Tag(i18n("Alignat* - \\begin{alignat*}"), i18n("Alignat*"), QKeySequence(), receiver, SLOT(insertAmsTag(const KileAction::TagData&)),ac,"tag_env_alignat*","\\begin{alignat*}{","}\n%E\n\\end{alignat*}\n", 17,0);
+    (void) new KileAction::Tag(i18n("Alignat - \\begin{alignat}"), i18n("Alignat"), QKeySequence(), receiver, SLOT(insertAmsTag(KileAction::TagData)),ac,"tag_env_alignat","\\begin{alignat}{","}\n%E\n\\end{alignat}\n", 16,0);
+    (void) new KileAction::Tag(i18n("Alignat* - \\begin{alignat*}"), i18n("Alignat*"), QKeySequence(), receiver, SLOT(insertAmsTag(KileAction::TagData)),ac,"tag_env_alignat*","\\begin{alignat*}{","}\n%E\n\\end{alignat*}\n", 17,0);
 
-    (void) new KileAction::Tag(i18n("Aligned - \\begin{aligned}"), i18n("Aligned"), QKeySequence(), receiver, SLOT(insertAmsTag(const KileAction::TagData&)),ac,"tag_env_aligned","\\begin{aligned}\n","%E\n\\end{aligned}\n", 0,1);
-    (void) new KileAction::Tag(i18n("Gathered - \\begin{gathered}"), i18n("Gathered"), QKeySequence(), receiver, SLOT(insertAmsTag(const KileAction::TagData&)),ac,"tag_env_gathered","\\begin{gathered}\n","%E\n\\end{gathered}\n", 0,1);
-    (void) new KileAction::Tag(i18n("Alignedat - \\begin{alignedat}"), i18n("Alignedat"), QKeySequence(), receiver, SLOT(insertAmsTag(const KileAction::TagData&)),ac,"tag_env_alignedat","\\begin{alignedat}\n","%E\n\\end{alignedat}\n", 0,1);
+    (void) new KileAction::Tag(i18n("Aligned - \\begin{aligned}"), i18n("Aligned"), QKeySequence(), receiver, SLOT(insertAmsTag(KileAction::TagData)),ac,"tag_env_aligned","\\begin{aligned}\n","%E\n\\end{aligned}\n", 0,1);
+    (void) new KileAction::Tag(i18n("Gathered - \\begin{gathered}"), i18n("Gathered"), QKeySequence(), receiver, SLOT(insertAmsTag(KileAction::TagData)),ac,"tag_env_gathered","\\begin{gathered}\n","%E\n\\end{gathered}\n", 0,1);
+    (void) new KileAction::Tag(i18n("Alignedat - \\begin{alignedat}"), i18n("Alignedat"), QKeySequence(), receiver, SLOT(insertAmsTag(KileAction::TagData)),ac,"tag_env_alignedat","\\begin{alignedat}\n","%E\n\\end{alignedat}\n", 0,1);
 
-    (void) new KileAction::Tag(i18n("Cases - \\begin{cases}"), i18n("Cases"), "cases", QKeySequence(), receiver, SLOT(insertAmsTag(const KileAction::TagData&)),ac,"tag_env_cases","\\begin{cases}\n","%E\n\\end{cases}\n", 0,1);
+    (void) new KileAction::Tag(i18n("Cases - \\begin{cases}"), i18n("Cases"), "cases", QKeySequence(), receiver, SLOT(insertAmsTag(KileAction::TagData)),ac,"tag_env_cases","\\begin{cases}\n","%E\n\\end{cases}\n", 0,1);
 
-    (void) new KileAction::Tag(i18n("matrix - \\begin{matrix}"), i18n("matrix"), "matrix", QKeySequence(), receiver, SLOT(insertAmsTag(const KileAction::TagData&)),ac,"tag_env_matrix","\\begin{matrix}\n","%E\n\\end{matrix}\n", 0,1);
-    (void) new KileAction::Tag(i18n("pmatrix - \\begin{pmatrix}"), i18n("pmatrix"), "pmatrix", QKeySequence(), receiver, SLOT(insertAmsTag(const KileAction::TagData&)),ac,"tag_env_pmatrix","\\begin{pmatrix}\n","%E\n\\end{pmatrix}\n", 0,1);
-    (void) new KileAction::Tag(i18n("vmatrix - \\begin{vmatrix}"), i18n("vmatrix"), "vmatrix", QKeySequence(), receiver, SLOT(insertAmsTag(const KileAction::TagData&)),ac,"tag_env_vmatrix","\\begin{vmatrix}\n","%E\n\\end{vmatrix}\n", 0,1);
-    (void) new KileAction::Tag(i18n("Vmatrix - \\begin{Vmatrix}"), i18n("Vmatrix"), "VVmatrix", QKeySequence(), receiver, SLOT(insertAmsTag(const KileAction::TagData&)),ac,"tag_env_VVmatrix","\\begin{Vmatrix}\n","%E\n\\end{Vmatrix}\n", 0,1);
-    (void) new KileAction::Tag(i18n("bmatrix - \\begin{bmatrix}"), i18n("bmatrix"), "bmatrix", QKeySequence(), receiver, SLOT(insertAmsTag(const KileAction::TagData&)),ac,"tag_env_bmatrix","\\begin{bmatrix}\n","%E\n\\end{bmatrix}\n", 0,1);
-    (void) new KileAction::Tag(i18n("Bmatrix - \\begin{Bmatrix}"), i18n("Bmatrix"), "BBmatrix", QKeySequence(), receiver, SLOT(insertAmsTag(const KileAction::TagData&)),ac,"tag_env_BBmatrix","\\begin{Bmatrix}\n","%E\n\\end{Bmatrix}\n", 0,1);
+    (void) new KileAction::Tag(i18n("matrix - \\begin{matrix}"), i18n("matrix"), "matrix", QKeySequence(), receiver, SLOT(insertAmsTag(KileAction::TagData)),ac,"tag_env_matrix","\\begin{matrix}\n","%E\n\\end{matrix}\n", 0,1);
+    (void) new KileAction::Tag(i18n("pmatrix - \\begin{pmatrix}"), i18n("pmatrix"), "pmatrix", QKeySequence(), receiver, SLOT(insertAmsTag(KileAction::TagData)),ac,"tag_env_pmatrix","\\begin{pmatrix}\n","%E\n\\end{pmatrix}\n", 0,1);
+    (void) new KileAction::Tag(i18n("vmatrix - \\begin{vmatrix}"), i18n("vmatrix"), "vmatrix", QKeySequence(), receiver, SLOT(insertAmsTag(KileAction::TagData)),ac,"tag_env_vmatrix","\\begin{vmatrix}\n","%E\n\\end{vmatrix}\n", 0,1);
+    (void) new KileAction::Tag(i18n("Vmatrix - \\begin{Vmatrix}"), i18n("Vmatrix"), "VVmatrix", QKeySequence(), receiver, SLOT(insertAmsTag(KileAction::TagData)),ac,"tag_env_VVmatrix","\\begin{Vmatrix}\n","%E\n\\end{Vmatrix}\n", 0,1);
+    (void) new KileAction::Tag(i18n("bmatrix - \\begin{bmatrix}"), i18n("bmatrix"), "bmatrix", QKeySequence(), receiver, SLOT(insertAmsTag(KileAction::TagData)),ac,"tag_env_bmatrix","\\begin{bmatrix}\n","%E\n\\end{bmatrix}\n", 0,1);
+    (void) new KileAction::Tag(i18n("Bmatrix - \\begin{Bmatrix}"), i18n("Bmatrix"), "BBmatrix", QKeySequence(), receiver, SLOT(insertAmsTag(KileAction::TagData)),ac,"tag_env_BBmatrix","\\begin{Bmatrix}\n","%E\n\\end{Bmatrix}\n", 0,1);
 
 }
 
diff --git a/src/kiletool.cpp b/src/kiletool.cpp
index 4d626d26..0eb7320d 100644
--- a/src/kiletool.cpp
+++ b/src/kiletool.cpp
@@ -522,8 +522,8 @@ void Base::installLauncher(Launcher *lr)
     //lr->setParamDict(paramDict());
     lr->setTool(this);
 
-    connect(lr, SIGNAL(message(int, const QString &)), this, SLOT(sendMessage(int, const QString &)));
-    connect(lr, SIGNAL(output(const QString &)), this, SLOT(filterOutput(const QString &)));
+    connect(lr, SIGNAL(message(int,QString)), this, SLOT(sendMessage(int,QString)));
+    connect(lr, SIGNAL(output(QString)), this, SLOT(filterOutput(QString)));
     connect(lr, SIGNAL(done(int)), this, SLOT(finish(int)));
 }
 
diff --git a/src/kiletoolmanager.cpp b/src/kiletoolmanager.cpp
index 10d8f807..3e369fbe 100644
--- a/src/kiletoolmanager.cpp
+++ b/src/kiletoolmanager.cpp
@@ -107,7 +107,7 @@ Manager::Manager(KileInfo *ki, KConfig *config, KileWidget::OutputView *output,
     connect(m_ki->parserManager(), SIGNAL(documentParsingComplete()), this, SLOT(handleDocumentParsingComplete()));
 
     connect(this, SIGNAL(childToolSpawned(KileTool::Base*,KileTool::Base*)),
-            m_ki->errorHandler(), SLOT(handleSpawnedChildTool(KileTool::Base*, KileTool::Base*)));
+            m_ki->errorHandler(), SLOT(handleSpawnedChildTool(KileTool::Base*,KileTool::Base*)));
 
     m_timer = new QTimer(this);
     connect(m_timer, SIGNAL(timeout()), this, SLOT(enableClear()));
@@ -198,8 +198,8 @@ int Manager::runImmediately(Base *tool, bool insertNext /*= false*/, bool block
     }
 
     if(dynamic_cast<KileTool::LaTeX*>(tool)) {
-        connect(tool, SIGNAL(done(KileTool::Base*, int, bool)),
-                m_ki->errorHandler(), SLOT(handleLaTeXToolDone(KileTool::Base*, int, bool)));
+        connect(tool, SIGNAL(done(KileTool::Base*,int,bool)),
+                m_ki->errorHandler(), SLOT(handleLaTeXToolDone(KileTool::Base*,int,bool)));
     }
 
     if(tool->needsToBePrepared()) {
@@ -294,9 +294,9 @@ void Manager::initTool(Base *tool)
     tool->setInfo(m_ki);
     tool->setConfig(m_config);
 
-    connect(tool, SIGNAL(message(int, const QString &, const QString &)), m_ki->errorHandler(), SLOT(printMessage(int, const QString &, const QString &)));
-    connect(tool, SIGNAL(output(const QString &)), m_output, SLOT(receive(const QString &)));
-    connect(tool, SIGNAL(done(KileTool::Base*,int,bool)), this, SLOT(done(KileTool::Base*, int)));
+    connect(tool, SIGNAL(message(int,QString,QString)), m_ki->errorHandler(), SLOT(printMessage(int,QString,QString)));
+    connect(tool, SIGNAL(output(QString)), m_output, SLOT(receive(QString)));
+    connect(tool, SIGNAL(done(KileTool::Base*,int,bool)), this, SLOT(done(KileTool::Base*,int)));
     connect(tool, SIGNAL(start(KileTool::Base*)), this, SLOT(started(KileTool::Base*)));
 }
 
diff --git a/src/kileviewmanager.cpp b/src/kileviewmanager.cpp
index e94ca151..3bc35fd0 100644
--- a/src/kileviewmanager.cpp
+++ b/src/kileviewmanager.cpp
@@ -391,8 +391,8 @@ KTextEditor::View * Manager::createTextView(KileDocument::TextInfo *info, int in
     connect(view, &KTextEditor::View::viewModeChanged, this, &Manager::updateCaption);
     connect(view, &KTextEditor::View::viewInputModeChanged, this, &Manager::updateModeStatus);
 //TODO KF5: signals not available anymore
-// 	connect(view, SIGNAL(informationMessage(KTextEditor::View*,const QString&)), this, SIGNAL(informationMessage(KTextEditor::View*,const QString&)));
-// 	connect(view, SIGNAL(dropEventPass(QDropEvent *)), m_ki->docManager(), SLOT(openDroppedURLs(QDropEvent *)));
+// 	connect(view, SIGNAL(informationMessage(KTextEditor::View*,QString)), this, SIGNAL(informationMessage(KTextEditor::View*,QString)));
+// 	connect(view, SIGNAL(dropEventPass(QDropEvent*)), m_ki->docManager(), SLOT(openDroppedURLs(QDropEvent*)));
     connect(view, &KTextEditor::View::textInserted, m_ki->codeCompletionManager(), &KileCodeCompletion::Manager::textInserted);
     connect(doc, &KTextEditor::Document::documentNameChanged, this, &Manager::updateTabTexts);
     connect(doc, &KTextEditor::Document::documentUrlChanged, this, &Manager::updateTabTexts);
@@ -1109,7 +1109,7 @@ void Manager::createViewerPart(KActionCollection *actionCollection)
         }
         viewerInterface->setWatchFileModeEnabled(false);
         viewerInterface->setShowSourceLocationsGraphically(true);
-        connect(m_viewerPart, SIGNAL(openSourceReference(const QString&, int, int)), this, SLOT(handleActivatedSourceReference(const QString&, int, int)));
+        connect(m_viewerPart, SIGNAL(openSourceReference(QString,int,int)), this, SLOT(handleActivatedSourceReference(QString,int,int)));
 
         QAction *paPrintCompiledDocument = actionCollection->addAction(KStandardAction::Print, "print_compiled_document", m_viewerPart, SLOT(slotPrint()));
         paPrintCompiledDocument->setText(i18n("Print Compiled Document..."));
diff --git a/src/kileviewmanager.h b/src/kileviewmanager.h
index aeea390f..4665e524 100644
--- a/src/kileviewmanager.h
+++ b/src/kileviewmanager.h
@@ -69,7 +69,7 @@ class DocumentViewerWindow : public KMainWindow
     Q_OBJECT
 
 public:
-    DocumentViewerWindow(QWidget *parent = Q_NULLPTR, Qt::WindowFlags f = KDE_DEFAULT_WINDOWFLAGS);
+    explicit DocumentViewerWindow(QWidget *parent = Q_NULLPTR, Qt::WindowFlags f = KDE_DEFAULT_WINDOWFLAGS);
     virtual ~DocumentViewerWindow();
 
 Q_SIGNALS:
diff --git a/src/livepreview.cpp b/src/livepreview.cpp
index bc7ba958..dbd7ff13 100644
--- a/src/livepreview.cpp
+++ b/src/livepreview.cpp
@@ -141,9 +141,9 @@ LivePreviewManager::LivePreviewManager(KileInfo *ki, KActionCollection *ac)
     connect(m_ki->viewManager(), SIGNAL(textViewClosed(KTextEditor::View*,bool)),
             this, SLOT(handleTextViewClosed(KTextEditor::View*,bool)));
     connect(m_ki->toolManager(), SIGNAL(childToolSpawned(KileTool::Base*,KileTool::Base*)),
-            this, SLOT(handleSpawnedChildTool(KileTool::Base*, KileTool::Base*)));
-    connect(m_ki->docManager(), SIGNAL(documentSavedAs(KTextEditor::View*, KileDocument::TextInfo*)),
-            this, SLOT(handleDocumentSavedAs(KTextEditor::View*, KileDocument::TextInfo*)));
+            this, SLOT(handleSpawnedChildTool(KileTool::Base*,KileTool::Base*)));
+    connect(m_ki->docManager(), SIGNAL(documentSavedAs(KTextEditor::View*,KileDocument::TextInfo*)),
+            this, SLOT(handleDocumentSavedAs(KTextEditor::View*,KileDocument::TextInfo*)));
     connect(m_ki->docManager(), SIGNAL(documentOpened(KileDocument::TextInfo*)),
             this, SLOT(handleDocumentOpened(KileDocument::TextInfo*)));
     connect(m_ki->docManager(), SIGNAL(projectOpened(KileProject*)),
diff --git a/src/parser/parsermanager.cpp b/src/parser/parsermanager.cpp
index e441b62d..053365db 100644
--- a/src/parser/parsermanager.cpp
+++ b/src/parser/parsermanager.cpp
@@ -32,8 +32,8 @@ Manager::Manager(KileInfo *info, QObject *parent) :
     m_documentParserThread = new DocumentParserThread(m_ki, this);
     // we have to make this connection 'blocking' to ensure that when 'ParserThread::isDocumentParsingComplete()'
     // returns true, all document info objects have been passed the information obtained from parsing already
-    connect(m_documentParserThread, SIGNAL(parsingComplete(const QUrl&, KileParser::ParserOutput*)),
-            m_ki->docManager(), SLOT(handleParsingComplete(const QUrl&, KileParser::ParserOutput*)), Qt::BlockingQueuedConnection);
+    connect(m_documentParserThread, SIGNAL(parsingComplete(QUrl,KileParser::ParserOutput*)),
+            m_ki->docManager(), SLOT(handleParsingComplete(QUrl,KileParser::ParserOutput*)), Qt::BlockingQueuedConnection);
     // the next two can't be made 'blocking' as they are emitted when a mutex is held
     connect(m_documentParserThread, SIGNAL(parsingQueueEmpty()),
             this, SIGNAL(documentParsingComplete()), Qt::QueuedConnection);
@@ -42,8 +42,8 @@ Manager::Manager(KileInfo *info, QObject *parent) :
     m_documentParserThread->start();
 
     m_outputParserThread = new OutputParserThread(m_ki, this);
-    connect(m_outputParserThread, SIGNAL(parsingComplete(const QUrl&, KileParser::ParserOutput*)),
-            this, SLOT(handleOutputParsingComplete(const QUrl&, KileParser::ParserOutput*)), Qt::QueuedConnection);
+    connect(m_outputParserThread, SIGNAL(parsingComplete(QUrl,KileParser::ParserOutput*)),
+            this, SLOT(handleOutputParsingComplete(QUrl,KileParser::ParserOutput*)), Qt::QueuedConnection);
     m_outputParserThread->start();
 }
 
diff --git a/src/parser/parserthread.h b/src/parser/parserthread.h
index 7206ea70..051c4969 100644
--- a/src/parser/parserthread.h
+++ b/src/parser/parserthread.h
@@ -65,7 +65,7 @@ class ParserThread : public QThread
     Q_OBJECT
 
 public:
-    ParserThread(KileInfo *info, QObject *parent = 0);
+    explicit ParserThread(KileInfo *info, QObject *parent = 0);
     virtual ~ParserThread();
 
     void stopParsing();
@@ -109,7 +109,7 @@ class DocumentParserThread : public ParserThread
     Q_OBJECT
 
 public:
-    DocumentParserThread(KileInfo *info, QObject *parent = Q_NULLPTR);
+    explicit DocumentParserThread(KileInfo *info, QObject *parent = Q_NULLPTR);
     virtual ~DocumentParserThread();
 
 public Q_SLOTS:
@@ -128,7 +128,7 @@ class OutputParserThread: public ParserThread
     Q_OBJECT
 
 public:
-    OutputParserThread(KileInfo *info, QObject *parent = Q_NULLPTR);
+    explicit OutputParserThread(KileInfo *info, QObject *parent = Q_NULLPTR);
     virtual ~OutputParserThread();
 
 public Q_SLOTS:
diff --git a/src/quickpreview.h b/src/quickpreview.h
index f756ec0f..52d3497d 100644
--- a/src/quickpreview.h
+++ b/src/quickpreview.h
@@ -37,7 +37,7 @@ class QuickPreview : public QObject
     Q_OBJECT
 
 public:
-    QuickPreview(KileInfo *ki);
+    explicit QuickPreview(KileInfo *ki);
     ~QuickPreview();
 
     bool run(const QString &text,const QString &textfilename,int startrow);
diff --git a/src/scripting/kilescriptobject.h b/src/scripting/kilescriptobject.h
index 48314b42..ebfb98c1 100644
--- a/src/scripting/kilescriptobject.h
+++ b/src/scripting/kilescriptobject.h
@@ -55,7 +55,7 @@ class KileInput : public QObject
     Q_OBJECT
 
 public:
-    KileInput(QObject *parent);
+    explicit KileInput(QObject *parent);
     virtual ~KileInput() {}
 
     // get input values
@@ -105,7 +105,7 @@ class KileJavaScript : public QObject
     Q_OBJECT
 
 public:
-    KileJavaScript(QObject *parent);
+    explicit KileJavaScript(QObject *parent);
     virtual ~KileJavaScript() {}
 
     void setScriptname(const QString &name) {
diff --git a/src/scriptmanager.cpp b/src/scriptmanager.cpp
index b8054925..c98e96cd 100644
--- a/src/scriptmanager.cpp
+++ b/src/scriptmanager.cpp
@@ -51,9 +51,9 @@ Manager::Manager(KileInfo *kileInfo, KConfig *config, KActionCollection *actionC
 
     m_jScriptDirWatch = new KDirWatch(this);
     m_jScriptDirWatch->setObjectName("KileScript::Manager::ScriptDirWatch");
-    connect(m_jScriptDirWatch, SIGNAL(dirty(const QString&)), this, SLOT(scanScriptDirectories()));
-    connect(m_jScriptDirWatch, SIGNAL(created(const QString&)), this, SLOT(scanScriptDirectories()));
-    connect(m_jScriptDirWatch, SIGNAL(deleted(const QString&)), this, SLOT(scanScriptDirectories()));
+    connect(m_jScriptDirWatch, SIGNAL(dirty(QString)), this, SLOT(scanScriptDirectories()));
+    connect(m_jScriptDirWatch, SIGNAL(created(QString)), this, SLOT(scanScriptDirectories()));
+    connect(m_jScriptDirWatch, SIGNAL(deleted(QString)), this, SLOT(scanScriptDirectories()));
     m_jScriptDirWatch->startScan();
 
     // read plugin code for QScriptEngine
diff --git a/src/templates.cpp b/src/templates.cpp
index 61a03e8f..734b0f29 100644
--- a/src/templates.cpp
+++ b/src/templates.cpp
@@ -340,7 +340,7 @@ void TemplateIconView::searchLaTeXClassFiles()
     m_proc->setReadChannel(QProcess::StandardOutput);
 
     connect(m_proc, SIGNAL(readyReadStandardOutput()), this, SLOT(slotProcessOutput()));
-    connect(m_proc, SIGNAL(finished(int, QProcess::ExitStatus)), this, SLOT(slotProcessExited(int, QProcess::ExitStatus)));
+    connect(m_proc, SIGNAL(finished(int,QProcess::ExitStatus)), this, SLOT(slotProcessExited(int,QProcess::ExitStatus)));
     connect(m_proc, SIGNAL(error(QProcess::ProcessError)), this, SLOT(slotProcessError()));
     KILE_DEBUG_MAIN << "=== NewFileWidget::searchClassFiles() ====================";
     KILE_DEBUG_MAIN << "\texecute: " << command;
diff --git a/src/templates.h b/src/templates.h
index d3421994..c904af19 100644
--- a/src/templates.h
+++ b/src/templates.h
@@ -144,7 +144,7 @@ class TemplateIconView : public QListWidget {
     Q_OBJECT
 
 public:
-    TemplateIconView(QWidget *parent = Q_NULLPTR);
+    explicit TemplateIconView(QWidget *parent = Q_NULLPTR);
     virtual ~TemplateIconView();
 
     void setTemplateManager(KileTemplate::Manager *templateManager);
diff --git a/src/userhelp.cpp b/src/userhelp.cpp
index e8432031..db32e9f3 100644
--- a/src/userhelp.cpp
+++ b/src/userhelp.cpp
@@ -124,7 +124,7 @@ void UserHelp::setupUserHelpMenu()
                 QString icon = (!url.isLocalFile()) ? "viewhtml" : "view" + ext;
                 action->setIcon(QIcon::fromTheme(icon));
             }
-            connect(action, SIGNAL(triggered(const QUrl&)), this, SLOT(slotUserHelpActivated(const QUrl&)));
+            connect(action, SIGNAL(triggered(QUrl)), this, SLOT(slotUserHelpActivated(QUrl)));
             m_userHelpActionMenu->addAction(action);
             m_actionList.append(action);
         }
diff --git a/src/usermenu/usermenu.cpp b/src/usermenu/usermenu.cpp
index b87f0f8c..7d1d5f53 100644
--- a/src/usermenu/usermenu.cpp
+++ b/src/usermenu/usermenu.cpp
@@ -866,7 +866,7 @@ void UserMenu::execActionProgramOutput(KTextEditor::View *view, const UserMenuDa
 
     connect(m_proc, SIGNAL(readyReadStandardOutput()), this, SLOT(slotProcessOutput()));
     connect(m_proc, SIGNAL(readyReadStandardError()),  this, SLOT(slotProcessOutput()));
-    connect(m_proc, SIGNAL(finished(int, QProcess::ExitStatus)), this, SLOT(slotProcessExited(int, QProcess::ExitStatus)));
+    connect(m_proc, SIGNAL(finished(int,QProcess::ExitStatus)), this, SLOT(slotProcessExited(int,QProcess::ExitStatus)));
 
     KILE_DEBUG_MAIN << "... start proc: " << cmdline;
     // init and/or save important data
@@ -916,7 +916,7 @@ void UserMenu::insertText(KTextEditor::View *view, const QString &text, bool rep
     if(!metachar.isEmpty()) {
         QStringList list = text.split(metachar);
 
-        KileAction::InputTag tag(m_ki, i18n("Input Dialog"), QString(), QKeySequence(), m_receiver, SLOT(insertTag(const KileAction::TagData&)), m_actioncollection,"tag_temporary_action", m_ki->mainWindow(), actiontype, list.at(0)+metachar, list.at(1), list.at(0).length(), 0, QString(), label);
+        KileAction::InputTag tag(m_ki, i18n("Input Dialog"), QString(), QKeySequence(), m_receiver, SLOT(insertTag(KileAction::TagData)), m_actioncollection,"tag_temporary_action", m_ki->mainWindow(), actiontype, list.at(0)+metachar, list.at(1), list.at(0).length(), 0, QString(), label);
 
         tag.activate(QAction::Trigger);
         return;
diff --git a/src/widgets/abbreviationview.cpp b/src/widgets/abbreviationview.cpp
index 4469fa1f..b6a68da6 100644
--- a/src/widgets/abbreviationview.cpp
+++ b/src/widgets/abbreviationview.cpp
@@ -45,7 +45,7 @@ AbbreviationView::AbbreviationView(KileAbbreviation::Manager *manager, QWidget *
     setContextMenuPolicy(Qt::CustomContextMenu);
 
     connect(this, SIGNAL(itemActivated(QTreeWidgetItem*,int)), this, SLOT(slotItemClicked(QTreeWidgetItem*,int)));
-    connect(this, SIGNAL(customContextMenuRequested(const QPoint&)), this, SLOT(slotCustomContextMenuRequested(const QPoint&)));
+    connect(this, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(slotCustomContextMenuRequested(QPoint)));
 }
 
 AbbreviationView::~AbbreviationView()
diff --git a/src/widgets/abbreviationview.h b/src/widgets/abbreviationview.h
index cf5e98a9..04ce514e 100644
--- a/src/widgets/abbreviationview.h
+++ b/src/widgets/abbreviationview.h
@@ -36,7 +36,7 @@ public:
     enum {ALVabbrev = 0, ALVlocal = 1, ALVexpansion = 2};
     enum {ALVnone = 0, ALVadd = 1, ALVedit = 2, ALVdelete = 3};
 
-    AbbreviationView(KileAbbreviation::Manager *manager, QWidget *parent = Q_NULLPTR);
+    explicit AbbreviationView(KileAbbreviation::Manager *manager, QWidget *parent = Q_NULLPTR);
     ~AbbreviationView();
 
     bool findAbbreviation(const QString &abbrev);
diff --git a/src/widgets/appearanceconfigwidget.h b/src/widgets/appearanceconfigwidget.h
index 70b03254..65da8ed0 100644
--- a/src/widgets/appearanceconfigwidget.h
+++ b/src/widgets/appearanceconfigwidget.h
@@ -25,7 +25,7 @@ class KileWidgetAppearanceConfig : public QWidget, public Ui::KileWidgetAppearan
     Q_OBJECT
 
 public:
-    KileWidgetAppearanceConfig(KConfig *config, QWidget *parent = Q_NULLPTR);
+    explicit KileWidgetAppearanceConfig(KConfig *config, QWidget *parent = Q_NULLPTR);
     ~KileWidgetAppearanceConfig();
 
     void readConfig();
diff --git a/src/widgets/codecompletionconfigwidget.cpp b/src/widgets/codecompletionconfigwidget.cpp
index 59a37685..bd642e13 100644
--- a/src/widgets/codecompletionconfigwidget.cpp
+++ b/src/widgets/codecompletionconfigwidget.cpp
@@ -78,8 +78,8 @@ CodeCompletionConfigWidget::CodeCompletionConfigWidget(KConfig *config, KileErro
     if (m_dirWatcher) {
         m_dirWatcher->addDir(m_localCwlDir, KDirWatch::WatchSubDirs | KDirWatch::WatchFiles);
         m_dirWatcher->addDir(m_globalCwlDir, KDirWatch::WatchSubDirs | KDirWatch::WatchFiles);
-        connect(m_dirWatcher, SIGNAL(created(const QString&)), this, SLOT(updateCompletionFilesTab(const QString&)));
-        connect(m_dirWatcher, SIGNAL(deleted(const QString&)), this, SLOT(updateCompletionFilesTab(const QString&)));
+        connect(m_dirWatcher, SIGNAL(created(QString)), this, SLOT(updateCompletionFilesTab(QString)));
+        connect(m_dirWatcher, SIGNAL(deleted(QString)), this, SLOT(updateCompletionFilesTab(QString)));
     }
 }
 
diff --git a/src/widgets/configcheckerwidget.h b/src/widgets/configcheckerwidget.h
index 53878580..7a929bcc 100644
--- a/src/widgets/configcheckerwidget.h
+++ b/src/widgets/configcheckerwidget.h
@@ -27,7 +27,7 @@ class ConfigCheckerWidget : public QWidget, public Ui::ConfigCheckerWidget
     Q_OBJECT
 
 public:
-    ConfigCheckerWidget(QWidget *parent = 0);
+    explicit ConfigCheckerWidget(QWidget *parent = 0);
     ~ConfigCheckerWidget();
 
     QProgressBar* progressBar();
diff --git a/src/widgets/environmentconfigwidget.h b/src/widgets/environmentconfigwidget.h
index 8c4e7fe8..72ca1932 100644
--- a/src/widgets/environmentconfigwidget.h
+++ b/src/widgets/environmentconfigwidget.h
@@ -23,7 +23,7 @@ class KileWidgetEnvironmentConfig : public QWidget, public Ui::KileWidgetEnviron
     Q_OBJECT
 
 public:
-    KileWidgetEnvironmentConfig(QWidget *parent = 0);
+    explicit KileWidgetEnvironmentConfig(QWidget *parent = 0);
     ~KileWidgetEnvironmentConfig();
 };
 
diff --git a/src/widgets/filebrowserwidget.cpp b/src/widgets/filebrowserwidget.cpp
index 3e06c76b..3bd688ba 100644
--- a/src/widgets/filebrowserwidget.cpp
+++ b/src/widgets/filebrowserwidget.cpp
@@ -59,7 +59,7 @@ FileBrowserWidget::FileBrowserWidget(KileDocument::Extensions *extensions, QWidg
     KFilePlacesModel* model = new KFilePlacesModel(this);
     m_urlNavigator = new KUrlNavigator(model, QUrl::fromLocalFile(QDir::homePath()), this);
     layout->addWidget(m_urlNavigator);
-    connect(m_urlNavigator, SIGNAL(urlChanged(const QUrl&)), SLOT(setDir(const QUrl&)));
+    connect(m_urlNavigator, SIGNAL(urlChanged(QUrl)), SLOT(setDir(QUrl)));
 
     m_dirOperator = new KDirOperator(QUrl(), this);
     m_dirOperator->setViewConfig(m_configGroup);
@@ -68,9 +68,9 @@ FileBrowserWidget::FileBrowserWidget(KileDocument::Extensions *extensions, QWidg
     m_dirOperator->setMode(KFile::Files);
     setFocusProxy(m_dirOperator);
 
-    connect(m_urlNavigator, SIGNAL(urlChanged(const QUrl&)), m_dirOperator, SLOT(setFocus()));
-    connect(m_dirOperator, SIGNAL(fileSelected(const KFileItem&)), this, SIGNAL(fileSelected(const KFileItem&)));
-    connect(m_dirOperator, SIGNAL(urlEntered(const QUrl&)), this, SLOT(dirUrlEntered(const QUrl&)));
+    connect(m_urlNavigator, SIGNAL(urlChanged(QUrl)), m_dirOperator, SLOT(setFocus()));
+    connect(m_dirOperator, SIGNAL(fileSelected(KFileItem)), this, SIGNAL(fileSelected(KFileItem)));
+    connect(m_dirOperator, SIGNAL(urlEntered(QUrl)), this, SLOT(dirUrlEntered(QUrl)));
 
 
 
diff --git a/src/widgets/generalconfigwidget.h b/src/widgets/generalconfigwidget.h
index a2fdd18e..ad086381 100644
--- a/src/widgets/generalconfigwidget.h
+++ b/src/widgets/generalconfigwidget.h
@@ -24,7 +24,7 @@ class KileWidgetGeneralConfig : public QWidget, public Ui::KileWidgetGeneralConf
     Q_OBJECT
 
 public:
-    KileWidgetGeneralConfig(QWidget *parent = Q_NULLPTR);
+    explicit KileWidgetGeneralConfig(QWidget *parent = Q_NULLPTR);
     ~KileWidgetGeneralConfig();
 
 private Q_SLOTS:
diff --git a/src/widgets/graphicsconfigwidget.h b/src/widgets/graphicsconfigwidget.h
index 0189d1fd..cd44a734 100644
--- a/src/widgets/graphicsconfigwidget.h
+++ b/src/widgets/graphicsconfigwidget.h
@@ -23,7 +23,7 @@ class KileWidgetGraphicsConfig : public QWidget, public Ui::KileWidgetGraphicsCo
     Q_OBJECT
 
 public:
-    KileWidgetGraphicsConfig(QWidget *parent = 0);
+    explicit KileWidgetGraphicsConfig(QWidget *parent = 0);
     ~KileWidgetGraphicsConfig();
 };
 
diff --git a/src/widgets/helpconfigwidget.h b/src/widgets/helpconfigwidget.h
index 2250b3a3..8a2d18a1 100644
--- a/src/widgets/helpconfigwidget.h
+++ b/src/widgets/helpconfigwidget.h
@@ -26,7 +26,7 @@ class KileWidgetHelpConfig : public QWidget, public Ui::KileWidgetHelpConfig
     Q_OBJECT
 
 public:
-    KileWidgetHelpConfig(QWidget *parent = 0);
+    explicit KileWidgetHelpConfig(QWidget *parent = 0);
     ~KileWidgetHelpConfig();
 
     void setHelp(KileHelp::Help *help);
diff --git a/src/widgets/latexconfigwidget.h b/src/widgets/latexconfigwidget.h
index 5441608d..902469b5 100644
--- a/src/widgets/latexconfigwidget.h
+++ b/src/widgets/latexconfigwidget.h
@@ -27,7 +27,7 @@ class KileWidgetLatexConfig : public QWidget, public Ui::KileWidgetLatexConfig
     Q_OBJECT
 
 public:
-    KileWidgetLatexConfig(QWidget *parent = 0);
+    explicit KileWidgetLatexConfig(QWidget *parent = 0);
     ~KileWidgetLatexConfig();
 
     void setLatexCommands(KConfig *config, KileDocument::LatexCommands *commands);
diff --git a/src/widgets/latextoolconfigwidget.h b/src/widgets/latextoolconfigwidget.h
index f3f13b9c..864d84a5 100644
--- a/src/widgets/latextoolconfigwidget.h
+++ b/src/widgets/latextoolconfigwidget.h
@@ -23,7 +23,7 @@ class LaTeXToolConfigWidget : public QWidget, public Ui::LaTeXToolConfigWidget
     Q_OBJECT
 
 public:
-    LaTeXToolConfigWidget(QWidget *parent = 0);
+    explicit LaTeXToolConfigWidget(QWidget *parent = 0);
     ~LaTeXToolConfigWidget();
 };
 
diff --git a/src/widgets/livepreviewconfigwidget.h b/src/widgets/livepreviewconfigwidget.h
index d2dad53a..8565eedd 100644
--- a/src/widgets/livepreviewconfigwidget.h
+++ b/src/widgets/livepreviewconfigwidget.h
@@ -25,7 +25,7 @@ class KileWidgetLivePreviewConfig : public QWidget, public Ui::KileWidgetLivePre
     Q_OBJECT
 
 public:
-    KileWidgetLivePreviewConfig(KConfig *config, QWidget *parent = Q_NULLPTR);
+    explicit KileWidgetLivePreviewConfig(KConfig *config, QWidget *parent = Q_NULLPTR);
     ~KileWidgetLivePreviewConfig();
 
     void readConfig();
diff --git a/src/widgets/logwidget.h b/src/widgets/logwidget.h
index 90833711..aebbaeac 100644
--- a/src/widgets/logwidget.h
+++ b/src/widgets/logwidget.h
@@ -34,7 +34,7 @@ class LogWidgetItemDelegate : public QItemDelegate
     Q_OBJECT
 
 public:
-    LogWidgetItemDelegate(QObject* parent = Q_NULLPTR);
+    explicit LogWidgetItemDelegate(QObject* parent = Q_NULLPTR);
 
     virtual QSize sizeHint(const QStyleOptionViewItem& option,
                            const QModelIndex& index) const;
@@ -60,7 +60,7 @@ public:
 
     enum PopupType { AllPopupActions = 0, NoHideActions = 1};
 
-    LogWidget(PopupType popupType = AllPopupActions, QWidget *parent = Q_NULLPTR, const char *name = Q_NULLPTR);
+    explicit LogWidget(PopupType popupType = AllPopupActions, QWidget *parent = Q_NULLPTR, const char *name = Q_NULLPTR);
     ~LogWidget();
 
     bool isShowingOutput() const;
diff --git a/src/widgets/maintoolconfigwidget.h b/src/widgets/maintoolconfigwidget.h
index a07ad081..7b7ebfad 100644
--- a/src/widgets/maintoolconfigwidget.h
+++ b/src/widgets/maintoolconfigwidget.h
@@ -23,7 +23,7 @@ class ToolConfigWidget : public QWidget, public Ui::ToolConfigWidget
     Q_OBJECT
 
 public:
-    ToolConfigWidget(QWidget *parent = 0);
+    explicit ToolConfigWidget(QWidget *parent = 0);
     ~ToolConfigWidget();
 };
 
diff --git a/src/widgets/newdocumentwidget.h b/src/widgets/newdocumentwidget.h
index 45db8bed..eba228c3 100644
--- a/src/widgets/newdocumentwidget.h
+++ b/src/widgets/newdocumentwidget.h
@@ -23,7 +23,7 @@ class NewDocumentWidget : public QWidget, public Ui::NewDocumentWidget
     Q_OBJECT
 
 public:
-    NewDocumentWidget(QWidget *parent = 0);
+    explicit NewDocumentWidget(QWidget *parent = 0);
     ~NewDocumentWidget();
 };
 
diff --git a/src/widgets/outputview.h b/src/widgets/outputview.h
index 06d6f605..69c9d698 100644
--- a/src/widgets/outputview.h
+++ b/src/widgets/outputview.h
@@ -24,7 +24,7 @@ class OutputView : public KTextEdit
     Q_OBJECT
 
 public:
-    OutputView(QWidget *parent);
+    explicit OutputView(QWidget *parent);
     ~OutputView();
 
 public Q_SLOTS:
diff --git a/src/widgets/processtoolconfigwidget.h b/src/widgets/processtoolconfigwidget.h
index 5e131b0b..01c87595 100644
--- a/src/widgets/processtoolconfigwidget.h
+++ b/src/widgets/processtoolconfigwidget.h
@@ -23,7 +23,7 @@ class ProcessToolConfigWidget : public QWidget, public Ui::ProcessToolConfigWidg
     Q_OBJECT
 
 public:
-    ProcessToolConfigWidget(QWidget *parent = 0);
+    explicit ProcessToolConfigWidget(QWidget *parent = 0);
     ~ProcessToolConfigWidget();
 };
 
diff --git a/src/widgets/progressdialog.h b/src/widgets/progressdialog.h
index 5eb43615..72d1db73 100644
--- a/src/widgets/progressdialog.h
+++ b/src/widgets/progressdialog.h
@@ -28,7 +28,7 @@ class ProgressDialog : public QProgressDialog
     Q_OBJECT
 
 public:
-    ProgressDialog(QWidget *parent = Q_NULLPTR);
+    explicit ProgressDialog(QWidget *parent = Q_NULLPTR);
     ~ProgressDialog();
     virtual void closeEvent(QCloseEvent *event) Q_DECL_OVERRIDE;
 
diff --git a/src/widgets/projectview.cpp b/src/widgets/projectview.cpp
index 03aad263..3e7bca1e 100644
--- a/src/widgets/projectview.cpp
+++ b/src/widgets/projectview.cpp
@@ -409,7 +409,7 @@ void ProjectView::makeTheConnection(ProjectViewItem *item, KileDocument::TextInf
             qWarning() << "makeTheConnection COULD NOT FIND AN PROJECT OBJECT FOR " << item->url().toLocalFile();
         }
         else {
-            connect(project, SIGNAL(nameChanged(const QString &)), item, SLOT(nameChanged(const QString &)));
+            connect(project, SIGNAL(nameChanged(QString)), item, SLOT(nameChanged(QString)));
         }
     }
     else {
@@ -421,7 +421,7 @@ void ProjectView::makeTheConnection(ProjectViewItem *item, KileDocument::TextInf
             }
         }
         item->setInfo(textInfo);
-        connect(textInfo, SIGNAL(urlChanged(KileDocument::Info*, const QUrl&)),  item, SLOT(slotURLChanged(KileDocument::Info*, const QUrl&)));
+        connect(textInfo, SIGNAL(urlChanged(KileDocument::Info*,QUrl)),  item, SLOT(slotURLChanged(KileDocument::Info*,QUrl)));
         connect(textInfo, SIGNAL(isrootChanged(bool)), item, SLOT(isrootChanged(bool)));
         //set the pixmap
         item->isrootChanged(textInfo->isLaTeXRoot());
diff --git a/src/widgets/quicktoolconfigwidget.cpp b/src/widgets/quicktoolconfigwidget.cpp
index f36bcafc..57dd8498 100644
--- a/src/widgets/quicktoolconfigwidget.cpp
+++ b/src/widgets/quicktoolconfigwidget.cpp
@@ -36,7 +36,7 @@ void QuickToolConfigWidget::updateSequence(const QString &sequence)
     m_cbTools->addItems(toollist);
 
     updateConfigs(m_cbTools->currentText());
-    connect(m_cbTools, SIGNAL(activated(const QString&)), this, SLOT(updateConfigs(const QString&)));
+    connect(m_cbTools, SIGNAL(activated(QString)), this, SLOT(updateConfigs(QString)));
 
     m_sequence = sequence;
     QStringList list = sequence.split(',', QString::SkipEmptyParts);
diff --git a/src/widgets/quicktoolconfigwidget.h b/src/widgets/quicktoolconfigwidget.h
index f09ba028..e3bbd3b6 100644
--- a/src/widgets/quicktoolconfigwidget.h
+++ b/src/widgets/quicktoolconfigwidget.h
@@ -23,7 +23,7 @@ class QuickToolConfigWidget : public QWidget, public Ui::QuickToolConfigWidget
     Q_OBJECT
 
 public:
-    QuickToolConfigWidget(QWidget *parent = 0);
+    explicit QuickToolConfigWidget(QWidget *parent = 0);
     ~QuickToolConfigWidget();
 
 public Q_SLOTS:
diff --git a/src/widgets/scriptingconfigwidget.h b/src/widgets/scriptingconfigwidget.h
index 787886aa..796af7ae 100644
--- a/src/widgets/scriptingconfigwidget.h
+++ b/src/widgets/scriptingconfigwidget.h
@@ -23,7 +23,7 @@ class KileWidgetScriptingConfig : public QWidget, public Ui::KileWidgetScripting
     Q_OBJECT
 
 public:
-    KileWidgetScriptingConfig(QWidget *parent = 0);
+    explicit KileWidgetScriptingConfig(QWidget *parent = 0);
     ~KileWidgetScriptingConfig();
 };
 
diff --git a/src/widgets/scriptsmanagementwidget.cpp b/src/widgets/scriptsmanagementwidget.cpp
index 375f069e..4cef7a69 100644
--- a/src/widgets/scriptsmanagementwidget.cpp
+++ b/src/widgets/scriptsmanagementwidget.cpp
@@ -118,8 +118,8 @@ ScriptsManagement::ScriptsManagement(KileInfo *kileInfo, QWidget *parent, const
     m_treeWidget->setSelectionBehavior(QAbstractItemView::SelectRows);
     m_treeWidget->setRootIsDecorated(false);
     connect(m_kileInfo->scriptManager(), SIGNAL(scriptsChanged()), this, SLOT(update()));
-// 	connect(m_treeWidget, SIGNAL(doubleClicked(QListViewItem*, const QPoint&, int)), this, SLOT(executed(QListViewItem*, const QPoint&, int)));
-// 	connect(m_treeWidget, SIGNAL(itemRenamed(QListViewItem*, const QString&, int)), this, SLOT(itemRenamed(QListViewItem*, const QString&, int)));
+// 	connect(m_treeWidget, SIGNAL(doubleClicked(QListViewItem*,QPoint,int)), this, SLOT(executed(QListViewItem*,QPoint,int)));
+// 	connect(m_treeWidget, SIGNAL(itemRenamed(QListViewItem*,QString,int)), this, SLOT(itemRenamed(QListViewItem*,QString,int)));
     connect(m_treeWidget, SIGNAL(itemSelectionChanged()), this, SLOT(updateButtonPanel()));
 
     baseLayout->addWidget(m_treeWidget);
diff --git a/src/widgets/scriptsmanagementwidget.h b/src/widgets/scriptsmanagementwidget.h
index a92a3e85..aa02ce1b 100644
--- a/src/widgets/scriptsmanagementwidget.h
+++ b/src/widgets/scriptsmanagementwidget.h
@@ -35,7 +35,7 @@ namespace KileWidget {
 class ScriptsManagement : public QWidget {
     Q_OBJECT
 public:
-    ScriptsManagement(KileInfo *kileInfo, QWidget *parent = 0, const char *name = 0, Qt::WindowFlags f = 0);
+    explicit ScriptsManagement(KileInfo *kileInfo, QWidget *parent = 0, const char *name = 0, Qt::WindowFlags f = 0);
     ~ScriptsManagement();
 
 public:
diff --git a/src/widgets/sidebar.h b/src/widgets/sidebar.h
index 3e4fe16a..e134a38b 100644
--- a/src/widgets/sidebar.h
+++ b/src/widgets/sidebar.h
@@ -106,7 +106,7 @@ class BottomBar : public SideBar
     Q_OBJECT
 
 public:
-    BottomBar(QWidget *parent = Q_NULLPTR);
+    explicit BottomBar(QWidget *parent = Q_NULLPTR);
 
 };
 
diff --git a/src/widgets/statusbar.h b/src/widgets/statusbar.h
index da47a9e0..eb5b1d10 100644
--- a/src/widgets/statusbar.h
+++ b/src/widgets/statusbar.h
@@ -27,7 +27,7 @@ class StatusBar : public QStatusBar
     Q_OBJECT
 
 public:
-    StatusBar(KileErrorHandler *errorHandler, QWidget *parent = Q_NULLPTR);
+    explicit StatusBar(KileErrorHandler *errorHandler, QWidget *parent = Q_NULLPTR);
     ~StatusBar();
 
 public:
diff --git a/src/widgets/structureviewconfigwidget.h b/src/widgets/structureviewconfigwidget.h
index aba9ece4..7754754d 100644
--- a/src/widgets/structureviewconfigwidget.h
+++ b/src/widgets/structureviewconfigwidget.h
@@ -23,7 +23,7 @@ class KileWidgetStructureViewConfig : public QWidget, public Ui::KileWidgetStruc
     Q_OBJECT
 
 public:
-    KileWidgetStructureViewConfig(QWidget *parent = 0);
+    explicit KileWidgetStructureViewConfig(QWidget *parent = 0);
     ~KileWidgetStructureViewConfig();
 };
 
diff --git a/src/widgets/structurewidget.cpp b/src/widgets/structurewidget.cpp
index c3660bc1..39e7b7ac 100644
--- a/src/widgets/structurewidget.cpp
+++ b/src/widgets/structurewidget.cpp
@@ -144,7 +144,7 @@ StructureView::StructureView(StructureWidget *stack, KileDocument::Info *docinfo
     setAllColumnsShowFocus(true);
     setSizePolicy(QSizePolicy::Ignored, QSizePolicy::Ignored);
 
-    //connect(this, SIGNAL(clicked(QListViewItem *)), m_stack, SLOT(slotClicked(QListViewItem *)));
+    //connect(this, SIGNAL(clicked(QListViewItem*)), m_stack, SLOT(slotClicked(QListViewItem*)));
     connect(this, SIGNAL(itemDoubleClicked(QTreeWidgetItem*,int)), m_stack, SLOT(slotDoubleClicked(QTreeWidgetItem*)));
 
     connect(this, SIGNAL(itemClicked(QTreeWidgetItem*,int)), m_stack, SLOT(slotClicked(QTreeWidgetItem*)));
@@ -163,8 +163,8 @@ void StructureView::init()
         m_root->setURL(m_docinfo->url());
         m_root->setExpanded(true);
         m_root->setIcon(0, QIcon::fromTheme("contents"));
-        connect(m_docinfo, SIGNAL(foundItem(const QString&, uint, uint, int, int, uint, uint, const QString &, const QString &)),
-                this, SLOT(addItem(const QString&, uint, uint, int, int, uint, uint, const QString &, const QString &)));
+        connect(m_docinfo, SIGNAL(foundItem(QString,uint,uint,int,int,uint,uint,QString,QString)),
+                this, SLOT(addItem(QString,uint,uint,int,int,uint,uint,QString,QString)));
     }
 
     m_parent[0]=m_parent[1]=m_parent[2]=m_parent[3]=m_parent[4]=m_parent[5]=m_parent[6]=m_root;
diff --git a/src/widgets/symbolviewconfigwidget.h b/src/widgets/symbolviewconfigwidget.h
index 2c1a438d..13937656 100644
--- a/src/widgets/symbolviewconfigwidget.h
+++ b/src/widgets/symbolviewconfigwidget.h
@@ -23,7 +23,7 @@ class KileWidgetSymbolViewConfig : public QWidget, public Ui::KileWidgetSymbolVi
     Q_OBJECT
 
 public:
-    KileWidgetSymbolViewConfig(QWidget *parent = 0);
+    explicit KileWidgetSymbolViewConfig(QWidget *parent = 0);
     ~KileWidgetSymbolViewConfig();
 };
 
diff --git a/src/widgets/toolconfigwidget.cpp b/src/widgets/toolconfigwidget.cpp
index 48b4c940..bbdec821 100644
--- a/src/widgets/toolconfigwidget.cpp
+++ b/src/widgets/toolconfigwidget.cpp
@@ -99,7 +99,7 @@ ToolConfig::ToolConfig(KileTool::Manager *mngr, QWidget *parent, const char *nam
 
     switchConfig(cfg);
     switchTo(m_current, false);
-    connect(m_configWidget->m_lstbTools, SIGNAL(currentTextChanged(const QString &)), this, SLOT(switchTo(const QString &)));
+    connect(m_configWidget->m_lstbTools, SIGNAL(currentTextChanged(QString)), this, SLOT(switchTo(QString)));
 
     connect(this, SIGNAL(changed()), this, SLOT(updateAdvanced()));
     connect(this, SIGNAL(changed()), this, SLOT(updateGeneral()));
@@ -116,12 +116,12 @@ void ToolConfig::setupAdvanced()
 
     m_classes << "Compile" << "Convert" << "Archive" << KileTool::BibliographyCompile::ToolClass << "View" <<  "Sequence" << "LaTeX" << "ViewHTML" << "ViewBib" << "ForwardDVI" << "Base";
     m_configWidget->m_cbClass->addItems(m_classes);
-    connect(m_configWidget->m_cbClass, SIGNAL(activated(const QString &)), this, SLOT(switchClass(const QString &)));
+    connect(m_configWidget->m_cbClass, SIGNAL(activated(QString)), this, SLOT(switchClass(QString)));
 
-    connect(m_configWidget->m_leSource, SIGNAL(textChanged(const QString &)), this, SLOT(setFrom(const QString &)));
-    connect(m_configWidget->m_leTarget, SIGNAL(textChanged(const QString &)), this, SLOT(setTo(const QString &)));
-    connect(m_configWidget->m_leFile, SIGNAL(textChanged(const QString &)), this, SLOT(setTarget(const QString &)));
-    connect(m_configWidget->m_leRelDir, SIGNAL(textChanged(const QString &)), this, SLOT(setRelDir(const QString &)));
+    connect(m_configWidget->m_leSource, SIGNAL(textChanged(QString)), this, SLOT(setFrom(QString)));
+    connect(m_configWidget->m_leTarget, SIGNAL(textChanged(QString)), this, SLOT(setTo(QString)));
+    connect(m_configWidget->m_leFile, SIGNAL(textChanged(QString)), this, SLOT(setTarget(QString)));
+    connect(m_configWidget->m_leRelDir, SIGNAL(textChanged(QString)), this, SLOT(setRelDir(QString)));
 }
 
 void ToolConfig::updateAdvanced()
@@ -161,12 +161,12 @@ void ToolConfig::setupGeneral()
 
     m_ptcw = new ProcessToolConfigWidget(m_configWidget->m_stackBasic);
     m_configWidget->m_stackBasic->insertWidget(GBS_Process, m_ptcw);
-    connect(m_ptcw->m_command, SIGNAL(textChanged(const QString &)), this, SLOT(setCommand(const QString &)));
+    connect(m_ptcw->m_command, SIGNAL(textChanged(QString)), this, SLOT(setCommand(QString)));
     connect(m_ptcw->m_options, SIGNAL(textChanged()), this, SLOT(setOptions()));
 
     m_qtcw = new QuickToolConfigWidget(m_configWidget->m_stackBasic);
     m_configWidget->m_stackBasic->insertWidget(GBS_Sequence, m_qtcw);
-    connect(m_qtcw, SIGNAL(sequenceChanged(const QString &)), this, SLOT(setSequence(const QString &)));
+    connect(m_qtcw, SIGNAL(sequenceChanged(QString)), this, SLOT(setSequence(QString)));
 
     m_configWidget->m_stackBasic->insertWidget(GBS_Error, new QLabel(i18n("Unknown tool type; your configuration data is malformed.\nPerhaps it is a good idea to restore the default settings."), this));
 
diff --git a/src/widgets/usermenuconfigwidget.h b/src/widgets/usermenuconfigwidget.h
index b664e3f3..2bd9a71b 100644
--- a/src/widgets/usermenuconfigwidget.h
+++ b/src/widgets/usermenuconfigwidget.h
@@ -24,7 +24,7 @@ class KileWidgetUsermenuConfig : public QWidget, public Ui::KileWidgetUsermenuCo
     Q_OBJECT
 
 public:
-    KileWidgetUsermenuConfig(KileMenu::UserMenu *usermenu, QWidget *parent = Q_NULLPTR);
+    explicit KileWidgetUsermenuConfig(KileMenu::UserMenu *usermenu, QWidget *parent = Q_NULLPTR);
     ~KileWidgetUsermenuConfig();
 
     void writeConfig();
-- 
2.20.1

