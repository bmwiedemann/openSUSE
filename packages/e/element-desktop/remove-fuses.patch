It is impossible to monkeypatch a shared copy of Electron, and in current versions of the nodejs-electron package
we intentionally fail the build of any app which tries to do this to alert the packager.

One problematic fuse which may break user data compatibility with upstream binaries is cookie encryption.
If a user runs an app with fused electron and then with unfused one, their cookies will get deleted.

OBSERVATION(dziobian):
Element creates a cookies sqlite database on startup but seems to never write anything to it.
Deleting the database manually seemed to have no effect.

--- a/node_modules/app-builder-lib/out/platformPackager.js	2025-03-04 14:50:55.947549645 +0000
+++ b/node_modules/app-builder-lib/out/platformPackager.js	2025-03-04 14:51:16.443755655 +0000
@@ -261,7 +261,6 @@
         const isAsar = asarOptions != null;
         await this.sanityCheckPackage(appOutDir, isAsar, framework, !!this.config.disableSanityCheckAsar);
         if (!(options === null || options === void 0 ? void 0 : options.disableFuses)) {
-            await this.doAddElectronFuses(packContext);
         }
         if ((_a = options === null || options === void 0 ? void 0 : options.sign) !== null && _a !== void 0 ? _a : true) {
             await this.doSignAfterPack(outDir, appOutDir, platformName, arch, platformSpecificBuildOptions, targets);
@@ -696,4 +695,4 @@
 function capitalizeFirstLetter(text) {
     return text.charAt(0).toUpperCase() + text.slice(1);
 }
-//# sourceMappingURL=platformPackager.js.map
\ No newline at end of file
+//# sourceMappingURL=platformPackager.js.map
