From 1f69aebcc0f9b984e970856089ca1f13e23698f6 Mon Sep 17 00:00:00 2001
From: Jarno Rajahalme <jarno@covalent.io>
Date: Wed, 4 Dec 2019 16:09:32 -0800
Subject: [PATCH 5/6] server: Move setInitManager() to
 TransportSocketFactoryContextImpl

Most users of TransportSocketFactoryContext do not need to call
setInitManager(), so it can be moved to
TransportSocketFactoryContextImpl. This allows for implementations of
TransportSocketFactoryContext that can't support setInitManager().

Signed-off-by: Jarno Rajahalme <jarno@covalent.io>
---
 envoy/include/envoy/server/transport_socket_config.h              | 6 ------
 envoy/source/common/upstream/cluster_factory_impl.h               | 6 +++---
 envoy/source/common/upstream/eds.cc                               | 4 ++--
 envoy/source/common/upstream/eds.h                                | 4 ++--
 envoy/source/common/upstream/logical_dns_cluster.cc               | 4 ++--
 envoy/source/common/upstream/logical_dns_cluster.h                | 4 ++--
 envoy/source/common/upstream/original_dst_cluster.cc              | 4 ++--
 envoy/source/common/upstream/original_dst_cluster.h               | 4 ++--
 envoy/source/common/upstream/static_cluster.cc                    | 4 ++--
 envoy/source/common/upstream/static_cluster.h                     | 4 ++--
 envoy/source/common/upstream/strict_dns_cluster.cc                | 4 ++--
 envoy/source/common/upstream/strict_dns_cluster.h                 | 4 ++--
 envoy/source/common/upstream/upstream_impl.cc                     | 2 +-
 envoy/source/common/upstream/upstream_impl.h                      | 3 ++-
 envoy/source/extensions/clusters/aggregate/cluster.cc             | 4 ++--
 envoy/source/extensions/clusters/aggregate/cluster.h              | 4 ++--
 envoy/source/extensions/clusters/dynamic_forward_proxy/cluster.cc | 4 ++--
 envoy/source/extensions/clusters/dynamic_forward_proxy/cluster.h  | 4 ++--
 envoy/source/extensions/clusters/redis/redis_cluster.cc           | 4 ++--
 envoy/source/extensions/clusters/redis/redis_cluster.h            | 4 ++--
 envoy/source/server/server.h                                      | 2 --
 envoy/source/server/transport_socket_config_impl.h                | 7 ++++++-
 envoy/test/common/upstream/cluster_factory_impl_test.cc           | 2 +-
 envoy/test/integration/clusters/custom_static_cluster.h           | 4 ++--
 envoy/test/mocks/server/mocks.h                                   | 1 -
 25 files changed, 47 insertions(+), 50 deletions(-)

diff --git a/envoy/include/envoy/server/transport_socket_config.h b/envoy/include/envoy/server/transport_socket_config.h
index 253c23775..32c2eaaf3 100644
--- a/envoy/include/envoy/server/transport_socket_config.h
+++ b/envoy/include/envoy/server/transport_socket_config.h
@@ -72,12 +72,6 @@ public:
    */
   virtual Stats::Store& stats() PURE;
 
-  /**
-   * Pass an init manager to register dynamic secret provider.
-   * @param init_manager instance of init manager.
-   */
-  virtual void setInitManager(Init::Manager& init_manager) PURE;
-
   /**
    * @return a pointer pointing to the instance of an init manager, or nullptr
    * if not set.
diff --git a/envoy/source/common/upstream/cluster_factory_impl.h b/envoy/source/common/upstream/cluster_factory_impl.h
index 41759e66d..aa9ac6a0b 100644
--- a/envoy/source/common/upstream/cluster_factory_impl.h
+++ b/envoy/source/common/upstream/cluster_factory_impl.h
@@ -147,7 +147,7 @@ private:
    */
   virtual std::pair<ClusterImplBaseSharedPtr, ThreadAwareLoadBalancerPtr>
   createClusterImpl(const envoy::api::v2::Cluster& cluster, ClusterFactoryContext& context,
-                    Server::Configuration::TransportSocketFactoryContext& socket_factory_context,
+                    Server::Configuration::TransportSocketFactoryContextImpl& socket_factory_context,
                     Stats::ScopePtr&& stats_scope) PURE;
   const std::string name_;
 };
@@ -171,7 +171,7 @@ protected:
 private:
   std::pair<ClusterImplBaseSharedPtr, ThreadAwareLoadBalancerPtr>
   createClusterImpl(const envoy::api::v2::Cluster& cluster, ClusterFactoryContext& context,
-                    Server::Configuration::TransportSocketFactoryContext& socket_factory_context,
+                    Server::Configuration::TransportSocketFactoryContextImpl& socket_factory_context,
                     Stats::ScopePtr&& stats_scope) override {
     ProtobufTypes::MessagePtr config = createEmptyConfigProto();
     Config::Utility::translateOpaqueConfig(
@@ -187,7 +187,7 @@ private:
   virtual std::pair<ClusterImplBaseSharedPtr, ThreadAwareLoadBalancerPtr> createClusterWithConfig(
       const envoy::api::v2::Cluster& cluster, const ConfigProto& proto_config,
       ClusterFactoryContext& context,
-      Server::Configuration::TransportSocketFactoryContext& socket_factory_context,
+      Server::Configuration::TransportSocketFactoryContextImpl& socket_factory_context,
       Stats::ScopePtr&& stats_scope) PURE;
 };
 
diff --git a/envoy/source/common/upstream/eds.cc b/envoy/source/common/upstream/eds.cc
index 585144576..8c23dcb7f 100644
--- a/envoy/source/common/upstream/eds.cc
+++ b/envoy/source/common/upstream/eds.cc
@@ -9,7 +9,7 @@ namespace Upstream {
 
 EdsClusterImpl::EdsClusterImpl(
     const envoy::api::v2::Cluster& cluster, Runtime::Loader& runtime,
-    Server::Configuration::TransportSocketFactoryContext& factory_context,
+    Server::Configuration::TransportSocketFactoryContextImpl& factory_context,
     Stats::ScopePtr&& stats_scope, bool added_via_api)
     : BaseDynamicClusterImpl(cluster, runtime, factory_context, std::move(stats_scope),
                              added_via_api),
@@ -262,7 +262,7 @@ void EdsClusterImpl::onConfigUpdateFailed(Envoy::Config::ConfigUpdateFailureReas
 std::pair<ClusterImplBaseSharedPtr, ThreadAwareLoadBalancerPtr>
 EdsClusterFactory::createClusterImpl(
     const envoy::api::v2::Cluster& cluster, ClusterFactoryContext& context,
-    Server::Configuration::TransportSocketFactoryContext& socket_factory_context,
+    Server::Configuration::TransportSocketFactoryContextImpl& socket_factory_context,
     Stats::ScopePtr&& stats_scope) {
   if (!cluster.has_eds_cluster_config()) {
     throw EnvoyException("cannot create an EDS cluster without an EDS config");
diff --git a/envoy/source/common/upstream/eds.h b/envoy/source/common/upstream/eds.h
index a19859add..edc5d3b83 100644
--- a/envoy/source/common/upstream/eds.h
+++ b/envoy/source/common/upstream/eds.h
@@ -23,7 +23,7 @@ namespace Upstream {
 class EdsClusterImpl : public BaseDynamicClusterImpl, Config::SubscriptionCallbacks {
 public:
   EdsClusterImpl(const envoy::api::v2::Cluster& cluster, Runtime::Loader& runtime,
-                 Server::Configuration::TransportSocketFactoryContext& factory_context,
+                 Server::Configuration::TransportSocketFactoryContextImpl& factory_context,
                  Stats::ScopePtr&& stats_scope, bool added_via_api);
 
   // Upstream::Cluster
@@ -86,7 +86,7 @@ public:
 private:
   std::pair<ClusterImplBaseSharedPtr, ThreadAwareLoadBalancerPtr>
   createClusterImpl(const envoy::api::v2::Cluster& cluster, ClusterFactoryContext& context,
-                    Server::Configuration::TransportSocketFactoryContext& socket_factory_context,
+                    Server::Configuration::TransportSocketFactoryContextImpl& socket_factory_context,
                     Stats::ScopePtr&& stats_scope) override;
 };
 
diff --git a/envoy/source/common/upstream/logical_dns_cluster.cc b/envoy/source/common/upstream/logical_dns_cluster.cc
index bf73083e0..f6bc95228 100644
--- a/envoy/source/common/upstream/logical_dns_cluster.cc
+++ b/envoy/source/common/upstream/logical_dns_cluster.cc
@@ -43,7 +43,7 @@ convertPriority(const envoy::api::v2::ClusterLoadAssignment& load_assignment) {
 LogicalDnsCluster::LogicalDnsCluster(
     const envoy::api::v2::Cluster& cluster, Runtime::Loader& runtime,
     Network::DnsResolverSharedPtr dns_resolver,
-    Server::Configuration::TransportSocketFactoryContext& factory_context,
+    Server::Configuration::TransportSocketFactoryContextImpl& factory_context,
     Stats::ScopePtr&& stats_scope, bool added_via_api)
     : ClusterImplBase(cluster, runtime, factory_context, std::move(stats_scope), added_via_api),
       dns_resolver_(dns_resolver),
@@ -150,7 +150,7 @@ void LogicalDnsCluster::startResolve() {
 std::pair<ClusterImplBaseSharedPtr, ThreadAwareLoadBalancerPtr>
 LogicalDnsClusterFactory::createClusterImpl(
     const envoy::api::v2::Cluster& cluster, ClusterFactoryContext& context,
-    Server::Configuration::TransportSocketFactoryContext& socket_factory_context,
+    Server::Configuration::TransportSocketFactoryContextImpl& socket_factory_context,
     Stats::ScopePtr&& stats_scope) {
   auto selected_dns_resolver = selectDnsResolver(cluster, context);
 
diff --git a/envoy/source/common/upstream/logical_dns_cluster.h b/envoy/source/common/upstream/logical_dns_cluster.h
index b1f7026aa..33aadb5d6 100644
--- a/envoy/source/common/upstream/logical_dns_cluster.h
+++ b/envoy/source/common/upstream/logical_dns_cluster.h
@@ -34,7 +34,7 @@ class LogicalDnsCluster : public ClusterImplBase {
 public:
   LogicalDnsCluster(const envoy::api::v2::Cluster& cluster, Runtime::Loader& runtime,
                     Network::DnsResolverSharedPtr dns_resolver,
-                    Server::Configuration::TransportSocketFactoryContext& factory_context,
+                    Server::Configuration::TransportSocketFactoryContextImpl& factory_context,
                     Stats::ScopePtr&& stats_scope, bool added_via_api);
 
   ~LogicalDnsCluster() override;
@@ -83,7 +83,7 @@ public:
 private:
   std::pair<ClusterImplBaseSharedPtr, ThreadAwareLoadBalancerPtr>
   createClusterImpl(const envoy::api::v2::Cluster& cluster, ClusterFactoryContext& context,
-                    Server::Configuration::TransportSocketFactoryContext& socket_factory_context,
+                    Server::Configuration::TransportSocketFactoryContextImpl& socket_factory_context,
                     Stats::ScopePtr&& stats_scope) override;
 };
 
diff --git a/envoy/source/common/upstream/original_dst_cluster.cc b/envoy/source/common/upstream/original_dst_cluster.cc
index 04b91f58f..fee502ac0 100644
--- a/envoy/source/common/upstream/original_dst_cluster.cc
+++ b/envoy/source/common/upstream/original_dst_cluster.cc
@@ -100,7 +100,7 @@ OriginalDstCluster::LoadBalancer::requestOverrideHost(LoadBalancerContext* conte
 
 OriginalDstCluster::OriginalDstCluster(
     const envoy::api::v2::Cluster& config, Runtime::Loader& runtime,
-    Server::Configuration::TransportSocketFactoryContext& factory_context,
+    Server::Configuration::TransportSocketFactoryContextImpl& factory_context,
     Stats::ScopePtr&& stats_scope, bool added_via_api)
     : ClusterImplBase(config, runtime, factory_context, std::move(stats_scope), added_via_api),
       dispatcher_(factory_context.dispatcher()),
@@ -174,7 +174,7 @@ void OriginalDstCluster::cleanup() {
 std::pair<ClusterImplBaseSharedPtr, ThreadAwareLoadBalancerPtr>
 OriginalDstClusterFactory::createClusterImpl(
     const envoy::api::v2::Cluster& cluster, ClusterFactoryContext& context,
-    Server::Configuration::TransportSocketFactoryContext& socket_factory_context,
+    Server::Configuration::TransportSocketFactoryContextImpl& socket_factory_context,
     Stats::ScopePtr&& stats_scope) {
   if (cluster.lb_policy() != envoy::api::v2::Cluster::ORIGINAL_DST_LB &&
       cluster.lb_policy() != envoy::api::v2::Cluster::CLUSTER_PROVIDED) {
diff --git a/envoy/source/common/upstream/original_dst_cluster.h b/envoy/source/common/upstream/original_dst_cluster.h
index 1a88dfb1c..f3fb88ed8 100644
--- a/envoy/source/common/upstream/original_dst_cluster.h
+++ b/envoy/source/common/upstream/original_dst_cluster.h
@@ -32,7 +32,7 @@ using HostMapConstSharedPtr = std::shared_ptr<const HostMap>;
 class OriginalDstCluster : public ClusterImplBase {
 public:
   OriginalDstCluster(const envoy::api::v2::Cluster& config, Runtime::Loader& runtime,
-                     Server::Configuration::TransportSocketFactoryContext& factory_context,
+                     Server::Configuration::TransportSocketFactoryContextImpl& factory_context,
                      Stats::ScopePtr&& stats_scope, bool added_via_api);
 
   // Upstream::Cluster
@@ -124,7 +124,7 @@ public:
 private:
   std::pair<ClusterImplBaseSharedPtr, ThreadAwareLoadBalancerPtr>
   createClusterImpl(const envoy::api::v2::Cluster& cluster, ClusterFactoryContext& context,
-                    Server::Configuration::TransportSocketFactoryContext& socket_factory_context,
+                    Server::Configuration::TransportSocketFactoryContextImpl& socket_factory_context,
                     Stats::ScopePtr&& stats_scope) override;
 };
 
diff --git a/envoy/source/common/upstream/static_cluster.cc b/envoy/source/common/upstream/static_cluster.cc
index 37feab2ea..f76221874 100644
--- a/envoy/source/common/upstream/static_cluster.cc
+++ b/envoy/source/common/upstream/static_cluster.cc
@@ -7,7 +7,7 @@ namespace Upstream {
 
 StaticClusterImpl::StaticClusterImpl(
     const envoy::api::v2::Cluster& cluster, Runtime::Loader& runtime,
-    Server::Configuration::TransportSocketFactoryContext& factory_context,
+    Server::Configuration::TransportSocketFactoryContextImpl& factory_context,
     Stats::ScopePtr&& stats_scope, bool added_via_api)
     : ClusterImplBase(cluster, runtime, factory_context, std::move(stats_scope), added_via_api),
       priority_state_manager_(
@@ -56,7 +56,7 @@ void StaticClusterImpl::startPreInit() {
 std::pair<ClusterImplBaseSharedPtr, ThreadAwareLoadBalancerPtr>
 StaticClusterFactory::createClusterImpl(
     const envoy::api::v2::Cluster& cluster, ClusterFactoryContext& context,
-    Server::Configuration::TransportSocketFactoryContext& socket_factory_context,
+    Server::Configuration::TransportSocketFactoryContextImpl& socket_factory_context,
     Stats::ScopePtr&& stats_scope) {
   return std::make_pair(
       std::make_shared<StaticClusterImpl>(cluster, context.runtime(), socket_factory_context,
diff --git a/envoy/source/common/upstream/static_cluster.h b/envoy/source/common/upstream/static_cluster.h
index f8a440d72..07362ed47 100644
--- a/envoy/source/common/upstream/static_cluster.h
+++ b/envoy/source/common/upstream/static_cluster.h
@@ -13,7 +13,7 @@ namespace Upstream {
 class StaticClusterImpl : public ClusterImplBase {
 public:
   StaticClusterImpl(const envoy::api::v2::Cluster& cluster, Runtime::Loader& runtime,
-                    Server::Configuration::TransportSocketFactoryContext& factory_context,
+                    Server::Configuration::TransportSocketFactoryContextImpl& factory_context,
                     Stats::ScopePtr&& stats_scope, bool added_via_api);
 
   // Upstream::Cluster
@@ -38,7 +38,7 @@ public:
 private:
   std::pair<ClusterImplBaseSharedPtr, ThreadAwareLoadBalancerPtr>
   createClusterImpl(const envoy::api::v2::Cluster& cluster, ClusterFactoryContext& context,
-                    Server::Configuration::TransportSocketFactoryContext& socket_factory_context,
+                    Server::Configuration::TransportSocketFactoryContextImpl& socket_factory_context,
                     Stats::ScopePtr&& stats_scope) override;
 };
 
diff --git a/envoy/source/common/upstream/strict_dns_cluster.cc b/envoy/source/common/upstream/strict_dns_cluster.cc
index a67605985..7a23b57dd 100644
--- a/envoy/source/common/upstream/strict_dns_cluster.cc
+++ b/envoy/source/common/upstream/strict_dns_cluster.cc
@@ -8,7 +8,7 @@ namespace Upstream {
 StrictDnsClusterImpl::StrictDnsClusterImpl(
     const envoy::api::v2::Cluster& cluster, Runtime::Loader& runtime,
     Network::DnsResolverSharedPtr dns_resolver,
-    Server::Configuration::TransportSocketFactoryContext& factory_context,
+    Server::Configuration::TransportSocketFactoryContextImpl& factory_context,
     Stats::ScopePtr&& stats_scope, bool added_via_api)
     : BaseDynamicClusterImpl(cluster, runtime, factory_context, std::move(stats_scope),
                              added_via_api),
@@ -168,7 +168,7 @@ void StrictDnsClusterImpl::ResolveTarget::startResolve() {
 std::pair<ClusterImplBaseSharedPtr, ThreadAwareLoadBalancerPtr>
 StrictDnsClusterFactory::createClusterImpl(
     const envoy::api::v2::Cluster& cluster, ClusterFactoryContext& context,
-    Server::Configuration::TransportSocketFactoryContext& socket_factory_context,
+    Server::Configuration::TransportSocketFactoryContextImpl& socket_factory_context,
     Stats::ScopePtr&& stats_scope) {
   auto selected_dns_resolver = selectDnsResolver(cluster, context);
 
diff --git a/envoy/source/common/upstream/strict_dns_cluster.h b/envoy/source/common/upstream/strict_dns_cluster.h
index 9dab1adb6..573e0426e 100644
--- a/envoy/source/common/upstream/strict_dns_cluster.h
+++ b/envoy/source/common/upstream/strict_dns_cluster.h
@@ -14,7 +14,7 @@ class StrictDnsClusterImpl : public BaseDynamicClusterImpl {
 public:
   StrictDnsClusterImpl(const envoy::api::v2::Cluster& cluster, Runtime::Loader& runtime,
                        Network::DnsResolverSharedPtr dns_resolver,
-                       Server::Configuration::TransportSocketFactoryContext& factory_context,
+                       Server::Configuration::TransportSocketFactoryContextImpl& factory_context,
                        Stats::ScopePtr&& stats_scope, bool added_via_api);
 
   // Upstream::Cluster
@@ -69,7 +69,7 @@ public:
 private:
   std::pair<ClusterImplBaseSharedPtr, ThreadAwareLoadBalancerPtr>
   createClusterImpl(const envoy::api::v2::Cluster& cluster, ClusterFactoryContext& context,
-                    Server::Configuration::TransportSocketFactoryContext& socket_factory_context,
+                    Server::Configuration::TransportSocketFactoryContextImpl& socket_factory_context,
                     Stats::ScopePtr&& stats_scope) override;
 };
 
diff --git a/envoy/source/common/upstream/upstream_impl.cc b/envoy/source/common/upstream/upstream_impl.cc
index 26f51bd8b..eebd66f73 100644
--- a/envoy/source/common/upstream/upstream_impl.cc
+++ b/envoy/source/common/upstream/upstream_impl.cc
@@ -813,7 +813,7 @@ ClusterInfoImpl::upstreamHttpProtocol(absl::optional<Http::Protocol> downstream_
 
 ClusterImplBase::ClusterImplBase(
     const envoy::api::v2::Cluster& cluster, Runtime::Loader& runtime,
-    Server::Configuration::TransportSocketFactoryContext& factory_context,
+    Server::Configuration::TransportSocketFactoryContextImpl& factory_context,
     Stats::ScopePtr&& stats_scope, bool added_via_api)
     : init_manager_(fmt::format("Cluster {}", cluster.name())),
       init_watcher_("ClusterImplBase", [this]() { onInitDone(); }), runtime_(runtime),
diff --git a/envoy/source/common/upstream/upstream_impl.h b/envoy/source/common/upstream/upstream_impl.h
index 642e91618..97b6e888c 100644
--- a/envoy/source/common/upstream/upstream_impl.h
+++ b/envoy/source/common/upstream/upstream_impl.h
@@ -44,6 +44,7 @@
 #include "common/upstream/outlier_detection_impl.h"
 #include "common/upstream/resource_manager_impl.h"
 #include "common/upstream/transport_socket_match_impl.h"
+#include "server/transport_socket_config_impl.h"
 
 #include "absl/synchronization/mutex.h"
 
@@ -691,7 +692,7 @@ public:
 
 protected:
   ClusterImplBase(const envoy::api::v2::Cluster& cluster, Runtime::Loader& runtime,
-                  Server::Configuration::TransportSocketFactoryContext& factory_context,
+                  Server::Configuration::TransportSocketFactoryContextImpl& factory_context,
                   Stats::ScopePtr&& stats_scope, bool added_via_api);
 
   /**
diff --git a/envoy/source/extensions/clusters/aggregate/cluster.cc b/envoy/source/extensions/clusters/aggregate/cluster.cc
index 809aac1e2..825f7d1f5 100644
--- a/envoy/source/extensions/clusters/aggregate/cluster.cc
+++ b/envoy/source/extensions/clusters/aggregate/cluster.cc
@@ -9,7 +9,7 @@ Cluster::Cluster(const envoy::api::v2::Cluster& cluster,
                  const envoy::config::cluster::aggregate::v2alpha::ClusterConfig& config,
                  Upstream::ClusterManager& cluster_manager, Runtime::Loader& runtime,
                  Runtime::RandomGenerator& random,
-                 Server::Configuration::TransportSocketFactoryContext& factory_context,
+                 Server::Configuration::TransportSocketFactoryContextImpl& factory_context,
                  Stats::ScopePtr&& stats_scope, ThreadLocal::SlotAllocator& tls, bool added_via_api)
     : Upstream::ClusterImplBase(cluster, runtime, factory_context, std::move(stats_scope),
                                 added_via_api),
@@ -133,7 +133,7 @@ ClusterFactory::createClusterWithConfig(
     const envoy::api::v2::Cluster& cluster,
     const envoy::config::cluster::aggregate::v2alpha::ClusterConfig& proto_config,
     Upstream::ClusterFactoryContext& context,
-    Server::Configuration::TransportSocketFactoryContext& socket_factory_context,
+    Server::Configuration::TransportSocketFactoryContextImpl& socket_factory_context,
     Stats::ScopePtr&& stats_scope) {
   auto new_cluster = std::make_shared<Cluster>(
       cluster, proto_config, context.clusterManager(), context.runtime(), context.random(),
diff --git a/envoy/source/extensions/clusters/aggregate/cluster.h b/envoy/source/extensions/clusters/aggregate/cluster.h
index 23ea5b24d..b99c57ca1 100644
--- a/envoy/source/extensions/clusters/aggregate/cluster.h
+++ b/envoy/source/extensions/clusters/aggregate/cluster.h
@@ -22,7 +22,7 @@ public:
           const envoy::config::cluster::aggregate::v2alpha::ClusterConfig& config,
           Upstream::ClusterManager& cluster_manager, Runtime::Loader& runtime,
           Runtime::RandomGenerator& random,
-          Server::Configuration::TransportSocketFactoryContext& factory_context,
+          Server::Configuration::TransportSocketFactoryContextImpl& factory_context,
           Stats::ScopePtr&& stats_scope, ThreadLocal::SlotAllocator& tls, bool added_via_api);
 
   // Upstream::Cluster
@@ -146,7 +146,7 @@ private:
       const envoy::api::v2::Cluster& cluster,
       const envoy::config::cluster::aggregate::v2alpha::ClusterConfig& proto_config,
       Upstream::ClusterFactoryContext& context,
-      Server::Configuration::TransportSocketFactoryContext& socket_factory_context,
+      Server::Configuration::TransportSocketFactoryContextImpl& socket_factory_context,
       Stats::ScopePtr&& stats_scope) override;
 };
 
diff --git a/envoy/source/extensions/clusters/dynamic_forward_proxy/cluster.cc b/envoy/source/extensions/clusters/dynamic_forward_proxy/cluster.cc
index 5c0568c91..e5fdc3b71 100644
--- a/envoy/source/extensions/clusters/dynamic_forward_proxy/cluster.cc
+++ b/envoy/source/extensions/clusters/dynamic_forward_proxy/cluster.cc
@@ -15,7 +15,7 @@ Cluster::Cluster(
     Runtime::Loader& runtime,
     Extensions::Common::DynamicForwardProxy::DnsCacheManagerFactory& cache_manager_factory,
     const LocalInfo::LocalInfo& local_info,
-    Server::Configuration::TransportSocketFactoryContext& factory_context,
+    Server::Configuration::TransportSocketFactoryContextImpl& factory_context,
     Stats::ScopePtr&& stats_scope, bool added_via_api)
     : Upstream::BaseDynamicClusterImpl(cluster, runtime, factory_context, std::move(stats_scope),
                                        added_via_api),
@@ -186,7 +186,7 @@ ClusterFactory::createClusterWithConfig(
     const envoy::api::v2::Cluster& cluster,
     const envoy::config::cluster::dynamic_forward_proxy::v2alpha::ClusterConfig& proto_config,
     Upstream::ClusterFactoryContext& context,
-    Server::Configuration::TransportSocketFactoryContext& socket_factory_context,
+    Server::Configuration::TransportSocketFactoryContextImpl& socket_factory_context,
     Stats::ScopePtr&& stats_scope) {
   Extensions::Common::DynamicForwardProxy::DnsCacheManagerFactoryImpl cache_manager_factory(
       context.singletonManager(), context.dispatcher(), context.tls(), context.stats());
diff --git a/envoy/source/extensions/clusters/dynamic_forward_proxy/cluster.h b/envoy/source/extensions/clusters/dynamic_forward_proxy/cluster.h
index 365227e14..9cf1c4f12 100644
--- a/envoy/source/extensions/clusters/dynamic_forward_proxy/cluster.h
+++ b/envoy/source/extensions/clusters/dynamic_forward_proxy/cluster.h
@@ -22,7 +22,7 @@ public:
           Runtime::Loader& runtime,
           Extensions::Common::DynamicForwardProxy::DnsCacheManagerFactory& cache_manager_factory,
           const LocalInfo::LocalInfo& local_info,
-          Server::Configuration::TransportSocketFactoryContext& factory_context,
+          Server::Configuration::TransportSocketFactoryContextImpl& factory_context,
           Stats::ScopePtr&& stats_scope, bool added_via_api);
 
   // Upstream::Cluster
@@ -126,7 +126,7 @@ private:
       const envoy::api::v2::Cluster& cluster,
       const envoy::config::cluster::dynamic_forward_proxy::v2alpha::ClusterConfig& proto_config,
       Upstream::ClusterFactoryContext& context,
-      Server::Configuration::TransportSocketFactoryContext& socket_factory_context,
+      Server::Configuration::TransportSocketFactoryContextImpl& socket_factory_context,
       Stats::ScopePtr&& stats_scope) override;
 };
 
diff --git a/envoy/source/extensions/clusters/redis/redis_cluster.cc b/envoy/source/extensions/clusters/redis/redis_cluster.cc
index 5d67ec2bb..e3575e1a4 100644
--- a/envoy/source/extensions/clusters/redis/redis_cluster.cc
+++ b/envoy/source/extensions/clusters/redis/redis_cluster.cc
@@ -17,7 +17,7 @@ RedisCluster::RedisCluster(
     NetworkFilters::Common::Redis::Client::ClientFactory& redis_client_factory,
     Upstream::ClusterManager& cluster_manager, Runtime::Loader& runtime, Api::Api& api,
     Network::DnsResolverSharedPtr dns_resolver,
-    Server::Configuration::TransportSocketFactoryContext& factory_context,
+    Server::Configuration::TransportSocketFactoryContextImpl& factory_context,
     Stats::ScopePtr&& stats_scope, bool added_via_api,
     ClusterSlotUpdateCallBackSharedPtr lb_factory)
     : Upstream::BaseDynamicClusterImpl(cluster, runtime, factory_context, std::move(stats_scope),
@@ -350,7 +350,7 @@ RedisClusterFactory::createClusterWithConfig(
     const envoy::api::v2::Cluster& cluster,
     const envoy::config::cluster::redis::RedisClusterConfig& proto_config,
     Upstream::ClusterFactoryContext& context,
-    Envoy::Server::Configuration::TransportSocketFactoryContext& socket_factory_context,
+    Envoy::Server::Configuration::TransportSocketFactoryContextImpl& socket_factory_context,
     Envoy::Stats::ScopePtr&& stats_scope) {
   if (!cluster.has_cluster_type() ||
       cluster.cluster_type().name() != Extensions::Clusters::ClusterTypes::get().Redis) {
diff --git a/envoy/source/extensions/clusters/redis/redis_cluster.h b/envoy/source/extensions/clusters/redis/redis_cluster.h
index 51077c3b6..98ff193de 100644
--- a/envoy/source/extensions/clusters/redis/redis_cluster.h
+++ b/envoy/source/extensions/clusters/redis/redis_cluster.h
@@ -96,7 +96,7 @@ public:
                NetworkFilters::Common::Redis::Client::ClientFactory& client_factory,
                Upstream::ClusterManager& cluster_manager, Runtime::Loader& runtime, Api::Api& api,
                Network::DnsResolverSharedPtr dns_resolver,
-               Server::Configuration::TransportSocketFactoryContext& factory_context,
+               Server::Configuration::TransportSocketFactoryContextImpl& factory_context,
                Stats::ScopePtr&& stats_scope, bool added_via_api,
                ClusterSlotUpdateCallBackSharedPtr factory);
 
@@ -289,7 +289,7 @@ private:
       const envoy::api::v2::Cluster& cluster,
       const envoy::config::cluster::redis::RedisClusterConfig& proto_config,
       Upstream::ClusterFactoryContext& context,
-      Server::Configuration::TransportSocketFactoryContext& socket_factory_context,
+      Server::Configuration::TransportSocketFactoryContextImpl& socket_factory_context,
       Stats::ScopePtr&& stats_scope) override;
 };
 } // namespace Redis
diff --git a/envoy/source/server/server.h b/envoy/source/server/server.h
index 4254597f7..c2abd2634 100644
--- a/envoy/source/server/server.h
+++ b/envoy/source/server/server.h
@@ -170,8 +170,6 @@ public:
   Ssl::ContextManager& sslContextManager() override { return server_.sslContextManager(); }
   Secret::SecretManager& secretManager() override { return server_.secretManager(); }
   Stats::Store& stats() override { return server_.stats(); }
-  // Server's init manager can't be changed via this shared TransportSocketFactoryContext
-  void setInitManager(Init::Manager&) override {}
   Init::Manager* initManager() override { return &server_.initManager(); }
   ProtobufMessage::ValidationVisitor& messageValidationVisitor() override {
     // Server has two message validation visitors, one for static and
diff --git a/envoy/source/server/transport_socket_config_impl.h b/envoy/source/server/transport_socket_config_impl.h
index c1868cb4b..9e5bb4639 100644
--- a/envoy/source/server/transport_socket_config_impl.h
+++ b/envoy/source/server/transport_socket_config_impl.h
@@ -23,6 +23,12 @@ public:
         stats_(stats), singleton_manager_(singleton_manager), tls_(tls),
         validation_visitor_(validation_visitor), api_(api) {}
 
+  /**
+   * Pass an init manager to register dynamic secret provider.
+   * @param init_manager instance of init manager.
+   */
+  void setInitManager(Init::Manager& init_manager) { init_manager_ = &init_manager; }
+
   // TransportSocketFactoryContext
   Server::Admin& admin() override { return admin_; }
   Ssl::ContextManager& sslContextManager() override { return context_manager_; }
@@ -35,7 +41,6 @@ public:
   Event::Dispatcher& dispatcher() override { return dispatcher_; }
   Envoy::Runtime::RandomGenerator& random() override { return random_; }
   Stats::Store& stats() override { return stats_; }
-  void setInitManager(Init::Manager& init_manager) override { init_manager_ = &init_manager; }
   Init::Manager* initManager() override { return init_manager_; }
   Singleton::Manager& singletonManager() override { return singleton_manager_; }
   ThreadLocal::SlotAllocator& threadLocal() override { return tls_; }
diff --git a/envoy/test/common/upstream/cluster_factory_impl_test.cc b/envoy/test/common/upstream/cluster_factory_impl_test.cc
index 6b4091db6..2a6a6e45e 100644
--- a/envoy/test/common/upstream/cluster_factory_impl_test.cc
+++ b/envoy/test/common/upstream/cluster_factory_impl_test.cc
@@ -37,7 +37,7 @@ public:
 
   std::pair<ClusterImplBaseSharedPtr, ThreadAwareLoadBalancerPtr>
   createClusterImpl(const envoy::api::v2::Cluster& cluster, ClusterFactoryContext& context,
-                    Server::Configuration::TransportSocketFactoryContext& socket_factory_context,
+                    Server::Configuration::TransportSocketFactoryContextImpl& socket_factory_context,
                     Stats::ScopePtr&& stats_scope) override {
     return std::make_pair(std::make_shared<CustomStaticCluster>(
                               cluster, context.runtime(), socket_factory_context,
diff --git a/envoy/test/integration/clusters/custom_static_cluster.h b/envoy/test/integration/clusters/custom_static_cluster.h
index 77c3aa671..47dd35d3e 100644
--- a/envoy/test/integration/clusters/custom_static_cluster.h
+++ b/envoy/test/integration/clusters/custom_static_cluster.h
@@ -23,7 +23,7 @@ namespace Envoy {
 class CustomStaticCluster : public Upstream::ClusterImplBase {
 public:
   CustomStaticCluster(const envoy::api::v2::Cluster& cluster, Runtime::Loader& runtime,
-                      Server::Configuration::TransportSocketFactoryContext& factory_context,
+                      Server::Configuration::TransportSocketFactoryContextImpl& factory_context,
                       Stats::ScopePtr&& stats_scope, bool added_via_api, uint32_t priority,
                       std::string address, uint32_t port)
       : ClusterImplBase(cluster, runtime, factory_context, std::move(stats_scope), added_via_api),
@@ -88,7 +88,7 @@ private:
       const envoy::api::v2::Cluster& cluster,
       const test::integration::clusters::CustomStaticConfig& proto_config,
       Upstream::ClusterFactoryContext& context,
-      Server::Configuration::TransportSocketFactoryContext& socket_factory_context,
+      Server::Configuration::TransportSocketFactoryContextImpl& socket_factory_context,
       Stats::ScopePtr&& stats_scope) override {
     auto new_cluster = std::make_shared<CustomStaticCluster>(
         cluster, context.runtime(), socket_factory_context, std::move(stats_scope),
diff --git a/envoy/test/mocks/server/mocks.h b/envoy/test/mocks/server/mocks.h
index 3fd1bedd3..0dfbc63f9 100644
--- a/envoy/test/mocks/server/mocks.h
+++ b/envoy/test/mocks/server/mocks.h
@@ -563,7 +563,6 @@ public:
   MOCK_METHOD0(dispatcher, Event::Dispatcher&());
   MOCK_METHOD0(random, Envoy::Runtime::RandomGenerator&());
   MOCK_METHOD0(stats, Stats::Store&());
-  MOCK_METHOD1(setInitManager, void(Init::Manager&));
   MOCK_METHOD0(initManager, Init::Manager*());
   MOCK_METHOD0(singletonManager, Singleton::Manager&());
   MOCK_METHOD0(threadLocal, ThreadLocal::SlotAllocator&());
-- 
2.16.4

