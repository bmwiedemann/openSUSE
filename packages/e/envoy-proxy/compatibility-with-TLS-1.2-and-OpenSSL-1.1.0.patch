From c4f74a85be1e0dc09581fd5603279bd2c1617106 Mon Sep 17 00:00:00 2001
From: Michal Rostecki <mrostecki@opensuse.org>
Date: Mon, 16 Dec 2019 12:59:43 +0100
Subject: [PATCH] Compatibility with TLS 1.2 and OpenSSL 1.1.0

This change makes extensions working on OpenSSL 1.1.0 which still uses
TLS 1.2 standard instead of TLS 1.3. OpenSSL 1.1.0 is still a supported
version.

Signed-off-by: Michal Rostecki <mrostecki@opensuse.org>
---
 source/extensions/common/crypto/utility_impl.cc    |  9 +++
 .../transport_sockets/tls/context_config_impl.cc   |  6 ++
 .../transport_sockets/tls/context_impl.cc          | 11 ++-
 .../tls/integration/ssl_integration_test.cc        |  6 ++
 .../transport_sockets/tls/ssl_socket_test.cc       | 82 ++++++++++++++++++++++
 5 files changed, 113 insertions(+), 1 deletion(-)

diff --git a/source/extensions/common/crypto/utility_impl.cc b/source/extensions/common/crypto/utility_impl.cc
index 6c8e2a4..dbd9aa7 100644
--- a/source/extensions/common/crypto/utility_impl.cc
+++ b/source/extensions/common/crypto/utility_impl.cc
@@ -72,7 +72,16 @@ const VerificationOutput UtilityImpl::verifySignature(absl::string_view hash, Cr
   }
 
   // Step 4: verify signature
+#ifdef TLS1_3_VERSION
   ok = EVP_DigestVerify(ctx, signature.data(), signature.size(), text.data(), text.size());
+#else // OpenSSL 1.1.0
+  ok = EVP_DigestVerifyUpdate(ctx, text.data(), text.size());
+  if (!ok) {
+    EVP_MD_CTX_free(ctx);
+    return {false, absl::StrCat("Failed to verify digest. Error code: ", ok)};
+  }
+  ok = EVP_DigestVerifyFinal(ctx, signature.data(), signature.size());
+#endif
 
   // Step 5: check result
   if (ok == 1) {
diff --git a/source/extensions/transport_sockets/tls/context_config_impl.cc b/source/extensions/transport_sockets/tls/context_config_impl.cc
index 51a511d..4c4a148 100644
--- a/source/extensions/transport_sockets/tls/context_config_impl.cc
+++ b/source/extensions/transport_sockets/tls/context_config_impl.cc
@@ -264,8 +264,10 @@ unsigned ContextConfigImpl::tlsVersionFromProto(
     return TLS1_1_VERSION;
   case envoy::api::v2::auth::TlsParameters::TLSv1_2:
     return TLS1_2_VERSION;
+#ifdef TLS1_3_VERSION
   case envoy::api::v2::auth::TlsParameters::TLSv1_3:
     return TLS1_3_VERSION;
+#endif
   default:
     NOT_IMPLEMENTED_GCOVR_EXCL_LINE;
   }
@@ -315,7 +317,11 @@ ClientContextConfigImpl::ClientContextConfigImpl(
 }
 
 const unsigned ServerContextConfigImpl::DEFAULT_MIN_VERSION = TLS1_VERSION;
+#ifdef TLS1_3_VERSION
 const unsigned ServerContextConfigImpl::DEFAULT_MAX_VERSION = TLS1_3_VERSION;
+#else // OpenSSL 1.1.0
+const unsigned ServerContextConfigImpl::DEFAULT_MAX_VERSION = TLS1_2_VERSION;
+#endif
 
 const std::string ServerContextConfigImpl::DEFAULT_CIPHER_SUITES =
     "[ECDHE-ECDSA-AES128-GCM-SHA256|ECDHE-ECDSA-CHACHA20-POLY1305]:"
diff --git a/source/extensions/transport_sockets/tls/context_impl.cc b/source/extensions/transport_sockets/tls/context_impl.cc
index f5b35f6..20b356d 100644
--- a/source/extensions/transport_sockets/tls/context_impl.cc
+++ b/source/extensions/transport_sockets/tls/context_impl.cc
@@ -25,6 +25,7 @@
 #include "openssl/evp.h"
 #include "openssl/hmac.h"
 #include "openssl/rand.h"
+#include "openssl/tls1.h"
 #include "openssl/x509v3.h"
 
 #define SSL_TICKET_KEY_NAME_LEN 16
@@ -384,7 +385,11 @@ ContextImpl::ContextImpl(Stats::Scope& scope, const Envoy::Ssl::ContextConfig& c
   stat_name_set_->rememberBuiltins({"ecdsa_secp256r1_sha256", "rsa_pss_rsae_sha256"});
 
   // Versions
+#ifdef TLS1_3_VERSION
   stat_name_set_->rememberBuiltins({"TLSv1", "TLSv1.1", "TLSv1.2", "TLSv1.3"});
+#else // OpenSSL 1.1.0
+  stat_name_set_->rememberBuiltins({"TLSv1", "TLSv1.1", "TLSv1.2"});
+#endif
 }
 
 int ServerContextImpl::alpnSelectCallback(const unsigned char** out, unsigned char* outlen,
@@ -517,7 +522,11 @@ void ContextImpl::logHandshake(SSL* ssl) const {
   incCounter(ssl_ciphers_, SSL_get_cipher_name(ssl), unknown_ssl_cipher_);
   incCounter(ssl_versions_, SSL_get_version(ssl), unknown_ssl_version_);
 
+#ifdef TLSEXT_TYPE_supported_groups
   int group = SSL_get_shared_group(ssl, 0);
+#else // OpenSSL 1.1.0
+  int group = SSL_get_shared_curve(ssl, 0);
+#endif
   if (group > 0) {
     switch (group) {
     case NID_X25519: {
@@ -1085,7 +1094,7 @@ int ServerContextImpl::sessionTicketProcess(SSL*, uint8_t* key_name, uint8_t* iv
 
 bool ServerContextImpl::isClientEcdsaCapable(SSL* ssl) {
   int psignhash;
-  if (TLS1_get_version(ssl) >= TLS1_2_VERSION && tls_max_version_ == TLS1_3_VERSION) {
+  if (TLS1_get_version(ssl) >= TLS1_2_VERSION) {
     int num_sigalgs = SSL_get_sigalgs(ssl, 0, nullptr, nullptr, nullptr, nullptr, nullptr);
     for (int i = 0; i < num_sigalgs; i++) {
       SSL_get_sigalgs(ssl, i, nullptr, nullptr, &psignhash, nullptr, nullptr);
diff --git a/test/extensions/transport_sockets/tls/integration/ssl_integration_test.cc b/test/extensions/transport_sockets/tls/integration/ssl_integration_test.cc
index e4eb454..7837ad1 100644
--- a/test/extensions/transport_sockets/tls/integration/ssl_integration_test.cc
+++ b/test/extensions/transport_sockets/tls/integration/ssl_integration_test.cc
@@ -178,7 +178,9 @@ class SslCertficateIntegrationTest
       public SslIntegrationTestBase {
 public:
   SslCertficateIntegrationTest() : SslIntegrationTestBase(std::get<0>(GetParam())) {
+#ifdef TLS1_3_VERSION
     server_tlsv1_3_ = true;
+#endif
   }
 
   Network::ClientConnectionPtr
@@ -231,8 +233,12 @@ public:
 INSTANTIATE_TEST_SUITE_P(
     IpVersionsClientVersions, SslCertficateIntegrationTest,
     testing::Combine(testing::ValuesIn(TestEnvironment::getIpVersionsForTest()),
+#ifdef TLS1_3_VERSION
                      testing::Values(envoy::api::v2::auth::TlsParameters::TLSv1_2,
                                      envoy::api::v2::auth::TlsParameters::TLSv1_3)),
+#else // OpenSSL 1.1.0
+                     testing::Values(envoy::api::v2::auth::TlsParameters::TLSv1_2)),
+#endif
     SslCertficateIntegrationTest::ipClientVersionTestParamsToString);
 
 // Server with an RSA certificate and a client with RSA/ECDSA cipher suites works.
diff --git a/test/extensions/transport_sockets/tls/ssl_socket_test.cc b/test/extensions/transport_sockets/tls/ssl_socket_test.cc
index 007891d..6d3d2cd 100644
--- a/test/extensions/transport_sockets/tls/ssl_socket_test.cc
+++ b/test/extensions/transport_sockets/tls/ssl_socket_test.cc
@@ -2441,7 +2441,9 @@ void testTicketSessionResumption(const std::string& server_ctx_yaml1,
         const SslSocketInfo* ssl_socket =
             dynamic_cast<const SslSocketInfo*>(client_connection->ssl().get());
         ssl_session = SSL_get1_session(ssl_socket->rawSslForTest());
+#ifdef TLS1_3_VERSION
         EXPECT_TRUE(SSL_SESSION_is_resumable(ssl_session));
+#endif
         client_connection->close(Network::ConnectionCloseType::NoFlush);
         server_connection->close(Network::ConnectionCloseType::NoFlush);
         dispatcher->exit();
@@ -2864,7 +2866,9 @@ TEST_P(SslSocketTest, ClientAuthCrossListenerSessionResumption) {
         const SslSocketInfo* ssl_socket =
             dynamic_cast<const SslSocketInfo*>(client_connection->ssl().get());
         ssl_session = SSL_get1_session(ssl_socket->rawSslForTest());
+#ifdef TLS1_3_VERSION
         EXPECT_TRUE(SSL_SESSION_is_resumable(ssl_session));
+#endif
         server_connection->close(Network::ConnectionCloseType::NoFlush);
         client_connection->close(Network::ConnectionCloseType::NoFlush);
         dispatcher_->exit();
@@ -3116,6 +3120,7 @@ TEST_P(SslSocketTest, ClientSessionResumptionEnabledTls12) {
   testClientSessionResumption(server_ctx_yaml, client_ctx_yaml, true, GetParam());
 }
 
+#ifdef TLS1_3_VERSION
 // Make sure client session resumption is not happening with TLS 1.3 when it's disabled.
 TEST_P(SslSocketTest, ClientSessionResumptionDisabledTls13) {
   const std::string server_ctx_yaml = R"EOF(
@@ -3165,6 +3170,7 @@ TEST_P(SslSocketTest, ClientSessionResumptionEnabledTls13) {
 
   testClientSessionResumption(server_ctx_yaml, client_ctx_yaml, true, GetParam());
 }
+#endif
 
 TEST_P(SslSocketTest, SslError) {
   const std::string server_ctx_yaml = R"EOF(
@@ -3283,6 +3289,7 @@ TEST_P(SslSocketTest, ProtocolVersions) {
   client_params->clear_tls_minimum_protocol_version();
   client_params->clear_tls_maximum_protocol_version();
 
+#ifdef TLS1_3_VERSION
   // Connection using TLSv1.3 (client) and defaults (server) succeeds (non-FIPS) or fails (FIPS).
   client_params->set_tls_minimum_protocol_version(envoy::api::v2::auth::TlsParameters::TLSv1_3);
   client_params->set_tls_maximum_protocol_version(envoy::api::v2::auth::TlsParameters::TLSv1_3);
@@ -3331,6 +3338,43 @@ TEST_P(SslSocketTest, ProtocolVersions) {
   client_params->clear_tls_maximum_protocol_version();
   server_params->clear_tls_minimum_protocol_version();
   server_params->clear_tls_maximum_protocol_version();
+#else // OpenSSL 1.1.0
+  // Connection using TLSv1.2 (client) and defaults (server) succeeds.
+  client_params->set_tls_minimum_protocol_version(envoy::api::v2::auth::TlsParameters::TLSv1_2);
+  client_params->set_tls_maximum_protocol_version(envoy::api::v2::auth::TlsParameters::TLSv1_2);
+  testUtilV2(tls_v1_2_test_options);
+  client_params->clear_tls_minimum_protocol_version();
+  client_params->clear_tls_maximum_protocol_version();
+
+  // Connection using TLSv1.0-1.2 (client) and defaults (server) succeeds.
+  client_params->set_tls_minimum_protocol_version(envoy::api::v2::auth::TlsParameters::TLSv1_0);
+  client_params->set_tls_maximum_protocol_version(envoy::api::v2::auth::TlsParameters::TLSv1_2);
+  testUtilV2(tls_v1_2_test_options);
+  client_params->clear_tls_minimum_protocol_version();
+  client_params->clear_tls_maximum_protocol_version();
+
+  // Connection using TLSv1.0 (client) and TLSv1.0-1.2 (server) succeeds.
+  client_params->set_tls_minimum_protocol_version(envoy::api::v2::auth::TlsParameters::TLSv1_0);
+  client_params->set_tls_maximum_protocol_version(envoy::api::v2::auth::TlsParameters::TLSv1_0);
+  server_params->set_tls_minimum_protocol_version(envoy::api::v2::auth::TlsParameters::TLSv1_0);
+  server_params->set_tls_maximum_protocol_version(envoy::api::v2::auth::TlsParameters::TLSv1_2);
+  testUtilV2(tls_v1_test_options);
+  client_params->clear_tls_minimum_protocol_version();
+  client_params->clear_tls_maximum_protocol_version();
+  server_params->clear_tls_minimum_protocol_version();
+  server_params->clear_tls_maximum_protocol_version();
+
+  // Connection using TLSv1.2 (client) and TLSv1.0-1.2 (server) succeeds.
+  client_params->set_tls_minimum_protocol_version(envoy::api::v2::auth::TlsParameters::TLSv1_2);
+  client_params->set_tls_maximum_protocol_version(envoy::api::v2::auth::TlsParameters::TLSv1_2);
+  server_params->set_tls_minimum_protocol_version(envoy::api::v2::auth::TlsParameters::TLSv1_0);
+  server_params->set_tls_maximum_protocol_version(envoy::api::v2::auth::TlsParameters::TLSv1_2);
+  testUtilV2(tls_v1_2_test_options);
+  client_params->clear_tls_minimum_protocol_version();
+  client_params->clear_tls_maximum_protocol_version();
+  server_params->clear_tls_minimum_protocol_version();
+  server_params->clear_tls_maximum_protocol_version();
+#endif
 
   // Connection using defaults (client) and TLSv1.0 (server) succeeds.
   server_params->set_tls_minimum_protocol_version(envoy::api::v2::auth::TlsParameters::TLSv1_0);
@@ -3353,6 +3397,7 @@ TEST_P(SslSocketTest, ProtocolVersions) {
   server_params->clear_tls_minimum_protocol_version();
   server_params->clear_tls_maximum_protocol_version();
 
+#ifdef TLS1_3_VERSION
   // Connection using defaults (client) and TLSv1.3 (server) fails.
   server_params->set_tls_minimum_protocol_version(envoy::api::v2::auth::TlsParameters::TLSv1_3);
   server_params->set_tls_maximum_protocol_version(envoy::api::v2::auth::TlsParameters::TLSv1_3);
@@ -3388,6 +3433,43 @@ TEST_P(SslSocketTest, ProtocolVersions) {
   client_params->clear_tls_maximum_protocol_version();
   server_params->clear_tls_minimum_protocol_version();
   server_params->clear_tls_maximum_protocol_version();
+#else // OpenSSL 1.1.0
+  // Connection using defaults (client) and TLSv1.2 (server) succeeds.
+  server_params->set_tls_minimum_protocol_version(envoy::api::v2::auth::TlsParameters::TLSv1_2);
+  server_params->set_tls_maximum_protocol_version(envoy::api::v2::auth::TlsParameters::TLSv1_2);
+  testUtilV2(tls_v1_2_test_options);
+  server_params->clear_tls_minimum_protocol_version();
+  server_params->clear_tls_maximum_protocol_version();
+
+  // Connection using defaults (client) and TLSv1.0-1.2 (server) succeeds.
+  server_params->set_tls_minimum_protocol_version(envoy::api::v2::auth::TlsParameters::TLSv1_0);
+  server_params->set_tls_maximum_protocol_version(envoy::api::v2::auth::TlsParameters::TLSv1_2);
+  testUtilV2(tls_v1_2_test_options);
+  server_params->clear_tls_minimum_protocol_version();
+  server_params->clear_tls_maximum_protocol_version();
+
+  // Connection using TLSv1.0-TLSv1.2 (client) and TLSv1.0 (server) succeeds.
+  client_params->set_tls_minimum_protocol_version(envoy::api::v2::auth::TlsParameters::TLSv1_0);
+  client_params->set_tls_maximum_protocol_version(envoy::api::v2::auth::TlsParameters::TLSv1_2);
+  server_params->set_tls_minimum_protocol_version(envoy::api::v2::auth::TlsParameters::TLSv1_0);
+  server_params->set_tls_maximum_protocol_version(envoy::api::v2::auth::TlsParameters::TLSv1_0);
+  testUtilV2(tls_v1_test_options);
+  client_params->clear_tls_minimum_protocol_version();
+  client_params->clear_tls_maximum_protocol_version();
+  server_params->clear_tls_minimum_protocol_version();
+  server_params->clear_tls_maximum_protocol_version();
+
+  // Connection using TLSv1.0-TLSv1.2 (client) and TLSv1.3 (server) succeeds.
+  client_params->set_tls_minimum_protocol_version(envoy::api::v2::auth::TlsParameters::TLSv1_0);
+  client_params->set_tls_maximum_protocol_version(envoy::api::v2::auth::TlsParameters::TLSv1_2);
+  server_params->set_tls_minimum_protocol_version(envoy::api::v2::auth::TlsParameters::TLSv1_2);
+  server_params->set_tls_maximum_protocol_version(envoy::api::v2::auth::TlsParameters::TLSv1_2);
+  testUtilV2(tls_v1_2_test_options);
+  client_params->clear_tls_minimum_protocol_version();
+  client_params->clear_tls_maximum_protocol_version();
+  server_params->clear_tls_minimum_protocol_version();
+  server_params->clear_tls_maximum_protocol_version();
+#endif
 }
 
 TEST_P(SslSocketTest, ALPN) {
-- 
2.16.4

