From 8b1e561e0a700b11d9bc0ac25b2cce57a198ae84 Mon Sep 17 00:00:00 2001
From: Jarno Rajahalme <jarno@covalent.io>
Date: Tue, 3 Dec 2019 13:40:39 -0800
Subject: [PATCH 1/6] server: add getTransportSocketFactoryContext() to Filter
 context

Add getTransportSocketFactoryContext() that returns a
TransportSocketFactoryContext with a lifetime at least as long as the
one of the server. This can be used by extensions to create ssl
contexts that can be shared across listeners.

Implementation of this required harmonization of method names and
constness of some of the methods in class
TransportSocketFactoryContext, so that implementing classes would not
need to re-implement similar methods with different names.

ServerFactoryContextImpl is extended to implement
TransportSocketFactoryContext in addition to ServerFactoryContext;
this allows for minimal implementation and avoids duplication of
code. It may might be possible to combine these interfaces as a future
enhancement.

The existing TransportSocketFactoryContextImpl is still used as
before, as it allows for listener specific stats scopes and listener
specific init manager to be used. TransportSocketFactoryContext
returned by the new getTransportSocketFactoryContext() returns
Server's stats scope and the Server's init manager.

Signed-off-by: Jarno Rajahalme <jarno@covalent.io>
---
 envoy/include/envoy/server/filter_config.h              |  7 +++++++
 envoy/include/envoy/server/instance.h                   |  5 +++++
 envoy/include/envoy/server/transport_socket_config.h    |  4 ++--
 envoy/source/extensions/transport_sockets/tls/config.cc |  6 +++---
 envoy/source/server/config_validation/server.h          |  3 +++
 envoy/source/server/listener_impl.cc                    |  4 ++++
 envoy/source/server/listener_impl.h                     |  1 +
 envoy/source/server/server.h                            | 21 ++++++++++++++++++++-
 envoy/source/server/transport_socket_config_impl.h      |  4 ++--
 envoy/test/mocks/server/mocks.cc                        |  2 ++
 envoy/test/mocks/server/mocks.h                         | 10 +++++++---
 11 files changed, 56 insertions(+), 11 deletions(-)

diff --git a/envoy/include/envoy/server/filter_config.h b/envoy/include/envoy/server/filter_config.h
index 89cce4b54..fc50e5701 100644
--- a/envoy/include/envoy/server/filter_config.h
+++ b/envoy/include/envoy/server/filter_config.h
@@ -105,6 +105,8 @@ public:
   ~ServerFactoryContext() override = default;
 };
 
+class TransportSocketFactoryContext;
+
 /**
  * Context passed to network and HTTP filters to access server resources.
  * TODO(mattklein123): When we lock down visibility of the rest of the code, filters should only
@@ -119,6 +121,11 @@ public:
    */
   virtual ServerFactoryContext& getServerFactoryContext() const PURE;
 
+  /**
+   * @return TransportSocketFactoryContext which lifetime is no shorter than the server.
+   */
+  virtual TransportSocketFactoryContext& getTransportSocketFactoryContext() const PURE;
+
   /**
    * @return AccessLogManager for use by the entire server.
    */
diff --git a/include/envoy/server/instance.h b/include/envoy/server/instance.h
index 59e3a9a8b..88d1ae1b1 100644
--- a/envoy/include/envoy/server/instance.h
+++ b/envoy/include/envoy/server/instance.h
@@ -229,6 +229,11 @@ public:
    * @return Configuration::ServerFactoryContext& factory context for filters.
    */
   virtual Configuration::ServerFactoryContext& serverFactoryContext() PURE;
+
+  /**
+   * @return Configuration::TransportSocketFactoryContext& factory context for transport sockets.
+   */
+  virtual Configuration::TransportSocketFactoryContext& transportSocketFactoryContext() PURE;
 };
 
 } // namespace Server
diff --git a/include/envoy/server/transport_socket_config.h b/include/envoy/server/transport_socket_config.h
index b0c22e786..253c23775 100644
--- a/envoy/include/envoy/server/transport_socket_config.h
+++ b/envoy/include/envoy/server/transport_socket_config.h
@@ -40,7 +40,7 @@ public:
   /**
    * @return Stats::Scope& the transport socket's stats scope.
    */
-  virtual Stats::Scope& statsScope() const PURE;
+  virtual Stats::Scope& scope() PURE;
 
   /**
    * Return the instance of secret manager.
@@ -55,7 +55,7 @@ public:
   /**
    * @return information about the local environment the server is running in.
    */
-  virtual const LocalInfo::LocalInfo& localInfo() PURE;
+  virtual const LocalInfo::LocalInfo& localInfo() const PURE;
 
   /**
    * @return Event::Dispatcher& the main thread's dispatcher.
diff --git a/source/extensions/transport_sockets/tls/config.cc b/source/extensions/transport_sockets/tls/config.cc
index 9e617ebef..2ae8fa283 100644
--- a/envoy/source/extensions/transport_sockets/tls/config.cc
+++ b/envoy/source/extensions/transport_sockets/tls/config.cc
@@ -20,8 +20,8 @@ Network::TransportSocketFactoryPtr UpstreamSslSocketFactory::createTransportSock
       MessageUtil::downcastAndValidate<const envoy::api::v2::auth::UpstreamTlsContext&>(
           message, context.messageValidationVisitor()),
       context);
-  return std::make_unique<ClientSslSocketFactory>(
-      std::move(client_config), context.sslContextManager(), context.statsScope());
+  return std::make_unique<ClientSslSocketFactory>(std::move(client_config),
+                                                  context.sslContextManager(), context.scope());
 }
 
 ProtobufTypes::MessagePtr UpstreamSslSocketFactory::createEmptyConfigProto() {
@@ -39,7 +39,7 @@ Network::TransportSocketFactoryPtr DownstreamSslSocketFactory::createTransportSo
           message, context.messageValidationVisitor()),
       context);
   return std::make_unique<ServerSslSocketFactory>(
-      std::move(server_config), context.sslContextManager(), context.statsScope(), server_names);
+      std::move(server_config), context.sslContextManager(), context.scope(), server_names);
 }
 
 ProtobufTypes::MessagePtr DownstreamSslSocketFactory::createEmptyConfigProto() {
diff --git a/source/server/config_validation/server.h b/source/server/config_validation/server.h
index 97a6e8933..df28728a5 100644
--- a/envoy/source/server/config_validation/server.h
+++ b/envoy/source/server/config_validation/server.h
@@ -107,6 +107,9 @@ public:
     return validation_context_;
   }
   Configuration::ServerFactoryContext& serverFactoryContext() override { return server_context_; }
+  Configuration::TransportSocketFactoryContext& transportSocketFactoryContext() override {
+    return server_context_;
+  }
 
   // Server::ListenerComponentFactory
   LdsApiPtr createLdsApi(const envoy::api::v2::core::ConfigSource& lds_config) override {
diff --git a/source/server/listener_impl.cc b/source/server/listener_impl.cc
index 21c5d6c15..4298a35b6 100644
--- a/envoy/source/server/listener_impl.cc
+++ b/envoy/source/server/listener_impl.cc
@@ -341,6 +341,10 @@ OptProcessContextRef ListenerImpl::processContext() { return parent_.server_.pro
 Configuration::ServerFactoryContext& ListenerImpl::getServerFactoryContext() const {
   return parent_.server_.serverFactoryContext();
 }
+Configuration::TransportSocketFactoryContext&
+ListenerImpl::getTransportSocketFactoryContext() const {
+  return parent_.server_.transportSocketFactoryContext();
+}
 
 bool ListenerImpl::createNetworkFilterChain(
     Network::Connection& connection,
diff --git a/source/server/listener_impl.h b/source/server/listener_impl.h
index 013d423ed..9dbf5f58b 100644
--- a/envoy/source/server/listener_impl.h
+++ b/envoy/source/server/listener_impl.h
@@ -177,6 +177,7 @@ public:
   ServerLifecycleNotifier& lifecycleNotifier() override;
   OptProcessContextRef processContext() override;
   Configuration::ServerFactoryContext& getServerFactoryContext() const override;
+  Configuration::TransportSocketFactoryContext& getTransportSocketFactoryContext() const override;
 
   void ensureSocketOptions() {
     if (!listen_socket_options_) {
diff --git a/source/server/server.h b/source/server/server.h
index 884cec832..7b5c5c2b4 100644
--- a/envoy/source/server/server.h
+++ b/envoy/source/server/server.h
@@ -14,6 +14,7 @@
 #include "envoy/server/instance.h"
 #include "envoy/server/process_context.h"
 #include "envoy/server/tracer_config.h"
+#include "envoy/server/transport_socket_config.h"
 #include "envoy/ssl/context_manager.h"
 #include "envoy/stats/stats_macros.h"
 #include "envoy/stats/timespan.h"
@@ -143,11 +144,13 @@ private:
   Event::SignalEventPtr sig_hup_;
 };
 
-class ServerFactoryContextImpl : public Configuration::ServerFactoryContext {
+class ServerFactoryContextImpl : public Configuration::ServerFactoryContext,
+                                 public Configuration::TransportSocketFactoryContext {
 public:
   explicit ServerFactoryContextImpl(Instance& server)
       : server_(server), server_scope_(server_.stats().createScope("")) {}
 
+  // Configuration::ServerFactoryContext
   Upstream::ClusterManager& clusterManager() override { return server_.clusterManager(); }
   Event::Dispatcher& dispatcher() override { return server_.dispatcher(); }
   const LocalInfo::LocalInfo& localInfo() const override { return server_.localInfo(); }
@@ -160,6 +163,18 @@ public:
   TimeSource& timeSource() override { return api().timeSource(); }
   Api::Api& api() override { return server_.api(); }
 
+  // Configuration::TransportSocketFactoryContext
+  Ssl::ContextManager& sslContextManager() override { return server_.sslContextManager(); }
+  Secret::SecretManager& secretManager() override { return server_.secretManager(); }
+  Stats::Store& stats() override { return server_.stats(); }
+  void setInitManager(Init::Manager&) override {}
+  Init::Manager* initManager() override { return &server_.initManager(); }
+  ProtobufMessage::ValidationVisitor& messageValidationVisitor() override {
+    return initManager()->state() == Init::Manager::State::Initialized
+               ? server_.messageValidationContext().dynamicValidationVisitor()
+               : server_.messageValidationContext().staticValidationVisitor();
+  }
+
 private:
   Instance& server_;
   Stats::ScopePtr server_scope_;
@@ -225,6 +240,10 @@ public:
 
   Configuration::ServerFactoryContext& serverFactoryContext() override { return server_context_; }
 
+  Configuration::TransportSocketFactoryContext& transportSocketFactoryContext() override {
+    return server_context_;
+  }
+
   std::chrono::milliseconds statsFlushInterval() const override {
     return config_.statsFlushInterval();
   }
diff --git a/source/server/transport_socket_config_impl.h b/source/server/transport_socket_config_impl.h
index 374b36afc..c1868cb4b 100644
--- a/envoy/source/server/transport_socket_config_impl.h
+++ b/envoy/source/server/transport_socket_config_impl.h
@@ -26,12 +26,12 @@ public:
   // TransportSocketFactoryContext
   Server::Admin& admin() override { return admin_; }
   Ssl::ContextManager& sslContextManager() override { return context_manager_; }
-  Stats::Scope& statsScope() const override { return stats_scope_; }
+  Stats::Scope& scope() override { return stats_scope_; }
   Secret::SecretManager& secretManager() override {
     return cluster_manager_.clusterManagerFactory().secretManager();
   }
   Upstream::ClusterManager& clusterManager() override { return cluster_manager_; }
-  const LocalInfo::LocalInfo& localInfo() override { return local_info_; }
+  const LocalInfo::LocalInfo& localInfo() const override { return local_info_; }
   Event::Dispatcher& dispatcher() override { return dispatcher_; }
   Envoy::Runtime::RandomGenerator& random() override { return random_; }
   Stats::Store& stats() override { return stats_; }
diff --git a/test/mocks/server/mocks.cc b/test/mocks/server/mocks.cc
index 16ea2134d..8f5153a4a 100644
--- a/envoy/test/mocks/server/mocks.cc
+++ b/envoy/test/mocks/server/mocks.cc
@@ -170,6 +170,8 @@ MockInstance::MockInstance()
   ON_CALL(*this, overloadManager()).WillByDefault(ReturnRef(overload_manager_));
   ON_CALL(*this, messageValidationContext()).WillByDefault(ReturnRef(validation_context_));
   ON_CALL(*this, serverFactoryContext()).WillByDefault(ReturnRef(*server_factory_context_));
+  ON_CALL(*this, transportSocketFactoryContext())
+      .WillByDefault(ReturnRef(*transport_socket_factory_context_));
 }
 
 MockInstance::~MockInstance() = default;
diff --git a/test/mocks/server/mocks.h b/test/mocks/server/mocks.h
index 097e2382e..de0efffe4 100644
--- a/envoy/test/mocks/server/mocks.h
+++ b/envoy/test/mocks/server/mocks.h
@@ -55,7 +55,8 @@ namespace Server {
 
 namespace Configuration {
 class MockServerFactoryContext;
-}
+class MockTransportSocketFactoryContext;
+} // namespace Configuration
 
 class MockOptions : public Options {
 public:
@@ -397,6 +398,7 @@ public:
   MOCK_CONST_METHOD0(statsFlushInterval, std::chrono::milliseconds());
   MOCK_METHOD0(messageValidationContext, ProtobufMessage::ValidationContext&());
   MOCK_METHOD0(serverFactoryContext, Configuration::ServerFactoryContext&());
+  MOCK_METHOD0(transportSocketFactoryContext, Configuration::TransportSocketFactoryContext&());
 
   TimeSource& timeSource() override { return time_system_; }
 
@@ -429,6 +431,8 @@ public:
   testing::NiceMock<ProtobufMessage::MockValidationContext> validation_context_;
   std::shared_ptr<testing::NiceMock<Configuration::MockServerFactoryContext>>
       server_factory_context_;
+  std::shared_ptr<testing::NiceMock<Configuration::MockTransportSocketFactoryContext>>
+      transport_socket_factory_context_;
 };
 
 namespace Configuration {
@@ -552,9 +556,9 @@ public:
 
   MOCK_METHOD0(admin, Server::Admin&());
   MOCK_METHOD0(sslContextManager, Ssl::ContextManager&());
-  MOCK_CONST_METHOD0(statsScope, Stats::Scope&());
+  MOCK_METHOD0(scope, Stats::Scope&());
   MOCK_METHOD0(clusterManager, Upstream::ClusterManager&());
-  MOCK_METHOD0(localInfo, const LocalInfo::LocalInfo&());
+  MOCK_CONST_METHOD0(localInfo, const LocalInfo::LocalInfo&());
   MOCK_METHOD0(dispatcher, Event::Dispatcher&());
   MOCK_METHOD0(random, Envoy::Runtime::RandomGenerator&());
   MOCK_METHOD0(stats, Stats::Store&());
-- 
2.16.4

