From c1dac39e17f00d56169ccfc2d0dd9189fc6b8142 Mon Sep 17 00:00:00 2001
From: Jarno Rajahalme <jarno@covalent.io>
Date: Fri, 6 Dec 2019 12:51:06 +0000
Subject: [PATCH 6/6] fix format

Signed-off-by: Jarno Rajahalme <jarno@covalent.io>
---
 envoy/source/common/upstream/cluster_factory_impl.h     | 16 ++++++++--------
 envoy/source/common/upstream/eds.h                      |  8 ++++----
 envoy/source/common/upstream/logical_dns_cluster.h      |  8 ++++----
 envoy/source/common/upstream/original_dst_cluster.h     |  8 ++++----
 envoy/source/common/upstream/static_cluster.h           |  8 ++++----
 envoy/source/common/upstream/strict_dns_cluster.h       |  8 ++++----
 envoy/source/common/upstream/upstream_impl.h            |  1 +
 envoy/test/common/upstream/cluster_factory_impl_test.cc |  8 ++++----
 8 files changed, 33 insertions(+), 32 deletions(-)

diff --git a/envoy/source/common/upstream/cluster_factory_impl.h b/envoy/source/common/upstream/cluster_factory_impl.h
index aa9ac6a0b..4e1a5b254 100644
--- a/envoy/source/common/upstream/cluster_factory_impl.h
+++ b/envoy/source/common/upstream/cluster_factory_impl.h
@@ -145,10 +145,10 @@ private:
   /**
    * Create an instance of ClusterImplBase.
    */
-  virtual std::pair<ClusterImplBaseSharedPtr, ThreadAwareLoadBalancerPtr>
-  createClusterImpl(const envoy::api::v2::Cluster& cluster, ClusterFactoryContext& context,
-                    Server::Configuration::TransportSocketFactoryContextImpl& socket_factory_context,
-                    Stats::ScopePtr&& stats_scope) PURE;
+  virtual std::pair<ClusterImplBaseSharedPtr, ThreadAwareLoadBalancerPtr> createClusterImpl(
+      const envoy::api::v2::Cluster& cluster, ClusterFactoryContext& context,
+      Server::Configuration::TransportSocketFactoryContextImpl& socket_factory_context,
+      Stats::ScopePtr&& stats_scope) PURE;
   const std::string name_;
 };
 
@@ -169,10 +169,10 @@ protected:
   ConfigurableClusterFactoryBase(const std::string& name) : ClusterFactoryImplBase(name) {}
 
 private:
-  std::pair<ClusterImplBaseSharedPtr, ThreadAwareLoadBalancerPtr>
-  createClusterImpl(const envoy::api::v2::Cluster& cluster, ClusterFactoryContext& context,
-                    Server::Configuration::TransportSocketFactoryContextImpl& socket_factory_context,
-                    Stats::ScopePtr&& stats_scope) override {
+  std::pair<ClusterImplBaseSharedPtr, ThreadAwareLoadBalancerPtr> createClusterImpl(
+      const envoy::api::v2::Cluster& cluster, ClusterFactoryContext& context,
+      Server::Configuration::TransportSocketFactoryContextImpl& socket_factory_context,
+      Stats::ScopePtr&& stats_scope) override {
     ProtobufTypes::MessagePtr config = createEmptyConfigProto();
     Config::Utility::translateOpaqueConfig(
         cluster.cluster_type().name(), cluster.cluster_type().typed_config(),
diff --git a/envoy/source/common/upstream/eds.h b/envoy/source/common/upstream/eds.h
index edc5d3b83..a7936db2b 100644
--- a/envoy/source/common/upstream/eds.h
+++ b/envoy/source/common/upstream/eds.h
@@ -84,10 +84,10 @@ public:
   EdsClusterFactory() : ClusterFactoryImplBase(Extensions::Clusters::ClusterTypes::get().Eds) {}
 
 private:
-  std::pair<ClusterImplBaseSharedPtr, ThreadAwareLoadBalancerPtr>
-  createClusterImpl(const envoy::api::v2::Cluster& cluster, ClusterFactoryContext& context,
-                    Server::Configuration::TransportSocketFactoryContextImpl& socket_factory_context,
-                    Stats::ScopePtr&& stats_scope) override;
+  std::pair<ClusterImplBaseSharedPtr, ThreadAwareLoadBalancerPtr> createClusterImpl(
+      const envoy::api::v2::Cluster& cluster, ClusterFactoryContext& context,
+      Server::Configuration::TransportSocketFactoryContextImpl& socket_factory_context,
+      Stats::ScopePtr&& stats_scope) override;
 };
 
 } // namespace Upstream
diff --git a/envoy/source/common/upstream/logical_dns_cluster.h b/envoy/source/common/upstream/logical_dns_cluster.h
index 33aadb5d6..752a42ebc 100644
--- a/envoy/source/common/upstream/logical_dns_cluster.h
+++ b/envoy/source/common/upstream/logical_dns_cluster.h
@@ -81,10 +81,10 @@ public:
       : ClusterFactoryImplBase(Extensions::Clusters::ClusterTypes::get().LogicalDns) {}
 
 private:
-  std::pair<ClusterImplBaseSharedPtr, ThreadAwareLoadBalancerPtr>
-  createClusterImpl(const envoy::api::v2::Cluster& cluster, ClusterFactoryContext& context,
-                    Server::Configuration::TransportSocketFactoryContextImpl& socket_factory_context,
-                    Stats::ScopePtr&& stats_scope) override;
+  std::pair<ClusterImplBaseSharedPtr, ThreadAwareLoadBalancerPtr> createClusterImpl(
+      const envoy::api::v2::Cluster& cluster, ClusterFactoryContext& context,
+      Server::Configuration::TransportSocketFactoryContextImpl& socket_factory_context,
+      Stats::ScopePtr&& stats_scope) override;
 };
 
 DECLARE_FACTORY(LogicalDnsClusterFactory);
diff --git a/envoy/source/common/upstream/original_dst_cluster.h b/envoy/source/common/upstream/original_dst_cluster.h
index f3fb88ed8..937d4cc80 100644
--- a/envoy/source/common/upstream/original_dst_cluster.h
+++ b/envoy/source/common/upstream/original_dst_cluster.h
@@ -122,10 +122,10 @@ public:
       : ClusterFactoryImplBase(Extensions::Clusters::ClusterTypes::get().OriginalDst) {}
 
 private:
-  std::pair<ClusterImplBaseSharedPtr, ThreadAwareLoadBalancerPtr>
-  createClusterImpl(const envoy::api::v2::Cluster& cluster, ClusterFactoryContext& context,
-                    Server::Configuration::TransportSocketFactoryContextImpl& socket_factory_context,
-                    Stats::ScopePtr&& stats_scope) override;
+  std::pair<ClusterImplBaseSharedPtr, ThreadAwareLoadBalancerPtr> createClusterImpl(
+      const envoy::api::v2::Cluster& cluster, ClusterFactoryContext& context,
+      Server::Configuration::TransportSocketFactoryContextImpl& socket_factory_context,
+      Stats::ScopePtr&& stats_scope) override;
 };
 
 } // namespace Upstream
diff --git a/envoy/source/common/upstream/static_cluster.h b/envoy/source/common/upstream/static_cluster.h
index 07362ed47..17f6377e9 100644
--- a/envoy/source/common/upstream/static_cluster.h
+++ b/envoy/source/common/upstream/static_cluster.h
@@ -36,10 +36,10 @@ public:
       : ClusterFactoryImplBase(Extensions::Clusters::ClusterTypes::get().Static) {}
 
 private:
-  std::pair<ClusterImplBaseSharedPtr, ThreadAwareLoadBalancerPtr>
-  createClusterImpl(const envoy::api::v2::Cluster& cluster, ClusterFactoryContext& context,
-                    Server::Configuration::TransportSocketFactoryContextImpl& socket_factory_context,
-                    Stats::ScopePtr&& stats_scope) override;
+  std::pair<ClusterImplBaseSharedPtr, ThreadAwareLoadBalancerPtr> createClusterImpl(
+      const envoy::api::v2::Cluster& cluster, ClusterFactoryContext& context,
+      Server::Configuration::TransportSocketFactoryContextImpl& socket_factory_context,
+      Stats::ScopePtr&& stats_scope) override;
 };
 
 } // namespace Upstream
diff --git a/envoy/source/common/upstream/strict_dns_cluster.h b/envoy/source/common/upstream/strict_dns_cluster.h
index 573e0426e..9f5b3c049 100644
--- a/envoy/source/common/upstream/strict_dns_cluster.h
+++ b/envoy/source/common/upstream/strict_dns_cluster.h
@@ -67,10 +67,10 @@ public:
       : ClusterFactoryImplBase(Extensions::Clusters::ClusterTypes::get().StrictDns) {}
 
 private:
-  std::pair<ClusterImplBaseSharedPtr, ThreadAwareLoadBalancerPtr>
-  createClusterImpl(const envoy::api::v2::Cluster& cluster, ClusterFactoryContext& context,
-                    Server::Configuration::TransportSocketFactoryContextImpl& socket_factory_context,
-                    Stats::ScopePtr&& stats_scope) override;
+  std::pair<ClusterImplBaseSharedPtr, ThreadAwareLoadBalancerPtr> createClusterImpl(
+      const envoy::api::v2::Cluster& cluster, ClusterFactoryContext& context,
+      Server::Configuration::TransportSocketFactoryContextImpl& socket_factory_context,
+      Stats::ScopePtr&& stats_scope) override;
 };
 
 } // namespace Upstream
diff --git a/envoy/source/common/upstream/upstream_impl.h b/envoy/source/common/upstream/upstream_impl.h
index 97b6e888c..f6e008e4b 100644
--- a/envoy/source/common/upstream/upstream_impl.h
+++ b/envoy/source/common/upstream/upstream_impl.h
@@ -44,6 +44,7 @@
 #include "common/upstream/outlier_detection_impl.h"
 #include "common/upstream/resource_manager_impl.h"
 #include "common/upstream/transport_socket_match_impl.h"
+
 #include "server/transport_socket_config_impl.h"
 
 #include "absl/synchronization/mutex.h"
diff --git a/envoy/test/common/upstream/cluster_factory_impl_test.cc b/envoy/test/common/upstream/cluster_factory_impl_test.cc
index 2a6a6e45e..4fd25ed26 100644
--- a/envoy/test/common/upstream/cluster_factory_impl_test.cc
+++ b/envoy/test/common/upstream/cluster_factory_impl_test.cc
@@ -35,10 +35,10 @@ class TestStaticClusterFactory : public ClusterFactoryImplBase {
 public:
   TestStaticClusterFactory() : ClusterFactoryImplBase("envoy.clusters.test_static") {}
 
-  std::pair<ClusterImplBaseSharedPtr, ThreadAwareLoadBalancerPtr>
-  createClusterImpl(const envoy::api::v2::Cluster& cluster, ClusterFactoryContext& context,
-                    Server::Configuration::TransportSocketFactoryContextImpl& socket_factory_context,
-                    Stats::ScopePtr&& stats_scope) override {
+  std::pair<ClusterImplBaseSharedPtr, ThreadAwareLoadBalancerPtr> createClusterImpl(
+      const envoy::api::v2::Cluster& cluster, ClusterFactoryContext& context,
+      Server::Configuration::TransportSocketFactoryContextImpl& socket_factory_context,
+      Stats::ScopePtr&& stats_scope) override {
     return std::make_pair(std::make_shared<CustomStaticCluster>(
                               cluster, context.runtime(), socket_factory_context,
                               std::move(stats_scope), context.addedViaApi(), 1, "127.0.0.1", 80),
-- 
2.16.4

