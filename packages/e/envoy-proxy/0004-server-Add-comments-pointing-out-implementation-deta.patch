From ccb576185d5f6e713ce4a24e155649ae30864652 Mon Sep 17 00:00:00 2001
From: Jarno Rajahalme <jarno@covalent.io>
Date: Wed, 4 Dec 2019 14:34:42 -0800
Subject: [PATCH 4/6] server: Add comments pointing out implementation details.

Address review comments/question by adding relevant comments to the
implementation.

Rename member 'server_context_' as 'server_contexts_' to hint that it
implements more than just the ServerContext.

Signed-off-by: Jarno Rajahalme <jarno@covalent.io>
---
 envoy/source/server/config_validation/server.cc |  3 ++-
 envoy/source/server/config_validation/server.h  |  6 +++---
 envoy/source/server/server.cc                   |  2 +-
 envoy/source/server/server.h                    | 15 ++++++++++++---
 4 files changed, 18 insertions(+), 8 deletions(-)

diff --git a/source/server/config_validation/server.cc b/source/server/config_validation/server.cc
index 3c1c03dc9..03179ae74 100644
--- a/envoy/source/server/config_validation/server.cc
+++ b/envoy/source/server/config_validation/server.cc
@@ -51,7 +51,8 @@ ValidationInstance::ValidationInstance(
       access_log_manager_(options.fileFlushIntervalMsec(), *api_, *dispatcher_, access_log_lock,
                           store),
       mutex_tracer_(nullptr), grpc_context_(stats_store_.symbolTable()),
-      http_context_(stats_store_.symbolTable()), time_system_(time_system), server_context_(*this) {
+      http_context_(stats_store_.symbolTable()), time_system_(time_system),
+      server_contexts_(*this) {
   try {
     initialize(options, local_address, component_factory);
   } catch (const EnvoyException& e) {
diff --git a/source/server/config_validation/server.h b/source/server/config_validation/server.h
index df28728a5..7b9fa4191 100644
--- a/envoy/source/server/config_validation/server.h
+++ b/envoy/source/server/config_validation/server.h
@@ -106,9 +106,9 @@ public:
   ProtobufMessage::ValidationContext& messageValidationContext() override {
     return validation_context_;
   }
-  Configuration::ServerFactoryContext& serverFactoryContext() override { return server_context_; }
+  Configuration::ServerFactoryContext& serverFactoryContext() override { return server_contexts_; }
   Configuration::TransportSocketFactoryContext& transportSocketFactoryContext() override {
-    return server_context_;
+    return server_contexts_;
   }
 
   // Server::ListenerComponentFactory
@@ -197,7 +197,7 @@ private:
   Grpc::ContextImpl grpc_context_;
   Http::ContextImpl http_context_;
   Event::TimeSystem& time_system_;
-  ServerFactoryContextImpl server_context_;
+  ServerFactoryContextImpl server_contexts_;
 };
 
 } // namespace Server
diff --git a/source/server/server.cc b/source/server/server.cc
index 7a3e604d6..6392377b7 100644
--- a/envoy/source/server/server.cc
+++ b/envoy/source/server/server.cc
@@ -74,7 +74,7 @@ InstanceImpl::InstanceImpl(
                                                   : nullptr),
       grpc_context_(store.symbolTable()), http_context_(store.symbolTable()),
       process_context_(std::move(process_context)), main_thread_id_(std::this_thread::get_id()),
-      server_context_(*this) {
+      server_contexts_(*this) {
   try {
     if (!options.logPath().empty()) {
       try {
diff --git a/source/server/server.h b/source/server/server.h
index 7b5c5c2b4..4254597f7 100644
--- a/envoy/source/server/server.h
+++ b/envoy/source/server/server.h
@@ -144,6 +144,9 @@ private:
   Event::SignalEventPtr sig_hup_;
 };
 
+// ServerFactoryContextImpl implements both ServerFactoryContext and
+// TransportSocketFactoryContext for convenience as these two contexts
+// share common member functions and member variables.
 class ServerFactoryContextImpl : public Configuration::ServerFactoryContext,
                                  public Configuration::TransportSocketFactoryContext {
 public:
@@ -167,9 +170,15 @@ public:
   Ssl::ContextManager& sslContextManager() override { return server_.sslContextManager(); }
   Secret::SecretManager& secretManager() override { return server_.secretManager(); }
   Stats::Store& stats() override { return server_.stats(); }
+  // Server's init manager can't be changed via this shared TransportSocketFactoryContext
   void setInitManager(Init::Manager&) override {}
   Init::Manager* initManager() override { return &server_.initManager(); }
   ProtobufMessage::ValidationVisitor& messageValidationVisitor() override {
+    // Server has two message validation visitors, one for static and
+    // other for dynamic configuration. Choose the dynamic validation
+    // visitor if server's init manager indicates that the server is
+    // in the Initialized state, as this state is engaged right after
+    // the static configuration (e.g., bootstrap) has been completed.
     return initManager()->state() == Init::Manager::State::Initialized
                ? server_.messageValidationContext().dynamicValidationVisitor()
                : server_.messageValidationContext().staticValidationVisitor();
@@ -238,10 +247,10 @@ public:
   const LocalInfo::LocalInfo& localInfo() const override { return *local_info_; }
   TimeSource& timeSource() override { return time_source_; }
 
-  Configuration::ServerFactoryContext& serverFactoryContext() override { return server_context_; }
+  Configuration::ServerFactoryContext& serverFactoryContext() override { return server_contexts_; }
 
   Configuration::TransportSocketFactoryContext& transportSocketFactoryContext() override {
-    return server_context_;
+    return server_contexts_;
   }
 
   std::chrono::milliseconds statsFlushInterval() const override {
@@ -331,7 +340,7 @@ private:
   // whenever we have support for histogram merge across hot restarts.
   Stats::TimespanPtr initialization_timer_;
 
-  ServerFactoryContextImpl server_context_;
+  ServerFactoryContextImpl server_contexts_;
 
   using LifecycleNotifierCallbacks = std::list<StageCallback>;
   using LifecycleNotifierCompletionCallbacks = std::list<StageCallbackWithCompletion>;
-- 
2.16.4

