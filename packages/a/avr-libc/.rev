<revisionlist>
  <revision rev="1" vrev="1">
    <srcmd5>700efb20015298ba8ce3415bd68a3c29</srcmd5>
    <version>2.0.0</version>
    <time>1519041661</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>577242</requestid>
  </revision>
  <revision rev="2" vrev="1">
    <srcmd5>8732b87cd380b8e74a5398c4fb8f01dd</srcmd5>
    <version>2.1.0</version>
    <time>1668271250</time>
    <user>dimstar_suse</user>
    <comment>- update to 2.1.0
  * Improvements and additions:
    - Patch #9187 improved the library coverage for the AVR_TINY
      architecture (ATtiny10 and relatives).  In particular, many
      of the functions from &lt;string.h&gt; are now available there.
          
    - Patch #8729 adds ISR_NOICF and ISR_FLATTEN to &lt;avr/interrupt.h&gt;
  * Bugs fixed:
    [#36933] Documentation no longer correctly describes how to declare
    [#41689] add static_assert to assert.h
    [#48898] power_usart3_* functions no more defined in power.h
    [#49020] dtostre() flags documentation error
    [#49447] Example code for uart_putchar() has error in recursive call
      strings for storage in program memory
    [#50439] avr/iom32u4.h does not define PRTIM4
    [#51755] iotn441.h &amp; iotn841.h missing definitions for PUEA[0-7] and PUEB[0-3]
    [no-id] util/eu_dst.h: fix reversed DST decision logic for March and October
    [no-id] util/delay.h.in: add missing return
  
  * Contributed Patches:
    [no-id] Define weak symbols for known memory region sizes based on device 
      header definitions, starting with fuse region.
    [#8961] Update test script for new simulavr and library layout
    [#8964] Update tests isinf-01.c, signbit-01.c and modf-np.c
    [#9163] New eeprom write block function for xmega using eeprom page write
    [#8729] [avr/interrupt.h] Add ISR_NOICF, ISR_FLATTEN. Fix namespace
      of identifiers.
    [#8536] Fix a typo within &lt;stdio.h&gt;
    [#8649] small documentation fixes in
    [#9187] [AVR_TINY]: Support 16-bit xtoa functons and more string functions.
    [#9400] Add avrxmega3 multilibs
    [#9659] Update eeprom_is_ready for avrxmega3 devices
    [#9553] Fix some issues in libc/
    [#9864] Use proper float function names and prototypes (forwarded request 1035193 from kwk)</comment>
    <requestid>1035232</requestid>
  </revision>
  <revision rev="3" vrev="1">
    <srcmd5>84fbe200a879dc38f48d09313fb01043</srcmd5>
    <version>2.2.1</version>
    <time>1740586547</time>
    <user>dimstar_suse</user>
    <comment>- update to 2.2.1
  * General:
    - Project moved to Github
    - Support for many new devices has been added, like devices from the
      AVR 0-series, 1-series, 2-series, AVR-Dx and AVR-Ex, but also for
      some older devices.
    - Parts of the user manual have been reworked, like the inline assembly
      Cookbook and the documentation of memory sections.
    - The multilib layout of the library, and what device belongs to which
      multilib variant, is no more hard coded in AVR-LibC but follows the
      compiler's multilib layout.
  * Improvements and additions:
    - Add support to new multilib layout / 64-bit [long] double compiler
      (Issues #642, #670)
    - Added support for new devices (Issue #824):
      ATtiny202 ATtiny204 ATtiny212 ATtiny214 ATtiny402 ATtiny404
      ATtiny406 ATtiny412 ATtiny414 ATtiny416 ATtiny417 ATtiny424
      ATtiny426 ATtiny427 ATtiny804 ATtiny806 ATtiny807 ATtiny814
      ATtiny816 ATtiny817 ATtiny824 ATtiny826 ATtiny827 ATtiny1604
      ATtiny1606 ATtiny1607 ATtiny1614 ATtiny1616 ATtiny1617 ATtiny1624
      ATtiny1626 ATtiny1627 ATtiny3214 ATtiny3216 ATtiny3217 ATtiny3224
      ATtiny3226 ATtiny3227 ATmega808 ATmega809 ATmega1608 ATmega1609
      ATmega3208 ATmega3209 ATmega4808 ATmega4809
    - Added support for AVR-Dx devices (Issue #881):
      AVR16DD14 AVR16DD20 AVR16DD28 AVR16DD32 AVR32DA28 AVR32DA32
      AVR32DA48 AVR32DB28 AVR32DB32 AVR32DB48 AVR32DD14 AVR32DD20
      AVR32DD28 AVR32DD32 AVR64DA28 AVR64DA32 AVR64DA48 AVR64DA64
      AVR64DB28 AVR64DB32 AVR64DB48 AVR64DB64 AVR64DD14 AVR64DD20
      AVR64DD28 AVR64DD32 AVR128DA28 AVR128DA32 AVR128DA48 AVR128DA64
      AVR128DB28 AVR128DB32 AVR128DB48 AVR128DB64</comment>
    <requestid>1248419</requestid>
  </revision>
  <revision rev="4" vrev="2">
    <srcmd5>e35458a32bd49f5a765a54a768856de1</srcmd5>
    <version>2.2.1</version>
    <time>1757958812</time>
    <user>anag_factory</user>
    <comment>- Use versioned compiler binary (avr-gcc-%{gcc_version}) for building.</comment>
    <requestid>1304827</requestid>
  </revision>
</revisionlist>
