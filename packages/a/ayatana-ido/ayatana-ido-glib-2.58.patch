Index: ayatana-ido-0.4.4/src/idobasicmenuitem.c
===================================================================
--- ayatana-ido-0.4.4.orig/src/idobasicmenuitem.c
+++ ayatana-ido-0.4.4/src/idobasicmenuitem.c
@@ -191,8 +191,6 @@ ido_basic_menu_item_class_init (IdoBasic
   GObjectClass * gobject_class = G_OBJECT_CLASS (klass);
   GtkWidgetClass *widget_class = GTK_WIDGET_CLASS (klass);
 
-  g_type_class_add_private (klass, sizeof (IdoBasicMenuItemPrivate));
-
   gobject_class->get_property = my_get_property;
   gobject_class->set_property = my_set_property;
   gobject_class->dispose = my_dispose;
@@ -232,9 +230,7 @@ ido_basic_menu_item_init (IdoBasicMenuIt
   GtkWidget * w;
   GtkGrid * grid;
 
-  self->priv = G_TYPE_INSTANCE_GET_PRIVATE (self,
-                                            IDO_TYPE_BASIC_MENU_ITEM,
-                                            IdoBasicMenuItemPrivate);
+  self->priv = ido_basic_menu_item_get_instance_private (self);
 
   p = self->priv;
 
Index: ayatana-ido-0.4.4/src/idocalendarmenuitem.c
===================================================================
--- ayatana-ido-0.4.4.orig/src/idocalendarmenuitem.c
+++ ayatana-ido-0.4.4/src/idocalendarmenuitem.c
@@ -59,9 +59,7 @@ struct _IdoCalendarMenuItemPrivate
   gboolean         selected;
 };
 
-G_DEFINE_TYPE (IdoCalendarMenuItem, ido_calendar_menu_item, GTK_TYPE_MENU_ITEM)
-
-#define IDO_CALENDAR_MENU_ITEM_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), IDO_TYPE_CALENDAR_MENU_ITEM, IdoCalendarMenuItemPrivate))
+G_DEFINE_TYPE_WITH_PRIVATE (IdoCalendarMenuItem, ido_calendar_menu_item, GTK_TYPE_MENU_ITEM)
 
 static void
 ido_calendar_menu_item_class_init (IdoCalendarMenuItemClass *klass)
@@ -84,8 +82,6 @@ ido_calendar_menu_item_class_init (IdoCa
 
   menu_item_class->hide_on_activate = TRUE;
 
-  g_type_class_add_private (gobject_class, sizeof (IdoCalendarMenuItemPrivate));
-
   g_signal_new("month-changed", G_TYPE_FROM_CLASS(klass),
                                 G_SIGNAL_RUN_LAST, 0, NULL, NULL,
                                 g_cclosure_marshal_VOID__VOID,
@@ -106,7 +102,7 @@ ido_calendar_menu_item_init (IdoCalendar
 {
   IdoCalendarMenuItemPrivate *priv;
 
-  priv = item->priv = IDO_CALENDAR_MENU_ITEM_GET_PRIVATE (item);
+  priv = item->priv = ido_calendar_menu_item_get_instance_private (item);
 
   /* Will be disposed automatically */
   priv->calendar = g_object_new (gtk_calendar_get_type (),
@@ -136,7 +132,7 @@ static void
 ido_calendar_menu_item_finalize (GObject *object)
 {
   IdoCalendarMenuItem *item = IDO_CALENDAR_MENU_ITEM (object);
-  IdoCalendarMenuItemPrivate *priv = IDO_CALENDAR_MENU_ITEM_GET_PRIVATE (item);
+  IdoCalendarMenuItemPrivate *priv = ido_calendar_menu_item_get_instance_private (item);
 
   if (G_IS_OBJECT (priv->calendar))
     {
Index: ayatana-ido-0.4.4/src/idoentrymenuitem.c
===================================================================
--- ayatana-ido-0.4.4.orig/src/idoentrymenuitem.c
+++ ayatana-ido-0.4.4/src/idoentrymenuitem.c
@@ -51,18 +51,16 @@ struct _IdoEntryMenuItemPrivate
   gboolean         selected;
 };
 
-G_DEFINE_TYPE (IdoEntryMenuItem, ido_entry_menu_item, GTK_TYPE_MENU_ITEM)
+G_DEFINE_TYPE_WITH_PRIVATE (IdoEntryMenuItem, ido_entry_menu_item, GTK_TYPE_MENU_ITEM)
 
 #define IDO_ENTRY_MENU_ITEM_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), IDO_TYPE_ENTRY_MENU_ITEM, IdoEntryMenuItemPrivate))
 
 static void
 ido_entry_menu_item_class_init (IdoEntryMenuItemClass *klass)
-{
-  GObjectClass     *gobject_class;
+{ 
   GtkWidgetClass   *widget_class;
   GtkMenuItemClass *menu_item_class;
 
-  gobject_class = G_OBJECT_CLASS (klass);
   widget_class = GTK_WIDGET_CLASS (klass);
   menu_item_class = GTK_MENU_ITEM_CLASS (klass);
 
@@ -74,7 +72,6 @@ ido_entry_menu_item_class_init (IdoEntry
 
   menu_item_class->hide_on_activate = TRUE;
 
-  g_type_class_add_private (gobject_class, sizeof (IdoEntryMenuItemPrivate));
 }
 
 static void
@@ -88,7 +85,7 @@ ido_entry_menu_item_init (IdoEntryMenuIt
   border.top = 2;
   border.bottom = 2;
 
-  priv = item->priv = IDO_ENTRY_MENU_ITEM_GET_PRIVATE (item);
+  priv = item->priv = ido_entry_menu_item_get_instance_private (item);
 
   priv->entry = g_object_new (gtk_entry_get_type (),
                               "inner-border", &border,
Index: ayatana-ido-0.4.4/src/idodetaillabel.c
===================================================================
--- ayatana-ido-0.4.4.orig/src/idodetaillabel.c
+++ ayatana-ido-0.4.4/src/idodetaillabel.c
@@ -21,7 +21,7 @@
 
 #include <math.h>
 
-G_DEFINE_TYPE (IdoDetailLabel, ido_detail_label, GTK_TYPE_WIDGET)
+typedef struct _IdoDetailLabelPrivate IdoDetailLabelPrivate;
 
 struct _IdoDetailLabelPrivate
 {
@@ -30,6 +30,8 @@ struct _IdoDetailLabelPrivate
   gboolean draw_lozenge;
 };
 
+G_DEFINE_TYPE_WITH_CODE (IdoDetailLabel, ido_detail_label, GTK_TYPE_WIDGET, G_ADD_PRIVATE (IdoDetailLabel))
+
 enum
 {
   PROP_0,
@@ -277,8 +279,6 @@ ido_detail_label_class_init (IdoDetailLa
   widget_class->get_preferred_width = ido_detail_label_get_preferred_width;
   widget_class->get_preferred_height = ido_detail_label_get_preferred_height;
 
-  g_type_class_add_private (klass, sizeof (IdoDetailLabelPrivate));
-
   properties[PROP_TEXT] = g_param_spec_string ("text",
                                                "Text",
                                                "The text of the label",
@@ -292,9 +292,7 @@ ido_detail_label_class_init (IdoDetailLa
 static void
 ido_detail_label_init (IdoDetailLabel *self)
 {
-  self->priv = G_TYPE_INSTANCE_GET_PRIVATE (self,
-                                            IDO_TYPE_DETAIL_LABEL,
-                                            IdoDetailLabelPrivate);
+  self->priv = ido_detail_label_get_instance_private (self);
 
   gtk_widget_set_has_window (GTK_WIDGET (self), FALSE);
 }
Index: ayatana-ido-0.4.4/src/idolocationmenuitem.c
===================================================================
--- ayatana-ido-0.4.4.orig/src/idolocationmenuitem.c
+++ ayatana-ido-0.4.4/src/idolocationmenuitem.c
@@ -46,7 +46,7 @@ struct _IdoLocationMenuItemPrivate
 
 typedef IdoLocationMenuItemPrivate priv_t;
 
-G_DEFINE_TYPE (IdoLocationMenuItem, ido_location_menu_item, IDO_TYPE_TIME_STAMP_MENU_ITEM);
+G_DEFINE_TYPE_WITH_PRIVATE (IdoLocationMenuItem, ido_location_menu_item, IDO_TYPE_TIME_STAMP_MENU_ITEM);
 
 /***
 ****  Timestamp Label
@@ -219,8 +219,6 @@ ido_location_menu_item_class_init (IdoLo
 {
   GObjectClass * gobject_class = G_OBJECT_CLASS (klass);
 
-  g_type_class_add_private (klass, sizeof (IdoLocationMenuItemPrivate));
-
   gobject_class->get_property = my_get_property;
   gobject_class->set_property = my_set_property;
   gobject_class->dispose = my_dispose;
@@ -239,9 +237,7 @@ ido_location_menu_item_class_init (IdoLo
 static void
 ido_location_menu_item_init (IdoLocationMenuItem *self)
 {
-  self->priv = G_TYPE_INSTANCE_GET_PRIVATE (self,
-                                            IDO_LOCATION_MENU_ITEM_TYPE,
-                                            IdoLocationMenuItemPrivate);
+  self->priv = ido_location_menu_item_get_instance_private (self);
 
   /* Update the timer whenever the format string changes
      because it determines whether we update once per second or per minute */
Index: ayatana-ido-0.4.4/src/idomessagedialog.c
===================================================================
--- ayatana-ido-0.4.4.orig/src/idomessagedialog.c
+++ ayatana-ido-0.4.4/src/idomessagedialog.c
@@ -34,8 +34,6 @@
 #include "idotimeline.h"
 #include "config.h"
 
-#define IDO_MESSAGE_DIALOG_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), IDO_TYPE_MESSAGE_DIALOG, IdoMessageDialogPrivate))
-
 static GtkWidget *ido_message_dialog_get_secondary_label (IdoMessageDialog *dialog);
 static GtkWidget *ido_message_dialog_get_primary_label   (IdoMessageDialog *dialog);
 
@@ -60,13 +58,13 @@ struct _IdoMessageDialogMorphContext
   GtkRequisition end;
 };
 
-G_DEFINE_TYPE (IdoMessageDialog, ido_message_dialog, GTK_TYPE_MESSAGE_DIALOG)
+G_DEFINE_TYPE_WITH_PRIVATE (IdoMessageDialog, ido_message_dialog, GTK_TYPE_MESSAGE_DIALOG)
 
 static void
 ido_message_dialog_map (GtkWidget *widget)
 {
   IdoMessageDialog *dialog = IDO_MESSAGE_DIALOG (widget);
-  IdoMessageDialogPrivate *priv = IDO_MESSAGE_DIALOG_GET_PRIVATE (dialog);
+  IdoMessageDialogPrivate *priv = ido_message_dialog_get_instance_private (dialog);
 
   GTK_WIDGET_CLASS (ido_message_dialog_parent_class)->map (widget);
 
@@ -145,7 +143,8 @@ timeline_finished_cb (IdoTimeline *timel
                       gpointer     user_data)
 {
   IdoMessageDialogMorphContext *context = user_data;
-  IdoMessageDialogPrivate *priv = IDO_MESSAGE_DIALOG_GET_PRIVATE (context->widget);
+  IdoMessageDialog *dialog = IDO_MESSAGE_DIALOG (context->widget);
+  IdoMessageDialogPrivate *priv = ido_message_dialog_get_instance_private (dialog);
 
   gtk_widget_show (priv->action_area);
   gtk_widget_show (priv->secondary_label);
@@ -158,7 +157,7 @@ ido_message_dialog_focus_in_event (GtkWi
                                    GdkEventFocus *event)
 {
   IdoMessageDialog *dialog = IDO_MESSAGE_DIALOG (widget);
-  IdoMessageDialogPrivate *priv = IDO_MESSAGE_DIALOG_GET_PRIVATE (dialog);
+  IdoMessageDialogPrivate *priv = ido_message_dialog_get_instance_private (dialog);
 
   if (!priv->expanded)
     {
@@ -203,7 +202,8 @@ ido_message_dialog_focus_in_event (GtkWi
 static void
 ido_message_dialog_constructed (GObject *object)
 {
-  IdoMessageDialogPrivate *priv = IDO_MESSAGE_DIALOG_GET_PRIVATE (object);
+  IdoMessageDialog *dialog = IDO_MESSAGE_DIALOG (object);
+  IdoMessageDialogPrivate *priv = ido_message_dialog_get_instance_private (dialog);
   GtkWidget *vbox;
   GtkWidget *event_box;
 
@@ -231,8 +231,6 @@ ido_message_dialog_class_init (IdoMessag
 
   widget_class->map            = ido_message_dialog_map;
   widget_class->focus_in_event = ido_message_dialog_focus_in_event;
-
-  g_type_class_add_private (object_class, sizeof (IdoMessageDialogPrivate));
 }
 
 static void
Index: ayatana-ido-0.4.4/src/idorange.c
===================================================================
--- ayatana-ido-0.4.4.orig/src/idorange.c
+++ ayatana-ido-0.4.4/src/idorange.c
@@ -42,9 +42,7 @@ static void ido_range_get_property   (GO
                                       GValue           *value,
                                       GParamSpec       *pspec);
 
-#define IDO_RANGE_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), IDO_TYPE_RANGE, IdoRangePrivate))
-
-G_DEFINE_TYPE (IdoRange, ido_range, GTK_TYPE_SCALE)
+G_DEFINE_TYPE_WITH_PRIVATE (IdoRange, ido_range, GTK_TYPE_SCALE)
 
 enum {
   PROP_0,
@@ -88,7 +86,6 @@ ido_range_class_init (IdoRangeClass *cla
                                                              8,
                                                              G_PARAM_READABLE));
 
-  g_type_class_add_private (class, sizeof (IdoRangePrivate));
 }
 
 static void
@@ -163,7 +160,7 @@ ido_range_constructed (GObject *object)
 static void
 ido_range_init (IdoRange *range)
 {
-  range->priv = IDO_RANGE_GET_PRIVATE (range);
+  range->priv = ido_range_get_instance_private (range);
 }
 
 /**
Index: ayatana-ido-0.4.4/src/idoscalemenuitem.c
===================================================================
--- ayatana-ido-0.4.4.orig/src/idoscalemenuitem.c
+++ ayatana-ido-0.4.4/src/idoscalemenuitem.c
@@ -99,15 +99,14 @@ enum {
 
 static guint signals[LAST_SIGNAL] = { 0 };
 
-G_DEFINE_TYPE (IdoScaleMenuItem, ido_scale_menu_item, GTK_TYPE_MENU_ITEM)
-
-#define GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), IDO_TYPE_SCALE_MENU_ITEM, IdoScaleMenuItemPrivate))
+G_DEFINE_TYPE_WITH_PRIVATE (IdoScaleMenuItem, ido_scale_menu_item, GTK_TYPE_MENU_ITEM)
 
 static gboolean
 ido_scale_menu_item_scroll_event (GtkWidget      *menuitem,
                                   GdkEventScroll *event)
 {
-  IdoScaleMenuItemPrivate *priv = GET_PRIVATE (menuitem);
+  IdoScaleMenuItem *menu_item = IDO_SCALE_MENU_ITEM (menuitem);
+  IdoScaleMenuItemPrivate *priv = ido_scale_menu_item_get_instance_private (menu_item);
   GtkWidget *scale = priv->scale;
 
   if (priv->reverse_scroll)
@@ -138,7 +137,7 @@ ido_scale_menu_item_scale_value_changed
                                          gpointer  user_data)
 {
   IdoScaleMenuItem *self = user_data;
-  IdoScaleMenuItemPrivate *priv = GET_PRIVATE (self);
+  IdoScaleMenuItemPrivate *priv = ido_scale_menu_item_get_instance_private (self);
 
   /* The signal is not sent when it was set through
    * ido_scale_menu_item_set_value().  */
@@ -151,7 +150,7 @@ static void
 ido_scale_menu_item_constructed (GObject *object)
 {
   IdoScaleMenuItem *self = IDO_SCALE_MENU_ITEM (object);
-  IdoScaleMenuItemPrivate *priv = GET_PRIVATE (self);
+  IdoScaleMenuItemPrivate *priv = ido_scale_menu_item_get_instance_private (self);
   GObject *adj = G_OBJECT (gtk_adjustment_new (0.0, 0.0, 100.0, 1.0, 10.0, 0.0));
   IdoRangeStyle range_style;
   GtkWidget *hbox;
@@ -321,15 +320,12 @@ ido_scale_menu_item_class_init (IdoScale
                                          g_cclosure_marshal_VOID__DOUBLE,
                                          G_TYPE_NONE,
                                          1, G_TYPE_DOUBLE);
-
-
-  g_type_class_add_private (item_class, sizeof (IdoScaleMenuItemPrivate));
 }
 
 static void
 update_packing (IdoScaleMenuItem *self, IdoScaleMenuItemStyle style)
 {
-  IdoScaleMenuItemPrivate *priv = GET_PRIVATE (self);
+  IdoScaleMenuItemPrivate *priv = ido_scale_menu_item_get_instance_private (self);
   GtkBox * box = GTK_BOX (priv->hbox);
   GtkContainer *container = GTK_CONTAINER (priv->hbox);
 
@@ -366,7 +362,7 @@ update_packing (IdoScaleMenuItem *self,
 static void
 ido_scale_menu_item_init (IdoScaleMenuItem *self)
 {
-  IdoScaleMenuItemPrivate *priv = GET_PRIVATE (self);
+  IdoScaleMenuItemPrivate *priv = ido_scale_menu_item_get_instance_private (self);
 
   priv->reverse_scroll = TRUE;
 
@@ -380,7 +376,7 @@ ido_scale_menu_item_set_property (GObjec
                                   GParamSpec      *pspec)
 {
   IdoScaleMenuItem *menu_item = IDO_SCALE_MENU_ITEM (object);
-  IdoScaleMenuItemPrivate *priv = GET_PRIVATE (menu_item);
+  IdoScaleMenuItemPrivate *priv = ido_scale_menu_item_get_instance_private (menu_item);
 
   switch (prop_id)
     {
@@ -413,7 +409,7 @@ ido_scale_menu_item_get_property (GObjec
                                   GParamSpec      *pspec)
 {
   IdoScaleMenuItem *menu_item = IDO_SCALE_MENU_ITEM (object);
-  IdoScaleMenuItemPrivate *priv = GET_PRIVATE (menu_item);
+  IdoScaleMenuItemPrivate *priv = ido_scale_menu_item_get_instance_private (menu_item);
   GtkAdjustment *adjustment;
 
   switch (prop_id)
@@ -442,7 +438,7 @@ ido_scale_menu_item_parent_key_press_eve
                                             GdkEventKey *event,
                                             gpointer     user_data)
 {
-  IdoScaleMenuItemPrivate *priv = GET_PRIVATE (user_data);
+  IdoScaleMenuItemPrivate *priv = ido_scale_menu_item_get_instance_private (user_data);
 
   /* only listen to events when the playback menu item is selected */
   if (!priv->has_focus)
@@ -469,7 +465,8 @@ ido_scale_menu_item_parent_key_press_eve
 static void
 ido_scale_menu_item_select (GtkMenuItem *item)
 {
-  IdoScaleMenuItemPrivate *priv = GET_PRIVATE (item);
+  IdoScaleMenuItem *menu_item = IDO_SCALE_MENU_ITEM (item);
+  IdoScaleMenuItemPrivate *priv = ido_scale_menu_item_get_instance_private (menu_item);
 
   priv->has_focus = TRUE;
   gtk_widget_set_state_flags (priv->scale, GTK_STATE_FLAG_FOCUSED, FALSE);
@@ -480,7 +477,8 @@ ido_scale_menu_item_select (GtkMenuItem
 static void
 ido_scale_menu_item_deselect (GtkMenuItem *item)
 {
-  IdoScaleMenuItemPrivate *priv = GET_PRIVATE (item);
+  IdoScaleMenuItem *menu_item = IDO_SCALE_MENU_ITEM (item);
+  IdoScaleMenuItemPrivate *priv = ido_scale_menu_item_get_instance_private (menu_item);
 
   priv->has_focus = FALSE;
   gtk_widget_unset_state_flags (priv->scale, GTK_STATE_FLAG_FOCUSED);
@@ -492,7 +490,8 @@ static gboolean
 ido_scale_menu_item_button_press_event (GtkWidget      *menuitem,
                                         GdkEventButton *event)
 {
-  IdoScaleMenuItemPrivate *priv = GET_PRIVATE (menuitem);
+  IdoScaleMenuItem *menu_item = IDO_SCALE_MENU_ITEM (menuitem);
+  IdoScaleMenuItemPrivate *priv = ido_scale_menu_item_get_instance_private (menu_item);
   GtkAllocation alloc;
   gint x, y;
 
@@ -516,7 +515,7 @@ ido_scale_menu_item_button_release_event
                                           GdkEventButton *event)
 {
   IdoScaleMenuItem *item = IDO_SCALE_MENU_ITEM (menuitem);
-  IdoScaleMenuItemPrivate *priv = GET_PRIVATE (menuitem);
+  IdoScaleMenuItemPrivate *priv = ido_scale_menu_item_get_instance_private (item);
   GtkWidget *scale = priv->scale;
   GtkAllocation alloc;
   gint x, y;
@@ -569,7 +568,8 @@ static gboolean
 ido_scale_menu_item_motion_notify_event (GtkWidget      *menuitem,
                                          GdkEventMotion *event)
 {
-  IdoScaleMenuItemPrivate *priv = GET_PRIVATE (menuitem);
+  IdoScaleMenuItem *item = IDO_SCALE_MENU_ITEM (menuitem);
+  IdoScaleMenuItemPrivate *priv = ido_scale_menu_item_get_instance_private (item);
   GtkAllocation alloc;
   gint x, y;
 
@@ -596,7 +596,7 @@ static void
 menu_hidden (GtkWidget        *menu,
              IdoScaleMenuItem *scale)
 {
-  IdoScaleMenuItemPrivate *priv = GET_PRIVATE (scale);
+  IdoScaleMenuItemPrivate *priv = ido_scale_menu_item_get_instance_private (scale);
 
   if (priv->grabbed)
     {
@@ -718,7 +718,7 @@ ido_scale_menu_item_get_scale (IdoScaleM
 
   g_return_val_if_fail (IDO_IS_SCALE_MENU_ITEM (menuitem), NULL);
 
-  priv = GET_PRIVATE (menuitem);
+  priv = ido_scale_menu_item_get_instance_private (menuitem);
 
   return priv->scale;
 }
@@ -739,7 +739,7 @@ ido_scale_menu_item_get_style (IdoScaleM
 
   g_return_val_if_fail (IDO_IS_SCALE_MENU_ITEM (menuitem), IDO_SCALE_MENU_ITEM_STYLE_NONE);
 
-  priv = GET_PRIVATE (menuitem);
+  priv = ido_scale_menu_item_get_instance_private (menuitem);
 
   return priv->style;
 }
@@ -760,7 +760,7 @@ ido_scale_menu_item_set_style (IdoScaleM
 
   g_return_if_fail (IDO_IS_SCALE_MENU_ITEM (menuitem));
 
-  priv = GET_PRIVATE (menuitem);
+  priv = ido_scale_menu_item_get_instance_private (menuitem);
 
   priv->style = style;
 
@@ -784,7 +784,7 @@ ido_scale_menu_item_get_primary_image (I
 
   g_return_val_if_fail (IDO_IS_SCALE_MENU_ITEM (menuitem), NULL);
 
-  priv = GET_PRIVATE (menuitem);
+  priv = ido_scale_menu_item_get_instance_private (menuitem);
 
   return priv->primary_image;
 }
@@ -806,7 +806,7 @@ ido_scale_menu_item_get_secondary_image
 
   g_return_val_if_fail (IDO_IS_SCALE_MENU_ITEM (menuitem), NULL);
 
-  priv = GET_PRIVATE (menuitem);
+  priv = ido_scale_menu_item_get_instance_private (menuitem);
 
   return priv->secondary_image;
 }
@@ -859,7 +859,7 @@ ido_scale_menu_item_get_primary_label (I
 
   g_return_val_if_fail (IDO_IS_SCALE_MENU_ITEM (menuitem), NULL);
 
-  priv = GET_PRIVATE (menuitem);
+  priv = ido_scale_menu_item_get_instance_private (menuitem);
 
   return gtk_label_get_text (GTK_LABEL (priv->primary_label));
 }
@@ -881,7 +881,7 @@ ido_scale_menu_item_get_secondary_label
 
   g_return_val_if_fail (IDO_IS_SCALE_MENU_ITEM (menuitem), NULL);
 
-  priv = GET_PRIVATE (menuitem);
+  priv = ido_scale_menu_item_get_instance_private (menuitem);
 
   return gtk_label_get_text (GTK_LABEL (priv->secondary_label));
 }
@@ -903,7 +903,7 @@ ido_scale_menu_item_set_primary_label (I
 
   g_return_if_fail (IDO_IS_SCALE_MENU_ITEM (menuitem));
 
-  priv = GET_PRIVATE (menuitem);
+  priv = ido_scale_menu_item_get_instance_private (menuitem);
 
   if (priv->primary_label)
     {
@@ -928,7 +928,7 @@ ido_scale_menu_item_set_secondary_label
 
   g_return_if_fail (IDO_IS_SCALE_MENU_ITEM (menuitem));
 
-  priv = GET_PRIVATE (menuitem);
+  priv = ido_scale_menu_item_get_instance_private (menuitem);
 
   if (priv->secondary_label)
     {
@@ -954,7 +954,7 @@ static void
 default_primary_clicked_handler (IdoScaleMenuItem * item)
 {
   g_debug ("%s: setting scale to lower bound", G_STRFUNC);
-  IdoScaleMenuItemPrivate * priv = GET_PRIVATE (item);
+  IdoScaleMenuItemPrivate * priv = ido_scale_menu_item_get_instance_private (item);
   GtkAdjustment *adj = gtk_range_get_adjustment (GTK_RANGE (priv->scale));
   gtk_adjustment_set_value (adj, gtk_adjustment_get_lower (adj));
 }
@@ -977,7 +977,7 @@ static void
 default_secondary_clicked_handler (IdoScaleMenuItem * item)
 {
   g_debug ("%s: setting scale to upper bound", G_STRFUNC);
-  IdoScaleMenuItemPrivate * priv = GET_PRIVATE (item);
+  IdoScaleMenuItemPrivate * priv = ido_scale_menu_item_get_instance_private (item);
   GtkAdjustment *adj = gtk_range_get_adjustment (GTK_RANGE (priv->scale));
   gtk_adjustment_set_value (adj, gtk_adjustment_get_upper (adj));
 }
@@ -991,7 +991,7 @@ static void
 ido_scale_menu_item_set_value (IdoScaleMenuItem *item,
                                gdouble           value)
 {
-  IdoScaleMenuItemPrivate *priv = GET_PRIVATE (item);
+  IdoScaleMenuItemPrivate *priv = ido_scale_menu_item_get_instance_private (item);
 
   /* set ignore_value_changed to signify to the scale menu item that it
    * should not emit its own value-changed signal, as that should only
Index: ayatana-ido-0.4.4/src/idoswitchmenuitem.c
===================================================================
--- ayatana-ido-0.4.4.orig/src/idoswitchmenuitem.c
+++ ayatana-ido-0.4.4/src/idoswitchmenuitem.c
@@ -40,18 +40,14 @@ struct _IdoSwitchMenuItemPrivate
 ****  Life Cycle
 ***/
 
-G_DEFINE_TYPE (IdoSwitchMenuItem, ido_switch_menu_item, GTK_TYPE_CHECK_MENU_ITEM)
+G_DEFINE_TYPE_WITH_PRIVATE (IdoSwitchMenuItem, ido_switch_menu_item, GTK_TYPE_CHECK_MENU_ITEM)
 
 static void
 ido_switch_menu_item_class_init (IdoSwitchMenuItemClass *klass)
 {
-  GObjectClass * gobject_class;
   GtkWidgetClass * widget_class;
   GtkCheckMenuItemClass * check_class;
 
-  gobject_class = G_OBJECT_CLASS (klass);
-  g_type_class_add_private (gobject_class, sizeof (IdoSwitchMenuItemPrivate));
-
   widget_class = GTK_WIDGET_CLASS (klass);
   widget_class->button_release_event = ido_switch_menu_button_release_event;
 
@@ -64,7 +60,7 @@ ido_switch_menu_item_init (IdoSwitchMenu
 {
   IdoSwitchMenuItemPrivate *priv;
 
-  priv = item->priv = G_TYPE_INSTANCE_GET_PRIVATE (item, IDO_TYPE_SWITCH_MENU_ITEM, IdoSwitchMenuItemPrivate);
+  priv = item->priv = ido_switch_menu_item_get_instance_private (item);
   priv->box = gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0);
   priv->content_area = gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 6);
   priv->switch_w = gtk_switch_new ();
Index: ayatana-ido-0.4.4/src/idotimeline.c
===================================================================
--- ayatana-ido-0.4.4.orig/src/idotimeline.c
+++ ayatana-ido-0.4.4/src/idotimeline.c
@@ -25,14 +25,13 @@
 #include <gtk/gtk.h>
 #include <math.h>
 
-#define IDO_TIMELINE_GET_PRIV(obj) (G_TYPE_INSTANCE_GET_PRIVATE ((obj), IDO_TYPE_TIMELINE, IdoTimelinePriv))
 #define MSECS_PER_SEC 1000
 #define FRAME_INTERVAL(nframes) (MSECS_PER_SEC / nframes)
 #define DEFAULT_FPS 30
 
-typedef struct IdoTimelinePriv IdoTimelinePriv;
+typedef struct _IdoTimelinePrivate IdoTimelinePrivate;
 
-struct IdoTimelinePriv
+struct _IdoTimelinePrivate
 {
   guint duration;
   guint fps;
@@ -81,7 +80,7 @@ static void  ido_timeline_get_property
 static void  ido_timeline_finalize      (GObject *object);
 
 
-G_DEFINE_TYPE (IdoTimeline, ido_timeline, G_TYPE_OBJECT)
+G_DEFINE_TYPE_WITH_CODE (IdoTimeline, ido_timeline, G_TYPE_OBJECT, G_ADD_PRIVATE (IdoTimeline))
 
 
 static void
@@ -193,16 +192,12 @@ ido_timeline_class_init (IdoTimelineClas
 		  g_cclosure_marshal_VOID__DOUBLE,
 		  G_TYPE_NONE, 1,
 		  G_TYPE_DOUBLE);
-
-  g_type_class_add_private (klass, sizeof (IdoTimelinePriv));
 }
 
 static void
 ido_timeline_init (IdoTimeline *timeline)
 {
-  IdoTimelinePriv *priv;
-
-  priv = IDO_TIMELINE_GET_PRIV (timeline);
+  IdoTimelinePrivate *priv = ido_timeline_get_instance_private (timeline);
 
   priv->fps = DEFAULT_FPS;
   priv->duration = 0.0;
@@ -251,11 +246,8 @@ ido_timeline_get_property (GObject    *o
                            GValue     *value,
                            GParamSpec *pspec)
 {
-  IdoTimeline *timeline;
-  IdoTimelinePriv *priv;
-
-  timeline = IDO_TIMELINE (object);
-  priv = IDO_TIMELINE_GET_PRIV (timeline);
+  IdoTimeline *timeline = IDO_TIMELINE (object);
+  IdoTimelinePrivate *priv = ido_timeline_get_instance_private (timeline);
 
   switch (prop_id)
     {
@@ -282,9 +274,8 @@ ido_timeline_get_property (GObject    *o
 static void
 ido_timeline_finalize (GObject *object)
 {
-  IdoTimelinePriv *priv;
-
-  priv = IDO_TIMELINE_GET_PRIV (object);
+  IdoTimeline *timeline = IDO_TIMELINE (object);
+  IdoTimelinePrivate *priv = ido_timeline_get_instance_private (timeline);
 
   if (priv->source_id)
     {
@@ -301,11 +292,10 @@ ido_timeline_finalize (GObject *object)
 static gboolean
 ido_timeline_run_frame (IdoTimeline *timeline)
 {
-  IdoTimelinePriv *priv;
   gdouble delta_progress, progress;
   guint elapsed_time;
 
-  priv = IDO_TIMELINE_GET_PRIV (timeline);
+  IdoTimelinePrivate *priv = ido_timeline_get_instance_private (timeline);
 
   elapsed_time = (guint) (g_timer_elapsed (priv->timer, NULL) * 1000);
   g_timer_start (priv->timer);
@@ -395,12 +385,11 @@ ido_timeline_new_for_screen (guint
 void
 ido_timeline_start (IdoTimeline *timeline)
 {
-  IdoTimelinePriv *priv;
   gboolean enable_animations = FALSE;
 
   g_return_if_fail (IDO_IS_TIMELINE (timeline));
 
-  priv = IDO_TIMELINE_GET_PRIV (timeline);
+  IdoTimelinePrivate *priv = ido_timeline_get_instance_private (timeline);
 
   if (!priv->source_id)
     {
@@ -446,11 +435,9 @@ ido_timeline_start (IdoTimeline *timelin
 void
 ido_timeline_pause (IdoTimeline *timeline)
 {
-  IdoTimelinePriv *priv;
-
   g_return_if_fail (IDO_IS_TIMELINE (timeline));
 
-  priv = IDO_TIMELINE_GET_PRIV (timeline);
+  IdoTimelinePrivate *priv = ido_timeline_get_instance_private (timeline);
 
   if (priv->source_id)
     {
@@ -470,11 +457,9 @@ ido_timeline_pause (IdoTimeline *timelin
 void
 ido_timeline_rewind (IdoTimeline *timeline)
 {
-  IdoTimelinePriv *priv;
-
   g_return_if_fail (IDO_IS_TIMELINE (timeline));
 
-  priv = IDO_TIMELINE_GET_PRIV (timeline);
+  IdoTimelinePrivate *priv = ido_timeline_get_instance_private (timeline);
 
   if (ido_timeline_get_direction(timeline) != IDO_TIMELINE_DIRECTION_FORWARD)
     priv->progress = priv->last_progress = 1.;
@@ -502,11 +487,9 @@ ido_timeline_rewind (IdoTimeline *timeli
 gboolean
 ido_timeline_is_running (IdoTimeline *timeline)
 {
-  IdoTimelinePriv *priv;
-
   g_return_val_if_fail (IDO_IS_TIMELINE (timeline), FALSE);
 
-  priv = IDO_TIMELINE_GET_PRIV (timeline);
+  IdoTimelinePrivate *priv = ido_timeline_get_instance_private (timeline);
 
   return (priv->source_id != 0);
 }
@@ -522,11 +505,9 @@ ido_timeline_is_running (IdoTimeline *ti
 guint
 ido_timeline_get_fps (IdoTimeline *timeline)
 {
-  IdoTimelinePriv *priv;
-
   g_return_val_if_fail (IDO_IS_TIMELINE (timeline), 1);
 
-  priv = IDO_TIMELINE_GET_PRIV (timeline);
+  IdoTimelinePrivate *priv = ido_timeline_get_instance_private (timeline);
   return priv->fps;
 }
 
@@ -542,12 +523,10 @@ void
 ido_timeline_set_fps (IdoTimeline *timeline,
                       guint        fps)
 {
-  IdoTimelinePriv *priv;
-
   g_return_if_fail (IDO_IS_TIMELINE (timeline));
   g_return_if_fail (fps > 0);
 
-  priv = IDO_TIMELINE_GET_PRIV (timeline);
+  IdoTimelinePrivate *priv = ido_timeline_get_instance_private (timeline);
 
   /* Coverity CID: 12650/12651: guard against division by 0. */
   priv->fps = fps > 0 ? fps : priv->fps;
@@ -575,11 +554,9 @@ ido_timeline_set_fps (IdoTimeline *timel
 gboolean
 ido_timeline_get_loop (IdoTimeline *timeline)
 {
-  IdoTimelinePriv *priv;
-
   g_return_val_if_fail (IDO_IS_TIMELINE (timeline), FALSE);
 
-  priv = IDO_TIMELINE_GET_PRIV (timeline);
+  IdoTimelinePrivate *priv = ido_timeline_get_instance_private (timeline);
   return priv->loop;
 }
 
@@ -595,11 +572,9 @@ void
 ido_timeline_set_loop (IdoTimeline *timeline,
                        gboolean     loop)
 {
-  IdoTimelinePriv *priv;
-
   g_return_if_fail (IDO_IS_TIMELINE (timeline));
 
-  priv = IDO_TIMELINE_GET_PRIV (timeline);
+  IdoTimelinePrivate *priv = ido_timeline_get_instance_private (timeline);
 
   if (loop != priv->loop)
     {
@@ -619,11 +594,9 @@ void
 ido_timeline_set_duration (IdoTimeline *timeline,
                            guint        duration)
 {
-  IdoTimelinePriv *priv;
-
   g_return_if_fail (IDO_IS_TIMELINE (timeline));
 
-  priv = IDO_TIMELINE_GET_PRIV (timeline);
+  IdoTimelinePrivate *priv = ido_timeline_get_instance_private (timeline);
 
   if (duration != priv->duration)
     {
@@ -643,11 +616,9 @@ ido_timeline_set_duration (IdoTimeline *
 guint
 ido_timeline_get_duration (IdoTimeline *timeline)
 {
-  IdoTimelinePriv *priv;
-
   g_return_val_if_fail (IDO_IS_TIMELINE (timeline), 0);
 
-  priv = IDO_TIMELINE_GET_PRIV (timeline);
+  IdoTimelinePrivate *priv = ido_timeline_get_instance_private (timeline);
 
   return priv->duration;
 }
@@ -663,11 +634,9 @@ void
 ido_timeline_set_direction (IdoTimeline          *timeline,
                             IdoTimelineDirection  direction)
 {
-  IdoTimelinePriv *priv;
-
   g_return_if_fail (IDO_IS_TIMELINE (timeline));
 
-  priv = IDO_TIMELINE_GET_PRIV (timeline);
+  IdoTimelinePrivate *priv = ido_timeline_get_instance_private (timeline);
 
   if (direction != priv->direction)
     {
@@ -687,11 +656,9 @@ ido_timeline_set_direction (IdoTimeline
 IdoTimelineDirection
 ido_timeline_get_direction (IdoTimeline *timeline)
 {
-  IdoTimelinePriv *priv;
-
   g_return_val_if_fail (IDO_IS_TIMELINE (timeline), IDO_TIMELINE_DIRECTION_FORWARD);
 
-  priv = IDO_TIMELINE_GET_PRIV (timeline);
+  IdoTimelinePrivate *priv = ido_timeline_get_instance_private (timeline);
   return priv->direction;
 }
 
@@ -706,12 +673,10 @@ void
 ido_timeline_set_screen (IdoTimeline *timeline,
                          GdkScreen   *screen)
 {
-  IdoTimelinePriv *priv;
-
   g_return_if_fail (IDO_IS_TIMELINE (timeline));
   g_return_if_fail (GDK_IS_SCREEN (screen));
 
-  priv = IDO_TIMELINE_GET_PRIV (timeline);
+  IdoTimelinePrivate *priv = ido_timeline_get_instance_private (timeline);
 
   if (priv->screen)
     g_object_unref (priv->screen);
@@ -732,11 +697,9 @@ ido_timeline_set_screen (IdoTimeline *ti
 GdkScreen *
 ido_timeline_get_screen (IdoTimeline *timeline)
 {
-  IdoTimelinePriv *priv;
-
   g_return_val_if_fail (IDO_IS_TIMELINE (timeline), NULL);
 
-  priv = IDO_TIMELINE_GET_PRIV (timeline);
+  IdoTimelinePrivate *priv = ido_timeline_get_instance_private (timeline);
   return priv->screen;
 }
 
@@ -751,11 +714,9 @@ ido_timeline_get_screen (IdoTimeline *ti
 gdouble
 ido_timeline_get_progress (IdoTimeline *timeline)
 {
-  IdoTimelinePriv *priv;
-
   g_return_val_if_fail (IDO_IS_TIMELINE (timeline), 0.);
 
-  priv = IDO_TIMELINE_GET_PRIV (timeline);
+  IdoTimelinePrivate *priv = ido_timeline_get_instance_private (timeline);
   return priv->progress;
 }
 
@@ -769,11 +730,9 @@ ido_timeline_get_progress (IdoTimeline *
 void
 ido_timeline_set_progress (IdoTimeline *timeline, gdouble progress)
 {
-  IdoTimelinePriv *priv;
-
   g_return_if_fail (IDO_IS_TIMELINE (timeline));
 
-  priv = IDO_TIMELINE_GET_PRIV (timeline);
+  IdoTimelinePrivate *priv = ido_timeline_get_instance_private (timeline);
 
   if (priv->source_id)
     {
Index: ayatana-ido-0.4.4/src/idotimestampmenuitem.c
===================================================================
--- ayatana-ido-0.4.4.orig/src/idotimestampmenuitem.c
+++ ayatana-ido-0.4.4/src/idotimestampmenuitem.c
@@ -47,7 +47,7 @@ struct _IdoTimeStampMenuItemPrivate
 
 typedef IdoTimeStampMenuItemPrivate priv_t;
 
-G_DEFINE_TYPE (IdoTimeStampMenuItem,
+G_DEFINE_TYPE_WITH_PRIVATE (IdoTimeStampMenuItem,
                ido_time_stamp_menu_item,
                IDO_TYPE_BASIC_MENU_ITEM);
 
@@ -136,8 +136,6 @@ ido_time_stamp_menu_item_class_init (Ido
   GParamFlags prop_flags;
   GObjectClass * gobject_class = G_OBJECT_CLASS (klass);
 
-  g_type_class_add_private (klass, sizeof (IdoTimeStampMenuItemPrivate));
-
   gobject_class->get_property = my_get_property;
   gobject_class->set_property = my_set_property;
   gobject_class->dispose = my_dispose;
@@ -167,10 +165,7 @@ ido_time_stamp_menu_item_class_init (Ido
 static void
 ido_time_stamp_menu_item_init (IdoTimeStampMenuItem *self)
 {
-  self->priv = G_TYPE_INSTANCE_GET_PRIVATE (self,
-                                            IDO_TYPE_TIME_STAMP_MENU_ITEM,
-                                            IdoTimeStampMenuItemPrivate);
-
+  self->priv = ido_time_stamp_menu_item_get_instance_private (self);
 }
 
 static void
Index: ayatana-ido-0.4.4/src/idousermenuitem.c
===================================================================
--- ayatana-ido-0.4.4.orig/src/idousermenuitem.c
+++ ayatana-ido-0.4.4/src/idousermenuitem.c
@@ -54,7 +54,7 @@ struct _IdoUserMenuItemPrivate
   GIcon * icon;
 };
 
-G_DEFINE_TYPE (IdoUserMenuItem, ido_user_menu_item, GTK_TYPE_MENU_ITEM);
+G_DEFINE_TYPE_WITH_PRIVATE (IdoUserMenuItem, ido_user_menu_item, GTK_TYPE_MENU_ITEM);
 
 /* Prototypes */
 static gboolean ido_user_menu_item_primitive_draw_cb_gtk_3 (GtkWidget * image,
@@ -156,8 +156,6 @@ ido_user_menu_item_class_init (IdoUserMe
   GParamFlags prop_flags;
   GObjectClass * gobject_class = G_OBJECT_CLASS (klass);
 
-  g_type_class_add_private (klass, sizeof (IdoUserMenuItemPrivate));
-
   gobject_class->get_property = my_get_property;
   gobject_class->set_property = my_set_property;
   gobject_class->dispose = my_dispose;
@@ -199,9 +197,7 @@ ido_user_menu_item_init (IdoUserMenuItem
 {
   IdoUserMenuItemPrivate * priv;
 
-  self->priv = G_TYPE_INSTANCE_GET_PRIVATE (self,
-                                            IDO_USER_MENU_ITEM_TYPE,
-                                            IdoUserMenuItemPrivate);
+  self->priv = ido_user_menu_item_get_instance_private (self);
 
   priv = self->priv;
 
