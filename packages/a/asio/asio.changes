-------------------------------------------------------------------
Fri Sep 20 08:08:33 UTC 2019 - ecsos@opensuse.org

- Version update to 1.12.2:
  * Fixed a problem with the detection of std::future availability with libstdc++.
  * Fixed compile error in regex overload of read_until.
  * Fixed a timer heap corruption issue that can occur when moving a cancelled timer.
  * Fixed detection of std::experimental::string_view and std::string_view with newer clang/libc++.
  * Fixed MSVC version detection for availability of std::invoke_result.
  * Fixed the buffer sequence traits to test the new requirements, if decltype is available.
  * Fixed an MSVC issue when building with exceptions disabled.
  * Added SSL context options for TLS v1.3.
  * Added a compile-time test for TLS v1 support.
  * Fixed the macro used to test for TLS v1.2 support.
  * Prevented global objects from being created once per thread on Windows.
  * Fixed a crash when using size(), max_size() or empty() on default-constructed resolver results.
  * Changed to move the return value in basic_resolver_results::begin() to avoid copying.
  * Enabled move support for the Intel Compiler.
  * Fixed std::string_view detection issue when using clang-cl.
  * Fixed the handler tracking operation name for io_context::executor_type::dispatch.
  * Fixed a buffer overflow that could occur when parsing an address string with a 64-bit scope id.
  * Added examples showing how to write composed operations.
  * Added C++11 versions of the Timeouts, Timers, SOCKS4 and SSL examples.
  * Fixed minor issues in documentation and examples.

-------------------------------------------------------------------
Wed Apr 18 13:25:43 UTC 2018 - tchvatal@suse.com

- Version update to 1.12.1:
  * Includes changes from 1.11.0
  * Added missing const qualifier to basic_socket_acceptor::get_option.
  * Worked around a parsing error that occurs with some versions of gcc.
  * Fixed broken code samples in tutorial.
  * Added new experimental features. (Note that "experimental" features may be changed without notice in subsequent releases.)
    * Added experimental::detached completion token.
    * Added experimental::redirect_error completion token.
    * Added experimental::co_spawn facility for integration with the coroutines technical specification.
  * Updated timeout examples to use latest features.
    * Used asio::steady_timer rather than asio::deadline_timer.
    * Used asio::dynamic_buffer rather than asio::streambuf.
    * Used timed asio::io_context::run_for() function for blocking clients.
    * Added example showing a custom completion token for blocking with timeouts.
  * Fixed unit tests to compile when (BOOST_)ASIO_NO_DEPRECATED is defined.
  * Changed socket iostreams to use chrono by default, to fix compatibility with the Networking TS. Define (BOOST_)ASIO_USE_BOOST_DATE_TIME_FOR_SOCKET_IOSTREAM to enable the old Boost.Date_Time interface in basic_socket_streambuf and basic_socket_iostream.
  * Updated examples to use chrono rather than Boost.Date_Time.
  * Fixed an incorrect member function detector in the is_dynamic_buffer trait.
  * Fixed an async_result incompatibility with deprecated handler_type.
  * Added a missing move optimisation in the SSL stream implementation.
  * Fixed incorrect basic_resolver_results::value_type typedef.
  * Fixed a compile error with some OpenSSL versions when SSL_OP_NO_COMPRESSION is defined.
  * Changed add_certificate_authority to process multiple certificates in a bundle.
  * Eliminated deprecation warning with MSVC by using std::invoke_result rather than std::result_of.
  * Changed to use std::string_view for C++17 or later, and std::experimental::string_view for C++14. Define the preprocessor macro (BOOST_)ASIO_DISABLE_STD_STRING_VIEW to force the use of std::experimental::string_view (assuming it is available) when compiling in C++17 mode.
  * Ensured DynamicBuffer template arguments are decayed before using in enable_if tests.
  * Changed documentation to distinguish legacy completion handlers (which are still required to be CopyConstructible) from new MoveConstructible handlers.
  * Suppressed a discarded return value warning in the buffer debugging support.
  * Fixed basic_yield_context to work with completion signatures containing reference parameters.
  * Ensured that stackful coroutines launched using spawn() correctly store decayed copies of their function and handler arguments.
  * Fixed some compatibility issues with Android.
  * Fixed some minor portability issues in examples.
  * Completed the interface changes to reflect the Networking TS (N4656).
    * See the list of new interfaces and, where applicable, the corresponding old interfaces that have been superseded.
    * The service template parameters, and the corresponding classes, are disabled by default. For example, instead of basic_socket<Protocol, SocketService> we now have simply basic_socket<Protocol>. The old interface can be enabled by defining the (BOOST_)ASIO_ENABLE_OLD_SERVICES macro.
  * Added support for customised handler tracking.
  * Added reactor-related (i.e. descriptor readiness) events to handler tracking.
  * Added special concurrency hint values that may be used to disable locking on a per io_context basis.
  * Enabled perfect forwarding for the first ssl::stream<> constructor argument.
  * Added ability to release ownership of the underlying native socket. (Requires Windows 8.1 or later when using the I/O completion port backend.)

-------------------------------------------------------------------
Tue Dec  5 13:58:10 UTC 2017 - suse+build@de-korte.org

- Update to stable version 1.10.8
  * More recent than 1.11.0 (development release).
  * Release notes unavailable.
  * Fixes building with openssl-1.1.0.

-------------------------------------------------------------------
Wed Feb  1 09:57:03 UTC 2017 - adam.majer@suse.de

- use individual libboost-*-devel packages instead of boost-devel

-------------------------------------------------------------------
Sat Mar 21 11:22:13 UTC 2015 - mpluskal@suse.com

- Update to 1.11.0
  * Implemented changes to substantially reflect the Networking 
    Library Proposal (N4370).
  * Added a new, executor-aware thread_pool class.
  * Changed spawn() to be executor-aware.
  * Added a new spawn() overload that takes only a function object.
  * Changed spawn() and yield_context to permit nested calls to 
    the completion handler.
  * Removed previously deprecated functions.
  * Added options for disabling TLS v1.1 and v1.2.
  * Changed the SSL wrapper to call the password callback when 
    loading an in-memory key.
  * Changed the tutorial to use std::endl to ensure output is flushed.
  * Fixed false SSL error reports by ensuring that the SSL error 
    queue is cleared prior to each operation.
  * Fixed an ssl::stream<> bug that may result in spurious 
    'short read' errors.
  * Enabled perfect forwarding for the first ssl::stream<> 
    constructor argument.
  * Added standalone Asio support for Clang when used with 
    libstdc++ and C++11.
  * Fixed an unsigned integer overflow reported by Clang's integer 
    sanitizer.
  * Added support for move-only return types when using a 
    yield_context object with asynchronous operations.
  * Ensured errors generated by Windows' ConnectEx function are 
    mapped to their portable equivalents.
  * Changed multicast test to treat certain join_group failures 
    as non-fatal.
- Remove no longer needed asio-no-multicast-test.patch

-------------------------------------------------------------------
Sun Dec 21 17:41:01 UTC 2014 - wr@rosenauer.org

- remove multicast check from testsuite as it's failing in OBS
  (asio-no-multicast-test.patch)

-------------------------------------------------------------------
Fri Dec  5 08:15:24 UTC 2014 - tchvatal@suse.com

- Enable testsuite
- Version bump to 1.10.4:
  * for full list of changes please visit
    http://think-async.com/Asio/asio-1.10.4/doc/asio/history.html#asio.history.asio_1_10_4

-------------------------------------------------------------------
Tue Jul 29 05:30:14 UTC 2014 - wr@rosenauer.org

- Update to stable version 1.10.2
  * for full list of changes please visit
    http://think-async.com/Asio/asio-1.10.2/doc/asio/history.html#asio.history.asio_1_10_2

-------------------------------------------------------------------
Sun Mar 16 22:44:08 UTC 2014 - wr@rosenauer.org

- Update to stable version 1.10.1
  * many changes as outlined here
    http://think-async.com/Asio/asio-1.10.1/doc/asio/history.html#asio.history.asio_1_10_1

-------------------------------------------------------------------
Sat Sep 17 12:24:11 UTC 2011 - jengelh@medozas.de

- Remove redundant tags/sections from specfile
- Add missing make call
- Use %_smp_mflags for parallel build

-------------------------------------------------------------------
Thu Jun 23 12:32:31 UTC 2011 - vlado.paskov@gmail.com

- Update to version 1.5.3
  * Added a new, completely rewritten SSL implementation. The new
    implementation compiles faster, shows substantially improved
    performance, and supports custom memory allocation and handler
    invocation. It includes new API features such as certificate
    verification callbacks and has improved error reporting. The new
    implementation is source-compatible with the old for most uses.
    However, if necessary, the old implementation may still be used by
    defining `(BOOST_)ASIO_ENABLE_OLD_SSL`. 
  * Added new `asio::buffer()` overloads for `std::array`, when
    available. The support is automatically enabled when compiling in
    -std=c++0x mode on g++ 4.3 or higher, or when using MSVC 10.
    The support may be explicitly enabled by defining
    `(BOOST_)ASIO_HAS_STD_ARRAY`, or disabled by defining
    `(BOOST_)ASIO_DISABLE_STD_ARRAY`
  * Changed to use the C++0x standard library templates `array`,
    `shared_ptr`, `weak_ptr` and `atomic` when they are available,
    rather than the Boost equivalents.
  * Support for `std::error_code` and `std::system_error` is no longer
    enabled by default for g++ 4.5, as that compiler's standard
    library does not implement `std::system_error::what()` correctly.

-------------------------------------------------------------------
Fri May 22 15:18:47 CEST 2009 - vuntz@novell.com

- Update to version 1.4.1. There's no NEWS/ChangeLog, but the 1.3
  development cycle brought those new features:
  + Enhanced CompletionCondition concept.
  + Wrapper class for Windows overlapped I/O.
  + Eventfd support on Linux.
  + Const overloads of lowest_layer().
  + Thread-safe synchronous socket operations.
  + Lazy initialisation of the io_service reactor task.
  + Bounds checking in ip::address_v4 and ip::address_v6.
- Drop asio-gcc43.patch: fixed upstream.

-------------------------------------------------------------------
Wed Apr 29 01:37:10 CEST 2009 - ro@suse.de

- fix build (add missing includes) 

-------------------------------------------------------------------
Wed Jan 14 11:49:51 EST 2009 - hfiguiere@suse.de

- Update to 1.2.0
  * Support for UNIX domain sockets.
  * Wrapper classes for POSIX stream-oriented file descriptors.
  * Reactor-style ready-to-read/write operations.
  * Add the ability to disable uses of the typeid keyword in asio by
    defining BOOST_NO_TYPEID or (BOOST_)ASIO_NO_TYPEID.
  * Add a new "porthopper" example illustrating mixed synchronous and
    asynchronous operations, and how to use Boost.Lambda with asio.
  * Rework the "invocation" example to better show how handler
    invocation hooks can be used with a variety of asynchronous
    operations.
  * Improved efficiency of basic_streambuf::consume() 
  * Fixed infinite recursion in ssl::stream's shutdown()
  * Fixed a memory leak in use_tmp_dh_file().
  * Fixed a tight spin on epoll (or /dev/poll) that occurs when both
    EPOLLERR and EPOLLHUP events are reported for a descriptor and there
    are no pending operations.
  * Included CREAD and CLOCAL in the default flags for serial ports.
  * Various documentation improvements.

-------------------------------------------------------------------
Mon Aug 11 18:45:43 CEST 2008 - ro@suse.de

- do not redefine debug_package
- use nodebuginfo instead and set debuginfo to no in PDB 

-------------------------------------------------------------------
Sat Apr  5 19:07:33 EDT 2008 - hfiguiere@suse.de

- Initial checkin
