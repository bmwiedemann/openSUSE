Index: b/src/widgets/NumericTextCtrl.cpp
===================================================================
--- a/src/widgets/NumericTextCtrl.cpp	2020-06-19 17:16:47.000000000 +0200
+++ b/src/widgets/NumericTextCtrl.cpp	2020-06-28 11:27:53.709676198 +0200
@@ -654,6 +654,7 @@ static const BuiltinFormatString Bandwid
          case NumericConverter::BANDWIDTH:
             return WXSIZEOF(BandwidthConverterFormats_);
       }
+      return WXSIZEOF(BandwidthConverterFormats_);
    }
 }
 
Index: b/lib-src/libnyquist/nyquist/xlisp/xlbfun.c
===================================================================
--- a/lib-src/libnyquist/nyquist/xlisp/xlbfun.c	2020-06-19 17:16:47.000000000 +0200
+++ b/lib-src/libnyquist/nyquist/xlisp/xlbfun.c	2020-06-28 11:27:53.773678563 +0200
@@ -603,7 +603,10 @@ LVAL xcleanup(void)
 {
     xllastarg();
     xlcleanup();
-    /* compiler might (wrongly) complain there is no return value */
+    /* this point will never be reached because xlcleanup() does a
+    longjmp(). The return is added to avoid false positive
+    error messages from static analyzers and compilers */
+    return (NIL);
 }
 
 /* xtoplevel - special form 'top-level' */
Index: b/lib-src/portsmf/allegro.cpp
===================================================================
--- a/lib-src/portsmf/allegro.cpp	2020-06-19 17:16:47.000000000 +0200
+++ b/lib-src/portsmf/allegro.cpp	2020-06-28 12:38:54.119640838 +0200
@@ -2885,6 +2885,9 @@ Alg_event_ptr &Alg_seq::operator[](int i
         tr++;
     }
     assert(false); // out of bounds
+    Alg_event_ptr ab_track;
+    return ab_track; // Fix false positive error: control reaches end of non-void function [-Werror=return-type]
+    // Ignores the assert A gcc bug?
 }
 #pragma warning(default: 4715)
 
Index: b/lib-src/libnyquist/nyquist/cmupv/src/cmupv.c
===================================================================
--- a/lib-src/libnyquist/nyquist/cmupv/src/cmupv.c	2020-06-19 17:16:47.000000000 +0200
+++ b/lib-src/libnyquist/nyquist/cmupv/src/cmupv.c	2020-06-28 11:54:14.043499973 +0200
@@ -596,6 +596,7 @@ double pv_get_effective_pos(Phase_vocode
         return -(pv->ratio * pv->fftsize / 2.0);
     } else { // I can't think of any other case.
         assert(FALSE);
+	return -(pv->ratio * pv->fftsize / 2.0); //Another false positive ignoring assert as a return value
     }
 }
 
