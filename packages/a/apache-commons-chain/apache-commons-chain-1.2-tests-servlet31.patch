diff -Nru commons-chain-1.2-src/src/test/org/apache/commons/chain/web/servlet/MockHttpServletRequest.java commons-chain-1.2-src.servlet/src/test/org/apache/commons/chain/web/servlet/MockHttpServletRequest.java
--- commons-chain-1.2-src/src/test/org/apache/commons/chain/web/servlet/MockHttpServletRequest.java	2008-05-29 18:43:14.000000000 +0200
+++ commons-chain-1.2-src.servlet/src/test/org/apache/commons/chain/web/servlet/MockHttpServletRequest.java	2015-06-17 03:36:16.057356781 +0200
@@ -20,12 +20,23 @@
 import org.apache.commons.chain.web.MockEnumeration;
 import org.apache.commons.chain.web.MockPrincipal;
 
+import javax.servlet.AsyncContext;
+import javax.servlet.DispatcherType;
 import javax.servlet.RequestDispatcher;
+import javax.servlet.ServletContext;
+import javax.servlet.ServletException;
 import javax.servlet.ServletInputStream;
+import javax.servlet.ServletRequest;
+import javax.servlet.ServletResponse;
 import javax.servlet.http.Cookie;
 import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
 import javax.servlet.http.HttpSession;
+import javax.servlet.http.Part;
+import javax.servlet.http.HttpUpgradeHandler;
 import java.io.BufferedReader;
+import java.io.IOException;
+import java.lang.IllegalStateException;
 import java.security.Principal;
 import java.util.*;
 
@@ -466,5 +477,76 @@
         throw new UnsupportedOperationException();
     }
 
+    public Part getPart(String name) throws IOException, IllegalStateException, ServletException {
+        // TODO
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    public Collection<Part> getParts() throws IOException, IllegalStateException, ServletException {
+        // TODO
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    public void logout() throws ServletException {
+        // TODO
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    public void login(String username, String password) throws ServletException {
+        // TODO
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    public boolean authenticate(HttpServletResponse response) throws IOException, ServletException {
+        // TODO
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    public DispatcherType getDispatcherType() {
+        // TODO
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    public AsyncContext getAsyncContext() {
+        // TODO
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    public boolean isAsyncSupported() {
+        // TODO
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    public boolean isAsyncStarted() {
+        // TODO
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    public AsyncContext startAsync(ServletRequest servletRequest, ServletResponse servletResponse) {
+        // TODO
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    public AsyncContext startAsync() {
+        // TODO
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    public ServletContext getServletContext() {
+        // TODO
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    public <T extends HttpUpgradeHandler> T upgrade(Class<T> arg0) throws IOException, ServletException {
+        throw new RuntimeException("Not implemented");
+    }
+
+    public String changeSessionId() {
+        throw new RuntimeException("Not implemented");
+    }
+
+    public long getContentLengthLong() {
+        throw new RuntimeException("Not implemented");
+    }
 
 }
diff -Nru commons-chain-1.2-src/src/test/org/apache/commons/chain/web/servlet/MockHttpServletResponse.java commons-chain-1.2-src.servlet/src/test/org/apache/commons/chain/web/servlet/MockHttpServletResponse.java
--- commons-chain-1.2-src/src/test/org/apache/commons/chain/web/servlet/MockHttpServletResponse.java	2008-05-29 18:43:14.000000000 +0200
+++ commons-chain-1.2-src.servlet/src/test/org/apache/commons/chain/web/servlet/MockHttpServletResponse.java	2015-06-17 03:17:13.646842003 +0200
@@ -17,11 +17,13 @@
 package org.apache.commons.chain.web.servlet;
 
 
+import javax.servlet.ServletException;
 import javax.servlet.ServletOutputStream;
 import javax.servlet.http.Cookie;
 import javax.servlet.http.HttpServletResponse;
 import java.io.IOException;
 import java.io.PrintWriter;
+import java.util.Collection;
 import java.util.Locale;
 
 
@@ -205,5 +207,33 @@
     this.locale = locale;
     }
 
+    public Collection<String> getHeaderNames() {
+        // TODO
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    public String getHeader(String name) {
+        // TODO
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    public Collection<String> getHeaders(String name) {
+        // TODO
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    public void logout() throws ServletException {
+        // TODO
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    public int getStatus() {
+        // TODO
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    public void setContentLengthLong(long arg0) {
+        throw new RuntimeException("Not implemented");
+    }
 
 }
diff -Nru commons-chain-1.2-src/src/test/org/apache/commons/chain/web/servlet/MockServletContext.java commons-chain-1.2-src.servlet/src/test/org/apache/commons/chain/web/servlet/MockServletContext.java
--- commons-chain-1.2-src/src/test/org/apache/commons/chain/web/servlet/MockServletContext.java	2008-05-29 18:43:13.000000000 +0200
+++ commons-chain-1.2-src.servlet/src/test/org/apache/commons/chain/web/servlet/MockServletContext.java	2015-06-17 03:16:59.146531770 +0200
@@ -17,19 +17,33 @@
 package org.apache.commons.chain.web.servlet;
 
 
+import javax.servlet.Filter;
+import javax.servlet.FilterRegistration;
+import javax.servlet.FilterRegistration.Dynamic;
 import javax.servlet.RequestDispatcher;
 import javax.servlet.Servlet;
 import javax.servlet.ServletContext;
 import javax.servlet.ServletException;
+import javax.servlet.SessionCookieConfig;
+import javax.servlet.ServletRegistration;
+import javax.servlet.SessionTrackingMode;
+import javax.servlet.descriptor.JspConfigDescriptor;
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
 import java.io.InputStream;
+import java.lang.Class;
+import java.lang.ClassLoader;
+import java.lang.IllegalArgumentException;
+import java.lang.IllegalStateException;
+import java.lang.UnsupportedOperationException;
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.util.Enumeration;
+import java.util.EventListener;
 import java.util.Hashtable;
+import java.util.Map;
 import java.util.Set;
 
 
@@ -149,5 +163,143 @@
         attributes.put(name, value);
     }
 
+    public String getContextPath() {
+        // TODO
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    public JspConfigDescriptor getJspConfigDescriptor() {
+        // TODO
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    public ClassLoader getClassLoader() {
+        // TODO
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    public void declareRoles(String... roleNames) {
+        // TODO
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    public <T extends EventListener> T createListener(Class<T> c) throws ServletException {
+        // TODO
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    public <T extends EventListener> void addListener(T t) {
+        // TODO
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    public void addListener(String className) {
+        // TODO
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    public void addListener(Class<? extends EventListener> listenerClass) {
+        // TODO
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    public Set<SessionTrackingMode> getEffectiveSessionTrackingModes() {
+        // TODO
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    public Set<SessionTrackingMode> getDefaultSessionTrackingModes() {
+        // TODO
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    public void setSessionTrackingModes(Set<SessionTrackingMode> sessionTrackingModes) throws IllegalStateException, IllegalArgumentException {
+        // TODO
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    public SessionCookieConfig getSessionCookieConfig() {
+        // TODO
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    public Map<String,? extends FilterRegistration> getFilterRegistrations() {
+        // TODO
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    public FilterRegistration getFilterRegistration(String filterName) {
+        // TODO
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    public <T extends Filter> T createFilter(Class<T> c) throws ServletException {
+        // TODO
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    public FilterRegistration.Dynamic addFilter(String filterName, Class<? extends Filter> filterClass) {
+        // TODO
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    public FilterRegistration.Dynamic addFilter(String filterName, Filter filter) {
+        // TODO
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    public FilterRegistration.Dynamic addFilter(String filterName, String className) {
+        // TODO
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    public Map<String,? extends ServletRegistration> getServletRegistrations() {
+        // TODO
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    public ServletRegistration getServletRegistration(String servletName) {
+        // TODO
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    public <T extends Servlet> T createServlet(Class<T> c) throws ServletException {
+        // TODO
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    public ServletRegistration.Dynamic addServlet(String servletName, Servlet servlet) {
+        // TODO
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    public ServletRegistration.Dynamic addServlet(String servletName, Class<? extends Servlet> servletClass) {
+        // TODO
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    public ServletRegistration.Dynamic addServlet(String servletName, String className) {
+        // TODO
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    public boolean setInitParameter(String name, String value) {
+        // TODO
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    public int getEffectiveMinorVersion() {
+        // TODO
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    public int getEffectiveMajorVersion() {
+        // TODO
+        throw new UnsupportedOperationException("Not supported.");
+    }
+
+    public String getVirtualServerName() {
+        throw new RuntimeException("Not implemented");
+    }
 
 }
