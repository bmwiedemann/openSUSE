--- atinject-1/src/javax/inject/Inject.java	2022-03-19 14:42:45.820084838 +0100
+++ atinject-1/src/javax/inject/Inject.java	2022-03-19 17:20:21.093084432 +0100
@@ -36,23 +36,23 @@
  * zero or more dependencies as arguments. {@code @Inject} can apply to at most
  * one constructor per class.
  *
- * <p><tt><blockquote style="padding-left: 2em; text-indent: -2em;">@Inject
+ * <p><blockquote style="padding-left: 2em; text-indent: -2em;"><code>@Inject
  *       <i>ConstructorModifiers<sub>opt</sub></i>
  *       <i>SimpleTypeName</i>(<i>FormalParameterList<sub>opt</sub></i>)
  *       <i>Throws<sub>opt</sub></i>
- *       <i>ConstructorBody</i></blockquote></tt>
+ *       <i>ConstructorBody</i></code></blockquote>
  *
  * <p>{@code @Inject} is optional for public, no-argument constructors when no
  * other constructors are present. This enables injectors to invoke default
  * constructors.
  *
- * <p><tt><blockquote style="padding-left: 2em; text-indent: -2em;">
+ * <blockquote style="padding-left: 2em; text-indent: -2em;"><code>
  *       {@literal @}Inject<sub><i>opt</i></sub>
  *       <i>Annotations<sub>opt</sub></i>
  *       public
  *       <i>SimpleTypeName</i>()
  *       <i>Throws<sub>opt</sub></i>
- *       <i>ConstructorBody</i></blockquote></tt>
+ *       <i>ConstructorBody</i></code></blockquote>
  *
  * <p>Injectable fields:
  * <ul>
@@ -60,10 +60,10 @@
  *   <li>are not final.
  *   <li>may have any otherwise valid name.</li></ul>
  *
- * <p><tt><blockquote style="padding-left: 2em; text-indent: -2em;">@Inject
+ * <blockquote style="padding-left: 2em; text-indent: -2em;"><code>@Inject
  *       <i>FieldModifiers<sub>opt</sub></i>
  *       <i>Type</i>
- *       <i>VariableDeclarators</i>;</blockquote></tt>
+ *       <i>VariableDeclarators</i>;</code></blockquote>
  *
  * <p>Injectable methods:
  * <ul>
@@ -74,12 +74,12 @@
  *   <li>may have any otherwise valid name.</li>
  *   <li>accept zero or more dependencies as arguments.</li></ul>
  *
- * <p><tt><blockquote style="padding-left: 2em; text-indent: -2em;">@Inject
+ * <p><blockquote style="padding-left: 2em; text-indent: -2em;"><code>@Inject
  *       <i>MethodModifiers<sub>opt</sub></i>
  *       <i>ResultType</i>
  *       <i>Identifier</i>(<i>FormalParameterList<sub>opt</sub></i>)
  *       <i>Throws<sub>opt</sub></i>
- *       <i>MethodBody</i></blockquote></tt>
+ *       <i>MethodBody</i></code></blockquote>
  *
  * <p>The injector ignores the result of an injected method, but
  * non-{@code void} return types are allowed to support use of the method in
@@ -107,11 +107,11 @@
  *
  * <p>Injection of members annotated with {@code @Inject} is required. While an
  * injectable member may use any accessibility modifier (including
- * <tt>private</tt>), platform or injector limitations (like security
+ * <code>private</code>), platform or injector limitations (like security
  * restrictions or lack of reflection support) might preclude injection
  * of non-public members.
  *
- * <h3>Qualifiers</h3>
+ * <h2>Qualifiers</h2>
  *
  * <p>A {@linkplain Qualifier qualifier} may annotate an injectable field
  * or parameter and, combined with the type, identify the implementation to
--- atinject-1/src/javax/inject/package-info.java	2022-03-19 14:42:45.820084838 +0100
+++ atinject-1/src/javax/inject/package-info.java	2022-03-19 17:21:38.093548148 +0100
@@ -21,8 +21,8 @@
  * locators (e.g., JNDI).&nbsp;This process, known as <i>dependency
  * injection</i>, is beneficial to most nontrivial applications.
  *
- * <p>Many types depend on other types. For example, a <tt>Stopwatch</tt> might
- * depend on a <tt>TimeSource</tt>. The types on which a type depends are
+ * <p>Many types depend on other types. For example, a <code>Stopwatch</code> might
+ * depend on a <code>TimeSource</code>. The types on which a type depends are
  * known as its <i>dependencies</i>. The process of finding an instance of a
  * dependency to use at run time is known as <i>resolving</i> the dependency.
  * If no such instance can be found, the dependency is said to be
@@ -100,7 +100,7 @@
  *
  * <p>The injector further passes dependencies to other dependencies until it
  * constructs the entire object graph. For example, suppose the programmer
- * asked an injector to create a <tt>StopwatchWidget</tt> instance:
+ * asked an injector to create a <code>StopwatchWidget</code> instance:
  *
  * <pre>   /** GUI for a Stopwatch &#42;/
  *   class StopwatchWidget {
@@ -110,9 +110,9 @@
  *
  * <p>The injector might:
  * <ol>
- *   <li>Find a <tt>TimeSource</tt>
- *   <li>Construct a <tt>Stopwatch</tt> with the <tt>TimeSource</tt>
- *   <li>Construct a <tt>StopwatchWidget</tt> with the <tt>Stopwatch</tt>
+ *   <li>Find a <code>TimeSource</code>
+ *   <li>Construct a <code>Stopwatch</code> with the <code>TimeSource</code>
+ *   <li>Construct a <code>StopwatchWidget</code> with the <code>Stopwatch</code>
  * </ol>
  *
  * <p>This leaves the programmer's code clean, flexible, and relatively free
