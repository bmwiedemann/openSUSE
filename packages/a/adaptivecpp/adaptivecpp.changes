-------------------------------------------------------------------
Mon Jun  2 14:07:28 UTC 2025 - Eyad Issa <eyadlorenzo@gmail.com>

- Exclude armv{6,7}l from built arches

-------------------------------------------------------------------
Fri May  9 21:53:41 UTC 2025 - Eyad Issa <eyadlorenzo@gmail.com>

- Update to version 25.02.0:
  * Introducing AdaptiveCpp portable CUDA (PCUDA):
    AdaptiveCpp 25.02 introduces support for a new programming
    model in its generic JIT compiler: The portable CUDA (PCUDA)
    model. This programming model is a dialect of the CUDA and HIP
    programming model. AdaptiveCpp PCUDA allows taking CUDA or HIP
    source code, recompile with AdaptiveCpp, and obtain a single
    single binary that can dispatch kernels to CPUs, Intel GPUs,
    AMD GPUs, NVIDIA GPUs (or all at the same time).

  * Full highlights at:
    https://github.com/AdaptiveCpp/AdaptiveCpp/releases/tag/v25.02.0

  * Full changelog at:
    https://github.com/AdaptiveCpp/AdaptiveCpp/compare/v24.10.0...v25.02.0

* Drop adaptivecpp-24.10.0-cmake4.patch: upstreamed

-------------------------------------------------------------------
Thu Apr 24 19:26:28 UTC 2025 - Eyad Issa <eyadlorenzo@gmail.com>

- Use Source URL instead of _service to fetch the source code

-------------------------------------------------------------------
Fri Apr 18 08:24:05 UTC 2025 - Andreas Stieger <andreas.stieger@gmx.de>

- fix build with cmake4 boo#1239788 adaptivecpp-24.10.0-cmake4.patch
- version is 24.10.0 because the package packs tags without offset
- pin to llvm19

-------------------------------------------------------------------
Fri Jan 03 22:30:08 UTC 2025 - Eyad Issa <eyadlorenzo@gmail.com>

- Update to version 24.10.0~0:
  * AdaptiveCpp 24.10 introduces additional JIT-time optimizations,
    especially at the default ACPP_ADAPTIVITY_LEVEL=1 setting.
    Users may see substantial performance improvements for some
    kernels.
  * ACPP_ALLOCATION_TRACKING=1 was added which can enable the JIT
    compiler to include even more information about memory usage in
    code generation, further improving performance in some cases.
  * Added full support for the SYCL 2020 group algorithms library
    in the default generic JIT compiler on all backends.
  * Additional C++ parallel STL algorithms supported for offloading
  * Introducing the acpp::algorithms library: The algorithms
    underneath the C++ parallel STL offloading support are now also
    documented and exposed on the SYCL level for users who wish to
    invoke them from SYCL with a higher degree of control.
  * Added framework for JIT-time reflection to generic JIT
    compiler.
  * New extensions:
    ~ AdaptiveCpp_restrict_ptr
    ~ AdaptiveCpp_jit::compile_if

- Remove requirement on LLVM 18 and update version
- Renamed libraries to libacpp-*
- Deleted 0002-CMake-acpp-clang-to-MODULE.patch: upstreamed
- Renamed 0003-Remove-realpath-in-acpp.patch to
  0002-Remove-realpath-in-acpp.patch

-------------------------------------------------------------------
Thu Dec  5 13:27:56 UTC 2024 - Eyad Issa <eyadlorenzo@gmail.com>

- Split OpenMP runtime from the generic library

-------------------------------------------------------------------
Mon Nov 18 14:28:00 UTC 2024 - Eyad Issa <eyadlorenzo@gmail.com>

- Convert patches to git format
  * 01-env-to-interpreter.patch ->
    0001-Use-bin-env-python3-instead-of-python3-in-scripts.patch
  * 02-cmake-modules.patch ->0002-CMake-acpp-clang-to-MODULE.patch

- Added patch 0003-Remove-realpath-in-acpp.patch to remove
  warning when using acpp caused by %fdupes.

-------------------------------------------------------------------
Tue Nov 12 00:09:24 UTC 2024 - Eyad Issa <eyadlorenzo@gmail.com>

- Added patch 02-cmake-modules.patch to make some shared libraries
  modules and to avoid error while linking with --no-undefined.

- Added patch 01-env-to-interpreter.patch to convert
  /usr/bin/env python3 to /usr/bin/python3 in the shebang of the
  python scripts.

- Packaged version 24.06.0
