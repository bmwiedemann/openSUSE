<revisionlist>
  <revision rev="1" vrev="1">
    <srcmd5>bbff884b9775b6f36d19648f81411911</srcmd5>
    <version>3.2.7</version>
    <time>1587839372</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>796777</requestid>
  </revision>
  <revision rev="2" vrev="1">
    <srcmd5>987766241a86fc0611b94b8b5e2d3e39</srcmd5>
    <version>3.2.10</version>
    <time>1593726884</time>
    <user>dimstar_suse</user>
    <comment>- Update to 3.2.10:
  * Fixed bugs due to bad WeakRef handling introduced in 3.2.8
  * Fixed regression with exception handling in 3.2.8 related to the
    contextvars fix.
  * Fixed small memory leak in local.Local
  * contextvars are now persisted through AsyncToSync</comment>
    <requestid>817963</requestid>
  </revision>
  <revision rev="3" vrev="1">
    <srcmd5>f69f540db85057989b2c4c942d29f98a</srcmd5>
    <version>3.3.1</version>
    <time>1610965633</time>
    <user>dimstar_suse</user>
    <comment>- Update to 3.3.1
  * Updated StatelessServer to use ASGI v3 single-callable applications.
  * sync_to_async now defaults to thread-sensitive mode being on
  * async_to_sync now works inside of forked processes
  * WsgiToAsgi now correctly clamps its response body when Content-Length
    is set</comment>
    <requestid>863007</requestid>
  </revision>
  <revision rev="4" vrev="1">
    <srcmd5>275d6217025d9c97d084b60e25932b33</srcmd5>
    <version>3.3.4</version>
    <time>1620840667</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>890807</requestid>
  </revision>
  <revision rev="5" vrev="2">
    <srcmd5>0dc956bef9a2bbd36e68acb618f140cf</srcmd5>
    <version>3.3.4</version>
    <time>1625950443</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>904567</requestid>
  </revision>
  <revision rev="6" vrev="1">
    <srcmd5>49503f88ab519ed2c8c2701ba6cbb8a4</srcmd5>
    <version>3.4.1</version>
    <time>1630787523</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>915549</requestid>
  </revision>
  <revision rev="7" vrev="1">
    <srcmd5>a04b2fa2f753666526d3575cbf8deb1b</srcmd5>
    <version>3.5.2</version>
    <time>1654506634</time>
    <user>dimstar_suse</user>
    <comment>- update to 3.5.2:
  * Fix async-to-async typo
  * Add tests for sync_to_async
  * Improved docs - Starlette supports WebSockets
  * Use get_event_loop in class-level code
  * Changed how StatelessServer handles event loops
  * Fixed pytest_asyncio deprecation warning. 
  * Drop python 3.6, add python 3.10
  * Fix allowed values for spec_version
  * Rewrote multiprocessing test to use no local functions 
  * Fixed a typographical error
  * Remove SOCK_NONBLOCK from socket creation on tests 
  * Preserve CurrentThreadExecutor across create_task
  * Don't warn 'non-async-marked callable' for async callable instance
  * Disallow async callable class instances as callable
  * Fix root_path in WebSocket Connection Scope</comment>
    <requestid>980784</requestid>
  </revision>
  <revision rev="8" vrev="1">
    <srcmd5>fef2e8c6d25c7ec7cdf144f9850b7747</srcmd5>
    <version>3.6.0</version>
    <time>1673209507</time>
    <user>dimstar_suse</user>
    <comment>- update to 3.6.0:
  * Two new functions are added to the ``asgiref.sync`` module:
    ``iscoroutinefunction()`` and ``markcoroutinefunction()``.
  * Python 3.12 deprecates ``asyncio.iscoroutinefunction()`` as an alias for
    ``inspect.iscoroutinefunction()``, whilst also removing the
    ``_is_coroutine`` marker.  The latter is replaced with the
    ``inspect.markcoroutinefunction`` decorator.
  * The new ``asgiref.sync`` functions are compatibility shims for these
    functions that can be used until Python 3.12 is the minimum supported
    version.
  * The ``loop`` argument to ``asgiref.timeout.timeout`` is deprecated. As per
    other ``asyncio`` based APIs, the running event loop is used by default.
    Note that ``asyncio`` provides timeout utilities from Python 3.11, and
    these should be preferred where available.
  * Support for the ``ASGI_THREADS`` environment variable, used by
    ``SyncToAsync``, is removed. In general, a running event-loop is not
    available to `asgiref` at import time, and so the default thread pool
    executor cannot be configured. Protocol servers, or applications, should set
    the default executor as required when configuring the event loop at
    application startup.</comment>
    <requestid>1056748</requestid>
  </revision>
  <revision rev="9" vrev="2">
    <srcmd5>927627e15d7f163581601e47a3db0a7e</srcmd5>
    <version>3.6.0</version>
    <time>1682193728</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>1082005</requestid>
  </revision>
  <revision rev="10" vrev="1">
    <srcmd5>dd67479131a7098c378d0c493750e367</srcmd5>
    <version>3.7.2</version>
    <time>1701377982</time>
    <user>anag+factory</user>
    <comment>- update to 3.7.2:
  * The type annotations for SyncToAsync and AsyncToSync have been
    changed to more accurately reflect the kind of callables they
    return.
  * On Python 3.10 and below, the version of the &quot;typing_extensions&quot;
    package is now constrained to be at least version 4 (as we depend
    on functionality in that version and above)
  * Contextvars are now required for the implementation of `sync`
    as Python 3.6 is now no longer a supported version.
  * sync_to_async and async_to_sync now pass-through
  * Debug and Lifespan State extensions have resulted in a typing
    change for some request and response types. This change should
    be backwards-compatible.
  * ``asgiref`` frames will now be hidden in Django tracebacks
    by default.
  * Raw performance and garbage collection improvements in Local,
    SyncToAsync, and AsyncToSync.

    application startup.
  * Fixed pytest_asyncio deprecation warning.
  * Rewrote multiprocessing test to use no local functions
  * Remove SOCK_NONBLOCK from socket creation on tests
    is set
  * contextvars are now persisted through AsyncToSync</comment>
    <requestid>1129812</requestid>
  </revision>
  <revision rev="11" vrev="1">
    <srcmd5>7e2dd4a973b970067cb9412fc1a6e7fa</srcmd5>
    <version>3.8.1</version>
    <time>1712673983</time>
    <user>anag+factory</user>
    <comment>- update to 3.8.1:
  * Fixes a regression in 3.8.0 affecting nested task cancellation
    inside sync_to_async.
  * Adds support for Python 3.12.
  * Drops support for (end-of-life) Python 3.7.
  * Fixes task cancellation propagation to subtasks when using
    synchronous Django middleware.
  * Allows nesting ``sync_to_async`` via ``asyncio.wait_for``.
  * Corrects WSGI adapter handling of root path.
  * Handles case where `&quot;client&quot;` is ``None`` in WsgiToAsgi adapter.</comment>
    <requestid>1165940</requestid>
  </revision>
  <revision rev="12" vrev="1">
    <srcmd5>97dcfc4acab5d6c27cf009ff69a755a7</srcmd5>
    <version>3.9.1</version>
    <time>1753018116</time>
    <user>anag_factory</user>
    <comment>- update to 3.9.1:
  * Adds support for Python 3.13.
  * Drops support for (end-of-life) Python 3.8.
  * Fixes an error with conflicting kwargs between AsyncToSync
    and the wrapped function. (#471)
  * Fixes Local isolation between asyncio Tasks. (#478)
  * Fixes a reference cycle in Local (#508)
  * Fixes a deadlock in CurrentThreadExecutor with nested
    async_to_sync →
    sync_to_async → async_to_sync → create_task calls. (#494)
  * The ApplicationCommunicator testing utility will now return the
    task result if it's already completed on send_input and
    receive_nothing.  You may need to catch (e.g.) the
    asyncio.exceptions.CancelledError if sending messages to
    already finished consumers in your tests. (#505)</comment>
    <requestid>1294058</requestid>
  </revision>
</revisionlist>
