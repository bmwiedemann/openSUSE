<revisionlist>
  <revision rev="1" vrev="1">
    <srcmd5>2d13bbeabcf377d56c0638d1f4e2069e</srcmd5>
    <version>1.5.1</version>
    <time>1694019572</time>
    <user>anag+factory</user>
    <comment>Renaming mypy to the correct name.</comment>
    <requestid>1109212</requestid>
  </revision>
  <revision rev="2" vrev="1">
    <srcmd5>04714956f6febcb030148926a2bb6617</srcmd5>
    <version>1.8.0</version>
    <time>1704281434</time>
    <user>dimstar_suse</user>
    <comment>- update to 1.8.0:
  * https://mypy-lang.blogspot.com/2023/12/mypy-18-released.html
  * https://mypy-lang.blogspot.com/2023/11/mypy-17-released.html
  * https://mypy-lang.blogspot.com/2023/10/mypy-16-released.html
- fix dependencies

  - Support better __post_init__ method signature for dataclasses (Nikita Sobolev, PR 15503)
  - Don't explicitly assign NULL values in setup functions (Logan Hunt, PR 15379)
  - Fix crash on non-str docstring (Ali Hamdan, PR 15623)
  - Remove confusing instance variable example in cheat sheet (Adel Atallah, PR 15441)
  - Check for abstract class objects in tuples (Nikita Sobolev, PR 15366)
  - Fix frozen behavior for base classes with direct metaclasses (Wesley Collin Wright, PR 14878)
   - Fixes to float to int conversion (Jukka Lehtosalo, PR 14936)
  - Faster classmethod calls via cls (Jukka Lehtosalo, PR 14789)
  - Fix crash on ParamSpec in incremental mode (Ivan Levkivskyi, PR 14885)
  - Improve documentation of top level mypy: disable-error-code comment (Nikita Sobolev, PR 14810)
  - Add suggestions for pandas-stubs and lxml-stubs (Shantanu, PR 14737)
  - Honor NoReturn as __setitem__ return type to mark unreachable code (sterliakov, PR 12572)
- Sadly, six is still required for tests, re-add to BuildRequires.
  The full release notes can be found here:
  - Fix types of inherited attributes in generic dataclasses (Jukka Lehtosalo, PR 12656)
- add missing g++ compiler for tests</comment>
    <requestid>1136250</requestid>
  </revision>
  <revision rev="3" vrev="1">
    <srcmd5>98591dc3ea39b06b415e6a887686e25c</srcmd5>
    <version>1.9.0</version>
    <time>1711397249</time>
    <user>anag+factory</user>
    <comment>- Clean up SPEC file.
New upstream release 1.9.0
#### Breaking Changes
Because the version of typeshed we use in mypy 1.9 doesn't support 3.7, neither does mypy 1.9. (Jared Hance, PR [16883](https://github.com/python/mypy/pull/16883))
We are planning to enable
[local partial types](https://mypy.readthedocs.io/en/stable/command_line.html#cmdoption-mypy-local-partial-types) (enabled via the
`--local-partial-types` flag) later this year by default. This change
was announced years ago, but now it's finally happening. This is a
major backward-incompatible change, so we'll probably include it as
part of the upcoming mypy 2.0 release. This makes daemon and
non-daemon mypy runs have the same behavior by default.
Local partial types can also be enabled in the mypy config file:
```
local_partial_types = True
```
We are looking at providing a tool to make it easier to migrate
projects to use `--local-partial-types`, but it's not yet clear whether
this is practical. The migration usually involves adding some
explicit type annotations to module-level and class-level variables.
#### Basic Support for Type Parameter Defaults (PEP 696)
This release contains new experimental support for type parameter
defaults ([PEP 696](https://peps.python.org/pep-0696)). Please try it
out! This feature was contributed by Marc Mueller.
Since this feature will be officially introduced in the next Python
feature release (3.13), you will need to import `TypeVar`, `ParamSpec`
or `TypeVarTuple` from `typing_extensions` to use defaults for now.
This example adapted from the PEP defines a default for `BotT`:
```python
from typing import Generic
from typing_extensions import TypeVar
class Bot: ...
BotT = TypeVar(&quot;BotT&quot;, bound=Bot, default=Bot)
class Context(Generic[BotT]):
    bot: BotT
class MyBot(Bot): ...
# type is Bot (the default)
reveal_type(Context().bot)
# type is MyBot
reveal_type(Context[MyBot]().bot)
```
#### Type-checking Improvements
 * Fix missing type store for overloads (Marc Mueller, PR [16803](https://github.com/python/mypy/pull/16803))
 * Fix `'WriteToConn' object has no attribute 'flush'` (Charlie Denton, PR [16801](https://github.com/python/mypy/pull/16801))
 * Improve TypeAlias error messages (Marc Mueller, PR [16831](https://github.com/python/mypy/pull/16831))
 * Support narrowing unions that include `type[None]` (Christoph Tyralla, PR [16315](https://github.com/python/mypy/pull/16315))
 * Support TypedDict functional syntax as class base type (anniel-stripe, PR [16703](https://github.com/python/mypy/pull/16703))
 * Accept multiline quoted annotations (Shantanu, PR [16765](https://github.com/python/mypy/pull/16765))
 * Allow unary + in `Literal` (Jelle Zijlstra, PR [16729](https://github.com/python/mypy/pull/16729))
 * Substitute type variables in return type of static methods (Kouroche Bouchiat, PR [16670](https://github.com/python/mypy/pull/16670))
 * Consider TypeVarTuple to be invariant (Marc Mueller, PR [16759](https://github.com/python/mypy/pull/16759))
 * Add `alias` support to `field()` in `attrs` plugin (Nikita Sobolev, PR [16610](https://github.com/python/mypy/pull/16610))
 * Improve attrs hashability detection (Tin TvrtkoviÄ‡, PR [16556](https://github.com/python/mypy/pull/16556))
#### Performance Improvements
 * Speed up finding function type variables (Jukka Lehtosalo, PR [16562](https://github.com/python/mypy/pull/16562))
#### Documentation Updates
 * Document supported values for `--enable-incomplete-feature` in &quot;mypy --help&quot; (Froger David, PR [16661](https://github.com/python/mypy/pull/16661))
 * Update new type system discussion links (thomaswhaley, PR [16841](https://github.com/python/mypy/pull/16841))
 * Add missing class instantiation to cheat sheet (Aleksi Tarvainen, PR [16817](https://github.com/python/mypy/pull/16817))
 * Document how evil `--no-strict-optional` is (Shantanu, PR [16731](https://github.com/python/mypy/pull/16731))
 * Improve mypy daemon documentation note about local partial types (Makonnen Makonnen, PR [16782](https://github.com/python/mypy/pull/16782))
 * Fix numbering error (Stefanie Molin, PR [16838](https://github.com/python/mypy/pull/16838))
 * Various documentation improvements (Shantanu, PR [16836](https://github.com/python/mypy/pull/16836))
#### Stubtest Improvements
 * Ignore private function/method parameters when they are missing from the stub (private parameter names start with a single underscore and have a default) (PR [16507](https://github.com/python/mypy/pull/16507))
 * Ignore a new protocol dunder (Alex Waygood, PR [16895](https://github.com/python/mypy/pull/16895))
 * Private parameters can be omitted (Sebastian Rittau, PR [16507](https://github.com/python/mypy/pull/16507))
 * Add support for setting enum members to &quot;...&quot; (Jelle Zijlstra, PR [16807](https://github.com/python/mypy/pull/16807))
 * Adjust symbol table logic (Shantanu, PR [16823](https://github.com/python/mypy/pull/16823))
 * Fix posisitional-only handling in overload resolution (Shantanu, PR [16750](https://github.com/python/mypy/pull/16750))
#### Stubgen Improvements
 * Fix crash on star unpack of TypeVarTuple (Ali Hamdan, PR [16869](https://github.com/python/mypy/pull/16869))
 * Use PEP 604 unions everywhere (Ali Hamdan, PR [16519](https://github.com/python/mypy/pull/16519))
 * Do not ignore property deleter (Ali Hamdan, PR [16781](https://github.com/python/mypy/pull/16781))
 * Support type stub generation for `staticmethod` (WeilerMarcel, PR [14934](https://github.com/python/mypy/pull/14934))
</comment>
    <requestid>1160713</requestid>
  </revision>
  <revision rev="4" vrev="2">
    <srcmd5>78a911f0a31f061d4fc1ca90a55a9153</srcmd5>
    <version>1.9.0</version>
    <time>1711714172</time>
    <user>anag+factory</user>
    <comment></comment>
    <requestid>1163260</requestid>
  </revision>
  <revision rev="5" vrev="3">
    <srcmd5>031dbac19a6fd7f458008cb778732b2d</srcmd5>
    <version>1.9.0</version>
    <time>1712262389</time>
    <user>anag+factory</user>
    <comment>- Add patch workaround-parenthesized-context-managers.patch:
  * Work around parenthesized context managers issue.
- Stop skipping tests under Python 3.6.
- Drop -x argument to pytest.</comment>
    <requestid>1164520</requestid>
  </revision>
  <revision rev="6" vrev="1">
    <srcmd5>e50008944280d666889ac5af1d4df2de</srcmd5>
    <version>1.10.0</version>
    <time>1718978563</time>
    <user>anag+factory</user>
    <comment>- Update to 1.10.0:
  * Support TypeIs (PEP 742)
  * Support TypeVar Defaults (PEP 696)
  * Support TypeAliasType (PEP 695)
  * Detect Additional Unsafe Uses of super()
  * Fix incorrect inferred type when accessing descriptor on union type
  * Fix crash when expanding invalid Unpack in a Callable alias
  * Fix false positive when string formatting with string enum
  * Narrow individual items when matching a tuple to a sequence pattern
  * Fix false positive from type variable within TypeGuard or TypeIs
  * Improve yield from inference for unions of generators
  * Fix emulating hash method logic in attrs classes
  * Add reverted typeshed commit that uses ParamSpec for functools.wraps
  * Fix type narrowing for types.EllipsisType
  * Fix single item enum match type exhaustion
  * Improve type inference with empty collections
  * Fix override checking for decorated property
  * Fix narrowing on match with function subject
- Drop including types-ast, no longer required.
- Drop patch workaround-parenthesized-context-managers.patch, now
  included upstream.</comment>
    <requestid>1181211</requestid>
  </revision>
  <revision rev="7" vrev="1">
    <srcmd5>11f84289ccc770200b209ee22674ede1</srcmd5>
    <version>1.11.2</version>
    <time>1726152838</time>
    <user>anag+factory</user>
    <comment></comment>
    <requestid>1199970</requestid>
  </revision>
  <revision rev="8" vrev="2">
    <srcmd5>9fff15982712a8d4cbeb8e537ee570e2</srcmd5>
    <version>1.11.2</version>
    <time>1728229905</time>
    <user>anag+factory</user>
    <comment></comment>
    <requestid>1205767</requestid>
  </revision>
  <revision rev="9" vrev="1">
    <srcmd5>791cd458e056c54196b03a882ffa4322</srcmd5>
    <version>1.11.2+git.1728499967.eca206d</version>
    <time>1728658865</time>
    <user>anag+factory</user>
    <comment>- Temporarily switched to using git source before the problems
  with 3.13.0 compatibility are fixed.
- Update to version 1.11.2+git.1728499967.eca206d:
  * Fix union callees with functools.partial (#17903)
  * [mypyc] Add &quot;runtests.py mypyc-fast&quot; for running fast mypyc tests (#17906)
  * Emit error for &quot;raise NotImplemented&quot; (#17890)
  * Document ReadOnly (PEP 705) (#17905)
  * Make ReadOnly TypedDict items covariant (#17904)
  * documentation for TypeIs (#17821)
  * Improvements to functools.partial of types (#17898)
  * Use 3.13.0 for ci tests (#17900)
  * stubtest: Stop telling people to use double underscores (#17897)
  * Add changelog for mypy 1.12 (#17889)
- Remove upstreamed latest-pythons.patch
</comment>
    <requestid>1206747</requestid>
  </revision>
  <revision rev="10" vrev="1">
    <srcmd5>1011e281ffa21933c5fe5ae31e3b3f1c</srcmd5>
    <version>1.12.0</version>
    <time>1728997072</time>
    <user>anag+factory</user>
    <comment>- Update to officially released version 1.12.0:
  - Support Python 3.12 Syntax for Generics (PEP 695)
  - Related improvements are included:
    - Document Python 3.12 type parameter syntax (Jukka
      Lehtosalo, PR 17816)
    - Further documentation updates (Jukka Lehtosalo, PR 17826)
    - Allow Self return types with contravariance (Jukka
      Lehtosalo, PR 17786)
    - Enable new type parameter syntax by default (Jukka
      Lehtosalo, PR 17798)
    - Generate error if new-style type alias used as base class
      (Jukka Lehtosalo, PR 17789)
    - Inherit variance if base class has explicit variance (Jukka
      Lehtosalo, PR 17787)
    - Fix crash on invalid type var reference (Jukka Lehtosalo,
      PR 17788)
    - Fix covariance of frozen dataclasses (Jukka Lehtosalo, PR
      17783)
    - Allow covariance with attribute that has &quot;_&quot; name prefix
      (Jukka Lehtosalo, PR 17782)
    - Support Annotated[...] in new-style type aliases (Jukka
      Lehtosalo, PR 17777)
    - Fix nested generic classes (Jukka Lehtosalo, PR 17776)
    - Add detection and error reporting for the use of incorrect
      expressions within the scope of a type parameter and a type
      alias (Kirill Podoprigora, PR 17560)
  - Basic Support for Python 3.13 This release adds partial
    support for Python 3.13 features and compiled binaries for
    Python 3.13. Mypyc now also supports Python 3.13.
    - Various new stdlib features and changes (through typeshed
      stub improvements)
    - typing.ReadOnly (see below for more)
    - typing.TypeIs (added in mypy 1.10, PEP 742)
    - Type parameter defaults when using the legacy syntax (PEP
    Th696) ese features are not supported yet:
    - warnings.deprecated (PEP 702)
    - Type parameter defaults when using Python 3.12 type
      parameter syntax
  - Mypyc Support for Python 3.13
    - Add additional includes for Python 3.13 (Marc Mueller, PR
      17506)
    - Add another include for Python 3.13 (Marc Mueller, PR
      17509)
    - Fix ManagedDict functions for Python 3.13 (Marc Mueller, PR
      17507)
    - Update mypyc test output for Python 3.13 (Marc Mueller, PR
      17508)
    - Fix PyUnicode functions for Python 3.13 (Marc Mueller, PR
      17504)
    - Fix _PyObject_LookupAttrId for Python 3.13 (Marc Mueller,
      PR 17505)
    - Fix _PyList_Extend for Python 3.13 (Marc Mueller, PR 17503)
    - Fix gen_is_coroutine for Python 3.13 (Marc Mueller, PR
      17501)
    - Fix _PyObject_FastCall for Python 3.13 (Marc Mueller, PR
      17502)
    - Avoid uses of _PyObject_CallMethodOneArg on 3.13 (Jukka
      Lehtosalo, PR 17526)
    - Don't rely on _PyType_CalculateMetaclass on 3.13 (Jukka
      Lehtosalo, PR 17525)
    - Don't use _PyUnicode_FastCopyCharacters on 3.13 (Jukka
      Lehtosalo, PR 17524)
    - Don't use _PyUnicode_EQ on 3.13, as it's no longer exported
      (Jukka Lehtosalo, PR 17523)
  - Inferring Unions for Conditional Expressions
  - You can now use typing.ReadOnly to specity TypedDict items as
    read-only (PEP 705):
  - Python 3.8 End of Life Approaching
  - Planned Changes to Defaults - more details in the full
    Changelog.
  - Documentation Updates
  - Experimental Inline TypedDict Syntax
  - Stubgen Improvements
  - Stubtest Improvements
  - Other Notables Fixes and Improvements
  - Typeshed Updates
- Update types-psutil 6.0.0.20241011, and types-setuptools to
  75.1.0.20241014 (just for testing, these are not openSUSE
  packages of these tools).
- Remove _service* files.
</comment>
    <requestid>1207957</requestid>
  </revision>
  <revision rev="11" vrev="1">
    <srcmd5>f2c344a561bab7ec63f87119e645e6af</srcmd5>
    <version>1.14.1</version>
    <time>1738072682</time>
    <user>anag+factory</user>
    <comment></comment>
    <requestid>1240302</requestid>
  </revision>
  <revision rev="12" vrev="2">
    <srcmd5>e07b21f8a84286db89aec18b61a389c8</srcmd5>
    <version>1.14.1</version>
    <time>1746542412</time>
    <user>anag_factory</user>
    <comment>- Add mypy-1.14.1-gcc15.patch from upstream to fix gcc15 compile
  time error
- Update vendored types_* to the appropriate versions.
</comment>
    <requestid>1274642</requestid>
  </revision>
  <revision rev="13" vrev="1">
    <srcmd5>1c35c1912a4c0e392d52706be6a579b5</srcmd5>
    <version>1.16.0</version>
    <time>1748806590</time>
    <user>dimstar_suse</user>
    <comment>- Remove upstreamed mypy-1.14.1-gcc15.patch
- Update to 1.16.0:
    Different Property Getter and Setter Types
    Mypy now supports using different types for a property getter and setter:
    class A:
        _value: int
        @property
        def foo(self) -&gt; int:
            return self._value
        @foo.setter
        def foo(self, x: str | int) -&gt; None:
            try:
                self._value = int(x)
            except ValueError:
                raise Exception(f&quot;'{x}' is not a valid value for 'foo'&quot;)
    This was contributed by Ivan Levkivskyi (PR 18510).
    Flexible Variable Redefinitions (Experimental)
    Mypy now allows unannotated variables to be freely redefined
    with different types when using the experimental
    --allow-redefinition-new flag. You will also need to enable
    --local-partial-types. Mypy will now infer a union type when
    different types are assigned to a variable:
    # mypy: allow-redefinition-new, local-partial-types
    def f(n: int, b: bool) -&gt; int | str:
        if b:
            x = n
        else:
            x = str(n)
        # Type of 'x' is int | str here.
        return x
    Without the new flag, mypy only supports inferring optional
    types (X | None) from multiple assignments, but now mypy can
    infer arbitrary union types.
    An unannotated variable can now also have different types in
    different code locations:
    # mypy: allow-redefinition-new, local-partial-types
    ...
    if cond():
        for x in range(n):
            # Type of 'x' is 'int' here
            ...
    else:
        for x in ['a', 'b']:
            # Type of 'x' is 'str' here
            ...
    We are planning to turn this flag on by default in mypy 2.0,
    along with --local-partial-types. The feature is still
    experimental and has known issues, and the semantics may
    still change in the future. You may need to update or add
    type annotations when switching to the new behavior, but if
    you encounter anything unexpected, please create a GitHub
    issue.
    This was contributed by Jukka Lehtosalo (PR 18727, PR 19153).
    Stricter Type Checking with Imprecise Types
    Mypy can now detect additional errors in code that uses Any
    types or has missing function annotations.
    When calling dict.get(x, None) on an object of type dict[str,
    Any], this now results in an optional type (in the past it
    was Any):
    def f(d: dict[str, Any]) -&gt; int:
        # Error: Return value has type &quot;Any | None&quot; but expected &quot;int&quot;
        return d.get(&quot;x&quot;, None)
    Type narrowing using assignments can result in more precise
    types in the presence of Any types:
    def foo(): ...
    def bar(n: int) -&gt; None:
        x = foo()
        # Type of 'x' is 'Any' here
        if n &gt; 5:
            x = str(n)
            # Type of 'x' is 'str' here
    When using --check-untyped-defs, unannotated overrides are
    now checked more strictly against superclass definitions.
    Related PRs:
        Use union types instead of join in binder (Ivan Levkivskyi, PR 18538)
        Check superclass compatibility of untyped methods if
        --check-untyped-defs is set (Stanislav Terliakov, PR
        18970)
    Improvements to Attribute Resolution
    This release includes several fixes to inconsistent
    resolution of attribute, method and descriptor types.
        Consolidate descriptor handling (Ivan Levkivskyi, PR 18831)
        Make multiple inheritance checking use common semantics (Ivan Levkivskyi, PR 18876)
        Make method override checking use common semantics (Ivan Levkivskyi, PR 18870)
        Fix descriptor overload selection (Ivan Levkivskyi, PR 18868)
        Handle union types when binding self (Ivan Levkivskyi, PR 18867)
        Make variable override checking use common semantics (Ivan Levkivskyi, PR 18847)
        Make descriptor handling behave consistently (Ivan Levkivskyi, PR 18831)
    Make Implementation for Abstract Overloads Optional
    The implementation can now be omitted for abstract overloaded methods, even outside stubs:
    from abc import abstractmethod
    from typing import overload
    class C:
        @abstractmethod
        @overload
        def foo(self, x: int) -&gt; int: ...
        @abstractmethod
        @overload
        def foo(self, x: str) -&gt; str: ...
        # No implementation required for &quot;foo&quot;
    This was contributed by Ivan Levkivskyi (PR 18882).
    Option to Exclude Everything in .gitignore
    You can now use --exclude-gitignore to exclude everything in
    a .gitignore file from the mypy build. This behaves similar
    to excluding the paths using --exclude. We might enable this
    by default in a future mypy release.
    This was contributed by Ivan Levkivskyi (PR 18696).
    Selectively Disable Deprecated Warnings
    It's now possible to selectively disable warnings generated
    from warnings.deprecated using the --deprecated-calls-exclude
    option:
    # mypy --enable-error-code deprecated
    #      --deprecated-calls-exclude=foo.A
    import foo
    foo.A().func()  # OK, the deprecated warning is ignored
    # file foo.py
    from typing_extensions import deprecated
    class A:
        @deprecated(&quot;Use A.func2 instead&quot;)
        def func(self): pass
        ...
    Contributed by Marc Mueller (PR 18641)
    Annotating Native/Non-Native Classes in Mypyc
    You can now declare a class as a non-native class when
    compiling with mypyc. Unlike native classes, which are
    extension classes and have an immutable structure, non-native
    classes are normal Python classes at runtime and are fully
    dynamic. Example:
    from mypy_extensions import mypyc_attr
    @mypyc_attr(native_class=False)
    class NonNativeClass:
        ...
    o = NonNativeClass()
    # Ok, even if attribute &quot;foo&quot; not declared in class body
    setattr(o, &quot;foo&quot;, 1)
    Classes are native by default in compiled modules, but
    classes that use certain features (such as most metaclasses)
    are implicitly non-native.
    You can also explicitly declare a class as native. In this
    case mypyc will generate an error if it can't compile the
    class as a native class, instead of falling back to
    a non-native class:
    from mypy_extensions import mypyc_attr
    from foo import MyMeta
    # Error: Unsupported metaclass for a native class
    @mypyc_attr(native_class=True)
    class C(metaclass=MyMeta):
        ...
    Since native classes are significantly more efficient that
    non-native classes, you may want to ensure that certain
    classes always compiled as native classes.
- Update to 1.15.0:
    By default, mypy treats bytearray and memoryview values as
    assignable to the bytes type, for historical reasons. Use the
    --strict-bytes flag to disable this behavior. PEP 688
    specified the removal of this special case. The flag will be
    enabled by default in mypy 2.0.
    Contributed by Ali Hamdan (PR 18263) and Shantanu Jain (PR 13952).
    Improvements to Reachability Analysis and Partial Type Handling in Loops
    This change results in mypy better modelling control flow
    within loops and hence detecting several previously ignored
    issues. In some cases, this change may require additional
    explicit variable annotations.
    Contributed by Christoph Tyralla (PR 18180, PR 18433).
    (Speaking of partial types, remember that we plan to enable
    --local-partial-types by default in mypy 2.0.)
    Better Discovery of Configuration Files
    Mypy will now walk up the filesystem (up until a repository
    or file system root) to discover configuration files. See the
    mypy configuration file documentation for more details.
    Contributed by Mikhail Shiryaev and Shantanu Jain (PR 16965, PR 18482)
    Better Line Numbers for Decorators and Slice Expressions
    Mypy now uses more correct line numbers for decorators and
    slice expressions. In some cases, you may have to change the
    location of a # type: ignore comment.
    Contributed by Shantanu Jain (PR 18392, PR 18397).
    Drop Support for Python 3.8
    Mypy no longer supports running with Python 3.8, which has
    reached end-of-life. When running mypy with Python 3.9+, it
    is still possible to type check code that needs to support
    Python 3.8 with the --python-version 3.8 argument. Support
    for this will be dropped in the first half of 2025!
</comment>
    <requestid>1281381</requestid>
  </revision>
  <revision rev="14" vrev="2">
    <srcmd5>e92bde427f15fd6943f997b427d9543e</srcmd5>
    <version>1.16.0</version>
    <time>1752074761</time>
    <user>anag_factory</user>
    <comment>- Convert to libalternatives</comment>
    <requestid>1291195</requestid>
  </revision>
  <revision rev="15" vrev="1">
    <srcmd5>8a028506490dde52d880126bd63b81a7</srcmd5>
    <version>1.17.0</version>
    <time>1752765428</time>
    <user>anag_factory</user>
    <comment>- Update to 1.17.0:
  - Optionally Check That Match Is Exhaustive
    Mypy can now optionally generate an error if a match
    statement does not match exhaustively, without having to use
    assert_never(...). Enable this by using --enable-error-code
    exhaustive-match.
  - Further Improvements to Attribute Resolution
    This release includes additional improvements to how
    attribute types and kinds are resolved. These fix many bugs
    and overall improve consistency.
  - Fixes to Nondeterministic Type Checking
    Previous mypy versions could infer different types for
    certain expressions across different runs (typically
    depending on which order certain types were processed, and
    this order was nondeterministic). This release includes fixes
    to several such issues.
  - Remove Support for Targeting Python 3.8
    Mypy now requires --python-version 3.9 or greater. Support
    for targeting Python 3.8 is fully removed now. Since 3.8
    is an unsupported version, mypy will default to the oldest
    supported version (currently 3.9) if you still try to target
    3.8.
  - Initial Support for Python 3.14
    Mypy is now tested on 3.14 and mypyc works with 3.14.0b3 and
    later. Binary wheels compiled with mypyc for mypy itself will
    be available for 3.14 some time after 3.14.0rc1 has been
    released.
  - Deprecated Flag: --force-uppercase-builtins
    Mypy only supports Python 3.9+. The
    --force-uppercase-builtins flag is now deprecated as
    unnecessary, and a no-op. It will be removed in a future
    version.
  - Mypyc: Improvements to Generators and Async Functions
    This release includes both performance improvements and bug
    fixes related to generators and async functions (these share
    many implementation details).
  - Mypyc: Partial, Unsafe Support for Free Threading
    Mypyc has minimal, quite memory-unsafe support for the free
    threaded builds of 3.14. It is also only lightly tested. Bug
    reports and experience reports are welcome!
  - Other Mypyc Fixes and Improvements
  - Stubgen Improvements
</comment>
    <requestid>1293793</requestid>
  </revision>
  <revision rev="16" vrev="2">
    <srcmd5>11cb153164c6a5673e01552efba4cfd4</srcmd5>
    <version>1.17.0</version>
    <time>1753868471</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>1296148</requestid>
  </revision>
  <revision rev="17" vrev="3">
    <srcmd5>ba6d2011944a62141a47db1b297eef15</srcmd5>
    <version>1.17.0</version>
    <time>1755094988</time>
    <user>dimstar_suse</user>
    <comment>- Fix the libalternatives condition</comment>
    <requestid>1299074</requestid>
  </revision>
</revisionlist>
