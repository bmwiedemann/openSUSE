From: Egbert Eich <eich@suse.com>
Date: Tue Feb 18 09:40:19 2020 +0100
Subject: Change 'typedef List' to 'typedef xList'
Patch-mainline: Not yet
Git-commit: cc53586d4fa5da06a8fc82df91e9cf3983166a64
References: 

Since SLURM exposes a type List in its public API without proper
namespacing we need to change this type in pdsh.
To remain compatible with older versions of SLURM whose type List
was identical to pdsh's we need to rename not only the struct.

Change generated with:
for i in $(find . -name "*.[ch]");
  do sed -ie "s/List\([^[:alpha:]]\|$\)/xList\\1/g" $i;
done

Signed-off-by: Egbert Eich <eich@suse.com>
---
 src/common/list.c      | 52 +++++++++++++++++++++++++-------------------------
 src/common/list.h      | 42 ++++++++++++++++++++--------------------
 src/common/split.c     |  8 ++++----
 src/common/split.h     |  6 +++---
 src/modules/dshgroup.c |  6 +++---
 src/modules/genders.c  | 10 +++++-----
 src/modules/netgroup.c |  6 +++---
 src/modules/slurm.c    | 18 ++++++++---------
 src/modules/sshcmd.c   | 14 +++++++-------
 src/modules/torque.c   |  6 +++---
 src/pdsh/dsh.c         |  4 ++--
 src/pdsh/dsh.h         |  2 +-
 src/pdsh/mod.c         | 16 ++++++++--------
 src/pdsh/mod.h         |  8 ++++----
 src/pdsh/opt.c         | 26 ++++++++++++-------------
 src/pdsh/opt.h         |  2 +-
 src/pdsh/pcp_client.c  |  6 +++---
 src/pdsh/pcp_client.h  |  4 ++--
 src/pdsh/rcmd.c        |  4 ++--
 src/pdsh/wcoll.c       |  4 ++--
 20 files changed, 122 insertions(+), 122 deletions(-)
diff --git a/src/common/list.c b/src/common/list.c
index a814820..6f86085 100644
--- a/src/common/list.c
+++ b/src/common/list.c
@@ -125,10 +125,10 @@ typedef struct listNode * ListNode;
  *  Prototypes  *
  ****************/
 
-static void * list_node_create (List l, ListNode *pp, void *x);
-static void * list_node_destroy (List l, ListNode *pp);
-static List list_alloc (void);
-static void list_free (List l);
+static void * list_node_create (xList l, ListNode *pp, void *x);
+static void * list_node_destroy (xList l, ListNode *pp);
+static xList list_alloc (void);
+static void list_free (xList l);
 static ListNode list_node_alloc (void);
 static void list_node_free (ListNode p);
 static ListIterator list_iterator_alloc (void);
@@ -141,7 +141,7 @@ static void list_free_aux (void *x, void *pfreelist);
  *  Variables  *
  ***************/
 
-static List list_free_lists = NULL;
+static xList list_free_lists = NULL;
 static ListNode list_free_nodes = NULL;
 static ListIterator list_free_iterators = NULL;
 
@@ -215,10 +215,10 @@ static pthread_mutex_t list_free_lock = PTHREAD_MUTEX_INITIALIZER;
  *  Functions  *
  ***************/
 
-List
+xList
 list_create (ListDelF f)
 {
-    List l;
+    xList l;
 
     if (!(l = list_alloc()))
         return(lsd_nomem_error(__FILE__, __LINE__, "list create"));
@@ -234,7 +234,7 @@ list_create (ListDelF f)
 
 
 void
-list_destroy (List l)
+list_destroy (xList l)
 {
     ListIterator i, iTmp;
     ListNode p, pTmp;
@@ -267,7 +267,7 @@ list_destroy (List l)
 
 
 int
-list_is_empty (List l)
+list_is_empty (xList l)
 {
     int n;
 
@@ -281,7 +281,7 @@ list_is_empty (List l)
 
 
 int
-list_count (List l)
+list_count (xList l)
 {
     int n;
 
@@ -295,7 +295,7 @@ list_count (List l)
 
 
 void *
-list_append (List l, void *x)
+list_append (xList l, void *x)
 {
     void *v;
 
@@ -310,7 +310,7 @@ list_append (List l, void *x)
 
 
 void *
-list_prepend (List l, void *x)
+list_prepend (xList l, void *x)
 {
     void *v;
 
@@ -325,7 +325,7 @@ list_prepend (List l, void *x)
 
 
 void *
-list_find_first (List l, ListFindF f, void *key)
+list_find_first (xList l, ListFindF f, void *key)
 {
     ListNode p;
     void *v = NULL;
@@ -347,7 +347,7 @@ list_find_first (List l, ListFindF f, void *key)
 
 
 int
-list_delete_all (List l, ListFindF f, void *key)
+list_delete_all (xList l, ListFindF f, void *key)
 {
     ListNode *pp;
     void *v;
@@ -377,7 +377,7 @@ list_delete_all (List l, ListFindF f, void *key)
 
 
 int
-list_for_each (List l, ListForF f, void *arg)
+list_for_each (xList l, ListForF f, void *arg)
 {
     ListNode p;
     int n = 0;
@@ -399,7 +399,7 @@ list_for_each (List l, ListForF f, void *arg)
 
 
 void
-list_sort (List l, ListCmpF f)
+list_sort (xList l, ListCmpF f)
 {
 /*  Note: Time complexity O(n^2).
  */
@@ -444,7 +444,7 @@ list_sort (List l, ListCmpF f)
 
 
 void *
-list_push (List l, void *x)
+list_push (xList l, void *x)
 {
     void *v;
 
@@ -459,7 +459,7 @@ list_push (List l, void *x)
 
 
 void *
-list_pop (List l)
+list_pop (xList l)
 {
     void *v;
 
@@ -473,7 +473,7 @@ list_pop (List l)
 
 
 void *
-list_peek (List l)
+list_peek (xList l)
 {
     void *v;
 
@@ -487,7 +487,7 @@ list_peek (List l)
 
 
 void *
-list_enqueue (List l, void *x)
+list_enqueue (xList l, void *x)
 {
     void *v;
 
@@ -502,7 +502,7 @@ list_enqueue (List l, void *x)
 
 
 void *
-list_dequeue (List l)
+list_dequeue (xList l)
 {
     void *v;
 
@@ -516,7 +516,7 @@ list_dequeue (List l)
 
 
 ListIterator
-list_iterator_create (List l)
+list_iterator_create (xList l)
 {
     ListIterator i;
 
@@ -654,7 +654,7 @@ list_delete (ListIterator i)
 
 
 static void *
-list_node_create (List l, ListNode *pp, void *x)
+list_node_create (xList l, ListNode *pp, void *x)
 {
 /*  Inserts data pointed to by [x] into list [l] after [pp],
  *    the address of the previous node's "next" ptr.
@@ -689,7 +689,7 @@ list_node_create (List l, ListNode *pp, void *x)
 
 
 static void *
-list_node_destroy (List l, ListNode *pp)
+list_node_destroy (xList l, ListNode *pp)
 {
 /*  Removes the node pointed to by [*pp] from from list [l],
  *    where [pp] is the address of the previous node's "next" ptr.
@@ -724,7 +724,7 @@ list_node_destroy (List l, ListNode *pp)
 }
 
 
-static List
+static xList
 list_alloc (void)
 {
     return(list_alloc_aux(sizeof(struct xlist), &list_free_lists));
@@ -732,7 +732,7 @@ list_alloc (void)
 
 
 static void
-list_free (List l)
+list_free (xList l)
 {
     list_free_aux(l, &list_free_lists);
     return;
diff --git a/src/common/list.h b/src/common/list.h
index ab5f646..44b67b8 100644
--- a/src/common/list.h
+++ b/src/common/list.h
@@ -55,14 +55,14 @@
  *  Data Types  *
  ****************/
 
-typedef struct xlist * List;
+typedef struct xlist * xList;
 /*
- *  List opaque data type.
+ *  xList opaque data type.
  */
 
 typedef struct listIterator * ListIterator;
 /*
- *  List Iterator opaque data type.
+ *  xList Iterator opaque data type.
  */
 
 typedef void (*ListDelF) (void *x);
@@ -96,7 +96,7 @@ typedef int (*ListForF) (void *x, void *arg);
  *  General-Purpose Functions  *
  *******************************/
 
-List list_create (ListDelF f);
+xList list_create (ListDelF f);
 /*
  *  Creates and returns a new empty list, or lsd_nomem_error() on failure.
  *  The deletion function [f] is used to deallocate memory used by items
@@ -106,41 +106,41 @@ List list_create (ListDelF f);
  *    in a memory leak.
  */
 
-void list_destroy (List l);
+void list_destroy (xList l);
 /*
  *  Destroys list [l], freeing memory used for list iterators and the
  *    list itself; if a deletion function was specified when the list
  *    was created, it will be called for each item in the list.
  */
 
-int list_is_empty (List l);
+int list_is_empty (xList l);
 /*
  *  Returns non-zero if list [l] is empty; o/w returns zero.
  */
 
-int list_count (List l);
+int list_count (xList l);
 /*
  *  Returns the number of items in list [l].
  */
 
 
 /***************************
- *  List Access Functions  *
+ *  xList Access Functions  *
  ***************************/
 
-void * list_append (List l, void *x);
+void * list_append (xList l, void *x);
 /*
  *  Inserts data [x] at the end of list [l].
  *  Returns the data's ptr, or lsd_nomem_error() if insertion failed.
  */
 
-void * list_prepend (List l, void *x);
+void * list_prepend (xList l, void *x);
 /*
  *  Inserts data [x] at the beginning of list [l].
  *  Returns the data's ptr, or lsd_nomem_error() if insertion failed.
  */
 
-void * list_find_first (List l, ListFindF f, void *key);
+void * list_find_first (xList l, ListFindF f, void *key);
 /*
  *  Traverses list [l] using [f] to match each item with [key].
  *  Returns a ptr to the first item for which the function [f]
@@ -150,7 +150,7 @@ void * list_find_first (List l, ListFindF f, void *key);
  *    to be unique (according to the function [f]).
  */
 
-int list_delete_all (List l, ListFindF f, void *key);
+int list_delete_all (xList l, ListFindF f, void *key);
 /*
  *  Traverses list [l] using [f] to match each item with [key].
  *  Removes all items from the list for which the function [f] returns
@@ -159,7 +159,7 @@ int list_delete_all (List l, ListFindF f, void *key);
  *  Returns a count of the number of items removed from the list.
  */
 
-int list_for_each (List l, ListForF f, void *arg);
+int list_for_each (xList l, ListForF f, void *arg);
 /*
  *  For each item in list [l], invokes the function [f] with [arg].
  *  Returns a count of the number of items on which [f] was invoked.
@@ -167,7 +167,7 @@ int list_for_each (List l, ListForF f, void *arg);
  *    function returns the negative of that item's position in the list.
  */
 
-void list_sort (List l, ListCmpF f);
+void list_sort (xList l, ListCmpF f);
 /*
  *  Sorts list [l] into ascending order according to the function [f].
  *  Note: Sorting a list resets all iterators associated with the list.
@@ -179,19 +179,19 @@ void list_sort (List l, ListCmpF f);
  *  Stack Access Functions  *
  ****************************/
 
-void * list_push (List l, void *x);
+void * list_push (xList l, void *x);
 /*
  *  Pushes data [x] onto the top of stack [l].
  *  Returns the data's ptr, or lsd_nomem_error() if insertion failed.
  */
 
-void * list_pop (List l);
+void * list_pop (xList l);
 /*
  *  Pops the data item at the top of the stack [l].
  *  Returns the data's ptr, or NULL if the stack is empty.
  */
 
-void * list_peek (List l);
+void * list_peek (xList l);
 /*
  *  Peeks at the data item at the top of the stack (or head of the queue) [l].
  *  Returns the data's ptr, or NULL if the stack (or queue) is empty.
@@ -203,13 +203,13 @@ void * list_peek (List l);
  *  Queue Access Functions  *
  ****************************/
 
-void * list_enqueue (List l, void *x);
+void * list_enqueue (xList l, void *x);
 /*
  *  Enqueues data [x] at the tail of queue [l].
  *  Returns the data's ptr, or lsd_nomem_error() if insertion failed.
  */
 
-void * list_dequeue (List l);
+void * list_dequeue (xList l);
 /*
  *  Dequeues the data item at the head of the queue [l].
  *  Returns the data's ptr, or NULL if the queue is empty.
@@ -217,10 +217,10 @@ void * list_dequeue (List l);
 
 
 /*****************************
- *  List Iterator Functions  *
+ *  xList Iterator Functions  *
  *****************************/
 
-ListIterator list_iterator_create (List l);
+ListIterator list_iterator_create (xList l);
 /*
  *  Creates and returns a list iterator for non-destructively traversing
  *    list [l], or lsd_nomem_error() on failure.
diff --git a/src/common/split.c b/src/common/split.c
index 673d25f..9cb858e 100644
--- a/src/common/split.c
+++ b/src/common/split.c
@@ -85,9 +85,9 @@ static void free_f (char *str)
  *   str (IN)   string containing tokens and separators
  *   RETURN     new list containing all tokens
  */
-List list_split(char *sep, char *str)
+xList list_split(char *sep, char *str)
 {
-    List new = list_create((ListDelF) free_f);
+    xList new = list_create((ListDelF) free_f);
     char *tok;
 
     if (sep == NULL)
@@ -101,7 +101,7 @@ List list_split(char *sep, char *str)
     return new;
 }
 
-List list_split_append (List l, char *sep, char *str)
+xList list_split_append (xList l, char *sep, char *str)
 {
     char *tok;
 
@@ -119,7 +119,7 @@ List list_split_append (List l, char *sep, char *str)
     return l;
 }
 
-int list_join (char *result, size_t len, const char *sep, List l)
+int list_join (char *result, size_t len, const char *sep, xList l)
 {
     char *str = NULL;
     int n = 0;
diff --git a/src/common/split.h b/src/common/split.h
index 6201ea4..acc58aa 100644
--- a/src/common/split.h
+++ b/src/common/split.h
@@ -28,8 +28,8 @@
 
 #include "list.h"
 
-List list_split (char *sep, char *str);
-List list_split_append (List l, char *sep, char *str);
-int list_join (char *result, size_t len, const char *sep, List l);
+xList list_split (char *sep, char *str);
+xList list_split_append (xList l, char *sep, char *str);
+int list_join (char *result, size_t len, const char *sep, xList l);
 
 #endif /* !_SPLIT_H */
diff --git a/src/modules/dshgroup.c b/src/modules/dshgroup.c
index 6b38c5b..51a4019 100644
--- a/src/modules/dshgroup.c
+++ b/src/modules/dshgroup.c
@@ -55,8 +55,8 @@ static hostlist_t read_groupfile(opt_t *opt);
 static int dshgroup_postop (opt_t *);
 static int dshgroup_process_opt(opt_t *, int, char *);
 
-static List groups = NULL;
-static List exgroups = NULL;
+static xList groups = NULL;
+static xList exgroups = NULL;
 
 /* 
  * Export pdsh module operations structure
@@ -146,7 +146,7 @@ static hostlist_t _read_groupfile (const char *group)
     return read_wcoll_path (path, group);
 }
 
-static hostlist_t _read_groups (List grouplist)
+static hostlist_t _read_groups (xList grouplist)
 {
     ListIterator i  = NULL;
     hostlist_t   hl = NULL;
diff --git a/src/modules/genders.c b/src/modules/genders.c
index 1c7f01e..2d0c307 100644
--- a/src/modules/genders.c
+++ b/src/modules/genders.c
@@ -75,8 +75,8 @@ static bool generate_altnames =   false;
 
 static genders_t gh    = NULL;
 static char *gfile     = NULL;
-static List attrlist   = NULL;
-static List excllist   = NULL;
+static xList attrlist   = NULL;
+static xList excllist   = NULL;
 
 /* 
  * Export pdsh module operations structure
@@ -151,7 +151,7 @@ struct pdsh_module pdsh_module_info = {
  */
 static genders_t  _handle_create();
 static hostlist_t _genders_to_altnames(genders_t g, hostlist_t hl);
-static hostlist_t _read_genders(List l);
+static hostlist_t _read_genders(xList l);
 static hostlist_t _read_genders_attr(char *query);
 static void       _genders_opt_verify(opt_t *opt);
 static int        _delete_all (hostlist_t hl, hostlist_t dl);
@@ -268,7 +268,7 @@ static hostlist_t genders_query_with_altnames (char *query)
  *   Multiple queries are ORed together, so a given host must only
  *   match a single query.
  */
-static hostlist_t genders_filter (hostlist_t hl, List query_list)
+static hostlist_t genders_filter (hostlist_t hl, xList query_list)
 {
     char *s;
     ListIterator i;
@@ -553,7 +553,7 @@ _read_genders_attr(char *query)
 }
 
 static hostlist_t 
-_read_genders (List attrs)
+_read_genders (xList attrs)
 {
     hostlist_t   hl = NULL;
     char *    query = NULL;
diff --git a/src/modules/netgroup.c b/src/modules/netgroup.c
index 40a0c1f..9751801 100644
--- a/src/modules/netgroup.c
+++ b/src/modules/netgroup.c
@@ -51,8 +51,8 @@ static hostlist_t read_netgroup(opt_t *opt);
 static int netgroup_postop (opt_t *);
 static int netgroup_process_opt(opt_t *, int, char *);
 
-static List groups = NULL;
-static List exgroups = NULL;
+static xList groups = NULL;
+static xList exgroups = NULL;
 
 /* 
  * Export pdsh module operations structure
@@ -135,7 +135,7 @@ static hostlist_t _read_netgroup (const char *group)
 	return (hl);
 }
 
-static hostlist_t _read_groups (List grouplist)
+static hostlist_t _read_groups (xList grouplist)
 {
     ListIterator i  = NULL;
     hostlist_t   hl = NULL;
diff --git a/src/modules/slurm.c b/src/modules/slurm.c
index f593a4f..a2eaafc 100644
--- a/src/modules/slurm.c
+++ b/src/modules/slurm.c
@@ -67,12 +67,12 @@ int pdsh_module_priority = 10;
 static int mod_slurm_init(void);
 static int mod_slurm_wcoll(opt_t *opt);
 static int mod_slurm_exit(void);
-static hostlist_t _slurm_wcoll(List jobids);
-static hostlist_t _slurm_wcoll_partition(List partitions);
+static hostlist_t _slurm_wcoll(xList jobids);
+static hostlist_t _slurm_wcoll_partition(xList partitions);
 static int slurm_process_opt(opt_t *, int opt, char *arg);
 
-static List job_list = NULL;
-static List partition_list = NULL;
+static xList job_list = NULL;
+static xList partition_list = NULL;
 
 /*
  *  Export generic pdsh module options
@@ -231,21 +231,21 @@ static int _find_str (char *jobid, char *str)
 /*
  * Return non-zero if jobid is in list of ids requested by user
  */
-static int _jobid_requested (List l, uint32_t jobid)
+static int _jobid_requested (xList l, uint32_t jobid)
 {
     if (l == NULL)
         return (0);
     return (list_delete_all (l, (ListFindF)_find_id, &jobid));
 }
 
-static int _partition_requested (List l, char *partition)
+static int _partition_requested (xList l, char *partition)
 {
     if (l == NULL)
         return (0);
     return (list_delete_all (l, (ListFindF)_find_str, partition));
 }
 
-static int _alljobids_requested (List l)
+static int _alljobids_requested (xList l)
 {
     char *all = "all";
     if (l == NULL)
@@ -262,7 +262,7 @@ static hostlist_t _hl_append (hostlist_t hl, char *nodes)
     return (hl);
 }
 
-static hostlist_t _slurm_wcoll (List joblist)
+static hostlist_t _slurm_wcoll (xList joblist)
 {
     int i;
     hostlist_t hl = NULL;
@@ -313,7 +313,7 @@ static hostlist_t _slurm_wcoll (List joblist)
     return (hl);
 }
 
-static hostlist_t _slurm_wcoll_partition (List partitionlist)
+static hostlist_t _slurm_wcoll_partition (xList partitionlist)
 {
     int i;
     char * str;
diff --git a/src/modules/sshcmd.c b/src/modules/sshcmd.c
index 5b91e3f..e0d8457 100644
--- a/src/modules/sshcmd.c
+++ b/src/modules/sshcmd.c
@@ -88,9 +88,9 @@ static int sshcmd_signal(int, void *arg, int);
 static int sshcmd(char *, char *, char *, char *, char *, int, int *, void **);
 static int sshcmd_destroy (pipecmd_t p);
 static int sshcmd_args_init (void);
-static int fixup_ssh_args (List ssh_args_list, int need_user);
+static int fixup_ssh_args (xList ssh_args_list, int need_user);
 
-List ssh_args_list =     NULL;
+xList ssh_args_list =     NULL;
 
 /*
  *  Export generic pdsh module operations:
@@ -135,7 +135,7 @@ struct pdsh_module pdsh_module_info = {
   &sshcmd_module_options[0],
 };
 
-static char **ssh_argv_create (List arg_list, const char **remote_argv)
+static char **ssh_argv_create (xList arg_list, const char **remote_argv)
 {
     int n;
     char *arg;
@@ -224,9 +224,9 @@ static void free_f (void *x)
     Free ((void **) &x);
 }
 
-static List ssh_args_list_copy (List args)
+static xList ssh_args_list_copy (xList args)
 {
-    List copy;
+    xList copy;
     ListIterator i = list_iterator_create (args);
     const char *arg;
 
@@ -269,7 +269,7 @@ sshcmd(char *ahost, char *addr, char *luser, char *ruser, char *cmd,
     const char **remote_argv = pdsh_remote_argv ();
     const char *alt_argv[] = { cmd, NULL };
     char **ssh_args;
-    List args_list;
+    xList args_list;
 
     /*
      *  If running as pdcp/rpdcp, then the dsh code has rewritten
@@ -344,7 +344,7 @@ static int arg_has_parameter (const char *arg, const char *s)
  *   If they are not present, assume we need to append them to the
  *   ssh args.
  */
-static int fixup_ssh_args (List ssh_args_list, int need_user)
+static int fixup_ssh_args (xList ssh_args_list, int need_user)
 {
     ListIterator i = list_iterator_create (ssh_args_list);
     char *arg;
diff --git a/src/modules/torque.c b/src/modules/torque.c
index 8f25129..6950804 100644
--- a/src/modules/torque.c
+++ b/src/modules/torque.c
@@ -73,10 +73,10 @@ int pdsh_module_priority = 10;
 static int mod_torque_init(void);
 static int mod_torque_wcoll(opt_t *opt);
 static int mod_torque_exit(void);
-static hostlist_t _torque_wcoll(List jobids);
+static hostlist_t _torque_wcoll(xList jobids);
 static int torque_process_opt(opt_t *, int opt, char *arg);
 
-static List job_list = NULL;
+static xList job_list = NULL;
 
 /*
  *  Export generic pdsh module options
@@ -269,7 +269,7 @@ static hostlist_t _add_jobnodes(hostlist_t hl, int connect, char *jobdesc){
     return(hl);
 }
 
-static hostlist_t _torque_wcoll (List joblist)
+static hostlist_t _torque_wcoll (xList joblist)
 {
     hostlist_t hl   = NULL;
     ListIterator li = NULL;
diff --git a/src/pdsh/dsh.c b/src/pdsh/dsh.c
index 6b7273f..b5d56a5 100644
--- a/src/pdsh/dsh.c
+++ b/src/pdsh/dsh.c
@@ -846,7 +846,7 @@ static void _increase_nofile_limit (opt_t *opt)
     return;
 }
 
-static int _thd_init (thd_t *th, opt_t *opt, List pcp_infiles, int i)
+static int _thd_init (thd_t *th, opt_t *opt, xList pcp_infiles, int i)
 { 
     th->luser = opt->luser;        /* general */
     th->ruser = opt->ruser;
@@ -991,7 +991,7 @@ int dsh(opt_t * opt)
     pthread_t thread_sig;
     pthread_attr_t attr_wdog;
     pthread_attr_t attr_sig;
-    List pcp_infiles = NULL;
+    xList pcp_infiles = NULL;
     hostlist_iterator_t itr;
     const char *domain = NULL;
     bool domain_in_label = false;
diff --git a/src/pdsh/dsh.h b/src/pdsh/dsh.h
index 844e777..0892b22 100644
--- a/src/pdsh/dsh.h
+++ b/src/pdsh/dsh.h
@@ -70,7 +70,7 @@ typedef struct thd {
 
     bool kill_on_fail;          /* If true, kill all procs on single failure */
 
-    List pcp_infiles;           /* name of input files/dirs */
+    xList pcp_infiles;           /* name of input files/dirs */
     char *pcp_outfile;          /* name of output file/dir */
     bool pcp_popt;              /* preserve mtime/mode */
     bool pcp_ropt;              /* recursive */
diff --git a/src/pdsh/mod.c b/src/pdsh/mod.c
index 3fec01b..df000ac 100644
--- a/src/pdsh/mod.c
+++ b/src/pdsh/mod.c
@@ -116,7 +116,7 @@ static struct pdsh_module_option * _mod_find_opt(mod_t mod, int opt);
 /*
  *  Static list of loaded modules
  */
-static List module_list;
+static xList module_list;
 static bool initialized = false;
 
 int
@@ -328,7 +328,7 @@ _mod_find_misc (mod_t mod, const char *name)
 }
 
 static int
-_mod_initialize_by_name (char *name, List l)
+_mod_initialize_by_name (char *name, xList l)
 {
     mod_t mod = list_find_first (l, (ListFindF) _mod_find_misc, name);
     if (mod != NULL && _mod_initialize (mod) < 0)
@@ -338,9 +338,9 @@ _mod_initialize_by_name (char *name, List l)
 }
 
 
-static int _mod_initialize_modules_by_name (char *names, List m)
+static int _mod_initialize_modules_by_name (char *names, xList m)
 {
-    List l;
+    xList l;
 
     if (names == NULL || strlen(names) == 0)
         return (0);
@@ -479,10 +479,10 @@ mod_count(char *type)
     return i;
 }
 
-static List
+static xList
 _mod_get_module_names(char *type, int get_active)
 {
-    List l;
+    xList l;
     mod_t mod;
     ListIterator module_itr;
 
@@ -511,12 +511,12 @@ _mod_get_module_names(char *type, int get_active)
     return l;
 }
 
-List mod_get_module_names (char *type)
+xList mod_get_module_names (char *type)
 {
     return _mod_get_module_names (type, 1);
 }
 
-List mod_get_uninitialized_module_names (char *type)
+xList mod_get_uninitialized_module_names (char *type)
 {
     return _mod_get_module_names (type, 0);
 }
diff --git a/src/pdsh/mod.h b/src/pdsh/mod.h
index 7d6eb7f..67a868e 100644
--- a/src/pdsh/mod.h
+++ b/src/pdsh/mod.h
@@ -68,7 +68,7 @@ int mod_exit(void);
 int mod_load_modules(const char *dir, opt_t *opt);
 
 /*
- *  List information about all loaded modules to stdout.
+ *  xList information about all loaded modules to stdout.
  */
 void mod_list_module_info(void);
 
@@ -118,14 +118,14 @@ int mod_count(char *type);
 
 /*
  *  Build list of module names of type "type"
- *  List contains all module names if type is NULL.
+ *  xList contains all module names if type is NULL.
  */
-List mod_get_module_names(char *type);
+xList mod_get_module_names(char *type);
 
 /*
  *  Build list of module names that are loaded but not initialized
  */
-List mod_get_uninitialized_module_names (char *type);
+xList mod_get_uninitialized_module_names (char *type);
 
 
 /*
diff --git a/src/pdsh/opt.c b/src/pdsh/opt.c
index 790fa2d..6db18f0 100644
--- a/src/pdsh/opt.c
+++ b/src/pdsh/opt.c
@@ -158,16 +158,16 @@ int pdsh_remote_argc (void)
 }
 
 /*
- *  List of explicitly excluded hosts and regex filter options:
+ *  xList of explicitly excluded hosts and regex filter options:
  */
-static List exclude_list = NULL;
-static List regex_list = NULL;
+static xList exclude_list = NULL;
+static xList regex_list = NULL;
 
 static void _usage(opt_t * opt);
 static void _show_version(void);
 static int wcoll_args_process (opt_t *opt, char *args);
-static void wcoll_apply_regex (opt_t *opt, List regexs);
-static void wcoll_apply_excluded (opt_t *opt, List excludes);
+static void wcoll_apply_regex (opt_t *opt, xList regexs);
+static void wcoll_apply_excluded (opt_t *opt, xList excludes);
 static void wcoll_expand (opt_t *opt);
 
 static void
@@ -537,7 +537,7 @@ void opt_args_early (opt_t * opt, int argc, char *argv[])
 
 static void wcoll_append_excluded (opt_t *opt, char *exclude_args)
 {
-    List l = list_split (",", exclude_args);
+    xList l = list_split (",", exclude_args);
     ListIterator i = list_iterator_create (l);
     char *s;
 
@@ -972,7 +972,7 @@ bool opt_verify(opt_t * opt)
 			  (x == ALLOC_CYCLIC ? "ALLOC_CYCLIC" : "<Unknown>"))
 
 /*
- * List the current options.
+ * xList the current options.
  *	opt (IN)	option list
  */
 void opt_list(opt_t * opt)
@@ -1071,7 +1071,7 @@ void opt_free(opt_t * opt)
  */
 static int _module_list_string(char *type, char *buf, int len)
 {
-    List l = NULL;
+    xList l = NULL;
     int  n = 0;
 
     if (mod_count(type) == 0)
@@ -1086,7 +1086,7 @@ static int _module_list_string(char *type, char *buf, int len)
 
 static int _module_list_uninitialized (char *type, char *buf, int len)
 {
-    List l = NULL;
+    xList l = NULL;
     int  n = 0;
 
     if (mod_count(type) == 0)
@@ -1291,7 +1291,7 @@ void hostlist_filter_regex (hostlist_t hl, struct regex_info *re)
 }
 
 
-static void list_push_hostlist (List l, hostlist_t hl)
+static void list_push_hostlist (xList l, hostlist_t hl)
 {
     size_t n = 4096;
     char *s = Malloc (n);
@@ -1387,13 +1387,13 @@ static int wcoll_arg_process (char *arg, opt_t *opt)
 static int wcoll_args_process (opt_t *opt, char * args)
 {
     int rc;
-    List l = list_split (",", args);
+    xList l = list_split (",", args);
     rc = list_for_each (l, (ListForF) wcoll_arg_process, opt);
     list_destroy (l);
     return (rc);
 }
 
-static void wcoll_apply_regex (opt_t *opt, List regexs)
+static void wcoll_apply_regex (opt_t *opt, xList regexs)
 {
     struct regex_info *re;
     ListIterator i;
@@ -1410,7 +1410,7 @@ static void wcoll_apply_regex (opt_t *opt, List regexs)
     list_iterator_destroy (i);
 }
 
-static void wcoll_apply_excluded (opt_t *opt, List excludes)
+static void wcoll_apply_excluded (opt_t *opt, xList excludes)
 {
     ListIterator i;
     char *arg;
diff --git a/src/pdsh/opt.h b/src/pdsh/opt.h
index bd4d95a..7cb4551 100644
--- a/src/pdsh/opt.h
+++ b/src/pdsh/opt.h
@@ -83,7 +83,7 @@ typedef struct {
     /* PCP-specific options */
     bool preserve;              /* -p */
     bool recursive;             /* -r */
-    List infile_names;          /* -I or pcp source spec */
+    xList infile_names;          /* -I or pcp source spec */
     char *outfile_name;         /* pcp dest spec */
     bool pcp_server;            /* undocument pdcp server option */
     bool target_is_directory;   /* undocumented pdcp is target a directory */
diff --git a/src/pdsh/pcp_client.c b/src/pdsh/pcp_client.c
index 52cfd43..bbd55d7 100644
--- a/src/pdsh/pcp_client.c
+++ b/src/pdsh/pcp_client.c
@@ -91,7 +91,7 @@
 #endif
 
 
-static void _rexpand_dir(List list, char *name)
+static void _rexpand_dir(xList list, char *name)
 {
     DIR *dir;
     struct dirent *dp;
@@ -138,9 +138,9 @@ static void _rexpand_dir(List list, char *name)
     list_append(list, pf);
 }
 
-List pcp_expand_dirs(List infiles)
+xList pcp_expand_dirs(xList infiles)
 {
-    List new = list_create(NULL);
+    xList new = list_create(NULL);
     struct stat sb;
     char *name;
     ListIterator i;
diff --git a/src/pdsh/pcp_client.h b/src/pdsh/pcp_client.h
index 93ef35a..0a16f3d 100644
--- a/src/pdsh/pcp_client.h
+++ b/src/pdsh/pcp_client.h
@@ -51,7 +51,7 @@ struct pcp_filename {
 };
 
 /* expand directories, if any, and verify access for all files */
-List pcp_expand_dirs (List infile_names);
+xList pcp_expand_dirs (xList infile_names);
 
 struct pcp_client {
 	int infd;
@@ -59,7 +59,7 @@ struct pcp_client {
 	bool preserve;
 	bool pcp_client;
 	char *host;
-	List infiles;
+	xList infiles;
 };
 
 int pcp_client (struct pcp_client *cli);
diff --git a/src/pdsh/rcmd.c b/src/pdsh/rcmd.c
index 9ca295e..f00adf0 100644
--- a/src/pdsh/rcmd.c
+++ b/src/pdsh/rcmd.c
@@ -67,8 +67,8 @@ struct node_rcmd_info {
     struct rcmd_module *rmod;
 };
 
-static List host_info_list = NULL;
-static List rcmd_module_list = NULL;
+static xList host_info_list = NULL;
+static xList rcmd_module_list = NULL;
 
 static struct rcmd_module *default_rcmd_module = NULL;
 static struct rcmd_module *current_rcmd_module = NULL;
diff --git a/src/pdsh/wcoll.c b/src/pdsh/wcoll.c
index 92fabb9..91eb274 100644
--- a/src/pdsh/wcoll.c
+++ b/src/pdsh/wcoll.c
@@ -50,8 +50,8 @@
 
 struct wcoll_ctx {
     hostlist_t hl;
-    List path_list;
-    List include_cache;
+    xList path_list;
+    xList include_cache;
 };
 
 static void free_f (void *x)
