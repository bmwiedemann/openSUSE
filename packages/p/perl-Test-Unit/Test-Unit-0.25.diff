Index: Test-Unit-0.25/t/tlib/AssertTest.pm
===================================================================
--- Test-Unit-0.25.orig/t/tlib/AssertTest.pm
+++ Test-Unit-0.25/t/tlib/AssertTest.pm
@@ -70,8 +70,6 @@ sub test_assert {
 
         'bang'  => [ __LINE__, sub { shift->assert(0, 'bang')              } ],
         'bang'  => [ __LINE__, sub { shift->assert('', 'bang')             } ],
-        "'qux' did not match /(?-xism:foo)/"
-                => [ __LINE__, sub { shift->assert(qr/foo/, 'qux')         } ],
         'bang'  => [ __LINE__, sub { shift->assert(qr/foo/, 'qux', 'bang') } ],
         'a ne b'=> [ __LINE__, sub { shift->assert($coderef, 'a', 'b')     } ],
     );
@@ -253,7 +251,6 @@ sub test_ok_not_equals {
         q{expected '', got 'foo'}           => [ 'foo',  ''      ], 
         q{expected 'foo', got ''}           => [ '',     'foo'   ], 
         q{expected 5, got 4}                => [ $adder, 5       ], 
-        q{'foo' did not match /(?-xism:x)/} => [ 'foo',  qr/x/   ], 
     );
     my @tests = ();
     while (@checks) {
Index: Test-Unit-0.25/lib/Test/Unit/Assert.pm
===================================================================
--- Test-Unit-0.25.orig/lib/Test/Unit/Assert.pm
+++ Test-Unit-0.25/lib/Test/Unit/Assert.pm
@@ -315,7 +315,7 @@ sub _eq_hash {
 
     my $ok = 1;
     my $bigger = keys %$a1 > keys %$a2 ? $a1 : $a2;
-    foreach my $k (keys %$bigger) {
+    foreach my $k (sort keys %$bigger) {
         my $e1 = exists $a1->{$k} ? $a1->{$k} : $DNE;
         my $e2 = exists $a2->{$k} ? $a2->{$k} : $DNE;
 
@@ -484,7 +484,7 @@ sub _format_stack {
                   (-text => @_ ? join('', @_) : "<undef> unexpected");
         },
     );
-    foreach my $type (keys %assert_subs) {
+    foreach my $type (sort keys %assert_subs) {
         my $assertion = Test::Unit::Assertion::CodeRef->new($assert_subs{$type});
         no strict 'refs';
         *{"Test::Unit::Assert::assert_$type"} =
