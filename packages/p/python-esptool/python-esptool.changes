-------------------------------------------------------------------
Mon Mar  2 16:39:21 UTC 2020 - Marketa Calabkova <mcalabkova@suse.com>

- Update to 2.8
  * esptool.py image_info now prints a summary of segment memory types
    (IRAM, DRAM, etc) based on the address range.
  * esptool.py write_flash will warn if it looks like a bootloader binary 
    is built for ESP32-S2 or another newer chip (support for flashing 
    ESP32-S2 will be added in a future version.)
  * few bugfixes

-------------------------------------------------------------------
Fri Sep 13 07:57:08 UTC 2019 - Tomáš Chvátal <tchvatal@suse.com>

- Update to 2.7:
  * New option write_flash --flash-size keep will keep whatever flash size is
    set in the bootloader header
  * write_flash no longer updates the flash header if the file being written
    to the bootloader offset isn't a valid image file for the chip

-------------------------------------------------------------------
Thu Feb 28 01:47:40 UTC 2019 - John Vandenberg <jayvdb@gmail.com>

- Remove unnecessary build dependencies on flake8 and plugins
- Activate test suite
- Add flasher_stub/ to %doc, as it is the source for binary blob in esptool.py
- Update to v2.6
  * Features
    + New write_flash --erase-all ... option to erase all flash before writing
      (single command).
    + Support patching the SHA256 digest of the ELF file into the binary
      (available in ESP-IDF via app description APIs)
    + Make calling esptool module functions and esptool.main() more
      Python-friendly (all functions clean up open files correctly,
      main(...) can take an optional argument with a command line formatted
      as a list.)
    + (ESP32) Support for reading/writing efuses when 3/4 Coding Scheme is set
      details
    + (ESP32) espefuse.py supports displaying and setting a custom MAC address
      in BLK3 of efuse
    + (ESP32) espsecure.py can now verify signatures with raw binary key file
      as well as PEM formatted key file
  * Bug Fixes/Changes
    + Fix crash due to unimplemented write timeout on RFC2217 ports
    + elf2image no longer adds empty ELF sections (zero length) to the .bin file
    + elf2image fails with a proper error if an ELF file contains more than
      16 loadable sections
    + Improve error message if list_ports is missing from pyserial
    + Fix some write_flash timeouts writing large but highly compressible payloads
    + (ESP8266) Fix bug where flashing with stub would fail if ESP8266 was in
      deep sleep immediately beforehand.
    + (ESP32) Workaround a mapping bug in the ESP-IDF bootloader
      (if IROM/DROM segment ended less than 0x20 bytes after a page boundary,
      older ESP-IDF bootloaders would not map the final page correctly).
    + (ESP32) Reformat espefuse.py summary output (includes: read-only efuses
      now display value ? not 0, byte order of keys shown for BLK1,BLK2 are now
      shown in software order not the reversed byte order used by hardware
      cryptographical modules.)
    + (ESP32) espsecure.py: Fix Python 3 compatibility issues
- from v2.5.1
  * Errors during chip detection are now formatted correctly.
  * OSError is handled correctly while scanning for a port
  * Update link to flashrom repo for SPI flash chip IDs
  * read_flash command: Error out immediately if an invalid length
    packet is received (common symptom of bad serial link)
  * (ESP32) espefuse.py: Disable burning key efuses when 3/4 Coding Scheme
    is set (support for burning keys with 3/4 Coding Scheme will be addedr
    in a future update).
- from v2.5.0
  * Set a write timeout in pyserial (prevents hanging in sync process if
    port is unavailable).
  * (ESP32) New option elf2image --secure-pad to pad the output binary
    so once signed it will align to an flash cache page boundary (64KB).
    Prevents unsigned data from being mapped into the instruction space
    via the flash cache.
  * Fix exception if no --port is specified but no serial ports are found
    in the system.
  * (ESP32) espsecure: Fix bug where digest_secure_bootloader could produce
    an incorrect digest.
- from v2.4.1
  * --port argument was not correctly handled in v2.4.0
  * Corrected pyserial dependency to require pyserial v3.0 or newer
- from v2.4.0
  * ESP8266 & ESP32 changes
    + If no serial port is specified, try all serial ports until an Espressif
      device responds.
    + Print device MAC on every command, after connecting.
    + New option --before no_reset_no_sync for use when immediately reusing the
      serial port with an already-running loader.
    + Fix spurious load_ram error when executed code immediately resets the UART
      baud rate..
    + Produce an error if load_ram is going to clobber bootloader stub memory
      (can use --no-stub to work around this).
    + Display a helpful error if the incompatible 'serial' module was installed
      instead of 'pyserial'.
    + Explicitly close the serial port at end of main() function (allows calling
      esptool.main() from another Python program for basic scripting.)
    + Workaround Windows usbser.sys (USB CDC-ACM device) driver bug setting DTR & RTS
    + Flasher stub build updates to work with recent ESP-IDF & ESP8266 SDK headers
    + Flasher stub now sends correct length field in protocol responses
      (esptool.py was ignoring this field, but some other tools were not).
  * ESP8266 changes
    + Move the loader stub to the very end of IRAM (useful when using load_ram command).
    + elf2image --version=2 is now compatible with recent ESP8266 SDK bootloader
      and produces the same binary output as ESP8266 SDK gen_app.py.
    + Remove unsupported flash size 4MB-c2
  * ESP32 changes
    + Print chip frequency rating values in Features list, for chips where
      these are set.
    + Working load_ram command.
    + espefuse.py: Support setting the baud rate.
    + New --override-vddsdio option allows setting the VDDSDIO regulator to 1.8V,
      1.9V or "OFF" when connecting (to override the default value read from efuse).
    + To avoid hardware damage, forcing VDDSDIO to 3.3V is not supported.

-------------------------------------------------------------------
Tue Dec  4 12:47:43 UTC 2018 - Matej Cepl <mcepl@suse.com>

- Remove superfluous devel dependency for noarch package

-------------------------------------------------------------------
Sun Mar  4 14:06:02 UTC 2018 - afaerber@suse.de

- Initial (2.3.1)
