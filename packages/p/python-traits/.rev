<revisionlist>
  <revision rev="1" vrev="1">
    <srcmd5>38432ab6bcd64a41fdc14b06ffb89076</srcmd5>
    <version>4.6.0</version>
    <time>1527605241</time>
    <user>dimstar_suse</user>
    <comment>Needed by python-enable</comment>
    <requestid>605793</requestid>
  </revision>
  <revision rev="2" vrev="1">
    <srcmd5>a646357e9b2f7b9aa69283ea50485421</srcmd5>
    <version>5.0.0</version>
    <time>1551025137</time>
    <user>coolo</user>
    <comment></comment>
    <requestid>678045</requestid>
  </revision>
  <revision rev="3" vrev="1">
    <srcmd5>5e03280ac8be9f540262e3087875a34f</srcmd5>
    <version>5.1.0</version>
    <time>1555574216</time>
    <user>dimstar_suse</user>
    <comment>- version update to 5.1.0
  * Make UUID trait initializable. (#459)
  * Change default ``FileEditor`` behavior for a ``File`` trait based on
    whether ``exists=True`` is specified for that trait. (#451, #467)
  * The changes made in #373 to make dynamically-added traits pickleable have
    been reverted. (#462)
  * ``traits.api.python_version`` has been removed. Internals have been
    refactored to use ``six.PY2`` in preference to ``sys.version_info``.
    (#449)
  * Don't depend on the 3rd party ``mock`` library on Python 3; use
    ``unittest.mock`` instead. (#446)
- Drop no longer needed avoid_sys_modules_hackery.patch</comment>
    <requestid>695180</requestid>
  </revision>
  <revision rev="4" vrev="1">
    <srcmd5>b722389705e728509b034c988171f99e</srcmd5>
    <version>5.1.1</version>
    <time>1556621950</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>697378</requestid>
  </revision>
  <revision rev="5" vrev="1">
    <srcmd5>6398b25afa43f689f85a9a27cc76d6f0</srcmd5>
    <version>5.1.2</version>
    <time>1563790910</time>
    <user>dimstar_suse</user>
    <comment>- Update to 5.1.2:
  * Traits documenter no longer generates bad reST for traits whose definition spans multiple source lines. (#494)</comment>
    <requestid>717484</requestid>
  </revision>
  <revision rev="6" vrev="1">
    <srcmd5>47c24141e229613a9d3bc69863fdbaa4</srcmd5>
    <version>5.2.0</version>
    <time>1580724797</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>768822</requestid>
  </revision>
  <revision rev="7" vrev="1">
    <srcmd5>06e185ba642636b9f70c6bd34a2e599f</srcmd5>
    <version>6.1.0</version>
    <time>1595577226</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>820887</requestid>
  </revision>
  <revision rev="8" vrev="1">
    <srcmd5>d4c7e30c53848542518f29a5372319f7</srcmd5>
    <version>6.2.0</version>
    <time>1617131203</time>
    <user>RBrownSUSE</user>
    <comment></comment>
    <requestid>874718</requestid>
  </revision>
  <revision rev="9" vrev="1">
    <srcmd5>330931e45c7b51ed897c09d716344f79</srcmd5>
    <version>6.3.1</version>
    <time>1635366070</time>
    <user>dimstar_suse</user>
    <comment>- Update to 6.3.1:
  * Make PrefixMap._map available again, for compatibility with Mayavi. (#1578)
  * Support for Python 3.10 has been added.
  * The observe mini-language now supports use of &quot;*&quot; for listening to all
    traits on a HasTraits object. Currently this support is limited to
    cases where the &quot;*&quot; appears in a terminal position. For example,
    observe(&quot;foo:*&quot;) is supported, but observe(&quot;*:foo&quot;) is not. (#1496, #1525)
  * The Any trait type now supports a factory argument (with accompanying
    args and kw arguments). This can be used to specify a per-instance
    default, for example with Any(factory=dict). (#1557, #1558)
  * When a method is decorated with an observe decorator, the method
    signature is now checked, and a warning issued if it doesn't match the
    expected signature.  (#1529)
  * The Date, Datetime and Time trait types have a new argument allow_none.
    (#1432)
  * The Date trait type has a new argument allow_datetime .(#1429)
  * The ObserverGraph instances that result from compiling ObserverExpression
    objects and observe mini-language strings are now cached.
  * The equality definition on ObserverExpression has been simplified. (#1517)
  * A failure to parse an observe mini-language string now raises ValueError
    rather than LarkError. (#1507)
  * Invalid assignments to PrefixList and PrefixMap traits produced an
    unnecessarily nested exception. This has been fixed. (#1564)
  * An observe-decorated listener method whose name has the special form
    &quot;_traitname_changed&quot; will no longer be triggered both as as result of the
    observe decorator and the special naming: it will only be triggered via
    the observe decorator. (#1560)
  * The delegate parameter was mistyped in the typing stubs for the Delegate
    trait type. This has been fixed. (#1556)
  * The Function and Method trait types will no longer fail when arguments are</comment>
    <requestid>927624</requestid>
  </revision>
  <revision rev="10" vrev="1">
    <srcmd5>0e2a5e06da007408e42853f8ce872502</srcmd5>
    <version>6.4.3</version>
    <time>1705099556</time>
    <user>anag+factory</user>
    <comment>- update to 6.4.3:
  * This is a bugfix release that fixes test
    failures with Sphinx 7.2 and later, and adds support for
    Python 3.12
  * Rename requires_numpy_testing decorator to
    requires_numpy_typing, and have it check for numpy.typing,
    not numpy.testing.
  * Fix missing numpy_examples directory in traits-stubs package
    data.
  * Validation of items within a container (e.g., foos =
    List(MyTraitType)) now always matches the validation used for
    the item trait at top level (e.g., foo = MyTraitType).
    Previously, the validation methods used could differ, thanks
    to a bug in the container implementations. For most trait
    types this will make no difference, but for the Tuple trait
    type this change has the consequence that lists will no
    longer be accepted as valid for Tuple traits inside list
    items. See issue #1619 and PR #1625 for more information.
  * Related to the above: a top-level Tuple() trait declaration
    currently accepts Python list objects, while a Tuple
    declaration with explicit item types (for example
    Tuple(Int(), Int())) does not. The support for list objects
    in plain Tuple() is deprecated, and will be removed in a
    future version of Traits. See PR #1627 for more information.
  * The following people contributed code changes for this
    release: * Caio Agiani * Steve Allen * Mark Dickinson * Sai
    Rahul Poruri * Corran Webster Features ~~~~~~~~ * ETSConfig
    attributes now support deletion. This makes it easier to make
  * Complex trait type validation is now more lenient: any type
    that implements __complex__ will be accepted.</comment>
    <requestid>1138237</requestid>
  </revision>
</revisionlist>
