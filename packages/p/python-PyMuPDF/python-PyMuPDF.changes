-------------------------------------------------------------------
Sat Feb 27 00:04:25 UTC 2021 - John Vandenberg <jayvdb@gmail.com>

- Revised License to be AGPL-3.0-only
- Add %doc
- Remove COPYING now provided in tarball
- Update to v1.18.9
  * Removed ambiguous statements concerning PyMuPDF's license,
    which is now clearly stated to be GNU AGPL V3
  * Fixed issue 895
  * Since v1.17.6 PyMuPDF suppresses the font subset tags and only
    reports the base fontname in text extraction outputs
    "dict" / "json" / "rawdict" / "rawjson".
    Now a new global parameter can request the old behaviour,
    `Tools.set_subset_fontnames`.
  * Pixmap creation now also works with filenames given as pathlib.
  * Changed `Document.subset_fonts`: Text is not rewritten any more
    and should therefore retain all its origial properties -- like
    being hidden or being controlled by Optional Content mechanisms.
  * `TextWriter.fill_textbox`, `TextWriter.append` now accept a new
    boolean parameter `right_to_left`, which is *False* by default.
  * Changed `TextWriter.fill_textbox` to return all lines of text,
    that did not fit in the given rectangle. Also changed the default
    of the `warn` parameter to no longer print a warning message
    in overflow situations.
  * Added a utility function `recover_quad`, which computes the
    quadrilateral of a span. This function can be used when
    quadrilaterals for text extracted with the "dict" or "rawdict"
    options of `Page.get_text`.

-------------------------------------------------------------------
Mon Feb  8 06:24:36 UTC 2021 - John Vandenberg <jayvdb@gmail.com>

- Remove doc sub-package, fixing builds
- Switch to using PyPI, adding COPYING from upstream
- Update URL
- Add build dependency openSUSE-release, needed by setup.py
- Remove fix-library-linking.patch no longer needed
- Fix %check for single-spec
- Update to v1.18.8
  * Fixed a memory leak in Page.insert_image when inserting
    images from files or memory
  * pathlib.Path objects should now correctly handle file path
    hierarchies
- from v1.18.7
  * Added an experimental Document.subset_fonts which reduces
    the size of eligible fonts based on their use by text in the PDF
  * Document.convert_to_pdf now also supports PDF documents
  * Renamed Document.write to Document.tobytes for greater clarity.
    But the deprecated name remains available for some time.
  * Document.tobytes` now supports linearized PDF output
  * Document.save` now also supports writing to Python file objects.
    In addition, the open function now supports Python file objects.
  * Fixed issue #844.
  * Fixed issue #838.
  * More logic for better support of OCR-ed text output
    (Tesseract, ABBYY).
  * Fixed issue #818.
  * Fixed issue #814.
  * Added Document.get_page_labels which returns a list of page
    label definitions of a PDF.
  * Added :meth:`Document.has_annots and Document.has_links to check
    whether these object types are present anywhere in a PDF.
  * Added expert low-level functions to simplify inquiry and
    modification of PDF object sources: 
    + Document.xref_get_keys lists the keys of object `xref`
    + Document.xref_get_key returns type and content of a key
    + Document.xref_set_key modifies the key's value
  * Added parameter thumbnails to Document.scrub to also allow
    removing page thumbnail images
  * Improved documentation for how to add valid text marker
    annotations for non-horizontal text
- from v1.18.6
  * Introduced Python type hinting
  * Fixed issue #812.
  * Invalid document metadata previously prevented opening some
    documents at all. This error has been removed.
  * Text search and text extraction will make no rectangle
    containment checks at all if the default clip=None is used.
  * Fixed issue #785.
  * Corrected a parameter check error.
  * Added an option to set the desired line height for text boxes
  * Changed text position retrieval to better cope with Tesseract's
    glyphless font.
  * Added an option to choose the prefix of new annotations,
    fields and links for providing unique annotation ids
  * Added getting and setting color and text properties for
    Table of Contents items for PDFs
  * Added PDF page label handling: Page.get_label() returns the
    page label, Document.get_page_numbers return all page numbers
    having a specified label, and Document.set_page_labels adds
    or updates a PDF's page label definition.
- from v1.18.5
  * Apart from several fixes, this version also focusses on several
    minor, but important feature improvements.
    Among the latter is a more precise computation of proper line
    heights and insertion points for writing / inserting text.
    As opposed to using font-agnostic constants, these values are
    now taken from the font's properties.
  * By using "small glyph heights" option, the full page text can
    be extracted.
  * Fixed issue #768.
  * Fixed issue #750.
  * The "dict", "rawdict" and corresponding JSON output variants
    now have two new span keys: "ascender" and "descender".
    These floats represent special font properties which can be
    used to compute bboxes of spans or characters of exactly
    fontsize height (as opposed to the default line height).
    An example algorithm is shown in section "Span Dictionary"
    here. Also improved the detection and correction of
    ill-specified ascender / descender values encountered
    in some fonts.
  * Added a new, experimental Tools.set_small_glyph_heights. This
    method sets or unsets a global parameter to always compute
    bboxes with fontsize height. If "on", text searching and all
    text extractions will returned rectangles, bboxes and quads
    with a smaller height.
  * Fixed issue #728.
  * Changed fill color logic of 'Polyline' annotations: this
    parameter now only pertains to line end symbols --
    the annotation itself can no longer have a fill color
  * Changed Page.getImageBbox to also compute the bbox if the image
    is contained in an XObject.
  * Changed Shape.insertTextbox, resp. Page.insertTextbox, resp.
    TextWriter.fillTextbox to respect font's properties "ascender" /
    "descender" when computing line height and insertion point.
    This should no longer lead to line overlaps for multi-line output.
    These methods used to ignore font specifics and used constant
    values instead.
- from v1.18.4
  * Adds several features to support PDF Optional Content, including
    OCMDs (Optional Content Membership Dictionaries) with the full
    scope of "visibility expressions" (PDF key /VE), text insertions
    (including the TextWriter class) and drawings.
  * Freetext annotations now support an uncolored rectangle when
    fill_color=None.
  * UTF-8 encoding errors are now handled for HTML / XML Page.getText.
  * Empty values are no longer stored in the PDF /Info metadata
    dictionary.
  * Added new methods Document.set_oc and Document.get_oc to set or
    get optional content references for existing image and form
    XObjects. These methods are similar to the same-named methods
    of Annot.
  * Added Document.set_ocmd, Document.get_ocmd for handling OCMDs.
  * Added Optional Content support for text insertion and drawing.
  * Added new method Page.deleteWidget, which deletes a form field
    from a page. This is analogous to deleting annotations.
  * Added support for Popup annotations. This includes defining
    the Popup rectangle and setting the Popup to open or closed.
    Methods / attributes Annot.set_popup, Annot.set_open,
    Annot.has_popup, Annot.is_open, Annot.popup_rect, Annot.popup_xref
  * Annot methods and attributes converted to lower case with
    underscores, while keeping UPPERCASE for the constants.
    Old names will remain available to prevent code breaks, but they
    will no longer be mentioned in the documentation.
- from v1.18.3
  * Introduces support for PDF's Optional Content concept.
    This includes several new Document methods for inquiring and setting
    optional content status and adding optional content
    configurations and groups. In addition, images, form XObjects
    and annotations now can be bound to optional content specifications.
  * Fixed issue #714.
  * Fixed issue #711.
  * If a PDF user password, but no owner password is supplied nor
    present, then the user password is also used as the owner password.
  * Fixed expand and deflate parameters of methodsDocument.save
    and Document.write. Individual image and font compression should
    now finally work.
- from v1.18.2
  * Contains some interesting improvements for text searching: any
    number of search hits is now returned and the hit_max parameter
    was removed. The new clip parameter in addition allows to restrict
    the search area. Searching now detects hyphenations at line breaks
    and accordingly finds hyphenated words.
  * If using quads=False in text searching, then overlapping rectangles
    on the same line are joined. Previously, parts of the search string,
    which belonged to different "marked content" items, each generated
    their own rectangle -- just as if occurring on separate lines.
  * Added Document.isRepaired, which is true if the PDF was
    repaired on open.
  * Added Document.setXmlMetadata which either updates or creates
    PDF XML metadata
  * Added Document.getXmlMetadata returns PDF XML metadata.
  * Changed creation of PDF documents: they will now always carry a
    PDF identification (/ID field) in the document trailer
  * Changed Page.searchFor: a new parameter clip is accepted to
    restrict the search to this rectangle. Correspondingly, the
    attribute TextPage.rect is now respected by TextPage.search.
  * Changed parameter hit_max in Page.searchFor and TextPage.search
    is now obsolete: methods will return all hits.
  * Changed character selection criteria in Page.getText: a character
    is now considered to be part of a clip if its bbox is fully
    contained. Before this, a non-empty intersection was sufficient.
  * Changed Document.scrub to support a new option redact_images.
- from v1.18.1
  * Detects and recovers from more cyclic resource dependencies
    in PDF pages and for the first time reports them in the
    MuPDF warnings store.
  * Fixed issue #686.
  * Added opacity options for the Shape class: Stroke and fill
    colors can now be set to some transparency value.
    This means that all Page draw methods, methods
    Page.insertText, Page.insertTextbox, Shape.finish,
    Shape.insertText, and Shape.insertTextbox support two
    new parameters: stroke_opacity and fill_opacity.
  * Added new parameter mask to Page.insertImage for
    optionally providing an external image mask
  * Added Annot.soundGet for extracting the sound of an audio
    annotation.
- from v1.18.0
  * Supports MuPDF v1.18
  * An upstream bug occurred occasionally for some pages only
    and seems to be fixed now: page layout should no longer
    be ruined in these cases.
  * Unsuccessful storage allocations should now always lead to
    exceptions (circumvention of an upstream bug intermittently
    crashing the interpreter).
  * Pixmap size is now based on size_t instead of int in C and
    should be correct even for extremely large pixmaps
  * Specification of dashes for PDF drawing insertion should now
    correctly reflect the PDF spec
  * A memory leakage in Page.insert_pdf has been removed
  * Added keyword "images" to Page.apply_redactions for
    fine-controlling the handling of images
  * Added Annot.getText and Annot.getTextbox, which offer
    the same functionality as the Page versions
  * Added key "number" to the block dictionaries of Page.getText /
    Annot.getText for options "dict" and "rawdict"
  * Added glyph_name_to_unicode and unicode_to_glyph_name.
    Both functions do not really connect to a specific font and
    are now independently available, too.
    The data are now based on the Adobe Glyph List.
  * Added convenience functions adobe_glyph_names and
    adobe_glyph_unicodes which return the respective available data
  * Added Page.getDrawings which returns details of drawing
    operations on a document page. Works for all document types
  * Improved performance of Document.insert_pdf.
    Multiple object copies are now also suppressed across multiple
    separate insertions from the same source. This saves time,
    memory and target file size. Previously this mechanism was only
    active within each single method execution. The feature can also
    be suppressed with the new method bool parameter final=1,
    which is the default.
  * For PNG images created from pixmaps, the resolution (dpi) is
    now automatically set from the respective Pixmap.xres and
    Pixmap.yres values

-------------------------------------------------------------------
Wed Sep 23 12:34:51 UTC 2020 - Dirk Mueller <dmueller@suse.com>

- update to 1.17.4:
  * 4th bugfix release over 1.17, which provided these highlights:
  **Added** extended language support for annotations and widgets: a mixture of
  Latin, Greece, Russian, Chinese, Japanese and Korean characters can now be
  used in 'FreeText' annotations and text widgets. No special arrangement is
  required to use it.
  * Faster page access is implemented for documents supporting a "chapter"
  structure. This applies to EPUB documents currently. This comes with several
  new :ref:`Document` methods and changes for :meth:`Document.loadPage` and the
  "indexed" page access *doc[n]*: In addition to specifying a page number as
  before, a tuple *(chaper, pno)* can be specified to identify the desired
  page.

  * **Changed:** Improved support of redaction annotations: images overlapped by
  redactions are **permanantly modified** by erasing the overlap areas. Also
  links are removed if overlapped by redactions. This is now fully in sync with
  PDF specifications.


-------------------------------------------------------------------
Fri Mar 27 09:27:34 UTC 2020 - Marketa Calabkova <mcalabkova@suse.com>

- Update to 1.16.14
  * Added JavaScript support to PDF form fields
  * Added a new form field method, which resets the field value to its default.
  * Added :meth:`Page.setMediaBox` for changing the physical PDF page size.
  * Added method which returns a list of Form XObjects of the page.
  * Added advanced graphics features to control the anti-aliasing values
  * Added :meth:`Document.scrub` which removes potentially sensitive data from a PDF.
  * Changed text marker annotations to accept parameters beyond just 
    quadrilaterals such that now text lines between two given points can be marked.
  * Added :meth:`Annot.setBlendMode` to set the annotation's blend mode.

-------------------------------------------------------------------
Tue Feb 25 12:22:02 UTC 2020 - Yunhe Guo <i@guoyunhe.me>

- Version update to 1.16.11
  * Add redact/replace support
  * Fix PolygonAnnotation

-------------------------------------------------------------------
Wed Jan 15 11:54:42 UTC 2020 - Marketa Calabkova <mcalabkova@suse.com>

- update to 1.16.10
  * PyMuPDF can also be used as a module in the commandline using 
    "python -m fitz"
  * Support for Python 3.4 has been dropped.

-------------------------------------------------------------------
Wed Oct  2 11:25:50 UTC 2019 - Yunhe Guo <i@guoyunhe.me>

- Version update to 1.16.3
  * significant performance improvements for dict / rawdict text
    extraction
  * Page.getText() now support text extraction for "blocks" and
    "words" 

-------------------------------------------------------------------
Tue Sep 17 21:26:39 UTC 2019 - Yunhe Guo <i@guoyunhe.me>

- Version update to 1.16.2
  * Fix memory leak with getText(“rawDICT”)

-------------------------------------------------------------------
Sat Sep  7 14:06:18 UTC 2019 - Yunhe Guo <i@guoyunhe.me>

- Add %check step
- Change category to Development/Libraries/Python
- python-PyMuPDF-doc should be noarch

-------------------------------------------------------------------
Fri Sep  6 09:07:26 UTC 2019 - Yunhe Guo <i@guoyunhe.me>

- Version update to 1.16.1
  * Minor Enhancements and Fixes
  * Full PDF Password Protection
  * Fixing issues #352, #353 and #354
- Split doc package

-------------------------------------------------------------------
Tue Jul 30 11:17:47 UTC 2019 - pgajdos@suse.com

- version update to 1.14.19
  * minor fixes
  * added method to check PDF signature status (#326)

-------------------------------------------------------------------
Thu Jul 18 08:02:49 UTC 2019 - Yunhe Guo <i@guoyunhe.me>

- Version 1.14.18
  * Update README.md

-------------------------------------------------------------------
Sat Jul  6 07:58:25 UTC 2019 - Yunhe Guo <i@guoyunhe.me>

- Version 1.14.17
  * Added method Document.fullcopyPage to make full page copies within
    a PDF (not just copied references as Document.copyPage does).
  * Changed methods Page.getPixmap, Document.getPagePixmap to now use
    alpha=False as default.
  * Changed text extraction: the span dictionary now (again) contains
    its rectangle under the bbox key.
  * Changed methods Document.movePage and Document.copyPage to use
    direct functions instead of wrapping Document.select - similar to
    Document.deletePage in v1.14.16.
  * The GitHub repo no longer contains interface files generated by SWIG
    (fitz.py, fitz_wrap.c). This allows easier tracking of inter-version
    source differences which is needed by providers of various Linux
    platforms. The PyPI source distribution still has the previous
    structure which includes those generated files.
- Add swig and libpng16 build requires
- Removed Python2 package since upstream doesn't support it anymore.

-------------------------------------------------------------------
Sun Jun  2 12:38:08 UTC 2019 - Jan Engelhardt <jengelh@inai.de>

- Trim bias and conjecture from descriptions.

-------------------------------------------------------------------
Wed May 29 10:18:57 UTC 2019 - Yunhe Guo <i@guoyunhe.me>

- Version 1.14.16
  * Recode PDF delete page

-------------------------------------------------------------------
Thu May 23 07:28:09 UTC 2019 - Yunhe Guo <i@guoyunhe.me>

- Version 1.14.15
  * Fix utils.updateRect exception
  * Draw a shape without outlines
  * Fix Line cap and Line join

-------------------------------------------------------------------
Thu Apr 11 07:52:40 UTC 2019 - Tomáš Chvátal <tchvatal@suse.com>

- Run spec-cleaner
- Use freetype2 not old freetype1

-------------------------------------------------------------------
Wed Apr 10 13:17:25 UTC 2019 - Yunhe Guo <i@guoyunhe.me>

- Version 1.14.14
  * Fix bug in Link target point calculation

-------------------------------------------------------------------
Mon Apr  8 18:38:22 UTC 2019 - Yunhe Guo <i@guoyunhe.me>

- Version 1.14.13
  * For binary, memory-based input to most methods, now alsoio.BytesIO objects
    are accepted.
  * Fixed a bug not correctly showing inserted images with maintained aspect
    ratio.
- For earlier changelog, see https://github.com/pymupdf/PyMuPDF/releases
