Index: scikit-umfpack-0.3.2/scikits/umfpack/tests/test_interface.py
===================================================================
--- scikit-umfpack-0.3.2.orig/scikits/umfpack/tests/test_interface.py
+++ scikit-umfpack-0.3.2/scikits/umfpack/tests/test_interface.py
@@ -3,7 +3,7 @@ from __future__ import division, print_f
 import warnings
 import unittest
 
-from numpy.testing import assert_allclose, run_module_suite, dec
+from numpy.testing import assert_allclose, run_module_suite
 from numpy.linalg import norm as dense_norm
 
 from scipy.sparse import csc_matrix, spdiags, SparseEfficiencyWarning
@@ -47,7 +47,7 @@ class TestSolvers(unittest.TestCase):
         x = um.spsolve(a, b)
         assert_allclose(a*x, b)
 
-    @dec.skipif(_is_32bit_platform)
+    @unittest.skipIf(_is_32bit_platform, reason="requires 64 bit platform")
     def test_solve_complex_int64_umfpack(self):
         # Solve with UMFPACK: double precision complex, int64 indices
         a = _to_int64(self.a.astype('D'))
@@ -62,7 +62,7 @@ class TestSolvers(unittest.TestCase):
         x = um.spsolve(a, b)
         assert_allclose(a*x, b)
 
-    @dec.skipif(_is_32bit_platform)
+    @unittest.skipIf(_is_32bit_platform, reason="requires 64 bit platform")
     def test_solve_int64_umfpack(self):
         # Solve with UMFPACK: double precision, int64 indices
         a = _to_int64(self.a.astype('d'))
@@ -88,7 +88,7 @@ class TestSolvers(unittest.TestCase):
         x2 = lu.solve(self.b2)
         assert_allclose(a*x2, self.b2)
 
-    @dec.skipif(_is_32bit_platform)
+    @unittest.skipIf(_is_32bit_platform, reason="requires 64 bit platform")
     def test_splu_solve_int64(self):
         # Prefactorize (with UMFPACK) matrix with int64 indices for solving with
         # multiple rhs
Index: scikit-umfpack-0.3.2/scikits/umfpack/tests/test_umfpack.py
===================================================================
--- scikit-umfpack-0.3.2.orig/scikits/umfpack/tests/test_umfpack.py
+++ scikit-umfpack-0.3.2/scikits/umfpack/tests/test_umfpack.py
@@ -8,7 +8,7 @@ import random
 import unittest
 import warnings
 
-from numpy.testing import assert_array_almost_equal, run_module_suite, dec
+from numpy.testing import assert_array_almost_equal, run_module_suite
 
 from scipy import rand, matrix, diag, eye
 from scipy.sparse import csc_matrix, spdiags, SparseEfficiencyWarning
@@ -51,7 +51,7 @@ class TestScipySolvers(_DeprecationAccep
         x = linsolve.spsolve(a, b)
         assert_array_almost_equal(a*x, b)
 
-    @dec.skipif(_is_32bit_platform)
+    @unittest.skipIf(_is_32bit_platform, reason="requires 64 bit platform")
     def test_solve_complex_long_umfpack(self):
         # Solve with UMFPACK: double precision complex, long indices
         linsolve.use_solver(useUmfpack=True)
@@ -68,7 +68,7 @@ class TestScipySolvers(_DeprecationAccep
         x = linsolve.spsolve(a, b)
         assert_array_almost_equal(a*x, b)
 
-    @dec.skipif(_is_32bit_platform)
+    @unittest.skipIf(_is_32bit_platform, reason="requires 64 bit platform")
     def test_solve_long_umfpack(self):
         # Solve with UMFPACK: double precision
         linsolve.use_solver(useUmfpack=True)
@@ -96,7 +96,7 @@ class TestScipySolvers(_DeprecationAccep
         x2 = solve(self.b2)
         assert_array_almost_equal(a*x2, self.b2)
 
-    @dec.skipif(_is_32bit_platform)
+    @unittest.skipIf(_is_32bit_platform, reason="requires 64 bit platform")
     def test_factorized_long_umfpack(self):
         # Prefactorize (with UMFPACK) matrix for solving with multiple rhs
         linsolve.use_solver(useUmfpack=True)
@@ -151,7 +151,7 @@ class TestFactorization(_DeprecationAcce
 
             assert_array_almost_equal(P*R*A*Q,L*U)
 
-    @dec.skipif(_is_32bit_platform)
+    @unittest.skipIf(_is_32bit_platform, reason="requires 64 bit platform")
     def test_complex_int64_lu(self):
         # Getting factors of complex matrix with long indices
         umfpack = um.UmfpackContext("zl")
@@ -192,7 +192,7 @@ class TestFactorization(_DeprecationAcce
 
             assert_array_almost_equal(P*R*A*Q,L*U)
 
-    @dec.skipif(_is_32bit_platform)
+    @unittest.skipIf(_is_32bit_platform, reason="requires 64 bit platform")
     def test_real_int64_lu(self):
         # Getting factors of real matrix with long indices
         umfpack = um.UmfpackContext("dl")
