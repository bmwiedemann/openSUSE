--- ./holidays/countries/israel.py.orig	2021-02-08 08:47:30.109263136 +0100
+++ ./holidays/countries/israel.py	2021-02-08 08:58:05.624157929 +0100
@@ -13,7 +13,7 @@
 
 
 from convertdate import gregorian, hebrew
-from convertdate.holidays import hanukkah, lag_baomer, passover, purim, \
+from convertdate.holidays import hanukkah, passover, purim, \
     rosh_hashanah, shavuot, sukkot, yom_kippur
 from datetime import date
 from dateutil.relativedelta import relativedelta as rd
@@ -44,37 +44,10 @@
         self[passover_start_dt + rd(days=6)] = name + ' - Eve'
         self[passover_start_dt + rd(days=7)] = name
 
-        # Memorial Day
-        name = 'Memorial Day'
-        year, month, day = gregorian.from_jd(
-            hebrew.to_jd_gregorianyear(year, hebrew.IYYAR, 3))
-        self[date(year, month, day) + rd(days=1)] = name
-
-        observed_delta = 0
-        if self.observed:
-            day_in_week = date(year, month, day).weekday()
-            if day_in_week in (2, 3):
-                observed_delta = - (day_in_week - 1)
-            elif 2004 <= year and day_in_week == 5:
-                observed_delta = 1
-
-            if observed_delta != 0:
-                self[date(year, month, day) + rd(days=observed_delta + 1)] = \
-                    name + ' (Observed)'
-
         # Independence Day
         name = 'Independence Day'
         self[date(year, month, day) + rd(days=2)] = name
 
-        if self.observed and observed_delta != 0:
-            self[date(year, month, day) + rd(days=observed_delta + 2)] = \
-                name + ' (Observed)'
-
-        # Lag Baomer
-        name = "Lag B'Omer"
-        year, month, day = lag_baomer(year, eve=False)
-        self[date(year, month, day)] = name
-
         # Shavuot
         name = 'Shavuot'
         year, month, day = shavuot(year, eve=True)
--- tests.py.orig	2021-02-08 09:08:55.924307292 +0100
+++ tests.py	2021-02-08 09:13:07.820186641 +0100
@@ -6152,44 +6152,6 @@
                 self.assertIn(date(2010, 2, 26), self.holidays)
 
 
-class TestIsrael(unittest.TestCase):
-    def test_memorial_day(self):
-        self._test_observed_holidays('Memorial Day')
-
-    def test_independence_day(self):
-        self._test_observed_holidays('Independence Day')
-
-    def _test_observed_holidays(self, holiday_name):
-        days_delta = 0 if holiday_name == 'Memorial Day' else 1
-
-        # Postponed
-        il_holidays = holidays.IL(years=[2017], observed=True)
-        official_memorial_day = date(2017, 4, 30) + relativedelta(days=days_delta)
-        observed_memorial_day = date(2017, 5, 1) + relativedelta(days=days_delta)
-        self.assertIn(official_memorial_day, il_holidays)
-        self.assertIn(holiday_name, il_holidays[official_memorial_day])
-        self.assertIn(observed_memorial_day, il_holidays)
-        self.assertIn(holiday_name + ' (Observed)', il_holidays[observed_memorial_day])
-
-        # Earlier
-        il_holidays = holidays.IL(years=[2018], observed=True)
-        official_memorial_day = date(2018, 4, 19) + relativedelta(days=days_delta)
-        observed_memorial_day = date(2018, 4, 18) + relativedelta(days=days_delta)
-        self.assertIn(official_memorial_day, il_holidays)
-        self.assertIn(holiday_name, il_holidays[official_memorial_day])
-        self.assertIn(observed_memorial_day, il_holidays)
-        self.assertIn(holiday_name + ' (Observed)', il_holidays[observed_memorial_day])
-
-        # On time
-        il_holidays = holidays.IL(years=[2020], observed=True)
-        official_memorial_day = date(2020, 4, 28) + relativedelta(days=days_delta)
-        self.assertIn(official_memorial_day, il_holidays)
-        self.assertIn(holiday_name, il_holidays[official_memorial_day])
-
-        for names in il_holidays.values():
-            self.assertNotIn(holiday_name + ' (Observed)', names)
-
-
 class TestGreece(unittest.TestCase):
     def setUp(self):
         self.gr_holidays = holidays.GR()
