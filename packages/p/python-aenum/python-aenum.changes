-------------------------------------------------------------------
Thu Jan 19 17:25:19 UTC 2023 - Daniel Garcia <daniel.garcia@suse.com>

- Update to 3.1.11:
  * update MANIFEST file
- 3.1.10
  * improve tests
- 3.1.9
  * fail gracefully for badly written EnumType
- 3.1.8
  * recalculate bits used after all flags created (sometimes needed when a
    custom `__new__` is in place.
- 3.1.7
  * update flag creation to (possibly) add bitwise operator methods to newly
    created flags
  * update extend_enum() to work with 3.11 flags
- 3.1.6
  * Update `dir()` on mixed enums to include mixed data type methods and
    attributes.

  * Rename `enum_property` to `property` to match stdlib.  Recommended usage is
    `aenum.property` (prefix with module name).

  * Remove quadritic creation behavior.

  BREAKING CHANGE BUG FIX that won't affect most people

  Enums with a custom `__new__` that:

  - use the enum machinery to generate the values; AND
  - have keyword arguments set to a default (like `None`)

  will fail to generate a missing value.  To fix: remove the default value and
  instead specify it on the member creation line.

  BREAKING CHANGE

  In Python 3.11 the `str()` of mixed enums will now match its `format()` which
  will be the normal `str()` of the data type -- so for an IntEnum you'll see
  `5` instead of `Perm.R|X`.  This affects IntEnum, StrEnum, and IntFlag.

-------------------------------------------------------------------
Mon Jan 10 14:57:17 UTC 2022 - Dirk Müller <dmueller@suse.com>

- update to 3.1.5:
  * fix support of `auto()` kwds
  * rename `aenum.property` to `aenum.enum_property`
  * fix `extend_enum()` for unhashable values
  * fix `extend_enum()` for most cases

-------------------------------------------------------------------
Sat Aug 28 20:45:16 UTC 2021 - Matej Cepl <mcepl@suse.com>

- Convert test script into proper unittest module and then skip
  failing tests (gh#ethanfurman/aenum#12):
  - tempdir_missing.patch
  - skip_failing_testcases.patch

-------------------------------------------------------------------
Tue Aug 24 11:38:26 UTC 2021 - John Paul Adrian Glaubitz <adrian.glaubitz@suse.com>

- Update to 3.1.0:
  * redo EnumConstants
  * add `__set_name__` to `constant`
  * add new test; make re strings raw

-------------------------------------------------------------------
Tue Apr 13 04:55:38 UTC 2021 - Steve Kowalik <steven.kowalik@suse.com>

- Update to 3.0.0:
  * The more esoteric method of creating Enums have been modified or removed
  * Member creation has been redone to match Python 3.10's methods.
  * enum_property() has been renamed to property() (old name still available,
    but deprecated).
  * bin() replacement shows negative integers in twos-complement
  * call __init_subclass__ after members have been added, and in Pythons < 3.6
  * call __set_name__ in Pythons < 3.6
  * do not convert/disallow private names
  * add iteration/len support to NamedConstant
  * add support to Constant to retrieve members by value
  * add pickle/deepcopy support to Constant
  * add support for Constant to use other Constant values
  * AutoNumber and auto() now work together 
- Update URL now that bitbucket is dead.

-------------------------------------------------------------------
Wed Dec 11 11:56:29 UTC 2019 - Tomáš Chvátal <tchvatal@suse.com>

- Update to 2.2.3:
  * Various minor fixes

-------------------------------------------------------------------
Mon Jul 29 14:51:06 UTC 2019 - pgajdos@suse.com

- version update to 2.2.1
  2.2.1
  =====
  . allow Enums to be called without a value
  . allow Enum name use while constructing Enum (Python 3.4+ only)
  2.2.0
  =====
  BREAKING CHANGE
  ---------------
  . In Python 3+ classes defined inside an Enum no longer become members by
    default; in Python 2 they still become members, but see below.
    For cross-compatibility and full control two decorators are provided:
    - @member  --> forces item to become a member
    - @nonmember  --> excludes item from becoming a member
        dark = 3
  2.1.4
  =====
  EnumMeta:
  - change __member_new__ to __new_member__ (as the stdlib enum does)
  - assign member name to enum() instances (an Enum helper for defining members)
  - handle empty iterables when using functional API
  - make auto() work with previous enum members
  - keep searching mixins until base class is found
  Enum:
  - fix bug in Flag checks (ensure it is a Flag before checking the name)
  - add multiple mixin support
  - do not allow blank names (functional API)
  - raise TypeError if _missing_* returns wrong type
  - fix __format__ to honor custom __str__
  extend_enum:
  - support stdlib Enums
  - use _generate_next_value_ if value not provided
  general:
  - standardize exception formatting
  - use getfullargspec() in Python 3 (avoids deprecation warnings)

-------------------------------------------------------------------
Tue Dec  4 12:45:29 UTC 2018 - Matej Cepl <mcepl@suse.com>

- Remove superfluous devel dependency for noarch package

-------------------------------------------------------------------
Wed May 23 19:09:16 UTC 2018 - toddrme2178@gmail.com

- Update to version 2.1.0
  * support Flags being combined with other data types:
  * add _create_pseudo_member_values_ 
  * add default __new__ and temporary _init_

-------------------------------------------------------------------
Thu Nov 16 17:44:07 UTC 2017 - toddrme2178@gmail.com

- Initial version
