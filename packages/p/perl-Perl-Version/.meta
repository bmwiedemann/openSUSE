<package name="perl-Perl-Version" project="openSUSE:Factory">
  <title>Parse and manipulate Perl version strings</title>
  <description>Perl::Version provides a simple interface for parsing, manipulating and
formatting Perl version strings.

Unlike version.pm (which concentrates on parsing and comparing version
strings) Perl::Version is designed for cases where you'd like to parse a
version, modify it and get back the modified version formatted like the
original.

For example:

    my $version = Perl::Version-&gt;new( '1.2.3' );
    $version-&gt;inc_version;
    print &quot;$version\n&quot;;

prints

    1.3.0

whereas

    my $version = Perl::Version-&gt;new( 'v1.02.03' );
    $version-&gt;inc_version;
    print &quot;$version\n&quot;;

prints

    v1.03.00

Both are representations of the same version and they'd compare equal but
their formatting is different.

Perl::Version tries hard to guess and recreate the format of the original
version and in most cases it succeeds. In rare cases the formatting is
ambiguous. Consider

    1.10.03

Do you suppose that second component '10' is zero padded like the third
component? Perl::Version will assume that it is:

    my $version = Perl::Version-&gt;new( '1.10.03' );
    $version-&gt;inc_revision;
    print &quot;$version\n&quot;;

will print

    2.00.00

If all of the components after the first are the same length (two
characters in this case) and any of them begins with a zero Perl::Version
will assume that they're all zero padded to the same length.

The first component and any alpha suffix are handled separately. In each
case if either of them starts with a zero they will be zero padded to the
same length when stringifying the version.</description>
  <devel project="devel:languages:perl" package="perl-Perl-Version"/>
</package>
