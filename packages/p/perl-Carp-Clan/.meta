<package name="perl-Carp-Clan" project="openSUSE:Factory">
  <title>Carp::Clan Perl module</title>
  <description>This module is based on &quot;'Carp.pm'&quot; from Perl 5.005_03. It has been
modified to skip all package names matching the pattern given in the &quot;use&quot;
statement inside the &quot;'qw()'&quot; term (or argument list).

Suppose you have a family of modules or classes named &quot;Pack::A&quot;, &quot;Pack::B&quot;
and so on, and each of them uses &quot;'Carp::Clan qw(^Pack::);'&quot; (or at least
the one in which the error or warning gets raised).

Thus when for example your script &quot;tool.pl&quot; calls module &quot;Pack::A&quot;, and
module &quot;Pack::A&quot; calls module &quot;Pack::B&quot;, an exception raised in module
&quot;Pack::B&quot; will appear to have originated in &quot;tool.pl&quot; where &quot;Pack::A&quot; was
called, and not in &quot;Pack::A&quot; where &quot;Pack::B&quot; was called, as the unmodified
&quot;'Carp.pm'&quot; would try to make you believe ':-)'.

This works similarly if &quot;Pack::B&quot; calls &quot;Pack::C&quot; where the exception is
raised, etcetera.

In other words, this blames all errors in the &quot;'Pack::*'&quot; modules on the
user of these modules, i.e., on you. ';-)'

The skipping of a clan (or family) of packages according to a pattern
describing its members is necessary in cases where these modules are not
classes derived from each other (and thus when examining '@ISA' - as in the
original &quot;'Carp.pm'&quot; module - doesn't help).

The purpose and advantage of this is that a &quot;clan&quot; of modules can work
together (and call each other) and throw exceptions at various depths down
the calling hierarchy and still appear as a monolithic block (as though
they were a single module) from the perspective of the caller.

In case you just want to ward off all error messages from the module in
which you &quot;'use Carp::Clan'&quot;, i.e., if you want to make all error messages
or warnings to appear to originate from where your module was called (this
is what you usually used to &quot;'use Carp;'&quot; for ';-)'), instead of in your
module itself (which is what you can do with a &quot;die&quot; or &quot;warn&quot; anyway), you
do not need to provide a pattern, the module will automatically provide the
correct one for you.

I.e., just &quot;'use Carp::Clan;'&quot; without any arguments and call &quot;carp&quot; or
&quot;croak&quot; as appropriate, and they will automatically defend your module
against all blames!

In other words, a pattern is only necessary if you want to make several
modules (more than one) work together and appear as though they were only
one.

Forcing a Stack Trace
    As a debugging aid, you can force &quot;'Carp::Clan'&quot; to treat a &quot;croak&quot; as
    a &quot;confess&quot; and a &quot;carp&quot; as a &quot;cluck&quot;. In other words, force a detailed
    stack trace to be given. This can be very helpful when trying to
    understand why, or from where, a warning or error is being generated.

    This feature is enabled either by &quot;importing&quot; the non-existent symbol
    'verbose', or by setting the global variable &quot;'$Carp::Clan::Verbose'&quot;
    to a true value.

    You would typically enable it by saying

        use Carp::Clan qw(verbose);

    Note that you can both specify a &quot;family pattern&quot; and the string
    &quot;verbose&quot; inside the &quot;'qw()'&quot; term (or argument list) of the &quot;use&quot;
    statement, but consider that a pattern of packages to skip is pointless
    when &quot;verbose&quot; causes a full stack trace anyway.</description>
  <devel project="devel:languages:perl" package="perl-Carp-Clan"/>
</package>
