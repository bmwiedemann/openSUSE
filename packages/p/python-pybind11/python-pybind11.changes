-------------------------------------------------------------------
Wed Sep 17 15:21:56 UTC 2025 - Markéta Machová <mmachova@suse.com>

- update to 3.0.1
  * Pybind11 3.0 includes an ABI bump, the first required bump in
    many years on Unix
  * This release contains the smart-holder branch, multi-phase init
    and subinterpreter support, py::native_enum, an interface to
    warnings, typing improvements, and more
  * CMake now defaults to FindPython mode
  * Support for Python 3.14, 3.14t, GraalPy, and PyPy 3.11 has been
    added, while legacy support for Python 3.7, PyPy 3.8/3.9, and
    CMake <3.15 has been removed
  * Please see upstream changelog for a more detailed info

-------------------------------------------------------------------
Mon Sep 16 08:13:17 UTC 2024 - Dirk Müller <dmueller@suse.com>

- update to 2.13.6:
  * A new self._pybind11_conduit_v1_() method is automatically
    added to all py::class_-wrapped types, to enable type-safe
    interoperability between different independent Python/C++
    bindings systems, including pybind11 versions with different
    PYBIND11_INTERNALS_VERSION's. Supported on pybind11 2.11.2,
    2.12.1, and 2.13.6+. #5296
  * Using __cpp_nontype_template_args instead of
    __cpp_nontype_template_parameter_class. #5330
  * Properly translate C++ exception to Python exception when
    creating Python buffer from wrapped object. #5324
  * Adds an answer (FAQ) for "What is a highly conclusive and
    simple way to find memory leaks?". #5340

-------------------------------------------------------------------
Sat Aug 31 12:20:46 UTC 2024 - Dirk Müller <dmueller@suse.com>

- update to 2.13.5:
  * Fix includes when using Windows long paths (\?\ prefix).
  * Support -Wpedantic in C++20 mode. #5322
  * Fix and test <ranges> support for py::tuple and py::list.
  * Fix paths with spaces, including on Windows. (Replaces
    regression from #5302) #4874
  * Remove repetitive words. #5308
  * Quote paths from pybind11-config #5302
  * Fix typo in Emscripten support when in config mode (CMake)
    #5301
  * A pybind11::detail::type_caster_std_function_specializations
    feature was added, to support specializations for
    std::function's with return types that require custom to-
    Python conversion behavior (to primary use case is to catch
    and convert exceptions). #4597
  * Use PyMutex instead of std::mutex for internal locking in the
    free-threaded build. #5219
  * Add a special type annotation for C++ empty tuple. #5214
  * When compiling for WebAssembly, add the required exception
    flags (CMake 3.13+). #5298
  * Make gil_safe_call_once_and_store thread-safe in free-
    threaded CPython. #5246
  * A missing #include <algorithm> in pybind11/typing.h was added
    to fix build errors (in case user code does not already
    depend on that include). #5208
  * Fix regression introduced in #5201 for GCC<10.3 in C++20
    mode. #5205
  * Remove extra = when assigning flto value in the case for
    Clang in CMake. #5207
  * Add support for Typing.Callable[..., T]. #5202
  * Avoid aligned allocation in free-threaded build in order to
    support macOS versions before 10.14. #5200
  * Support free-threaded CPython (3.13t). Add
    py::mod_gil_not_used() tag to indicate if a module supports
    running with the GIL disabled. #5148
  * Support for Python 3.6 was removed. (Official end-of-life:
    2021-12-23). #5177
  * py::list gained a .clear() method. #5153
  * Support for Union, Optional, type[T], typing.TypeGuard,
    typing.TypeIs, typing.Never, typing.NoReturn and
    typing.Literal was added to pybind11/typing.h. #5166 #5165
    #5194 #5193 #5192
  * In CMake, if PYBIND11_USE_CROSSCOMPILING is enabled, then
    CMAKE_CROSSCOMPILING will be respected and will keep pybind11
    from accessing the interpreter during configuration. Several
    CMake variables will be required in this case, but can be
    deduced from the environment variable SETUPTOOLS_EXT_SUFFIX.
    The default (currently OFF) may be changed in the future.
    #5083
  * A refcount bug (leading to heap-use-after-free) involving
    trampoline functions with PyObject * return type was fixed.
    #5156
  * Return py::ssize_t from .ref_count() instead of int. #5139
  * A subtle bug involving C++ types with unusual operator&
    overrides was fixed. #5189
  * Support Python 3.13 with minor fix, add to CI. #5127
  * Fix mistake affecting old cmake and old boost. #5149
  * Build docs updated to feature scikit-build-core and meson-
    python, and updated setuptools instructions. #5168

-------------------------------------------------------------------
Sat Apr  6 12:08:48 UTC 2024 - Dirk Müller <dmueller@suse.com>

- update to 2.12.0:
  * pybind11 now supports compiling for NumPy 2.
    However, if you experience issues you can define
    PYBIND11_NUMPY_1_ONLY to disable the new support for now, but
    this will be removed in the future. #5050
  * pybind11/gil_safe_call_once.h was added (it needs to be
    included explicitly). The primary use case is GIL-safe
    initialization of C++ static variables. #4877
  * Support move-only iterators in py::make_iterator,
    py::make_key_iterator, py::make_value_iterator. #4834
  * Two simple py::set_error() functions were added and the
    documentation was updated accordingly. In particular,
    py::exception<>::operator() was deprecated (use one of the
    new functions instead). The documentation for py::exception<>
    was further updated to not suggest code that may result in
    undefined behavior. #4772
  * Removes potential for Undefined Behavior during process
    teardown. #4897
  * Improve compatibility with the nvcc compiler (especially CUDA
    12.1/12.2). #4893
  * pybind11/numpy.h now imports NumPy's multiarray and _internal
    submodules with paths depending on the installed version of
    NumPy (for compatibility with NumPy 2). #4857
  * Builtins collections names in docstrings are now consistently
    rendered in lowercase (list, set, dict, tuple), in accordance
    with PEP 585. #4833
  * Added py::typing::Iterator<T>, py::typing::Iterable<T>. #4832
  * Render py::function as Callable in docstring. #4829
  * Also bump PYBIND11_INTERNALS_VERSION for MSVC, which unlocks
    two new features without creating additional
    incompatibilities. #4819
  * Guard against crashes/corruptions caused by modules built
    with different MSVC versions. #4779
  * A long-standing bug in the handling of Python multiple
    inheritance was fixed. See PR #4762 for the rather complex
    details. #4762
  * Fix bind_map with using declarations. #4952
  * Qualify py::detail::concat usage to avoid ADL selecting one
    from somewhere else, such as modernjson's concat. #4955
  * Use new PyCode API on Python 3.12+. #4916
  * Minor cleanup from warnings reported by Clazy. #4988
  * Remove typing and duplicate class_ for
    KeysView/ValuesView/ItemsView. #4985
  * Use PyObject_VisitManagedDict() and
    PyObject_ClearManagedDict() on Python 3.13 and newer. #4973
  * Update make_static_property_type() to make it compatible with
    Python 3.13. #4971
  * Render typed iterators for make_iterator, make_key_iterator,
    make_value_iterator. #4876
  * Add several missing type name specializations. #5073
  * Change docstring render for py::buffer, py::sequence and
    py::handle (to Buffer, Sequence, Any). #4831
  * Fixed base_enum.__str__ docstring. #4827
  * Enforce single line docstring signatures. #4735
  * Special 'typed' wrappers now available in typing.h to
    annotate tuple, dict, list, set, and function. #4259
  * Create handle_type_name specialization to type-hint variable
    length tuples. #5051
  * Setting PYBIND11_FINDPYTHON to OFF will force the old
    FindPythonLibs mechanism to be used. #5042
  * Skip empty PYBIND11_PYTHON_EXECUTABLE_LAST for the first
    cmake run. #4856
  * Fix FindPython mode exports & avoid pkg_resources if
    importlib.metadata available. #4941
  * Python_ADDITIONAL_VERSIONS (classic search) now includes
    3.12.
  * pybind11.pc is now relocatable by default as long as install
    destinations are not absolute paths. #4830
  * Correctly detect CMake FindPython removal when used as a
    subdirectory. #4806
  * Don't require the libs component on CMake 3.18+ when using
    PYBIND11_FINDPYTHON (fixes manylinux builds). #4805
  * pybind11_strip is no longer automatically applied when
    CMAKE_BUILD_TYPE is unset. #4780
  * Support DEBUG_POSFIX correctly for debug builds. #4761
  * Hardcode lto/thin lto for Emscripten cross-compiles. #4642
  * Upgrade maximum supported CMake version to 3.27 to fix
    CMP0148 warnings. #4786

-------------------------------------------------------------------
Mon Sep  4 19:14:31 UTC 2023 - Jan Engelhardt <jengelh@inai.de>

- Update to release 2.11.1
  * The newly added ``pybind11::detail::is_move_constructible``
    trait can be specialized for cases in which
    ``std::is_move_constructible`` does not work as needed.
  * ``format_descriptor<>`` & ``npy_format_descriptor<> PyObject *``
    specializations were added. The latter enables
    ``py::array_t<PyObject *>`` to/from-python conversions.
  * Cast errors now always include Python type information, even if
    PYBIND11_DETAILED_ERROR_MESSAGES is not defined. This increases
    binary sizes by ~1.5%.
 *  The docstring generation for the ``std::array``-list caster was
    changed to conform to PEP 593.

-------------------------------------------------------------------
Fri Apr 21 12:30:25 UTC 2023 - Dirk Müller <dmueller@suse.com>

- add sle15_python_module_pythons (jsc#PED-68)

-------------------------------------------------------------------
Thu Apr 13 22:43:32 UTC 2023 - Matej Cepl <mcepl@suse.com>

- Make calling of %{sle15modernpython} optional.

-------------------------------------------------------------------
Sun Mar 19 12:06:00 UTC 2023 - Dirk Müller <dmueller@suse.com>

- update to 2.10.4:
  * ``python3 -m pybind11`` gained a ``--version`` option (prints
    the version and exits).
  * Fix a warning when pydebug is enabled on Python 3.11.
  * Ensure ``gil_scoped_release`` RAII is non-copyable.
  * Ensure the tests dir does not show up with new versions of
    setuptools.
  * Better stacklevel for a warning in setuptools helpers.

-------------------------------------------------------------------
Thu Jan 12 17:50:05 UTC 2023 - Ben Greiner <code@bnavigator.de>

- Package new pkgconfig file gh#pybind/pybind11#4077
- PEP517 build
- Fix multibuild setup: unique packagename for test flavor required

-------------------------------------------------------------------
Wed Jan  4 19:48:22 UTC 2023 - Dirk Müller <dmueller@suse.com>

- update to 2.10.3:
  * Temporarily made our GIL status assertions (added in 2.10.2) disabled by
  default (re-enable manually by defining
  ``PYBIND11_ASSERT_GIL_HELD_INCREF_DECREF``, will be enabled in 2.11).
  * Improved error messages when ``inc_ref``/``dec_ref`` are called with an
  invalid GIL state.
  * Some minor touchups found by static analyzers.
  * ``scoped_interpreter`` constructor taking ``PyConfig``.
  * ``pybind11/eigen/tensor.h`` adds converters to and from
    ``Eigen::Tensor`` and
  ``Eigen::TensorMap``.
  * ``PyGILState_Check()``'s  were integrated to ``pybind11::handle``
  ``inc_ref()`` & ``dec_ref()``. The added GIL checks are guarded by
  ``PYBIND11_ASSERT_GIL_HELD_INCREF_DECREF``, which is the default only if
  ``NDEBUG`` is not defined. (Made non-default in 2.10.3, will be active in 2.11)
  * Add option for enable/disable enum members in docstring.
  * Fixed typing of ``KeysView``, ``ValuesView`` and ``ItemsView`` in
    ``bind_map``.
  * Fix segfault bug when passing foreign native functions to functional.h.
  * Build system improvements:
  * Support setting PYTHON_LIBRARIES manually for Windows ARM cross-
    compilation
  (classic mode).
  * Extend IPO/LTO detection for ICX (a.k.a IntelLLVM) compiler.
  * Allow calling ``find_package(pybind11 CONFIG)`` multiple times from
    separate
  directories in the same CMake project and properly link Python (new mode).
  * ``multiprocessing_set_spawn`` in pytest fixture for added safety.
  * Fixed a bug in two pybind11/tools cmake scripts causing "Unknown
    arguments specified" errors.
  * Version 2.10.1 (Oct 31, 2022)
  * This is the first version to fully support embedding the newly released
    Python 3.11.
  * Changes:
  * Allow ``pybind11::capsule`` constructor to take null destructor
    pointers.
  * ``embed.h`` was changed so that ``PYTHONPATH`` is used also with Python
    3.11
  (established behavior).
  * A ``PYBIND11_SIMPLE_GIL_MANAGEMENT`` option was added (cmake, C++
    define),
  along with many additional tests in ``test_gil_scoped.py``. The option may be
  useful to try when debugging GIL-related issues, to determine if the more
  complex default implementation is or is not to blame. See #4216 for
  background. WARNING: Please be careful to not create ODR violations when
  using the option: everything that is linked together with mutual symbol
  visibility needs to be rebuilt.
  * ``PYBIND11_EXPORT_EXCEPTION`` was made non-empty only under macOS. This
    makes
  Linux builds safer, and enables the removal of warning suppression pragmas for
  Windows.
  * Fixed a bug where ``UnicodeDecodeError`` was not propagated from various
  ``py::str`` ctors when decoding surrogate utf characters.
  * Revert perfect forwarding for ``make_iterator``. This broke at least one
  valid use case. May revisit later.
  * Fix support for safe casts to ``void*`` (regression in 2.10.0).
  * Fix ``char8_t`` support (regression in 2.9).
  * Unicode surrogate character in Python exception message leads to process
  termination in ``error_already_set::what()``.
  * Fix MSVC 2019 v.1924 & C++14 mode error for ``overload_cast``.
  * Make augmented assignment operators non-const for the object-api.
    Behavior
  was previously broken for augmented assignment operators.
  * Add proper error checking to C++ bindings for Python list append and
    insert.
  * Work-around for Nvidia's CUDA nvcc compiler in versions 11.4.0 - 11.8.0.
  * A workaround for PyPy was added in the ``py::error_already_set``
  implementation, related to PR `#1895 <https://github.com/pybind/pybind11/pull/1895>`_
  released with v2.10.0.
  * Fixed compiler errors when C++23 ``std::forward_like`` is available.
  * Properly raise exceptions in contains methods (like when an object in
    unhashable).
  * Further improve another error in exception handling.
  * ``get_local_internals()`` was made compatible with
  ``finalize_interpreter()``, fixing potential freezes during interpreter
  finalization.
  * Performance and style:
  * Reserve space in set and STL map casters if possible. This will prevent
  unnecessary rehashing / resizing by knowing the number of keys ahead of time
  for Python to C++ casting. This improvement will greatly speed up the casting
  of large unordered maps and sets.
  * GIL RAII scopes are non-copyable to avoid potential bugs.
  * Explicitly default all relevant ctors for pytypes in the
    ``PYBIND11_OBJECT``
  macros and enforce the clang-tidy checks ``modernize-use-equals-default`` in
  macros as well.
  * Optimize iterator advancement in C++ bindings.
  * Use the modern ``PyObject_GenericGetDict`` and
    ``PyObject_GenericSetDict``
  for handling dynamic attribute dictionaries.
  * Document that users should use ``PYBIND11_NAMESPACE`` instead of using
    ``pybind11`` when
  opening namespaces. Using namespace declarations and namespace qualification
  remain the same as ``pybind11``. This is done to ensure consistent symbol
  visibility.
  * Mark ``detail::forward_like`` as constexpr.
  * Optimize unpacking_collector when processing ``arg_v`` arguments.
  * Optimize casting C++ object to ``None``.

-------------------------------------------------------------------
Thu Sep 15 20:25:44 UTC 2022 - Ben Greiner <code@bnavigator.de>

- %pretrans must be lua
- requires python-rpm-macros >= 20220912 because of parameter in
  scriptlet
- Fix subdirectory links

-------------------------------------------------------------------
Wed Sep 14 21:02:16 UTC 2022 - Ben Greiner <code@bnavigator.de>

- Work around long standing rpm-directory-to-symlink-bug
  * https://docs.fedoraproject.org/en-US/packaging-guidelines/Directory_Replacement/
  * rh#447156
  * use shell instead of lua for pretrans scriptlet

-------------------------------------------------------------------
Sun Sep 11 00:15:11 UTC 2022 - Ben Greiner <code@bnavigator.de>

- Update to 2.10.0
  * Removed support for Python 2.7, Python 3.5, and MSVC 2015.
    Support for MSVC 2017 is limited due to availability of CI
    runners; we highly recommend MSVC 2019 or 2022 be used.
    Initial support added for Python 3.11.
  * New features:
    + py::anyset & py::frozenset were added, with copying (cast)
      to std::set (similar to set). #3901
    + Support bytearray casting to string. #3707
    + type_caster<std::monostate> was added. std::monostate is a
      tag type that allows std::variant to act as an optional, or
      allows default construction of a std::variant holding a
      non-default constructible type. #3818
    + pybind11::capsule::set_name added to mutate the name of the
      capsule instance. #3866
    + NumPy: dtype constructor from type number added, accessors
      corresponding to Python API dtype.num, dtype.byteorder,
      dtype.flags and dtype.alignment added. #3868
  * Changes:
    + Python 3.6 is now the minimum supported version. #3688 #3719
    + The minimum version for MSVC is now 2017. #3722
    + Fix issues with CPython 3.11 betas and add to supported test
      matrix. #3923
    + error_already_set is now safer and more performant,
      especially for exceptions with long tracebacks, by delaying
      computation. #1895
    + Improve exception handling in python str bindings. #3826
    + The bindings for capsules now have more consistent exception
      handling. #3825
    + PYBIND11_OBJECT_CVT and PYBIND11_OBJECT_CVT_DEFAULT macro
      can now be used to define classes in namespaces other than
      pybind11. #3797
    + Error printing code now uses
      PYBIND11_DETAILED_ERROR_MESSAGES instead of requiring
      NDEBUG, allowing use with release builds if desired. #3913
    + Implicit conversion of the literal 0 to pybind11::handle is
      now disabled. #4008
  * Bug fixes:
    + Fix exception handling when pybind11::weakref() fails. #3739
    + module_::def_submodule was missing proper error handling.
      This is fixed now. #3973
    + The behavior or error_already_set was made safer and the
      highly opaque "Unknown internal error occurred" message was
      replaced with a more helpful message. #3982
    + error_already_set::what() now handles non-normalized
      exceptions correctly. #3971
    + Support older C++ compilers where filesystem is not yet part
      of the standard library and is instead included in
      std::experimental::filesystem. #3840
    + Fix -Wfree-nonheap-object warnings produced by GCC by
      avoiding returning pointers to static objects with
      return_value_policy::take_ownership. #3946
    + Fix cast from pytype rvalue to another pytype. #3949
    + Ensure proper behavior when garbage collecting classes with
      dynamic attributes in Python >=3.9. #4051
    + A couple long-standing PYBIND11_NAMESPACE
      __attribute__((visibility("hidden"))) inconsistencies are
      now fixed (affects only unusual environments). #4043
    + pybind11::detail::get_internals() is now resilient to
      in-flight Python exceptions. #3981
    + Arrays with a dimension of size 0 are now properly converted
      to dynamic Eigen matrices (more common in NumPy 1.23). #4038
    + Avoid catching unrelated errors when importing NumPy. #3974
  * Performance and style:
    + Added an accessor overload of (object &&key) to reference
      steal the object when using python types as keys. This
      prevents unnecessary reference count overhead for attr,
      dictionary, tuple, and sequence look ups. Added additional
      regression tests. Fixed a performance bug the caused
      accessor assignments to potentially perform unnecessary
      copies. #3970
    + Perfect forward all args of make_iterator. #3980
    + Avoid potential bug in pycapsule destructor by adding an
      error_guard to one of the dtors. #3958
    + Optimize dictionary access in strip_padding for numpy. #3994
    + stl_bind.h bindings now take slice args as a const-ref.
      #3852
    + Made slice constructor more consistent, and improve
      performance of some casters by allowing reference stealing.
      #3845
    + Change numpy dtype from_args method to use const ref. #3878
    + Follow rule of three to ensure PyErr_Restore is called only
      once. #3872
    + Added missing perfect forwarding for make_iterator
      functions. #3860
    + Optimize c++ to python function casting by using the rvalue
      caster. #3966
    + Optimize Eigen sparse matrix casting by removing unnecessary
      temporary. #4064
    + Avoid potential implicit copy/assignment constructors
      causing double free in strdup_gaurd. #3905
    + Enable clang-tidy checks misc-definitions-in-headers,
      modernize-loop-convert, and modernize-use-nullptr. #3881
      #3988
  * Build system improvements:
    + CMake: Fix file extension on Windows with cp36 and cp37
      using FindPython. #3919
    + CMake: Support multiple Python targets (such as on vcpkg).
      #3948
    + CMake: Fix issue with NVCC on Windows. #3947
    + CMake: Drop the bitness check on cross compiles (like
      targeting WebAssembly via Emscripten). #3959
    + Add MSVC builds in debug mode to CI. #3784
    + MSVC 2022 C++20 coverage was added to GitHub Actions,
      including Eigen. #3732, #3741
  * Backend and tidying up:
    + New theme for the documentation. #3109
    + Remove idioms in code comments. Use more inclusive language.
      #3809
    + #include <iostream> was removed from the pybind11/stl.h
      header. Your project may break if it has a transitive
      dependency on this include. The fix is to "Include What You
      Use". #3928
    + Avoid setup.py <command> usage in internal tests. #3734
- Fix header deduplication: pybind11.get_include still reports
  the headers to be in the sitelib (SciPy meson build fail)
- Test in multibuild as some tests expect the system-wide
  %_includedir/pybind11/pybind11.h

-------------------------------------------------------------------
Sat Apr  9 22:47:00 UTC 2022 - Dirk Müller <dmueller@suse.com>

- update to 2.9.2:
  * Enum now has an ``__index__`` method on Python <3.8 too.
  * Local internals are now cleared after finalizing the interpreter.
  * Better support for Python 3.11 alphas.
  * ``PYBIND11_TYPE_CASTER`` now uses fully qualified symbols, so it can be used
    outside of ``pybind11::detail``.
  * Some fixes for PyPy 3.9.
  * Fixed a potential memleak in PyPy in ``get_type_override``.
  * Fix usage of ``VISIBILITY_INLINES_HIDDEN``.
  * Uses ``sysconfig`` module to determine installation locations on Python >=
    3.10, instead of ``distutils`` which has been deprecated.
  * Support Catch 2.13.5+ (supporting GLIBC 2.34+).
  * Fix test failures with numpy 1.22 by ignoring whitespace when comparing
    ``str()`` of dtypes.

-------------------------------------------------------------------
Sun Mar 27 15:11:08 UTC 2022 - Dirk Müller <dmueller@suse.com>

- update to 2.9.1:
  * If possible, attach Python exception with py::raise_from to TypeError when
    casting from C++ to Python. This will give additional info if Python
    exceptions occur in the caster.
  * Add a mapping of C++11 nested exceptions to their Python exception
    equivalent using py::raise_from. This attaches the nested exceptions in
    Python using the __cause__ field.
  * Propagate Python exception traceback using raise_from if a pybind11
    function runs out of overloads.
  * py::multiple_inheritance is now only needed when C++ bases are hidden from
    pybind11.
  * Allow py::args to be followed by other arguments; the remaining arguments
    are implicitly keyword-only, as if a py::kw_only{} annotation had been
    used.
  * Fix a rare warning about extra copy in an Eigen constructor.
  * Fix caching of the C++ overrides.
  * Add missing std::forward calls to some cpp_function overloads.
  * Support PyPy 7.3.7 and the PyPy3.8 beta. Test python-3.11 on PRs with the python dev label.
  * Replace usage of deprecated Eigen::MappedSparseMatrix with Eigen::Map<Eigen::SparseMatrix<...>> for Eigen 3.3+.
  * Tweaks to support Microsoft Visual Studio 2022.

-------------------------------------------------------------------
Mon Dec  6 10:07:33 UTC 2021 - Dirk Müller <dmueller@suse.com>

- udpate to 2.8.1:
  * The simple namespace creation shortcut added in 2.8.0 was deprecated due to
    usage of CPython internal API, and will be removed soon.
  * Add C++ Exception type to throw and catch ``AttributeError``.
  * Fixed the potential for dangling references when using properties with
  ``std::optional`` types.
  * Modernize usage of ``PyCodeObject`` on Python 3.9+ (moving toward support for
    Python 3.11a1)
  * A long-standing bug in ``eigen.h`` was fixed (originally PR #3343). The bug
    was unmasked by newly added ``static_assert``'s in the Eigen 3.4.0 release.
  * Support multiple raw inclusion of CMake helper files
  * Fix harmless warning on upcoming CMake 3.22.
  * Fix 2.8.0 regression with MSVC 2017 + C++17 mode + Python 3.
  * Fix 2.8.0 regression that caused undefined behavior (typically
    segfaults) in ``make_key_iterator``/``make_value_iterator`` if dereferencing
    the iterator returned a temporary value instead of a reference.

-------------------------------------------------------------------
Sat Oct 16 20:47:43 UTC 2021 - Stefan Schubert <schubi@suse.de>

- Use libalternatives instead of update-alternatives.

-------------------------------------------------------------------
Sat Oct 16 19:47:43 UTC 2021 - Ben Greiner <code@bnavigator.de>

- Update to v2.8.0
  * Added py::raise_from to enable chaining exceptions. #3215
  * Allow exception translators to be optionally registered local
    to a module instead of applying globally across all pybind11
    modules. Use
    register_local_exception_translator(ExceptionTranslator&&
    translator) instead of
    register_exception_translator(ExceptionTranslator&& translator)
    to keep your exception remapping code local to the module.
    #2650
  * Add make_simple_namespace function for instantiating Python
    SimpleNamespace objects. #2840
  * pybind11::scoped_interpreter and initialize_interpreter have
    new arguments to allow sys.argv initialization. #2341
  * Allow Python builtins to be used as callbacks in CPython. #1413
  * Added view to view arrays with a different datatype. #987
  * Implemented reshape on arrays. #984
  * Enable defining custom __new__ methods on classes by fixing bug
    preventing overriding methods if they have non-pybind11
    siblings. #3265
  * Add make_value_iterator(), and fix make_key_iterator() to
    return references instead of copies. #3293
  * Improve the classes generated by bind_map: #3310
  * Change .items from an iterator to a dictionary view.
  * Add .keys and .values (both dictionary views).
  * Allow __contains__ to take any object.
  * pybind11::custom_type_setup was added, for customizing the
    PyHeapTypeObject corresponding to a class, which may be useful
    for enabling garbage collection support, among other things.
    #3287
  * Set __file__ constant when running eval_file in an embedded
    interpreter. #3233
  * Python objects and (C++17) std::optional now accepted in
    py::slice constructor. #1101
  * The pybind11 proxy types str, bytes, bytearray, tuple, list now
    consistently support passing ssize_t values for sizes and
    indexes. Previously, only size_t was accepted in several
    interfaces. #3219
  * Avoid evaluating PYBIND11_TLS_REPLACE_VALUE arguments more than
    once. #3290
  * Bug fix: enum value's __int__ returning non-int when underlying
    type is bool or of char type. #1334
  * Fixes bug in setting error state in Capsule's pointer methods.
    #3261
  * A long-standing memory leak in py::cpp_function::initialize was
    fixed. #3229
  * Fixes thread safety for some pybind11::type_caster which
    require lifetime extension, such as for std::string_view. #3237
  * Restore compatibility with gcc 4.8.4 as distributed by
    ubuntu-trusty, linuxmint-17. #3270
  * Fix regression in CMake Python package config: improper use of
    absolute path. #3144
  * Cached Python version information could become stale when CMake
    was re-run with a different Python version. The build system
    now detects this and updates this information. #3299
  * Specified UTF8-encoding in setup.py calls of open(). #3137
  * Fix a harmless warning from CMake 3.21 with the classic Python
    discovery. #3220
  * Eigen repo and version can now be specified as cmake options.
    #3324
  * Reduced thread-local storage required for keeping alive
    temporary data for type conversion to one key per ABI version,
    rather than one key per extension module. This makes the total
    thread-local storage required by pybind11 2 keys per ABI
    version. #3275
  * Optimize NumPy array construction with additional moves. #3183
  * Conversion to std::string and std::string_view now avoids
    making an extra copy of the data on Python >= 3.3. #3257
  * Remove const modifier from certain C++ methods on Python
    collections (list, set, dict) such as (clear(), append(),
    insert(), etc...) and annotated them with py-non-const.
  * Enable readability clang-tidy-const-return and remove useless
    consts. #3254 #3194
  * The clang-tidy google-explicit-constructor option was enabled.
    #3250
  * Mark a pytype move constructor as noexcept (perf). #3236
  * Enable clang-tidy check to guard against inheritance slicing.
    #3210
  * Legacy warning suppression pragma were removed from eigen.h. On
    Unix platforms, please use -isystem for Eigen include
    directories, to suppress compiler warnings originating from
    Eigen headers. Note that CMake does this by default. No
    adjustments are needed for Windows. #3198
  * Format pybind11 with isort consistent ordering of imports #3195
  * The warnings-suppression "pragma clamp" at the top/bottom of
    pybind11 was removed, clearing the path to refactoring and IWYU
    cleanup. #3186
  * Enable most bugprone checks in clang-tidy and fix the found
    potential bugs and poor coding styles. #3166
  * Add clang-tidy-readability rules to make boolean casts explicit
    improving code readability. Also enabled other misc and
    readability clang-tidy checks. #3148
  * Move object in .pop() for list. #3116
- Release 2.7.1
  * Allow Python builtins to be used as callbacks in CPython. #1413
  * Fix regression in CMake Python package config: improper use of
    absolute path. #3144
  * Fix Mingw64 and add to the CI testing matrix. #3132
  * Specified UTF8-encoding in setup.py calls of open(). #3137
  * Add clang-tidy-readability rules to make boolean casts explicit
    improving code readability. Also enabled other misc and
    readability clang-tidy checks. #3148
  * Move object in .pop() for list. #3116
  * Removed and fixed warning suppressions. #3127 #3129 #3135 #3141
    #3142 #3150 #3152 #3160 #3161
- Release 2.7.0
  * Enable py::implicitly_convertible<py::none, ...> for
    py::class_-wrapped types. #3059
  * Allow function pointer extraction from overloaded functions.
    #2944
  * NumPy: added .char_() to type which gives the NumPy public char
    result, which also distinguishes types by bit length (unlike
    .kind()). #2864
  * Add pybind11::bytearray to manipulate bytearray similar to
    bytes. #2799
  * pybind11/stl/filesystem.h registers a type caster that, on
    C++17/Python 3.6+, converts std::filesystem::path to
    pathlib.Path and any os.PathLike to std::filesystem::path.
    #2730
  * A PYBIND11_VERSION_HEX define was added, similar to
    PY_VERSION_HEX. #3120
  * py::str changed to exclusively hold PyUnicodeObject. Previously
    py::str could also hold bytes, which is probably surprising,
    was never documented, and can mask bugs (e.g. accidental use of
    py::str instead of py::bytes). #2409
  * Add a safety guard to ensure that the Python GIL is held when
    C++ calls back into Python via object_api<>::operator() (e.g.
    py::function __call__). (This feature is available for Python
    3.6+ only.) #2919
  * Catch a missing self argument in calls to __init__(). #2914
  * Use std::string_view if available to avoid a copy when passing
    an object to a std::ostream. #3042
  * An important warning about thread safety was added to the
    iostream.h documentation; attempts to make
    py::scoped_ostream_redirect thread safe have been removed, as
    it was only partially effective. #2995
  * Performance: avoid unnecessary strlen calls. #3058
  * Fix auto-generated documentation string when using const T in
    pyarray_t. #3020
  * Unify error messages thrown by
    simple_collector/unpacking_collector. #3013
  * pybind11::builtin_exception is now explicitly exported, which
    means the types included/defined in different modules are
    identical, and exceptions raised in different modules can be
    caught correctly. The documentation was updated to explain that
    custom exceptions that are used across module boundaries need
    to be explicitly exported as well. #2999
  * Fixed exception when printing UTF-8 to a
    scoped_ostream_redirect. #2982
  * Pickle support enhancement: setstate implementation will
    attempt to setattr __dict__ only if the unpickled dict object
    is not empty, to not force use of py::dynamic_attr()
    unnecessarily. #2972
  * Allow negative timedelta values to roundtrip. #2870
  * Fix unchecked errors could potentially swallow signals/other
    exceptions. #2863
  * Add null pointer check with std::localtime. #2846
  * Fix the weakref constructor from py::object to create a new
    weakref on conversion. #2832
  * Avoid relying on exceptions in C++17 when getting a shared_ptr
    holder from a shared_from_this class. #2819
  * Allow the codec's exception to be raised instead of
    RuntimeError when casting from py::str to std::string. #2903
  * In setup_helpers.py, test for platforms that have some
    multiprocessing features but lack semaphores, which
    ParallelCompile requires. #3043
  * Fix pybind11_INCLUDE_DIR in case CMAKE_INSTALL_INCLUDEDIR is
    absolute. #3005
  * Fix bug not respecting WITH_SOABI or WITHOUT_SOABI to CMake.
    #2938
  * Fix the default Pybind11Extension compilation flags with a
    Mingw64 python. #2921
  * Clang on Windows: do not pass /MP (ignored flag). #2824
  * pybind11.setup_helpers.intree_extensions can be used to
    generate Pybind11Extension instances from cpp files placed in
    the Python package source tree. #2831
  * Enable clang-tidy performance, readability, and modernization
    checks throughout the codebase to enforce best coding
    practices. #3046, #3049, #3051, #3052, #3080, and #3094
  * Checks for common misspellings were added to the pre-commit
    hooks. #3076
  * Changed Werror to stricter Werror-all for Intel compiler and
    fixed minor issues. #2948
  * Fixed compilation with GCC < 5 when the user defines
    _GLIBCXX_USE_CXX11_ABI. #2956
  * Added nox support for easier local testing and linting of
    contributions. #3101 and #3121
  * Avoid RTD style issue with docutils 0.17+. #3119
  * Support pipx run, such as pipx run pybind11 --include for a
    quick compile. #3117
- Drop unicode.patch merged upstream

-------------------------------------------------------------------
Wed Jul  7 14:30:20 UTC 2021 - Markéta Machová <mmachova@suse.com>

- Add upstream patch unicode.patch to fix random python crash

-------------------------------------------------------------------
Mon Feb 15 00:56:32 UTC 2021 - Benjamin Greiner <code@bnavigator.de>

- Dont test with python36-numpy. Tumbleweed's NumPy >= 1.20 dropped
  support for Python 3.6

-------------------------------------------------------------------
Sun Feb  7 13:15:06 UTC 2021 - John Vandenberg <jayvdb@gmail.com>

- Add docs/changelog.rst to package contents
- Update to v2.6.2
  * See changelog for changes since 2.5.0

-------------------------------------------------------------------
Fri Jul 17 01:00:06 UTC 2020 - Stefan Brüns <stefan.bruens@rwth-aachen.de>

- Also expand generation of test binaries for Python 2 and 3,
  fixes Leap 15.x builds where Python 2 is still built.

-------------------------------------------------------------------
Mon Jul  6 14:56:54 UTC 2020 - Christian Goll <cgoll@suse.com>

- updated to version 2.5.0 and running the internal unit tests now

-------------------------------------------------------------------
Thu Apr 23 10:05:00 UTC 2020 - Tomáš Chvátal <tchvatal@suse.com>

- On devel files you need the pybind too to compile anything

-------------------------------------------------------------------
Wed Mar 11 16:57:22 UTC 2020 - Tomáš Chvátal <tchvatal@suse.com>

- Fix build without python2

-------------------------------------------------------------------
Thu Feb 13 05:32:14 UTC 2020 - Stefan Brüns <stefan.bruens@rwth-aachen.de>

- Fix mixup of expanded/unexpaned python versions in devel package,
  the devel package always required python(2)-devel and
  python2-pybind. Move the data to a -common-devel subpackage,
  pulled in by versioned python{2,3}-pybind-devel packages.

-------------------------------------------------------------------
Tue Jan 14 10:19:23 UTC 2020 - John Vandenberg <jayvdb@gmail.com>

- Add package version to extra devel packages added via Provides

-------------------------------------------------------------------
Sat Dec 21 15:51:16 UTC 2019 - Luigi Baldoni <aloisio@gmx.com>

- Update to version 2.4.3
  * Adapt pybind11 to a C API convention change in Python 3.8.

-------------------------------------------------------------------
Tue Oct  8 09:11:41 UTC 2019 - Christian Goll <cgoll@suse.com>

- updated to 2.4.2
 * made devel package python version independent
 * added cmake run to install cmake include files

-------------------------------------------------------------------
Sat Aug 24 06:26:13 UTC 2019 - Jan Engelhardt <jengelh@inai.de>

- Replace description by something more substantial.

-------------------------------------------------------------------
Mon Jul 22 14:21:41 UTC 2019 - Michal Vyskocil <mvyskocil@opensuse.org>

- Initial packaging of pybind11 2.3.0 for openSUSE
