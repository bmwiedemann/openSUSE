<revisionlist>
  <revision rev="1" vrev="1">
    <srcmd5>19fd958092423fd401504b5891c1b6e5</srcmd5>
    <version>2.3.0</version>
    <time>1566242821</time>
    <user>dimstar_suse</user>
    <comment>Required by scipy test suite.</comment>
    <requestid>720903</requestid>
  </revision>
  <revision rev="2" vrev="2">
    <srcmd5>47491afe531a6ab556d3d71cf4527536</srcmd5>
    <version>2.3.0</version>
    <time>1566665343</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>725775</requestid>
  </revision>
  <revision rev="3" vrev="1">
    <srcmd5>038ae9e2cfa4382a5315f9f03b13e809</srcmd5>
    <version>2.4.2</version>
    <time>1570701180</time>
    <user>dimstar_suse</user>
    <comment>- updated to 2.4.2
 * made devel package python version independent
 * added cmake run to install cmake include files</comment>
    <requestid>736064</requestid>
  </revision>
  <revision rev="4" vrev="1">
    <srcmd5>bf20dc491309cd77c5068914f6430f9a</srcmd5>
    <version>2.4.3</version>
    <time>1577630906</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>759292</requestid>
  </revision>
  <revision rev="5" vrev="2">
    <srcmd5>1046ca467f0aba5e996cce992c8c1b1a</srcmd5>
    <version>2.4.3</version>
    <time>1579194919</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>764264</requestid>
  </revision>
  <revision rev="6" vrev="3">
    <srcmd5>fa970604c0d60ed10dd976dc3c6110a7</srcmd5>
    <version>2.4.3</version>
    <time>1582112376</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>774186</requestid>
  </revision>
  <revision rev="7" vrev="4">
    <srcmd5>365d1adb94450ecbc02dd5e1107d2c84</srcmd5>
    <version>2.4.3</version>
    <time>1585264821</time>
    <user>dimstar_suse</user>
    <comment>Staging:I</comment>
    <requestid>783977</requestid>
  </revision>
  <revision rev="8" vrev="5">
    <srcmd5>1a70a984190b95edf122bf06ee6c5562</srcmd5>
    <version>2.4.3</version>
    <time>1588022986</time>
    <user>dimstar_suse</user>
    <comment>- On devel files you need the pybind too to compile anything</comment>
    <requestid>796474</requestid>
  </revision>
  <revision rev="9" vrev="1">
    <srcmd5>1e2df210ef2d02e5aef4ed94453b840e</srcmd5>
    <version>2.5.0</version>
    <time>1594807324</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>819139</requestid>
  </revision>
  <revision rev="10" vrev="2">
    <srcmd5>53801f668234babc368d2b68a2b784e1</srcmd5>
    <version>2.5.0</version>
    <time>1595338776</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>821409</requestid>
  </revision>
  <revision rev="11" vrev="1">
    <srcmd5>7416d1ebfac28709dd2b9270463c9409</srcmd5>
    <version>2.6.2</version>
    <time>1613043958</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>870296</requestid>
  </revision>
  <revision rev="12" vrev="2">
    <srcmd5>55613eafffe95b52d08429a0ce35bf4f</srcmd5>
    <version>2.6.2</version>
    <time>1613511255</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>872264</requestid>
  </revision>
  <revision rev="13" vrev="3">
    <srcmd5>76090881d0851f1aa3e75f165a1a05c5</srcmd5>
    <version>2.6.2</version>
    <time>1625950447</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>904740</requestid>
  </revision>
  <revision rev="14" vrev="1">
    <srcmd5>8be83ea69b4a770ea8016c24bd342d85</srcmd5>
    <version>2.8.0</version>
    <time>1636498442</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>930182</requestid>
  </revision>
  <revision rev="15" vrev="1">
    <srcmd5>81aaa60be3e1249099734e2d8c32a7a2</srcmd5>
    <version>2.8.1</version>
    <time>1639075514</time>
    <user>dimstar_suse</user>
    <comment>- udpate to 2.8.1:
  * The simple namespace creation shortcut added in 2.8.0 was deprecated due to
    usage of CPython internal API, and will be removed soon.
  * Add C++ Exception type to throw and catch ``AttributeError``.
  * Fixed the potential for dangling references when using properties with
  ``std::optional`` types.
  * Modernize usage of ``PyCodeObject`` on Python 3.9+ (moving toward support for
    Python 3.11a1)
  * A long-standing bug in ``eigen.h`` was fixed (originally PR #3343). The bug
    was unmasked by newly added ``static_assert``'s in the Eigen 3.4.0 release.
  * Support multiple raw inclusion of CMake helper files
  * Fix harmless warning on upcoming CMake 3.22.
  * Fix 2.8.0 regression with MSVC 2017 + C++17 mode + Python 3.
  * Fix 2.8.0 regression that caused undefined behavior (typically
    segfaults) in ``make_key_iterator``/``make_value_iterator`` if dereferencing
    the iterator returned a temporary value instead of a reference.</comment>
    <requestid>935976</requestid>
  </revision>
  <revision rev="16" vrev="1">
    <srcmd5>30f3f04a510657104f7ec606039e7080</srcmd5>
    <version>2.9.1</version>
    <time>1648570451</time>
    <user>dimstar_suse</user>
    <comment>- update to 2.9.1:
  * If possible, attach Python exception with py::raise_from to TypeError when
    casting from C++ to Python. This will give additional info if Python
    exceptions occur in the caster.
  * Add a mapping of C++11 nested exceptions to their Python exception
    equivalent using py::raise_from. This attaches the nested exceptions in
    Python using the __cause__ field. 
  * Propagate Python exception traceback using raise_from if a pybind11
    function runs out of overloads.
  * py::multiple_inheritance is now only needed when C++ bases are hidden from
    pybind11.
  * Allow py::args to be followed by other arguments; the remaining arguments
    are implicitly keyword-only, as if a py::kw_only{} annotation had been
    used.
  * Fix a rare warning about extra copy in an Eigen constructor.
  * Fix caching of the C++ overrides.
  * Add missing std::forward calls to some cpp_function overloads.
  * Support PyPy 7.3.7 and the PyPy3.8 beta. Test python-3.11 on PRs with the python dev label.
  * Replace usage of deprecated Eigen::MappedSparseMatrix with Eigen::Map&lt;Eigen::SparseMatrix&lt;...&gt;&gt; for Eigen 3.3+.
  * Tweaks to support Microsoft Visual Studio 2022.</comment>
    <requestid>965219</requestid>
  </revision>
  <revision rev="17" vrev="1">
    <srcmd5>c21f382dd74ceb0a86a6d312ded12df5</srcmd5>
    <version>2.9.2</version>
    <time>1649715234</time>
    <user>dimstar_suse</user>
    <comment>- update to 2.9.2:
  * Enum now has an ``__index__`` method on Python &lt;3.8 too.
  * Local internals are now cleared after finalizing the interpreter.
  * Better support for Python 3.11 alphas.
  * ``PYBIND11_TYPE_CASTER`` now uses fully qualified symbols, so it can be used
    outside of ``pybind11::detail``.
  * Some fixes for PyPy 3.9.
  * Fixed a potential memleak in PyPy in ``get_type_override``.
  * Fix usage of ``VISIBILITY_INLINES_HIDDEN``.
  * Uses ``sysconfig`` module to determine installation locations on Python &gt;=
    3.10, instead of ``distutils`` which has been deprecated.
  * Support Catch 2.13.5+ (supporting GLIBC 2.34+).
  * Fix test failures with numpy 1.22 by ignoring whitespace when comparing
    ``str()`` of dtypes.</comment>
    <requestid>968080</requestid>
  </revision>
  <revision rev="18" vrev="1">
    <srcmd5>2163f7b12417fac07823a9c176e6bfdc</srcmd5>
    <version>2.10.0</version>
    <time>1663438103</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>1003975</requestid>
  </revision>
  <revision rev="19" vrev="1">
    <srcmd5>cc958a781a9e716035b95f0d42edfad7</srcmd5>
    <version>2.10.3</version>
    <time>1673724689</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>1058218</requestid>
  </revision>
  <revision rev="20" vrev="1">
    <srcmd5>a2afdc2b82abb5c8dbb687c740a31862</srcmd5>
    <version>2.10.4</version>
    <time>1679416807</time>
    <user>dimstar_suse</user>
    <comment>- update to 2.10.4:
  * ``python3 -m pybind11`` gained a ``--version`` option (prints
    the version and exits).
  * Fix a warning when pydebug is enabled on Python 3.11.
  * Ensure ``gil_scoped_release`` RAII is non-copyable.
  * Ensure the tests dir does not show up with new versions of
    setuptools.
  * Better stacklevel for a warning in setuptools helpers.</comment>
    <requestid>1072929</requestid>
  </revision>
  <revision rev="21" vrev="2">
    <srcmd5>96af6d984ecba2046e9112567e656cc2</srcmd5>
    <version>2.10.4</version>
    <time>1682193563</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>1081812</requestid>
  </revision>
  <revision rev="22" vrev="1">
    <srcmd5>df5a381268689fa30f596f28b400a313</srcmd5>
    <version>2.11.1</version>
    <time>1695412037</time>
    <user>anag+factory</user>
    <comment></comment>
    <requestid>1112607</requestid>
  </revision>
  <revision rev="23" vrev="1">
    <srcmd5>dba1e0e21a17208f02e03736766ec578</srcmd5>
    <version>2.12.0</version>
    <time>1712520275</time>
    <user>anag+factory</user>
    <comment>- update to 2.12.0:
  * pybind11 now supports compiling for NumPy 2.
    However, if you experience issues you can define
    PYBIND11_NUMPY_1_ONLY to disable the new support for now, but
    this will be removed in the future. #5050
  * pybind11/gil_safe_call_once.h was added (it needs to be
    included explicitly). The primary use case is GIL-safe
    initialization of C++ static variables. #4877
  * Support move-only iterators in py::make_iterator,
    py::make_key_iterator, py::make_value_iterator. #4834
  * Two simple py::set_error() functions were added and the
    documentation was updated accordingly. In particular,
    py::exception&lt;&gt;::operator() was deprecated (use one of the
    new functions instead). The documentation for py::exception&lt;&gt;
    was further updated to not suggest code that may result in
    undefined behavior. #4772
  * Removes potential for Undefined Behavior during process
    teardown. #4897
  * Improve compatibility with the nvcc compiler (especially CUDA
    12.1/12.2). #4893
  * pybind11/numpy.h now imports NumPy's multiarray and _internal
    submodules with paths depending on the installed version of
    NumPy (for compatibility with NumPy 2). #4857
  * Builtins collections names in docstrings are now consistently
    rendered in lowercase (list, set, dict, tuple), in accordance
    with PEP 585. #4833
  * Added py::typing::Iterator&lt;T&gt;, py::typing::Iterable&lt;T&gt;. #4832
  * Render py::function as Callable in docstring. #4829
  * Also bump PYBIND11_INTERNALS_VERSION for MSVC, which unlocks
    two new features without creating additional</comment>
    <requestid>1165773</requestid>
  </revision>
  <revision rev="24" vrev="1">
    <srcmd5>a744abdf50b3be6dc160610a7921d8e5</srcmd5>
    <version>2.13.6</version>
    <time>1726589851</time>
    <user>anag+factory</user>
    <comment>- update to 2.13.6:
  * A new self._pybind11_conduit_v1_() method is automatically
    added to all py::class_-wrapped types, to enable type-safe
    interoperability between different independent Python/C++
    bindings systems, including pybind11 versions with different
    PYBIND11_INTERNALS_VERSION's. Supported on pybind11 2.11.2,
    2.12.1, and 2.13.6+. #5296
  * Using __cpp_nontype_template_args instead of
    __cpp_nontype_template_parameter_class. #5330
  * Properly translate C++ exception to Python exception when
    creating Python buffer from wrapped object. #5324
  * Adds an answer (FAQ) for &quot;What is a highly conclusive and
    simple way to find memory leaks?&quot;. #5340
- update to 2.13.5:
  * Fix includes when using Windows long paths (\?\ prefix).
  * Support -Wpedantic in C++20 mode. #5322
  * Fix and test &lt;ranges&gt; support for py::tuple and py::list.
  * Fix paths with spaces, including on Windows. (Replaces
    regression from #5302) #4874
  * Remove repetitive words. #5308
  * Quote paths from pybind11-config #5302
  * Fix typo in Emscripten support when in config mode (CMake)
    #5301
  * A pybind11::detail::type_caster_std_function_specializations
    feature was added, to support specializations for
    std::function's with return types that require custom to-
    Python conversion behavior (to primary use case is to catch
    and convert exceptions). #4597
  * Use PyMutex instead of std::mutex for internal locking in the
    free-threaded build. #5219
  * Add a special type annotation for C++ empty tuple. #5214
  * When compiling for WebAssembly, add the required exception
    flags (CMake 3.13+). #5298
  * Make gil_safe_call_once_and_store thread-safe in free-
    threaded CPython. #5246
  * A missing #include &lt;algorithm&gt; in pybind11/typing.h was added
    to fix build errors (in case user code does not already
    depend on that include). #5208
  * Fix regression introduced in #5201 for GCC&lt;10.3 in C++20
    mode. #5205
  * Remove extra = when assigning flto value in the case for
    Clang in CMake. #5207
  * Add support for Typing.Callable[..., T]. #5202
  * Avoid aligned allocation in free-threaded build in order to
    support macOS versions before 10.14. #5200
  * Support free-threaded CPython (3.13t). Add
    py::mod_gil_not_used() tag to indicate if a module supports
    running with the GIL disabled. #5148
  * Support for Python 3.6 was removed. (Official end-of-life:
    2021-12-23). #5177
  * py::list gained a .clear() method. #5153
  * Support for Union, Optional, type[T], typing.TypeGuard,
    typing.TypeIs, typing.Never, typing.NoReturn and
    typing.Literal was added to pybind11/typing.h. #5166 #5165
    #5194 #5193 #5192
  * In CMake, if PYBIND11_USE_CROSSCOMPILING is enabled, then
    CMAKE_CROSSCOMPILING will be respected and will keep pybind11
    from accessing the interpreter during configuration. Several
    CMake variables will be required in this case, but can be
    deduced from the environment variable SETUPTOOLS_EXT_SUFFIX.
    The default (currently OFF) may be changed in the future.
    #5083
  * A refcount bug (leading to heap-use-after-free) involving
    trampoline functions with PyObject * return type was fixed.
    #5156
  * Return py::ssize_t from .ref_count() instead of int. #5139
  * A subtle bug involving C++ types with unusual operator&amp;
    overrides was fixed. #5189
  * Support Python 3.13 with minor fix, add to CI. #5127
  * Fix mistake affecting old cmake and old boost. #5149
  * Build docs updated to feature scikit-build-core and meson-
    python, and updated setuptools instructions. #5168
</comment>
    <requestid>1201569</requestid>
  </revision>
  <revision rev="25" vrev="1">
    <srcmd5>1d6eb4b24af626f9611f78417cb86dc4</srcmd5>
    <version>3.0.1</version>
    <time>1758288814</time>
    <user>anag_factory</user>
    <comment></comment>
    <requestid>1305793</requestid>
  </revision>
</revisionlist>
