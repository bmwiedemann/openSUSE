From 5963a7726260c6c08e51331eb4e8a65a75548297 Mon Sep 17 00:00:00 2001
From: tejaschumbalkar <tejaschumbalkar@gmail.com>
Date: Wed, 13 Oct 2021 20:08:17 -0700
Subject: [PATCH] reference using setuptools instead of pip internal

---
 piplicenses.py      |    8 +----
 test_piplicenses.py |   73 ----------------------------------------------------
 2 files changed, 2 insertions(+), 79 deletions(-)

--- a/piplicenses.py
+++ b/piplicenses.py
@@ -29,6 +29,7 @@ import argparse
 import codecs
 import glob
 import os
+import pkg_resources
 import sys
 from collections import Counter
 from email import message_from_string
@@ -37,11 +38,6 @@ from enum import Enum, auto
 from functools import partial
 from typing import List, Optional, Sequence, Text
 
-try:
-    from pip._internal.utils.misc import get_installed_distributions
-except ImportError:  # pragma: no cover
-    from pip import get_installed_distributions
-
 from prettytable import PrettyTable
 
 try:
@@ -210,7 +206,7 @@ def get_packages(args: "CustomNamespace"
 
         return pkg_info
 
-    pkgs = get_installed_distributions()
+    pkgs = pkg_resources.working_set
     ignore_pkgs_as_lower = [pkg.lower() for pkg in args.ignore_packages]
     pkgs_as_lower = [pkg.lower() for pkg in args.packages]
 
--- a/test_piplicenses.py
+++ b/test_piplicenses.py
@@ -29,16 +29,6 @@ with open('tests/fixtures/unicode_charac
     UNICODE_APPENDIX = f.readline().replace("\n", "")
 
 
-def get_installed_distributions_mocked(*args, **kwargs):
-    packages = get_installed_distributions_orig(*args, **kwargs)
-    if not packages[-1].project_name.endswith(UNICODE_APPENDIX):
-        packages[-1].project_name += " "+UNICODE_APPENDIX
-    return packages
-
-
-get_installed_distributions_orig = piplicenses.get_installed_distributions
-
-
 class CommandLineTestCase(unittest.TestCase):
     @classmethod
     def setUpClass(cls):
@@ -423,41 +413,6 @@ class TestGetLicenses(CommandLineTestCas
         self.assertEqual('|', table.junction_char)
         self.assertEqual(RULE_HEADER, table.hrules)
 
-    @unittest.skipIf(sys.version_info < (3, 6, 0),
-                     "To unsupport Python 3.5 in the near future")
-    def test_format_rst_without_filter(self):
-        piplicenses.get_installed_distributions = \
-            get_installed_distributions_mocked
-        format_rst_args = ['--format=rst']
-        args = self.parser.parse_args(format_rst_args)
-        table = create_licenses_table(args)
-
-        self.assertIn('l', table.align.values())
-        self.assertTrue(table.border)
-        self.assertTrue(table.header)
-        self.assertEqual('+', table.junction_char)
-        self.assertEqual(RULE_ALL, table.hrules)
-        with self.assertRaises(docutils.utils.SystemMessage):
-            self.check_rst(str(table))
-        piplicenses.get_installed_distributions = \
-            get_installed_distributions_orig
-
-    def test_format_rst_default_filter(self):
-        piplicenses.get_installed_distributions = \
-            get_installed_distributions_mocked
-        format_rst_args = ['--format=rst', '--filter-strings']
-        args = self.parser.parse_args(format_rst_args)
-        table = create_licenses_table(args)
-
-        self.assertIn('l', table.align.values())
-        self.assertTrue(table.border)
-        self.assertTrue(table.header)
-        self.assertEqual('+', table.junction_char)
-        self.assertEqual(RULE_ALL, table.hrules)
-        self.check_rst(str(table))
-        piplicenses.get_installed_distributions = \
-            get_installed_distributions_orig
-
     def test_format_confluence(self):
         format_confluence_args = ['--format=confluence']
         args = self.parser.parse_args(format_confluence_args)
@@ -561,34 +516,6 @@ class TestGetLicenses(CommandLineTestCas
         self.assertIn(text, actual)
         self.assertTrue(actual.endswith('\033[0m'))
 
-    def test_without_filter(self):
-        piplicenses.get_installed_distributions = \
-            get_installed_distributions_mocked
-        args = self.parser.parse_args([])
-        packages = list(piplicenses.get_packages(args))
-        self.assertIn(UNICODE_APPENDIX, packages[-1]["name"])
-        piplicenses.get_installed_distributions = \
-            get_installed_distributions_orig
-
-    def test_with_default_filter(self):
-        piplicenses.get_installed_distributions = \
-            get_installed_distributions_mocked
-        args = self.parser.parse_args(["--filter-strings"])
-        packages = list(piplicenses.get_packages(args))
-        piplicenses.get_installed_distributions = \
-            get_installed_distributions_orig
-        self.assertNotIn(UNICODE_APPENDIX, packages[-1]["name"])
-
-    def test_with_specified_filter(self):
-        piplicenses.get_installed_distributions = \
-            get_installed_distributions_mocked
-        args = self.parser.parse_args(["--filter-strings",
-                                       "--filter-code-page=ascii"])
-        packages = list(piplicenses.get_packages(args))
-        self.assertNotIn(UNICODE_APPENDIX, packages[-1]["summary"])
-        piplicenses.get_installed_distributions = \
-            get_installed_distributions_orig
-
 
 class MockStdStream(object):
 
