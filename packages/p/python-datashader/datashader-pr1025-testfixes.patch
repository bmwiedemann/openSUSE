From ed398d9507d84f345f282d5738ff58472d94c7ae Mon Sep 17 00:00:00 2001
From: Ian Thomas <ianthomas23@gmail.com>
Date: Mon, 18 Oct 2021 11:46:44 +0100
Subject: [PATCH 01/11] Fix CI part 2

---
 datashader/datatypes.py                      | 2 +-
 datashader/tests/benchmarks/test_bundling.py | 2 +-
 datashader/tests/test_bundling.py            | 4 ++--
 setup.py                                     | 2 +-
 4 files changed, 5 insertions(+), 5 deletions(-)

Index: datashader-0.13.0/datashader/datatypes.py
===================================================================
--- datashader-0.13.0.orig/datashader/datatypes.py
+++ datashader-0.13.0/datashader/datatypes.py
@@ -585,7 +585,7 @@ Invalid indices for take with allow_fill
         else:
             if len(self) == 0 and len(indices) > 0:
                 raise IndexError(
-                    "Cannot do a non-empty take from an empty axis"
+                    "cannot do a non-empty take from an empty axis|out of bounds"
                 )
 
             sequence = [self[i] for i in indices]
Index: datashader-0.13.0/datashader/tests/test_bundling.py
===================================================================
--- datashader-0.13.0.orig/datashader/tests/test_bundling.py
+++ datashader-0.13.0/datashader/tests/test_bundling.py
@@ -25,7 +25,7 @@ def edges():
     # Four edges originating from the center node and connected to each
     # corner
     edges_df = pd.DataFrame({'id': np.arange(4),
-                             'source': np.zeros(4, dtype=np.int),
+                             'source': np.zeros(4, dtype=int),
                              'target': np.arange(1, 5)})
     edges_df.set_index('id')
     return edges_df
@@ -36,7 +36,7 @@ def weighted_edges():
     # Four weighted edges originating from the center node and connected
     # to each corner
     edges_df = pd.DataFrame({'id': np.arange(4),
-                             'source': np.zeros(4, dtype=np.int),
+                             'source': np.zeros(4, dtype=int),
                              'target': np.arange(1, 5),
                              'weight': np.ones(4)})
     edges_df.set_index('id')
Index: datashader-0.13.0/setup.py
===================================================================
--- datashader-0.13.0.orig/setup.py
+++ datashader-0.13.0/setup.py
@@ -39,8 +39,8 @@ extras_require = {
         'pytest-cov',
         'codecov',
         'flake8',
-        'nbconvert <6',
-        'nbsmoke[all] >=0.4.0',
+        'nbconvert',
+        'nbsmoke[all] >0.5',
         'fastparquet >=0.1.6',  # optional dependency
         'holoviews >=1.10.0',
         'bokeh',
Index: datashader-0.13.0/datashader/bokeh_ext.py
===================================================================
--- datashader-0.13.0.orig/datashader/bokeh_ext.py
+++ datashader-0.13.0/datashader/bokeh_ext.py
@@ -86,7 +86,8 @@ def patch_event(image):
         JSON message containing patch events to update the plot
     """
     if bokeh_version > '0.12.9':
-        events = list(image.doc._held_events)
+        event_obj = image.doc.callbacks if bokeh_version >= '2.4' else image.doc
+        events = list(event_obj._held_events)
         if not events:
             return None
         if bokeh_version > '2.0.0':
@@ -94,7 +95,7 @@ def patch_event(image):
         else:
             protocol = Protocol("1.0")
         msg = protocol.create("PATCH-DOC", events)
-        image.doc._held_events = []
+        event_obj._held_events = []
         return msg
     data = dict(image.ds.data)
     data['image'] = [data['image'][0].tolist()]
Index: datashader-0.13.0/datashader/tests/test_bokeh_ext.py
===================================================================
--- datashader-0.13.0.orig/datashader/tests/test_bokeh_ext.py
+++ datashader-0.13.0/datashader/tests/test_bokeh_ext.py
@@ -5,7 +5,7 @@ import datashader as ds
 import datashader.transfer_functions as tf
 
 from bokeh.plotting import figure, Document
-from datashader.bokeh_ext import InteractiveImage
+from datashader.bokeh_ext import InteractiveImage, bokeh_version
 
 axis = ds.core.LinearAxis()
 lincoords = axis.compute_index(axis.compute_scale_and_translate((0, 1), 2), 2)
@@ -77,4 +77,5 @@ def test_interactive_image_update():
     assert image['shape'] == [1, 1]
 
     # Ensure events are cleared after update
-    assert img.doc._held_events == []
+    event_obj = img.doc.callbacks if bokeh_version >= '2.4' else img.doc
+    assert event_obj._held_events == []
