Index: qcs-api-client-python-0.21.0/tests/test_client/test_auth.py
===================================================================
--- qcs-api-client-python-0.21.0.orig/tests/test_client/test_auth.py
+++ qcs-api-client-python-0.21.0/tests/test_client/test_auth.py
@@ -1,4 +1,5 @@
 from pathlib import Path
+import httpx
 import respx
 import pytest
 import asyncio
@@ -18,7 +19,7 @@ from qcs_api_client.client._configuratio
     ],
 )
 @respx.mock(assert_all_mocked=True)
-def test_qcs_auth_refresh_token(fixture_directory: Path, execute_async: bool, respx_mock: respx.MockTransport = None):
+def test_qcs_auth_refresh_token(fixture_directory: Path, execute_async: bool, respx_mock: httpx.MockTransport = None):
     """
     Assert that the credential's token payload is written back to the file on update during the
     QCSAuth refresh flows.
Index: qcs-api-client-python-0.21.0/tests/test_client/test_client.py
===================================================================
--- qcs-api-client-python-0.21.0.orig/tests/test_client/test_client.py
+++ qcs-api-client-python-0.21.0/tests/test_client/test_client.py
@@ -5,6 +5,7 @@ from unittest.mock import create_autospe
 
 import pytest
 import respx
+import httpx
 from httpx import Request, Response
 from typing import cast
 from qcs_api_client.client import build_async_client, build_sync_client
@@ -129,7 +130,7 @@ def test_env_overrides(monkeypatch):
 
 
 @respx.mock(assert_all_mocked=True)
-def test_sync_client(client_configuration: QCSClientConfiguration, respx_mock: respx.MockTransport = None):
+def test_sync_client(client_configuration: QCSClientConfiguration, respx_mock: httpx.MockTransport = None):
     """
     Assert that a sync client can be constructed and make a call with authorization header.
     """
@@ -144,7 +145,7 @@ def test_sync_client(client_configuratio
 
 
 @respx.mock(assert_all_mocked=True)
-def test_sync_client_api_call(client_configuration: QCSClientConfiguration, respx_mock: respx.MockTransport = None):
+def test_sync_client_api_call(client_configuration: QCSClientConfiguration, respx_mock: httpx.MockTransport = None):
     """Assert that a generated request function can be called with a sync client."""
 
     def assert_request(request: Request):
@@ -159,7 +160,7 @@ def test_sync_client_api_call(client_con
 
 
 @respx.mock(assert_all_mocked=True)
-def test_sync_client_api_call_empty_config(fixture_directory: Path, respx_mock: respx.MockTransport = None):
+def test_sync_client_api_call_empty_config(fixture_directory: Path, respx_mock: httpx.MockTransport = None):
     """Assert that the client makes sync requests with authentication if configuration is empty."""
 
     client_configuration = QCSClientConfiguration.load(
@@ -184,7 +185,7 @@ def test_sync_client_api_call_empty_conf
 
 @respx.mock(assert_all_mocked=True)
 @pytest.mark.asyncio
-async def test_async_client(client_configuration: QCSClientConfiguration, respx_mock: respx.MockTransport = None):
+async def test_async_client(client_configuration: QCSClientConfiguration, respx_mock: httpx.MockTransport = None):
     """
     Assert that an async client can be constructed and make a call with authorization header.
     """
@@ -198,7 +199,7 @@ async def test_async_client(client_confi
 
 
 @respx.mock(assert_all_mocked=True)
-async def test_async_client_api_call_empty_config(fixture_directory: Path, respx_mock: respx.MockTransport = None):
+async def test_async_client_api_call_empty_config(fixture_directory: Path, respx_mock: httpx.MockTransport = None):
     """Assert that the client makes async requests with authentication if configuration is empty."""
 
     client_configuration = QCSClientConfiguration.load(
