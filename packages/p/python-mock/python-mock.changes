-------------------------------------------------------------------
Sun Dec 19 12:36:47 UTC 2021 - Ben Greiner <code@bnavigator.de>

- Add mock-pr497-fixmixup-496.patch fix mixup of import in 
  Python 3.10
  * gh#/testing-cabal#496
  * gh#/testing-cabal#497

-------------------------------------------------------------------
Sun Jan 24 18:10:57 UTC 2021 - Dirk Müller <dmueller@suse.com>

- update to 4.0.3:
  * Issue #42532: Remove unexpected call of ``__bool__`` when passing a
  ``spec_arg`` argument to a Mock.
  * Issue #39966: Revert bpo-25597. :class:`unittest.mock.MagicMock` with
  wraps' set uses default return values for magic methods.
  * Issue #41877: Mock objects which are not unsafe will now raise an
  AttributeError if an attribute with the prefix asert, aseert, or assrt is
  accessed, in addition to this already happening for the prefixes assert or
  assret.
  * Issue #40126: Fixed reverting multiple patches in unittest.mock. Patcher's
  ``__exit__()`` is now never called if its ``__enter__()`` is failed.
  Returning true from ``__exit__()`` silences now the exception.

-------------------------------------------------------------------
Thu Apr 16 07:47:15 UTC 2020 - John Paul Adrian Glaubitz <adrian.glaubitz@suse.com>

- Update to 4.0.2
  * Issue #39915: Ensure :attr:`unittest.mock.AsyncMock.await_args_list` has
    call objects in the order of awaited arguments instead of using
    :attr:`unittest.mock.Mock.call_args` which has the last value of the call.
    Patch by Karthikeyan Singaravelan.
- from version 4.0.1
  * Remove the universal marker from the wheel.
- from version 4.0.0
  * No Changes from 4.0.0b1.
- from version 4.0.0b1
  * The release is a fresh cut of cpython's `4a686504`__. All changes to :mod:`mock`
    from that commit and before are included in this release along with the
    subsequent changes listed below.
    __ https://github.com/python/cpython/commit/4a686504eb2bbf69adf78077458508a7ba131667
  * Issue #37972: Subscripts to the `unittest.mock.call` objects now receive
    the same chaining mechanism as any other custom attributes, so that the
    following usage no longer raises a `TypeError`:

    call().foo().__getitem__('bar')

    Patch by blhsing
  * Issue #38839: Fix some unused functions in tests. Patch by Adam Johnson.
  * Issue #39485: Fix a bug in :func:`unittest.mock.create_autospec` that
    would complain about the wrong number of arguments for custom descriptors
    defined in an extension module returning functions.
  * Issue #39082: Allow AsyncMock to correctly patch static/class methods
  * Issue #38093: Fixes AsyncMock so it doesn't crash when used with
    AsyncContextManagers or AsyncIterators.
  * Issue #38859: AsyncMock now returns StopAsyncIteration on the exaustion of
    a side_effects iterable. Since PEP-479 its Impossible to raise a
    StopIteration exception from a coroutine.
  * Issue #38163: Child mocks will now detect their type as either synchronous
    or asynchronous, asynchronous child mocks will be AsyncMocks and
    synchronous child mocks will be either MagicMock or Mock (depending on
    their parent type).
  * Issue #38473: Use signature from inner mock for autospecced methods
    attached with :func:`unittest.mock.attach_mock`. Patch by Karthikeyan
    Singaravelan.
  * Issue #38136: Changes AsyncMock call count and await count to be two
    different counters. Now await count only counts when a coroutine has been
    awaited, not when it has been called, and vice-versa. Update the
    documentation around this.
  * Issue #37555: Fix `NonCallableMock._call_matcher` returning tuple instead
    of `_Call` object when `self._spec_signature` exists. Patch by Elizabeth
    Uselton
  * Issue #37251: Remove `__code__` check in AsyncMock that incorrectly
    evaluated function specs as async objects but failed to evaluate classes
    with `__await__` but no `__code__` attribute defined as async objects.
  * Issue #38669: Raise :exc:`TypeError` when passing target as a string with
    :meth:`unittest.mock.patch.object`.
  * Issue #25597: Ensure, if ``wraps`` is supplied to
    :class:`unittest.mock.MagicMock`, it is used to calculate return values
    for the magic methods instead of using the default return values. Patch by
    Karthikeyan Singaravelan.
  * Issue #38108: Any synchronous magic methods on an AsyncMock now return a
    MagicMock. Any asynchronous magic methods on a MagicMock now return an
    AsyncMock.
  * Issue #21478: Record calls to parent when autospecced object is attached
    to a mock using :func:`unittest.mock.attach_mock`. Patch by Karthikeyan
    Singaravelan.
  * Issue #38857: AsyncMock fix for return values that are awaitable types.
    This also covers side_effect iterable values that happend to be awaitable,
    and wraps callables that return an awaitable type. Before these awaitables
    were being awaited instead of being returned as is.
  * Issue #38932: Mock fully resets child objects on reset_mock(). Patch by
    Vegard Stikbakke
  * Issue #37685: Fixed ``__eq__``, ``__lt__`` etc implementations in some
    classes. They now return :data:`NotImplemented` for unsupported type of
    the other operand. This allows the other operand to play role (for example
    the equality comparison with :data:`~unittest.mock.ANY` will return
    ``True``).
  * Issue #37212: :func:`unittest.mock.call` now preserves the order of
    keyword arguments in repr output. Patch by Karthikeyan Singaravelan.
  * Issue #37828: Fix default mock name in
    :meth:`unittest.mock.Mock.assert_called` exceptions. Patch by Abraham
    Toriz Cruz.
  * Issue #36871: Improve error handling for the assert_has_calls and
    assert_has_awaits methods of mocks. Fixed a bug where any errors
    encountered while binding the expected calls to the mock's spec were
    silently swallowed, leading to misleading error output.
  * Issue #21600: Fix :func:`mock.patch.stopall` to stop active patches that
    were created with :func:`mock.patch.dict`.
  * Issue #38161: Removes _AwaitEvent from AsyncMock.
  * Issue #36871: Ensure method signature is used instead of constructor
    signature of a class while asserting mock object against method calls.
    Patch by Karthikeyan Singaravelan.
- Disable python2 builds which are no longer supported
- Update BuildRequires and Requires from setup.cfg

-------------------------------------------------------------------
Tue May 14 07:55:19 UTC 2019 - Ondřej Súkup <mimi.vx@gmail.com>

- update to 3.0.5
- drop remove_unittest2.patch
  * more in CHANGELOG.rst 

-------------------------------------------------------------------
Mon Aug 13 13:06:03 UTC 2018 - mcepl@suse.com

- Remove dependency on unittest2
  Add remove_unittest2.patch to facilitate that
  Remove unnecessary now unittest2-fallback.patch

-------------------------------------------------------------------
Thu Jan  4 14:36:33 UTC 2018 - tchvatal@suse.com

- Condition python2 build to ensure we can build py3 only package

-------------------------------------------------------------------
Tue Sep  5 07:44:18 UTC 2017 - dmueller@suse.com

- adjust requires for singlespec'ified python-funcsigs

-------------------------------------------------------------------
Thu Oct  6 16:19:38 UTC 2016 - jmatejek@suse.com

- update for multipython build
- remove test runner because it performs dark magic that
  causes a failure in test suite
- implement fallback to python's own unittest instead of unittest2
  if we're on Python 3 (to avoid dependencies on funcsigs and unittest2)
  (unittest2-fallback.patch)

-------------------------------------------------------------------
Thu Oct  6 05:56:11 UTC 2016 - tbechtold@suse.com

- Fix pytohn-funcsigs Requires

-------------------------------------------------------------------
Thu Jun  2 07:33:30 UTC 2016 - tbechtold@suse.com

- update to 2.0.0:
  * Fix #338: depend on a fixed version of funcsigs
  * More 3.2 support dropping cleanup
  * Update sync point
  * Add Mock.assert_called()
  * Issue25347 - Format the error message output of mock's assert_has_calls method
  * Issue #22138: Fix mock.patch behavior when patching descriptors. Restore original values after patching
  * Issue #24857: Comparing call_args to a long sequence now correctly returns a boolean result instead of raising an exception
  * Issue #23004: mock_open() now reads binary data correctly when the type of read_data is bytes
  * Add version info in the docs
  * Update six to a version with raises_from
  * Fix #328 - handle unicode __repr__ on Python 2.x
  * Drop support for Python 3.2
  * Fix typo in docs/index.txt
  * Fix README.rst checking
  * Be clearer about Python version compat
  * Issue #295: use a setup_requires dependency
  * Improve grouping of imports in tests
  * Use six to detect python2/3 in main module
  * Use six to detect python2/3 in test modules
- adjust Requires
- use pypi.io as Source url

-------------------------------------------------------------------
Fri Jan  8 17:54:59 CET 2016 - frede@b1-systems.de

- BuildRequires python-setuptools >= 17.1 If you have a lower
  version the build will fail. 

-------------------------------------------------------------------
Mon Oct 26 10:08:30 UTC 2015 - toddrme2178@gmail.com

- BuildRequires python-funcsigs.  It was already in Requires,
  but is also needed at build time for unit tests.

-------------------------------------------------------------------
Mon Jul 27 11:30:53 UTC 2015 - seife+obs@b1-systems.com

- python-mock now requires python-pbr

-------------------------------------------------------------------
Mon Jul 27 07:02:44 UTC 2015 - dmueller@suse.com

- update to 1.3.0:
  * Update sync point
  * Issue #21750: Further fixup to be styled like other mock APIs
  * Typo fix in mock.patch
  * Revert "Issue #21750: mock_open.read_data can now be read from each instance, as it"
  * Add 2.6 back to classifiers
  * Record sync point
  * Issue #21750: mock_open.read_data can now be read from each instance, as it could in Python 3.3
  * Issue #18622: unittest.mock.mock_open().reset_mock would recurse infinitely
  * Folk should test 2.6 locally too
  * Closes #279: setuptools.version is too new
  * Support python 2.6
  * Update sync point and sync docs
  * Issue #23661: unittest.mock side_effects can now be exceptions again
  * Abort installation if the installer is using setuptools<17.1
  * Closes #269: setup_requires pbr 1.3
  * Closes #257: version the dependency on six
  * Rename README.txt to README.rst
  * Make reproducing travis behaviour somewhat easier
  * Cleanup version number handling
  * Overhaul docs
  * Update docs
  * Remove stale MANIFEST.in, ignore pbr outputs
  * Convert to a package, use pbr, update metadata
  * Bump versions
  * Officially drop 2.6 support
  * Issue #23310: Fix MagicMock's initializer to work with __methods__. Behavior equivalent to m.configure_mock(). Patch by Kasia Jachim
  * Issue #23568: Add rdivmod support to MagicMock() objects
  * Issue #23581: Add matmul support to MagicMock
  * Issue #23326: Removed __ne__ implementations. Since fixing default __ne__ implementation in issue #21408 they are redundant
  * Issue #22823: Use set literals instead of creating a set from a list. Fixed an output of sets in examples
  * Closes #21270 : We now override tuple methods in mock.call objects
  * Suppress a couple more DeprecationWarnings in the test suite
  * Closes #21256: Printout of keyword args in deterministic order in mock calls
  * Removes unused varargs and varkwargs from assert_not_called()
  * Closes Issue 21262: New method assert_not_called for Mock
  * Closes Issue 21238: New keyword argument `unsafe` to Mock
  * Closes issue 21239. unittest.mock.patch.stopall() did not work deterministically when the same name was patched multiple times
  * Closes Issue 21222
  * Closes issue 17660. You no longer need to explicitly pass create=True when patching builtin names
  * Issue 17826. Setting an iterable side_effect on a mock created by create_autospec now works
  * Issue 20968. unittest.mock.MagicMock now supports division
  * Issue #20189: Four additional builtin types (PyTypeObject, PyMethodDescr_Type, _PyMethodWrapper_Type, and PyWrapperDescr_Type) have been modified to provide introspection information for builtins. Also: many additional Lib, test suite, and Argument Clinic fixes
  * Issue #19594: Use specific asserts in unittest tests
  * Remove shadowed test
  * Adjust comment
  * Issue #19013: add a __main__ to unittest.test.testmock to ease CLI invocation
  * Issue #19013: add unittest.main() epilogs to unittest.mock's own test modules
  * Process DEFAULT values in mock side_effect that returns iterator
  * Closes issue 17467. Add readline and readlines support to unittest.mock.mock_open
  * Issue #17047: remove doubled words added in 3.3 as reported by Serhiy Storchaka and Matthew Barnett
  * Issue #17015: When it has a spec, a Mock object now inspects its signature when matching calls, so that arguments can be matched positionally or by name
  * Closes issue 15323. Improve failure message of Mock.assert_called_once_with
  * Close #14857: fix regression in references to PEP 3135 implicit __class__ closure variable. Reopens issue #12370, but also updates unittest.mock to workaround that issue
  * Remove incorrect comment
  * Closes issue 14634. unittest.mock.create_autospec now supports keyword only arguments
  * unittest.mock: removed another bit of Python 2 only code
  * Adding unittest.mock documentation
  * unittest.mock: remove another piece of Python 2 specific code
  * Remove more Python 2 code from unittest.mock (obsolete function attributes)
  * Support subclassing unittest.mock._patch and fix various obscure bugs around patcher spec arguments
  * unittest.mock.MagicMock objects are now unorderable by default
  * Removed XXX from unittest.mock docstring and switch to a nicer try...except...finally
  * Remove more Python 2 compatibility cruft from unittest.mock
  * PEP 417: Adding unittest.mock
  * Ignore patch rejects too
  * Add NEWS
  * Add PyPy to travis
  * Issue #20189: Four additional builtin types
  * Just hard-depend on unittest2
  * Fix typo in test name
  * Some basic release process notes
  * Ignore more editor files
  * Add testrepository configuration
  * We never need sudo. Containers FTW
  * Fixup ignores
  * Iterating on .travis.yml
  * Setup Travis-CI
- drop mock-unittest2py27.patch, no longer needed

-------------------------------------------------------------------
Tue Feb 18 13:37:33 CET 2014 - ro@suse.de

- added LICENSE.txt as doc file 

-------------------------------------------------------------------
Wed Feb 12 19:06:24 UTC 2014 - cfarrell@suse.com

- license update: BSD-2-Clause
  See the License.txt file

-------------------------------------------------------------------
Wed Feb 12 10:30:21 UTC 2014 - speilicke@suse.com

- Replace python27x.diff with mock-unittest2py27.patch
- Rather use "setup.py test"

-------------------------------------------------------------------
Mon Feb 10 17:01:11 UTC 2014 - dmueller@suse.com

- add python27x.diff: Avoid dependency on unittest2 for anything
  newer than Python 2.7.x (bnc#863813)

-------------------------------------------------------------------
Thu Oct 24 11:08:50 UTC 2013 - speilicke@suse.com

- Require python-setuptools instead of distribute (upstreams merged)

-------------------------------------------------------------------
Fri Jan 11 15:12:13 UTC 2013 - p.drouand@gmail.com

- Initial python3 support

-------------------------------------------------------------------
Fri Nov 23 11:11:45 UTC 2012 - saschpe@suse.de

- Update to version 1.0.1
  + Functions decorated with patch variants have a __wrapped__ attribute
    pointing to the original function. This brings compatibility with the
    default behaviour in Python 3.3 (due to a new feature in functools.wraps).
  + See docs/changelog.txt for details

-------------------------------------------------------------------
Sat Mar 10 16:54:44 UTC 2012 - saschpe@gmx.de

- Update to version 0.8.0:
  - See docs/changelog.txt for details

-------------------------------------------------------------------
Fri Sep  2 08:43:44 UTC 2011 - saschpe@suse.de

- Update to version 0.7.2:
  * BUGFIX: instances of list subclasses can now be used as mock specs
  * BUGFIX: MagicMock equality / inequality protocol methods changed to use the
    default equality / inequality.
- Simpler spec file

-------------------------------------------------------------------
Tue Jan 25 13:39:07 UTC 2011 - saschpe@suse.de

- cleaned up spec file:
  * fixed noarch check (to make openSUSE-11.1 x86_64 bit work)
  * recompressed tarball with bzip2
  * set RPM optflags

-------------------------------------------------------------------
Fri Jan 21 11:09:15 CET 2011 - mapleoin@lavabit.com

 - fixed SourceURL

-------------------------------------------------------------------
Fri Jan 21 10:42:14 CET 2011 - mapleoin@lavabit.com

 - removed DOS line-endings from doc file
 - removed spurious permissions from docs

-------------------------------------------------------------------
Thu Jan 20 15:23:37 CET 2011 - mapleoin@lavabit.com

 - added README, docs and tests
 - run tests during %%check phase

-------------------------------------------------------------------
Thu Jan 20 10:56:51 CET 2011 - mapleoin@lavabit.com

- fixed Source URL

-------------------------------------------------------------------
Tue Dec 9 14:43 CET 2010 - mapleoin@lavabit.com

- fixed Group
- set BuildArch to noarch
- added py_requires macro

-------------------------------------------------------------------
Tue Dec 7 10:43 CET 2010 - mapleoin@lavabit.com

- initial package
