Index: pyRFC3339-1.1/pyrfc3339/tests/tests.py
===================================================================
--- pyRFC3339-1.1.orig/pyrfc3339/tests/tests.py
+++ pyRFC3339-1.1/pyrfc3339/tests/tests.py
@@ -10,7 +10,7 @@ from pyrfc3339 import generate, parse
 from pyrfc3339.utils import timezone
 import pytz
 
-from nose.tools import eq_, raises
+from pytest import raises
 
 
 class TestCore():
@@ -24,8 +24,8 @@ class TestCore():
         Test rounding of timezone values to the nearest second.
 
         '''
-        eq_(timezone(5429), '+01:30')
-        eq_(timezone(5431), '+01:31')
+        assert timezone(5429) == '+01:30'
+        assert timezone(5431) == '+01:31'
 
     def test_zero_offset(self):
         '''
@@ -34,11 +34,11 @@ class TestCore():
         '''
         timestamp = '2009-01-01T10:02:03+00:00'
         dt = parse(timestamp)
-        eq_(dt.tzinfo, pytz.utc)
+        assert dt.tzinfo == pytz.utc
 
         timestamp = '2009-01-01T10:02:03-00:00'
         dt = parse(timestamp)
-        eq_(dt.tzinfo, pytz.utc)
+        assert dt.tzinfo == pytz.utc
 
     def test_deepcopy(self):
         '''
@@ -56,7 +56,7 @@ class TestCore():
         '''
         timestamp = '2009-01-01T10:02:03.25Z'
         dt = parse(timestamp)
-        eq_(dt.microsecond, 250000)
+        assert dt.microsecond == 250000
 
     def test_generate_microseconds(self):
         '''
@@ -65,7 +65,7 @@ class TestCore():
         '''
         dt = datetime(2009, 1, 1, 10, 2, 3, 500000, pytz.utc)
         timestamp = generate(dt, microseconds=True)
-        eq_(timestamp, '2009-01-01T10:02:03.500000Z')
+        assert timestamp == '2009-01-01T10:02:03.500000Z'
 
     def test_mixed_case(self):
         '''
@@ -76,7 +76,7 @@ class TestCore():
         dt1 = parse('2009-01-01t10:01:02z')
         dt2 = datetime(2009, 1, 1, 10, 1, 2, tzinfo=pytz.utc)
 
-        eq_(dt1, dt2)
+        assert dt1 == dt2
 
     def test_parse_naive_utc(self):
         '''
@@ -84,15 +84,15 @@ class TestCore():
 
         '''
         dt1 = parse('2009-01-01T10:01:02Z', produce_naive=True)
-        eq_(dt1.tzinfo, None)
+        assert dt1.tzinfo is None
 
-    @raises(ValueError)
     def test_parse_naive_local(self):
         '''
         Test that parsing a local timestamp to a naive datetime fails.
 
         '''
-        parse('2009-01-01T10:01:02-04:00', produce_naive=True)
+        with raises(ValueError):
+            parse('2009-01-01T10:01:02-04:00', produce_naive=True)
 
     def test_generate_utc_parse_utc(self):
         '''
@@ -103,7 +103,7 @@ class TestCore():
         dt1 = dt1.replace(tzinfo=pytz.utc)
 
         dt2 = parse(generate(dt1, microseconds=True))
-        eq_(dt1, dt2)
+        assert dt1 == dt2
 
     def test_generate_local_parse_local(self):
         '''
@@ -113,7 +113,7 @@ class TestCore():
         eastern = pytz.timezone('US/Eastern')
         dt1 = eastern.localize(datetime.utcnow())
         dt2 = parse(generate(dt1, utc=False, microseconds=True), utc=False)
-        eq_(dt1, dt2)
+        assert dt1 == dt2
 
     def test_generate_local_parse_utc(self):
         '''
@@ -123,7 +123,7 @@ class TestCore():
         eastern = pytz.timezone('US/Eastern')
         dt1 = eastern.localize(datetime.utcnow())
         dt2 = parse(generate(dt1, utc=False, microseconds=True))
-        eq_(dt1, dt2)
+        assert dt1 == dt2
 
 
 class TestExhaustiveRoundtrip():
@@ -150,7 +150,7 @@ class TestExhaustiveRoundtrip():
         dt1 = tzinfo.localize(datetime.utcnow())
         timestamp = generate(dt1, utc=False, microseconds=True)
         dt2 = parse(timestamp, utc=False)
-        eq_(dt1, dt2)
+        assert dt1 == dt2
 
     def test_utc_roundtrip(self):
         for tz_name in pytz.all_timezones:
@@ -167,4 +167,4 @@ class TestExhaustiveRoundtrip():
         dt1 = tzinfo.localize(datetime.utcnow())
         timestamp = generate(dt1, utc=False, microseconds=True)
         dt2 = parse(timestamp)
-        eq_(dt1, dt2)
+        assert dt1 == dt2
