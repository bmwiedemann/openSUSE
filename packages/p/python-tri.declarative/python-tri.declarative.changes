-------------------------------------------------------------------
Fri May 29 09:28:07 UTC 2020 - Tomáš Chvátal <tchvatal@suse.com>

- Switch to pytest5 and disable one test that does not work with it

-------------------------------------------------------------------
Fri Apr 17 11:19:26 UTC 2020 - pgajdos@suse.com

- version update to 5.3.0
  * Enable `@class_shortcut` to override baseclass shortcuts with the same name.
  * Fix `@with_meta` failing on method declarations with `@staticmethod` declaration

-------------------------------------------------------------------
Wed Mar 11 09:57:25 UTC 2020 - pgajdos@suse.com

- version update to 5.2.0
  5.2.0 (2020-02-28)
  ------------------
  * The namespace merge is narrowed to only affect the @with_meta case.
  * Handle calling `Namespace` with `call_target__attribute=None`
  5.1.1 (2020-02-11)
  ------------------
  * Improve namespace merge in @with_meta to not trip up @declarative
  5.1.0 (2020-02-11)
  ------------------
  * Fix @with_meta argument injector to merge namespaces
  5.0.1 (2019-02-03)
  ------------------
  * A minor update to the documentation generation to make it play nice with rST
  5.0.0 (2019-01-30)
  ------------------
  * Added private field to shortcuts: `__tri_declarative_shortcut_stack`. This is useful to be able to figure out a shortcut stack after the fact
  * `get_callable_description` thought stuff that contained a lambda in its string representation was a lambda
  * Removed all deprecated APIs/behaviors:
      * `creation_ordered`
      * The promotion of string values to keys in `Namespace`
  * Much improved error messages
  4.0.1 (2019-10-23)
  ------------------
  * Bugfix to correctly handle Namespace as callable/not callable depending on content
  4.0.0 (2019-10-11)
  ------------------
  * `get_meta()` now collects extra arguments in a `Namespace` to get consistent override behaviour.
  * `should_show` no longer accepts a callable as a valid return value. It will assert on this, because it's always a mistake.
  * Added `evaluate_strict` and `evaluate_recursive_strict` that will not accept callables left over after the evaluation. If possible prefer these methods because they will stop the user of your library from making the mistake of not matching the given signature and ending up with an unevaluated callable in the output.

-------------------------------------------------------------------
Thu Aug  8 01:26:58 AM UTC 2019 - John Vandenberg <jayvdb@gmail.com>

- Initial spec for v3.1.0
