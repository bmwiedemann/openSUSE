diff --git a/allpairspy/allpairs.py b/allpairspy/allpairs.py
index 0164906..b8b1a82 100644
--- a/allpairspy/allpairs.py
+++ b/allpairspy/allpairs.py
@@ -1,16 +1,11 @@
-# encoding: utf-8
-
 from collections import OrderedDict, namedtuple
-from functools import cmp_to_key
+from functools import cmp_to_key, reduce
 from itertools import combinations
 
-import six
-from six.moves import range, reduce
-
 from .pairs_storage import PairsStorage, key
 
 
-class Item(object):
+class Item(object):
     @property
     def id(self):
         return self.__item_id
@@ -48,7 +43,7 @@ def cmp_item(lhs, rhs):
     return -1 if lhs.weights < rhs.weights else 1
 
 
-class AllPairs(object):
+class AllPairs(object):
     def __init__(self, parameters, filter_func=lambda x: True, previously_tested=None, n=2):
         """
         TODO: check that input arrays are:
@@ -160,7 +155,7 @@ def __next__(self):
 
     def __validate_parameter(self, value):
         if isinstance(value, OrderedDict):
-            for parameter_list in six.itervalues(value):
+            for parameter_list in value.values():
                 if not parameter_list:
                     raise ValueError("each parameter arrays must have at least one item")
 
@@ -180,7 +175,7 @@ def __resort_working_array(self, chosen_item_list, num):
             new_combs = [
                 # numbers of new combinations to be created if this item is
                 # appended to array
-                set([key(z) for z in combinations(chosen_item_list + [item], i + 1)])
+                {key(z) for z in combinations(chosen_item_list + [item], i + 1)}
                 - self.__pairs.get_combs()[i]
                 for i in range(0, self.__n)
             ]
@@ -233,4 +228,4 @@ def __extract_value_matrix(self, parameters):
         if not self.__is_ordered_dict_param:
             return parameters
 
-        return [v for v in six.itervalues(parameters)]
+        return [v for v in parameters.values()]
diff --git a/allpairspy/pairs_storage.py b/allpairspy/pairs_storage.py
index 163b492..8de0329 100644
--- a/allpairspy/pairs_storage.py
+++ b/allpairspy/pairs_storage.py
@@ -1,11 +1,7 @@
-# encoding: utf-8
-
 from itertools import combinations
 
-from six.moves import range
-
 
-class Node(object):
+class Node(object):
     @property
     def id(self):
         return self.__node_id
@@ -40,7 +36,7 @@ def key(items):
     return key_value
 
 
-class PairsStorage(object):
+class PairsStorage(object):
     def __init__(self, n):
         self.__n = n
         self.__nodes = {}
diff --git a/requirements/requirements.txt b/requirements/requirements.txt
index d270018..e69de29 100644
--- a/requirements/requirements.txt
+++ b/requirements/requirements.txt
@@ -1 +0,0 @@
-six>=1.10.0,<2.0.0

