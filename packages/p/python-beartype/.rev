<revisionlist>
  <revision rev="1" vrev="1">
    <srcmd5>e7461d2eb8a325e527c4088441ebfb2b</srcmd5>
    <version>0.10.4</version>
    <time>1651784835</time>
    <user>dimstar_suse</user>
    <comment>Required by python-sphinx-autodoc-typehints </comment>
    <requestid>975166</requestid>
  </revision>
  <revision rev="2" vrev="1">
    <srcmd5>9d22fb1359dea04b0b01e910e45d73b0</srcmd5>
    <version>0.11.0</version>
    <time>1665592005</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>1010199</requestid>
  </revision>
  <revision rev="3" vrev="1">
    <srcmd5>b276da6f7c0029da6bba6a6b68313477</srcmd5>
    <version>0.12.0</version>
    <time>1674737850</time>
    <user>dimstar_suse</user>
    <comment>- Disable test_beartype_in_sphinx, broken with sphinx 6.1.3
  gh#beartype/beartype#209
- Update to version 0.12.0
  Change log - https://github.com/beartype/beartype/releases
</comment>
    <requestid>1060970</requestid>
  </revision>
  <revision rev="4" vrev="1">
    <srcmd5>e2104e9ef6e4f6b06b288912f5cffa48</srcmd5>
    <version>0.13.1</version>
    <time>1681654054</time>
    <user>dimstar_suse</user>
    <comment>- update to 0.13.1:
  * The `test_pep561_mypy()` integration test validating that
    @beartype passes all mypy-specific static runtime type-
    checks
  * **Pandera (pandas) type hints** (i.e., ad-hoc PEP-
    noncompliant type hints validating pandas `DataFrame`
    objects, produced by subscripting factories published by the
    `pandera.typing` subpackage and validated *only* by user-
    defined callables decorated by the ad-hoc PEP-noncompliant
    `@pandera.check_types` runtime type-checking decorator),
    resolving feature request #227 kindly submitted by
    @ulfaslakprecis (Ulf Aslak) the Big Boss Typer. @beartype
    now:
  * Transparently supports pandera's PEP-noncompliant
    `@pandera.check_types` decorator for deeply runtime type-
    checking arbitrary pandas objects.
  * *Always* performs a rudimentary `O(1)` `isinstance()`-based
    type-check for each pandera type hint. Doing so substantially
    improves usability in common use cases, including:
  * Callables annotated by one or more pandera type hints that
    are correctly decorated by @beartype but incorrectly *not*
    decorated by the pandera-specific `@pandera.check_types`
    decorator.
  * (Data)classes annotated by one or more pandera type hints.
  * Pandera type hints passed as the second argument to
    statement-level @beartype type-checkers â€“ including:
  * **Pseudo-callable monkey-patching support.** `@beartype` now
    supports **pseudo-callables** (i.e., otherwise uncallable
    objects masquerading as callable by defining the `__call__()`
    dunder method), resolving feature request #211 kindly</comment>
    <requestid>1079737</requestid>
  </revision>
  <revision rev="5" vrev="1">
    <srcmd5>f48a916765af730cab0b1df17a2f1f47</srcmd5>
    <version>0.14.0</version>
    <time>1683213040</time>
    <user>dimstar_suse</user>
    <comment>- update to 0.14.0:
  * This minor release brings exhilarating support for PEP
    673 (i.e., `typing.Self`) and PEP 675 (i.e.,
    `typing.LiteralString`) as well as
    substantially improved compatibility with PyPy.
  * This release resolves a significant incompatibility
    with PyPy, whose implementation of the `id()` builtin appears
    to occasionally [read: non-deterministically] return object
    identifiers that are negative integers. Specifically,
    @beartype now guaranteeably generates valid parameter names
    passed to type-checking wrapper functions regardless of the
    sign of the `id()` of the values of those parameters. Doing
    so resolves issue #232 kindly submitted by @jvesely (Jan
    Vesely) who purportedly lives in or around an ancient pork
    by-product that has calcified into stone -- which is quite
    impressive, really. Stoneham: it's like Stonehenge, only
    American and yummy in your tummy. Thanks so much for the
    heads up, @jvesely.</comment>
    <requestid>1084451</requestid>
  </revision>
  <revision rev="6" vrev="1">
    <srcmd5>da8ae10c3badc9708a6f75838a94b639</srcmd5>
    <version>0.14.1</version>
    <time>1686506156</time>
    <user>dimstar_suse</user>
    <comment>- update to 0.14.1:
  * **[PEP 517][PEP 517].** This release restores our [PEP
    517][PEP 517]-compliant top-level `pyproject.toml` file in a
    vain and probably misguided attempt to restore the
    buildability of our documentation on the third-party
    ReadTheDocs (RTD) documentation host. Doing so nudges
    @beartype mildly closer towards abandoning the antiquated
    (and frankly objectionable) `setuptools` build system to
    Hatch, officially endorsed by the Python Packaging Authority
    (PyPA) as sane and *not* `setuptools`, which are the only
    criteria @leycec is looking for in a Python build system. The
    bar could *not* be lower.
  * **[PEP 544][PEP 544].** @beartype now officially supports
    *all* third-party `typing_extensions.Protocol` backports,
    resolving issue #241 kindly submitted by MIT machine learning
    guru @rsokl (Ryan Soklaski). This release also restores
    testing of the `typing_extensions.Protocol` superclass, which
    now passes under *all* `typing_extensions` versions. Let's
    not ask prying and uncomfortable questions about what exactly
    was resolved here, because then @leycec might break down and
    openly weep emoji tears live on GitHub.
  * **[PEP 585][PEP 585].** This release &quot;undeprecates&quot; the
    `beartype.typing.{Match,Pattern}` type hints deprecated by
    [PEP 585][PEP 585], resolving issue #240 kindly submitted by
    AI King @KyleKing (Kyle King). Specifically, the
    `beartype.typing` subpackage now imports those type hints
    from the standard `re` rather than `typing` module under
    Python &gt;= 3.9. This is why @leycec sighs in his sleep while
    clutching a Bengal plushy.</comment>
    <requestid>1092181</requestid>
  </revision>
</revisionlist>
