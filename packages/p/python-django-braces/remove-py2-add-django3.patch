From 5c6604123eaa73f53875c5dce5843a6598b7b52c Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Kamil=20Ga=C5=82uszka?= <kamil.galuszka@solution4future.com>
Date: Mon, 28 Sep 2020 13:34:14 +0200
Subject: [PATCH] feat: remove support for python 2.7 and add support for
 Django 3.1

---
 .travis.yml                 |  16 ++----
 braces/views/__init__.py    |   2 -
 braces/views/_access.py     |  11 +---
 braces/views/_ajax.py       |   6 +-
 braces/views/_forms.py      |  19 ++----
 braces/views/_other.py      |  12 +---
 requirements-docs.txt       |   4 +-
 setup.py                    |  41 ++++++++++---
 tests/compat.py             |  25 --------
 tests/factories.py          |   2 -
 tests/forms.py              |   2 -
 tests/test_access_mixins.py |  36 +++++-------
 tests/test_ajax_mixins.py   |  10 ++--
 tests/test_forms.py         |   2 -
 tests/test_other_mixins.py  |  13 ++---
 tests/urls.py               | 111 +++++++++++++++++-------------------
 tests/urls_namespaced.py    |   6 +-
 tests/views.py              |   7 +--
 tox.ini                     |  11 ++--
 19 files changed, 137 insertions(+), 199 deletions(-)
 delete mode 100644 tests/compat.py

diff --git a/braces/views/__init__.py b/braces/views/__init__.py
index 84ebad4..e249a93 100644
--- a/braces/views/__init__.py
+++ b/braces/views/__init__.py
@@ -1,5 +1,3 @@
-from __future__ import absolute_import
-
 from ._access import (
     AnonymousRequiredMixin,
     GroupRequiredMixin,
diff --git a/braces/views/_access.py b/braces/views/_access.py
index f9e6459..9ce08ff 100644
--- a/braces/views/_access.py
+++ b/braces/views/_access.py
@@ -9,14 +9,9 @@
 from django.http import (HttpResponseRedirect, HttpResponsePermanentRedirect,
                          Http404, HttpResponse, StreamingHttpResponse)
 from django.shortcuts import resolve_url
-try:
-    from django.utils.encoding import force_str as force_string
-except ImportError:
-    from django.utils.encoding import force_text as force_string
+from django.utils.encoding import force_str
 from django.utils.timezone import now
 
-import six
-
 
 class AccessMixin(object):
     """
@@ -38,7 +33,7 @@ def get_login_url(self):
                 'Define {0}.login_url or settings.LOGIN_URL or override '
                 '{0}.get_login_url().'.format(self.__class__.__name__))
 
-        return force_string(login_url)
+        return force_str(login_url)
 
     def get_redirect_field_name(self):
         """
@@ -316,7 +311,7 @@ class GroupRequiredMixin(AccessMixin):
     def get_group_required(self):
         if self.group_required is None or (
                 not isinstance(self.group_required,
-                               (list, tuple) + six.string_types)
+                               (list, tuple, str))
         ):
 
             raise ImproperlyConfigured(
diff --git a/braces/views/_ajax.py b/braces/views/_ajax.py
index 9baaaf2..2e3f9fb 100644
--- a/braces/views/_ajax.py
+++ b/braces/views/_ajax.py
@@ -1,13 +1,9 @@
-from __future__ import unicode_literals
-
 import json
 from django.core import serializers
 from django.core.exceptions import ImproperlyConfigured
 from django.core.serializers.json import DjangoJSONEncoder
 from django.http import HttpResponse, HttpResponseBadRequest
 
-import six
-
 
 class JSONResponseMixin(object):
     """
@@ -21,7 +17,7 @@ class JSONResponseMixin(object):
     def get_content_type(self):
         if (self.content_type is not None and
             not isinstance(self.content_type,
-                           (six.string_types, six.text_type))):
+                           str)):
             raise ImproperlyConfigured(
                 '{0} is missing a content type. Define {0}.content_type, '
                 'or override {0}.get_content_type().'.format(
diff --git a/braces/views/_forms.py b/braces/views/_forms.py
index 047939f..6bc3a1e 100644
--- a/braces/views/_forms.py
+++ b/braces/views/_forms.py
@@ -3,18 +3,11 @@
 from django.contrib import messages
 from django.core.exceptions import ImproperlyConfigured
 from django.utils.decorators import method_decorator
-try:
-    from django.utils.encoding import force_str as force_string
-except ImportError:
-    from django.utils.encoding import force_text as force_string
+from django.utils.encoding import force_str
 from django.utils.functional import Promise
 from django.views.decorators.csrf import csrf_exempt
-try:
-    from django.urls import reverse
-except ImportError:
-    from django.core.urlresolvers import reverse
+from django.urls import reverse
 
-import six
 
 
 class CsrfExemptMixin(object):
@@ -121,13 +114,13 @@ def get_form_valid_message(self):
             )
 
         if not isinstance(self.form_valid_message,
-                          (six.string_types, six.text_type, Promise)):
+                          (str, Promise)):
             raise ImproperlyConfigured(
                 '{0}.form_valid_message must be a str or unicode '
                 'object.'.format(self.__class__.__name__)
             )
 
-        return force_string(self.form_valid_message)
+        return force_str(self.form_valid_message)
 
     def form_valid(self, form):
         """
@@ -167,12 +160,12 @@ def get_form_invalid_message(self):
                     self.__class__.__name__))
 
         if not isinstance(self.form_invalid_message,
-                          (six.string_types, six.text_type, Promise)):
+                          (str, Promise)):
             raise ImproperlyConfigured(
                 '{0}.form_invalid_message must be a str or unicode '
                 'object.'.format(self.__class__.__name__))
 
-        return force_string(self.form_invalid_message)
+        return force_str(self.form_invalid_message)
 
     def form_invalid(self, form):
         response = super(FormInvalidMessageMixin, self).form_invalid(form)
diff --git a/braces/views/_other.py b/braces/views/_other.py
index 00825c8..bf11d0b 100644
--- a/braces/views/_other.py
+++ b/braces/views/_other.py
@@ -1,13 +1,7 @@
 from django.core.exceptions import ImproperlyConfigured
 from django.shortcuts import redirect
-try:
-    from django.utils.encoding import force_str as force_string
-except ImportError:
-    from django.utils.encoding import force_text as force_string
-try:
-    from django.urls import resolve
-except ImportError:
-    from django.core.urlresolvers import resolve
+from django.utils.encoding import force_str
+from django.urls import resolve
 
 
 class SetHeadlineMixin(object):
@@ -31,7 +25,7 @@ def get_headline(self):
                 '{0} is missing a headline. '
                 'Define {0}.headline, or override '
                 '{0}.get_headline().'.format(self.__class__.__name__))
-        return force_string(self.headline)
+        return force_str(self.headline)
 
 
 class StaticContextMixin(object):
diff --git a/setup.py b/setup.py
index df223d5..d98ead3 100644
--- a/setup.py
+++ b/setup.py
@@ -1,10 +1,35 @@
+import os
+import re
 from setuptools import setup
 
-import braces
+NAME = 'braces'
+
+def _add_default(m):
+    attr_name, attr_value = m.groups()
+    return ((attr_name, attr_value.strip("\"'")),)
+
+
+def parse_dist_meta():
+    """Extract metadata information from ``$dist/__init__.py``."""
+
+    re_meta = re.compile(r'__(\w+?)__\s*=\s*(.*)')
+    re_doc = re.compile(r'^"""(.+?)"""')
+    here = os.path.abspath(os.path.dirname(__file__))
+    with open(os.path.join(here, NAME, '__init__.py')) as meta_fh:
+        distmeta = {}
+        for line in meta_fh:
+            if line.strip() == '# -eof meta-':
+                break
+            match = re_meta.match(line.strip())
+            if match:
+                distmeta.update(_add_default(match))
+        return distmeta
+
+meta = parse_dist_meta()
 
 setup(
     name="django-braces",
-    version=braces.__version__,
+    version=meta['version'],
     description="Reusable, generic mixins for Django",
     long_description="Mixins to add easy functionality to Django class-based views, forms, and models.",
     keywords="django, views, forms, mixins",
@@ -21,16 +46,16 @@
         "License :: OSI Approved :: BSD License",
         "Environment :: Web Environment",
         "Development Status :: 5 - Production/Stable",
-        "Programming Language :: Python :: 2.7",
-        "Programming Language :: Python :: 3.4",
         "Programming Language :: Python :: 3.5",
         "Programming Language :: Python :: 3.6",
+        "Programming Language :: Python :: 3.7",
+        "Programming Language :: Python :: 3.8",
         "Framework :: Django",
-        "Framework :: Django :: 1.11",
-        "Framework :: Django :: 2.0"
+        "Framework :: Django :: 2.2"
+        "Framework :: Django :: 3.0"
+        "Framework :: Django :: 3.1"
     ],
     install_requires=[
-        "Django>=1.11.0",
-        "six"
+        "Django>=2.2"
     ],
 )
diff --git a/tests/compat.py b/tests/compat.py
deleted file mode 100644
index f40f32c..0000000
--- a/tests/compat.py
+++ /dev/null
@@ -1,25 +0,0 @@
-try:
-    from django.utils.encoding import force_str as force_string
-except ImportError:
-    from django.utils.encoding import force_text as force_string
-
-try:
-    from django.conf.urls import url, include
-except ImportError:
-    from django.conf.urls.defaults import url, include
-
-
-def patterns_compat(urlpatterns):
-    try:
-        from django.conf.urls import patterns
-    except ImportError:
-        try:
-            from django.conf.urls.defaults import patterns
-        except ImportError:
-            patterns = False
-    if patterns:
-        return patterns(
-            '', *urlpatterns
-        )
-    else:
-        return urlpatterns
diff --git a/tests/factories.py b/tests/factories.py
index 8aae6f0..d0ccf11 100644
--- a/tests/factories.py
+++ b/tests/factories.py
@@ -1,5 +1,3 @@
-from __future__ import absolute_import
-
 import factory
 
 from django.contrib.auth.models import Group, Permission, User
diff --git a/tests/forms.py b/tests/forms.py
index c201a12..95fab22 100644
--- a/tests/forms.py
+++ b/tests/forms.py
@@ -1,5 +1,3 @@
-from __future__ import absolute_import
-
 from django import forms
 
 from braces.forms import UserKwargModelFormMixin
diff --git a/tests/test_access_mixins.py b/tests/test_access_mixins.py
index 884e794..8f2d50e 100644
--- a/tests/test_access_mixins.py
+++ b/tests/test_access_mixins.py
@@ -1,6 +1,3 @@
-# -*- coding: utf-8 -*-
-from __future__ import absolute_import, unicode_literals
-
 import datetime
 
 import pytest
@@ -9,14 +6,11 @@
 from django.test.utils import override_settings
 from django.core.exceptions import ImproperlyConfigured, PermissionDenied
 from django.http import Http404, HttpResponse
+from django.utils.encoding import force_str
 from django.utils.timezone import make_aware, get_current_timezone
 
-try:
-    from django.urls import reverse_lazy
-except ImportError:
-    from django.core.urlresolvers import reverse_lazy
+from django.urls import reverse_lazy
 
-from .compat import force_string
 from .factories import GroupFactory, UserFactory
 from .helpers import TestViewHelper
 from .views import (PermissionRequiredView, MultiplePermissionsRequiredView,
@@ -54,7 +48,7 @@ def test_success(self):
         self.client.login(username=user.username, password='asdf1234')
         resp = self.client.get(self.view_url)
         self.assertEqual(200, resp.status_code)
-        self.assertEqual('OK', force_string(resp.content))
+        self.assertEqual('OK', force_str(resp.content))
 
     def test_redirects_to_login(self):
         """
@@ -116,7 +110,7 @@ def func(request):
 
         resp = self.dispatch_view(req, raise_exception=func)
         assert resp.status_code == 200
-        assert force_string(resp.content) == 'CUSTOM'
+        assert force_str(resp.content) == 'CUSTOM'
 
     def test_raise_func_false(self):
         """
@@ -244,7 +238,7 @@ def test_authenticated(self):
         self.client.login(username=user.username, password='asdf1234')
         resp = self.client.get(self.view_url)
         assert resp.status_code == 200
-        assert force_string(resp.content) == 'OK'
+        assert force_str(resp.content) == 'OK'
 
     def test_anonymous_redirects(self):
         resp = self.dispatch_view(
@@ -327,14 +321,14 @@ def test_anonymous(self):
         """
         resp = self.client.get(self.view_url)
         self.assertEqual(200, resp.status_code)
-        self.assertEqual('OK', force_string(resp.content))
+        self.assertEqual('OK', force_str(resp.content))
 
         # Test with reverse_lazy
         resp = self.dispatch_view(
             self.build_request(),
             login_url=reverse_lazy(self.view_url))
         self.assertEqual(200, resp.status_code)
-        self.assertEqual('OK', force_string(resp.content))
+        self.assertEqual('OK', force_str(resp.content))
 
     def test_authenticated(self):
         """
@@ -470,7 +464,7 @@ def test_all_permissions_key(self):
         req = self.build_request(user=user)
 
         resp = self.dispatch_view(req, permissions=permissions)
-        self.assertEqual('OK', force_string(resp.content))
+        self.assertEqual('OK', force_str(resp.content))
 
         user = UserFactory(permissions=['auth.add_user'])
         with self.assertRaises(PermissionDenied):
@@ -487,7 +481,7 @@ def test_any_permissions_key(self):
         req = self.build_request(user=user)
 
         resp = self.dispatch_view(req, permissions=permissions)
-        self.assertEqual('OK', force_string(resp.content))
+        self.assertEqual('OK', force_str(resp.content))
 
         user = UserFactory(permissions=[])
         with self.assertRaises(PermissionDenied):
@@ -546,7 +540,7 @@ def test_with_string(self):
         self.client.login(username=user.username, password='asdf1234')
         resp = self.client.get(self.view_url)
         self.assertEqual(200, resp.status_code)
-        self.assertEqual('OK', force_string(resp.content))
+        self.assertEqual('OK', force_str(resp.content))
 
     def test_with_group_list(self):
         group_list = ['test_group', 'editors']
@@ -558,7 +552,7 @@ def test_with_group_list(self):
         self.client.login(username=user.username, password='asdf1234')
         resp = self.client.get(self.view_url)
         self.assertEqual(200, resp.status_code)
-        self.assertEqual('OK', force_string(resp.content))
+        self.assertEqual('OK', force_str(resp.content))
         self.view_class.group_required = 'test_group'
         self.assertEqual('test_group', self.view_class.group_required)
 
@@ -567,7 +561,7 @@ def test_superuser_allowed(self):
         self.client.login(username=user.username, password='asdf1234')
         resp = self.client.get(self.view_url)
         self.assertEqual(200, resp.status_code)
-        self.assertEqual('OK', force_string(resp.content))
+        self.assertEqual('OK', force_str(resp.content))
 
     def test_improperly_configured(self):
         view = self.view_class()
@@ -592,7 +586,7 @@ def test_with_unicode(self):
         self.client.login(username=user.username, password='asdf1234')
         resp = self.client.get(self.view_url)
         self.assertEqual(200, resp.status_code)
-        self.assertEqual('OK', force_string(resp.content))
+        self.assertEqual('OK', force_str(resp.content))
         self.view_class.group_required = 'test_group'
         self.assertEqual('test_group', self.view_class.group_required)
 
@@ -618,7 +612,7 @@ def test_with_user_pass(self):
         resp = self.client.get(self.view_url)
 
         self.assertEqual(200, resp.status_code)
-        self.assertEqual('OK', force_string(resp.content))
+        self.assertEqual('OK', force_str(resp.content))
 
     def test_with_user_not_pass(self):
         user = self.build_authorized_user(is_superuser=True)
@@ -689,7 +683,7 @@ def test_recent_login(self):
         self.client.login(username=user.username, password='asdf1234')
         resp = self.client.get(self.recent_view_url)
         assert resp.status_code == 200
-        assert force_string(resp.content) == 'OK'
+        assert force_str(resp.content) == 'OK'
 
     def test_outdated_login(self):
         self.view_class.max_last_login_delta = 0
diff --git a/tests/test_ajax_mixins.py b/tests/test_ajax_mixins.py
index 7e43acc..bf266e4 100644
--- a/tests/test_ajax_mixins.py
+++ b/tests/test_ajax_mixins.py
@@ -1,15 +1,13 @@
-from __future__ import absolute_import, unicode_literals
-
 import json
 import mock
 
 from django import test
 from django.core.exceptions import ImproperlyConfigured
 from django.http import HttpResponse
+from django.utils.encoding import force_str
 
 from braces.views import AjaxResponseMixin
 
-from .compat import force_string
 from .factories import ArticleFactory, UserFactory
 from .helpers import TestViewHelper
 from .views import (SimpleJsonView, JsonRequestResponseView,
@@ -30,7 +28,7 @@ def test_xhr(self):
         for m in self.methods:
             fn = getattr(self.client, m)
             resp = fn('/ajax_response/', HTTP_X_REQUESTED_WITH='XMLHttpRequest')
-            assert force_string(resp.content) == 'AJAX_OK'
+            assert force_str(resp.content) == 'AJAX_OK'
 
     def test_not_xhr(self):
         """
@@ -40,7 +38,7 @@ def test_not_xhr(self):
         for m in self.methods:
             fn = getattr(self.client, m)
             resp = fn('/ajax_response/')
-            assert force_string(resp.content) == 'OK'
+            assert force_str(resp.content) == 'OK'
 
     def test_fallback_to_normal_methods(self):
         """
@@ -83,7 +81,7 @@ def get_content(self, url):
         """
         resp = self.client.get(url)
         self.assert_json_response(resp)
-        content = force_string(resp.content)
+        content = force_str(resp.content)
         return content
 
     def test_simple_json(self):
diff --git a/tests/test_forms.py b/tests/test_forms.py
index 7dc3015..23c5673 100644
--- a/tests/test_forms.py
+++ b/tests/test_forms.py
@@ -1,5 +1,3 @@
-from __future__ import absolute_import
-
 from django import test
 from django.contrib.auth.models import User
 
diff --git a/tests/test_other_mixins.py b/tests/test_other_mixins.py
index 2e07a77..5115ba4 100644
--- a/tests/test_other_mixins.py
+++ b/tests/test_other_mixins.py
@@ -1,6 +1,3 @@
-# -*- coding: utf-8 -*-
-from __future__ import absolute_import, unicode_literals
-
 import mock
 import pytest
 
@@ -12,10 +9,10 @@
 from django import test
 from django.test.utils import override_settings
 from django.views.generic import View
+from django.utils.encoding import force_str
 
 from braces.views import (SetHeadlineMixin, MessageMixin, FormValidMessageMixin,
                           FormInvalidMessageMixin)
-from .compat import force_string
 from .factories import UserFactory
 from .helpers import TestViewHelper
 from .models import Article, CanonicalArticle
@@ -53,7 +50,7 @@ def test_post_method(self):
         user = UserFactory()
         self.client.login(username=user.username, password='asdf1234')
         resp = self.client.post('/form_with_user_kwarg/', {'field1': 'foo'})
-        assert force_string(resp.content) == "username: %s" % user.username
+        assert force_str(resp.content) == "username: %s" % user.username
 
     def test_get_method(self):
         user = UserFactory()
@@ -144,7 +141,7 @@ def test_csrf_token_is_not_required(self):
         """
         resp = self.client.post('/csrf_exempt/', {'field1': 'test'})
         self.assertEqual(200, resp.status_code)
-        self.assertEqual("OK", force_string(resp.content))
+        self.assertEqual("OK", force_str(resp.content))
 
 
 class TestSelectRelatedMixin(TestViewHelper, test.TestCase):
@@ -713,7 +710,7 @@ def test_form_valid_message_not_str(self):
     def test_form_valid_returns_message(self):
         mixin = FormValidMessageMixin()
         mixin.form_valid_message = 'Good øø'
-        self.assertEqual(force_string('Good øø'), mixin.get_form_valid_message())
+        self.assertEqual(force_str('Good øø'), mixin.get_form_valid_message())
 
     def test_form_invalid_message_not_set(self):
         mixin = FormInvalidMessageMixin()
@@ -729,7 +726,7 @@ def test_form_invalid_message_not_str(self):
     def test_form_invalid_returns_message(self):
         mixin = FormInvalidMessageMixin()
         mixin.form_invalid_message = 'Bad øø'
-        self.assertEqual(force_string('Bad øø'), mixin.get_form_invalid_message())
+        self.assertEqual(force_str('Bad øø'), mixin.get_form_invalid_message())
 
 
 class TestAllVerbsMixin(test.TestCase):
diff --git a/tests/urls.py b/tests/urls.py
index 89f1bc2..276616c 100644
--- a/tests/urls.py
+++ b/tests/urls.py
@@ -1,134 +1,125 @@
-from __future__ import absolute_import
-
 from django.core.exceptions import ImproperlyConfigured
 from django.contrib.auth.views import LoginView
+from django.urls import include, re_path
 from . import views
-from .compat import include, url, patterns_compat
 
 urlpatterns = [
     # LoginRequiredMixin tests
-    url(r'^login_required/$', views.LoginRequiredView.as_view()),
+    re_path(r'^login_required/$', views.LoginRequiredView.as_view()),
 
     # AnonymousRequiredView tests
-    url(r'^unauthenticated_view/$', views.AnonymousRequiredView.as_view(),
+    re_path(r'^unauthenticated_view/$', views.AnonymousRequiredView.as_view(),
         name='unauthenticated_view'),
-    url(r'^authenticated_view/$', views.AuthenticatedView.as_view(),
+    re_path(r'^authenticated_view/$', views.AuthenticatedView.as_view(),
         name='authenticated_view'),
 
     # AjaxResponseMixin tests
-    url(r'^ajax_response/$', views.AjaxResponseView.as_view()),
+    re_path(r'^ajax_response/$', views.AjaxResponseView.as_view()),
 
     # CreateAndRedirectToEditView tests
-    url(r'^article/create/$', views.CreateArticleView.as_view()),
-    url(r'^article/(?P<pk>\d+)/edit/$', views.EditArticleView.as_view(),
+    re_path(r'^article/create/$', views.CreateArticleView.as_view()),
+    re_path(r'^article/(?P<pk>\d+)/edit/$', views.EditArticleView.as_view(),
         name="edit_article"),
 
-    url(r'^article_list/create/$',
+    re_path(r'^article_list/create/$',
         views.CreateArticleAndRedirectToListView.as_view()),
-    url(r'^article_list_bad/create/$',
+    re_path(r'^article_list_bad/create/$',
         views.CreateArticleAndRedirectToListViewBad.as_view()),
-    url(r'^article_list/$', views.ArticleListView.as_view(),
+    re_path(r'^article_list/$', views.ArticleListView.as_view(),
         name='article_list'),
 
     # CanonicalSlugDetailMixin tests
-    url(r'^article-canonical/(?P<pk>\d+)-(?P<slug>[-\w]+)/$',
+    re_path(r'^article-canonical/(?P<pk>\d+)-(?P<slug>[-\w]+)/$',
         views.CanonicalSlugDetailView.as_view(),
         name="canonical_slug"),
-    url(r'^article-canonical-override/(?P<pk>\d+)-(?P<slug>[-\w]+)/$',
+    re_path(r'^article-canonical-override/(?P<pk>\d+)-(?P<slug>[-\w]+)/$',
         views.OverriddenCanonicalSlugDetailView.as_view(),
         name="canonical_override"),
-    url(r'^article-canonical-custom-kwargs/(?P<my_pk>\d+)-(?P<my_slug>[-\w]+)/$',
+    re_path(r'^article-canonical-custom-kwargs/(?P<my_pk>\d+)-(?P<my_slug>[-\w]+)/$',
         views.CanonicalSlugDetailCustomUrlKwargsView.as_view(),
         name="canonical_custom_kwargs"),
-    url(r'^article-canonical-model/(?P<pk>\d+)-(?P<slug>[-\w]+)/$',
+    re_path(r'^article-canonical-model/(?P<pk>\d+)-(?P<slug>[-\w]+)/$',
         views.ModelCanonicalSlugDetailView.as_view(),
         name="canonical_model"),
 
     # UserFormKwargsMixin tests
-    url(r'^form_with_user_kwarg/$', views.FormWithUserKwargView.as_view()),
+    re_path(r'^form_with_user_kwarg/$', views.FormWithUserKwargView.as_view()),
 
     # SetHeadlineMixin tests
-    url(r'^headline/$', views.HeadlineView.as_view(), name='headline'),
-    url(r'^headline/lazy/$', views.LazyHeadlineView.as_view()),
-    url(r'^headline/(?P<s>[\w-]+)/$', views.DynamicHeadlineView.as_view()),
+    re_path(r'^headline/$', views.HeadlineView.as_view(), name='headline'),
+    re_path(r'^headline/lazy/$', views.LazyHeadlineView.as_view()),
+    re_path(r'^headline/(?P<s>[\w-]+)/$', views.DynamicHeadlineView.as_view()),
 
     # ExtraContextMixin tests
-    url(r'^context/$', views.ContextView.as_view(), name='context'),
+    re_path(r'^context/$', views.ContextView.as_view(), name='context'),
 
     # PermissionRequiredMixin tests
-    url(r'^permission_required/$', views.PermissionRequiredView.as_view()),
+    re_path(r'^permission_required/$', views.PermissionRequiredView.as_view()),
 
     # MultiplePermissionsRequiredMixin tests
-    url(r'^multiple_permissions_required/$',
+    re_path(r'^multiple_permissions_required/$',
         views.MultiplePermissionsRequiredView.as_view()),
 
     # SuperuserRequiredMixin tests
-    url(r'^superuser_required/$', views.SuperuserRequiredView.as_view()),
+    re_path(r'^superuser_required/$', views.SuperuserRequiredView.as_view()),
 
     # StaffuserRequiredMixin tests
-    url(r'^staffuser_required/$', views.StaffuserRequiredView.as_view()),
+    re_path(r'^staffuser_required/$', views.StaffuserRequiredView.as_view()),
 
     # GroupRequiredMixin tests
-    url(r'^group_required/$', views.GroupRequiredView.as_view()),
+    re_path(r'^group_required/$', views.GroupRequiredView.as_view()),
 
     # UserPassesTestMixin tests
-    url(r'^user_passes_test/$', views.UserPassesTestView.as_view()),
+    re_path(r'^user_passes_test/$', views.UserPassesTestView.as_view()),
 
     # UserPassesTestMixin tests
-    url(r'^user_passes_test_not_implemented/$',
+    re_path(r'^user_passes_test_not_implemented/$',
         views.UserPassesTestNotImplementedView.as_view()),
 
     # CsrfExemptMixin tests
-    url(r'^csrf_exempt/$', views.CsrfExemptView.as_view()),
+    re_path(r'^csrf_exempt/$', views.CsrfExemptView.as_view()),
 
     # JSONResponseMixin tests
-    url(r'^simple_json/$', views.SimpleJsonView.as_view()),
-    url(r'^simple_json_custom_encoder/$',
+    re_path(r'^simple_json/$', views.SimpleJsonView.as_view()),
+    re_path(r'^simple_json_custom_encoder/$',
         views.CustomJsonEncoderView.as_view()),
-    url(r'^simple_json_400/$', views.SimpleJsonBadRequestView.as_view()),
-    url(r'^article_list_json/$', views.ArticleListJsonView.as_view()),
+    re_path(r'^simple_json_400/$', views.SimpleJsonBadRequestView.as_view()),
+    re_path(r'^article_list_json/$', views.ArticleListJsonView.as_view()),
 
     # JsonRequestResponseMixin tests
-    url(r'^json_request/$', views.JsonRequestResponseView.as_view()),
-    url(r'^json_bad_request/$', views.JsonBadRequestView.as_view()),
-    url(r'^json_custom_bad_request/$',
+    re_path(r'^json_request/$', views.JsonRequestResponseView.as_view()),
+    re_path(r'^json_bad_request/$', views.JsonBadRequestView.as_view()),
+    re_path(r'^json_custom_bad_request/$',
         views.JsonCustomBadRequestView.as_view()),
 
     # FormMessagesMixin tests
-    url(r'form_messages/$', views.FormMessagesView.as_view()),
+    re_path(r'form_messages/$', views.FormMessagesView.as_view()),
 
     # AllVerbsMixin tests
-    url(r'all_verbs/$', views.AllVerbsView.as_view()),
-    url(r'all_verbs_no_handler/$',
+    re_path(r'all_verbs/$', views.AllVerbsView.as_view()),
+    re_path(r'all_verbs_no_handler/$',
         views.AllVerbsView.as_view(all_handler=None)),
 
     # SSLRequiredMixin tests
-    url(r'^sslrequired/$', views.SSLRequiredView.as_view()),
+    re_path(r'^sslrequired/$', views.SSLRequiredView.as_view()),
 
     # RecentLoginRequiredMixin tests
-    url(r'^recent_login/$', views.RecentLoginRequiredView.as_view()),
-    url(r'^outdated_login/$', views.RecentLoginRequiredView.as_view()),
+    re_path(r'^recent_login/$', views.RecentLoginRequiredView.as_view()),
+    re_path(r'^outdated_login/$', views.RecentLoginRequiredView.as_view()),
 
     # HeaderMixin tests
-    url(r'^headers/attribute/$', views.AttributeHeaderView.as_view()),
-    url(r'^headers/method/$', views.MethodHeaderView.as_view()),
-    url(r'^headers/existing/$', views.ExistingHeaderView.as_view()),
+    re_path(r'^headers/attribute/$', views.AttributeHeaderView.as_view()),
+    re_path(r'^headers/method/$', views.MethodHeaderView.as_view()),
+    re_path(r'^headers/existing/$', views.ExistingHeaderView.as_view()),
+]
+
+urlpatterns += [
+    re_path(r'^accounts/login/$', LoginView.as_view(template_name='blank.html')),
+    re_path(r'^auth/login/$', LoginView.as_view(template_name='blank.html')),
 ]
 
 urlpatterns += [
-    url(r'^accounts/login/$', LoginView.as_view(template_name='blank.html')),
-    url(r'^auth/login/$', LoginView.as_view(template_name='blank.html')),
+    re_path(r'^article-canonical-namespaced/',
+        include(('tests.urls_namespaced', 'tests'),
+                namespace='some_namespace')),
 ]
-try:
-    urlpatterns += [
-        url(r'^article-canonical-namespaced/',
-            include(('tests.urls_namespaced', 'tests'),
-                    namespace='some_namespace')),
-    ]
-except ImproperlyConfigured:
-    urlpatterns += [
-        url(r'^article-canonical-namespaced/',
-            include('tests.urls_namespaced', namespace='some_namespace')),
-    ]
-
-urlpatterns = patterns_compat(urlpatterns)
diff --git a/tests/urls_namespaced.py b/tests/urls_namespaced.py
index 177e015..cc716be 100644
--- a/tests/urls_namespaced.py
+++ b/tests/urls_namespaced.py
@@ -1,13 +1,11 @@
-from __future__ import absolute_import
+from django.urls import include, re_path
 
 from . import views
-from .compat import url, patterns_compat
 
 urlpatterns = [
     # CanonicalSlugDetailMixin namespace tests
-    url(r'^article/(?P<pk>\d+)-(?P<slug>[\w-]+)/$',
+    re_path(r'^article/(?P<pk>\d+)-(?P<slug>[\w-]+)/$',
         views.CanonicalSlugDetailView.as_view(),
         name="namespaced_article"),
 ]
 
-urlpatterns = patterns_compat(urlpatterns)
diff --git a/tests/views.py b/tests/views.py
index 41314fd..59b67a0 100644
--- a/tests/views.py
+++ b/tests/views.py
@@ -1,13 +1,8 @@
-from __future__ import absolute_import
-
 import codecs
 
 from django.contrib.auth.models import User
 from django.http import HttpResponse
-try:
-    from django.utils.translation import gettext_lazy as _
-except ImportError:
-    from django.utils.translation import ugettext_lazy as _
+from django.utils.translation import gettext_lazy as _
 from django.views.generic import (View, UpdateView, FormView, TemplateView,
                                   ListView, DetailView, CreateView)
 
diff --git a/tox.ini b/tox.ini
index f544ecc..01e20ef 100644
--- a/tox.ini
+++ b/tox.ini
@@ -1,10 +1,9 @@
 [tox]
-envlist = py{27}-django{111},py{36,37,38}-django{111,22,30}
+envlist = py{36,37,38}-django{22,30,31}
 install_command = pip install {opts} "{packages}"
 
 [testenv]
 basepython =
-    py27: python2.7
     py36: python3.6
     py37: python3.7
     py38: python3.8
@@ -14,15 +13,15 @@ commands =
 
 deps =
     mock
-    factory_boy==2.8.1
-    coverage==4.1
+    factory_boy==2.12.0
+    coverage==4.5.4
     pytest
     pytest-django
     pytest-cov
     argparse
-    django111: Django>=1.11,<1.12
     django22: Django>=2.2,<2.3
-    django30: Django>=3.0,<4.0
+    django30: Django>=3.0,<3.1
+    django31: Django>=3.1,<3.2
 
 [pytest]
 addopts = --cov=braces --nomigrations
