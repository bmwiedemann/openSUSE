<package name="perl-String-Formatter" project="openSUSE:Factory">
  <title>Build sprintf-like functions of your own</title>
  <description>String::Formatter is a tool for building sprintf-like formatting routines.
It supports named or positional formatting, custom conversions, fixed
string interpolation, and simple width-matching out of the box. It is easy
to alter its behavior to write new kinds of format string expanders. For
most cases, it should be easy to build all sorts of formatters out of the
options built into String::Formatter.

Normally, String::Formatter will be used to import a sprintf-like routine
referred to as &quot;'stringf'&quot;, but which can be given any name you like. This
routine acts like sprintf in that it takes a string and some inputs and
returns a new string:

  my $output = stringf &quot;Some %a format %s for you to %u.\n&quot;, { ... };

This routine is actually a wrapper around a String::Formatter object
created by importing stringf. In the following code, the entire hashref
after &quot;stringf&quot; is passed to String::Formatter's constructor (the 'new'
method), save for the '-as' key and any other keys that start with a dash.

  use String::Formatter
    stringf =&gt; {
      -as =&gt; 'fmt_time',
      codes           =&gt; { ... },
      format_hunker   =&gt; ...,
      input_processor =&gt; ...,
    },
    stringf =&gt; {
      -as =&gt; 'fmt_date',
      codes           =&gt; { ... },
      string_replacer =&gt; ...,
      hunk_formatter  =&gt; ...,
    },
  ;

As you can see, this will generate two stringf routines, with different
behaviors, which are installed with different names. Since the behavior of
these routines is based on the 'format' method of a String::Formatter
object, the rest of the documentation will describe the way the object
behaves.

There's also a 'named_stringf' export, which behaves just like the
'stringf' export, but defaults to the 'named_replace' and
'require_named_input' arguments. There's a 'method_stringf' export, which
defaults 'method_replace' and 'require_single_input'. Finally, a
'indexed_stringf', which defaults to 'indexed_replaced' and
'require_arrayref_input'. For more on these, keep reading, and check out
the cookbook.

the String::Formatter::Cookbook manpage provides a number of recipes for
ways to put String::Formatter to use.

</description>
  <devel project="devel:languages:perl" package="perl-String-Formatter"/>
  <url>http://search.cpan.org/dist/String-Formatter/</url>
</package>
