---
 pyproject.toml                         |   31 -------------------------
 src/cryptography.egg-info/requires.txt |    2 -
 tests/bench/test_aead.py               |   40 ++++++++++++++++-----------------
 tests/bench/test_ec_load.py            |    8 +++---
 tests/bench/test_hashes.py             |    4 +--
 tests/bench/test_hmac.py               |    4 +--
 tests/bench/test_x509.py               |   16 ++++++-------
 7 files changed, 37 insertions(+), 68 deletions(-)

--- a/pyproject.toml
+++ b/pyproject.toml
@@ -69,8 +69,6 @@ ssh = ["bcrypt >=3.1.5"]
 nox = ["nox"]
 test = [
     "pytest >=6.2.0",
-    "pytest-benchmark",
-    "pytest-cov",
     "pytest-xdist",
     "pretend",
 ]
@@ -85,7 +83,7 @@ line-length = 79
 target-version = ["py37"]
 
 [tool.pytest.ini_options]
-addopts = "-r s --capture=no --strict-markers --benchmark-disable"
+addopts = "-r s --capture=no --strict-markers"
 console_output_style = "progress-even-when-capture-no"
 markers = [
     "skip_fips: this test is not executed in FIPS mode",
@@ -107,33 +105,6 @@ module = [
 ]
 ignore_missing_imports = true
 
-[tool.coverage.run]
-branch = true
-relative_files = true
-source = [
-    "cryptography",
-    "tests/",
-]
-
-[tool.coverage.paths]
-source = [
-   "src/cryptography",
-   "*.nox/*/lib*/python*/site-packages/cryptography",
-   "*.nox\\*\\Lib\\site-packages\\cryptography",
-   "*.nox/pypy/site-packages/cryptography",
-]
-tests =[
-   "tests/",
-   "*tests\\",
-]
-
-[tool.coverage.report]
-exclude_lines = [
-    "@abc.abstractmethod",
-    "@typing.overload",
-    "if typing.TYPE_CHECKING",
-]
-
 [tool.ruff]
 # UP006: Minimum Python 3.9
 # UP007, UP038: Minimum Python 3.10
--- a/src/cryptography.egg-info/requires.txt
+++ b/src/cryptography.egg-info/requires.txt
@@ -26,8 +26,6 @@ bcrypt>=3.1.5
 
 [test]
 pytest>=6.2.0
-pytest-benchmark
-pytest-cov
 pytest-xdist
 pretend
 
--- a/tests/bench/test_aead.py
+++ b/tests/bench/test_aead.py
@@ -19,84 +19,84 @@ from ..hazmat.primitives.test_aead impor
     not _aead_supported(ChaCha20Poly1305),
     reason="Requires OpenSSL with ChaCha20Poly1305 support",
 )
-def test_chacha20poly1305_encrypt(benchmark):
+def test_chacha20poly1305_encrypt():
     chacha = ChaCha20Poly1305(b"\x00" * 32)
-    benchmark(chacha.encrypt, b"\x00" * 12, b"hello world plaintext", b"")
+    chacha.encrypt(b"\x00" * 12, b"hello world plaintext", b"")
 
 
 @pytest.mark.skipif(
     not _aead_supported(ChaCha20Poly1305),
     reason="Requires OpenSSL with ChaCha20Poly1305 support",
 )
-def test_chacha20poly1305_decrypt(benchmark):
+def test_chacha20poly1305_decrypt():
     chacha = ChaCha20Poly1305(b"\x00" * 32)
     ct = chacha.encrypt(b"\x00" * 12, b"hello world plaintext", b"")
-    benchmark(chacha.decrypt, b"\x00" * 12, ct, b"")
+    chacha.decrypt(b"\x00" * 12, ct, b"")
 
 
-def test_aesgcm_encrypt(benchmark):
+def test_aesgcm_encrypt():
     aes = AESGCM(b"\x00" * 32)
-    benchmark(aes.encrypt, b"\x00" * 12, b"hello world plaintext", None)
+    aes.encrypt(b"\x00" * 12, b"hello world plaintext", None)
 
 
-def test_aesgcm_decrypt(benchmark):
+def test_aesgcm_decrypt():
     aes = AESGCM(b"\x00" * 32)
     ct = aes.encrypt(b"\x00" * 12, b"hello world plaintext", None)
-    benchmark(aes.decrypt, b"\x00" * 12, ct, None)
+    aes.decrypt(b"\x00" * 12, ct, None)
 
 
 @pytest.mark.skipif(
     not _aead_supported(AESSIV),
     reason="Requires OpenSSL with AES-SIV support",
 )
-def test_aessiv_encrypt(benchmark):
+def test_aessiv_encrypt():
     aes = AESSIV(b"\x00" * 32)
-    benchmark(aes.encrypt, b"hello world plaintext", None)
+    aes.encrypt(b"hello world plaintext", None)
 
 
 @pytest.mark.skipif(
     not _aead_supported(AESSIV),
     reason="Requires OpenSSL with AES-SIV support",
 )
-def test_aessiv_decrypt(benchmark):
+def test_aessiv_decrypt():
     aes = AESSIV(b"\x00" * 32)
     ct = aes.encrypt(b"hello world plaintext", None)
-    benchmark(aes.decrypt, ct, None)
+    aes.decrypt(ct, None)
 
 
 @pytest.mark.skipif(
     not _aead_supported(AESOCB3),
     reason="Requires OpenSSL with AES-OCB3 support",
 )
-def test_aesocb3_encrypt(benchmark):
+def test_aesocb3_encrypt():
     aes = AESOCB3(b"\x00" * 32)
-    benchmark(aes.encrypt, b"\x00" * 12, b"hello world plaintext", None)
+    aes.encrypt(b"\x00" * 12, b"hello world plaintext", None)
 
 
 @pytest.mark.skipif(
     not _aead_supported(AESOCB3),
     reason="Requires OpenSSL with AES-OCB3 support",
 )
-def test_aesocb3_decrypt(benchmark):
+def test_aesocb3_decrypt():
     aes = AESOCB3(b"\x00" * 32)
     ct = aes.encrypt(b"\x00" * 12, b"hello world plaintext", None)
-    benchmark(aes.decrypt, b"\x00" * 12, ct, None)
+    aes.decrypt(b"\x00" * 12, ct, None)
 
 
 @pytest.mark.skipif(
     not _aead_supported(AESCCM),
     reason="Requires OpenSSL with AES-CCM support",
 )
-def test_aesccm_encrypt(benchmark):
+def test_aesccm_encrypt():
     aes = AESCCM(b"\x00" * 32)
-    benchmark(aes.encrypt, b"\x00" * 12, b"hello world plaintext", None)
+    aes.encrypt(b"\x00" * 12, b"hello world plaintext", None)
 
 
 @pytest.mark.skipif(
     not _aead_supported(AESCCM),
     reason="Requires OpenSSL with AES-CCM support",
 )
-def test_aesccm_decrypt(benchmark):
+def test_aesccm_decrypt():
     aes = AESCCM(b"\x00" * 32)
     ct = aes.encrypt(b"\x00" * 12, b"hello world plaintext", None)
-    benchmark(aes.decrypt, b"\x00" * 12, ct, None)
+    aes.decrypt(b"\x00" * 12, ct, None)
--- a/tests/bench/test_ec_load.py
+++ b/tests/bench/test_ec_load.py
@@ -5,9 +5,9 @@
 from ..hazmat.primitives.fixtures_ec import EC_KEY_SECP256R1
 
 
-def test_load_ec_public_numbers(benchmark):
-    benchmark(EC_KEY_SECP256R1.public_numbers.public_key)
+def test_load_ec_public_numbers():
+    EC_KEY_SECP256R1.public_numbers.public_key()
 
 
-def test_load_ec_private_numbers(benchmark):
-    benchmark(EC_KEY_SECP256R1.private_key)
+def test_load_ec_private_numbers():
+    EC_KEY_SECP256R1.private_key()
--- a/tests/bench/test_hashes.py
+++ b/tests/bench/test_hashes.py
@@ -5,10 +5,10 @@
 from cryptography.hazmat.primitives import hashes
 
 
-def test_sha256(benchmark):
+def test_sha256():
     def bench():
         h = hashes.Hash(hashes.SHA256())
         h.update(b"I love hashing. So much. The best.")
         return h.finalize()
 
-    benchmark(bench)
+    bench()
--- a/tests/bench/test_hmac.py
+++ b/tests/bench/test_hmac.py
@@ -5,10 +5,10 @@
 from cryptography.hazmat.primitives import hashes, hmac
 
 
-def test_hmac_sha256(benchmark):
+def test_hmac_sha256():
     def bench():
         h = hmac.HMAC(b"my extremely secure key", hashes.SHA256())
         h.update(b"I love hashing. So much. The best.")
         return h.finalize()
 
-    benchmark(bench)
+    bench()
--- a/tests/bench/test_x509.py
+++ b/tests/bench/test_x509.py
@@ -9,34 +9,34 @@ from cryptography import x509
 from ..utils import load_vectors_from_file
 
 
-def test_object_identier_constructor(benchmark):
-    benchmark(x509.ObjectIdentifier, "1.3.6.1.4.1.11129.2.4.5")
+def test_object_identier_constructor():
+    x509.ObjectIdentifier("1.3.6.1.4.1.11129.2.4.5")
 
 
-def test_aki_public_bytes(benchmark):
+def test_aki_public_bytes():
     aki = x509.AuthorityKeyIdentifier(
         key_identifier=b"\x00" * 16,
         authority_cert_issuer=None,
         authority_cert_serial_number=None,
     )
-    benchmark(aki.public_bytes)
+    aki.public_bytes()
 
 
-def test_load_der_certificate(benchmark):
+def test_load_der_certificate():
     cert_bytes = load_vectors_from_file(
         os.path.join("x509", "PKITS_data", "certs", "GoodCACert.crt"),
         loader=lambda pemfile: pemfile.read(),
         mode="rb",
     )
 
-    benchmark(x509.load_der_x509_certificate, cert_bytes)
+    x509.load_der_x509_certificate(cert_bytes)
 
 
-def test_load_pem_certificate(benchmark):
+def test_load_pem_certificate():
     cert_bytes = load_vectors_from_file(
         os.path.join("x509", "cryptography.io.pem"),
         loader=lambda pemfile: pemfile.read(),
         mode="rb",
     )
 
-    benchmark(x509.load_pem_x509_certificate, cert_bytes)
+    x509.load_pem_x509_certificate(cert_bytes)
