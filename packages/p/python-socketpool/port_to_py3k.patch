---
 examples/test_eventlet.py    |   18 +++++++++---------
 examples/test_gevent.py      |   14 +++++++-------
 examples/test_threaded.py    |    6 +++---
 socketpool/backend_thread.py |    2 +-
 socketpool/conn.py           |    4 ++--
 socketpool/pool.py           |    6 +++---
 tests/test_pool_01.py        |    2 +-
 7 files changed, 26 insertions(+), 26 deletions(-)

--- a/examples/test_eventlet.py
+++ b/examples/test_eventlet.py
@@ -25,26 +25,26 @@ class EchoServer(object):
         eventlet.spawn(self.run)
 
     def run(self):
-        self.server = eventlet.listen((self.host, self.port))
+        self.server = eventlet.listen(self.host, self.port)
         self.running = True
         while self.running:
             try:
                 sock, address = self.server.accept()
-                print "accepted", address
+                print("accepted", address)
                 self.spool.spawn_n(self.handle, sock, address)
             except (SystemExit, KeyboardInterrupt):
                 break
 
 
     def handle(self, sock, address):
-        print ('New connection from %s:%s' % address)
+        print('New connection from %s:%s' % address)
 
         while True:
             data = sock.recv(1024)
             if not data:
                 break
             sock.send(data)
-            print ("echoed %r" % data)
+            print("echoed %r" % data)
 
 
     def stop(self):
@@ -62,17 +62,17 @@ if __name__ == '__main__':
 
     epool = eventlet.GreenPool()
     def runpool(data):
-        print 'ok'
+        print('ok')
         with pool.connection() as conn:
-            print 'sending'
+            print('sending')
             sent = conn.send(data)
-            print 'send %d bytes' % sent
+            print('send %d bytes' % sent)
             echo_data = conn.recv(1024)
-            print "got %s" % data
+            print("got %s" % data)
             assert data == echo_data
 
     start = time.time()
-    _ = [epool.spawn(runpool, "blahblah") for _ in xrange(20)]
+    _ = [epool.spawn(runpool, "blahblah") for _ in range(20)]
 
     epool.waitall()
     server.stop()
--- a/examples/test_gevent.py
+++ b/examples/test_gevent.py
@@ -11,14 +11,14 @@ from socketpool.conn import TcpConnector
 
 # this handler will be run for each incoming connection in a dedicated greenlet
 def echo(sock, address):
-    print ('New connection from %s:%s' % address)
+    print('New connection from %s:%s' % address)
 
     while True:
         data = sock.recv(1024)
         if not data:
             break
         sock.send(data)
-        print ("echoed %r" % data)
+        print("echoed %r" % data)
 
 
 
@@ -33,25 +33,25 @@ if __name__ == '__main__':
 
     def runpool(data):
         with pool.connection(**options) as conn:
-            print ("conn: pool size: %s" % pool.size)
+            print("conn: pool size: %s" % pool.size)
 
             sent = conn.send(data)
             echo_data = conn.recv(1024)
             assert data == echo_data
 
     start = time.time()
-    jobs = [gevent.spawn(runpool, "blahblah") for _ in xrange(50)]
+    jobs = [gevent.spawn(runpool, "blahblah") for _ in range(50)]
 
     gevent.joinall(jobs)
     delay = time.time() - start
 
-    print ("final pool size: %s" % pool.size)
+    print("final pool size: %s" % pool.size)
 
     with pool.connection(**options) as conn:
-        print ("conn: pool size: %s" % pool.size)
+        print("conn: pool size: %s" % pool.size)
 
         sent = conn.send("hello")
         echo_data = conn.recv(1024)
         assert "hello" == echo_data
 
-    print ("final pool size: %s" % pool.size)
+    print("final pool size: %s" % pool.size)
--- a/examples/test_threaded.py
+++ b/examples/test_threaded.py
@@ -10,10 +10,10 @@ import threading
 try:
     from queue import *
 except ImportError:
-    from Queue import *
+    from queue import *
 
 try:
-    import SocketServer as socketserver
+    import socketserver as socketserver
 except ImportError:
     import socketserver
 
@@ -91,7 +91,7 @@ if __name__ == "__main__":
 
     q.join()
 
-    print ("final pool size: %s" % pool.size)
+    print("final pool size: %s" % pool.size)
 
     pool.release_all()
     server.shutdown()
--- a/socketpool/backend_thread.py
+++ b/socketpool/backend_thread.py
@@ -9,7 +9,7 @@ import threading
 import time
 
 try:
-    import Queue as queue
+    import queue as queue
 except ImportError: # py3
     import queue
 
--- a/socketpool/conn.py
+++ b/socketpool/conn.py
@@ -31,7 +31,7 @@ class TcpConnector(Connector):
 
     def __init__(self, host, port, backend_mod, pool=None):
         self._s = backend_mod.Socket(socket.AF_INET, socket.SOCK_STREAM)
-        self._s.connect((host, port))
+        self._s.connect(host, port)
         self.host = host
         self.port = port
         self.backend_mod = backend_mod
@@ -57,7 +57,7 @@ class TcpConnector(Connector):
 
     def handle_exception(self, exception):
         print('got an exception')
-        print(str(exception))
+        print(exception)
 
     def get_lifetime(self):
         return self._life
--- a/socketpool/pool.py
+++ b/socketpool/pool.py
@@ -88,7 +88,7 @@ class ConnectionPool(object):
             for priority, candidate in self.pool:
                 current_pool_size -= 1
                 if not self.too_old(candidate):
-                    self.pool.put((priority, candidate))
+                    self.pool.put(priority, candidate)
                 else:
                     self._reap_connection(candidate)
                 if current_pool_size <= 0:
@@ -120,7 +120,7 @@ class ConnectionPool(object):
             if self.pool.qsize() < self.max_size:
                 connected = conn.is_connected()
                 if connected and not self.too_old(conn):
-                    self.pool.put((conn.get_lifetime(), conn))
+                    self.pool.put(conn.get_lifetime(), conn)
                 else:
                     self._reap_connection(conn)
             else:
@@ -150,7 +150,7 @@ class ConnectionPool(object):
                     matches = candidate.matches(**options)
                     if not matches:
                         # let's put it back
-                        unmatched.append((priority, candidate))
+                        unmatched.append(priority, candidate)
                     else:
                         if candidate.is_connected():
                             found = candidate
--- a/tests/test_pool_01.py
+++ b/tests/test_pool_01.py
@@ -24,5 +24,5 @@ class PoolTestCase(unittest.TestCase):
 
     def test_size_on_isconnected_failure(self):
         pool = ConnectionPool(MessyConnector)
-        self.assert_(pool.size == 0)
+        self.assertTrue(pool.size == 0)
         self.assertRaises(MaxTriesError, pool.get)
