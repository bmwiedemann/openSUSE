Index: transitions-0.9.1/transitions/extensions/factory.py
===================================================================
--- transitions-0.9.1.orig/transitions/extensions/factory.py
+++ transitions-0.9.1/transitions/extensions/factory.py
@@ -9,7 +9,6 @@
 
 from functools import partial
 import itertools
-from six import iteritems
 
 from ..core import Machine, Transition
 
@@ -78,7 +77,7 @@ class LockedGraphMachine(GraphMachine, L
                 ", ".join(itertools.chain(
                     (str(_) for _ in func.args[1:]),
                     ("%s=%s" % (key, value)
-                     for key, value in iteritems(func.keywords if func.keywords else {})))))
+                     for key, value in (func.keywords.items() if func.keywords else {}.items())))))
         return GraphMachine.format_references(func)
 
 
Index: transitions-0.9.1/transitions/extensions/markup.py
===================================================================
--- transitions-0.9.1.orig/transitions/extensions/markup.py
+++ transitions-0.9.1/transitions/extensions/markup.py
@@ -13,8 +13,6 @@ import importlib
 import itertools
 import numbers
 
-from six import iteritems
-
 from ..core import Machine
 from .nesting import HierarchicalMachine
 
@@ -125,7 +123,7 @@ class MarkupMachine(Machine):
                 ", ".join(itertools.chain(
                     (str(_) for _ in func.args),
                     ("%s=%s" % (key, value)
-                     for key, value in iteritems(func.keywords if func.keywords else {})))))
+                     for key, value in (func.keywords.items() if func.keywords else {}.items())))))
         return str(func)
 
     def _convert_states_and_transitions(self, root):
Index: transitions-0.9.1/transitions/extensions/nesting.py
===================================================================
--- transitions-0.9.1.orig/transitions/extensions/nesting.py
+++ transitions-0.9.1/transitions/extensions/nesting.py
@@ -730,11 +730,11 @@ class HierarchicalMachine(Machine):
         """
         with self():
             source_path = [] if source == "*" \
-                else source.split(self.state_cls.separator) if isinstance(source, string_types) \
+                else source.split(self.state_cls.separator) if isinstance(source, str) \
                 else self._get_enum_path(source) if isinstance(source, Enum) \
                 else self._get_state_path(source)
             dest_path = [] if dest == "*" \
-                else dest.split(self.state_cls.separator) if isinstance(dest, string_types) \
+                else dest.split(self.state_cls.separator) if isinstance(dest, str) \
                 else self._get_enum_path(dest) if isinstance(dest, Enum) \
                 else self._get_state_path(dest)
             self._remove_nested_transitions(trigger, source_path, dest_path)
