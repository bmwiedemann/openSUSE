Index: pyparted-3.11.1/tests/test__ped_disktype.py
===================================================================
--- pyparted-3.11.1.orig/tests/test__ped_disktype.py
+++ pyparted-3.11.1/tests/test__ped_disktype.py
@@ -80,7 +80,7 @@ class DiskTypeStrTestCase(RequiresDiskTy
         self.assertEqual(str(self.disktype['sun']), '_ped.DiskType instance --\n  name: sun  features: 0')
         self.assertEqual(str(self.disktype['amiga']), '_ped.DiskType instance --\n  name: amiga  features: 2')
         self.assertEqual(str(self.disktype['gpt']), '_ped.DiskType instance --\n  name: gpt  features: 2')
-        self.assertEqual(str(self.disktype['mac']), '_ped.DiskType instance --\n  name: mac  features: 2')
+        self.assertEqual(str(self.disktype['mac']), '_ped.DiskType instance --\n  name: mac  features: 6')
         self.assertEqual(str(self.disktype['bsd']), '_ped.DiskType instance --\n  name: bsd  features: 0')
         self.assertEqual(str(self.disktype['pc98']), '_ped.DiskType instance --\n  name: pc98  features: 2')
         self.assertEqual(str(self.disktype['loop']), '_ped.DiskType instance --\n  name: loop  features: 0')
Index: pyparted-3.11.1/tests/test_parted_partition.py
===================================================================
--- pyparted-3.11.1.orig/tests/test_parted_partition.py
+++ pyparted-3.11.1/tests/test_parted_partition.py
@@ -179,7 +179,7 @@ class PartitionGetFlagsAsStringTestCase(
         as comma separated list.
     '''
     def runTest(self):
-        self.assertEqual(self.part.getFlagsAsString(), 'boot, raid')
+        self.assertEqual(self.part.getFlagsAsString(), 'boot, raid, type')
 
 @unittest.skip("Unimplemented test case.")
 class PartitionGetMaxGeometryTestCase(unittest.TestCase):
