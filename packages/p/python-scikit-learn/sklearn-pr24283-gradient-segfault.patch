From dd7de2bfbf39222153f8c2deb203a0e1efef8640 Mon Sep 17 00:00:00 2001
From: "Thomas J. Fan" <thomasjpfan@gmail.com>
Date: Sat, 27 Aug 2022 10:28:03 -0400
Subject: FIX Treat negative categoricals as unknown during predict

PR: #24282
Fixes #24274

Index: scikit-learn-1.1.2/sklearn/ensemble/_hist_gradient_boosting/_predictor.pyx
===================================================================
--- scikit-learn-1.1.2.orig/sklearn/ensemble/_hist_gradient_boosting/_predictor.pyx
+++ scikit-learn-1.1.2/sklearn/ensemble/_hist_gradient_boosting/_predictor.pyx
@@ -66,7 +66,10 @@ cdef inline Y_DTYPE_C _predict_one_from_
             else:
                 node_idx = node.right
         elif node.is_categorical:
-            if in_bitset_2d_memoryview(
+            if data_val < 0:
+                # data_val is not in the accepted range, so it is treated as missing value
+                node_idx = node.left if node.missing_go_to_left else node.right
+            elif in_bitset_2d_memoryview(
                     raw_left_cat_bitsets,
                     <X_BINNED_DTYPE_C>data_val,
                     node.bitset_idx):
Index: scikit-learn-1.1.2/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py
===================================================================
--- scikit-learn-1.1.2.orig/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py
+++ scikit-learn-1.1.2/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py
@@ -1159,3 +1159,28 @@ def test_no_user_warning_with_scoring():
     with warnings.catch_warnings():
         warnings.simplefilter("error", UserWarning)
         est.fit(X_df, y)
+
+
+def test_unknown_category_that_are_negative():
+    """Check that unknown categories that are negative does not error.
+
+    Non-regression test for #24274.
+    """
+    rng = np.random.RandomState(42)
+    n_samples = 1000
+    X = np.c_[rng.rand(n_samples), rng.randint(4, size=n_samples)]
+    y = np.zeros(shape=n_samples)
+    y[X[:, 1] % 2 == 0] = 1
+
+    hist = HistGradientBoostingRegressor(
+        random_state=0,
+        categorical_features=[False, True],
+        max_iter=10,
+    ).fit(X, y)
+
+    # Check that negative values from the second column are treated like a
+    # missing category
+    X_test_neg = np.asarray([[1, -2], [3, -4]])
+    X_test_nan = np.asarray([[1, np.nan], [3, np.nan]])
+
+    assert_allclose(hist.predict(X_test_neg), hist.predict(X_test_nan))
Index: scikit-learn-1.1.2/sklearn/ensemble/_hist_gradient_boosting/gradient_boosting.py
===================================================================
--- scikit-learn-1.1.2.orig/sklearn/ensemble/_hist_gradient_boosting/gradient_boosting.py
+++ scikit-learn-1.1.2/sklearn/ensemble/_hist_gradient_boosting/gradient_boosting.py
@@ -1186,6 +1186,8 @@ class HistGradientBoostingRegressor(Regr
 
         For each categorical feature, there must be at most `max_bins` unique
         categories, and each categorical value must be in [0, max_bins -1].
+        During prediction, categories encoded as a negative value are treated as
+        missing values.
 
         Read more in the :ref:`User Guide <categorical_support_gbdt>`.
 
@@ -1515,6 +1517,8 @@ class HistGradientBoostingClassifier(Cla
 
         For each categorical feature, there must be at most `max_bins` unique
         categories, and each categorical value must be in [0, max_bins -1].
+        During prediction, categories encoded as a negative value are treated as
+        missing values.
 
         Read more in the :ref:`User Guide <categorical_support_gbdt>`.
 
