-------------------------------------------------------------------
Mon Jul 22 22:27:56 UTC 2024 - John Paul Adrian Glaubitz <adrian.glaubitz@suse.com>

- Update to 0.14.0
  * Add the header a suitable args to the test compile (#354)
  * Cython 3 updates and test build linker flags (#363)
  * Add search paths for FFTW on macOS/Apple Silicon hosts (#365)
  * Fix conflicting get_platform changes in setup.py (#369)
  * Execute in a nogil environment (#375)
  * Compatibility Scipy 1.12.0 (#379)
  * Support Python 3.12 (#380)
  * Fix segfault #346 and race condition #377 (#381)
  * Build with Numpy 2.0 + no more Linux i689 + setup PDM (#383)
  * Build on MacOS ARM64 (#386)
  * Update documentation and fix readthedocs (#388)
  * Update CI release (#389)
- Drop patches for issues fixed upstream
  * cython3.patch
  * python312.patch

-------------------------------------------------------------------
Mon Feb 12 12:15:17 UTC 2024 - Daniel Garcia <daniel.garcia@suse.com>

- Add python312.patch gh#pyFFTW/pyFFTW#370
- Remove shebangs from python files
- Use fdupes to remove duplicates

-------------------------------------------------------------------
Thu Sep 14 14:25:19 UTC 2023 - Markéta Machová <mmachova@suse.com>

- Add upstream cython3.patch to fix the build

-------------------------------------------------------------------
Wed Feb 15 16:17:34 UTC 2023 - Daniel Garcia <daniel.garcia@suse.com>

- Update to 0.13.1:
  * fix typo by @MicaelJarniac in #345
  * Additional platform support and removal of support for old setups by
    @JeppeKlitgaard in #351
- 0.13.0:
  * add pyproject.toml (#226)
  * Real-to-real transforms (#256)
  * Drop testing on Python 2.7 and 3.5 (#285)
  * Minor doc changes to README (#305)
  * Document PYFFTW_INCLUDE and PYFFTW_LIB_DIR (#311)
  * Build wheels on GitHub Actions via cibuildwheel (#318)
  * Fixed setup.py and working CI builds (#323)
  * Update NumPy and SciPy interfaces with new norm options (take 2) (#330)
  * CI: Added the correct gh actions badge and tweaked the name of the workflow
    (#331)
  * CI: Improved badge to link to the actual workflow (#332)
  * remove use of distutils (#333)
  * Increase time allowed for cache clearance in test (#334)
  * Increase timing in cache tests (#336)
  * Fix miscellaneous typos (#337)

-------------------------------------------------------------------
Fri Feb 12 15:37:13 UTC 2021 - Ben Greiner <code@bnavigator.de>

- skip python36: NEP 29 makes python36-numpy and -scipy unavailable
  in TW
- Don't build inplace for tests, drop deprecated setup.py test
  command

-------------------------------------------------------------------
Sun Feb  2 18:02:39 UTC 2020 - Atri Bhattacharya <badshah400@gmail.com>

- Update to version 0.12.0:
  + scipy.fft interface This interface operates like the existing
    scipy.fftpack interface, but matches the API of the newer
    scipy.fft module introduced in SciPy 1.4.
  + test suite was updated to be compatible with more recent dask
    (gh#pyFFTW/pyFFTW#278).
  + Cython variable _N was renamed to avoid a name conflict with a
    preprocessor token on some platforms (gh#pyFFTW/pyFFTW#259).
  + Cython code has been updated to explicitly use
    `language_level=3str` for compatibility with a future Cython
    3.0 release.
- Drop 265.patch: Incorporated upstream.
- Update URL and Source URL to point to new github repository.

-------------------------------------------------------------------
Mon Jan 27 18:23:25 UTC 2020 - Martin Hauke <mardnh@gmx.de>

- Add patch:
  * 265.patch (Fix Factory builds)
    https://github.com/pyFFTW/pyFFTW/pull/265

-------------------------------------------------------------------
Sat Dec 22 02:44:02 UTC 2018 - Todd R <toddrme2178@gmail.com>

- Update to version 0.11.1
  + New features
    * Dask interface
    * Fast transform planning utility
    * Expanded support for norm keyword argument in the numpy interfaces
    * Support for norm keyword argument in FFTW builders
    * Dynamic library detection at build and run time
    * OpenMP threading support
    * Custom Configuration of Planners and Interfaces
  + Bugs Fixed
    * A platform-dependent bug that results in potentially overwriting a previously
      computed output upon repeated calls to the numpy interfaces was fixed (#199).
    * Fix to potential platform-dependent integer overflow in empty_aligned (#192).
    * rfftfreq is now present in the numpy fft interfaces for numpy >= 1.8 (#207)
  + Other changes
    * float16 inputs are now transformed using single rather than double precision.
    * The default planning for the numpy and scipy interfaces has changed from
      FFTW_MEASURE to FFTW_ESTIMATE.  This results in faster planning.  In cases
      where the same transform is to be repeated many times, it is likely
      advantageous to manually specify FFTW_MEASURE instead (or use the FFTW builders
      to pre-plan the FFT).
    * FutureWarnings related to NumPy multiindexing in NumPy 1.15 are avoided by
      using more modern indexing conventions.
    * version number handling is now automatically handled by versioneer
    * All documentation is now built and hosted at Read the Docs (
      http://pyfftw.readthedocs.io).

-------------------------------------------------------------------
Sun Oct  8 00:21:14 UTC 2017 - jengelh@inai.de

- Replace future aims in description.

-------------------------------------------------------------------
Wed Aug 23 20:40:16 UTC 2017 - toddrme2178@gmail.com

- Implement single-spec version
- Update to version 0.10.4
  + Fixed bugs:
    * Numpy interface can fail with non-writeable arrays.
    * undefined symbol: simd\_alignment with gcc 5.3.0
    * FTBFS: TypeError: can't pickle Cython.Compiler.FlowControl.NameAssignment objects
  + Closed issues:
    * pyfftw fails with ImportError/undefined symbol fftwl\_plan\_with\_nthreads
    * pyfftw does not appear to be using available wisdom files
    * Accuracy of non-power 2 data
    * Cannot find fftw3l when installing from pip
    * Incorrect links to docs
    * PyFFTW returning all zero array after transform...
    * Move to separate pyFFTW project page
    * Release GIL during planning?
    * Merging/sharing wisdom
    * scipy interface patching.
    * very slow test suite
    * setup: some targets should not require numpy to be installed
    * 2x margin on the planning timelimit test is inadequate in windows on Complex64

-------------------------------------------------------------------
Mon Feb  1 10:50:25 UTC 2016 - toddrme2178@gmail.com

- update to version 0.10.1:
  * it seems that pypi has an annoying feature that minor tweaks can't
    be pushed without a new release.

- changes from version 0.10.0:
  * Closed issues:
    + Conda downloads are failing
    + Python 3.4 and WinPython
    + Installing pyfftw on Anaconda3 on Windows 7
    + is python 3.5 supported?
    + deadlock of cache handler at interpreter shutdown
    + pyFFTW breaks when forked
    + build with mingw
    + Striding in n\_byte\_align not on a uniform standard
    + No exception on wrong arguments of function call of
      pyfftw.FFTW\(...\)
    + pyfftw vs numpy.fft: faster and slower
    + simple transposes?
    + `Datatype not supported` with scipy
    + Update tutorial with new byte align functions
    + OS X Installation errors:
    + Wrong results for pyfftw's ifft?
    + Installing on OS X Mavericks
    + Install error. Ld cannot find -lfftw3f
    + new source release with updated licensing
    + Crash during initialization of FFTW plan for r2c and c2r with
      Intel compiler
    + Move FFTW class definition to pyfftw.pxd
    + Provide transform metadata such as axes and direction
    + Provide shape and dtype properties
    + problem with very large arrays: OverflowError: value too large
      to convert to int
    + add support for in-place multidimensional r2c transform
    + Add numpy interface for hfft
    + add cython as a build dependency
    + Potential memory leak in caching
    + Allow GIL to be released with threads=1
    + Building for 64bit windows
    + Test failure using numpy 1.6.2
    + Remove the requirement for users to specify alignment
    + pyfftw.interfaces can only handle numpy arrays
  * Merged pull requests:
    + Release GIL during both single- and multi-thread execution
    + Support FFTW\_WISDOM\_ONLY
    + Release GIL around FFTW planning
    + Updated the tutorial to reflect changes with new aligned array
    + Add description for installing on OS X
    + close issue \#8 (More numpy like aligned array creation)
    + Discrete sine transform imports


-------------------------------------------------------------------
Sat Apr 19 19:32:09 UTC 2014 - mardnh@gmx.de

- cleanup package

-------------------------------------------------------------------
Tue Apr 15 22:00:16 UTC 2014 - mardnh@gmx.de

- initial package

