-------------------------------------------------------------------
Wed Sep 28 09:46:42 UTC 2022 - Daniel Garcia <daniel.garcia@suse.com>

- Update to 3.3.1 
  * report non-503 http status errors when creating engagements (#1479)
  * Ensure adding programs doesn't mutate the first (#1477)

-------------------------------------------------------------------
Thu Sep 15 02:22:35 UTC 2022 - Steve Kowalik <steven.kowalik@suse.com>

- Add missing BuildRequires on pytest-timeout 

-------------------------------------------------------------------
Fri Aug 26 06:27:18 UTC 2022 - Steve Kowalik <steven.kowalik@suse.com>

- Update to 3.3.0:
  * gracefully handle error when QPU unavailable for engagement (#1457)
  * `QAMExecutionResult` now includes `execution_duration_microseconds`,
     providing the amount of time a job held exclusive hardware access.
  * Upgrade `qcs-api-client` so that clients can specify a QCS account on
    their profile, which `qcs-api-client` will in turn use to set
    `X-QCS-ACCOUNT-{ID/TYPE}` headers on outgoing QCS requests, most notably
    during engagement creation. (@erichulburd, #1439)
  * `setup.py` has been removed and will no longer be generated as part of
    the automated release process.
  * Function `pyquil.quilatom.substitute()` now supports substitution of
    classical `MemoryReference` objects such as `theta[4]` with their
    parameter values, enabling user-side parameter substitution.
  * The CompilerISA of physical QPUs now assigns a fidelity of 1 to virtual
    RZs.
  * Fixed typo where `scale` was being used as the `phase` in generation of
    several waveforms.
  * Both `get_qc` and `QPU` now accept an `endpoint_id` argument which is
    used to engage against a specific QCS quantum processor endpoint.
  * Allow `np.ndarray` when writing QAM memory. Disallow non-integer and
    non-float types.
  * Fix typo where `qc.compiler.calibration_program` should be
    `qc.compiler.get_calibration_program()`.
  * `DefFrame` string-valued fields that contain JSON strings now round trip
    to valid Quil and back to JSON via `DefFrame.out` and `parse`. Quil and
    JSON both claim `"` as their only string delimiter, so the JSON `"`s are
    escaped in the Quil.
  * Python 3.6 is no longer supported. Python 3.7, 3.8, and 3.9 are supported.
  * `pyquil.compatibility.v2` provides a number of classes/utilities which
    support the pyQuil v2 API, such as `get_qc`; `pyquil.compatibility.v2.api`
    offers `QuantumComputer`, `QPU`, and `QVM`. These may be used to
    incrementally migrate from v2 to v3, but should not be relied on
    indefinitely, as the underlying mechanics of these two versions will
    continue to diverge in the future.
  * `ForestConnection` and `ForestSession` have been removed. Connection
    information is now managed via `api.QCSClientConfiguration` and
    `api.EngagementManager`.
  * `QVMCompiler` now produces a `Program` instead of a
    `PyQuilExecutableResponse`.
  * Replaced intermediary `Qubit.type` with an explicit list of gates that
    the client may pass to the compiler without further transformation.
  * Dropped the intermediary `ISA` class. Rely exclusively on `CompilerISA`
    as a carrier of instruction set architecture information.
  * Support `AbstractQuantumProcessor`s derived from QCS
    `InstructionSetArchitecture`, `CompilerISA`, and `nx.Graph`.
  * Dropped `api._quantum_processors`. Moved `get_device` to
    `pyquil.quantum_processor.qcs.get_qcs_quantum_processor`.
  * `get_qc()` raises `ValueError` when the user passes a QCS quantum
    processor name and `noisy=True`.
  * `QuantumComputer.run_and_measure()` has been removed. Instead, add
    explicit `MEASURE` instructions to programs and use
  * `QuantumComputer.compile()` along with `QuantumComputer.run()` to compile
    and execute.
  * The `pyquil.magic` package has been removed in favor of writing programs
    more explicitly.
  * `QPUConnection` and `QVMConnection` have been removed in favor of using
    `QuantumComputer`, `QVM` or`QPU` (e.g. via `QuantumComputer.qam`), or
    `WavefunctionSimulator`.
  * `WavefunctionSimulator` constructor now accepts optional
    `measurement_noise` and `gate_noise`. These noise parameters are passed to
    the QVM by `WavefunctionSimulator.run_and_measure()` and
    `WavefunctionSimulator.wavefunction()`.
  * `noise.estimate_assignment_probs()` now accepts a `QuantumComputer`
    instead of `QVMConnection`.
  * `QAM.run` no longer accepts a `memory_map` argument. Memory values must
    be written onto executable directly with `Program.write_memory()` and
    `EncryptedProgram.write_memory()` instead.
  * `QuantumComputer`, `QAM`, `QPU`, and `QVM` are now safe to share across
    threads and processes, as they no longer store request-related state.
  * `PyQVM.execute` has been renamed to `PyQVM.execute_once` to execute a
    single program from start to finish within the context of the existing
    `PyQVM` state. `PyQVM` is the only stateful `QAM`.
  * Results returned from execution are now referred to as `readout_data`
    rather than `memory`, reflecting the reality that the memory of the QAM
    is not currently exposed to the user.
  * `QuantumComputer.run` now returns a `QAMExecutionResult` rather than the
    readout data from the `ro` readout source.
  * Simultaneous, rather than independent, random benchmark scores are
    passed to quilc as the gate fidelity for RX and RZ operations.
  * Fix parser bug that prevented calling a circuit without parameters,
    e.g. `BELL` (@notmgsk).
- Drop patch rounding.patch, included upstream.
- No longer skip Python 3.6.
- Add new BuildRequires, switch to newer build macros.

-------------------------------------------------------------------
Fri May  7 18:14:59 UTC 2021 - andy great <andythe_great@pm.me>

- Update to version 2.28.1.
  * Fix key error for unmeasured memory regions
  * Remove extraneous debug prints from def_gate_matrix()

-------------------------------------------------------------------
Fri Apr  9 13:52:38 UTC 2021 - Markéta Machová <mmachova@suse.com>

- Add patch rounding.patch to fix tests on 32-bit

-------------------------------------------------------------------
Wed Jan 27 10:03:31 UTC 2021 - andy great <andythe_great@pm.me>

- Update to version 2.28.0.
  * Fix parsing error for parameterized DEFCIRUCITS.

-------------------------------------------------------------------
Tue Jan 19 14:07:30 UTC 2021 - andy great <andythe_great@pm.me>

- Disable build for python36 because scipy dependency.
- Update to version 2.27.0.
  * Bump RPCQ dependency to 3.6.0.
  * Tests can be run in parallel.
  * Fix hanging test due to ZMQ bug.
  * Fix unitary comparison in Quil compilation test .
  * Fix parsing comments in Lark grammar.
- Updates for version 2.26.0.
  * Quil-T brings the dimension of time to your quantum programs!
  * Quil-T is an extension of Quil which allows one to develop 
    quantum programs at the level of pulses and waveforms and 
    brings an unprecedented level of fine-grained control over 
    the QPU.
  * Unpacking bitstrings is significantly faster.
  * Parsing is now performed using Lark rather than ANTLR, often 
    allowing a 10x improvement in parsing large and complex 
    programs.
  * Gates now generally allow a "formal" qubit label as in 
    DEFCIRCUIT, rather that requiring a numeric index.
  * Program objects come with additional Quil-T related properties,
    such as calibrations, waveforms, and frames.
  * The AbstractCompiler classes come with tools for performing 
    calibration of programs. Namely, get_calibration_program 
    provides a program for calibrating against recent QPU settings. 
    rewrite_arithmetic now converts phase angle from radians to 
    revolutions.
  * Readout is more permissive, and does not require the 
    destination to be named "ro".
  * The default value for QPU_COMPILER_URL has been updated to 
    point to Rigetti's translation service. This changes allows one
    to use the translation service to translate a Quil- program and
    receive the binary payload without having a QPU reservation.
- Updates for version 2.25.0.
  * Timeout configuration has been revamped. get_qc now accepts a 
    compiler_timeoutoption, and QVMCompiler and QPUCompiler provide
    a set_timeout method, which shouldgreatly simplify the task of 
    changing the default timeout. QVMCompiler also provides a 
    quilc_client property so that it shares the same interface as 
    QPUCompiler. Documentation has been updated to reflect these 
    changes.
- Updates for version 2.24.0.
  * run_and_measure now only measures the qubits that are used in a 
    program (rather than all qubits on the device) when the target
    QAM is a QVM without noise. This prevents the QVM from 
    exhausting memory when it tries to allocate for e.g. 32 qubits
    when only e.g. 2 qubits are used in the program
  * Include a py.typed so that libraries that depend on pyquil can 
    validate their typing against it
  * Fix Apache 2 license
  * Removed warnings expected in normal workflows that cannot be 
    avoided programmatically. This included the warning about 
    passing native Quil to native_quil_to_executable. Documentation 
    has been updated to clarify expected behavior.

-------------------------------------------------------------------
Tue Aug 18 08:09:19 UTC 2020 - andy great <andythe_great@pm.me>

- Initial package release.
- Disable test pyquil/api/_qvm.py, 
  pyquil/tests/test_quantum_computer.py, and 
  pyquil/api/tests/test_compiler.py as it need network connection. 
  gh#rigetti/pyquil#1240
