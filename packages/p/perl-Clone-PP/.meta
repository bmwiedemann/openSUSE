<package name="perl-Clone-PP" project="openSUSE:Factory">
  <title>Recursively copy Perl datatypes</title>
  <description>This module provides a general-purpose clone function to make deep copies
of Perl data structures. It calls itself recursively to copy nested hash,
array, scalar and reference types, including tied variables and objects.

The clone() function takes a scalar argument to copy. To duplicate arrays
or hashes, pass them in by reference:

  my $copy = clone(\@array);    my @copy = @{ clone(\@array) };
  my $copy = clone(\%hash);     my %copy = %{ clone(\%hash) };

The clone() function also accepts an optional second parameter that can be
used to limit the depth of the copy. If you pass a limit of 0, clone will
return the same value you supplied; for a limit of 1, a shallow copy is
constructed; for a limit of 2, two layers of copying are done, and so on.

  my $shallow_copy = clone( $item, 1 );

To allow objects to intervene in the way they are copied, the clone()
function checks for a couple of optional methods. If an object provides a
method named 'clone_self', it is called and the result returned without
further processing. Alternately, if an object provides a method named
'clone_init', it is called on the copied object before it is returned.</description>
  <devel project="devel:languages:perl" package="perl-Clone-PP"/>
</package>
