Index: django-storages-1.7.1/setup.py
===================================================================
--- django-storages-1.7.1.orig/setup.py
+++ django-storages-1.7.1/setup.py
@@ -36,6 +36,7 @@ setup(
         'Framework :: Django :: 1.11',
         'Framework :: Django :: 2.0',
         'Framework :: Django :: 2.1',
+        'Framework :: Django :: 2.2',
         'Intended Audience :: Developers',
         'License :: OSI Approved :: BSD License',
         'Operating System :: OS Independent',
Index: django-storages-1.7.1/tests/test_dropbox.py
===================================================================
--- django-storages-1.7.1.orig/tests/test_dropbox.py
+++ django-storages-1.7.1/tests/test_dropbox.py
@@ -6,7 +6,9 @@ from django.core.exceptions import (
 from django.core.files.base import ContentFile, File
 from django.test import TestCase
 from django.utils.six import BytesIO
+from unittest import skipIf
 
+import django
 from storages.backends import dropbox
 
 try:
@@ -156,9 +158,14 @@ class DropBoxFileTest(TestCase):
         self.storage = dropbox.DropBoxStorage('foo')
         self.file = dropbox.DropBoxFile('/foo.txt', self.storage)
 
-    @mock.patch('dropbox.Dropbox.files_download',
-                return_value=ContentFile(b'bar'))
+    @mock.patch('dropbox.Dropbox.files_download', return_value=ContentFile(b'bar'))
     def test_read(self, *args):
+        file = self.storage._open('foo')
+        self.assertEqual(file.read(), b'bar')
+
+    @skipIf(django.VERSION >= (2, 2), 'Bytes paths are not supported')
+    @mock.patch('dropbox.Dropbox.files_download', return_value=ContentFile(b'bar'))
+    def test_read_bytes_path(self, *args):
         file = self.storage._open(b'foo')
         self.assertEqual(file.read(), b'bar')
 
