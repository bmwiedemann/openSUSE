<revisionlist>
  <revision rev="1" vrev="1">
    <srcmd5>9707d6048f3dbf239145fcb88dfd605a</srcmd5>
    <version>19.1.0</version>
    <time>1554384166</time>
    <user>dimstar_suse</user>
    <comment>- Update to 19.1.0:
  * structlog.ReturnLogger and structlog.PrintLogger now have
    a fatal() log method. #181
  * Under certain (rather unclear) circumstances, the frame
    extraction could throw an SystemError: error return without
    exception set. A workaround has been added. #174
  * structlog now tolerates passing through dicts to stdlib
    logging. #187 #188 #189
- Use pytest macro
- Fix source address and add missing source.
- Version update to 18.2.0
  * Added structlog.stdlib.add_log_level_number() processor that adds the level
    number to the event dictionary. Can be used to simplify log filtering.
  * structlog.processors.JSONRenderer now allows for overwriting the default
    argument of its serializer.
  * Added try_unbind() that works like unbind() but doesn't raise a KeyError if
    one of the keys is missing. #171
- Initial packaging of version 18.1.0 
</comment>
    <requestid>690882</requestid>
  </revision>
  <revision rev="2" vrev="1">
    <srcmd5>fca2d8456e6b10cc363a207e1ca09115</srcmd5>
    <version>19.2.0</version>
    <time>1571307773</time>
    <user>dimstar_suse</user>
    <comment>- Update to 19.2.0:
  Backward-incompatible changes:
  * Python 3.4 is not supported anymore. It has been unsupported by
    the Python core team for a while now and its PyPI downloads are negligible.
    It's very unlikely that structlog will break under 3.4 anytime soon,
    but we don't test it anymore.
  Changes:
  * Full Python 3.8 support for structlog.stdlib.
  * Added more pass-through properties to structlog.stdlib.BoundLogger.
    To makes it easier to use it as a drop-in replacement for logging.Logger. #198
  * structlog.stdlib.ProcessorFormatter now takes a logger object as an
    optional keyword argument. This makes ProcessorFormatter work properly
    with stuctlog.stdlib.filter_by_level(). #219
  * structlog.dev.ConsoleRenderer now uses no colors by default, if
    colorama is not available. #215
  * structlog.dev.ConsoleRenderer now initializes colorama lazily, to
    prevent accidental side-effects just by importing structlog. #210
  * Added new processor structlog.dev.set_exc_info() that will set
    exc_info=True if the method's name is exception and exc_info isn't
    set at all. This is only necessary when the standard library integration
    is not used. It fixes the problem that in the default configuration,
    structlog.get_logger().exception(&quot;hi&quot;) in an except block would not print the
    exception without passing exc_info=True to it explicitly. #130, #173, #200, #204
  * A best effort has been made to make as much of structlog pickleable as possible
    to make it friendlier with multiprocessing and similar libraries.
    Some classes can only be pickled on Python 3 or using the dill library
    though and that is very unlikely to change.
  * So far, the configuration proxy, structlog.processor.TimeStamper,
    structlog.BoundLogger, structlog.PrintLogger and structlog.dev.ConsoleRenderer
    have been made pickelable. Please report if you need any another class fixed. #126</comment>
    <requestid>739016</requestid>
  </revision>
  <revision rev="3" vrev="1">
    <srcmd5>32cf456e8e844aba672d45fde0269e24</srcmd5>
    <version>20.1.0</version>
    <time>1584531377</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>785923</requestid>
  </revision>
  <revision rev="4" vrev="1">
    <srcmd5>08df0b2f6d6bb1d78e7fc08f479f888f</srcmd5>
    <version>20.2.0</version>
    <time>1609783745</time>
    <user>dimstar_suse</user>
    <comment>- Update to 20.2.0:
  Backward-incompatible changes:
  * Python 2.7 and 3.5 aren't supported anymore. The package meta
    data should ensure that you keep getting 20.1.0 on those versions. #244
  * structlog is now fully type-annotated. This won't break your
    applications, but if you use Mypy, it will most likely break your CI.
  Deprecations:
  * Accessing the _context attribute of a bound logger is now deprecated.
    Please use the new structlog.get_context().
  Changes:
  * structlog has now type hints for all of its APIs! Since structlog
    is highly dynamic and configurable, this led to a few concessions
    like a specialized structlog.stdlib.get_logger() whose only difference
    to structlog.get_logger() is that it has the correct type hints.
    We consider them provisional for the time being â€“ i.e. the backward
    compatibility does not apply to them in its full strength until we
    feel we got it right. Please feel free to provide feedback! #223, #282
  * Added structlog.make_filtering_logger that can be used like
    configure(wrapper_class=make_filtering_bound_logger(logging.INFO)).
    It creates a highly optimized bound logger whose inactive methods
    only consist of a return None. This is now also the default logger.
  * As a complement, structlog.stdlib.add_log_level() can now
    additionally be imported as structlog.processors.add_log_level
    since it just adds the method name to the event dict.
  * structlog.processors.add_log_level() is now part of the default configuration.
  * structlog.stdlib.ProcessorFormatter no longer uses exceptions for
    control flow, allowing foreign_pre_chain processors to use
    sys.exc_info() to access the real exception.
  * Added structlog.BytesLogger to avoid unnecessary encoding round trips.
    Concretely this is useful with orjson which returns bytes. #271</comment>
    <requestid>860146</requestid>
  </revision>
  <revision rev="5" vrev="1">
    <srcmd5>9bd7941eb296ce050c04850962201f80</srcmd5>
    <version>21.1.0</version>
    <time>1613774701</time>
    <user>dimstar_suse</user>
    <comment>- Update to 21.1.0:
  * structlog.threadlocal.wrap_dict() now has a correct type
    annotation. #290
  * Fix isolation in structlog.contextvars. #302
  * The default configuration and loggers are pickleable again. #301
  * structlog.dev.ConsoleRenderer will now look for a logger_name
     key if no logger key is set. #295</comment>
    <requestid>873660</requestid>
  </revision>
</revisionlist>
