commit 75b6363d4c8575ea611863270f56d90f9d429bb5
Author: John Vandenberg <jayvdb@gmail.com>
Date:   Thu Aug 13 14:50:41 2020 +0700

    Add ok_ and eq_

diff --git a/nose2pytest/assert_tools.py b/nose2pytest/assert_tools.py
index 8468bdb..6afecf5 100644
--- a/nose2pytest/assert_tools.py
+++ b/nose2pytest/assert_tools.py
@@ -97,9 +97,14 @@ del _t
 
 # Use similar trick as Nose to bring in bound methods from unittest.TestCase as free functions:
 
+
+def _supported_nose_name(name):
+    return name.startswith('assert_') or name in ('ok_', 'eq_')
+
+
 def pytest_configure():
     for name, obj in globals().items():
-        if name.startswith('assert_'):
+        if _supported_nose_name(name):
             setattr(pytest, name, obj)
 
 
diff --git a/nose2pytest/script.py b/nose2pytest/script.py
index 77e2d02..f5c1484 100644
--- a/nose2pytest/script.py
+++ b/nose2pytest/script.py
@@ -387,6 +387,7 @@ class FixAssert1Arg(FixAssertBase):
     # the 'a' is its children[1] so self._arg_paths needs to be 1.
     conversions = dict(
         assert_true=('a', None),
+        ok_=('a', None),
         assert_false=('not a', 1),
         assert_is_none=('a is None', 0),
         assert_is_not_none=('a is not None', 0),
@@ -470,6 +471,7 @@ class FixAssertBinOp(FixAssert2Args):
 
     conversions = dict(
         assert_equal='a == b',
+        eq_='a == b',
         assert_equals='a == b',
         assert_not_equal='a != b',
         assert_not_equals='a != b',
diff --git a/tests/test_script.py b/tests/test_script.py
index 062ffa3..0032c29 100644
--- a/tests/test_script.py
+++ b/tests/test_script.py
@@ -6,7 +6,7 @@ from textwrap import dedent
 import pytest
 
 from nose2pytest.script import NoseConversionRefactoringTool
-
+from nose2pytest.assert_tools import _supported_nose_name
 
 log = logging.getLogger('nose2pytest')
 
@@ -25,7 +25,7 @@ def setup_log():
 
     import nose.tools
     for name, val in vars(nose.tools).items():
-        if name.startswith('assert_'):
+        if _supported_nose_name(name):
             nosetools[name] = val
 
     import re, collections
@@ -61,12 +61,14 @@ class Test1Arg:
             log.print("hi")
 
             assert_true(a)
+            ok_(a)
             assert_true(a, 'text')
             assert_true(a, msg='text')
             """
         check_transformation(test_script, """
             log.print("hi")
 
+            assert a
             assert a
             assert a, 'text'
             assert a, 'text'
@@ -82,6 +84,9 @@ class Test1Arg:
         check_passes(refac, 'assert_true(True)', 'assert True')
         check_fails(refac, 'assert_true(False)', 'assert False')
 
+        check_passes(refac, 'ok_(True)', 'assert True')
+        check_fails(refac, 'ok_(False)', 'assert False')
+
         check_passes(refac, 'assert_false(False)', 'assert not False')
         check_fails(refac, 'assert_false(True)', 'assert not True')
 
@@ -137,6 +142,8 @@ class Test2Args:
                              'assert (d < e) in d')
         check_transformation('assert_in(d > e, d)',
                              'assert (d > e) in d')
+        check_transformation('eq_(a in b, c)',
+                             'assert (a in b) == c')
         check_transformation('assert_equal(a in b, c)',
                              'assert (a in b) == c')
         check_transformation('assert_equal(a not in b, c)',
@@ -211,6 +218,8 @@ class Test2Args:
         check_fails(refac,  'assert_equal(123, 456)', 'assert 123 == 456')
         check_passes(refac, 'assert_equals(123, 123)', 'assert 123 == 123')
         check_fails(refac,  'assert_equals(123, 456)', 'assert 123 == 456')
+        check_passes(refac, 'eq_(123, 123)', 'assert 123 == 123')
+        check_fails(refac,  'eq_(123, 456)', 'assert 123 == 456')
 
         check_passes(refac, 'assert_not_equal(123, 456)', 'assert 123 != 456')
         check_fails(refac,  'assert_not_equal(123, 123)', 'assert 123 != 123')
