<revisionlist>
  <revision rev="1" vrev="1">
    <srcmd5>7be39eb8d75421946762a9cbe994aa82</srcmd5>
    <version>3.11.0b1</version>
    <time>1652872407</time>
    <user>dimstar_suse</user>
    <comment>Testing package of the beta1 release.</comment>
    <requestid>977835</requestid>
  </revision>
  <revision rev="2" vrev="1">
    <srcmd5>618a09aac0d04c316d1f96c1de3516f8</srcmd5>
    <version>3.11.0b2</version>
    <time>1654506639</time>
    <user>dimstar_suse</user>
    <comment>- Update to 3.11.0b2:
  - many small updates
- Add patch support-expat-245.patch:
  * Support Expat &gt;= 2.4.4 (jsc#SLE-21253)</comment>
    <requestid>980978</requestid>
  </revision>
  <revision rev="3" vrev="1">
    <srcmd5>ff1ec11b6e9325bf90272be24ad664ba</srcmd5>
    <version>3.11.0b4</version>
    <time>1657885953</time>
    <user>dimstar_suse</user>
    <comment>- Update to 3.11.0b4:
- Fixes many bugs and adds following more significant changes
- Security
  - gh-68966: The deprecated mailcap module now refuses to inject
    Coreunsafe text (filenames, MIME types, parameters) into
    shell Corecommands. Instead of using such text, it will
    warn and act Coreas if a match was not found (or for test
    commands, as if the Coretest failed). and Builtins
  - gh-93516: Lazily create a table mapping bytecode offsets to
    line numbers to speed up calculation of line numbers when
    tracing.
  - gh-93461: importlib.invalidate_caches() now drops entries
    from sys.path_importer_cache with a relative path as
    name. This solves a caching issue when a process changes its
    current working directory.
  - FileFinder no longer inserts a dot in the path, e.g.
    /egg/./spam is now /egg/spam.
Library
  - gh-93896: Fix asyncio.run() and
    unittest.IsolatedAsyncioTestCase to always the set event loop
    as it was done in Python 3.10 and earlier. Patch by Kumar
    Aditya.
  - gh-94101: Manual instantiation of ssl.SSLSession objects is
    no longer allowed as it lead to misconfigured instances that
    crashed the interpreter when attributes where accessed on
    them.
  - gh-83658: Make multiprocessing.Pool raise an exception if
    maxtasksperchild is not None or a positive int.
  - gh-61162: Clarify sqlite3 behavior when Using the connection
    as a context manager.
Tools/Demos
  - gh-94538: Fix Argument Clinic output to custom file
    destinations. Patch by Erlend E. Aasland.
C API
  - gh-93937: The following frame functions and type are now
    directly available with #include &lt;Python.h&gt;, it’s no longer
    needed to add #include &lt;frameobject.h&gt;:
        PyFrame_Check()
        PyFrame_GetBack()
        PyFrame_GetBuiltins()
        PyFrame_GetGenerator()
        PyFrame_GetGlobals()
        PyFrame_GetLasti()
        PyFrame_GetLocals()
        PyFrame_Type
</comment>
    <requestid>989232</requestid>
  </revision>
  <revision rev="4" vrev="2">
    <srcmd5>ead8fc1837abf793205925b1cf5fce63</srcmd5>
    <version>3.11.0b4</version>
    <time>1658510493</time>
    <user>RBrownFactory</user>
    <comment>- Switch from %primary_interpreter to prjconf-defined
  %primary_python (gh#openSUSE/python-rpm-macros#127).
</comment>
    <requestid>990681</requestid>
  </revision>
  <revision rev="5" vrev="1">
    <srcmd5>7de27b0598152b6f3515679bd309629d</srcmd5>
    <version>3.11.0b5</version>
    <time>1659034687</time>
    <user>RBrownFactory</user>
    <comment>- Update to 3.11.0b5:
  - Core and Builtins
    - gh-93351: ast.AST node positions are now validated when
      provided to compile() and other related functions. If
      invalid positions are detected, a ValueError will be
      raised.
    - gh-94438: Fix an issue that caused extended opcode
      arguments and some conditional pops to be ignored when
      calculating valid jump targets for assignments to the
      f_lineno attribute of frame objects. In some cases, this
      could cause inconsistent internal state, resulting in a
      hard crash of the interpreter.
    - gh-95060: Undocumented PyCode_Addr2Location function now
      properly returns when addrq argument is less than zero.
    - gh-95113: Replace all EXTENDED_ARG_QUICK instructions
      with basic EXTENDED_ARG instructions in unquickened
      code. Consumers of non-adaptive bytecode should be able to
      handle extended arguments the same way they were handled in
      CPython 3.10 and older.
    - gh-91409: Fix incorrect source location info caused by
      certain optimizations in the bytecode compiler.
    - gh-94036: Fix incorrect source location info for some
      multi-line attribute accesses and method calls.
    - gh-94739: Allow jumping within, out of, and across
      exception handlers in the debugger.
    - gh-94949: ast.parse() will no longer parse parenthesized
      context managers when passed feature_version less than (3,
      9). Patch by Shantanu Jain.
    - gh-94947: ast.parse() will no longer parse assignment
      expressions when passed feature_version less than (3,
      8). Patch by Shantanu Jain.
    - gh-91256: Ensures the program name is known for help text
      during interpreter startup.
    - gh-94869: Fix the column offsets for some expressions in
      multi-line f-strings ast nodes. Patch by Pablo Galindo.
    - gh-94822: Fix an issue where lookups of metaclass
      descriptors may be ignored when an identically-named
      attribute also exists on the class itself.
    - gh-91153: Fix an issue where a bytearray item assignment
      could crash if it’s resized by the new value’s __index__()
      method.
    - gh-90699: Fix reference counting bug in
      bool.__repr__(). Patch by Kumar Aditya.
  - Library
    - gh-95087: Fix IndexError in parsing invalid date in the
      email module.
    - gh-95199: Upgrade bundled setuptools to 63.2.0.
    - gh-95194: Upgrade bundled pip to 22.2.
    - gh-95132: Fix a sqlite3 regression where *args and **kwds
      were incorrectly relayed from connect() to the Connection
      factory. The regression was introduced in 3.11a1 with PR
      24421 (gh-85128). Patch by Erlend E. Aasland.`
    - gh-93157: Fix fileinput module didn’t support errors option
      when inplace is true.
    - gh-95105: wsgiref.types.InputStream.__iter__() should
      return Iterator[bytes], not Iterable[bytes]. Patch by
      Shantanu Jain.
    - gh-94857: Fix refleak in
      _io.TextIOWrapper.reconfigure. Patch by Kumar Aditya.
    - gh-94821: Fix binding of unix socket to empty address
      on Linux to use an available address from the abstract
      namespace, instead of “0”.
    - gh-89988: Fix memory leak in pickle.Pickler when looking up
      dispatch_table. Patch by Kumar Aditya.
    - bpo-47025: Drop support for bytes on sys.path.
  - Tests
    - gh-95212: Make multiprocessing test case
      test_shared_memory_recreate parallel-safe.
  - Build
    - gh-94847: Fixed _decimal module build issue on GCC when
      compiling with LTO and pydebug. Debug builds no longer
      force inlining of functions.
    - gh-94841: Fix the possible performance regression of
      PyObject_Free() compiled with MSVC version 1932.
    - gh-94801: configure now uses custom flags like ZLIB_CFLAGS
      and ZLIB_LIBS when searching for headers and libraries.
    - gh-94773: deepfreeze.py now supports code object with
      frozensets that contain incompatible, unsortable types.
  - C API
    - gh-94930: Fix SystemError raised when
      PyArg_ParseTupleAndKeywords() is used with # in (...) but
      without PY_SSIZE_T_CLEAN defined.
    - gh-94864: Fix PyArg_Parse* with deprecated format units “u”
      and “Z”. It returned 1 (success) when warnings are turned
      into exceptions.
    - gh-94731: Python again uses C-style casts for
      most casting operations when compiled with
      C++. This may trigger compiler warnings, if they
      are enabled with e.g. -Wold-style-cast `` or
      ``-Wzero-as-null-pointer-constant options for g++.
</comment>
    <requestid>991283</requestid>
  </revision>
  <revision rev="6" vrev="1">
    <srcmd5>f0ac83978b6dfd85671c1b55feb223f3</srcmd5>
    <version>3.11.0rc1</version>
    <time>1661685150</time>
    <user>dimstar_suse</user>
    <comment>Automatic submission by obs-autosubmit</comment>
    <requestid>999586</requestid>
  </revision>
  <revision rev="7" vrev="2">
    <srcmd5>d8a6c1ce879f6e215e2d9270d5cf80b7</srcmd5>
    <version>3.11.0rc1</version>
    <time>1662541545</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>1001451</requestid>
  </revision>
  <revision rev="8" vrev="1">
    <srcmd5>9c369b2febd83525d8db14eb16de4ad2</srcmd5>
    <version>3.11.0rc2</version>
    <time>1663275598</time>
    <user>dimstar_suse</user>
    <comment>- Update to 3.11.0rc2:
  - Converting between int and str in bases other than 2
    (binary), 4, 8 (octal), 16 (hexadecimal), or 32 such as base
    10 (decimal) now raises a ValueError if the number of digits
    in string form is above a limit to avoid potential denial of
    service attacks due to the algorithmic complexity. This is
    a mitigation for CVE-2020-10735.
    This new limit can be configured or disabled by environment
    variable, command line flag, or sys APIs. See the integer
    string conversion length limitation documentation. The
    default limit is 4300 digits in string form.
  - Fix case of undefined behavior in ceval.c
  - Do not expose KeyWrapper in _functools.
  - Ensure that tracing, sys.setrace(), is turned on
    immediately. In pre-release versions of 3.11, some tracing
    events might have been lost when turning on tracing in a
    __del__ method or interrupt.
  - Fix use after free in trace refs build mode. Patch by Kumar
    Aditya.
  - When loading a file with invalid UTF-8 inside a multi-line
    string, a correct SyntaxError is emitted.
  - Make sure that incomplete frames do not show up in
    tracemalloc traces.
  - Remove two cases of undefined behavior, by adding NULL
    checks.
  - Fix possible NULL pointer dereference in
    _PyThread_CurrentFrames. Patch by Kumar Aditya.
  - Fix AttributeError missing name and obj attributes in
    object.__getattribute__(). Patch by Philip Georgi.
  - Loading a file with invalid UTF-8 will now report the broken
    character at the correct location.
  - Fixed a bug that caused _PyCode_GetExtra to return garbage
    for negative indexes. Patch by Pablo Galindo
  - Fix a deadlock in PyGILState_Ensure() when allocating new
    thread state. Patch by Kumar Aditya.
  - PyType_Ready() now initializes ht_cached_keys and performs
    additional checks to ensure that type objects are properly
    configured. This avoids crashes in 3rd party packages that
    don’t use regular API to create new types.
  - Skip over incomplete frames in PyThreadState_GetFrame().
  - Fix format string in _PyPegen_raise_error_known_location that
    can lead to memory corruption on some 64bit systems. The
    function was building a tuple with i (int) instead of n
    (Py_ssize_t) for Py_ssize_t arguments.
  - Fix misleading contents of error message when converting an
    all-whitespace string to float.
  - ast.parse() will no longer parse function definitions with
    positional-only params when passed feature_version less than
    (3, 8). Patch by Shantanu Jain.
  - Fix incorrect error message in the io module.
  - Fix the faulthandler implementation of
    faulthandler.register(signal, chain=True) if the sigaction()
    function is not available: don’t call the previous signal
    handler if it’s NULL. Patch by Victor Stinner.
  - Correct conversion of numbers.Rational’s to float.
  - Fix TypeVarTuple.__typing_prepare_subst__. TypeError was not
    raised when using more than one TypeVarTuple, like [*T, *V]
    in type alias substitutions.
  - Fix asyncio.streams.StreamReaderProtocol to keep a strong
    reference to the created task, so that it’s not garbage
    collected
  - Fix a performance regression in logging
    TimedRotatingFileHandler. Only check for special files when
    the rollover time has passed.
  - Fix unused localName parameter in the Attr class in
    xml.dom.minidom.
  - Fix incorrect condition that causes sys.thread_info.name to
    be wrong on pthread platforms.
  - Remove an incompatible change from bpo-28080 that caused a
    regression that ignored the utf8 in ZipInfo.flag_bits. Patch
    by Pablo Galindo.
  - Fix asyncio.Runner to call asyncio.set_event_loop() only
    once to avoid calling attach_loop() multiple times on child
    watchers. Patch by Kumar Aditya.
  - Fix unittest.IsolatedAsyncioTestCase to set event loop before
    calling setup functions. Patch by Kumar Aditya.
  - When a task catches asyncio.CancelledError and raises some
    other error, the other error should generally not silently be
    suppressed.
  - Fail gracefully if EPERM or ENOSYS is raised when loading
    crypt methods. This may happen when trying to load MD5 on a
    Linux kernel with FIPS enabled.
  - Allow asyncio.StreamWriter.drain() to be awaited concurrently
    by multiple tasks. Patch by Kumar Aditya.
  - Fix ast.unparse() when ImportFrom.level is None
  - Improve discoverability of the higher level
    concurrent.futures module by providing clearer links from the
    lower level threading and multiprocessing modules.
  - What’s New 3.11 now has instructions for how to provide
    compiler and linker flags for Tcl/Tk and OpenSSL on RHEL 7
    and CentOS 7.
  - Mitigate the inherent race condition from using
    find_unused_port() in testSockName() by trying to find an
    unused port a few times before failing. Patch by Ross Burton.
  - Build and test with OpenSSL 1.1.1q
- Use support-expat-CVE-2022-25236-patched.patch from the current
  version of gh#python/cpython#93900 instead of the old
  support-expat-245.patch.
- Reapply fix_configure_rst.patch.
</comment>
    <requestid>1003848</requestid>
  </revision>
  <revision rev="9" vrev="1">
    <srcmd5>59c66b7625a815be2ce872dce82352ad</srcmd5>
    <version>3.11.0</version>
    <time>1666871665</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>1031405</requestid>
  </revision>
  <revision rev="10" vrev="2">
    <srcmd5>fbad9129402e03fe9085896b7ad63460</srcmd5>
    <version>3.11.0</version>
    <time>1668086585</time>
    <user>dimstar_suse</user>
    <comment>- Add CVE-2022-45061-DoS-by-IDNA-decode.patch to avoid
  CVE-2022-45061 (bsc#1205244) allowing DoS by IDNA decoding
  extremely long domain names.
</comment>
    <requestid>1034963</requestid>
  </revision>
  <revision rev="11" vrev="1">
    <srcmd5>97dcc0bca46310f15b47cb64cf3ce1f5</srcmd5>
    <version>3.11.1</version>
    <time>1670588280</time>
    <user>dimstar_suse</user>
    <comment>- Update to 3.11.1:
  - python -m http.server no longer allows terminal control
    characters sent within a garbage request to be printed
    to the stderr server lo This is done by changing the
    http.server BaseHTTPRequestHandler .log_message method to
    replace control characters with a \xHH hex escape before
    printin
  - Avoid publishing list of active per-interpreter audit hooks
    via the gc module
  - The IDNA codec decoder used on DNS hostnames by socket or
    asyncio related name resolution functions no longer involves
    a quadratic algorithm. This prevents a potential CPU denial
    of service if an out-of-spec excessive length hostname
    involving bidirectional characters were decoded. Some
    protocols such as urllib http 3xx redirects potentially allow
    for an attacker to supply such a name (CVE-2022-45061).
  - Update bundled libexpat to 2.5.0
  - Fix a shell code injection vulnerability in the
    get-remote-certificate.py example script. The script no
    longer uses a shell to run openssl commands. Issue reported
    and initial fix by Caleb Shortt. Patch by Victor Stinner.
  - Fix a crash when an object which does not have a dictionary
    frees its instance values.
  - Fix a bug in the tokenizer that could cause infinite
    recursion when showing syntax warnings that happen in the
    first line of the source. Patch by Pablo Galindo
  - Fix an issue that could cause frames to be visible to Python
    code as they are being torn down, possibly leading to memory
    corruption or hard crashes of the interpreter.
  - Fix a reference bug in _imp.create_builtin() after the
    creation of the first sub-interpreter for modules builtins
    and sys. Patch by Victor Stinner.
  - Fixed a bug that was causing a buffer overflow if the
    tokenizer copies a line missing the newline caracter from a
    file that is as long as the available tokenizer buffer. Patch
    by Pablo galindo
  - Fix bug where an ExceptionGroup subclass can wrap a
    BaseException.
  - Fix zip path for venv created from a non-installed python on
    POSIX platforms.
  - Fix an issue that could potentially cause incorrect error
    handling for some bytecode instructions.
  - Fix an issue that prevented PyThreadState and
    PyInterpreterState memory from being freed properly.
  - Fix failure in except* with unhashable exceptions.
  - Fix calculation of sys._base_executable when inside a POSIX
    virtual environment using copies of the python binary when
    the base installation does not provide the executable name
    used by the venv. Calculation will fall back to alternative
    names (“python&lt;MAJOR&gt;”, “python&lt;MAJOR&gt;.&lt;MINOR&gt;”).
  - Update faulthandler to emit an error message with the proper
    unexpected signal number. Patch by Dong-hee Na.
  - Fix location of SyntaxError for a try block with both except
    and except*.
  - Fix the error reporting positions of specialized traceback
    anchors when the source line contains Unicode characters.
  - Fix subscription of type aliases containing bare generic
    types or types like TypeVar: for example tuple[A, T][int] and
    tuple[TypeVar, T][int], where A is a generic type, and T is a
    type variable.
  - Lower the recursion depth for marshal on WASI to support
    wasmtime 2.0/main.
  - Fix multiple crashes in debug mode when str subclasses are
    used instead of str itself.
  - Fix an issue where member descriptors (such as those for
    __slots__) could behave incorrectly or crash instead of
    raising a TypeError when accessed via an instance of an
    invalid type.
  - Suppress ImportError for invalid query for help()
    command. Patch by Dong-hee Na.
  - Fix detection of MAC addresses for uuid on certain OSs. Patch
    by Chaim Sanders
  - Print exception class name instead of its string
    representation when raising errors from ctypes calls.
  - os.sched_yield() now release the GIL while calling
    sched_yield(2). Patch by Dong-hee Na.
  - Fix an issue that could delay the specialization of PRECALL
    instructions.
  - Bugfix: PyFunction_GetAnnotations() should return a borrowed
    reference. It was returning a new reference.
  - Ensure that all Python frame objects are backed by “complete”
    frames.
  - Fixed a missing incref/decref pair in
    Exception.__setstate__(). Patch by Ofey Chan.
  - Fix the Python path configuration used to initialized
    sys.path at Python startup. Paths are no longer encoded
    to UTF-8/strict to avoid encoding errors if it contains
    surrogate characters (bytes paths are decoded with the
    surrogateescape error handler). Patch by Victor Stinner.
  - Fix overly-broad source position information for chained
    comparisons used as branching conditions.
  - At Python exit, sometimes a thread holding the GIL can
    wait forever for a thread (usually a daemon thread) which
    requested to drop the GIL, whereas the thread already
    exited. To fix the race condition, the thread which requested
    the GIL drop now resets its request before exiting. Issue
    discovered and analyzed by Mingliang ZHAO. Patch by Victor
    Stinner.
  - Fix a possible assertion failure, fatal error, or SystemError
    if a line tracing event raises an exception while opcode
    tracing is enabled.
  - Fix undefined behaviour in C code of null pointer arithmetic.
  - Make sure that all frame objects created are created from
    valid interpreter frames. Prevents the possibility of invalid
    frames in backtraces and signal handlers.
  - Disable incorrect pickling of the C implemented classmethod
    descriptors.
  - On WASI ENOTCAPABLE is now mapped to PermissionError. The
    errno modules exposes the new error number. getpath.py now
    ignores PermissionError when it cannot open landmark files
    pybuilddir.txt and pyenv.cfg.
  - Allow pdb to locate source for frozen modules in the standard
    library.
  - Raise ValueError instead of SystemError when methods of
    uninitialized io.IncrementalNewlineDecoder objects are
    called. Patch by Oren Milman.
  - Fix a possible assertion failure in io.FileIO when the opener
    returns an invalid file descriptor.
  - Also escape s in the http.server
    BaseHTTPRequestHandler.log_message so that it is technically
    possible to parse the line and reconstruct what the original
    data was. Without this a xHH is ambiguious as to if it is a
    hex replacement we put in or the characters r”x” came through
    in the original request line.
  - asyncio.get_event_loop() now only emits a deprecation warning
    when a new event loop was created implicitly. It no longer
    emits a deprecation warning if the current event loop was
    set.
  - Fix bug when calling trace.CoverageResults with valid infile.
  - Fix a bug in handling class cleanups in
    unittest.TestCase. Now addClassCleanup() uses separate lists
    for different TestCase subclasses, and doClassCleanups() only
    cleans up the particular class.
  - Release the GIL when calling termios APIs to avoid blocking
    threads.
  - Fix ast.increment_lineno() to also cover ast.TypeIgnore when
    changing line numbers.
  - Fix bug in urllib.parse.urlparse() that causes URL schemes
    that begin with a digit, a plus sign, or a minus sign to be
    parsed incorrectly.
  - Check the number of arguments in substitution in user
    generics containing a TypeVarTuple and one or more TypeVar.
  - Fix substitution of ParamSpec followed by TypeVarTuple in
    generic aliases.
  - Fix substitution of TypeVarTuple and ParamSpec together in
    user generics.
  - Fixed bug where inspect.signature() reported incorrect
    arguments for decorated methods.
  - Fix SystemError in ctypes when exception was not set during
    __initsubclass__.
  - Remove older version of
    _SSLProtocolTransport.get_write_buffer_limits in
    asyncio.sslproto
  - fix negative numbers failing in verify()
  - Fix statistics.NormalDist pickle with 0 and 1 protocols.
  - enum.auto() is now correctly activated when combined with
    other assignment values. E.g. ONE = auto(), 'some text' will
    now evaluate as (1, 'some text').
  - Update the bundled copy of pip to version 22.3.1.
  - Clean up refleak on failed module initialisation in _zoneinfo
  - Clean up refleaks on failed module initialisation in in
    _pickle
  - Clean up refleak on failed module initialisation in _io.
  - Fix memory leak in math.dist() when both points don’t have
    the same dimension. Patch by Kumar Aditya.
  - [3.11] Applied changes from importlib_metadata 4.11.4
    through 4.13, including compatibility and robustness
    fixes for Distribution objects without _normalized_name,
    disallowing invalid inputs to Distribution.from_name, and
    refined behaviors in PathDistribution._name_from_stem and
    PathDistribution._normalized_name.
  - Fix argument typechecks in _overlapped.WSAConnect() and
    _overlapped.Overlapped.WSASendTo() functions.
  - Prevent crashing in traceback when retrieving the byte-offset
    for some source files that contain certain unicode
    characters.
  - Fix internal error in the re module which in very rare
    circumstances prevented compilation of a regular expression
    containing a conditional expression without the “else”
    branch.
  - Fix asyncio.StreamWriter.drain() to call
    protocol.connection_lost callback only once on Windows.
  - Add a mutex to unittest.mock.NonCallableMock to protect
    concurrent access to mock attributes.
  - Fix hang on Windows in subprocess.wait_closed() in asyncio
    with ProactorEventLoop. Patch by Kumar Aditya.
  - Fix infinite loop in unittest when a self-referencing chained
    exception is raised
  - tkinter.Text.count() raises now an exception for options
    starting with “-” instead of silently ignoring them.
  - On uname_result, restored expectation that _fields and
    _asdict would include all six properties including processor.
  - A createSocket() method was added to SysLogHandler.
  - Fix bug in urllib.parse.urlparse() that causes certain port
    numbers containing whitespace, underscores, plus and minus
    signs, or non-ASCII digits to be incorrectly accepted.
  - Allow venv to pass along PYTHON* variables to ensurepip and
    pip when they do not impact path resolution
  - On macOS, fix a crash in syslog.syslog() in multi-threaded
    applications. On macOS, the libc syslog() function is not
    thread-safe, so syslog.syslog() no longer releases the GIL to
    call it. Patch by Victor Stinner.
  - Allow BUILTINS to be a valid field name for frozen
    dataclasses.
  - Wrap network errors consistently in urllib FTP support, so
    the test suite doesn’t fail when a network is available but
    the public internet is not reachable.
  - Make sure patch.dict() can be applied on async functions.
  - Earlier in 3.11 we deprecated
    asyncio.Task.cancel(&quot;message&quot;). We realized we were too
    harsh, and have undeprecated it.
  - Change deprecate warning message in unittest from It is
    deprecated to return a value!=None to It is deprecated to
    return a value that is not None from a test case
  - Fixes AttributeError when subprocess.check_output() is used
    with argument input=None and either of the arguments encoding
    or errors are used.
  - Fix is_private properties in the ipaddress module. Previously
    non-private networks (0.0.0.0/0) would return True from this
    method; now they correctly return False.
  - Avoid spurious tracebacks from asyncio when default executor
    cleanup is delayed until after the event loop is closed (e.g.
    as the result of a keyboard interrupt).
  - Avoid a crash in the C version of
    asyncio.Future.remove_done_callback() when an evil argument
    is passed.
  - Remove tokenize.NL check from tabnanny.
  - Fix generation of the default name of
    tkinter.Checkbutton. Previously, checkbuttons in different
    parent widgets could have the same short name and share
    the same state if arguments “name” and “variable” are not
    specified. Now they are globally unique.
  - Update bundled libexpat to 2.4.9
  - Fix race condition in asyncio where process_exited() called
    before the pipe_data_received() leading to inconsistent
    output. Patch by Kumar Aditya.
  - Fixed check in multiprocessing.resource_tracker that
    guarantees that the length of a write to a pipe is not
    greater than PIPE_BUF.
  - Corrected type annotation for dataclass attribute
    pstats.FunctionProfile.ncalls to be str.
  - Fix repr of Any subclasses.
  - Work around missing socket functions in socket’s __repr__.
  - In inspect, fix overeager replacement of “typing.” in
    formatting annotations.
  - Fix handling of bytes path-like objects in os.ismount().
  - Fix handling compiler warnings (SyntaxWarning and
    DeprecationWarning) in codeop.compile_command() when checking
    for incomplete input. Previously it emitted warnings and
    raised a SyntaxError. Now it always returns None for
    incomplete input without emitting any warnings.
  - To avoid apparent memory leaks when asyncio.open_connection()
    raises, break reference cycles generated by local exception
    and future instances (which has exception instance as its
    member var). Patch by Dong Uk, Kang.
  - Fixed flickering of the turtle window when the tracer is
    turned off. Patch by Shin-myoung-serp.
  - Fix asyncio subprocess transport to kill process cleanly
    when process is blocked and avoid RuntimeError when loop is
    closed. Patch by Kumar Aditya.
  - Prevent error when activating venv in nested fish instances.
  - TarFile.next() now returns None when called on an empty
    tarfile.
  - Document the optional callback parameter of WeakMethod. Patch
    by Géry Ogam.
  - Restrict use of sockets instead of pipes for stdin of
    subprocesses created by asyncio to AIX platform only.
  - shutil.copytree() now applies the ignore_dangling_symlinks
    argument recursively.
  - Fix IndexError in argparse.ArgumentParser when a store_true
    action is given an explicit argument.
  - Document that calling variadic functions with ctypes requires
    special care on macOS/arm64 (and possibly other platforms).
  - Remove extra row
  - Clarified the conflicting advice given in the ast
    documentation about ast.literal_eval() being “safe” for use
    on untrusted input while at the same time warning that it
    can crash the process. The latter statement is true and is
    deemed unfixable without a large amount of work unsuitable
    for a bugfix. So we keep the warning and no longer claim that
    literal_eval is safe.
  - Restructured the documentation for the os.wait* family of
    functions, and improved the docs for os.waitid() with more
    explanation of the possible argument constants.
  - Skip test_normalization() of test_unicodedata if it
    fails to download NormalizationTest.txt file from
    pythontest.net. Patch by Victor Stinner.
  - Correct test_marsh on (32 bit) x86: test_deterministic sets
    was failing.
  - Optional big memory tests in test_sqlite3 now catch the
    correct sqlite.DataError exception type in case of too large
    strings and/or blobs passed.
  - Fix a bug in the typing tests where a test relying
    on CPython-specific implementation details was not
    decorated with @cpython_only and was not skipped on other
    implementations.
  - Add tests for star-unpacking with PEP 646, and some other
    miscellaneous PEP 646 tests.
  - Added explicit coverage of Py_Initialize (and hence
    Py_InitializeEx) back to the embedding tests (all other
    embedding tests migrated to Py_InitializeFromConfig in Python
    3.11)
  - Some C API tests were moved into the new Lib/test/test_capi/
    directory.
  - Fix -Wimplicit-int, -Wstrict-prototypes, and
    -Wimplicit-function-declaration compiler warnings in
    configure checks.
  - Fix a compilation issue with GCC 12 on macOS.
  - Fix -Wimplicit-int compiler warning in configure check for
    PTHREAD_SCOPE_SYSTEM.
  - Fix a possible fd leak in Programs/_freeze_module.c
    introduced in Python 3.11.
  - Fix build with PYTHON_FOR_REGEN=python3.8.
  - Specify the full path to the source location for make
    docclean (needed for cross-builds).
  - Don’t use vendored libmpdec headers if --with-system-libmpdec
    is passed to configure. Don’t use vendored libexpat headers
    if --with-system-expat is passed to !configure.
  - Fix the build process of clang compiler for _bootstrap_python
    if LTO optimization is applied. Patch by Matthias Görgens and
    Dong-hee Na.
  - wasm32-emscripten builds for browsers now include
    concurrent.futures for asyncio and unittest.mock.
  - wasm32-emscripten platform no longer builds resource module,
    getresuid(), getresgid(), and their setters. The APIs are
    stubs and not functional.
  - Updated pegen regeneration script on Windows to find and
    use Python 3.9 or higher. Prior to this, pegen regeneration
    already required 3.9 or higher, but the script may have used
    lower versions of Python.
  - Fix a bug in the previous bugfix that caused IDLE to
    not start when run with 3.10.8, 3.12.0a1, and at least
    Microsoft Python 3.10.2288.0 installed without the Lib/test
    package. 3.11.0 was never affected.
  - The wasm_build.py script now pre-builds Emscripten ports,
    checks for broken EMSDK versions, and warns about pkg-config
    env vars.
  - The new tool Tools/wasm/wasm_builder.py automates configure,
    compile, and test steps for building CPython on WebAssembly
    platforms.
  - Fix handling of module docstrings in Tools/i18n/pygettext.py.
  - PyBUF_* constants were marked as part of Limited API
    of Python 3.11+. These were available in 3.11.0 with
    Py_LIMITED_API defined for 3.11, and are necessary to use the
    buffer API.
  - Fix use-after-free in Py_SetPythonHome(NULL),
    Py_SetProgramName(NULL) and _Py_SetProgramFullPath(NULL)
    function calls. Issue reported by Benedikt Reinartz. Patch by
    Victor Stinner.
  - Py_InitializeEx now correctly calls PyConfig_Clear after
    initializing the interpreter (the omission didn’t cause a
    memory leak only because none of the dynamically allocated
    config fields are populated by the wrapper function)
- Removed upstreamed patches:
  - 98437-sphinx.locale._-as-gettext-in-pyspecific.patch
  - CVE-2022-45061-DoS-by-IDNA-decode.patch
</comment>
    <requestid>1041729</requestid>
  </revision>
  <revision rev="12" vrev="2">
    <srcmd5>52aa4b39a97fb788c397c8cea66dea12</srcmd5>
    <version>3.11.1</version>
    <time>1674143065</time>
    <user>dimstar_suse</user>
    <comment>- Don't fail on Sphinx build warnings.
- For jsc#PED-1570, providing Python 3.11 for SLE-15-SP5.</comment>
    <requestid>1059550</requestid>
  </revision>
  <revision rev="13" vrev="3">
    <srcmd5>abad2e4800b8ce229cf7cce640176408</srcmd5>
    <version>3.11.1</version>
    <time>1674665076</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>1060927</requestid>
  </revision>
  <revision rev="14" vrev="4">
    <srcmd5>9ad7dec4c0f9111a71912c88aea04274</srcmd5>
    <version>3.11.1</version>
    <time>1674927841</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>1061556</requestid>
  </revision>
</revisionlist>
