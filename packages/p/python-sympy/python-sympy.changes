-------------------------------------------------------------------
Wed Sep 16 11:19:37 UTC 2020 - Dirk Mueller <dmueller@suse.com>

- update to 1.6.2:
  * bugfixes

-------------------------------------------------------------------
Wed Jun 24 17:06:05 UTC 2020 - Todd R <toddrme2178@gmail.com>

- version update to 1.6
  + Backwards compatibility breaks and deprecations
    > assumptions
      * Removed deprecated Q.bounded (use Q.finite instead). Deprecated since version 1.0 (issue: #9425) (#18390 by @Smit-create)
      * Removed deprecated Q.infinitesimal (use Q.zero instead). Deprecated since version 1.0 (issue: #9675) (#18390 by @Smit-create)
      * Removed deprecated Q.infinity (use Q.infinte instead). Deprecated since version 1.0 (issue: #9426) (#18390 by @Smit-create)
    > calculus
      * Deprecated evaluate argument in differentiate_finite for making non-conservative finite differences. (#17881 by @vezeli)
    > combinatorics
      * Using Permutation.print_cyclic will raise deprecation warnings (#18033 by @oscarbenjamin, @souravgl0, and @sylee957)
    > core
      * Deprecated sympify automatically converting custom objects with __str__ or __repr__ implemented. (#19006 by @sylee957)
      * BREAKING CHANGE: Basic.has no longer accepts strings as input. For example in SymPy 1.5 you could do Symbol('x').has('x') and the string 'x' passed to has would be sympified to a symbol so that the result would be True. In SymPy 1.6 this will raise an error because the string 'x' can not be sympified using strict sympification. (#19251 by @oscarbenjamin)
      * Remove deprecated bounded, unbounded and infinitesimal. Deprecated since version 0.7.6 (issue #8071) (#18503 by @Smit-create)
      * Relational is no longer a subclass of Expr and does not produce nonsensical results in arithmetic operations. This affects all Relational subclasses (Eq, Ne, Gt, Ge, Lt, Le). It is no longer possible to call meaningless Expr methods like as_coeff_Mul on Relational instances. (#18053 by @oscarbenjamin)
      * Expr now uses cooperative dispatch for binary operations so it is possible for non-Expr Basic subclasses to override the behaviour of e.g. a + b where one of a or b is an instance of Expr. This also means that any non-Expr Basic subclasses can not depend on Expr.__add__ to create Add(a, b): if a class is not a subclass of Expr and wants to define binary operations with Expr it must do so explicitly in its own __add__ method. For classes depending on this this is not a backward compatible change. (#18116 by @oscarbenjamin)
    > matrices
      * The Matrix.is_zero property has been renamed to Matrix.is_zero_matrix.
      * Matrix.is_zero is now always False. This is because in general is_zero means the number zero so a matrix can never be zero.
    > To get the old behavior of M.is_zero in both old and new versions of sympy use from sympy.core.logic import fuzzy_and; fuzzy_and(m.is_zero for m in M). (#18464 by @sylee957)
    > polys
      * BREAKING CHANGE: Poly and PurePoly now subclass Basic rather than Expr. This means that they no longer have various Expr methods such as expand that do not make sense for Poly. Use as_expr to convert the Poly to an Expr before using Expr methods. (#18613 by @oscarbenjamin)
      * BREAKING CHANGE: Poly instances with different domains now always compare unequal with p1 == p2 and p1.eq(p2). Previously Poly instances that had the same expression and generators would compare equal even if the domains were different. In some cases it might be necessary to specify the domain when comparing e.g. if p == Poly(x, x, domain='QQ'). (#18613 by @oscarbenjamin)
      * DEPRECATION: Mixing Poly with non-polynomial Expr in binary operations is now deprecated. For example Poly(x, x) * exp(x) will give a deprecation warning but still return the Expr x*exp(x) as before. If the Expr can be converted to Poly (e.g. Poly(x, x) * x) then a Poly will be returned. To get an Expr always use the as_expr method first to convert the Poly to an Expr. To get a Poly always use as_poly to convert the Expr to a Poly. (#18613 by @oscarbenjamin)
      * DEPRECATION: Passing Poly as the integrand to the integrate function or Integral class is now deprecated. Use the integrate method instead e.g. Poly(x, x).integrate(x) (#18613 by @oscarbenjamin)
    > printing
      * Removed deprecated Ccodeprinter (Use C89Printer or C99Printer instead). Deprecated since version 1.1 (Issue : #12220). (#18392 by @risubaba)
      * Removed deprecated file viewer option in preview. Deprecated since version 0.7.3(Issue: #7018) (#18392 by @risubaba)
      * Removed deprecated StringIO viewer option in preview. Deprecated since version 0.7.2(Issue: #7083) (#18392 by @risubaba)
    > sets
      * Set now uses cooperative dispatch for binary operations so it is possible for non-Set Basic subclasses to override the behaviour of e.g. a + b where one of a or b is an instance of Set. This also means that any non-Set Basic subclasses can not depend on e.g. Set.__add__ to create Union(a, b): if a class is not a subclass of Set and wants to define binary operations with Set it must do so explicitly in its own __add__ method. For classes depending on this this is not a backward compatible change. (#18116 by @oscarbenjamin)
    > other
      * Submodule names are no longer imported with from sympy import *. They can still be imported directly like from sympy import core or accessed like sympy.core, or like sys.modules['sympy.simplify'] for modules that share names with SymPy functions. (#18245 by @oscarbenjamin)
  + Changes
    > assumptions
      * assumptions will give the T/F assumptions of a symbol or expression (#19155 by @smichr)
      * common_assumptions returns the T/F assumptions in common amongst the given expressions (#19155 by @smichr)
      * Added a refine_matrixelement function (#18681 by @Saanidhyavats)
      * Updated Mul.is_imaginary to support infinite values. (#18192 by @namannimmo10)
      * Removed deprecated Q.bounded (use Q.finite instead). Deprecated since version 1.0 (issue: #9425) (#18390 by @Smit-create)
      * Removed deprecated Q.infinitesimal (use Q.zero instead). Deprecated since version 1.0 (issue: #9675) (#18390 by @Smit-create)
      * Removed deprecated Q.infinity (use Q.infinte instead). Deprecated since version 1.0 (issue: #9426) (#18390 by @Smit-create)
      * Matrices can now be checked for antihermitian property by using ask(Q.antihermitian()) which earlier generated incorrect results. (#18303 by @czgdp1807)
      * Improved code in ask function using constructs from cnf module. (#18204 by @JSS95 and @mcpl-sympy)
      * Fixed bug in ask function: In case of user-defined Predicates it generated KeyError while checking for local_facts. Now falls back to Handlers and satask. (#18204 by @JSS95 and @mcpl-sympy)
    > calculus
      * continuous_domain now finds singularities in nested fractions (#19047 by @smichr and @ThomasHickman)
      * singularities has been upgraded to handle more than rational functions (#19047 by @smichr and @ThomasHickman)
      * fixes operations of AccumBounds (#18803 by @Ryand1234)
      * periodicity of exponential functions with a non-zero phase component is now calculated. (#18746 by @mohitacecode)
      * Correct the solution of differentiate_finite for expressions that contain embedded derivatives. (#17881 by @vezeli)
      * Deprecated evaluate argument in differentiate_finite for making non-conservative finite differences. (#17881 by @vezeli)
      * Updated docstrings of maximum, minimum, stationary_points and AccumBounds.intersection (#18581 by @mijo2)
      * Fixes Recursion Error in AccumulationBounds.__pow__ by adding a check on denominator (#18450 by @Smit-create)
    > combinatorics
      * Permutation * PermutationGroup and PermutationGroup * Permutation return Coset. (#19139 by @mohitacecode)
      * Added Coset Class. (#19077 by @mohitacecode and @sylee957)
      * Added SymmetricPermutationGroup Class. (#19077 by @mohitacecode and @sylee957)
      * Added schur number utilities in combinatorics (#18667 by @mijo2 and @slacker404)
      * Raise exception with wrong size in Permutation. (#18587 by @Smit-create)
      * Added Permutation.conjugacy_class and Permutation.conjugacy_classes for computing conjugacy classes in permutation groups. (#18354 by @lucjon and @sachin-4099)
      * Fixed Permutation applying for negative integers. (#18032 by @mrocklin and @sylee957)
      * Added Permutation.apply to use permutation as a symbolic function. (#18032 by @mrocklin and @sylee957)
      * Using Permutation.print_cyclic will raise deprecation warnings (#18033 by @oscarbenjamin, @souravgl0, and @sylee957)
      * Cycle class is no longer mutable and can be regarded as a sparse representation of a permutation (#17973 by @sachin-4099)
    > core
      * BREAKING CHANGE: Basic.has no longer accepts strings as input. For example in SymPy 1.5 you could do Symbol('x').has('x') and the string 'x' passed to has would be sympified to a symbol so that the result would be True. In SymPy 1.6 this will raise an error because the string 'x' can not be sympified using strict sympification. (#19251 by @oscarbenjamin)
      * Mul.is_integer no longer rebuilds arguments into Mul (#19182 by @iammosespaulr)
      * Mul with odd numerator and even denominator is recognized as rational but not integer (#19155 by @smichr)
      * Deprecated sympify automatically converting custom objects with __str__ or __repr__ implemented. (#19006 by @sylee957)
      * when strict=True, as_int will not convert True to 1 (#19054 by @smichr)
      * Support mpmath.matrix in sympify. (#18911 by @smichr and @sylee957)
      * Adds simplification to Pow._eval_nseries resolving incorrect limit evaluation (#18962 by @sachin-4099)
      * doit(deep=False) now evaluates Add and Mul. (#18829 by @JSS95 and @mcpl-sympy)
      * Reduces sensitivity of computation of order terms in Pow._eval_nseries (#18785 by @sachin-4099)
      * Pow.is_zero is fixed for some cases involving infinite (or possibly infinite) expressions. (#18728 by @oscarbenjamin)
      * Now finite and infinite are logical opposites in the old assumptions system so e.g. a Symbol declared with finite=False will have infinite=True. (#18726 by @oscarbenjamin)
      * sympify no longer converts numpy arrays with size to scalars (#18651 by @mijo2 and @NeilGirdhar)
      * __getnewargs__() added to Zero, One, NegativeOne, Half. (#18675 by @mohitacecode)
      * simplification of powers with numerical products in the base is improved (#18650 by @sachin-4099)
      * sqrt(x).is_negative is False when x is real (#18597 by @Smit-create)
      * Add,_eval_as_leading_term() has been fixed (#18340 by @sachin-4099)
      * Updated the definition of atoms method of class Basic (#18532 by @mijo2)
      * basic - sorting in subs is improved so unsorted arguments will prefer replacing more complicated patterns first (e.g. the second derivative before the first derivative). (#18043 by @Psycho-Pirate)
      * Remove deprecated bounded, unbounded and infinitesimal. Deprecated since version 0.7.6 (issue #8071) (#18503 by @Smit-create)
      * Added check for AccumBounds. (#18478 by @smichr and @Smit-create)
      * Adding gmpy in integer_nthroot ( It works only for n < 2**63) (#18380 by @Smit-create)
      * Added new test case for relational (#18416 by @mijo2)
      * Pow._eval_nseries fixed to accept all real exponents. (#18406 by @Smit-create)
      * integer_ntroot and igcd now use gmpy when it is installed (#18276 by @Smit-create)
      * Changed some partial derivatives like diff(f(g(x), h(x)), x) not to have dummy symbols. (#18326 by @sachin-4099)
      * subs now works correctly with partial derivatives. (#18326 by @sachin-4099)
      * Subclass of Function can inherit its nargs attribute to its subclasses. (#18258 by @JSS95 and @mcpl-sympy)
      * Added try-except block in sympy/core/relational.py to handle NotImplementedError and return ConditionSet (#18211 by @Smit-create)
      * Renamed core/evaluate to core/parameters (#18198 by @JSS95, @mcpl-sympy, and @oscarbenjamin)
      * Added global_parameters, which is a thread-local storage for global parameters such as evaluate, distribute, etc. (#18198 by @JSS95, @mcpl-sympy, and @oscarbenjamin)
      * Relational is no longer a subclass of Expr and does not produce nonsensical results in arithmetic operations. This affects all Relational subclasses (Eq, Ne, Gt, Ge, Lt, Le). It is no longer possible to call meaningless Expr methods like as_coeff_Mul on Relational instances. (#18053 by @oscarbenjamin)
      * Expr now uses cooperative dispatch for binary operations so it is possible for non-Expr Basic subclasses to override the behaviour of e.g. a + b where one of a or b is an instance of Expr. This also means that any non-Expr Basic subclasses can not depend on Expr.__add__ to create Add(a, b): if a class is not a subclass of Expr and wants to define binary operations with Expr it must do so explicitly in its own __add__ method. For classes depending on this this is not a backward compatible change. (#18116 by @oscarbenjamin)
      * Added global_evaluate[0] condition in add, sub, mul, div functions in Infinity class. (#18109 by @namannimmo10)
      * Moved .as_poly() from Basic to Expr. (#18094 by @dhruvmendiratta6)
      * Fixed a bug in Factors().as_expr() that led to simplifications that are not generally valid for complex numbers. (Exponents were always multiplied in power-of-a-power situations.) (#18087 by @gschintgen)
      * Fix a regression in 1.5 that allowed expressions to compare equal to strings, and caused == to call str() on the other object. (#18057 by @asmeurer)
    > functions
      * Adjoint of exp and transpose of exp now work as expected. (#19151 by @akirakyle)
      * Adds substitution to _eval_nseries() function of Abs() class resolving incorrect limit evaluations (#19037 by @sachin-4099)
      * expand log term into its prime factors if the factor flag is True. (#18927 by @sbt4104)
      * Evaluate nested floor/ceiling. (#18903 by @sbt4104)
      * Update expand function for binomials. (#18802 by @sbt4104)
      * periodicity of trigonometric functions with a non-zero phase component is now calculated. (#18746 by @mohitacecode)
      * __getnewargs__() and args() added to IdentityFunction. (#18675 by @mohitacecode)
      * Added _eval_nseries() functionality to hyper (#18630 by @dhruvmendiratta6)
      * Fix number of terms in exp._eval_nseries. (#18598 by @mohitacecode)
      * Fixes TypeError while using simplify (#18640 by @Smit-create)
      * Added proportional tolerance for falling factorial test (#18456 by @mijo2)
      * polygamma(n, 1/2) with n a positive integer is automatically evaluated (#18451 by @ethankward)
      * floor and ceiling with float arguments now return Integers (#18424 by @mohitacecode)
      * Sympified output numbers for factorial and binomial used with Mod. (#18339 by @namannimmo10)
      * Maximum recursion depth is no longer exceeded when subfactorial is called on large numbers (#17983 by @sachin-4099)
      * Copy edited the Special submodule to reflect the style guide for Google Season of Docs. (#17844 by @lglattly)
    > geometry
      * Line.bisectors will return the two perpendicular lines, bisecting the angles at the intersection of two linear entities and laying in the same plane as them (#19094 by @Jaime02 and @smichr)
      * Added explicit optional parameters to Polygon and convex_hull (#15757 by @oscargus)
      * Added bisectors method for Polygon class. (#18335 by @namannimmo10)
      * Add __call__ method in Class Curve. (#18250 by @namannimmo10)
      * Point.coordinates was added as a meaningful alias for Point.args (#18213 by @Jaime02)
    > holonomic
      * A cache mismatch error was fixed. (#19248 by @iammosespaulr and @smichr)
    > integrals
      * Handling Float Integrals (#18434 by @Smit-create)
      * Added integration over summation (#18491 by @mijo2)
      * Added extra step to evaluate integral if heurisch() returns None in heurisch_wrapper() (#18153 by @risubaba)
      * Catch ValueError from meijerg() in _inverse_mellin_transform(). (#18141 by @Smit-create)
    > logic
      * boolalg (#18912 by @smichr)
      * to_cnf/to_dnf (when simplify=True) require force=True` if there are more than 8 variables (#18912 by @smichr)
      * simplify_logic recognizes trivial simplified cases (#18912 by @smichr)
      * is_literal can treat Not as literal or not by using the literal_Not flag (#18912 by @smichr)
      * Opposing Relationals are now detected correctly in nested Ands allowing evaluation to False in more cases. (#18811 by @oscarbenjamin)
      * Added a new normal form - ANFform. Function ANFform converts a list of truth values to an expression in Algebraic Normal Form (ANF). (#13686 by @KonstantinTogoi)
      * Added a new method BooleanFunction.to_anf that converts an expression to ANF by equivalent transformations. (#13686 by @KonstantinTogoi)
      * Added a new function is_anf that checks if an expression is ANF. (#13686 by @KonstantinTogoi)
      * Added a new function to_anf that converts an expression to ANF if it is not ANF. (#13686 by @KonstantinTogoi)
      * Added a new function distribute_xor_over_and. Given a sentence s consisting of conjunction and exclusive disjunctions of literals, it returns an equivalent exclusive disjunction. (#13686 by @KonstantinTogoi)
      * Added a new function bool_minterm that returns the k-th minterm of a fixed ordered set of binary variables. (#13686 by @KonstantinTogoi)
      * Added a new function bool_maxterm that returns the k-th maxterm of a fixed ordered set of binary variables. (#13686 by @KonstantinTogoi)
      * Added a new function bool_monomial that returns the k-th monomial of a fixed ordered set of binary variables. (#13686 by @KonstantinTogoi)
    > matrices
      * Fixed matrix creation from the list containg numpy ndarray. (e.g. Matrix([np.array([1, 2]), np.array([1, 2])])) (#19229 by @sylee957)
      * Added is_strongly_diagonally_dominant and is_weakly_diagonally_dominant properties for Matrix. (#19205 by @sylee957)
      * Powers of non-square matrices now always raise an error, even when constructed using MatPow(...). (#19104 by @jlherren)
      * ZeroMatrix will not be logically False. (#19110 by @sbt4104)
      * Added connected_components and connected_components_decomposition for matrix which decomposes a matrix into a block diagonal form. (#19045 by @sylee957)
      * Added todok function to find dictionary of keys format from any dense or sparse matrices. (#19045 by @sylee957)
      * Added BlockDiagMatrix.get_diag_blocks to provide an user API to get diagonal blocks from the matrix. (#19045 by @sylee957)
      * Fixed bug of mpmath.matrix transforming into wrong shape if used to create Matrix. (#18911 by @smichr and @sylee957)
      * Improved eigenvals and eigenvects for floating point matrices using mpmath. (#18911 by @smichr and @sylee957)
      * Some expressions involving OneMatrix are now simplified. (#19009 by @jlherren)
      * Indexing BlockMatrix now more often produces correct results and remains unevaluated if a correct simplification is not possible. (#19007 by @jlherren)
      * Added a function that rotates matrices by 90 degrees (#18953 by @iammosespaulr and @sylee957)
      * sparsetools - _doktocsr now returns a MutableSparseMatrix (#18940 by @smichr)
      * Added Golub Kahan Bidiagonalization with Householder Reflections (#18797 by @sudoWin)
      * Added test_solvers.py file which contains all the solvers-related tests. (#18793 by @guptabhaskar)
      * Added evaluate option to MatAdd and MatMul (#18765 by @JSS95 and @mcpl-sympy)
      * non-square matrices now raise NonSquareMatrixError if inversion is attempted (#18647 by @abhinav28071999)
      * Added test_subspaces.py file which contain all the reductions-related tests. (#18713 by @mohitacecode)
      * Added test_reductions.py file which contain all the reductions-related tests. (#18705 by @mohitacecode)
      * Added test_eigen.py file which contain all the eigen-related tests. (#18690 by @mohitacecode)
      * Added test_decomposition.py file which contain all the decomposition-related tests. (#18685 by @mohitacecode)
      * Added test_determinant.py file which contain all the determinant-related tests. (#18668 by @mohitacecode)
      * Faster Matrix Inverse using Block Matrix (#18608 by @abhinav28071999)
      * Faster Matrix exponentiation using Cayley Hamilton Theorem (#18595 by @abhinav28071999)
      * Fixed BlockDiagMatrix(A).blocks giving a non-block matrix. (#18621 by @abhinav28071999)
      * Added dotprodsimp keyword to MatrixArithmetic.pow (#18600 by @Pristine-Cat)
      * Implemented General Matrix Analytic functions (#18565 by @abhinav28071999)
      * Enabled intermediate matrix product simplification to control expression blowup during certain matrix operations. (#18572 by @Pristine-Cat) (#18147 by @Pristine-Cat) (#18049 by @Pristine-Cat)
      * Added environment variable check SYMPY_DOTPRODSIMP=0 to turn off the new dotprodsimp simplification in case the structure of the new results breaks user code. Should be removed after next live release. (#18572 by @Pristine-Cat)
      * Pulled out and cleaned up many matrix function implementations from matrices.py into individual matrix source files determinant.py, reductions.py, subspaces.py, eigen.py, decompositions.py, solvers.py and inverse.py. (#18564 by @Pristine-Cat) (#18519 by @Pristine-Cat) (#18425 by @Pristine-Cat) (#18420 by @Pristine-Cat) (#18342 by @Pristine-Cat)
      * Immutable matrices return themselves on call to as_immutable(). (#18441 by @Pristine-Cat)
      * Fixed wrapper for NumPy matrices so SymPy iteration and indexing works correctly. (#18160 by @Pristine-Cat)
      * Not backwards compatible: The Matrix.is_zero property has been renamed to Matrix.is_zero_matrix. Matrix.is_zero is now always False. This is because in general is_zero means the number zero so a matrix can never be zero. To get the old behavior of M.is_zero in both old and new versions of sympy use from sympy.core.logic import fuzzy_and; fuzzy_and(m.is_zero for m in M). (#18464 by @sylee957)
      * Added PermutationMatrix and MatrixPermute for matrix permutations. (#18032 by @mrocklin and @sylee957)
      * Fixed FunctionMatrix.replace raising TypeError: 'property' object is not iterable when the function is not a Lambda instance. (#17998 by @sylee957)
      * FunctionMatrix and ElementwiseApplyFunction will always wrap the function inside Lambda. (#17998 by @sylee957)
      * Cleaned up unnecessary slowdown for MatMul.doit when it contains explicit matrices. (#17872 by @sylee957)
      * Fixed MatPow(Inverse(A), 3) and Inverse(MatPow(A, 3)) canonicalized into different objects. (#17872 by @sylee957)
      * Improved inversion of block matrices by selecting an appropriate formula. (#19215 by @jlherren)
    > ntheory
      * the number of digits (like bit length) can now be specified for digits (#18961 by @Arpan612 and @smichr)
      * Corrects the condition for "Extra strong" Lucas pseudoprime (#18946 by @Arpan612 and @sylee957)
      * count_digits works only with numbers (not strings) (#18807 by @smichr)
      * digits is now located in digits instead of factor_ (#18807 by @smichr)
      * implemented elliptic curve (#18682 by @abhinav28071999 and @shikil)
      * added new ntheory module digits.py containing methods related to arithmetic properties of integers (currently, frequency counters for digits of integers, palindromic numbers) (#18659 by @sr-murthy)
      * Made divisor_sigma() symbolically recognize the case: divisor_sigma(a**j*b**k) (#18688 by @sachin-4099)
      * Added multiplicty_in_factorial(p, n) to find the multiplicity of p in n! without calculating the factorial. (#18671 by @sachin-4099)
      * implemented gaussian prime test (#18673 by @abhinav28071999)
      * is_nthpow_residue no longer raises ValueError when a < 0 (#18398 by @abhinav28071999)
      * polynomial_congruence recognizes x**n + a = 0 mod m as a special case (#18398 by @abhinav28071999)
      * Added polynomial_congruence(expr, m) to find values congruent (mod m) to a polynomial (#18294 by @abhinav28071999)
      * is_nthpow_residue handles numbers that are not powers of a primitive root. (#18337 by @abhinav28071999)
      * Fixes nthroot_mod for prime powers (#18274 by @abhinav28071999)
      * nthroot_mod now supports composite moduli (#18199 by @abhinav28071999)
      * Added dra and drm to calculate digital root via addition and multiplication (#16496 by @abhinav28071999 and @smichr)
      * Added quadratic_congruence solver function (#18195 by @abhinav28071999)
      * Make nthroot_mod , primitive_root and _primitive_root_prime_iter incompatible with composite modulo. (#18194 by @risubaba)
      * In def _sqrt_mod_prime_power(a, p, k): it is assumed that p is a prime number. And this function calls if not is_quad_residue(a, p): in line 396. But is_quad_residue(a, p) again checks that p is prime or not. This leads to extra computation cost. (#18184 by @abhinav28071999)
      * Added check for zero in is_nthpow_residue. (#18129 by @erdOne)
      * Added proper_divisor and proper_divisor_count functions (#18085 by @adhoc-king and @czgdp1807)
      * Proper exception when accessing index 0 of sieve. (#18013 by @JulienPalard)
    > parsing
      * added support for unary operators: unary plus(+), unary minus(-), pre/post increment(++), pre/post decrement(--) and logical NOT(!) in C parser (#19140 by @smitgajjar)
      * added support for parenthesized expression in C parser (#19140 by @smitgajjar)
      * added support for binom (#19147 by @iammosespaulr)
      * Added 2 new rules for mathematica parser. (#19135 by @wuyudi)
      * added support for parsing binary operators +, -, *, /, %, =, ==, !=, <, <=, >, >=, && and || in C parser (#19029 by @smitgajjar)
      * added support for parsing variable declarations and assignments, where one variable or a literal or any combination of them using binary operators is assigned to another variable in C parser (#19029 by @smitgajjar)
      * added support for variable declaration and assignment of boolean literal (true and false) as well as declaration of boolean data type in C parser (#19029 by @smitgajjar)
      * Added the assignment case where character is assigned to an integer in C parser (#18925 by @smitgajjar)
      * parse_expr can now be imported directly from sympy (from sympy import parse_expr). The various parsing transformers should still be imported from sympy.parsing.sympy_parser. (#18074 by @asmeurer)
      * updated use of Call() to work in Python >=3.5 by reformatting arguments (#17875 by @czgdp1807 and @gregmedlock)
    > physics.continuum_mechanics
      * draw method follows sign convention of positive moment/counterclockwise application (#18766 by @amartinhernan)
    > physics.mechanics
      * KanesMethod.forcing no longer contains time derivatives of generalized coordinates if kinematical differential equations are supplied. (#18078 by @moorepants)
    > physics.quantum
      * Added new OrthogonalBra and OrthogonalKet classes for orthogonal states. (#18182 by @m93a)
    > physics.vector
      * Fixed test failure for test_dyadic with cache off (#18405 by @Smit-create)
      * Added assumptions to dynamicsymbols (#18061 by @Smit-create)
      * Added test for dynamicsymbols (#18061 by @Smit-create)
    > plotting
      * Fixed plot3d_parametric_line plotting curves out of the box. (#19284 by @sylee957)
      * Accept user passed label of the plots (#19079 by @Smit-create)
      * Removed all set_smart_bounds methods. (#18870 by @kamimura)
      * Improved textplot() axis values. (#18922 by @prshnt19)
      * Added backend option (#18677 by @Smit-create)
      * Fixed aspect_ratio in plot (#18537 by @Smit-create)
    > polys
      * roots_quintic now recognizes when there is no analytical solution (#19165 by @smichr)
      * any Expr with non-symbol generators will be refused by root-related public functions to minimize confusion (since roots of cos(x) - 1 and x - 1 are the same). (#19117 by @smichr)
      * RootOf results that are returned in root request will have a canonical x as their generator (#19117 by @smichr)
      * any Expr with non-symbol generators will be refused by root-related public functions to minimize confusion (since roots of cos(x) - 1 and x - 1 are the same). (#19117 by @smichr)
      * RootOf results that are returned in root request will have a canonical x as their generator (#19117 by @smichr)
      * Fixed an issue when calling factor() with an extension (#19040 by @iammosespaulr)
      * Combine factors of same multiplicity (#18698 by @Smit-create)
      * Fixed initialization of orig_ext and added from_AlgebraicField() to AlgebraicField. (#18669 by @mohitacecode)
      * BREAKING CHANGE: Poly and PurePoly now subclass Basic rather than Expr. This means that they no longer have various Expr methods such as expand that do not make sense for Poly. Use as_expr to convert the Poly to an Expr before using Expr methods. (#18613 by @oscarbenjamin)
      * BREAKING CHANGE: Poly instances with different domains now always compare unequal with p1 == p2 and p1.eq(p2). Previously Poly instances that had the same expression and generators would compare equal even if the domains were different. In some cases it might be necessary to specify the domain when comparing e.g. if p == Poly(x, x, domain='QQ'). (#18613 by @oscarbenjamin)
      * DEPRECATION: Mixing Poly with non-polynomial Expr in binary operations is now deprecated. For example Poly(x, x) * exp(x) will give a deprecation warning but still returne the Expr x*exp(x) as before. If the Expr can be converted to Poly (e.g. Poly(x, x) * x) then a Poly will be returned. To get an Expr always use the as_expr method first to convert the Poly to an Expr. To get a Poly always use as_poly to convert the Expr to a Poly. (#18613 by @oscarbenjamin)
      * DEPRECATION: Passing Poly as the integrand to the integrate function or Integral class is now deprecated. Use the integrate method instead e.g. Poly(x, x).integrate(x) (#18613 by @oscarbenjamin)
      * add condition for f == 0 to Piecewise solution for symbolic quartic polynomials (#18571 by @harsh9200)
      * Fixed polynomial gcd bug (#18566 by @Smit-create)
      * Added check for expressions containing GoldenRatio and TribonacciConstant (#18535 by @Smit-create)
      * Added expand in simplify method of ExpressionDomain (#18472 by @Smit-create)
      * Fixed the issue of cancel not expanding the product of irrational conjugates and added Tests (#18448 by @iamabhishek0)
      * Prevent creation of CC from changing the context of RealElement. (#18312 by @V1krant)
      * Changes in Poly.__new__() to make it handle simplified Matrix (#18159 by @Smit-create)
      * interpolate will no longer return nan when x is a supplied coordinate (#18030 by @smichr)
      * interpolating_poly will raise an error if x is not symbolic (#18030 by @smichr)
      * interpolating_poly will raise an error if X or Y depend on x (#18030 by @smichr)
      * interpolating-poly will now use only the first n points in X and Y (#18030 by @smichr)
      * Added KSY_precondition() to test for the Kapur-Saxena-Yang precondition (#17974 by @ctsiagkalis)
      * Added get_KSY_Dixon_resultant() and auxiliary methods for computing the KSY approach to Dixon's Resultant (#17974 by @ctsiagkalis)
    > printing
      * the inverse hyperbolic functions now respect the inv_trig_style printer setting (#19235 by @eric-wieser)
      * Fixed numpy printer raising error for unevaluated numeric power. (#19170 by @sylee957)
      * Fixed IdentityFunction printing for LaTeX. (#19032 by @sylee957)
      * Added parenthesize_super option to LatexPrinter. (#18256 by @JSS95 and @mcpl-sympy)
      * Removing python2 support from PythonCodePrinter (#18381 by @Smit-create)
      * Added support for airy functions in the SciPyPrinter class. (#18908 by @OmarWagih1)
      * allowed ReprPrinter to maintain original expr order via turning ordering off (#18777 by @leerobert)
      * Fix lambdify with Min for arrays of more than one dimension (#18774 by @sbt4104)
      * Fixed MatMul with complex coefficients raising error when printed. (#18744 by @sylee957)
      * fixes incorrect parenthesizes in latex print of integral (#18772 by @Ryand1234)
      * fixes nested differentiation problem in latex format (#18740 by @Ryand1234)
      * added Python printer for KroneckerDelta (#18185 by @m93a)
      * Added min and max options for printers to set a range for floating point numbers that can
      * be printed in fixed-point format. (#18477 by @mijo2)
      * Removed deprecated Ccodeprinter (Use C89Printer or C99Printer instead). Deprecated since version 1.1 (Issue : #12220). (#18392 by @risubaba)
      * Removed deprecated file viewer option in preview. Deprecated since version 0.7.3(Issue: #7018) (#18392 by @risubaba)
      * Removed deprecated StringIO viewer option in preview. Deprecated since version 0.7.2(Issue: #7083) (#18392 by @risubaba)
      * Fixed Range with symbols raising error when printed with LaTeX. (#18418 by @sylee957)
      * Added NumPy printing for several matrix expressions. (ZeroMatrix, OneMatrix, FunctionMatrix, HadamardProduct, KroneckerProduct, Adjoint, DiagonalOf, DiagMatrix, DiagonalMatrix) (#18351 by @sylee957 and @vighneshq)
      * Added support for FiniteSet printing in mathml content markup. (#17545 by @sylee957)
      * Added support for Union, Intersection, Complement, and ProductSet printing for mathml content markup. (#17545 by @sylee957)
      * Added a new flag perm_cyclic for string, LaTeX, and pretty printers. (#18033 by @oscarbenjamin, @souravgl0, and @sylee957)
      * LaTeX and pretty printer will print permutation in 2-line array notation when perm_cyclic=False. (#18033 by @oscarbenjamin, @souravgl0, and @sylee957)
    > series
      * Adds simplification to limitinf() function of gruntz.py resolving ValueError (#19004 by @sachin-4099)
      * Adds simplification to limitinf() function of gruntz.py resolving ValueError (#18978 by @sachin-4099)
      * Corrected docstrings related to latex in FormalPowerSeries (#18812 by @smitgajjar)
      * Order(0) now returns an object of Order Type (#18629 by @iamabhishek0)
    > sets
      * Added a new DisjointUnion class to compute the disjoint union of instances of sympy.sets.sets.Set (#18861 by @sava-1729)
      * Added is_finite_set property in class Range (#19016 by @sava-1729)
      * Added test case for sets with | operation (#18576 by @rashmi123456789)
      * Fixed bugs in ComplexRegion.contains() that could lead to incorrect results when membership is in fact undecidable or at least unknown. (#18308 by @gschintgen)
      * Fixed minor issues in Interval.contains() (#18426 by @gschintgen)
      * Fixed a bug in FiniteSet's union handler that could lead to some elements being "dropped" if their membership in the other set can't be determined. (#18356 by @gschintgen)
      * Fixed evalf() for Intervals and FiniteSets having symbolic endpoints or containing symbolic elements. (#18251 by @gschintgen)
      * Fixed FiniteSet._complement() for Intervals and S.Reals. Previously wrong results or exceptions could result from set differences involving FiniteSets containing non-reals or symbolic expressions. (#18218 by @gschintgen)
      * Fixed and extended intersection handler for Integer-based ImageSets. (#18200 by @gschintgen)
      * added appropriate error message when infinite ranges are sliced (#17986 by @arun-y99)
      * Added an is_subset handler to check whether a Range is included in a FiniteSet. (#18137 by @gschintgen)
      * Added a simple cache to FiniteSet in order to speed up some membership checks. (#18137 by @gschintgen)
      * Fixed Range.contains() logic for symbolic values. (#18137 by @gschintgen)
      * Fixed Rationals.boundary to be Reals. (is_open and is_closed now both return False.) (#18168 by @gschintgen)
      * is_open logic is improved. (#18168 by @gschintgen)
      * Set now uses cooperative dispatch for binary operations so it is possible for non-Set Basic subclasses to override the behaviour of e.g. a + b where one of a or b is an instance of Set. This also means that any non-Set Basic subclasses can not depend on Expr.__add__ to create Union(a, b): if a class is not a subclass of Set and wants to define binary operations with Set it must do so explicitly in its own __add__ method. For classes depending on this this is not a backward compatible change. (#18116 by @oscarbenjamin)
      * SetExpr._eval_func() is fixed so that ImageSets with linear maps involving complex numbers are now instantiated correctly. (#18062 by @gschintgen)
      * The logic for the Set.is_subset method is made correct. This prevents incorrectly returning True or False but also means that the method returns None more often in cases where a determination should be possible. (#17848 by @oscarbenjamin)
      * There is a new is_finiteset property for sets which is a fuzzy bool indicating whether a set has a finite number of elements. (#17848 by @oscarbenjamin)
    > simplify
      * collect is more careful not to make invalid collection (e.g. factoring Rational out of a power's exponent) (#19165 by @smichr)
      * fu routine TR11 has a helper that allows double angle reduction in fractions (#18635 by @smichr and @V1krant)
      * Fixing bug in cancel function (#18107 by @namannimmo10)
      * Fixed IndexError using cse with RootOf (#18273 by @sachin-4099)
      * Fix wrong results from sqrtdenest() with expressions containing I. (#18042 by @asmeurer and @oscarbenjamin)
    > solvers
      * Use matrix exponential to solve homogeneous systems of first order ODEs with constant coefficients. (#18720 by @mijo2 and @oscarbenjamin)
      * add a new reduced_separable method (#19122 by @RituRajSingh878)
      * no longer interpret 0./1. as bool when the other arg is not a Boolean (#19054 by @smichr)
      * Fix solvers to handle binomials (#18802 by @sbt4104)
      * Rewrite equation as expression in solveset. (#18670 by @mohitacecode)
      * Updated docstring of public functions in polysys (#18641 by @mijo2)
      * Fixed NoneType Error Bug in solvers.solvers.unrad() (#18324 by @sachin-4099)
      * Fixed nonlinsolve's handling of intersections and complements in the final result. (#18308 by @gschintgen)
      * Now dsolve can solve linear non-homogeneous ODEs involving hyperbolic functions when using the method of undetermined coefficients. (#18410 by @Mohitbalwani26)
      * Fixed checkodesol for some cases when the solution returned by variation of parameters was correct but chekodesol couldn't simplify it. (#18376 by @Mohitbalwani26)
      * Fixed dsolve for some cases of linear non-homogeneous ODEs when using the method of undetermined coefficients. (#18309 by @Mohitbalwani26)
      * Changed return type from None to [], as in #18199 the return type of nth_root was changed when all_root = True and no root exists (#18285 by @abhinav28071999)
      * ode.py - solve function is used to express the equation in factorised form (#18214 by @Mohitbalwani26 and @smichr)
      * Fixed a bug in diophantine where negative coefficients could lead to incomplete solutions in conjunction with permute=True. (#18200 by @gschintgen)
      * The diophantine solver no longer raises for unsympified inputs. (#18201 by @oscarbenjamin)
      * fixed a bug in diophantine when using permute=True which caused incomplete permutations to be returned (#18189 by @abhinav28071999)
      * diophantine.py - fixed bug where AttributeError was raised in some cases. (#18167 by @Mohitbalwani26)
      * Solving of hyperbolic equations improved in solveset. (#14053 by @gschintgen, @ishanaj, @oscarbenjamin, and @oscargus)
      * Copy edited solvers.py to reflect the style guide for Google Season of Docs. (#17921 by @lglattly)
    > stats
      * Allowing the user to define custom distributions (#19123 by @Smit-create)
      * Added coskewness (#18935 by @Smit-create)
      * Added sampling methods for discrete random variables (#18289 by @Smit-create)
      * Added median function. (#18300 by @Smit-create)
      * Updated some documentation in NormalGamma and JointRV functions (#18589 by @akash9712 and @mijo2)
      * DiscreteUniform raises ValueError for duplicate args (#18614 by @smichr and @Smit-create)
      * sympify expression in compute_expectation (#18577 by @Smit-create)
      * Added moyal distribution (#18446 by @Smit-create)
      * Fixes Wrong Integral result from SingleContinuousPSpace (#18336 by @Smit-create)
      * Fixed domain bug in probability method of ContinuousPspace in sympy/stats/crv.py (#18311 by @Smit-create)
      * Added Bernoulli Process in sympy/stats/stochastic_process_types.py (#18173 by @Smit-create)
      * Added HermiteDistribution in sympy/stats/drv_types.py (#18233 by @Smit-create)
      * Added PowerFunction in sympy/stats/crv_types.py (#18152 by @Smit-create)
      * Reciprocal distribution has been added to sympy.stats (#18131 by @abhinav28071999)
      * Added levy distribution in sympy/stats/crv_types.py (#18096 by @Smit-create)
      * Added test of levy distribution in sympy/stats/tests/test_continuous_rv.py (#18096 by @Smit-create)
      * Required change in sympy/stats/init.py (#18096 by @Smit-create)
    > tensor
      * Fixed a bug where tensor contractions in calls to replace_with_arrays would fail to apply the metric. (#19091 by @cjayross)
      * Fix Idx object to accept non-integer bound (#18605 by @Smit-create)
      * Implemented derivatives with respect to symbols in tensor expressions (#18093 by @joha2 and @Upabjojr)
      * Implemented derivatives with respect to tensors in tensor expressions (#18093 by @joha2 and @Upabjojr)
      * Added _eval_simplify method for class ImmutableDenseNDimArray (#18369 by @iamabhishek0)
      * Fixing bug in replacing indices in PartialDerivative tensor objects. (#18242 by @Upabjojr)
      * Tensor module: refactory to allow mixing PartialDerivative and TensAdd. (#18224 by @Upabjojr)
      * Fix PartialDerivative operator to correctly handle the valence (covariant/contravariant) of the deriving variable. (#18166 by @Upabjojr)
      * .dummy_fmt changed to .dummy_name (#17518 by @drybalka)
      * metric parameter for TensorIndexType is now split into 2 optional parameters metric_name and metric_symmetry (#17518 by @drybalka)
      * TensorIndexType.dim is now a symbol and not None (#17518 by @drybalka)
    > utilities
      * Overflow condition and negative argument for 'ibin' added (#18973 by @Arpan612)
      * iterables - uniq will now raise a RuntimeError if a size change of the sequence is detected (#18835 by @smichr)
      * iterables now includes is_palindromic to check if a sequence (or slice thereof) is palindromic (#18807 by @smichr)
      * iterables: generate_derangements now handles unsorted input correctly (#18810 by @smichr)
      * Code for the test runner is moved to a new sympy.testing package. (#18095 by @oscarbenjamin)
      * lambdify: avoid using scipy versions of numpy functions, which are deprecated, in lambdify. (#18080 by @sylee957)
    > other
      * Replace inspect.getargspec with getfullargspec (#18784 by @sethtroisi)
      * Updated README to include details about how to install SymPy using PyPI (#18518 by @mijo2)
      * Corrected an inconsistency in the "Advanced Expression Manipulation" section of the tutorial. (#18287 by @Smit-create)
      * Submodule names are no longer imported with from sympy import *. They can still be imported directly like from sympy import core or accessed like sympy.core, or like sys.modules['sympy.simplify'] for modules that share names with SymPy functions. (#18245 by @oscarbenjamin)
      * README.rst - Added the codecov Badge in readme.rst (#18266 by @Mohitbalwani26)
      * updated the README.rst and doc/README.rst with links to the SymPy Documentation Style Guide. (#17922 by @lglattly)

-------------------------------------------------------------------
Wed Jan 15 09:50:57 UTC 2020 - Benedikt Fein <benedikt.fein@gmail.com>

- version update to 1.5.1
  + Deprecate `is_EmptySet` in favor of `is_empty`
  + Lambda now requires a tuple rather than a list for the
    signature argument (non-tuple iterables are deprecated)
  + Eq(expr) now raises ValueError. Eq(expr, 0) should be used
    instead.
  + Refactory of the units module. Scale factors and dimensions
    are now both global and relative to single unit systems.
  + get_dixon_matrix() now computes only the necessary monomials
    for the Dixon matrix.
  + The ProductSet of no sets is no longer the empty set. Instead
    is the set consisting of the empty tuple.
  + Deprecated tensorhead() and tensorsymmetry() static methods.
  + Rational, irrational, transcendental and algebraic now imply
    finite in the assumptions system. This means that all symbols
    declared as rational, integer, odd etc are now automatically
    assumed finite.
  + In the (old) assumptions, `complex=True` now implies
    `finite=True`. Note that the default assumption for Symbol is
    `complex=None`, which allows for the possibility for it to be
    infinite.
  + The assumptions system is changed so that only finite numbers
    can be considered real, positive, negative, nonnegative,
    nonpositive or nonzero (since nonzero implies real). This
    means that any symbol declared with e.g. real=True is now
    automatically considered finite. It also means that infinities
    can not be considered positive or negative since they are not
    real (e.g. oo.is_positive is now False).
  + New assumptions extended_real, extended_positive etc are added
    that allow for positive and negative infinity. The equivalent
    of `Symbol('x', real=True)` in version 1.4 is now
    `Symbol('x', extended_real=True)`. The equivalent of
    `Symbol('x', negative=False)` is now
    `Symbol('x', extended_negative=False)` although it is usually
    better to use `Symbol('x', nonnegative=True)` (which implies
    both real=True and finite=True as well). Code that previously
    checked `if x.is_positive` should now be written as
    `if x.is_extended_positive` if it is intended that infinities
    should be allowed.
  + Numbers still compare the same as they do in Python
    (`Float(1) == 1`) except when they appear in an Expression,
    e.g. `x**2.0 != x**2`.

-------------------------------------------------------------------
Wed Apr 17 12:28:18 UTC 2019 - pgajdos@suse.com

- version update to 1.4
  + Logic expressions with relations can now be simplifed in a
    better way which has impact on e.g. simplification of
    piecewise expressions
  + The MathML Presentation printer has seen a major improvement
    with support configuration and about a hundred new functions.
  + Union and Intersection have been improved to, among other
    improvements, support Python sets.
  + The test procedure has been changed to include code coverage
    and code quality checks leading to a number of issues being
    identified and removed.
  + Unicode support, especially for Python 2.7, has been improved.
  + subs and Subs have been improved in a number of ways.
  + SymPy objects now renders as LaTeX automatically in Jupyter
    notebooks. init_printing is still required to LaTeX render
    non-SymPy objects such as lists of expressions or Python ints

-------------------------------------------------------------------
Mon Oct 29 16:07:24 UTC 2018 - Todd R <toddrme2178@gmail.com>

- Fix building on Leap

-------------------------------------------------------------------
Thu Sep 27 08:48:09 UTC 2018 - Matěj Cepl <mcepl@suse.com>

- Update python-sympy-rpmlintrc to reflect current reality.

-------------------------------------------------------------------
Sun Sep 16 16:00:54 UTC 2018 - Arun Persaud <arun@gmx.de>

- specfile:
  * package isympy file and __pycache__

- update to version 1.3:
 * see https://github.com/sympy/sympy/wiki/Release-Notes-for-1.3

-------------------------------------------------------------------
Wed Sep  5 03:52:12 UTC 2018 - arun@gmx.de

- specfile:
  * update copyright year
  * removed devel from noarch

- update to version 1.2:
  * Highlights
    + Python 3.3 is no longer supported. If you require Python 3.3
      support, use SymPy 1.1.1. See our policy on dropping support for
      major Python versions.
    + Experimental LaTeX parsing with
      sympy.parsing.latex.parse_latex() has been added, based on the
      latex2sympy project. This requires antlr-python-runtime to be
      installed. #13706
    + The vector module has been improved to support orthogonal
      curvilinear coordinate systems (Szymon Mieszczak's GSoC project)
    + New module sympy.integrals.intpoly for integrating uni/bivariate
      polynomials over 2-polytopes. (Arif Ahmed's GSoC project)
    + Improvements to the code generation module. (Björn Dahlgren's
      GSoC project)
    + Improvements to the group theory module. See below for more
      information. (Valeriia Gladkova's GSoC project)
    + New module sympy.discrete for operating on discrete
      sequences. (Sidhant Nagpal's GSoC project)
  * for full changelog see
    https://github.com/sympy/sympy/wiki/Release-Notes-for-1.2

-------------------------------------------------------------------
Mon Nov 20 20:02:07 UTC 2017 - toddrme2178@gmail.com

- Fix update-alternatives implementation.
- Fix recompilation for earlier python3 releases.

-------------------------------------------------------------------
Tue Nov 14 08:07:19 UTC 2017 - mlin@suse.com

- Do not build require python-qt4, it does not be required at build time.

-------------------------------------------------------------------
Sun Aug 13 15:27:25 UTC 2017 - toddrme2178@gmail.com


- Implement single-spec version
- update to version 1.1.1:
  * see the release notes for complete details:
    https://github.com/sympy/sympy/wiki/Release-Notes-for-1.1.1
- update to version 1.1:
  * see the release notes for complete details:
    https://github.com/sympy/sympy/wiki/Release-Notes-for-1.1
- update to version 1.0:
  * see the release notes for complete details:
    https://github.com/sympy/sympy/wiki/Release-Notes-for-1.0

-------------------------------------------------------------------
Tue May 19 20:46:59 UTC 2015 - benoit.monin@gmx.fr

- update to version 0.7.6:
  * see the release notes for complete details:
    https://github.com/sympy/sympy/wiki/Release-Notes-for-0.7.6
- remove unwanted shebang from more python library files
- add AUTHORS, LICENSE and README.rst to the package documentation
- add update-alternatives as post and postun requires
- fix update-alternatives

-------------------------------------------------------------------
Sat Nov 08 20:17:00 UTC 2014 - Led <ledest@gmail.com>

- fix bashisms in pre script

-------------------------------------------------------------------
Fri Mar  7 04:13:14 UTC 2014 - arun@gmx.de

-  update to version 0.7.5

  Major changes:
  * The version of mpmath included in SymPy has been updated to 0.18.
  * New routines for efficiently compute the dispersion of a polynomial or a pair thereof.
  * Fancy indexing of matrices is now provided, e.g. A[:, [1, 2, 5]] selects all rows and only 3 columns.

  * Enumeration of multiset partitions is now based on an
    implementation of Algorithm 7.1.2.5M from Knuth's The Art of
    Computer Programming. The new version is much faster, and includes
    fast methods for enumerating only those partitions with a
    restricted range of sizes, and counting multiset partitions. (See
    the new file sympy.utilities.enumerative.py.)
  * distance methods were added to Line and Ray to compute the shortest distance to them from a point.
  * The normal_lines method was added to Ellipse to compute the lines from a point that strike the Ellipse at a normal angle.
  * inv_quick and det_quick were added as functions in solvers.py to
    facilitate fast solution of small symbolic matrices; their use in
    solve has reduced greatly the time needed to solve such systems.
  * solve_univariate_inequality has been added to sympy.solvers.inequalities.py.
  * as_set attribute for Relationals and Booleans has been added.
  * Several classes and functions strictly associated with vector
    calculus were moved from sympy.physics.mechanics to a new package
    sympy.physics.vector. (PRs #2732 #2862 #2894)
  * New implementation of the Airy functions Ai and Bi and their
    derivatives Ai' and Bi' (called airyai, airybi, airyaiprime and
    airybiprime, respectively). Most of the usual features of SymPy
    special function are present. Notable exceptions are Gruntz limit
    computation helpers and meijerg special functions integration
    code.
  * Euler-Lagrange equations (function euler_equations) in a new package sympy.calculus (PR #2431).

  Minor changes:
  * Some improvements to the gamma function.
  * generate_bell now generates correct permutations for any number of elements.
  * It is no longer necessary to provide nargs to objects subclassed
    from Function unless an eval class method is not defined. (If eval
    is defined, the number of arguments will be inferred from its
    signature.)
  * geometric Point creation will be faster since simplification is done only on Floats
  * Some improvements to the intersection method of the Ellipse.
  * solutions from solve of equations involving multiple log terms are more robust
  * idiff can now return higher order derivatives
  * Added to_matrix() method to sympy.physics.vector.Vector and
    sympy.physics.dyadic.Dyadic. (PR #2686).
  * Printing improvements for sympy.physics.vector objects and
    mechanics printing. (PRs #2687, #2728, #2772, #2862, #2894)
  * Functions with LaTeX symbols now print correct LaTeX. (PR #2772)
  * init_printing has several new options, including a flag
    print_builtin to prevent SymPy printing of basic Python types (PR
    #2683), and flags to let you supply custom printers (PR #2894).
  * improvements in evaluation of imageset for Intervals (PR #2723).
  * Set properties to determine boundary and interior (PR #2744).
  * input to a function created by lambdify no longer needs to be flattened.

  Backwards compatibility breaks and deprecations:
  * the submatrix method of matrices was removed; access the
    functionality by providing slices or list of rows/columns to
    matrix directly, e.g. A[:, [1, 2]].
  * Matrix([]) and Matrix([[]]) now both return a 0x0 matrix
  * terms_gcd no longer removes a -1.0 from expressions
  * extract_multiplicatively will not remove a negative Number from a
    positive one, so (4*x*y).extract_multiplicatively(-2*x) will
    return None.
  * the shape of the result from M.cross(B) now has the same shape as matrix M.
  * The factorial of negative numbers is now zoo instead of 0. This is
    consistent with the definition factorial(n) = gamma(n + 1).
  * 1/0 returns zoo, not oo (PR #2813).
  * zoo.is_number is True (PR #2823).
  * oo < I raises TypeError, just as for finite numbers (PR #2734).
  * 1**oo == nan instead of 1, better documentation for Pow class (PR #2606).

-------------------------------------------------------------------
Sat Jan 11 01:34:28 UTC 2014 - arun@gmx.de

- update to 0.7.4.1
  * This was a small bugfix release to fix an import issue on Windows (https://github.com/sympy/sympy/issues/2681).

- update to 0.7.4 (see https://github.com/sympy/sympy/wiki/Release-Notes-for-0.7.4)

-------------------------------------------------------------------
Thu Sep 26 06:56:12 UTC 2013 - speilicke@suse.com

- Update to version 0.7.3:
  + See https://github.com/sympy/sympy/wiki/Release-Notes-for-0.7.3
- Use update-alternatives for binaries / man-pages

-------------------------------------------------------------------
Tue Jan 15 17:39:02 UTC 2013 - p.drouand@gmail.com

- Initial python3 support

-------------------------------------------------------------------
Tue Jan 15 17:30:55 UTC 2013 - p.drouand@gmail.com

- Update to 0.7.2 version:
  * pep8 correction: don't include space around * and **
  * radsimp watches for pure radical in denominator
  * pep8 E702: one statement per line 
  * add class name to hash value
  * give more explicit error messages
  * fix quality and ode constant numbering bug
  * mprovements to euler equation solver 
  * Sparse hash now includes shape 
  * add hash to SparseMatrix
  * raise notimplemented on MatrixExpr.conjugate
  * removed cruft print statement
- Fix the shebang RPMLint without make python libraries executables,
  it is not the good way

-------------------------------------------------------------------
Thu Jan  3 17:07:45 UTC 2013 - toddrme2178@gmail.com

- Fix building on SLES 11

-------------------------------------------------------------------
Thu May  3 14:58:12 UTC 2012 - cfarrell@suse.com

- license update: BSD-3-Clause
  Always state the exact version of the license and use SPDX syntax
  (http://www.spdx.org/licenses)

-------------------------------------------------------------------
Sat Feb 25 21:50:14 UTC 2012 - scorot@free.fr

- fix build for SLE-11 

-------------------------------------------------------------------
Sun Nov 20 17:59:44 UTC 2011 - werner.ho@gmx.de

- new version 0.7.1
-------------------------------------------------------------------
* Mon Mar 29 2010 Werner Hoch <werner.ho@gmx.de> - 0.6.7
- new version 0.6.7
-------------------------------------------------------------------
* Sun Dec 20 2009 Werner Hoch <werner.ho@gmx.de> - 0.6.5
- fixed site-packages location for openSUSE 11.2
-------------------------------------------------------------------
* Sun Oct 04 2009 Werner Hoch <werner.ho@gmx.de> - 0.6.5
- new version 0.6.5
-------------------------------------------------------------------
* Sun Apr 19 2009 Werner Hoch <werner.ho@gmx.de> - 0.6.4
- new version 0.6.4
-------------------------------------------------------------------
* Mon Nov 24 2008 Werner Hoch <werner.ho@gmx.de> - 0.6.3
- new version 0.6.3
-------------------------------------------------------------------
* Sat Sep 20 2008 Werner Hoch <werner.ho@gmx.de> - 0.6.2
- fixed wrong man-page in INSTALLED_FILES list

