From 313bf887c864f3687552500a7e7ea7f8cbddec01 Mon Sep 17 00:00:00 2001
From: Thomas Kluyver <thomas@kluyver.me.uk>
Date: Mon, 20 Nov 2017 17:29:46 +0000
Subject: [PATCH 1/2] Use jsonschema to validate messages

---
 .travis.yml                               |   2 +-
 flit.ini                                  |   5 +-
 jupyter_kernel_test/__init__.py           |   4 +-
 jupyter_kernel_test/messagespec.py        | 175 ------------
 jupyter_kernel_test/messagespec_common.py |  75 -----
 jupyter_kernel_test/msgspec_v5.py         | 331 ++++++++++++++++++++++
 6 files changed, 335 insertions(+), 257 deletions(-)
 delete mode 100644 jupyter_kernel_test/messagespec.py
 delete mode 100644 jupyter_kernel_test/messagespec_common.py
 create mode 100644 jupyter_kernel_test/msgspec_v5.py

diff --git a/.travis.yml b/.travis.yml
index 700cd0d..727d224 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -1,5 +1,5 @@
 language: python
 python:
   - "3.5"
-install: pip install ipykernel jupyter_client traitlets
+install: pip install ipykernel jupyter_client jsonschema
 script: python test_ipykernel.py
diff --git a/flit.ini b/flit.ini
index 5c96d24..fe1e2e9 100644
--- a/flit.ini
+++ b/flit.ini
@@ -9,6 +9,5 @@ classifiers = License :: OSI Approved :: BSD License
     Programming Language :: Python :: 3
     Topic :: Software Development :: Testing
 requires-python = >=3.4
-requires = traitlets
-           jupyter_client
-           nose
+requires = jupyter_client
+           jsonschema
diff --git a/jupyter_kernel_test/__init__.py b/jupyter_kernel_test/__init__.py
index f483fd0..8e98980 100644
--- a/jupyter_kernel_test/__init__.py
+++ b/jupyter_kernel_test/__init__.py
@@ -5,7 +5,7 @@
 from queue import Empty
 
 from jupyter_client.manager import start_new_kernel
-from .messagespec import validate_message, MimeBundle
+from .msgspec_v5 import validate_message
 
 TIMEOUT = 15
 
@@ -181,8 +181,6 @@ def test_pager(self):
         self.assertEqual(len(payloads), 1)
         self.assertEqual(payloads[0]['source'], 'page')
         mimebundle = payloads[0]['data']
-        # Validate the mimebundle
-        MimeBundle().data = mimebundle
         self.assertIn('text/plain', mimebundle)
 
     code_generate_error = ""
diff --git a/jupyter_kernel_test/messagespec.py b/jupyter_kernel_test/messagespec.py
deleted file mode 100644
index 4c221b0..0000000
--- a/jupyter_kernel_test/messagespec.py
+++ /dev/null
@@ -1,175 +0,0 @@
-"""The v5 message specification. This can be used in the tests to verify messages."""
-
-# Copyright (c) IPython Development Team.
-# Distributed under the terms of the Modified BSD License.
-
-import sys
-
-import nose.tools as nt
-from traitlets import (
-    Bool, Unicode, Dict, Integer, List, Enum,
-)
-
-from .messagespec_common import Reference, MimeBundle, Version
-
-# message and header formats specific to verion 5
-
-class RMessage(Reference):
-    msg_id = Unicode()
-    msg_type = Unicode()
-    header = Dict()
-    parent_header = Dict()
-    content = Dict()
-    
-    def check(self, d):
-        super(RMessage, self).check(d)
-        RHeader().check(self.header)
-        if self.parent_header:
-            RHeader().check(self.parent_header)
-
-class RHeader(Reference):
-    msg_id = Unicode()
-    msg_type = Unicode()
-    session = Unicode()
-    username = Unicode()
-    version = Version(min='5.0')
-
-# version shell replies
-
-class ExecuteReply(Reference):
-    execution_count = Integer()
-    status = Enum((u'ok', u'error'))
-    
-    def check(self, d):
-        Reference.check(self, d)
-        if d['status'] == 'ok':
-            ExecuteReplyOkay().check(d)
-        elif d['status'] == 'error':
-            ExecuteReplyError().check(d)
-
-
-class ExecuteReplyOkay(Reference):
-    payload = List(Dict)
-    user_expressions = Dict()
-
-
-class ExecuteReplyError(Reference):
-    ename = Unicode()
-    evalue = Unicode()
-    traceback = List(Unicode)
-
-
-class InspectReply(MimeBundle):
-    found = Bool()
-
-
-class ArgSpec(Reference):
-    args = List(Unicode)
-    varargs = Unicode()
-    varkw = Unicode()
-    defaults = List()
-
-
-class Status(Reference):
-    execution_state = Enum((u'busy', u'idle', u'starting'))
-
-
-class CompleteReply(Reference):
-    matches = List(Unicode)
-    cursor_start = Integer()
-    cursor_end = Integer()
-    status = Unicode()
-
-class LanguageInfo(Reference):
-    name = Unicode()
-    version = Unicode(sys.version.split()[0])
-
-class KernelInfoReply(Reference):
-    protocol_version = Version(min='5.0')
-    implementation = Unicode()
-    implementation_version = Version()
-    language_info = Dict()
-    banner = Unicode()
-    
-    def check(self, d):
-        Reference.check(self, d)
-        LanguageInfo().check(d['language_info'])
-
-
-class IsCompleteReply(Reference):
-    status = Enum((u'complete', u'incomplete', u'invalid', u'unknown'))
-    
-    def check(self, d):
-        Reference.check(self, d)
-        if d['status'] == 'incomplete':
-            IsCompleteReplyIncomplete().check(d)
-
-class IsCompleteReplyIncomplete(Reference):
-    indent = Unicode()
-
-
-# IOPub messages
-
-class ExecuteInput(Reference):
-    code = Unicode()
-    execution_count = Integer()
-
-
-Error = ExecuteReplyError
-
-
-class Stream(Reference):
-    name = Enum((u'stdout', u'stderr'))
-    text = Unicode()
-
-
-class DisplayData(MimeBundle):
-    pass
-
-
-class ExecuteResult(MimeBundle):
-    execution_count = Integer()
-
-class HistoryReply(Reference):
-    history = List(List())
-
-class ClearOutput(Reference):
-    wait = Bool()
-
-
-"""
-Specifications of `content` part of the reply messages.
-"""
-references = {
-    'execute_reply' : ExecuteReply(),
-    'inspect_reply' : InspectReply(),
-    'status' : Status(),
-    'complete_reply' : CompleteReply(),
-    'kernel_info_reply': KernelInfoReply(),
-    'is_complete_reply': IsCompleteReply(),
-    'execute_input' : ExecuteInput(),
-    'execute_result' : ExecuteResult(),
-    'history_reply' : HistoryReply(),
-    'error' : Error(),
-    'stream' : Stream(),
-    'display_data' : DisplayData(),
-    'header' : RHeader(),
-    'clear_output' : ClearOutput(),
-}
-
-#validation specific to this version of the message specification
-
-def validate_message(msg, msg_type=None, parent=None):
-    """validate a message
-    
-    If msg_type and/or parent are given, the msg_type and/or parent msg_id
-    are compared with the given values.
-    """
-    RMessage().check(msg)
-    if msg_type:
-        nt.assert_equal(msg['msg_type'], msg_type)
-    if parent:
-        nt.assert_equal(msg['parent_header']['msg_id'], parent)
-    content = msg['content']
-    ref = references[msg['msg_type']]
-    ref.check(content)
diff --git a/jupyter_kernel_test/messagespec_common.py b/jupyter_kernel_test/messagespec_common.py
deleted file mode 100644
index cd92389..0000000
--- a/jupyter_kernel_test/messagespec_common.py
+++ /dev/null
@@ -1,75 +0,0 @@
-"""
-The common code for checking message specification. 
-This can be used in the tests to verify messages.
-
-These will remain same between different versions of
-message specification.
-"""
-
-# Copyright (c) IPython Development Team.
-# Distributed under the terms of the Modified BSD License.
-
-import re
-from distutils.version import LooseVersion as V
-
-import nose.tools as nt
-
-from traitlets import (
-    HasTraits, TraitError, Unicode, Dict, observe
-)
-
-string_types = (str, type(u''))
-
-#-----------------------------------------------------------------------------
-# Message Spec References
-#-----------------------------------------------------------------------------
-
-class Reference(HasTraits):
-
-    """
-    Base class for message spec specification testing.
-
-    This class is the core of the message specification test.  The
-    idea is that child classes implement trait attributes for each
-    message keys, so that message keys can be tested against these
-    traits using :meth:`check` method.
-
-    """
-
-    def check(self, d):
-        """validate a dict against our traits"""
-        for key in self.trait_names():
-            nt.assert_in(key, d)
-            # FIXME: always allow None, probably not a good idea
-            if d[key] is None:
-                continue
-            try:
-                setattr(self, key, d[key])
-            except TraitError as e:
-                assert False, str(e)
-
-
-class Version(Unicode):
-    def __init__(self, *args, **kwargs):
-        self.min = kwargs.pop('min', None)
-        self.max = kwargs.pop('max', None)
-        kwargs['default_value'] = self.min
-        super(Version, self).__init__(*args, **kwargs)
-    
-    def validate(self, obj, value):
-        if self.min and V(value) < V(self.min):
-            raise TraitError("bad version: %s < %s" % (value, self.min))
-        if self.max and (V(value) > V(self.max)):
-            raise TraitError("bad version: %s > %s" % (value, self.max))
-
-mime_pat = re.compile(r'^[\w\-\+\.]+/[\w\-\+\.]+$')
-
-class MimeBundle(Reference):
-    metadata = Dict()
-    data = Dict()
-
-    @observe('data')
-    def _data_changed(self, change):
-        for k,v in change['new'].items():
-            assert mime_pat.match(k)
-            nt.assert_is_instance(v, string_types)
diff --git a/jupyter_kernel_test/msgspec_v5.py b/jupyter_kernel_test/msgspec_v5.py
new file mode 100644
index 0000000..e60e991
--- /dev/null
+++ b/jupyter_kernel_test/msgspec_v5.py
@@ -0,0 +1,331 @@
+from jsonschema import Draft4Validator, ValidationError
+import re
+
+protocol_version = (5, 1)
+
+# These fragments will be wrapped in the boilerplate for a valid JSON schema.
+# We also add a default 'required' containing all keys.
+schema_fragments = {}
+
+def get_msg_content_validator(msg_type, version_minor):
+    frag = schema_fragments[msg_type]
+    schema = {
+        "$schema": "http://json-schema.org/draft-04/schema#",
+        "description": "{} message contents schema".format(msg_type),
+        "type": "object",
+        "properties": {},
+        "additionalProperties": version_minor > protocol_version[1],
+    }
+    schema.update(frag)
+    if "required" not in schema:
+        # Require all keys by default
+        schema["required"] = sorted(schema["properties"].keys())
+
+    return Draft4Validator(schema)
+
+header_part = {"type": "object", "properties": {
+    "msg_id": {"type": "string"},
+    "username": {"type": "string"},
+    "session": {"type": "string"},
+    # TODO - this is parsed to a datetime before we get it:
+    "date": {}, #{"type": "string"},
+    "msg_type": {"type": "string"},
+    "version": {"type": "string"},
+}, "required": ["msg_id", "username", "session", "date", "msg_type", "version"]}
+
+msg_schema = {
+    "$schema": "http://json-schema.org/draft-04/schema#",
+    "description": "Jupyter message structure schema",
+    "type": "object",
+    "properties": {
+        "header": header_part,
+        "parent_header": header_part,
+        "metadata": {"type": "object"},
+        "content": {"type": "object"},  # Checked separately
+        "buffers": {"type": "array"}
+    },
+    "required": ["header", "parent_header", "metadata", "content"],
+}
+msg_structure_validator = Draft4Validator(msg_schema)
+
+def get_error_reply_validator(version_minor):
+    return Draft4Validator({
+        "$schema": "http://json-schema.org/draft-04/schema#",
+        "description": "Jupyter 'error' reply schema",
+        "type": "object",
+        "properties": {
+            "status": {"const": "error"},
+            "ename": {"type": "string"},
+            "evalue": {"type": "string"},
+            "traceback": {"type": "array", "items": {"type": "string"}},
+        },
+        "required": ["status", "ename", "evalue", "traceback"],
+        "additionalProperties": version_minor > protocol_version[1]
+    })
+
+def get_abort_reply_validator(version_minor):
+    return Draft4Validator({
+        "$schema": "http://json-schema.org/draft-04/schema#",
+        "description": "Jupyter 'abort' reply schema",
+        "type": "object",
+        "properties": {
+            "status": {"const": "error"},
+            "ename": {"type": "string"},
+            "evalue": {"type": "string"},
+            "traceback": {"type": "list", "items": {"type": "string"}},
+        },
+        "required": ["status", "ename", "evalue", "traceback"],
+        "additionalProperties": version_minor > protocol_version[1]
+    })
+
+reply_msgs_using_status = {
+    'execute_reply', 'inspect_reply', 'complete_reply', 'history_reply',
+    'connect_reply', 'comm_info_reply', 'kernel_info_reply', 'shutdown_reply',
+    'interrupt_reply',
+}
+
+def validate_message(msg, msg_type=None, parent_id=None):
+    msg_structure_validator.validate(msg)
+
+    msg_version_s = msg['header']['version']
+    m = re.match(r'(\d+)\.(\d+)', msg_version_s)
+    if not m:
+        raise ValidationError("Version {} not like 'x.y'")
+    version_minor = int(m.group(2))
+
+    if msg_type is not None:
+        if msg['header']['msg_type'] != msg_type:
+            raise ValidationError("Message type {!r} != {!r}".format(
+                msg['header']['msg_type'], msg_type
+            ))
+    else:
+        msg_type = msg['header']['msg_type']
+
+    # Check for unexpected fields, unless it's a newer protocol version
+    if version_minor <= protocol_version[1]:
+        unx_top = set(msg) - set(msg_schema['properties'])
+        if unx_top:
+            raise ValidationError("Unexpected keys: {}".format(unx_top))
+
+        unx_header = set(msg['header']) - set(header_part['properties'])
+        if unx_header:
+            raise ValidationError("Unexpected keys in header: {}".format(unx_header))
+
+    # Check the parent id
+    if parent_id and msg['parent_header']['msg_id'] != parent_id:
+        raise ValidationError("Parent header does not match expected")
+
+    if msg_type in reply_msgs_using_status:
+        # Most _reply messages have common 'error' and 'abort' structures
+        try:
+            status = msg['content']['status']
+        except KeyError as e:
+            raise ValidationError(str(e))
+        if status == 'error':
+            content_vdor = get_error_reply_validator(version_minor)
+        elif status == 'abort':
+            content_vdor = get_abort_reply_validator(version_minor)
+        elif status == 'ok':
+            content_vdor = get_msg_content_validator(msg_type, version_minor)
+        else:
+            raise ValidationError(
+                "status {!r} should be ok/error/abort".format(status))
+    else:
+        content_vdor = get_msg_content_validator(msg_type, version_minor)
+
+    content_vdor.validate(msg['content'])
+
+
+# Shell messages ----------------------------------------------
+
+schema_fragments['execute_request'] = {"properties": {
+    "code": {"type": "string"},
+    "silent": {"type": "boolean"},
+    "store_history": {"type": "boolean"},
+    "user_expressions": {"type": "object"},
+    "allow_stdin": {"type": "boolean"},
+    "stop_on_error": {"type": "boolean"}
+}}
+
+schema_fragments['execute_reply'] = {"properties": {
+    # statuses 'error' and 'abort' change the structure, so check separately
+    "status": {"const": "ok"},
+    "execution_count": {"type": "number"},
+    "payload": {"type": "array", "items": {
+        "type": "object",
+        "properties": {"source": {"type": "string"}},
+        "additionalProperties": True,
+    }},
+    "user_expressions": {"type": "object"},
+}}
+
+schema_fragments['inspect_request'] = {"properties": {
+    "code": {"type": "string"},
+    "cursor_pos": {"type": "number"},
+    "detail_level": {"enum": [0, 1]},
+}}
+
+schema_fragments['inspect_reply'] = {"properties": {
+    # statuses 'error' and 'abort' change the structure, so check separately
+    "status": {"const": "ok"},
+    "found": {"type": "boolean"},
+    "data": {"type": "object"},
+    "metadata": {"type": "object"},
+}}
+
+schema_fragments['complete_request'] = {"properties": {
+    "code": {"type": "string"},
+    "cursor_pos": {"type": "number"},
+}}
+
+schema_fragments['complete_reply'] = {"properties": {
+    # statuses 'error' and 'abort' change the structure, so check separately
+    "status": {"const": "ok"},
+    "matches": {"type": "array", "items": {"type": "string"}},
+    "cursor_start": {"type": "number"},
+    "cursor_end": {"type": "number"},
+    "metadata": {"type": "object"},
+}, "required": ["status", "matches", "cursor_start", "cursor_end"]}
+
+schema_fragments['history_request'] = {"properties": {
+    'output' : {"type": "boolean"},
+    'raw' : {"type": "boolean"},
+    'hist_access_type' : {"enum": ["range", "tail", "search"]},
+    'session' : {"type": "number"},
+    'start' : {"type": "number"},
+    'stop' : {"type": "number"},
+    'n' : {"type": "number"},
+    'pattern' : {"type": "string"},
+    'unique' : {"type": "boolean"},
+}, "required": ["output", "raw", "hist_access_type"]}
+
+schema_fragments['history_reply'] = {"properties": {
+    "status": {"const": "ok"},
+    "history": {"type": "array", "items": {
+        "minItems": 3, "maxItems": 3
+    }}
+}}
+
+schema_fragments['is_complete_request'] = {"properties": {
+    "code": {"type": "string"},
+}}
+
+schema_fragments['is_complete_reply'] = {"properties": {
+    "status": {"enum": ["complete", "incomplete", "invalid", "unknown"]},
+    "indent": {"type": "string"}
+}, "required": ["status"]}
+
+# NB connect_request is deprecated
+schema_fragments["connect_request"] = {"properties": {}}
+
+schema_fragments["connect_reply"] = {"properties": {
+    "shell_port": {"type": "number"},
+    "iopub_port": {"type": "number"},
+    "stdin_port": {"type": "number"},
+    "hb_port": {"type": "number"},
+    "control_port": {"type": "number"},
+}}
+
+schema_fragments["comm_info_request"] = {"properties": {
+    "target_name": {"type": "string"},
+}, "required": []}
+
+schema_fragments["comm_info_reply"] = {"properties": {
+    # statuses 'error' and 'abort' change the structure, so check separately
+    "status": {"const": "ok"},
+    "comms": {"type": "object"},
+}}
+
+schema_fragments["kernel_info_request"] = {"properties": {}}
+
+schema_fragments["kernel_info_reply"] = {"properties": {
+    # statuses 'error' and 'abort' change the structure, so check separately
+    "status": {"const": "ok"},
+    "protocol_version": {"type": "string"},
+    "implementation": {"type": "string"},
+    "implementation_version": {"type": ["string", "array"]},
+    "language_info": {"type": "object"},
+    "banner": {"type": "string"},
+    "help_links": {"type": "array", "items": {"type": "object", "properties": {
+        "text": {"type": "string"},
+        "url": {"type": "string"}
+    }}}
+}}
+
+schema_fragments['shutdown_request'] = {"properties": {
+    "restart": {"type": "boolean"},
+}}
+
+schema_fragments['shutdown_reply'] = {"properties": {
+    # statuses 'error' and 'abort' change the structure, so check separately
+    "status": {"const": "ok"},
+    "restart": {"type": "boolean"},
+}}
+
+schema_fragments["interrupt_request"] = {"properties": {}}
+schema_fragments["interrupt_reply"] = {"properties": {
+    # statuses 'error' and 'abort' change the structure, so check separately
+    "status": {"const": "ok"},
+}}
+
+# IOPub messages ----------------------------------------------
+
+mime_data = {
+    "type":"object",
+    "patternProperties": {r'^[\w\-\+\.]+/[\w\-\+\.]+$': {}},
+    "additionalProperties": False,
+}
+
+schema_fragments['stream'] = {"properties": {
+    "name": {"enum": ["stdout", "stderr"]},
+    "text": {"type": "string"},
+}}
+
+schema_fragments['display_data'] = {"properties": {
+    "data": mime_data,
+    "metadata": {"type": "object"},
+    "transient": {"type": "object"},
+}, "required": ["data", "metadata"]}
+
+schema_fragments['update_display_data'] = {"properties": {
+    "data": mime_data,
+    "metadata": {"type": "object"},
+    "transient": {"type": "object"},
+}}
+
+schema_fragments['execute_result'] = {"properties": {
+    "execution_count": {"type": "number"},
+    "data": mime_data,
+    "metadata": {"type": "object"},
+    "transient": {"type": "object"},
+}, "required": ["execution_count", "data", "metadata"]}
+
+schema_fragments['clear_output'] = {"properties": {
+    "wait": {"type": "boolean"},
+}}
+
+schema_fragments['execute_input'] = {"properties": {
+    "code": {"type": "string"},
+    "execution_count": {"type": "number"},
+}}
+
+schema_fragments['error'] = {"properties": {
+    "ename": {"type": "string"},
+    "evalue": {"type": "string"},
+    "traceback": {"type": "array", "items": {"type": "string"}},
+}}
+
+schema_fragments['status'] = {"properties": {
+    "execution_state": {"enum": ["busy", "idle", "starting"]},
+}}
+
+# Stdin messages ---------------------------------------------
+
+schema_fragments["input_request"] = {"properties": {
+    "prompt": {"type": "string"},
+    "password": {"type": "number"},
+}}
+
+schema_fragments["input_reply"] = {"properties": {
+    "value": {"type": "string"},
+}}

From 76684c6780edd56e66e94c833b2d5e808da354c9 Mon Sep 17 00:00:00 2001
From: Thomas Kluyver <thomas@kluyver.me.uk>
Date: Mon, 20 Nov 2017 17:31:23 +0000
Subject: [PATCH 2/2] Add copyright notices on files

---
 jupyter_kernel_test/__init__.py   | 2 ++
 jupyter_kernel_test/msgspec_v5.py | 5 +++++
 2 files changed, 7 insertions(+)

diff --git a/jupyter_kernel_test/__init__.py b/jupyter_kernel_test/__init__.py
index 8e98980..d1638d9 100644
--- a/jupyter_kernel_test/__init__.py
+++ b/jupyter_kernel_test/__init__.py
@@ -1,5 +1,7 @@
 """Machinery for testing Jupyter kernels via the messaging protocol.
 """
+# Copyright (c) Jupyter Development Team.
+# Distributed under the terms of the Modified BSD License.
 
 from unittest import TestCase, SkipTest
 from queue import Empty
diff --git a/jupyter_kernel_test/msgspec_v5.py b/jupyter_kernel_test/msgspec_v5.py
index e60e991..e36f0f8 100644
--- a/jupyter_kernel_test/msgspec_v5.py
+++ b/jupyter_kernel_test/msgspec_v5.py
@@ -1,3 +1,8 @@
+"""Message schemas for message spec version 5"""
+
+# Copyright (c) Jupyter Development Team.
+# Distributed under the terms of the Modified BSD License.
+
 from jsonschema import Draft4Validator, ValidationError
 import re
 
