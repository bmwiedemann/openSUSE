-------------------------------------------------------------------
Tue Jul 13 03:07:40 UTC 2021 - Tina MÃ¼ller <timueller+perl@suse.de>

- updated to 1.999823
   see /usr/share/doc/packages/perl-Math-BigInt/CHANGES

  1.999823 2021-07-12
   * Improve the handling of the backend libraries. Provide more useful warnings
     and error messages. Update the documentation.
  1.999822 2021-07-09
    * Make the from_hex(), from_oct(), and from_bin() methods consistent with
    CORE::oct(), which does not require a leading "0" before the letter ("x",
     "o", or "b").
   * Make the from_oct() and new() methods accept octal numbers with prefix
     "0o", "0O", "o" (lowercase letter o), and "O" (capital letter O).
   * Make the from_bin() and new() methods accept binary numbers with
     prefix "0b", "0B", "b", and "B".
   * Make the from_hex() and new() methods accept hexadecimal numbers with
     prefix "0x", "0X", "x", and "X".
   * Update test files to match with the above.
  1.999821 2021-07-06
   * Make new() and from_hex() accept the "0X" prefix, not just the "0x" prefix,
     but not accept just "X" or "x". Now, "0XFF" returns 255, not NaN.
   * Make new() and from_bin() accept the "0B" prefix, not just the "0b" prefix, but
     not accept just "B" or "b". Now, "0B1111" returns 255, not NaN.
   * Make new() and from_oct() accept the "0o" and "0O" prefixes, but not accept
     just "O" (capital letter O) or "o" (lowercase letter o). Now, "0o377" and
     "0O377" return 255, not NaN. Also intepret floating point numbers with a
     leading zero and a binary exponent as an octal number, so that "01.4p0"
     returns 1.5, not NaN. There is still no ambiguety, since decimal floating
     point numbers use "e" or "E" before the exponent, and binary and hexadecimal
     floating point numbers use a "0b"/"0B" or "0x"/"0x" prefix, respectively.
  1.999820 2021-07-06
   * Fix bug and improve error messages in Math::BigInt::import().
  1.999819 2021-07-02
   * Add method btfac() (triple factorial) and bmfac() (multi-factorial),
     including tests and documentation.
   * Add missing and correct erroneous documentation for bfac() (factorial)
     and bdfac() (double factorial). Also correct handling of special cases
     and add tests for these cases.
   * Fix error in bsin() and bcos() causing them to hang indefinitely if the
     invocand is +/-inf.
   * Make it possible for the end user to specify the base length used internally
     in Math::BigInt::Calc.

-------------------------------------------------------------------
Tue Oct 22 17:06:52 UTC 2019 -  <timueller+perl@suse.de>

- updated to 1.999818
   see /usr/share/doc/packages/perl-Math-BigInt/CHANGES

  1.999818 2019-10-20
  
   * Fix CPAN RT #130736 regarding numify() on a Math::BigFloat with a large
     number of digits and an equally large, but negative, exponent.
  
   * Fix a problem in to_ieee754() due to rounding in bpow().

-------------------------------------------------------------------
Sat Oct 12 13:43:38 UTC 2019 -  <timueller+perl@suse.de>

- updated to 1.999817
   see /usr/share/doc/packages/perl-Math-BigInt/CHANGES

  1.999817 2019-10-11
  
   * Avoid non-integers in intermediate computations in Math::BigInt::Calc. This
     causes errors due to rounding issues, e.g., 47265625999999999 / 1000000000
     is 47265626 with double precision.
  
   * Remove api_version() and the corresponding test file. There is no need to
     check which methods are supported by a backend library now that each backend
     library is a subclass of Math::BigInt::Lib. Methods not provided in the
     backend library are provided by the parent class.
  
   * Add to_ieee745() and from_ieee754().
  
   * Add backermann() and ackermann() for the Ackermann function.
  
   * Add buparrow() and uparrow() for Knuth's up-arrow notation.
  
   * Add information about the github repository.
  
   * Update links in SUPPORT section in POD.
  
   * Fix bpow(). It returned NaN when it should truncate to zero.
  
   * Make blsft() in Math::BigInt allow bases up until the largest unsigned
     integer.
  
   * Make _lsft() in Math::BigInt::Calc handle an arbitrarily large base.
  
   * Add new methods bdigitsum() and digitsum() to Math::BigInt. Add new method
     _digitsum() to Math::BigInt::Lib.
  
   * Add new methods is_non_negative() and is_non_positive().
  
   * Extend the default collation sequence used by to_base() and from_base() to
     all the 94 printable ASCII characters except blank/space.
  
   * Make new() in Math::BigFloat handle octal floating point numbers.
  
   * Slightly more robust t/01load.t.
  
   * Remove unused variables.
  
   * Miscellaneous code cleanup.

-------------------------------------------------------------------
Thu Nov  8 06:33:06 UTC 2018 - Stephan Kulow <coolo@suse.com>

- updated to 1.999816
   see /usr/share/doc/packages/perl-Math-BigInt/CHANGES

  1.999816 2018-10-26
  
   * bnok() for Math::BigInt and Math::BigFloat now support the full Kronenburg
     extension. The behaviour is identical to the behaviour of the Maple and
     Mathematica function for negative integers n, k. Add tests. This closes CPAN
     RT #95628.
  
   * Fix POD errors. This closes CPAN RT #125141.
  
  1.999815 2018-10-19
  
   * Move bitwise operators signed and, signed or, and signed xor from
     lib/Math/BigInt/CalcEmu.pm into lib/Math/BigInt/Lib.pm. The file
     lib/Math/BigInt/CalcEmu.pm is no longer needed and thus removed.
  
  1.999814 2018-10-01
  
   * Add to_base() and from_base() to Math::BigInt and corresponding library
     methods _to_base() and _from_base() to Math::BigInt::Lib. This was inspired
     by CPAN RT #122681.
  
   * Fix Makefile.PL to reflect that Test::More is only needed for testing, not
     for building.
  
   * In the documentation for each of the to_(bin|hex|oct|bytes) methods, add a
     reference to the corresponding from_(bin|hex|oct|bytes) method.

-------------------------------------------------------------------
Sat Apr 21 05:31:55 UTC 2018 - coolo@suse.com

- updated to 1.999813
   see /usr/share/doc/packages/perl-Math-BigInt/CHANGES

  1.999813 2018-04-18
  
   * Fix CPAN RT #125108. Remove test files try.pl, t/author-bpi-big-mbf.t, and
     t/release-unused-vars.t, which were included in the 1.999812 distribution by
     accident.

-------------------------------------------------------------------
Wed Apr 18 05:32:46 UTC 2018 - coolo@suse.com

- updated to 1.999812
   see /usr/share/doc/packages/perl-Math-BigInt/CHANGES

-------------------------------------------------------------------
Fri Mar 17 06:58:23 UTC 2017 - coolo@suse.com

- updated to 1.999811
   see /usr/share/doc/packages/perl-Math-BigInt/CHANGES

  2017-03-15 v1.999811 pjacklam
  
   * Fix an old in the Math::BigFloat methods as_hex(), as_oct(), and as_bin()
     methods resulting in loss of accuracy. This bug was introduced in bug in
     Math-BigInt-1.76. Due to a naive copy and paste by me, and lack of tests,
     this bug was also present in the newer to_hex(), to_oct(), and to_bin()
     methods. This shows the bug, as it did not print "0xffff...":
  
         print Math::BigFloat -> from_hex("f" x 30) -> as_hex();
  
   * Fix incorrect formatting in the output from the Math::BigFloat methods
     to_hex(), to_oct(), and to_bin() when the output was zero. A prefix was
     added when it shouldn't have been.
  
   * Add tests to bigintpm.inc and bigfltpm.inc for better testing of as_hex(),
     as_oct(), and as_bin() as well as to_hex(), to_oct(), and to_bin().
  
   * "Synchronize" tests and code formatting in bigintpm.inc and bigfltpm.inc.

-------------------------------------------------------------------
Fri Mar  3 06:57:10 UTC 2017 - coolo@suse.com

- updated to 1.999810
   see /usr/share/doc/packages/perl-Math-BigInt/CHANGES

  2017-03-01 v1.999810 pjacklam
  
   * CPAN RT #120240 revealed that the problems with undefined values is still
     present. After a close examination, I believe the only way to get this
     really working is to to make blog() call objectify() differently depending
     on whether the base for the logarithm is undefined or not. That way we can
     avoid objectify() converting the undefined value to a zero. Ideally, we
     should warn about undefined values when used in any other context, but we'll
     handle that in a later release. See also the related changelog entry for
     v1.999801.
  
   * Fix the way the argument count is computed in objectify(). When an argument
     count of 0 is given, it means that we should objectify all input arguments.
     However, it turned out that the actual argument count was computed
     incorrectly.
  
   * Fix CPAN RT #120242 rearding c3 method resolution.

-------------------------------------------------------------------
Sat Feb 11 06:04:38 UTC 2017 - coolo@suse.com

- updated to 1.999809
   see /usr/share/doc/packages/perl-Math-BigInt/CHANGES

  2017-02-10 v1.999809 pjacklam
  
   * When a new method is added to Math::BigInt or Math::BigFloat, and this new
     method requires a new backend library method, die with a suitable error
     message if the installed backend library does not support this new method.
     The error message says that the method requires a newer version of the
     backend library.
  
   * Fix typos in Math::BigFloat and Math::BigInt.
  
   * Add bfib() and blucas() to Math::BigInt. They return Fibonacci and Lucas
     numbers, respectively. The actual computation of the numbers is done by the
     backend library. Documented both methods in POD. Add test files bfib-mbi.t
     and blucas-mbi.t.
  
   * Add _fib() and _lucas() to Math::BigInt::Lib. They return Fibonacci and
     Lucas numbers, respectively. Document both methods in POD. Add test files
     author-lib-arithmetic-unary-_fib.t and author-lib-arithmetic-unary-_lucas.t.

-------------------------------------------------------------------
Thu Jan 12 06:02:47 UTC 2017 - coolo@suse.com

- updated to 1.999808
   see /usr/share/doc/packages/perl-Math-BigInt/CHANGES

  2017-01-11 v1.999808 pjacklam
  
   * In Math::BigInt and Math::BigFloat, add methods bdfac() for double
     factorial. Add tests for this method.
  
   * In Math::BigInt and Math::BigFloat, add methods to_hex(), to_oct(), and
     to_bin() for hexadecimal, octal, and binary string output without prefix.
     Even for Math::BigFloat there is still only support for integer output. Add
     tests for these methods.
  
   * Add test for as_oct() corresponding to the old tests for as_hex() and
     as_bin().
  
   * In Math::BigInt::Lib, add method _dfac() for double factorial. Add
     corresponding tests.
  
   * In Math::BigInt::Lib, fix bug in overloaded "int".
  
   * In Math::BigInt::Lib, implement much faster versions of _from_hex(),
     _from_oct(), and _from_bin().
  
   * In Makefile.PL, improve the wording in the message displayed if some of
     the installed backend libraries are not a subclass of Math::BigInt::Lib (and
     hence will not provide
  
   * Fix minor bugs in some of the author library test files (t/author-lib*.t).
  
   * Allow leading and trailing whitespace in the input to from_hex(),
     from_oct(), and from_bin().  Add tests to verify. This is a regressions
     (CPAN RT #119805).

-------------------------------------------------------------------
Sat Dec 24 06:39:31 UTC 2016 - coolo@suse.com

- updated to 1.999807
   see /usr/share/doc/packages/perl-Math-BigInt/CHANGES

  2016-12-23 v1.999807 pjacklam
  
   * Add a message to Makefile.PL recommending upgrade if old libraries are
     installed. This message is more or less equivalent to the one appearing in
     Math-BigInt up until v1.997.
  
   * Improve the documentation (POD) in Math::BigInt::Lib.
  
   * Speed up _sqrt() and _root() in Math::BigInt::Lib.
  
   * Remove checking for exception cases (cases that would return +Inf, -Inf, or
     NaN) in Math::BigInt::Lib. It has been documented for a long time that such
     checking should be done by the caller.
  
   * Add library methods _to_bin(), _to_oct(), _to_hex(), which are equivalent to
     the _as_bin(), _as_oct(), and _as_hex() methods respectively, except that
     the _to_*() methods don't use a prefix in the output. This removes the need
     for the frequent removal of the various prefixes. Now each _as_*() method
     calls the equivalent _to_*() method, adds a prefix, and returns the output.
     The _to_*() methods are faster than the equivalent _as_*() methods were.
  
   * Add author test files for the methods _to_bin(), _to_oct(), and _to_hex().
  
   * Add library method _to_bytes(). The method _as_bytes() would have been
     called _to_bytes() if I had thought of it earlier. The method _as_bytes() is
     now just an alias to _to_bytes(). The _to_bytes() method also fixes a bug
     that was present in the _as_bytes() method. (CPAN RT #119346).
  
   * Add author test files for the method _to_bytes().
  
   * Add more tests for library methods _inc() and _dec(). When trying to bring
     the Math::BigInt::BitVect library back to life I realized that the test
     suite didn't catch certain errors in _inc() and _dec().
  
   * Die if trying to use as_bytes() or from_bytes() with a backend library that
     doesn't support the corresponding library methods.
  
   * Correct minor errors in the output messages in the test files.
  
   * Improve/correct various comments in the source code.
  
   * More diagnostic output is displayed by the author test files if the
     AUTHOR_DEBUGGING environment variable is set.

-------------------------------------------------------------------
Wed Dec 14 06:46:38 UTC 2016 - coolo@suse.com

- updated to 1.999806
   see /usr/share/doc/packages/perl-Math-BigInt/CHANGES

  2016-12-13 v1.999806 pjacklam
  
   * Add more logic to Makefile.PL regarding INSTALLDIRS (CPAN RT #119199
     and #119225).
  
   * In the TODO file, remove stuff that has been implemented.

-------------------------------------------------------------------
Mon Dec 12 06:52:17 UTC 2016 - coolo@suse.com

- updated to 1.999805
   see /usr/share/doc/packages/perl-Math-BigInt/CHANGES

  2016-12-11 v1.999805 pjacklam
  
   * Fix Makefile.PL so that this module installs over the core version.
  
   * Add more tests for _nok() (binomial coefficient "n over k"). These new tests
     revealed some problems with some of the backend libraries when _nok() was
     given very large arguments.
  
   * Remove t/Math/BigFloat/#Subclass.pm#, which is an Emacs temporary file
     included by accident.

-------------------------------------------------------------------
Fri Dec  9 06:49:13 UTC 2016 - coolo@suse.com

- updated to 1.999804
   see /usr/share/doc/packages/perl-Math-BigInt/CHANGES

  2016-12-07 v1.999804 pjacklam
  
   * Implement as_bytes(), as requested (CPAN RT 119096). Also implement the
     inverse conversion from_bytes(). This applies to Math::BigInt only. (Alas,
     these methods will be inherited from Math::BigInt into Math::BigFloat,
     Math::BigRat etc. where the methods won't work. Fixing this class
     relationship is an issue of its own.)
  
   * Implement _as_bytes() and _from_bytes() in Math::BigInt::Lib. Preferably,
     the various backend libraries will implement faster versions of their
     own. Add author test files for testing these methods thorougly.
  
   * Fix from_hex(), from_oct(), and from_bin().
     - When called as instance methods, the new value should be assigned to the
       invocand unless the invocand is read-only (a constant).
     - When called as instance methods, the assigned value was incorrect, if the
       invocand was inf or NaN.
     - Add tests to t/from_hex-mbf.t, t/from_oct-mbf.t, and t/from_bin-mbf.t
       to confirm the fix.
     - Add new test files t/from_hex-mbi.t, t/from_oct-mbi.t, and
       t/from_bin-mbi.t for better testing of these methods with Math::BigInt.
  
   * Correct typo in Math/BigInt/Lib.pm (otherise -> otherwise) (CPAN RT 118829).
  
   * Add POD coverage testing of Math::BigInt::Lib to t/03podcov.t.

-------------------------------------------------------------------
Mon Dec  5 06:58:14 UTC 2016 - coolo@suse.com

- updated to 1.999803
   see /usr/share/doc/packages/perl-Math-BigInt/CHANGES

-------------------------------------------------------------------
Tue Nov 29 06:46:19 UTC 2016 - coolo@suse.com

- updated to 1.999802
   see /usr/share/doc/packages/perl-Math-BigInt/CHANGES

  2016-11-28 v1.999802 pjacklam
  
   * When bzero(), bone(), binf(), and bnan() are used as constructors, don't
     check whether the class allows the object to be modified. This applies to
     both Math::BigInt and Math::BigFloat.
  
   * Improve bgcd() and blcm(). This applies to both Math::BigInt and
     Math::BigFloat.

-------------------------------------------------------------------
Fri Nov 25 06:45:26 UTC 2016 - coolo@suse.com

- updated to 1.999801
   see /usr/share/doc/packages/perl-Math-BigInt/CHANGES

-------------------------------------------------------------------
Thu Nov 17 06:43:33 UTC 2016 - coolo@suse.com

- updated to 1.999800
   see /usr/share/doc/packages/perl-Math-BigInt/CHANGES

  2016-11-15 v1.999800 pjacklam
  
   * Upgrade bundled Module::Install from version 1.16 to version 1.17.
  
   * Add Math::BigInt::Lib (lib/Math/BigInt/Lib.pm), a parent class for
     Math::BigInt backend libraries.
  
   * Use objects in Math::BigInt::Calc, not just array refs. Also use OO-style,
     i.e., use $class->_add($x, $y) rather than _add($class, $x, $y).
  
   * Not all library methods modify the invocand, so call library methods as,
     e.g, $x = $LIB->method($x, $y) rather than just $LIB->method($x, $y).
  
   * Math::BigInt::Calc is now a subclass of Math::BigInt::Lib.
  
   * Add Math::BigInt::Lib::Minimal (t/Math/BigInt/Lib/Minimal.pm) for testing
     inheritance from Math::BigInt::Lib.
  
   * Minor simplification in Math::BigInt::Calc->_str().
  
   * Speed up Math::BigInt::Calc->_root().
  
   * Remove test files that were included in the previous release by accident.
  
   * Add more tests and use more verbose output in some tests.
  
   * Fix typo in lib/Math/BigFloat.pm 
  
   * Fix documentation error in lib/Math/Calc.pm
  
   * Use Config::Tiny and an .ini file to handle the library specific
     configuration for the author-lib*.t test files.

-------------------------------------------------------------------
Sat Nov  5 06:49:46 UTC 2016 - coolo@suse.com

- updated to 1.999727
   see /usr/share/doc/packages/perl-Math-BigInt/CHANGES

  2016-11-04 v1.999727 pjacklam
  
   * Skip test exceeding the range of VAX floating point number in t/bigintpm.inc
     (CPAN RT 118468).
  
   * Fix typo in lib/Math/BigInt.pm (CPAN RT 118550).

-------------------------------------------------------------------
Sat Jul 16 05:30:12 UTC 2016 - coolo@suse.com

- updated to 1.999726
   see /usr/share/doc/packages/perl-Math-BigInt/CHANGES

  2016-07-15 v1.999726 pjacklam
  
   * Re-insert Math::BigFloat->DESTROY, which was accidentally removed in
     v1.999725.

-------------------------------------------------------------------
Thu Jul 14 05:33:02 UTC 2016 - coolo@suse.com

- updated to 1.999725
   see /usr/share/doc/packages/perl-Math-BigInt/CHANGES

  2016-07-13 v1.999725 pjacklam
  
  Changes:
  
   * Add method is_finite().
  
   * In Math::BigInt and Math::BigFloat, remove warnings about deprecated usage,
     at least until we have removed this usage from the "bignum" distribution.
     These warnings were too annoying for some people.
  
  Improvements:
  
   * Faster bnok() when the library (backend) does not support it.
  
   * In the Math::BigFloat method bpi(), use a precomputed list of digits when
     the accuracy is <= 1000. This speeds up the trigonometric functions
     considerably, when I will introduce range reduction in a later release. This
     makes the _atan_inv() method redundant, so remove it. Also, the _alen()
     library method is now only used in _log_int(), which is good, because it
     isn't clear from the docs and tests what it was supposed to do.
  
  Fixes:
  
   * Fix bug in the Math::BigInt::Calc library method _digit(). It would
     sometimes return undef or an empty string when it should have returned zero.
  
   * Fix bug in the Math::BigInt::Calc library method _rsft(). It would sometimes
     return two output arguments.
  
   * Fix bug in the Math::BigInt::Calc library method _lsft(). When the number
     zero was shifted N places in base 10, the result was not zero, but an
     invalid object.
  
   * Fix bug in the Math::BigInt::Calc library methods _and(), _or(), and _xor().
     They always assigned zero to the first input argument (the invocand).
  
   * Improve the Math::BigInt::Calc library method _log_int() for the cases when
     the output is zero or one. Also simplify the code.
  
   * Simplify the code for the Math::BigInt::Calc library method _zeros().
  
   * Reformat Math::BigInt::Calc so it is easier to read, for me anyway.
  
   * Add file t/author-bnok-mbi.t
  
   * Add one test file for every method in the libraries, including
     t/Math/BigInt/Lib/TestUtil.pm with test utilities.
  
   * Clean up whitespace in all files in the distribution.
  
   * Better testing in t/author-bpi-mbf.t
  
   * The Math::BigInt::Calc library now always uses integers inside the objects,
     so there is no longer any need for all the "0 + ..." to convert strings to
     numbers, and the "int()" inside "length(int(...))" to determine the length
     of an array element. The only case that needs "0 + ..." now is the
     constructor _new(), whose input is a string.
  
     Note, however, that the Math::BigInt::FastCalc library method _new() still
     creates objects with leading zeros, so until that is fixed, we can't remove
     all the "0 + ..." etc. until Math::BigInt::FastCalc has been modified.

-------------------------------------------------------------------
Thu Jun 23 06:36:46 UTC 2016 - coolo@suse.com

- updated to 1.999724
   see /usr/share/doc/packages/perl-Math-BigInt/CHANGES

-------------------------------------------------------------------
Sun Jun 12 13:17:55 UTC 2016 - coolo@suse.com

- updated to 1.999723
   see /usr/share/doc/packages/perl-Math-BigInt/CHANGES

  2016-06-09 v1.999723 pjacklam
  
   * Add Math::BigInt and Math::BigFloat methods bnstr(), bestr(), and bdstr(),
     as well as corresponding methods nparts(), eparts(), and dparts(). Also add
     test files bdstr-mbf.t, bdstr-mbi.t, bestr-mbf.t, bestr-mbi.t, bnstr-mbf.t,
     bnstr-mbi.t, bsstr-mbf.t, bsstr-mbi.t, dparts-mbf.t, dparts-mbi.t,
     eparts-mbf.t, eparts-mbi.t, nparts-mbf.t, nparts-mbi.t, sparts-mbf.t, and
     sparts-mbi.t.
  
   * Fix documentation errors.

-------------------------------------------------------------------
Thu May  5 09:34:38 UTC 2016 - coolo@suse.com

- updated to 1.999722
   see /usr/share/doc/packages/perl-Math-BigInt/CHANGES

  2016-04-16 v1.999717 pjacklam
  
   * Using new() with an undefined argument no longer gives a warning. Explicit
     use of this is discouraged, but it is sometimes used by the modules
     themselves issuing warnings that is confusing to the end user. Just
     uncomment the code, since we plan to reintroduce this warning later.
  
   * Avoid using L<> around e-mail addressess in POD.
  
  2016-04-22 v1.999718 pjacklam
  
   * Improve documentation on large, unquoted input values to Math::BigInt.
  
   * Remove stuff from bitfltpm.inc that was placed into author-numify-mbf.t, but
     accidentally still present in bitfltpm.inc. Adjusted test counts as needed.
  
   * Fix file headers in author-bmod-bdiv-mbi.t and author-btmod-btdiv-mbi.t.
  
   * Add bnan(), binf(), and bsub() methods to Math::BigFloat. This is a step
     along the way to having Math::BigFloat no longer being a subclass of
     Math::BigInt.
  
   * Using bnan, binf(), bzero() and bone() as functions is deprecated. This is a
     step along the way to a pure object oriented design.
  
   * When bnan() and binf() are used as instance methods, they no longer delete
     the accuracy and precision instance variables. 
  
   * Add test files from_bin-mbf.t, from_oct-mbf.t, and new-mbf.t.
  
   * Remove some code for Perl prior to 5.6. Such old versions are no longer
     support anyway.
  
   * Fix buggy handling of NaN in bcmp().
  
   * Add methods beq(), bne(), blt(), ble(), bgt(), and bge() to Math::BigInt and
     Math::BigFloat. These methods are called for the overloaded operators.
  
   * Add overloading of '==', '!=', '<', '<=', '>', to to Math::BigInt and
     Math::BigFloat and fix the broken overloading of '>='. These overloaded
     operators now behave like the equivalent core Perl operators.
  
   * Add test file author-relop-mbi-mbf.t for testing bcmp(), beq(), bne(),
     blt(), ble(), bgt(), and bge(), as well as the overloaded operators '==',
     '!=', '<', '<=', '>', and '>='.
  
   * 'int' now truncates a Math::BigFloat object to an integer without converting
     it to a Math::BigInt. When an object becomes a Math::BigInt, further
     computations with that object as invocand causes the arguments to be
     converted to Math::BigInt objects too, leading to unexpected results. This
     is confusing people. Unless downgrading is in effect, no Math::BigFloat
     object should become a Math::BigInt unless a Math::BigInt is explicitly
     requested.
  
   * For Math::BigFloat, modify bitwise operations brsft() and brsft(), and add
     band(), bior(), bxor(), and bnot(). These now handle floating point numbers
     the same way as core Perl does, i.e., truncate non-integers to integers
     before applying the bitwise operator. This change will also make Perl's
     behaviour more consistent whether 'use bignum' is in effect or not.
  
   * Add overloading of '~' (bitwise not). It just calls bnot(), which has been
     implemented for ages.
  
   * Fix error in POD for bone().
  
   * Take parts of the code in t/calling.t and move it into the new files
     t/calling-class-methods.t and t/calling-instance-methods.t.
  
   * Improve test descriptions in t/mbimbf.inc.
  
  2016-04-25 v1.999719 pjacklam
  
   * Revert the change to Math::BigFloat's blsft() and brsft() methods, which
     truncated the input (and output) to integers. However, now convert the base
     to an object only when the base isn't an object already. Also return NaN if
     any of the three operands is a NaN.
  
   * Change t/bigfltpm.inc to reflect the changes to blsft() and brsft(). Also,
     when a method should be tested, actually test that method, not the
     overloaded operator, which doesn't necessarily behave in the exact same
     manner as the method. This applies to the methods binc(), bdec(), bpow(),
     badd(), bsub(), bmul(), bdiv() in scalar context, brsft(), blsft(), and
     bmod().
  
   * The first output argument from objectify() is the class name, so use the
     variable name $class, not $self.
  
  2016-04-26 v1.999720 pjacklam
  
   * Overloaded 'int' should not modify it's argument.
  
   * Better documentation of blsft() and brsft().
  
  2016-04-26 v1.999721 pjacklam
  
   * Prevent Math::BigFloat methods band(), bior(), bxor(), and bnot() from
     modifying unmodifiable objects.
  
  2016-04-26 v1.999722 pjacklam
  
   * Fix bug in bone() and binf() when used as a function. The error caused
     warnings about using an unitialized variable. This fix applies to both
     Math::BigInt and Math::BigFloat.

-------------------------------------------------------------------
Thu Apr  7 09:36:45 UTC 2016 - coolo@suse.com

- updated to 1.999716
   see /usr/share/doc/packages/perl-Math-BigInt/CHANGES

-------------------------------------------------------------------
Wed Jan  6 10:11:59 UTC 2016 - coolo@suse.com

- updated to 1.999715
   see /usr/share/doc/packages/perl-Math-BigInt/CHANGES

-------------------------------------------------------------------
Mon Jan  4 09:49:46 UTC 2016 - coolo@suse.com

- updated to 1.999714
   see /usr/share/doc/packages/perl-Math-BigInt/CHANGES

-------------------------------------------------------------------
Sat Jan  2 09:53:48 UTC 2016 - coolo@suse.com

- updated to 1.999713
   see /usr/share/doc/packages/perl-Math-BigInt/CHANGES

-------------------------------------------------------------------
Sat Nov 14 09:55:10 UTC 2015 - coolo@suse.com

- updated to 1.999710
   see /usr/share/doc/packages/perl-Math-BigInt/CHANGES

  2015-11-12 v1.999710 pjacklam
  
   * New method Math::BigFloat -> from_hex() which supports hexadecimal floating
     point numbers, e.g., "0x1.999ap-4".
  
   * New test file t/from_hex-mbf.t for testing Math::BigFloat -> from_hex().
  
   * Add 'from_hex' and 'from_bin' to list of methods in the Math::BigInt POD.

-------------------------------------------------------------------
Wed Nov 11 10:10:30 UTC 2015 - coolo@suse.com

- updated to 1.999709
   see /usr/share/doc/packages/perl-Math-BigInt/CHANGES

  2015-11-06 v1.999709 pjacklam
  
   * Represent and return zero as 0E0, not 0E1. The old POD said "A zero is
     represented and returned as 0E1, not 0E0 (after Knuth)." I find no
     references to Knuth ever having said this. The closest reference I can find
     is that Knuth says 0**0 should be defined to be 1, not 0, but that is
     something else than 0e0, which is 0*10**0. I have yet to see any other
     mathematical software that represents and returns zero as 0e1 rather than
     0e0.
  
   * Required version of Test::More is 0.9301.

-------------------------------------------------------------------
Fri Nov  6 10:06:53 UTC 2015 - coolo@suse.com

- updated to 1.999708
   see /usr/share/doc/packages/perl-Math-BigInt/CHANGES

-------------------------------------------------------------------
Fri Oct 30 10:55:11 UTC 2015 - coolo@suse.com

- updated to 1.999707
   see /usr/share/doc/packages/perl-Math-BigInt/CHANGES

  2015-10-29 v1.999707 pjacklam
  
   * Added dependency on Math::Complex 1.39 for Math::Complex::Inf(), which is
     used for numifying infinity.
  
   * Updated author information.
  
   * Updated information in the file README.
  
   * Removed the files INSTALL and LICENSE as this information is already covered
     in the file README.
  
   * Enable 'use warnings' in all modules. We require a Perl newer than 5.6.0
     anyway.
  
   * Replace 'use vars ...' with 'our ...'. We require a Perl newer than 5.6.0
     anyway.
  
   * Avoid indirect object syntax in documentation.
  
   * Moved 'Test::More' from 'build_requires' to 'test_requires' in Makefile.PL.

-------------------------------------------------------------------
Thu Oct 29 10:06:14 UTC 2015 - coolo@suse.com

- updated to 1.999706
   see /usr/share/doc/packages/perl-Math-BigInt/CHANGES

-------------------------------------------------------------------
Tue Oct 27 10:08:46 UTC 2015 - coolo@suse.com

- updated to 1.999705
   see /usr/share/doc/packages/perl-Math-BigInt/CHANGES

-------------------------------------------------------------------
Sat Sep 26 08:53:16 UTC 2015 - coolo@suse.com

- updated to 1.999704
   see /usr/share/doc/packages/perl-Math-BigInt/CHANGES

  2015-09-25 v1.999704 pjacklam
  
    * objectify() in lib/Math/BigInt.pm now uses 'isa' not 'eq' to check object
      relationship. This is necessary for correct handling of subclasses.
  
    * objectify() in lib/Math/BigInt.pm no longer expects as_int(), as_number()
      and as_float() to return objects, but allows them to return numbers
      formatted as strings. This is used by some other modules on CPAN.
  
    * Better documentation of as_int() and as_number() in lib/Math/BigInt.pm.
  
    * Add documentation for as_float() in lib/Math/BigFloat.pm
  
    * Added test files t/objectify_mbf.t and t/objectify_mbi.t.

-------------------------------------------------------------------
Tue Sep 22 09:12:28 UTC 2015 - coolo@suse.com

- updated to 1.999703
   see /usr/share/doc/packages/perl-Math-BigInt/CHANGES

  2015-09-21 v1.999703 pjacklam
  
   * Fix blog() in Math::BigInt and Math::BigFloat to work correctly regardless
     of the base.
  
   * Correct existing tests in bigintpm.inc and bigfltpm.inc.
  
   * Update test plans (number of tests) in t/bare_mbi.t, t/bigintpm.t, and
     t/sub_mbi.t.
  
   * Add test files t/blog-mbf.t and t/blog-mbi.t for better testing of the
     blog() methods.

-------------------------------------------------------------------
Sun Sep 20 09:00:16 UTC 2015 - coolo@suse.com

- updated to 1.999702
   see /usr/share/doc/packages/perl-Math-BigInt/CHANGES

-------------------------------------------------------------------
Mon Sep 14 08:40:14 UTC 2015 - coolo@suse.com

- updated to 1.999701
   see /usr/share/doc/packages/perl-Math-BigInt/CHANGES

  2015-09-11 v1.999701 pjacklam
  
   * The POD documentation, as well as the comments in the code, said that
     $x->bdiv($y) in list context should return quotient $q and remainder $r so
     that $x = $q * $y + $r, and that the remainder (modulo) $r should correspond
     to Perl's % operator as well as the bmod() method. This has not been the
     actual behaviour. This is now fixed.
  
   * Clearer POD documentation for the bdiv() and bmod() methods.
  
   * All input values in the range (-1,1) written as a decimal number, e.g.,
     -0.75 and 0.5, now return NaN, not 0.
  
   * Input values with a large (absolute value) negative exponent, e.g.,
     1e-9999999, now return NaN. The former behaviour was to die with the message
     "Quantifier in {,} bigger than 32766 in regex; marked by ..."
  
   * Intermediate computations in blog() increased the number of digits
     significantly in some cases. Now reduce the number of digits by rounding.
     However, keep some extra digits for remaining intermediate computations
     before the final rounding.
  
   * When $x is a Math::BigFloat, $x -> bceil() and $x -> bint() for -1 < $x < 0
     returned -0. Negative zero is never used by Math::Big(Int|Float), and care
     has been taken to avoid it, so this bug is surely an oversight.
  
   * Explicitly specify the backend (lib => 'Calc') in t/mbimbf.t for easier
     release management of the backend distributions.
  
   * Add "use warnings" to test scripts, since Perl 5.6.2 is required anyway, and
     "use warnings" was introduced in Perl 5.6.1.
  
   * Modified test scripts so the difference between the test files in the
     Math-BigInt distribution and the backend distributions are as few and as
     small as possible. This makes for easier release management.

-------------------------------------------------------------------
Tue Sep  1 09:08:11 UTC 2015 - coolo@suse.com

- updated to 1.9997
   see /usr/share/doc/packages/perl-Math-BigInt/CHANGES

  ##############################################################################
  The changes are now grouped by distribution.

-------------------------------------------------------------------
Thu May 29 10:18:57 UTC 2014 - stephan.barth@suse.com

- update to version 1.9993 from 1.997
  Changes from upstream:
  * Synchronise with blead perl. For a list of recent changes, see
    http://perl5.git.perl.org/perl.git/history/HEAD:/dist/Math-BigInt
  * Removed examples/hailstone.pl which required the obsolete Math::Big

-------------------------------------------------------------------
Tue Jun 11 13:10:57 UTC 2013 - coolo@suse.com

- rebuild against perl 5.18

-------------------------------------------------------------------
Fri Nov 18 12:31:43 UTC 2011 - coolo@suse.com

- update to 1.997 
   * Document actual behaviour of from_xxx() methods. [perl #85334] (Peter John
     Acklam)
   * Make bmuladd() able to handle third arg properly. [perl #85482] (Peter John
     Acklam)
   * Add sign function bsgn() as a complement to babs(). (Peter John Acklam)
   * Fix objectify()'s handling of "foreign objects". (RT #16221 and #52124)
     (Peter John Acklam)
   * Rewrap some verbatim pod in Math::BigInt. (Father Chrysostomos)
   * Correct links to sections. (Alexandr Ciornii)
   * Remove incorrect formatting inside verbatim paragraphs. (Alexandr Ciornii)
   * Upgrade bundled modules in "inc" to latest version. (Peter John Acklam)
   * Include "^MYMETA\.(yml|json)\z" in MANIFEST.SKIP. Whereas META.* are
     generated by the distribution author at packaging time, MYMETA.* are
     generated by the end user at configure time after any dynamic dependencies
     are known. (Peter John Acklam)

-------------------------------------------------------------------
Fri Apr 29 07:35:32 UTC 2011 - coolo@opensuse.org

- initial package 1.993
    * created by cpanspec 1.78.04

