-------------------------------------------------------------------
Sat Aug  3 19:22:37 UTC 2024 - Martin Hauke <mardnh@gmx.de>

- Update to version 2024.07
  * bug fixes (UUCP locking, flush queue before fork())
  * added mappings for lowercase and uppercase
  * '--version' and '--minimal-cmds' options added
  * simplified generation of docs
  * can now be compiled without fork() for MMU-less systems

-------------------------------------------------------------------
Wed Feb 14 16:56:45 UTC 2024 - Jan Engelhardt <jengelh@inai.de>

- Reevaluate sources and add/update bundled()/License: lines.

-------------------------------------------------------------------
Sun Feb 11 13:34:56 UTC 2024 - Martin Hauke <mardnh@gmx.de>

- Change Upstream 
  * OLD: https://github.com/npat-efault/picocom/
  * NEW: https://gitlab.com/wsakernel/picocom/
- Update to version 2023.04
  https://gitlab.com/wsakernel/picocom/-/releases/2023-04
  * bugfixes (igncr handling, history handling, memory leaks...).
  * new parameter to add delay after sent characters.
    (avoids overflows on the remote side when there is no flow
    control).
  * bash completion script.
  * improved support for macOS and different C libraries.
  * lots typos fixed in documentation and source code.
- Create new subpackage for bash-completion

-------------------------------------------------------------------
Mon Feb  5 20:24:25 UTC 2018 - jengelh@inai.de

- Trim rhetorics from description and compact it.

-------------------------------------------------------------------
Fri Feb  2 05:20:16 UTC 2018 - avindra@opensuse.org

- Update to version 3.1
  * Added the --raise-dtr and --raise-rts options, for symmetry with
    --lower-dtr and --lower-rts (see manual page for details)
  * Better build support for custom baudrates. Now custom baudrate
    support is enabled by default for some systems
  * You can always explicitly enable custom baudrate support for
    other systems and you can explicitly disable it, even for the
    systems it is automatically enabled for (see Makefile).
  * To see if custom baudrate support is enabled in your build, run
    picocom with the --help command-line option.
- Includes 3.0
  * Added the --logfile command line option
  * Added the --lower-rts and --lower-dtr command-line options.
    These options lower (reset) the respective modem control lines
    of the serial port, as soon as picocom starts and the port
    is configured.
  * Added the --initstring (or -t) command line option. This option
    can be used to send an initialization string to the serial port
    when picocom starts.
  * Added the --exit-after (or -x) command line option. Causes
    picocom to exit if it becomes idle for the specified time.
  * Added the -exit (or -X) command line option. Causes picocom to
    exit immediately after opening and configuring the serial port.
  * Added the --quiet (or -q) command line option. Suppress output
    from picocom that was not explicitly requested by the user.
    Errors and command responses are still printed.
  * Added the --no-escape (or -n) command line option. Disables the
    escape character. If given picocom will never enter command mode.
  * Added the --hangup (or -u) comand line option. If given
    together with --noreset, picocom will not reset the serial port
    to it's original settings on exit, but it will clear the modem
    control lines (typically DTR and RTS) to signal a modem hangup.
  * Added the [C-g] command that toggles the state of the RTS modem
  . control line.
  * Added the [C-w] command (write hex) that pompts the user for a
    string of hexadecimal values to be converted to binary and sent
    to the port.
  * Added "to hex" character mappings (???hex), which replace
    characters with their hexadecimal representation. For more see
    issue #75, and the INPUT, OUTPUT, AND ECHO MAPPING section in
    the picocom manual.
  * Standard input can now be a non-tty (e.g a file or a pipe).
    Useful in some occasions for doing trivial non-interactive stuff.
  * Changed the way picocom handles reading zero-bytes from the
    standard input. Now picocom waits for the output queue to be
    transmitted before exiting, or waits to become idle before
    exiting (if the --exit-after option is given). See the new
    section EXITING PICOCOM in the manual for details.
  * Picocom's serial port output queue is now dynamically growable.
    You can still set an upper limit when compiling picocom, or
    allow it to grow as much as your system's memory allows.
    Usueful, for example, for doing huge copy-pastes.
  * Fixed some minor backwards compatibility issues. Now you can use
    command-line options compatible with 1.x.
  * Now SIGINT, as well as SIGTERM, can kill picocom. May be useful
    when the standard input is not a tty.
- Includes 2.2
  * Improvement to read-buffering which can noticeably reduce CPU
    load under high baudrates.
- Includes 2.0
  * The "change-databits" command-key has been reasigned (from C-b
    to C-i); to make room for the new command "set baudrate" (C-b,
    see below), and for some symmetry with the new "set stopbits"
    command (C-j)
  * The short option letter for the --parity command line option has
    been changed from -p to -y; to leave -p for the new --stopbits
    command-line option (see below).
  * The default name for the history file has been changed to:
    '.picocom_history' (in the user's home dir).
  * The default input buffer size TTY_Q_SZ has been increased to
    32KB. You can change it by editing the Makefile if you wish.
  * You can now select between 1 or 2 stopbits for the serial port,
    either via command-line option (--stopbits) or via command (C-j).
  * Added new command (C-b) that allows you to enter a baudrate
    numerically. This is particularly useful if you have compiled-in
    the "custom baudrates" feature (see below), as it allows you to
    enter arbitrary baudrate values. The old baud-up (C-u) and baud-down
    (C-d) commands are still available.
  * Added command that prints a list of all available command-keys
    (C-h or C-k).
  * It is now possible to disable the send- and receive-file commands
    (C-s, and C-r) by supplying an empty string as the argument to
    the --send-cmd and --receive-cmd options, respectively. When
    both commands are disabled, picocom no longer forks or executes
    any external programs.
  * Picocom no longer uses /bin/sh to run external commands for
    file-transfer operations. Parsing the command line and spliting
    it into arguments is now performed internally by picocom, using
    quoting rules very similar to those of the Unix shell. Hopefully,
    this makes it impossible to inject shell-commands when supplying
    filenames and extra arguments to the send- and receive-file
    commands.
  * Much improved serial-port settings handling and reporting.
    Whenever a port-setting is changed (baud-rate, parity,
    flow-control, etc) by a command, the serial port attributes are
    re-read, and if found different from the requested value, both
    values are displayed (first the requested, then the actual in
    parenthesis). The show-status command (C-v) also re-reads the
    actual terminal attributes and displays both: the requested
    values and the actual terminal settings (if they differ). This
    way C-v is able to "see" changes made to the serial-port outside
    of picocom (or changes made from within picocom but silently
    ignored by the serial port driver---which happens).
  * The show-status command (C-v) also displays the current status
    of the modem control lines (DTR, DSR, DCD, RTS, CTS, and RI)
    if available.
  * Picocom is now more clever regarding its output (writting to the
    serial port) pacing. It no longer calls write(2) to send (overly)
    large chucks to the tty in a single gulp. It limits the amount
    of data write(2) can send to the tty on a single call, based on
    the port's baud rate. This way no huge output buffers (relative
    to the baud-rate) accumulate, and they don't take "forever" to
    drain.
  * Added support for setting custom (arbitrary) serial-port baud
    rates. With this compiled-in you can, for example, set the
    serial-port's baudrate to 42000 bps, or 1234 bps, or other such
    arbitrary values. Custom baudrates can be set either through
    the command-line option (--baud), or using the new command "set
    baudrate* (C-b). By default the USE_CUSTOM_BAUD feature is NOT
    compiled in. You have to comment-in the respective lines in the
    Makefile and recompile picocom to enable it.
  * Added compile-time option (NO_HELP) that allows you to compile
    picocom without including any help strings. Disabled by default.

-------------------------------------------------------------------
Sun Aug 16 14:58:08 UTC 2015 - p.drouand@gmail.com

- Update to version 1.8
  * Adds support for the "linenoise" library, which allows line-editing
    and path completion when entering filenames for receive- and 
    send-file operations. Support can be compiled-out if you wish.
  * Allows you to cancel a file-transfer operation, while entering a 
    file name, by pressing C-c. This works with linenoise support and without.
  * Adds support for more high baud-rates.
    Now every baudrate above 115200 is compiled-in only if the respective
    macros are defined in the system header files. This should allow 
    picocom with HIGH_BAUD support to compile cleanly for more systems.
  * Input-buffer size (TTY_Q_SZ) now defined in Makefile, and defaults to 1024.
  * Adds support for locking using flock(2) (now default). Old-style 
    UUCP-lockdir code is maintained. Preferred locking style is selected
    via the Makefile.
  * Debian's xmltoman is now used to format the manpage.
  * Other minor fixes. 
- Changes from version 1.7
  * No ChangeLog available
- Update download and project Urls
- Perform a spec-cleaner on the spec file

-------------------------------------------------------------------
Mon Apr 11 05:20:00 UTC 2011 - mseben@gmail.com

- updated to picocom 1.6 
  * Added features:
    - Local echo
    - Configurable input mapping (CR --> LF, DEL --> BS, etc)
    - Configurable output mapping
    - Configurable local-echo mapping
  * Fixed URL in man page
  * Fixed misconception that prevented the correct setting 
    of the odd-parity mode
  * Allow non-alpha escape keys (e.g. C-])
  * Enabled support for higher baudrates up to 921600. Support is
    compiled-in conditionally on the HIGH_BAUD macro.
  * Silenced compiler warning
  * Changed default send_cmd to "sz -vv"

-------------------------------------------------------------------
Sat Mar  28 14:54:45 CEST 2008 - mseben@suse.cz

- Initial package

-------------------------------------------------------------------
