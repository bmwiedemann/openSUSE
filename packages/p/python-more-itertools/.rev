<revisionlist>
  <revision rev="1" vrev="1">
    <srcmd5>931bb2ad24afe7db50f89d91991170d6</srcmd5>
    <version>3.2.0</version>
    <time>1513245295</time>
    <user>dimstar_suse</user>
    <comment>- Update to version 3.2.0
  * New itertools:
      + :func:`lstrip`, :func:`rstrip`, and :func:`strip`
        (thanks to MSeifert04 and pylang)
      + :func:`islice_extended`
  * Improvements to existing itertools:
      + Some bugs with slicing :func:`peekable`-wrapped iterables
        were fixed
  3.1.0:
  * New itertools:
      + :func:`numeric_range` (Thanks to BebeSparkelSparkel and
        MSeifert04)
      + :func:`count_cycle` (Thanks to BebeSparkelSparkel)
      + :func:`locate` (Thanks to pylang and MSeifert04)
  * Improvements to existing itertools:
      + A few itertools are now slightly faster due to some
        function optimizations. (Thanks to MSeifert04)
  * The docs have been substantially revised with installation
    notes, categories for library functions, links, and more.
    (Thanks to pylang)
  3.0.0:
  * Removed itertools:
      + ``context`` has been removed due to a design flaw - see
        below for replacement options. (thanks to NeilGirdhar)
  * Improvements to existing itertools:
      + ``side_effect`` now supports ``before`` and ``after``
        keyword arguments. (Thanks to yardsale8)
  * PyPy and PyPy3 are now supported.
    The major version change is due to the removal of the
    ``context`` function.
    Replace it with standard ``with`` statement context management:
    .. code-block:: python
      # Don't use context() anymore
      file_obj = StringIO()
      consume(print(x, file=f) for f in context(file_obj) for x in
      u'123')
      # Use a with statement instead
      file_obj = StringIO()
      with file_obj as f:
          consume(print(x, file=f) for x in u'123')
  2.6.0:
  * New itertools:
      + ``adjacent`` and ``groupby_transform`` (Thanks to diazona)
      + ``always_iterable`` (Thanks to jaraco)
      + (Removed in 3.0.0) ``context`` (Thanks to yardsale8)
      + ``divide`` (Thanks to mozbhearsum)
  * Improvements to existing itertools:
      + ``ilen`` is now slightly faster. (Thanks to wbolster)
      + ``peekable`` can now prepend items to an iterable. (Thanks
        to diazona)
  2.5.0:
  * New itertools:
      + ``distribute`` (Thanks to mozbhearsum and coady)
      + ``sort_together`` (Thanks to clintval)
      + ``stagger`` and ``zip_offset`` (Thanks to joshbode)
      + ``padded``
  * Improvements to existing itertools:
      + ``peekable`` now handles negative indexes and slices with
        negative components properly.
      + ``intersperse`` is now slightly faster. (Thanks to pylang)
      + ``windowed`` now accepts a ``step`` keyword argument.
        (Thanks to pylang)
  * Python 3.6 is now supported.
  2.4.1:
  * Move docs 100% to readthedocs.io.
  2.4:
  * New itertools:
      + ``accumulate``, ``all_equal``, ``first_true``,
        ``partition``, and
        ``tail`` from the itertools documentation.
      + ``bucket`` (Thanks to Rosuav and cvrebert)
      + ``collapse`` (Thanks to abarnet)
      + ``interleave`` and ``interleave_longest`` (Thanks to
        abarnet)
      + ``side_effect`` (Thanks to nvie)
      + ``sliced`` (Thanks to j4mie and coady)
      + ``split_before`` and ``split_after`` (Thanks to
        astronouth7303)
      + ``spy`` (Thanks to themiurgo and mathieulongtin)
  * Improvements to existing itertools:
      + ``chunked`` is now simpler and more friendly to garbage
        collection.
        (Contributed by coady, with thanks to piskvorky)
      + ``collate`` now delegates to ``heapq.merge`` when possible.
        (Thanks to kmike and julianpistorius)
      + ``peekable``-wrapped iterables are now indexable and
        sliceable. Iterating through ``peekable``-wrapped iterables
        is also faster.
      + ``one`` and ``unique_to_each`` have been simplified.
        (Thanks to coady)
  2.3:
  * Added ``one`` from ``jaraco.util.itertools``. (Thanks, jaraco!)
  * Added ``distinct_permutations`` and ``unique_to_each``.
    (Contributed by bbayles)
  * Added ``windowed``. (Contributed by bbayles, with thanks to
    buchanae, jaraco, and abarnert)
  * Simplified the implementation of ``chunked``. (Thanks, nvie!)
  * Python 3.5 is now supported. Python 2.6 is no longer supported.
  * Python 3 is now supported directly; there is no 2to3 step.
- Converted to single-spec
- initial version
</comment>
    <requestid>555102</requestid>
  </revision>
  <revision rev="2" vrev="1">
    <srcmd5>52f21ff1ea72fc151ffded5f277fc342</srcmd5>
    <version>4.1.0</version>
    <time>1522062924</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>590886</requestid>
  </revision>
  <revision rev="3" vrev="2">
    <srcmd5>f7963c8dc151f680fc1715d58a6e52cd</srcmd5>
    <version>4.1.0</version>
    <time>1522404523</time>
    <user>dimstar_suse</user>
    <comment>- spec-cleaned
- use of %license macro
- removed unneded dependency (forwarded request 592318 from mimi_vx)</comment>
    <requestid>592319</requestid>
  </revision>
  <revision rev="4" vrev="1">
    <srcmd5>1d1b56fe27ae61006a0a08011bc122a8</srcmd5>
    <version>4.2.0</version>
    <time>1528111280</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>613148</requestid>
  </revision>
  <revision rev="5" vrev="1">
    <srcmd5>5ad1bde6f15ea0357f26233e7db243df</srcmd5>
    <version>5.0.0</version>
    <time>1558938637</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>705242</requestid>
  </revision>
  <revision rev="6" vrev="1">
    <srcmd5>1a2efba501c21a22745b921970ff85be</srcmd5>
    <version>7.2.0</version>
    <time>1567420893</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>727060</requestid>
  </revision>
  <revision rev="7" vrev="1">
    <srcmd5>8a2c882346db09ab4077088bb6f78c25</srcmd5>
    <version>8.0.2</version>
    <time>1577887080</time>
    <user>dimstar_suse</user>
    <comment>- update to 8.0.2:
  * Bug fixes
      * The type stub files are now part of the wheel distribution (thanks to keisheiled)
      * The type stub files now work for functions imported from the
        root package (thanks to keisheiled)
  * New itertools and other additions
      * This library now ships type hints for use with mypy.
        (thanks to ilai-deutel for the implementation, and to gabbard and fmagin for assistance)
      * :func:`split_when` (thanks to jferard)
      * :func:`repeat_last` (thanks to d-ryzhikov)
  * Changes to existing itertools:
      * The implementation for :func:`set_partitions` was improved. (thanks to jferard)
      * :func:`partition` was optimized for expensive predicates. (thanks to stevecj)
      * :func:`unique_everseen` and :func:`groupby_transform` were re-factored. (thanks to SergBobrovsky)
      * The implementation for :func:`difference` was improved. (thanks to Jabbey92)</comment>
    <requestid>758635</requestid>
  </revision>
  <revision rev="8" vrev="1">
    <srcmd5>8796576a0dbff838ffbb1b5e6cafabdc</srcmd5>
    <version>8.1.0</version>
    <time>1579867595</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>766375</requestid>
  </revision>
  <revision rev="9" vrev="1">
    <srcmd5>2f143d159186075ee6321136f448e7ac</srcmd5>
    <version>8.2.0</version>
    <time>1583702492</time>
    <user>dimstar_suse</user>
    <comment>- update to 8.2.0:
   * The .pyi files for typing were updated. (thanks to blueyed and ilai-deutel)
   * :func:`numeric_range` now behaves more like the built-in :func:`range`. (thanks to jferard)
   * :func:`bucket` now allows for enumerating keys. (thanks to alexchandel)
   * :func:`sliced` now should now work for numpy arrays. (thanks to sswingle)
   * :func:`seekable` now has a ``maxlen`` parameter.</comment>
    <requestid>780384</requestid>
  </revision>
  <revision rev="10" vrev="1">
    <srcmd5>b7ff8d63c7d38ed5a3bf6c5b0481c497</srcmd5>
    <version>8.3.0</version>
    <time>1591379976</time>
    <user>dimstar_suse</user>
    <comment>- update to 8.3.0:
  * New itertools
    * :func:`zip_equal` (thanks to frankier and alexmojaki)
    * :func:`split_at`, :func:`split_before`, :func:`split_after`, and :func:`split_when` all got a ``maxsplit`` paramter (thanks to jferard and ilai-deutel)
    * :func:`split_at` now accepts a ``keep_separator`` parameter (thanks to jferard)
    * :func:`distinct_permutations` can now generate ``r``-length permutations (thanks to SergBobrovsky and ilai-deutel)
    * The :func:`windowed` implementation was improved  (thanks to SergBobrovsky)
    * The :func:`spy` implementation was improved (thanks to has2k1)
    * Type stubs are now tested with ``stubtest`` (thankjs to ilai-deutel)
    * Tests now run with ``python -m unittest`` instead of ``python setup.py test`` (thanks to jdufresne)</comment>
    <requestid>810900</requestid>
  </revision>
  <revision rev="11" vrev="1">
    <srcmd5>85c85da14663a401693b817b9b82db11</srcmd5>
    <version>8.4.0</version>
    <time>1597306473</time>
    <user>dimstar_suse</user>
    <comment>- update to 8.4.0:
 * New itertools
 * :func:`mark_ends` (thanks to kalekundert)
 * :func:`is_sorted`
 * Changes to existing itertools:
   * :func:`islice_extended` can now be used with real slices (thanks to cool-RR)
   * The implementations for :func:`filter_except` and :func:`map_except` were improved (thanks to SergBobrovsky)
 * Other changes
   * Automated tests now enforce code style (using `black &lt;https://github.com/psf/black&gt;`__)
   * The various signatures of :func:`islice_extended` and :func:`numeric_range` now appear in the docs (thanks to dsfulf)
   * The test configuration for mypy was updated (thanks to blueyed)</comment>
    <requestid>824641</requestid>
  </revision>
  <revision rev="12" vrev="1">
    <srcmd5>4fbd5a00b8113ba2b772cc7bd99fecd7</srcmd5>
    <version>8.5.0</version>
    <time>1603645702</time>
    <user>dimstar_suse</user>
    <comment>- update to 8.5.0:
  * windowed_complete() (thanks to MarcinKonowalczyk)
  Changes to existing itertools:
  * The is_sorted() implementation was improved (thanks to cool-RR)
  * The groupby_transform() now accepts a reducefunc parameter.
  * The last() implementation was improved (thanks to brianmaissy)
  * Various documentation fixes (thanks to craigrosie, samuelstjean, PiCT0)
  * The tests for distinct_combinations() were improved (thanks to Minabsapi)</comment>
    <requestid>834878</requestid>
  </revision>
  <revision rev="13" vrev="1">
    <srcmd5>6160c8e9c9d208f59315a7426c20fa28</srcmd5>
    <version>8.6.0</version>
    <time>1608835241</time>
    <user>dimstar_suse</user>
    <comment>- update to 8.6.0:
  * :func:`all_unique` (thanks to brianmaissy)
  * :func:`nth_product` and :func:`nth_permutation` (thanks to N8Brooks)
  * :func:`chunked` and :func:`sliced` now accept a ``strict`` parameter (thanks to shlomif and jtwool)
  * Python 3.5 has reached its end of life and is no longer supported.
  * Python 3.9 is officially supported.</comment>
    <requestid>856975</requestid>
  </revision>
  <revision rev="14" vrev="1">
    <srcmd5>2cef7b8fb6f92cd81b8858835cabbcad</srcmd5>
    <version>8.7.0</version>
    <time>1615362578</time>
    <user>dimstar_suse</user>
    <comment>- update to 8.7.0:
  * New functions
    * :func:`convolve`
    * :func:`product_index`, :func:`combination_index`, and :func:`permutation_index`
    * :func:`value_chain`
  * Changes to existing functions
    * :func:`distinct_combinations` now uses a non-recursive algorithm
    * :func:`pad_none` is now the preferred name for :func:`padnone`, though the latter remains available.
    * :func:`pairwise` will now use the Python standard library implementation on Python 3.10+
    * :func:`sort_together` now accepts a ``key`` argument
    * :func:`seekable` now has a ``peek`` method, and can indicate whether the iterator it's wrapping is exhausted
    * :func:`time_limited` can now indicate whether its iterator has expired
    * The implementation of :func:`unique_everseen` was improved
  * Other changes:
    * Various documentation updates</comment>
    <requestid>876826</requestid>
  </revision>
  <revision rev="15" vrev="1">
    <srcmd5>dee069f3bbe12e544b5040beb409a4d0</srcmd5>
    <version>8.8.0</version>
    <time>1623443393</time>
    <user>dimstar_suse</user>
    <comment>- update to 8.8.0:
  * :func:`countable` (thanks to krzysieq)
  * :func:`split_before` was updated to handle empy collections (thanks to TiunovNN)
  * :func:`unique_everseen` got a performance boost (thanks to Numerlor)
  * The type hint for :func:`value_chain` was corrected (thanks to vr2262)

- %check: use %pyunittest rpm macro</comment>
    <requestid>897855</requestid>
  </revision>
  <revision rev="16" vrev="1">
    <srcmd5>55e5ff455f28af0a13843feb9df6e54a</srcmd5>
    <version>8.10.0</version>
    <time>1634754206</time>
    <user>dimstar_suse</user>
    <comment>- update to 8.10.0:
    * The type stub for :func:`iter_except` was improved (thanks to  MarcinKonowalczyk)
    *  Type stubs now ship with the source release (thanks to saaketp)
    *  The Sphinx docs were improved (thanks to MarcinKonowalczyk)
    * New functions
      * :func:`interleave_evenly` (thanks to mbugert)
      * :func:`repeat_each` (thanks to FinalSh4re)
      * :func:`chunked_even` (thanks to valtron)
      * :func:`map_if` (thanks to sassbalint)
      * :func:`zip_broadcast` (thanks to kalekundert)
    * Changes to existing functions
      * The type stub for :func:`chunked` was improved (thanks to  PhilMacKay)
      * The type stubs for :func:`zip_equal` and `zip_offset` were improved (thanks to maffoo)
      * Building Sphinx docs locally was improved (thanks to MarcinKonowalczyk)</comment>
    <requestid>925732</requestid>
  </revision>
  <revision rev="17" vrev="1">
    <srcmd5>0a5a2cd37025671a97968fc5dfffcc90</srcmd5>
    <version>8.12.0</version>
    <time>1644188019</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>951389</requestid>
  </revision>
  <revision rev="18" vrev="2">
    <srcmd5>96cebd74c1cca624d9e7414ec60c096e</srcmd5>
    <version>8.12.0</version>
    <time>1647532878</time>
    <user>dimstar_suse</user>
    <comment>- use python_expand for fdupes</comment>
    <requestid>961821</requestid>
  </revision>
  <revision rev="19" vrev="1">
    <srcmd5>ffe5432f734a996660063ed953b67ba5</srcmd5>
    <version>8.13.0</version>
    <time>1655493629</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>982495</requestid>
  </revision>
  <revision rev="20" vrev="1">
    <srcmd5>56ea5e51a0976a3ef65739a2c189dda6</srcmd5>
    <version>8.14.0</version>
    <time>1663515129</time>
    <user>dimstar_suse</user>
    <comment>- update to 8.14.0:
  * :func:`longest_common_prefix` (thanks to nanouasyn)
  * :func:`iequals` (thanks to nanouasyn)
  * `concurrent.futures.ThreadPoolExecutor` is now imported lazily in :func:`callback_iter`.
  * :func:`tail` is now optimized for iterables with a fixed length.
  * Some documentation issues were fixed (thanks to pochmann and timgates42)
  * This library is now marked for Python 3.10 compatibility in PyPI (thanks to chayim)</comment>
    <requestid>1004179</requestid>
  </revision>
  <revision rev="21" vrev="1">
    <srcmd5>236e75d0cc23a1d0095f18d79995f0dd</srcmd5>
    <version>9.0.0</version>
    <time>1667306470</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>1032501</requestid>
  </revision>
</revisionlist>
