From 913440d76a9ffafdbda6099237b60c5eaa4b4b9a Mon Sep 17 00:00:00 2001
From: kschopmeyer <k.schopmeyer@swbell.net>
Date: Mon, 7 Sep 2020 11:20:49 -0500
Subject: [PATCH] Remove use of pydicti package in favor of NocaseDict.

Change all use of the pydicti package in favor of the pywbem NocaseDict
package.  For the moment this uses the pywbem internal NocaseDict. See
issue # 754 that documents this issue.
---
 docs/changes.rst                             |  2 ++
 docs/pywbemcli/cmdshelp.rst                  |  6 +++---
 minimum-constraints.txt                      |  1 -
 pywbemtools/pywbemcli/_association_shrub.py  |  8 ++++----
 pywbemtools/pywbemcli/_display_cimobjects.py |  9 ++++-----
 pywbemtools/pywbemcli/_displaytree.py        | 10 +++++-----
 requirements.txt                             |  2 --
 7 files changed, 18 insertions(+), 20 deletions(-)

Index: pywbemtools-0.7.3/minimum-constraints.txt
===================================================================
--- pywbemtools-0.7.3.orig/minimum-constraints.txt
+++ pywbemtools-0.7.3/minimum-constraints.txt
@@ -92,7 +92,6 @@ tabulate==0.8.2
 prompt-toolkit==1.0.15; python_version == '2.7'
 prompt-toolkit==2.0.1; python_version >= '3.4'
 PyYAML==5.1
-pydicti==1.1.3
 yamlloader==0.5.5
 
 # Virtualenv
Index: pywbemtools-0.7.3/pywbemtools/pywbemcli/_association_shrub.py
===================================================================
--- pywbemtools-0.7.3.orig/pywbemtools/pywbemcli/_association_shrub.py
+++ pywbemtools-0.7.3/pywbemtools/pywbemcli/_association_shrub.py
@@ -43,9 +43,9 @@ import six
 import click
 # TODO: Future Could we combine this tree into tree file???
 from asciitree import LeftAligned
-from pydicti import dicti
 from pywbem import CIMInstanceName, CIMClassName, CIMFloat, CIMInt, CIMError, \
     CIMDateTime
+from pywbem._nocasedict import NocaseDict
 
 from ._common import output_format_is_table, format_table, shorten_path_str, \
     warning_msg
@@ -415,8 +415,8 @@ class AssociationShrub(object):
         assoctree = OrderedDict()
         # Create dictionary of standard instance keys to potentially hide.
         # For now we always hide the following independent of key value
-        replacements = dicti((("SystemCreationClassName", None),
-                              ("SystemName", None)))
+        replacements = NocaseDict((("SystemCreationClassName", None),
+                                   ("SystemName", None)))
         for role, ref_clns in six.iteritems(self.instance_shrub):
             elementstree = OrderedDict()
             for ref_cln in ref_clns:
@@ -689,7 +689,7 @@ class AssociationShrub(object):
         assert isinstance(inst_names_tuple, list)
         assert isinstance(inst_names_tuple[0], tuple)
         assert len(inst_names_tuple[0]) == 2
-        assert isinstance(replacements, dicti)
+        assert isinstance(replacements, NocaseDict)
 
         # If path shortening specified, determine which keys can be shortened
         # based on keys with the same value in all instance names
Index: pywbemtools-0.7.3/pywbemtools/pywbemcli/_displaytree.py
===================================================================
--- pywbemtools-0.7.3.orig/pywbemtools/pywbemcli/_displaytree.py
+++ pywbemtools-0.7.3/pywbemtools/pywbemcli/_displaytree.py
@@ -26,7 +26,7 @@ import click
 
 # Use an ordered Nocase dictionary for the tree. Ordered dictionary creates
 # tree output that has the same order in multiple versions of python.
-from pydicti import odicti
+from pywbem._nocasedict import NocaseDict
 
 
 def build_tree(class_subclass_dict, top_class):
@@ -58,7 +58,7 @@ def build_tree(class_subclass_dict, top_
         Returns:
           Structure of nested dictionaries defining the class/subclass structure
         """
-        node_dict = odicti()
+        node_dict = NocaseDict()
         # If there is no subclass, the class will not exist in this dictionary
         if cln in class_to_subclass_dict:
             cln_list = class_to_subclass_dict[cln]
@@ -68,7 +68,7 @@ def build_tree(class_subclass_dict, top_
                     node_dict[key] = _tree_node(class_to_subclass_dict, key)
         return node_dict
 
-    rtn_dict = odicti()
+    rtn_dict = NocaseDict()
     # _tree_node generates dictionary node for elements in class-subclass
     # dictionary and returns complete node structure. This is recursive,
     # with _tree_node recursively calling until there are no subclasses.
@@ -97,7 +97,7 @@ def build_class_tree_dict(classes, top_c
     cln_to_supercln = {cln.classname: cln.superclass for cln in classes}
 
     # Sort so there is a fixed order to the resulting tree.
-    cln_supercln_sorted = odicti()
+    cln_supercln_sorted = NocaseDict()
     for key in sorted(cln_to_supercln.keys()):
         cln_supercln_sorted[key] = cln_to_supercln[key]
     cln_to_supercln = cln_supercln_sorted
@@ -112,7 +112,7 @@ def build_class_tree_dict(classes, top_c
     # Build the class to subclass dictionary from the
     # superclass to class dictionary by reversing the dictionary.
     # Built within a comprehension but comprehension not assigned.
-    subcln_in_cln = odicti()
+    subcln_in_cln = NocaseDict()
     # pylint: disable=bad-continuation, expression-not-assigned
     [subcln_in_cln.setdefault(v, []).append(k) for (k, v) in
         six.iteritems(cln_to_supercln)]  # noqa: F841
Index: pywbemtools-0.7.3/requirements.txt
===================================================================
--- pywbemtools-0.7.3.orig/requirements.txt
+++ pywbemtools-0.7.3/requirements.txt
@@ -29,8 +29,6 @@ prompt-toolkit>=2.0.1; python_version >=
 prompt-toolkit>=2.0.1; python_version >= '3.8' and sys_platform != 'win32'
 prompt-toolkit>=2.0.1,<3.0.0; python_version >= '3.8' and sys_platform == 'win32'
 
-pydicti>=1.1.3
-
 # PyYAML 5.3 has removed support for Python 3.4
 PyYAML>=5.1; python_version == '2.7'
 PyYAML>=5.1,<5.3; python_version == '3.4'
Index: pywbemtools-0.7.3/pywbemtools/pywbemcli/_common.py
===================================================================
--- pywbemtools-0.7.3.orig/pywbemtools/pywbemcli/_common.py
+++ pywbemtools-0.7.3/pywbemtools/pywbemcli/_common.py
@@ -29,10 +29,10 @@ try:
 except ImportError:
     from ordereddict import OrderedDict  # pylint: disable=import-error
 
-from pydicti import odicti
 import six
 import click
 import tabulate
+from nocasedict import NocaseDict
 
 from pywbem import CIMInstanceName, CIMInstance, CIMClass, \
     CIMQualifierDeclaration, CIMProperty, CIMClassName, \
@@ -1575,15 +1575,15 @@ def sorted_prop_names(insts):
     and if instances of subclasses have additional keys.
     """
 
-    all_props = odicti()  # key: org prop name, value: lower cased prop name
-    key_props = odicti()  # key: org prop name, value: lower cased prop name
+    all_props = NocaseDict()  # key: org prop name, value: lower cased prop name
+    key_props = NocaseDict()  # key: org prop name, value: lower cased prop name
     for inst in insts:
         for pn in inst.properties:
             all_props[pn] = pn.lower()
             if inst.path and pn in inst.path.keybindings:
                 key_props[pn] = pn.lower()
 
-    nonkey_props = odicti()  # key: org prop name, value: lower cased prop name
+    nonkey_props = NocaseDict()  # key: org prop name, value: lower cased prop name
     for pn in all_props:
         if pn not in key_props:
             nonkey_props[pn] = all_props[pn]
