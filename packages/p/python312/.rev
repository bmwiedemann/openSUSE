<revisionlist>
  <revision rev="1" vrev="1">
    <srcmd5>12b0233b80adf2ebfbcbf678c91647c7</srcmd5>
    <version>3.12.0a7</version>
    <time>1683213022</time>
    <user>dimstar_suse</user>
    <comment>New version of the Python interpreter for the further development of the package.</comment>
    <requestid>1084321</requestid>
  </revision>
  <revision rev="2" vrev="1">
    <srcmd5>cb80450fac92b7b0ff74a1e5d7d5a8fb</srcmd5>
    <version>3.12.0b1</version>
    <time>1685830370</time>
    <user>dimstar_suse</user>
    <comment>- Add 00398-fix-stack-overwrite-on-32-bit-in-perf-map-test-harness-gh-104811-104823.patch
  gh#python/cpython#104811
- Refresh all patches
- Update to 3.12.0b1:
  Full changelog can be found here
  https://docs.python.org/dev/whatsnew/changelog.html#python-3-12-0-beta-1
</comment>
    <requestid>1090558</requestid>
  </revision>
  <revision rev="3" vrev="1">
    <srcmd5>2a3edb8c6a811c558ed077939b539c6d</srcmd5>
    <version>3.12.0b3</version>
    <time>1688147993</time>
    <user>dimstar_suse</user>
    <comment>- Update to 3.12.0b3:
  - gh-103142: The version of OpenSSL used in Windows and
    Mac installers has been upgraded to 1.1.1u to address
    CVE-2023-2650, CVE-2023-0465, CVE-2023-0466, CVE-2023-0464,
    as well as CVE-2023-0286, CVE-2022-4303, and CVE-2022-4303
    fixed previously in 1.1.1t (gh-101727).
  - gh-102153: urllib.parse.urlsplit() now strips leading C0
    control and space characters following the specification for
    URLs defined by WHATWG in response to CVE-2023-24329.
  - gh-99889: Fixed a security in flaw in uu.decode() that could
    allow for directory traversal based on the input if no
    out_file was specified.
  - gh-104049: Do not expose the local on-disk
    location in directory indexes produced by
    http.client.SimpleHTTPRequestHandler.
  - gh-103935: trace.__main__ now uses io.open_code() for files
    to be executed instead of raw open().
  - gh-102953: The extraction methods in tarfile, and
    shutil.unpack_archive(), have a new filter argument that
    allows limiting tar features than may be surprising or
    dangerous, such as creating files outside the destination
    directory. See Extraction filters for details.
- Remove upstreamed patches:
  - 00398-fix-stack-overwrite-on-32-bit-in-perf-map-test-harness-gh-104811-104823.patch
</comment>
    <requestid>1096094</requestid>
  </revision>
  <revision rev="4" vrev="1">
    <srcmd5>9fbf984dab626609cc543b04c5d14856</srcmd5>
    <version>3.12.0b4</version>
    <time>1689455711</time>
    <user>dimstar_suse</user>
    <comment>- Update to 3.12.0b4:
  - gh-issue-102988: CVE-2023-27043 (bsc#1210638): Prevent
    :func:`email.utils.parseaddr` and
    :func:`email.utils.getaddresses` from returning the realname
    portion of an invalid RFC2822 email header in the email
    address portion of the 2-tuple returned after being parsed by
    :class:`email._parseaddr.AddressList`.
  - gh-issue-106396: When the format specification of an
    f-string expression is empty, the parser now generates an
    empty :class:`ast.JoinedStr` node for it instead of an
    one-element :class:`ast.JoinedStr` with an empty string
    :class:`ast.Constant`.
  - gh-issue-106145: Make ``end_lineno`` and ``end_col_offset``
    required on ``type_param`` ast nodes.
  - gh-issue-105979: Fix crash in :func:`!_imp.get_frozen_object`
    due to improper exception handling.
  - gh-issue-98931: Ensure custom :exc:`SyntaxError` error
    messages are raised for invalid imports with multiple
    targets. Patch by Pablo Galindo
  - gh-issue-105908: Fixed bug where :gh:`99111` breaks future
    import ``barry_as_FLUFL`` in the Python REPL.
  - gh-issue-105340: Include the comprehension iteration
    variable in ``locals()`` inside a module- or class-scope
    comprehension.
  - gh-issue-105486: Change the repr of ``ParamSpec`` list of
    args in ``types.GenericAlias``.
  - gh-issue-101006: Improve error handling when read
    :mod:`marshal` data.
  - gh-issue-106524: Fix crash in :func:`!_sre.template` with
    templates containing invalid group indices.
  - gh-issue-106510: Improve debug output for atomic groups in
    regular expressions.
  - gh-issue-106503: Fix ref cycle in
    :class:`!asyncio._SelectorSocketTransport` by removing
    ``_write_ready`` in ``close``.
  - gh-issue-105497: Fix flag mask inversion when unnamed flags
    exist.
  - gh-issue-90876: Prevent :mod:`multiprocessing.spawn` from
    failing to *import* in environments where ``sys.executable``
    is ``None``.  This regressed in 3.11 with the addition of
    support for path-like objects in multiprocessing.
  - gh-issue-106292: Check for an instance-dict
    cached value in the :meth:`__get__` method of
    :func:`functools.cached_property`. This better matches the
    pre-3.12 behavior and improves compatibility for users
    subclassing :func:`functools.cached_property` and adding a
    :meth:`__set__` method.
  - gh-issue-106330: Fix incorrect matching of empty paths in
    :meth:`pathlib.PurePath.match`. This bug was introduced in
    Python 3.12.0 beta 1.
  - gh-issue-102541: Make pydoc.doc catch bad module ImportError
    when output stream is not None.
  - gh-issue-106152: Added PY_THROW event hook for
    :mod:`cProfile` for generators
  - gh-issue-106075: Added `asyncio.taskgroups.__all__` to
    `asyncio.__all__` for export in star imports.
  - gh-issue-105987: Fix crash due to improper reference counting
    in :mod:`asyncio` eager task factory internal routines.
  - gh-issue-105974: Fix bug where a :class:`typing.Protocol`
    class that had one or more non-callable members would
    raise :exc:`TypeError` when :func:`issubclass` was called
    against it, even if it defined a custom ``__subclasshook__``
    method. The behaviour in Python 3.11 and lower -- which has
    now been restored -- was not to raise :exc:`TypeError` in
    these situations if a custom ``__subclasshook__`` method was
    defined. Patch by Alex Waygood.
  - gh-issue-96145: Reverted addition of ``json.AttrDict``.
  - gh-issue-105497: Fix flag inversion when alias/mask members
    exist.
  - gh-issue-104554: Add RTSPS scheme support in urllib.parse
  - gh-issue-94777: Fix hanging :mod:`multiprocessing`
    ``ProcessPoolExecutor`` when a child process crashes while
    data is being written in the call queue.
  - gh-issue-106232: Make timeit doc command lines compatible
    with Windows by using double quotes for arguments.  This
    works on linux and macOS also.
  - gh-issue-101634: When running the Python test suite with
    ``-jN`` option, if a worker stdout cannot be decoded from
    the locale encoding report a failed testn so the exitcode is
    non-zero. Patch by Victor Stinner.
  - gh-issue-106118: Fix compilation for platforms without
    :data:`!O_CLOEXEC`. The issue was introduced with Python
    3.12b1 in :gh:`103295`. Patch by Erlend Aasland.
  - gh-issue-104692: Include ``commoninstall`` as a prerequisite
    for ``bininstall``
    This ensures that ``commoninstall`` is completed before
    ``bininstall`` is started when parallel builds are used (``make
    -j install``), and so the ``python3`` symlink is only installed
    after all standard library modules are installed.
  - gh-issue-106359: Argument Clinic now explicitly forbids
    &quot;kwarg splats&quot; in function calls used as annotations.
  - gh-issue-105227: The new :c:func:`PyType_GetDict` provides
    the dictionary for the given type object that is normally
    exposed by ``cls.__dict__``. Normally it's sufficient to
    use :c:member:`~PyTypeObject.tp_dict`, but for the static
    builtin types :c:member:`!tp_dict` is now always ``NULL``.
    :c:func:`!PyType_GetDict()` provides the correct dict object
    instead.
</comment>
    <requestid>1098684</requestid>
  </revision>
  <revision rev="5" vrev="2">
    <srcmd5>ac37226d6f03227a5cc1a82a3ff9b46c</srcmd5>
    <version>3.12.0b4</version>
    <time>1691154225</time>
    <user>dimstar_suse</user>
    <comment>- IT MEANS THAT bsc#1210638 STILL HAS NOT BEEN FIXED!
- Add Revert-gh105127-left-tests.patch (gh#python/cpython!106941)
  partially reverting CVE-2023-27043-email-parsing-errors.patch,
  because of the regression in gh#python/cpython#106669.</comment>
    <requestid>1102238</requestid>
  </revision>
  <revision rev="6" vrev="1">
    <srcmd5>2449120d32897fe734e68b3cba565859</srcmd5>
    <version>3.12.0rc1</version>
    <time>1691502885</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>1102750</requestid>
  </revision>
  <revision rev="7" vrev="2">
    <srcmd5>b2ea9cd48db2120ace70ad51d1c005b9</srcmd5>
    <version>3.12.0rc1</version>
    <time>1691762158</time>
    <user>dimstar_suse</user>
    <comment>- restrict PEP668 to ALP/Tumbleweed 
</comment>
    <requestid>1103380</requestid>
  </revision>
  <revision rev="8" vrev="1">
    <srcmd5>141074e0fbd759a74e41f9a63212813e</srcmd5>
    <version>3.12.0rc3</version>
    <time>1695327223</time>
    <user>anag+factory</user>
    <comment>- Update to 3.12.0rc3:
  - Core and Builtins
    - gh-109496: On a Python built in debug mode, Py_DECREF() now
      calls _Py_NegativeRefcount() if the object is a dangling pointer
      to deallocated memory: memory filled with 0xDD “dead byte” by
      the debug hook on memory allocators. The fix is to check the
      reference count before checking for _Py_IsImmortal(). Patch by
      Victor Stinner.
    - gh-109371: Deopted instructions correctly for tool
      initialization and modified the incorrect assertion in
      instrumentation, when a previous tool already sets INSTRUCTION
      events
    - gh-105658: Fix bug where the line trace of an except block
      ending with a conditional includes an excess event with the line
      of the conditional expression.
    - gh-109219: Fix compiling type param scopes that use a name which
      is also free in an inner scope.
    - gh-109341: Fix crash when compiling an invalid AST involving a
      ast.TypeAlias.
    - gh-109195: Fix source location for the LOAD_* instruction
      preceding a LOAD_SUPER_ATTR to load the super global (or
      shadowing variable) so that it encompasses only the name super
      and not the following parentheses.
    - gh-109118: Disallow nested scopes (lambdas, generator
      expressions, and comprehensions) within PEP 695 annotation
      scopes that are nested within classes.
    - gh-109114: Relax the detection of the error message for invalid
      lambdas inside f-strings to not search for arbitrary replacement
      fields to avoid false positives. Patch by Pablo Galindo
    - gh-109118: Fix interpreter crash when a NameError is raised
      inside the type parameters of a generic class.
    - gh-108976: Fix crash that occurs after de-instrumenting a code
      object in a monitoring callback.
    - gh-108732: Make iteration variables of module- and class-scoped
      comprehensions visible to pdb and other tools that use
      frame.f_locals again.
    - gh-108959: Fix caret placement for error locations for subscript
      and binary operations that involve non-semantic parentheses and
      spaces. Patch by Pablo Galindo
  - Library
    - gh-108682: Enum: require names=() or type=... to create an empty
      enum using the functional syntax.
    - gh-108843: Fix an issue in ast.unparse() when unparsing
      f-strings containing many quote types.
  - Documentation
    - gh-102823: Document the return type of x // y when x and y have
      type float.
  - Tests
    - gh-109396: Fix test_socket.test_hmac_sha1() in FIPS mode. Use a
      longer key: FIPS mode requires at least of at least 112 bits.
      The previous key was only 32 bits. Patch by Victor Stinner.
    - gh-104736: Fix test_gdb on Python built with LLVM clang 16 on
      Linux ppc64le (ex: Fedora 38). Search patterns in gdb “bt”
      command output to detect when gdb fails to retrieve the
      traceback. For example, skip a test if Backtrace stopped: frame
      did not save the PC is found. Patch by Victor Stinner.
    - gh-109237: Fix test_site.test_underpth_basic() when the working
      directory contains at least one non-ASCII character: encode the
      ._pth file to UTF-8 and enable the UTF-8 Mode to use UTF-8 for
      the child process stdout. Patch by Victor Stinner.
    - gh-109230: Fix test_pyexpat.test_exception(): it can now be run
      from a directory different than Python source code directory.
      Before, the test failed in this case. Skip the test if
      Modules/pyexpat.c source is not available. Skip also the test on
      Python implementations other than CPython. Patch by Victor
      Stinner.
    - gh-109015: Fix test_asyncio, test_imaplib and test_socket tests
      on FreeBSD if the TCP blackhole is enabled (sysctl
      net.inet.tcp.blackhole). Skip the few tests which failed with
      ETIMEDOUT which such non standard configuration. Currently, the
      FreeBSD GCP image enables TCP and UDP blackhole (sysctl
      net.inet.tcp.blackhole=2 and sysctl net.inet.udp.blackhole=1).
      Patch by Victor Stinner.
    - gh-91960: Skip test_gdb if gdb is unable to retrieve Python
      frame objects: if a frame is &lt;optimized out&gt;. When Python is
      built with “clang -Og”, gdb can fail to retrive the frame
      parameter of _PyEval_EvalFrameDefault(). In this case, tests
      like py_bt() are likely to fail. Without getting access to
      Python frames, python-gdb.py is mostly clueless on retrieving
      the Python traceback. Moreover, test_gdb is no longer skipped on
      macOS if Python is built with Clang. Patch by Victor Stinner.
    - gh-108962: Skip test_tempfile.test_flags() if chflags() fails
      with “OSError: [Errno 45] Operation not supported” (ex: on
      FreeBSD 13). Patch by Victor Stinner.
    - gh-108851: Fix test_tomllib recursion tests for WASI buildbots:
      reduce the recursion limit and compute the maximum nested
      array/dict depending on the current available recursion limit.
      Patch by Victor Stinner.
    - gh-108851: Add get_recursion_available() and
      get_recursion_depth() functions to the test.support module.
      Patch by Victor Stinner.
    - gh-108834: Add --fail-rerun option option to regrtest: if a test
      failed when then passed when rerun in verbose mode, exit the
      process with exit code 2 (error), instead of exit code 0
      (success). Patch by Victor Stinner.
    - gh-108834: Rename regrtest --verbose2 option (-w) to --rerun.
      Keep --verbose2 as a deprecated alias. Patch by Victor Stinner.
    - gh-108834: When regrtest reruns failed tests in verbose mode
      (./python -m test --rerun), tests are now rerun in fresh worker
      processes rather than being executed in the main process. If a
      test does crash or is killed by a timeout, the main process can
      detect and handle the killed worker process. Tests are rerun in
      parallel if the -jN option is used to run tests in parallel.
      Patch by Victor Stinner.
    - gh-103186: Suppress and assert expected RuntimeWarnings in
      test_sys_settrace.py
  - Build
    - gh-108740: Fix a race condition in make regen-all. The
      deepfreeze.c source and files generated by Argument Clinic are
      now generated or updated before generating “global objects”.
      Previously, some identifiers may miss depending on the order in
      which these files were generated. Patch by Victor Stinner.
- Python 3.12.0 release candidate 2:
  - Security
    - gh-108310: Fixed an issue where instances of ssl.SSLSocket were
      vulnerable to a bypass of the TLS handshake and included
      protections (like certificate verification) and treating sent
      unencrypted data as if it were post-handshake TLS encrypted
      data. Security issue reported as CVE-2023-40217 by Aapo Oksman.
      Patch by Gregory P. Smith.
    - gh-107774: PEP 669 specifies that
      sys.monitoring.register_callback will generate an audit event.
      Pre-releases of Python 3.12 did not generate the audit event.
      This is now fixed.
  - Core and Builtins
    - gh-108520: Fix
      multiprocessing.synchronize.SemLock.__setstate__() to properly
      initialize multiprocessing.synchronize.SemLock._is_fork_ctx.
      This fixes a regression when passing a SemLock accross nested
      processes.
    - Rename multiprocessing.synchronize.SemLock.is_fork_ctx to
      multiprocessing.synchronize.SemLock._is_fork_ctx to avoid
      exposing it as public API.
    - gh-108654: Restore locals shadowed by an inlined comprehension
      if the comprehension raises an exception.
    - gh-108487: Change an assert that would cause a spurious crash in
      a devious case that should only trigger deoptimization.
    - gh-106176: Use a WeakValueDictionary to track the lists
      containing the modules each thread is currently importing. This
      helps avoid a reference leak from keeping the list around longer
      than necessary. Weakrefs are used as GC can’t interrupt the
      cleanup.
    - gh-107901: Fix missing line number on JUMP_BACKWARD at the end
      of a for loop.
    - gh-108390: Raise an exception when setting a non-local event
      (RAISE, EXCEPTION_HANDLED, etc.) in
      sys.monitoring.set_local_events.
    - Fixes crash when tracing in recursive calls to Python classes.
    - gh-91051: Fix abort / segfault when using all eight type watcher
      slots, on platforms where char is signed by default.
    - gh-107724: In pre-release versions of 3.12, up to rc1, the
      sys.monitoring callback function for the PY_THROW event was
      missing the third, exception argument. That is now fixed.
    - gh-107080: Trace refs builds (--with-trace-refs) were crashing
      when used with isolated subinterpreters. The problematic global
      state has been isolated to each interpreter. Other fixing the
      crashes, this change does not affect users.
    - gh-77377: Ensure that multiprocessing synchronization objects
      created in a fork context are not sent to a different process
      created in a spawn context. This changes a segfault into an
      actionable RuntimeError in the parent process.
  - Library
    - gh-108469: ast.unparse() now supports new f-string syntax
      introduced in Python 3.12. Note that the f-string quotes are
      reselected for simplicity under the new syntax. (Patch by Steven
      Sun)
    - gh-108682: Enum: raise TypeError if super().__new__() is called
      from a custom __new__.
    - gh-108295: Fix crashes related to use of weakrefs on
      typing.TypeVar.
    - gh-64662: Fix support for virtual tables in
      sqlite3.Connection.iterdump(). Patch by Aviv Palivoda.
    - gh-108111: Fix a regression introduced in gh-101251 for 3.12,
      resulting in an incorrect offset calculation in
      gzip.GzipFile.seek().
    - gh-105736: Harmonized the pure Python version of OrderedDict
      with the C version. Now, both versions set up their internal
      state in __new__. Formerly, the pure Python version did the set
      up in __init__.
    - gh-108083: Fix bugs in the constructor of sqlite3.Connection and
      sqlite3.Connection.close() where exceptions could be leaked.
      Patch by Erlend E. Aasland.
    - gh-107963: Fix multiprocessing.set_forkserver_preload() to check
      the given list of modules names. Patch by Dong-hee Na.
    - gh-106242: Fixes os.path.normpath() to handle embedded null
      characters without truncating the path.
    - gh-107913: Fix possible losses of errno and winerror values in
      OSError exceptions if they were cleared or modified by the
      cleanup code before creating the exception object.
    - gh-107845: tarfile.data_filter() now takes the location of
      symlinks into account when determining their target, so it will
      no longer reject some valid tarballs with
      LinkOutsideDestinationError.
    - gh-107805: Fix signatures of module-level generated functions in
      turtle.
    - gh-107715: Fix doctest.DocTestFinder.find() in presence of class
      names with special characters. Patch by Gertjan van Zwieten.
    - gh-100814: Passing a callable object as an option value to a
      Tkinter image now raises the expected TclError instead of an
      AttributeError.
    - gh-106684: Close asyncio.StreamWriter when it is not closed by
      application leading to memory leaks. Patch by Kumar Aditya.
    - gh-107396: tarfiles; Fixed use before assignment of
      self.exception for gzip decompression
    - gh-106052: re module: fix the matching of possessive quantifiers
      in the case of a subpattern containing backtracking.
    - gh-100061: Fix a bug that causes wrong matches for regular
      expressions with possessive qualifier.
    - gh-99203: Restore following CPython &lt;= 3.10.5 behavior of
      shutil.make_archive(): do not create an empty archive if
      root_dir is not a directory, and, in that case, raise
      FileNotFoundError or NotADirectoryError regardless of format
      choice. Beyond the brought-back behavior, the function may now
      also raise these exceptions in dry_run mode.
  - Documentation
    - gh-105052: Update timeit doc to specify that time in seconds is just the default.
  - Tests
    - gh-89392: Removed support of test_main() function in tests. They
      now always use normal unittest test runner.
    - gh-108388: Convert test_concurrent_futures to a package of 7
      sub-tests. Patch by Victor Stinner.
    - gh-108388: Split test_multiprocessing_fork,
      test_multiprocessing_forkserver and test_multiprocessing_spawn
      into test packages. Each package is made of 4 sub-tests:
      processes, threads, manager and misc. It allows running more
      tests in parallel and so reduce the total test duration. Patch
      by Victor Stinner.
    - gh-105776: Fix test_cppext when the C compiler command -std=c11
      option: remove -std= options from the compiler command. Patch by
      Victor Stinner.
    - gh-107178: Add the C API test for functions in the Mapping
      Protocol, the Sequence Protocol and some functions in the Object
      Protocol.
  - Build
    - gh-63760: Fix Solaris build: no longer redefine the
      gethostname() function. Solaris defines the function since 2005.
      Patch by Victor Stinner, original patch by Jakub Kulík.
    - gh-107814: When calling find_python.bat with -q it did not
      properly silence the output of nuget. That is now fixed.
  - Windows
    - gh-107565: Update Windows build to use OpenSSL 3.0.10.
    - gh-106242: Fixes realpath() to behave consistently when passed a
      path containing an embedded null character on Windows. In strict
      mode, it now raises OSError instead of the unexpected
      ValueError, and in non-strict mode will make the path absolute.
    - gh-106844: Fix integer overflow and truncating by the null
      character in _winapi.LCMapStringEx() which affects
      ntpath.normcase().
  - macOS
    - gh-107565: Update macOS installer to use OpenSSL 3.0.10.
  - Tools/Demos
    - gh-107565: Update multissltests and GitHub CI workflows to use
      OpenSSL 1.1.1v, 3.0.10, and 3.1.2.
    - gh-95065: Argument Clinic now supports overriding automatically
      generated signature by using directive @text_signature.
  - C API
    - gh-107916: C API functions PyErr_SetFromErrnoWithFilename(),
      PyErr_SetExcFromWindowsErrWithFilename() and
      PyErr_SetFromWindowsErrWithFilename() save now the error code
      before calling PyUnicode_DecodeFSDefault().
    - gh-107915: Such C API functions as PyErr_SetString(),
      PyErr_Format(), PyErr_SetFromErrnoWithFilename() and many others
      no longer crash or ignore errors if it failed to format the
      error message or decode the filename. Instead, they keep a
      corresponding error.
    - gh-107810: Improve DeprecationWarning for uses of PyType_Spec
      with metaclasses that have custom tp_new.
</comment>
    <requestid>1112487</requestid>
  </revision>
  <revision rev="9" vrev="1">
    <srcmd5>f87e6a9e55a3158070bf391aefa2e4a2</srcmd5>
    <version>3.12.0</version>
    <time>1696451453</time>
    <user>anag+factory</user>
    <comment>- Update to the final release of 3.12.0:
  Python 3.12 is the latest stable release of the Python
  programming language, with a mix of changes to the language and
  the standard library. The library changes focus on cleaning up
  deprecated APIs, usability, and correctness. Of note, the
  distutils package has been removed from the standard library.
  Filesystem support in os and pathlib has seen a number of
  improvements, and several modules have better performance.
  The language changes focus on usability, as f-strings have had
  many limitations removed and ‘Did you mean …’ suggestions
  continue to improve. The new type parameter syntax and type
  statement improve ergonomics for using generic types and type
  aliases with static type checkers.
  This article doesn’t attempt to provide a complete
  specification of all new features, but instead gives
  a convenient overview. For full details, you should refer to
  the documentation, such as the Library Reference and Language
  Reference. If you want to understand the complete
  implementation and design rationale for a change, refer to the
  PEP for a particular new feature; but note that PEPs usually
  are not kept up-to-date once a feature has been fully
  implemented.
  - New syntax features:
      - PEP 695, type parameter syntax and the type statement
  - New grammar features:
      - PEP 701, f-strings in the grammar
  - Interpreter improvements:
      - PEP 684, a unique per-interpreter GIL
      - PEP 669, low impact monitoring
      - Improved ‘Did you mean …’ suggestions for NameError,
        ImportError, and SyntaxError exceptions
  - Python data model improvements:
      - PEP 688, using the buffer protocol from Python
  - Significant improvements in the standard library:
      - The pathlib.Path class now supports subclassing
      - The os module received several improvements for Windows
        support
      - A command-line interface has been added to the sqlite3
        module
      - isinstance() checks against runtime-checkable protocols
        enjoy a speed up of between two and 20 times
      - The asyncio package has had a number of performance
        improvements, with some benchmarks showing a 75% speed
        up.
      - A command-line interface has been added to the uuid
        module
      - Due to the changes in PEP 701, producing tokens via the
        tokenize module is up to up to 64% faster.
  - Security improvements:
      - Replace the builtin hashlib implementations of SHA1,
        SHA3, SHA2-384, SHA2-512, and MD5 with formally verified
        code from the HACL* project. These builtin
        implementations remain as fallbacks that are only used
        when OpenSSL does not provide them.
  - C API improvements:
      - PEP 697, unstable C API tier
      - PEP 683, immortal objects
  - CPython implementation improvements:
      - PEP 709, comprehension inlining
      - CPython support for the Linux perf profiler
      - Implement stack overflow protection on supported
        platforms
  - New typing features:
      - PEP 692, using TypedDict to annotate **kwargs
      - PEP 698, typing.override() decorator
  - Important deprecations, removals or restrictions:
      - PEP 623: Remove wstr from Unicode objects in Python’s
        C API, reducing the size of every str object by at least
        8 bytes.
      - PEP 632: Remove the distutils package. See the migration
        guide for advice replacing the APIs it provided. The
        third-party Setuptools package continues to provide
        distutils, if you still require it in Python 3.12 and
        beyond.
      - gh-95299: Do not pre-install setuptools in virtual
        environments created with venv. This means that
        distutils, setuptools, pkg_resources, and easy_install
        will no longer available by default; to access these run
        pip install setuptools in the activated virtual
        environment.
      - The asynchat, asyncore, and imp modules have been
        removed, along with several unittest.TestCase method
        aliases.
- Refresh bluez-devel-vendor.tar.xz from bluez-devel 5.69-1.1.
</comment>
    <requestid>1114870</requestid>
  </revision>
  <revision rev="10" vrev="2">
    <srcmd5>1cfdd943a089a4220758d39350ac3c2c</srcmd5>
    <version>3.12.0</version>
    <time>1700162957</time>
    <user>anag+factory</user>
    <comment>- Remove F00251-change-user-install-location.patch, that patch breaks
  the python-rpm-macros usage with multibuild
</comment>
    <requestid>1126824</requestid>
  </revision>
  <revision rev="11" vrev="1">
    <srcmd5>8e00c2087a64a45de380f467e1145771</srcmd5>
    <version>3.12.1</version>
    <time>1702673403</time>
    <user>anag+factory</user>
    <comment>- Update patch fix_configure_rst.patch
- Update to 3.12.1 (CVE-2023-6507, bsc#1217939):
  - Core and Builtins
    - gh-112125: Fix None.__ne__(None) returning NotImplemented
      instead of False
    - gh-112625: Fixes a bug where a bytearray object could be
      cleared while iterating over an argument in the
      bytearray.join() method that could result in reading memory
      after it was freed.
    - gh-105967: Workaround a bug in Apple’s macOS platform zlib
      library where zlib.crc32() and binascii.crc32() could produce
      incorrect results on multi-gigabyte inputs. Including when
      using zipfile on zips containing large data.
    - gh-112356: Stopped erroneously deleting a LOAD_NULL bytecode
      instruction when optimized twice.
    - gh-111058: Change coro.cr_frame/gen.gi_frame to return None
      after the coroutine/generator has been closed. This fixes a bug
      where getcoroutinestate() and getgeneratorstate() return the
      wrong state for a closed coroutine/generator.
    - gh-112388: Fix an error that was causing the parser to try to
      overwrite tokenizer errors. Patch by pablo Galindo
    - gh-112387: Fix error positions for decoded strings with
      backwards tokenize errors. Patch by Pablo Galindo
    - gh-112367: Avoid undefined behaviour when using the perf
      trampolines by not freeing the code arenas until shutdown.
      Patch by Pablo Galindo
    - gh-112243: Don’t include comments in f-string debug
      expressions. Patch by Pablo Galindo
    - gh-112266: Change docstrings of __dict__ and __weakref__.
    - gh-111654: Fix runtime crash when some error happens in opcode
      LOAD_FROM_DICT_OR_DEREF.
    - gh-109181: Speed up Traceback object creation by lazily compute
      the line number. Patch by Pablo Galindo
    - gh-102388: Fix a bug where iso2022_jp_3 and iso2022_jp_2004
      codecs read out of bounds
    - gh-111366: Fix an issue in the codeop that was causing
      SyntaxError exceptions raised in the presence of invalid syntax
      to not contain precise error messages. Patch by Pablo Galindo
    - gh-111380: Fix a bug that was causing SyntaxWarning to appear
      twice when parsing if invalid syntax is encountered later.
      Patch by Pablo galindo
    - gh-94438: Fix a regression that prevented jumping across is
      None and is not None when debugging. Patch by Savannah
      Ostrowski.
    - gh-110938: Fix error messages for indented blocks with
      functions and classes with generic type parameters. Patch by
      Pablo Galindo
    - gh-109894: Fixed crash due to improperly initialized static
      MemoryError in subinterpreter.
    - gh-110782: Fix crash when typing.TypeVar is constructed with a
      keyword argument. Patch by Jelle Zijlstra.
    - gh-110696: Fix incorrect error message for invalid argument
      unpacking. Patch by Pablo Galindo
    - gh-110543: Fix regression in Python 3.12 where
      types.CodeType.replace() would produce a broken code object if
      called on a module or class code object that contains a
      comprehension. Patch by Jelle Zijlstra.
    - gh-110514: Add PY_THROW to sys.setprofile() events
    - gh-110455: Guard assert(tstate-&gt;thread_id &gt; 0) with #ifndef
      HAVE_PTHREAD_STUBS. This allows for for pydebug builds to work
      under WASI which (currently) lacks thread support.
    - gh-110259: Correctly identify the format spec in f-strings
      (with single or triple quotes) that have multiple lines in the
      expression part and include a formatting spec. Patch by Pablo
      Galindo
    - gh-110237: Fix missing error checks for calls to PyList_Append
      in _PyEval_MatchClass.
    - gh-109889: Fix the compiler’s redundant NOP detection algorithm
      to skip over NOPs with no line number when looking for the next
      instruction’s lineno.
    - gh-109853: sys.path[0] is now set correctly for
      subinterpreters.
    - gh-105716: Subinterpreters now correctly handle the case where
      they have threads running in the background. Before, such
      threads would interfere with cleaning up and destroying them,
      as well as prevent running another script.
    - gh-109793: The main thread no longer exits prematurely when a
      subinterpreter is cleaned up during runtime finalization. The
      bug was a problem particularly because, when triggered, the
      Python process would always return with a 0 exitcode, even if
      it failed.
    - gh-109596: Fix some tokens in the grammar that were incorrectly
      marked as soft keywords. Also fix some repeated rule names and
      ensure that repeated rules are not allowed. Patch by Pablo
      Galindo
    - gh-109351: Fix crash when compiling an invalid AST involving a
      named (walrus) expression.
    - gh-109216: Fix possible memory leak in BUILD_MAP.
    - gh-109207: Fix a SystemError in __repr__ of symtable entry
      object.
    - gh-109179: Fix bug where the C traceback display drops notes
      from SyntaxError.
    - gh-109052: Use the base opcode when comparing code objects to
      avoid interference from instrumentation
    - gh-88943: Improve syntax error for non-ASCII character that
      follows a numerical literal. It now points on the invalid
      non-ASCII character, not on the valid numerical literal.
    - gh-106931: Statically allocated string objects are now interned
      globally instead of per-interpreter. This fixes a situation
      where such a string would only be interned in a single
      interpreter. Normal string objects are unaffected.
  - Library
    - gh-79325: Fix an infinite recursion error in
      tempfile.TemporaryDirectory() cleanup on Windows.
    - gh-112645: Remove deprecation error on passing onerror to
      shutil.rmtree().
    - gh-112618: Fix a caching bug relating to typing.Annotated.
      Annotated[str, True] is no longer identical to Annotated[str,
      1].
    - gh-112334: Fixed a performance regression in 3.12’s subprocess
      on Linux where it would no longer use the fast-path vfork()
      system call when it should have due to a logic bug, instead
      always falling back to the safe but slower fork().
    - Also fixed a related 3.12 security regression: If a value of
      extra_groups=[] was passed to subprocess.Popen or related APIs,
      the underlying setgroups(0, NULL) system call to clear the
      groups list would not be made in the child process prior to
      exec(). This has been assigned CVE-2023-6507.
    - This was identified via code inspection in the process of fixing
      the first bug.
    - gh-110190: Fix ctypes structs with array on Arm platform by
      setting MAX_STRUCT_SIZE to 32 in stgdict. Patch by Diego Russo.
    - gh-112578: Fix a spurious RuntimeWarning when executing the
      zipfile module.
    - gh-112509: Fix edge cases that could cause a key to be present
      in both the __required_keys__ and __optional_keys__ attributes
      of a typing.TypedDict. Patch by Jelle Zijlstra.
    - gh-112414: Fix regression in Python 3.12 where calling repr() on
      a module that had been imported using a custom loader could fail
      with AttributeError. Patch by Alex Waygood.
    - gh-112358: Revert change to struct.Struct initialization that
      broke some cases of subclassing.
    - gh-94722: Fix bug where comparison between instances of DocTest
      fails if one of them has None as its lineno.
    - gh-112105: Make readline.set_completer_delims() work with
      libedit
    - gh-111942: Fix SystemError in the TextIOWrapper constructor with
      non-encodable “errors” argument in non-debug mode.
    - gh-109538: Issue warning message instead of having RuntimeError
      be displayed when event loop has already been closed at
      StreamWriter.__del__().
    - gh-111942: Fix crashes in io.TextIOWrapper.reconfigure() when
      pass invalid arguments, e.g. non-string encoding.
    - gh-111460: curses: restore wide character support (including
      curses.unget_wch() and get_wch()) on macOS, which was
      unavailable due to a regression in Python 3.12.
    - gh-103791: contextlib.suppress now supports suppressing
      exceptions raised as part of a BaseExceptionGroup, in addition
      to the recent support for ExceptionGroup.
    - gh-111804: Remove posix.fallocate() under WASI as the underlying
      posix_fallocate() is not available in WASI preview2.
    - gh-111841: Fix truncating arguments on an embedded null
      character in os.putenv() and os.unsetenv() on Windows.
    - gh-111541: Fix doctest for SyntaxError not-builtin subclasses.
    - gh-110894: Call loop exception handler for exceptions in
      client_connected_cb of asyncio.start_server() so that
      applications can handle it. Patch by Kumar Aditya.
    - gh-111531: Fix reference leaks in bind_class() and bind_all()
      methods of tkinter widgets.
    - gh-111356: Added io.text_encoding(), io.DEFAULT_BUFFER_SIZE, and
      io.IncrementalNewlineDecoder to io.__all__.
    - gh-111342: Fixed typo in math.sumprod().
    - gh-68166: Remove mention of not supported “vsapi” element type
      in tkinter.ttk.Style.element_create(). Add tests for
      element_create() and other ttk.Style methods. Add examples for
      element_create() in the documentation.
    - gh-75666: Fix the behavior of tkinter widget’s unbind() method
      with two arguments. Previously, widget.unbind(sequence, funcid)
      destroyed the current binding for sequence, leaving sequence
      unbound, and deleted the funcid command. Now it removes only
      funcid from the binding for sequence, keeping other commands,
      and deletes the funcid command. It leaves sequence unbound only
      if funcid was the last bound command.
    - gh-79033: Another attempt at fixing
      asyncio.Server.wait_closed(). It now blocks until both
      conditions are true: the server is closed, and there are no more
      active connections. (This means that in some cases where in
      3.12.0 this function would incorrectly have returned
      immediately, it will now block; in particular, when there are no
      active connections but the server hasn’t been closed yet.)
    - gh-111295: Fix time not checking for errors when initializing.
    - gh-111253: Add error checking during _socket module init.
    - gh-111251: Fix _blake2 not checking for errors when
      initializing.
    - gh-111174: Fix crash in io.BytesIO.getbuffer() called repeatedly
      for empty BytesIO.
    - gh-111187: Postpone removal version for
      locale.getdefaultlocale() to Python 3.15.
    - gh-111159: Fix doctest output comparison for exceptions with
      notes.
    - gh-110910: Fix invalid state handling in asyncio.TaskGroup and
      asyncio.Timeout. They now raise proper RuntimeError if they are
      improperly used and are left in consistent state after this.
    - gh-111092: Make turtledemo run without default root enabled.
    - gh-110488: Fix a couple of issues in
      pathlib.PurePath.with_name(): a single dot was incorrectly
      considered a valid name, and in PureWindowsPath, a name with an
      NTFS alternate data stream, like a:b, was incorrectly considered
      invalid.
    - gh-110392: Fix tty.setraw() and tty.setcbreak(): previously they
      returned partially modified list of the original tty attributes.
      tty.cfmakeraw() and tty.cfmakecbreak() now make a copy of the
      list of special characters before modifying it.
    - gh-110590: Fix a bug in _sre.compile() where TypeError would be
      overwritten by OverflowError when the code argument was a list
      of non-ints.
    - gh-65052: Prevent pdb from crashing when trying to display
      undisplayable objects
    - gh-110519: Deprecation warning about non-integer number in
      gettext now alwais refers to the line in the user code where
      gettext function or method is used. Previously it could refer to
      a line in gettext code.
    - gh-110395: Ensure that select.kqueue() objects correctly appear
      as closed in forked children, to prevent operations on an
      invalid file descriptor.
    - gh-110378: contextmanager() and asynccontextmanager() context
      managers now close an invalid underlying generator object that
      yields more then one value.
    - gh-110365: Fix termios.tcsetattr() bug that was overwritting
      existing errors during parsing integers from term list.
    - gh-109653: Fix a Python 3.12 regression in the import time of
      random. Patch by Alex Waygood.
    - gh-110196: Add __reduce__ method to IPv6Address in order to keep
      scope_id
    - gh-110036: On Windows, multiprocessing Popen.terminate() now
      catchs PermissionError and get the process exit code. If the
      process is still running, raise again the PermissionError.
      Otherwise, the process terminated as expected: store its exit
      code. Patch by Victor Stinner.
    - gh-110038: Fixed an issue that caused KqueueSelector.select() to
      not return all the ready events in some cases when a file
      descriptor is registered for both read and write.
    - gh-109631: re functions such as re.findall(), re.split(),
      re.search() and re.sub() which perform short repeated matches
      can now be interrupted by user.
    - gh-109747: Improve errors for unsupported look-behind patterns.
      Now re.error is raised instead of OverflowError or RuntimeError
      for too large width of look-behind pattern.
    - gh-109818: Fix reprlib.recursive_repr() not copying
      __type_params__ from decorated function.
    - gh-109047: concurrent.futures: The executor manager thread now
      catches exceptions when adding an item to the call queue. During
      Python finalization, creating a new thread can now raise
      RuntimeError. Catch the exception and call terminate_broken() in
      this case. Patch by Victor Stinner.
    - gh-109782: Ensure the signature of os.path.isdir() is identical
      on all platforms. Patch by Amin Alaee.
    - gh-109590: shutil.which() will prefer files with an extension in
      PATHEXT if the given mode includes os.X_OK on win32. If no
      PATHEXT match is found, a file without an extension in PATHEXT
      can be returned. This change will have shutil.which() act more
      similarly to previous behavior in Python 3.11.
    - gh-109786: Fix possible reference leaks and crash when re-enter
      the __next__() method of itertools.pairwise.
    - gh-109593: Avoid deadlocking on a reentrant call to the
      multiprocessing resource tracker. Such a reentrant call, though
      unlikely, can happen if a GC pass invokes the finalizer for a
      multiprocessing object such as SemLock.
    - gh-109613: Fix os.stat() and os.DirEntry.stat(): check for
      exceptions. Previously, on Python built in debug mode, these
      functions could trigger a fatal Python error (and abort the
      process) when a function succeeded with an exception set. Patch
      by Victor Stinner.
    - gh-109375: The pdb alias command now prevents registering
      aliases without arguments.
    - gh-107219: Fix a race condition in concurrent.futures. When a
      process in the process pool was terminated abruptly (while the
      future was running or pending), close the connection write end.
      If the call queue is blocked on sending bytes to a worker
      process, closing the connection write end interrupts the send,
      so the queue can be closed. Patch by Victor Stinner.
    - gh-50644: Attempts to pickle or create a shallow or deep copy of
      codecs streams now raise a TypeError. Previously, copying failed
      with a RecursionError, while pickling produced wrong results
      that eventually caused unpickling to fail with a RecursionError.
    - gh-108987: Fix _thread.start_new_thread() race condition. If a
      thread is created during Python finalization, the newly spawned
      thread now exits immediately instead of trying to access freed
      memory and lead to a crash. Patch by Victor Stinner.
    - gh-108791: Improved error handling in pdb command line
      interface, making it produce more concise error messages.
    - gh-105829: Fix concurrent.futures.ProcessPoolExecutor deadlock
    - gh-106584: Fix exit code for unittest if all tests are skipped.
      Patch by Egor Eliseev.
    - gh-102956: Fix returning of empty byte strings after seek in
      zipfile module
    - gh-84867: unittest.TestLoader no longer loads test cases from
      exact unittest.TestCase and unittest.FunctionTestCase classes.
    - gh-91133: Fix a bug in tempfile.TemporaryDirectory cleanup,
      which now no longer dereferences symlinks when working around
      file system permission errors.
    - gh-73561: Omit the interface scope from an IPv6 address when
      used as Host header by http.client.
    - gh-86826: zipinfo now supports the full range of values in the
      TZ string determined by RFC 8536 and detects all invalid
      formats. Both Python and C implementations now raise exceptions
      of the same type on invalid data.
    - bpo-43153: On Windows, tempfile.TemporaryDirectory previously
      masked a PermissionError with NotADirectoryError during
      directory cleanup. It now correctly raises PermissionError if
      errors are not ignored. Patch by Andrei Kulakov and Ken Jin.
    - bpo-35332: The shutil.rmtree() function now ignores errors when
      calling os.close() when ignore_errors is True, and os.close() no
      longer retried after error.
    - bpo-41422: Fixed memory leaks of pickle.Pickler and
      pickle.Unpickler involving cyclic references via the internal
      memo mapping.
    - bpo-40262: The ssl.SSLSocket.recv_into() method no longer
      requires the buffer argument to implement __len__ and supports
      buffers with arbitrary item size.
  - Documentation
    - gh-111699: Relocate smtpd deprecation notice to its own section
      rather than under locale in What’s New in Python 3.12 document
    - gh-108826: dis module command-line interface is now mentioned in
      documentation. Test- s
    - gh-112769: The tests now correctly compare zlib version when
      zlib.ZLIB_RUNTIME_VERSION contains non-integer suffixes. For
      example zlib-ng defines the version as 1.3.0.zlib-ng.
    - gh-110367: Make regrtest --verbose3 option compatible with
      --huntrleaks -jN options. The ./python -m test -j1 -R 3:3
      --verbose3 command now works as expected. Patch by Victor
      Stinner.
    - gh-111165: Remove no longer used functions run_unittest() and
      run_doctest() from the test.support module.
    - gh-110932: Fix regrtest if the SOURCE_DATE_EPOCH environment
      variable is defined: use the variable value as the random seed.
      Patch by Victor Stinner.
    - gh-110995: test_gdb: Fix detection of gdb built without Python
      scripting support. Patch by Victor Stinner.
    - gh-110918: Test case matching patterns specified by options
      --match, --ignore, --matchfile and --ignorefile are now tested
      in the order of specification, and the last match determines
      whether the test case be run or ignored.
    - gh-110647: Fix test_stress_modifying_handlers() of test_signal.
      Patch by Victor Stinner.
    - gh-103053: Fix test_tools.test_freeze on FreeBSD: run “make
      distclean” instead of “make clean” in the copied source
      directory to remove also the “python” program. Patch by Victor
      Stinner.
    - gh-110167: Fix a deadlock in test_socket when server fails with
      a timeout but the client is still running in its thread. Don’t
      hold a lock to call cleanup functions in doCleanups(). One of
      the cleanup function waits until the client completes, whereas
      the client could deadlock if it called addCleanup() in such
      situation. Patch by Victor Stinner.
    - gh-110388: Add tests for tty.
    - gh-81002: Add tests for termios.
    - gh-110267: Add tests for pickling and copying PyStructSequence
      objects. Patched by Xuehai Pan.
    - gh-110031: Skip test_threading tests using thread+fork if Python
      is built with Address Sanitizer (ASAN). Patch by Victor Stinner.
    - gh-110088: Fix test_asyncio timeouts: don’t measure the maximum
      duration, a test should not measure a CI performance. Only
      measure the minimum duration when a task has a timeout or delay.
      Add CLOCK_RES to test_asyncio.utils. Patch by Victor Stinner.
    - gh-109974: Fix race conditions in test_threading lock tests.
      Wait until a condition is met rather than using time.sleep()
      with a hardcoded number of seconds. Patch by Victor Stinner.
    - gh-110033: Fix test_interprocess_signal() of test_signal. Make
      sure that the subprocess.Popen object is deleted before the test
      raising an exception in a signal handler. Otherwise,
      Popen.__del__() can get the exception which is logged as
      Exception ignored in: ... and the test fails. Patch by Victor
      Stinner.
    - gh-109594: Fix test_timeout() of
      test_concurrent_futures.test_wait. Remove the future which may
      or may not complete depending if it takes longer than the
      timeout ot not. Keep the second future which does not complete
      before wait() timeout. Patch by Victor Stinner.
    - gh-109972: Split test_gdb.py file into a test_gdb package made
      of multiple tests, so tests can now be run in parallel. Patch by
      Victor Stinner.
    - gh-103053: Skip test_freeze_simple_script() of
      test_tools.test_freeze if Python is built with ./configure
      --enable-optimizations, which means with Profile Guided
      Optimization (PGO): it just makes the test too slow. The freeze
      tool is tested by many other CIs with other (faster) compiler
      flags. Patch by Victor Stinner.
    - gh-109580: Skip test_perf_profiler if Python is built with ASAN,
      MSAN or UBSAN sanitizer. Python does crash randomly in this test
      on such build. Patch by Victor Stinner.
    - gh-104736: Fix test_gdb on Python built with LLVM clang 16 on
      Linux ppc64le (ex: Fedora 38). Search patterns in gdb “bt”
      command output to detect when gdb fails to retrieve the
      traceback. For example, skip a test if Backtrace stopped: frame
      did not save the PC is found. Patch by Victor Stinner.
    - gh-108927: Fixed order dependence in running tests in the same
      process when a test that has submodules (e.g. test_importlib)
      follows a test that imports its submodule (e.g.
      test_importlib.util) and precedes a test (e.g. test_unittest or
      test_compileall) that uses that submodule.
  - Build
    - gh-112088: Add Tools/build/regen-configure.sh script to
      regenerate the configure with an Ubuntu container image. The
      quay.io/tiran/cpython_autoconf:271 container image
      (tiran/cpython_autoconf) is no longer used. Patch by Victor
      Stinner.
    - gh-111046: For wasi-threads, memory is now exported to fix
      compatibility issues with some wasm runtimes.
    - gh-103053: “make check-clean-src” now also checks if the
      “python” program is found in the source directory: fail with an
      error if it does exist. Patch by Victor Stinner.
    - gh-109191: Fix compile error when building with recent versions
      of libedit.
  - IDLE
    - bpo-35668: Add docstrings to the IDLE debugger module. Fix two
      bugs: initialize Idb.botframe (should be in Bdb); in
      Idb.in_rpc_code, check whether prev_frame is None before trying
      to use it. Greatly expand test_debugger.
  - C API
    - gh-106560: Fix redundant declarations in the public C API.
      Declare PyBool_Type and PyLong_Type only once. Patch by Victor
      Stinner.
    - gh-112438: Fix support of format units “es”, “et”, “es#”, and
      “et#” in nested tuples in PyArg_ParseTuple()-like functions.
    - gh-109521: PyImport_GetImporter() now sets RuntimeError if it
      fails to get sys.path_hooks or sys.path_importer_cache or they
      are not list and dict correspondingly. Previously it could
      return NULL without setting error in obscure cases, crash or
      raise SystemError if these attributes have wrong type.
</comment>
    <requestid>1133398</requestid>
  </revision>
  <revision rev="12" vrev="1">
    <srcmd5>5ded5a8bbcfb43b7861c2f68555a2950</srcmd5>
    <version>3.12.2</version>
    <time>1707519120</time>
    <user>anag+factory</user>
    <comment></comment>
    <requestid>1145177</requestid>
  </revision>
  <revision rev="13" vrev="2">
    <srcmd5>d86221496a4a6ca0c71e74dbbc74f968</srcmd5>
    <version>3.12.2</version>
    <time>1708027159</time>
    <user>anag+factory</user>
    <comment>Forwarded request #1146789 from dgarcia

- Add upstream patch libexpat260.patch, Fix tests for XMLPullParser
    with Expat 2.6.0, gh#python/cpython#115288</comment>
    <requestid>1146839</requestid>
  </revision>
  <revision rev="14" vrev="3">
    <srcmd5>b2791eee2ab4b7e36cc3290a0812860d</srcmd5>
    <version>3.12.2</version>
    <time>1708631726</time>
    <user>anag+factory</user>
    <comment>- Switch to %%autopatch. Let’s try it as an experiment, and if we
  need conditional patch, we should put condition inside of it.
- Remove double definition of /usr/bin/idle%%{version} in
  %%files.
</comment>
    <requestid>1148455</requestid>
  </revision>
  <revision rev="15" vrev="4">
    <srcmd5>588634c72e3aa060f5586f59717f400d</srcmd5>
    <version>3.12.2</version>
    <time>1709493515</time>
    <user>dimstar_suse</user>
    <comment>- (bsc#1219666, CVE-2023-6597) Add
  CVE-2023-6597-TempDir-cleaning-symlink.patch (patch from
  gh#python/cpython!99930) fixing symlink bug in cleanup of
  tempfile.TemporaryDirectory.
</comment>
    <requestid>1153616</requestid>
  </revision>
  <revision rev="16" vrev="5">
    <srcmd5>bd11b693c952a44c131c7ec63dc996a8</srcmd5>
    <version>3.12.2</version>
    <time>1710434558</time>
    <user>anag+factory</user>
    <comment>Automatic submission by obs-autosubmit</comment>
    <requestid>1157646</requestid>
  </revision>
  <revision rev="17" vrev="1">
    <srcmd5>cf955bf219b9b7016fe8d3207afc34f1</srcmd5>
    <version>3.12.3</version>
    <time>1713891303</time>
    <user>anag+factory</user>
    <comment></comment>
    <requestid>1168659</requestid>
  </revision>
  <revision rev="18" vrev="1">
    <srcmd5>b9d2fb63b2fb5b44f4c83a76c677706d</srcmd5>
    <version>3.12.5</version>
    <time>1724938947</time>
    <user>dimstar_suse</user>
    <comment>- Update to 3.12.5:
  - Tests
    - gh-59022: Add tests for pkgutil.extend_path(). Patch by
      Andreas Stocker.
    - gh-99242: os.getloadavg() may throw OSError when
      running regression tests under certain conditions (e.g.
      chroot). This error is now caught and ignored, since
      reporting load average is optional.
    - gh-121084: Fix test_typing random leaks. Clear typing ABC
      caches when running tests for refleaks (-R option): call
      _abc_caches_clear() on typing abstract classes and their
      subclasses. Patch by Victor Stinner.
    - gh-121160: Add a test for
      readline.set_history_length(). Note that this test may fail
      on readline libraries.
    - gh-121200: Fix test_expanduser_pwd2() of
      test_posixpath. Call getpwnam() to get pw_dir, since it
      can be different than getpwall() pw_dir. Patch by Victor
      Stinner.
    - gh-121188: When creating the JUnit XML file, regrtest
      now escapes characters which are invalid in XML, such
      as the chr(27) control character used in ANSI escape
      sequences. Patch by Victor Stinner.
  - Security
    - gh-121957: Fixed missing audit events around interactive
      use of Python, now also properly firing for python -i, as
      well as for python -m asyncio. The event in question is
      cpython.run_stdin.
    - gh-122133: Authenticate the socket connection for the
      socket.socketpair() fallback on platforms where AF_UNIX is</comment>
    <requestid>1192365</requestid>
  </revision>
  <revision rev="19" vrev="2">
    <srcmd5>e3f8091b22923d4b9ad9d1e4a1641a31</srcmd5>
    <version>3.12.5</version>
    <time>1725017140</time>
    <user>dimstar_suse</user>
    <comment>- Add CVE-2024-8088-inf-loop-zipfile_Path.patch to prevent
  malformed payload to cause infinite loops in zipfile.Path
  (bsc#1229704, CVE-2024-8088).
</comment>
    <requestid>1197474</requestid>
  </revision>
  <revision rev="20" vrev="1">
    <srcmd5>ede833573c6aa71713c67f9bbf3457fa</srcmd5>
    <version>3.12.6</version>
    <time>1727369561</time>
    <user>anag+factory</user>
    <comment>- Add doc-py38-to-py36.patch making building documentation
  compatible with Python 3.6, which runs Sphinx on SLE.
- Update to 3.12.6:
  - Tests
    - gh-101525: Skip test_gdb if the binary is relocated by
      BOLT. Patch by Donghee Na.
  - Security
    - gh-123678: Upgrade libexpat to 2.6.3
    - gh-121285: Remove backtracking from tarfile header parsing
      for hdrcharset, PAX, and GNU sparse headers (bsc#1230227,
      CVE-2024-6232).
  - Library
    - gh-123270: Applied a more surgical fix for malformed
      payloads in zipfile.Path causing infinite loops (gh-122905)
      without breaking contents using legitimate characters
      (bsc#1229704, CVE-2024-8088).
    - gh-123213: xml.etree.ElementTree.Element.extend() and
      Element assignment no longer hide the internal exception if
      an erronous generator is passed. Patch by Bar Harel.
    - gh-85110: Preserve relative path in URL without netloc in
      urllib.parse.urlunsplit() and urllib.parse.urlunparse().
    - gh-123067: Fix quadratic complexity in parsing &quot;-quoted
      cookie values with backslashes by http.cookies
      (bsc#1229596, CVE-2024-7592)
    - gh-122903: zipfile.Path.glob now correctly matches
      directories instead of silently omitting them.
    - gh-122905: zipfile.Path objects now sanitize names from the
      zipfile.
    - gh-122695: Fixed double-free when using gc.get_referents()
      with a freed asyncio.Future iterator.
    - gh-116263: logging.handlers.RotatingFileHandler no longer
      rolls over empty log files.
    - gh-118814: Fix the typing.TypeVar constructor when name is
      passed by keyword.
    - gh-122478: Remove internal frames from tracebacks
      shown in code.InteractiveInterpreter with non-default
      sys.excepthook(). Save correct tracebacks in
      sys.last_traceback and update __traceback__ attribute of
      sys.last_value and sys.last_exc.
    - gh-113785: csv now correctly parses numeric fields (when
      used with csv.QUOTE_NONNUMERIC) which start with an escape
      character.
    - gh-112182: asyncio.futures.Future.set_exception() now
      transforms StopIteration into RuntimeError instead of
      hanging or other misbehavior. Patch contributed by Jamie
      Phan.
    - gh-108172: webbrowser honors OS preferred browser on Linux
      when its desktop entry name contains the text of a known
      browser name.
    - gh-102988: email.utils.getaddresses() and
      email.utils.parseaddr() now return ('', '') 2-tuples
      in more situations where invalid email addresses are
      encountered instead of potentially inaccurate values. Add
      optional strict parameter to these two functions: use
      strict=False to get the old behavior, accept malformed
      inputs. getattr(email.utils, 'supports_strict_parsing',
      False) can be use to check if the strict paramater is
      available. Patch by Thomas Dwyer and Victor Stinner to
      improve the CVE-2023-27043 fix.
    - gh-99437: runpy.run_path() now decodes path-like objects,
      making sure __file__ and sys.argv[0] of the module being
      run are always strings.
  - IDLE
    - gh-120083: Add explicit black IDLE Hovertip foreground
      color needed for recent macOS. Fixes Sonoma showing
      unreadable white on pale yellow. Patch by John Riggles.
  - Core and Builtins
    - gh-123321: Prevent Parser/myreadline race condition from
      segfaulting on multi-threaded use. Patch by Bar Harel and
      Amit Wienner.
    - gh-122982: Extend the deprecation period for bool inversion
      (~) by two years.
    - gh-123229: Fix valgrind warning by initializing the
      f-string buffers to 0 in the tokenizer. Patch by Pablo
      Galindo
    - gh-123142: Fix too-wide source location in exception
      tracebacks coming from broken iterables in comprehensions.
    - gh-123048: Fix a bug where pattern matching code could emit
      a JUMP_FORWARD with no source location.
    - gh-123083: Fix a potential use-after-free in
      STORE_ATTR_WITH_HINT.
    - gh-122527: Fix a crash that occurred when a
      PyStructSequence was deallocated after its type’s
      dictionary was cleared by the GC. The type’s tp_basicsize
      now accounts for non-sequence fields that aren’t included
      in the Py_SIZE of the sequence.
    - gh-93691: Fix source locations of instructions generated
      for with statements.
  - Build
    - gh-123297: Propagate the value of LDFLAGS to LDCXXSHARED in
      sysconfig. Patch by Pablo Galindo
- Remove upstreamed patches:
  - CVE-2023-27043-email-parsing-errors.patch
  - CVE-2024-8088-inf-loop-zipfile_Path.patch
  - CVE-2023-6597-TempDir-cleaning-symlink.patch
  - gh120226-fix-sendfile-test-kernel-610.patch
- Add gh120226-fix-sendfile-test-kernel-610.patch to avoid
  failing test_sendfile_close_peer_in_the_middle_of_receiving
  tests on Linux &gt;= 6.10 (GH-120227).
</comment>
    <requestid>1200888</requestid>
  </revision>
  <revision rev="21" vrev="2">
    <srcmd5>001b1b5242b68458ce2515636a312308</srcmd5>
    <version>3.12.6</version>
    <time>1727795497</time>
    <user>anag+factory</user>
    <comment></comment>
    <requestid>1204807</requestid>
  </revision>
  <revision rev="22" vrev="1">
    <srcmd5>e58ff698eb6c3d722256b4b3964f6ea5</srcmd5>
    <version>3.12.7</version>
    <time>1728229903</time>
    <user>anag+factory</user>
    <comment>- Update to 3.12.7:
  - Tests
    - gh-124378: Updated test_ttk to pass with Tcl/Tk 8.6.15.
  - Security
    - gh-122792: Changed IPv4-mapped ipaddress.IPv6Address to
      consistently use the mapped IPv4 address value for deciding
      properties. Properties which have their behavior fixed are
      is_multicast, is_reserved, is_link_local, is_global, and
      is_unspecified.
  - Library
    - gh-116850: Fix argparse for namespaces with not directly
      writable dict (e.g. classes).
    - gh-58573: Fix conflicts between abbreviated long options in
      the parent parser and subparsers in argparse.
    - gh-61181: Fix support of choices with string value in
      argparse. Substrings of the specified string no longer
      considered valid values.
    - gh-80259: Fix argparse support of positional arguments with
      nargs='?', default=argparse.SUPPRESS and specified type.
    - gh-124498: Fix typing.TypeAliasType not to be generic, when
      type_params is an empty tuple.
    - gh-124345: argparse vim supports abbreviated single-dash
      long options separated by = from its value.
    - gh-104860: Fix disallowing abbreviation of single-dash long
      options in argparse with allow_abbrev=False.
    - gh-63143: Fix parsing mutually exclusive arguments in
      argparse. Arguments with the value identical to the default
      value (e.g. booleans, small integers, empty or 1-character
      strings) are no longer considered “not present”.
    - gh-72795: Positional arguments with nargs equal to '*' or</comment>
    <requestid>1205549</requestid>
  </revision>
  <revision rev="23" vrev="2">
    <srcmd5>450340f8d92873acc77ec1984a49ba80</srcmd5>
    <version>3.12.7</version>
    <time>1730614622</time>
    <user>dimstar_suse</user>
    <comment>- Add CVE-2024-9287-venv_path_unquoted.patch to properly quote
  path names provided when creating a virtual environment
  (bsc#1232241, CVE-2024-9287)
</comment>
    <requestid>1220158</requestid>
  </revision>
  <revision rev="24" vrev="3">
    <srcmd5>842e074761d7fdb02ed3aaac258e1047</srcmd5>
    <version>3.12.7</version>
    <time>1731681461</time>
    <user>anag+factory</user>
    <comment>- Remove -IVendor/ from python-config boo#1231795
</comment>
    <requestid>1224261</requestid>
  </revision>
  <revision rev="25" vrev="4">
    <srcmd5>b322fb5a8c7cc89f5a96971c8e135e7b</srcmd5>
    <version>3.12.7</version>
    <time>1732969641</time>
    <user>anag+factory</user>
    <comment>- Update doc-py38-to-py36.patch to include str.removeprefix
  replacement.
</comment>
    <requestid>1227202</requestid>
  </revision>
  <revision rev="26" vrev="1">
    <srcmd5>138319888085061b34d44ada1d699fb4</srcmd5>
    <version>3.12.8</version>
    <time>1734125585</time>
    <user>anag+factory</user>
    <comment>- Add CVE-2024-12254-unbound-mem-buffering-SelectorSocketTransport.writelines.patch
  preventing exhaustion of memory (gh#python/cpython#127655,
  bsc#1234290, CVE-2024-12254).
- Update to 3.12.8:
  - Tools/Demos
    - gh-126807: Fix extraction warnings in pygettext.py caused
      by mistaking function definitions for function calls.
  - Tests
    - gh-126909: Fix test_os extended attribute tests to work on
      filesystems with 1 KiB xattr size limit.
    - gh-125041: Re-enable skipped tests for zlib on the
      s390x architecture: only skip checks of the compressed
      bytes, which can be different between zlib’s software
      implementation and the hardware-accelerated implementation.
    - gh-124295: Add translation tests to the argparse module.
  - Security
    - gh-126623: Upgrade libexpat to 2.6.4
  - Library
    - gh-127303: Publicly expose EXACT_TOKEN_TYPES in
      token.__all__.
    - gh-123967: Fix faulthandler for trampoline frames. If the
      top-most frame is a trampoline frame, skip it. Patch by
      Victor Stinner.
    - gh-127182: Fix io.StringIO.__setstate__() crash, when None
      was passed as the first value.
    - gh-127217: Fix urllib.request.pathname2url() for paths
      starting with multiple slashes on Posix.
    - gh-127035: Fix shutil.which on Windows. Now it looks at
      direct match if and only if the command ends with a PATHEXT
      extension or X_OK is not in mode. Support extensionless
      files if “.” is in PATHEXT. Support PATHEXT extensions that
      end with a dot.
    - gh-127078: Fix issue where urllib.request.url2pathname()
      failed to discard an extra slash before a UNC drive in the
      URL path on Windows.
    - gh-126766: Fix issue where urllib.request.url2pathname()
      failed to discard any ‘localhost’ authority present in the
      URL.
    - gh-126997: Fix support of STRING and GLOBAL opcodes with
      non-ASCII arguments in pickletools. pickletools.dis()
      now outputs non-ASCII bytes in STRING, BINSTRING and
      SHORT_BINSTRING arguments as escaped (\xXX).
    - gh-126618: Fix the representation of itertools.count
      objects when the count value is sys.maxsize.
    - gh-85168: Fix issue where urllib.request.url2pathname() and
      pathname2url() always used UTF-8 when quoting and unquoting
      file URIs. They now use the filesystem encoding and error
      handler.
    - gh-67877: Fix memory leaks when regular expression matching
      terminates abruptly, either because of a signal or because
      memory allocation fails.
    - gh-126789: Fixed the values of sysconfig.get_config_vars(),
      sysconfig.get_paths(), and their siblings when the site
      initialization happens after sysconfig has built a cache
      for sysconfig.get_config_vars().
    - gh-126188: Update bundled pip to 24.3.1
    - gh-126766: Fix issue where urllib.request.url2pathname()
      failed to discard two leading slashes introducing an empty
      authority section.
    - gh-126727: locale.nl_langinfo(locale.ERA) now returns
      multiple era description segments separated by
      semicolons. Previously it only returned the first segment
      on platforms with Glibc.
    - gh-126699: Allow collections.abc.AsyncIterator to be a base
      for Protocols.
    - gh-104745: Limit starting a patcher (from
      unittest.mock.patch() or unittest.mock.patch.object()) more
      than once without stopping it
    - gh-126595: Fix a crash when instantiating itertools.count
      with an initial count of sys.maxsize on debug builds. Patch
      by Bénédikt Tran.
    - gh-120423: Fix issue where urllib.request.pathname2url()
      mishandled Windows paths with embedded forward slashes.
    - gh-126565: Improve performances of zipfile.Path.open() for
      non-reading modes.
    - gh-126505: Fix bugs in compiling case-insensitive regular
      expressions with character classes containing non-BMP
      characters: upper-case non-BMP character did was ignored
      and the ASCII flag was ignored when matching a character
      range whose upper bound is beyond the BMP region.
    - gh-117378: Fixed the multiprocessing &quot;forkserver&quot;
      start method forkserver process to correctly inherit
      the parent’s sys.path during the importing of
      multiprocessing.set_forkserver_preload() modules in the
      same manner as sys.path is configured in workers before
      executing work items.
      This bug caused some forkserver module preloading to silently
      fail to preload. This manifested as a performance degration
      in child processes when the sys.path was required due to
      additional repeated work in every worker.
      It could also have a side effect of &quot;&quot; remaining in
      sys.path during forkserver preload imports instead of the
      absolute path from os.getcwd() at multiprocessing import time
      used in the worker sys.path.
      The sys.path differences between phases in the child
      process could potentially have caused preload to import incorrect
      things from the wrong location. We are unaware of that actually
      having happened in practice.
    - gh-125679: The multiprocessing.Lock and
      multiprocessing.RLock repr values no longer say “unknown”
      on macOS.
    - gh-126476: Raise calendar.IllegalMonthError (now a subclass
      of IndexError) for calendar.month() when the input month is
      not correct.
    - gh-126489: The Python implementation of pickle no longer
      calls pickle.Pickler.persistent_id() for the result of
      persistent_id().
    - gh-126303: Fix pickling and copying of os.sched_param
      objects.
    - gh-126138: Fix a use-after-free crash on asyncio.Task
      objects whose underlying coroutine yields an object that
      implements an evil __getattribute__(). Patch by Nico
      Posada.
    - gh-126220: Fix crash in cProfile.Profile and
      _lsprof.Profiler when their callbacks were directly called
      with 0 arguments.
    - gh-126212: Fix issue where urllib.request.pathname2url()
      and url2pathname() removed slashes from Windows DOS drive
      paths and URLs.
    - gh-126205: Fix issue where urllib.request.pathname2url()
      generated URLs beginning with four slashes (rather than
      two) when given a Windows UNC path.
    - gh-126105: Fix a crash in ast when the ast.AST._fields
      attribute is deleted.
    - gh-126106: Fixes a possible NULL pointer dereference in
      ssl.
    - gh-126080: Fix a use-after-free crash on asyncio.Task
      objects for which the underlying event loop implements an
      evil __getattribute__(). Reported by Nico-Posada. Patch by
      Bénédikt Tran.
    - gh-126083: Fixed a reference leak in asyncio.Task objects
      when reinitializing the same object with a non-None
      context. Patch by Nico Posada.
    - gh-125984: Fix use-after-free crashes on asyncio.Future
      objects for which the underlying event loop implements an
      evil __getattribute__(). Reported by Nico-Posada. Patch by
      Bénédikt Tran.
    - gh-125969: Fix an out-of-bounds crash when an evil
      asyncio.loop.call_soon() mutates the length of the internal
      callbacks list. Patch by Bénédikt Tran.
    - gh-125966: Fix a use-after-free crash in
      asyncio.Future.remove_done_callback(). Patch by Bénédikt
      Tran.
    - gh-125789: Fix possible crash when mutating list of
      callbacks returned by asyncio.Future._callbacks. It
      now always returns a new copy in C implementation
      _asyncio. Patch by Kumar Aditya.
    - gh-124452: Fix an issue in
      email.policy.EmailPolicy.header_source_parse() and
      email.policy.Compat32.header_source_parse() that introduced
      spurious leading whitespaces into header values when the
      header includes a newline character after the header name
      delimiter (:) and before the value.
    - gh-125884: Fixed the bug for pdb where it can’t set
      breakpoints on functions with certain annotations.
    - gh-125355: Fix several bugs in
      argparse.ArgumentParser.parse_intermixed_args().
        The parser no longer changes temporarily during parsing.
        Default values are not processed twice.
        Required mutually exclusive groups containing positional
        arguments are now supported.
        The missing arguments report now includes the names of
        all required optional and positional arguments.
        Unknown options can be intermixed with positional
        arguments in parse_known_intermixed_args().
    - gh-125682: Reject non-ASCII digits in the Python
      implementation of json.loads() conforming to the JSON
      specification.
    - gh-125660: Reject invalid unicode escapes for Python
      implementation of json.loads().
    - gh-125259: Fix the notes removal logic for errors thrown in
      enum initialization.
    - gh-125519: Improve traceback if importlib.reload() is
      called with an object that is not a module. Patch by Alex
      Waygood.
    - gh-125451: Fix deadlock when
      concurrent.futures.ProcessPoolExecutor shuts down
      concurrently with an error when feeding a job to a worker
      process.
    - gh-125422: Fixed the bug where pdb and bdb can step into
      the bottom caller frame.
    - gh-100141: Fixed the bug where pdb will be stuck in an
      infinite loop when debugging an empty file.
    - gh-53203: Fix time.strptime() for %c, %x and %X formats
      in many locales that use non-ASCII digits, like Persian,
      Burmese, Odia and Shan.
    - gh-125254: Fix a bug where ArgumentError includes the
      incorrect ambiguous option in argparse.
    - gh-61011: Fix inheritance of nested mutually
      exclusive groups from parent parser in
      argparse.ArgumentParser. Previously, all nested mutually
      exclusive groups lost their connection to the group
      containing them and were displayed as belonging directly to
      the parser.
    - gh-52551: Fix encoding issues in time.strftime(), the
      strftime() method of the datetime classes datetime, date
      and time and formatting of these classes. Characters
      not encodable in the current locale are now acceptable
      in the format string. Surrogate pairs and sequence
      of surrogatescape-encoded bytes are no longer
      recombinated. Embedded null character no longer terminates
      the format string.
    - gh-125118: Don’t copy arbitrary values to _Bool in the
      struct module.
    - gh-125069: Fix an issue where providing a pathlib.PurePath
      object as an initializer argument to a second PurePath
      object with a different flavour resulted in arguments to
      the former object’s initializer being joined by the latter
      object’s flavour.
    - gh-124969: Fix locale.nl_langinfo(locale.ALT_DIGITS) on
      platforms with glibc. Now it returns a string consisting of
      up to 100 semicolon-separated symbols (an empty string in
      most locales) on all Posix platforms. Previously it only
      returned the first symbol or an empty string.
    - gh-124958: Fix refcycles in exceptions raised from
      asyncio.TaskGroup and the python implementation of
      asyncio.Future
    - gh-53203: Fix time.strptime() for %c and %x formats in many
      locales: Arabic, Bislama, Breton, Bodo, Kashubian, Chuvash,
      Estonian, French, Irish, Ge’ez, Gurajati, Manx Gaelic,
      Hebrew, Hindi, Chhattisgarhi, Haitian Kreyol, Japanese,
      Kannada, Korean, Marathi, Malay, Norwegian, Nynorsk,
      Punjabi, Rajasthani, Tok Pisin, Yoruba, Yue Chinese,
      Yau/Nungon and Chinese.
    - gh-124917: Allow calling os.path.exists() and
      os.path.lexists() with keyword arguments on Windows. Fixes
      a regression in 3.12.4.
    - gh-124653: Fix detection of the minimal Queue API needed by
      the logging module. Patch by Bénédikt Tran.
    - gh-124858: Fix reference cycles left in tracebacks
      in asyncio.open_connection() when used with
      happy_eyeballs_delay
    - gh-124390: Fixed AssertionError when using
      asyncio.staggered.staggered_race() with
      asyncio.eager_task_factory.
    - gh-124651: Properly quote template strings in venv
      activation scripts.
    - gh-124594: All asyncio REPL prompts run in the same
      context. Contributed by Bartosz Sławecki.
    - gh-120378: Fix a crash related to an integer overflow in
      curses.resizeterm() and curses.resize_term().
    - gh-123884: Fixed bug in itertools.tee() handling of other
      tee inputs (a tee in a tee). The output now has the
      promised n independent new iterators. Formerly, the first
      iterator was identical (not independent) to the input
      iterator. This would sometimes give surprising results.
    - gh-123978: Remove broken time.thread_time() and
      time.thread_time_ns() on NetBSD.
    - gh-124008: Fix possible crash (in debug build), incorrect
      output or returning incorrect value from raw binary write()
      when writing to console on Windows.
    - gh-123370: Fix the canvas not clearing after running
      turtledemo clock.
    - gh-120754: Update unbounded read calls in zipfile to
      specify an explicit size putting a limit on how much data
      they may read. This also updates handling around ZIP max
      comment size to match the standard instead of reading
      comments that are one byte too long.
    - gh-70764: Fixed an issue where inspect.getclosurevars()
      would incorrectly classify an attribute name as a global
      variable when the name exists both as an attribute name and
      a global variable.
    - gh-119826: Always return an absolute path for
      os.path.abspath() on Windows.
    - gh-117766: Always use str() to print choices in argparse.
    - gh-101955: Fix SystemError when match regular expression
      pattern containing some combination of possessive
      quantifier, alternative and capture group.
    - gh-88110: Fixed multiprocessing.Process reporting a
      .exitcode of 1 even on success when using the &quot;fork&quot; start
      method while using a concurrent.futures.ThreadPoolExecutor.
    - gh-71936: Fix a race condition in
      multiprocessing.pool.Pool.
    - bpo-46128: Strip unittest.IsolatedAsyncioTestCase stack
      frames from reported stacktraces.
    - bpo-14074: Fix argparse metavar processing to allow
      positional arguments to have a tuple metavar.
  - IDLE
    - gh-122392: Increase currently inadequate vertical spacing
      for the IDLE browsers (path, module, and stack) on
      high-resolution monitors.
  - Documentation
    - gh-125277: Require Sphinx 7.2.6 or later to build the
      Python documentation. Patch by Adam Turner.
    - gh-125018: The importlib.metadata documentation now
      includes semantic cross-reference targets for the
      significant documented APIs. This means intersphinx
      references like importlib.metadata.version() will now work
      as expected.
    - gh-121277: Writers of CPython’s documentation can now use
      next as the version for the versionchanged, versionadded,
      deprecated directives.
    - gh-60712: Include the object type in the lists of
      documented types. Change by Furkan Onder and Martin Panter.
  - Core and Builtins
    - gh-113841: Fix possible undefined behavior division by zero
      in complex’s _Py_c_pow().
    - gh-126341: Now ValueError is raised instead of SystemError
      when trying to iterate over a released memoryview object.
    - gh-126066: Fix importlib to not write an incomplete
      .pyc files when a ulimit or some other operating system
      mechanism is preventing the write to go through fully.
    - gh-126139: Provide better error location when attempting to
      use a future statement with an unknown future feature.
    - gh-125008: Fix tokenize.untokenize() producing invalid
      syntax for double braces preceded by certain escape
      characters.
    - gh-123378: Fix a crash in the __str__() method of
      UnicodeError objects when the UnicodeError.start and
      UnicodeError.end values are invalid or out-of-range. Patch
      by Bénédikt Tran.
    - gh-116510: Fix a crash caused by immortal interned strings
      being shared between sub-interpreters that use basic
      single-phase init. In that case, the string can be used
      by an interpreter that outlives the interpreter that
      created and interned it. For interpreters that share
      obmalloc state, also share the interned dict with the main
      interpreter.
    - gh-118950: Fix bug where SSLProtocol.connection_lost wasn’t
      getting called when OSError was thrown on writing to
      socket.
    - gh-113570: Fixed a bug in reprlib.repr where it incorrectly
      called the repr method on shadowed Python built-in types.
    - gh-109746: If _thread.start_new_thread() fails to start a
      new thread, it deletes its state from interpreter and thus
      avoids its repeated cleanup on finalization.
  - C API
    - gh-113601: Removed debug build assertions related to
      interning strings, which were falsely triggered by stable
      ABI extensions.
  - Build
    - gh-89640: Hard-code float word ordering as little endian on
      WASM.
    - gh-89640: Improve detection of float word ordering on Linux
      when link-time optimizations are enabled.
- Remove upstreamed patches:
  - CVE-2024-9287-venv_path_unquoted.patch
</comment>
    <requestid>1228975</requestid>
  </revision>
  <revision rev="27" vrev="2">
    <srcmd5>6544b894bd70f499bde2a95199b1a0f2</srcmd5>
    <version>3.12.8</version>
    <time>1738615233</time>
    <user>anag+factory</user>
    <comment></comment>
    <requestid>1241508</requestid>
  </revision>
  <revision rev="28" vrev="1">
    <srcmd5>8f3277f29eb466b42e721ca45adaf6e2</srcmd5>
    <version>3.12.9</version>
    <time>1739127538</time>
    <user>dimstar_suse</user>
    <comment>- Update to 3.12.9:
  - Tests
    - gh-127906: Test the limited C API in test_cppext. Patch by
      Victor Stinner.
    - gh-127906: Backport test_cext from the main branch. Patch
      by Victor Stinner.
    - gh-127637: Add tests for the dis command-line
      interface. Patch by Bénédikt Tran.
  - Security
    - gh-105704: When using urllib.parse.urlsplit() and
      urllib.parse.urlparse() host parsing would not reject
      domain names containing square brackets ([ and ]). Square
      brackets are only valid for IPv6 and IPvFuture hosts
      according to RFC 3986 Section 3.2.2. (CVE-2025-0938,
      bsc#1236705)
    - gh-127655: Fixed the
      asyncio.selector_events._SelectorSocketTransport
      transport not pausing writes for the protocol when
      the buffer reaches the high water mark when using
      asyncio.WriteTransport.writelines() (CVE-2024-12254,
      bsc#1234290).
    - gh-126108: Fix a possible NULL pointer dereference in
      PySys_AddWarnOptionUnicode().
    - gh-80222: Fix bug in the folding of quoted strings
      when flattening an email message using a modern email
      policy. Previously when a quoted string was folded so
      that it spanned more than one line, the surrounding
      quotes and internal escapes would be omitted. This could
      theoretically be used to spoof header lines using a
      carefully constructed quoted string if the resulting</comment>
    <requestid>1244005</requestid>
  </revision>
  <revision rev="29" vrev="2">
    <srcmd5>b70eeffeba5804903a838253439fd8c1</srcmd5>
    <version>3.12.9</version>
    <time>1741722140</time>
    <user>anag+factory</user>
    <comment>- Skip PGO with %want_reproducible_builds (bsc#1239210).

      over multiple lines in combination with unicode encoding
      (bsc#1238450, CVE-2025-1795)</comment>
    <requestid>1251951</requestid>
  </revision>
  <revision rev="30" vrev="1">
    <srcmd5>9c196737db46cc242f52fba08d139871</srcmd5>
    <version>3.12.10</version>
    <time>1744985679</time>
    <user>anag_factory</user>
    <comment>- Update to 3.12.10:
  - gh-131852: msgfmt no longer adds the POT-Creation-Date to
    generated .mo files for consistency with GNU msgfmt.
  - gh-85012: Correctly reset msgctxt when compiling messages in
    msgfmt.
  - gh-131050: test_ssl.test_dh_params is skipped if the
    underlying TLS library does not support finite-field
    ephemeral Diffie-Hellman.
  - gh-119727: Add --single-process command line option to Python
    test runner (regrtest). Patch by Victor Stinner.
  - gh-131809: Update bundled libexpat to 2.7.1
  - gh-131261: Upgrade to libexpat 2.7.0
  - gh-127371: Avoid unbounded buffering for
    tempfile.SpooledTemporaryFile.writelines(). Previously, disk
    spillover was only checked after the lines iterator had been
    exhausted. This is now done after each line is written.
  - gh-121284: Fix bug in the folding of rfc2047 encoded-words
    when flattening an email message using a modern email
    policy. Previously when an encoded-word was too long for
    a line, it would be decoded, split across lines, and
    re-encoded. But commas and other special characters in the
    original text could be left unencoded and unquoted. This
    could theoretically be used to spoof header lines using a
    carefully constructed encoded-word if the resulting rendered
    email was transmitted or re-parsed.
  - gh-116608: undeprecate functional API for importlib.resources
  - gh-132075: Fix possible use of socket address structures
    with uninitialized members. Now all structure members are
    initialized with zeroes by default.
  - gh-132002: Fix crash when deallocating contextvars.ContextVar</comment>
    <requestid>1269059</requestid>
  </revision>
  <revision rev="31" vrev="2">
    <srcmd5>829053c0461095fff401d04d4c66ab36</srcmd5>
    <version>3.12.10</version>
    <time>1746105748</time>
    <user>dimstar_suse</user>
    <comment>- New libexpat doesn’t need expectedFailure, it doesn't fail any
  more.
- Remove CVE-2023-52425-libexpat-2.6.0-backport-15.6.patch as
  well.
- doc-py38-to-py36.patch needs to substantially extended.</comment>
    <requestid>1273530</requestid>
  </revision>
  <revision rev="32" vrev="3">
    <srcmd5>bb6ef49053f28f9938aba1b358eeeafb</srcmd5>
    <version>3.12.10</version>
    <time>1747159907</time>
    <user>anag_factory</user>
    <comment>- Remove python-3.3.0b1-test-posix_fadvise.patch (not needed
  since kernel 3.6-rc1)</comment>
    <requestid>1276663</requestid>
  </revision>
</revisionlist>
