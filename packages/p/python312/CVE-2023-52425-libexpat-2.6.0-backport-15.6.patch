---
 Lib/test/test_pyexpat.py   |    4 ++++
 Lib/test/test_sax.py       |    3 +++
 Lib/test/test_xml_etree.py |   10 ++++++++++
 3 files changed, 17 insertions(+)

Index: Python-3.12.10/Lib/test/test_pyexpat.py
===================================================================
--- Python-3.12.10.orig/Lib/test/test_pyexpat.py	2025-04-11 21:04:45.031445243 +0200
+++ Python-3.12.10/Lib/test/test_pyexpat.py	2025-04-11 21:16:30.736034401 +0200
@@ -794,6 +794,10 @@
         self.assertEqual(started, ['doc'])
 
     def test_reparse_deferral_disabled(self):
+        if expat.version_info < (2, 6, 0):
+            self.skipTest(f'Expat {expat.version_info} does not '
+                          'support reparse deferral')
+
         started = []
 
         def start_element(name, _):
Index: Python-3.12.10/Lib/test/test_sax.py
===================================================================
--- Python-3.12.10.orig/Lib/test/test_sax.py	2025-04-11 21:04:45.061811205 +0200
+++ Python-3.12.10/Lib/test/test_sax.py	2025-04-11 21:16:30.736607523 +0200
@@ -1240,6 +1240,9 @@
 
         self.assertEqual(result.getvalue(), start + b"<doc></doc>")
 
+    @unittest.skipIf(pyexpat.version_info < (2, 6, 0),
+                     f'Expat {pyexpat.version_info} does not '
+                     'support reparse deferral')
     def test_flush_reparse_deferral_disabled(self):
         result = BytesIO()
         xmlgen = XMLGenerator(result)
Index: Python-3.12.10/Lib/test/test_xml_etree.py
===================================================================
--- Python-3.12.10.orig/Lib/test/test_xml_etree.py	2025-04-11 21:04:45.473815938 +0200
+++ Python-3.12.10/Lib/test/test_xml_etree.py	2025-04-11 21:16:30.737465180 +0200
@@ -138,6 +138,11 @@
     return mock.patch.object(cls, "__eq__", autospec=True, wraps=eq)
 
 
+IS_SLE_15_6 = os.environ.get("SLE_VERSION", "") == "0150600"
+fails_with_expat_2_6_0 = (unittest.expectedFailure
+                          # 2.4 version patched in SLE
+                          if IS_SLE_15_6 and pyexpat.version_info >= (2, 4, 0) else
+                          lambda test: test)
 def checkwarnings(*filters, quiet=False):
     def decorator(test):
         def newtest(*args, **kwargs):
@@ -1441,9 +1446,11 @@
         self.assert_event_tags(parser, [('end', 'root')])
         self.assertIsNone(parser.close())
 
+    @fails_with_expat_2_6_0
     def test_simple_xml_chunk_1(self):
         self.test_simple_xml(chunk_size=1, flush=True)
 
+    @fails_with_expat_2_6_0
     def test_simple_xml_chunk_5(self):
         self.test_simple_xml(chunk_size=5, flush=True)
 
@@ -1668,6 +1675,9 @@
 
         self.assert_event_tags(parser, [('end', 'doc')])
 
+    @unittest.skipIf(pyexpat.version_info < (2, 6, 0),
+                     f'Expat {pyexpat.version_info} does not '
+                     'support reparse deferral')
     def test_flush_reparse_deferral_disabled(self):
         parser = ET.XMLPullParser(events=('start', 'end'))
 
