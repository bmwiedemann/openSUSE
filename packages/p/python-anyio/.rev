<revisionlist>
  <revision rev="1" vrev="1">
    <srcmd5>6fd271565be1cf7c566547b97fb84f14</srcmd5>
    <version>2.0.2</version>
    <time>1612989003</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>868493</requestid>
  </revision>
  <revision rev="2" vrev="1">
    <srcmd5>a8280ed10a9b1a64c85060f5d35c24f3</srcmd5>
    <version>2.2.0</version>
    <time>1615802186</time>
    <user>dimstar_suse</user>
    <comment>- Update to 2.2.0:
  * Added the ``maybe_async()`` and ``maybe_async_cm()`` functions to facilitate forward compatibility with AnyIO 3
  * Fixed socket stream bug on asyncio where receiving a half-close from the peer would shut down the entire connection
  * Fixed native task names not being set on asyncio on Python 3.8+
  * Fixed ``TLSStream.send_eof()`` raising ``ValueError`` instead of the expected ``NotImplementedError``
  * Fixed ``open_signal_receiver()`` on asyncio and curio hanging if the cancel scope was cancelled before the function could run
  * Fixed Trio test runner causing unwarranted test errors on ``BaseException``s
  * Fixed formatted output of ``ExceptionGroup`` containing too many newlines
  * Added the ``spawn_task()`` and ``wrap_async_context_manager()`` methods to ``BlockingPortal``
  * Added the ``handshake_timeout`` and ``error_handler`` parameters to ``TLSListener``
  * Fixed ``Event`` objects on the trio backend not inheriting from ``anyio.abc.Event``
  * Fixed ``run_sync_in_worker_thread()`` raising ``UnboundLocalError`` on asyncio when cancelled
  * Fixed ``send()`` on socket streams not raising any exception on asyncio, and an unwrapped
  * ``BrokenPipeError`` on trio and curio when the peer has disconnected
  * Fixed ``MemoryObjectSendStream.send()`` raising ``BrokenResourceError`` when the last receiver is closed right after receiving the item
  * Fixed ``ValueError: Invalid file descriptor: -1`` when closing a ``SocketListener`` on asyncio</comment>
    <requestid>879046</requestid>
  </revision>
  <revision rev="3" vrev="1">
    <srcmd5>258275cb7c35bd58e063a9470a852845</srcmd5>
    <version>3.1.0</version>
    <time>1626045890</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>897206</requestid>
  </revision>
  <revision rev="4" vrev="1">
    <srcmd5>6ab4bd0b10076a96ffe89aa2615498eb</srcmd5>
    <version>3.3.1</version>
    <time>1631913971</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>919878</requestid>
  </revision>
  <revision rev="5" vrev="1">
    <srcmd5>48add22fa300b860105f358aa07ba36d</srcmd5>
    <version>3.3.3</version>
    <time>1634587145</time>
    <user>dimstar_suse</user>
    <comment>- update to 3.3.3:
  * Fixed UNIX socket listener not setting accepted sockets to non-blocking
    mode on asyncio
  * Changed unconnected UDP sockets to be always bound to a local port (on
    &quot;any&quot; interface) to avoid errors on asyncio + Windows
  * Fixed cancellation problem on asyncio where level-triggered cancellation
    for **all** parent cancel scopes would not resume after exiting a 
    shielded nested scope</comment>
    <requestid>925754</requestid>
  </revision>
  <revision rev="6" vrev="1">
    <srcmd5>2df47aee1bc1855945f224101147024f</srcmd5>
    <version>3.3.4</version>
    <time>1635366061</time>
    <user>dimstar_suse</user>
    <comment>- update to 3.3.4:
  * Fixed ``BrokenResourceError`` instead of ``EndOfStream`` being raised in
   ``TLSStream`` when the peer abruptly closes the connection while
   ``TLSStream`` is receiving data with ``standard_compatible=False`` set</comment>
    <requestid>927591</requestid>
  </revision>
  <revision rev="7" vrev="1">
    <srcmd5>ffd87bb359bb54ead0ef1c9a57584d3d</srcmd5>
    <version>3.4.0</version>
    <time>1638203320</time>
    <user>dimstar_suse</user>
    <comment>- update to 3.4.0:
  * Added context propagation to/from worker threads in ``to_thread.run_sync()``,
  ``from_thread.run()`` and ``from_thread.run_sync()``
  * Fixed race condition in ``Lock`` and ``Semaphore`` classes when a task waiting on ``acquire()``
  is cancelled while another task is waiting to acquire the same primitive
  * Fixed async context manager's ``__aexit__()`` method not being called in
  ``BlockingPortal.wrap_async_context_manager()`` if the host task is cancelled
  * Fixed worker threads being marked as being event loop threads in sniffio
  * Fixed task parent ID not getting set to the correct value on asyncio
  * Enabled the test suite to run without IPv6 support, trio or pytest plugin autoloading</comment>
    <requestid>934534</requestid>
  </revision>
  <revision rev="8" vrev="1">
    <srcmd5>83424a0d6faf9c1e0d19be9aee4b5633</srcmd5>
    <version>3.5.0</version>
    <time>1642273524</time>
    <user>dimstar_suse</user>
    <comment>- update to 3.5.0:
  - Added ``start_new_session`` keyword argument to ``run_process()`` and ``open_process()``
  - Fixed deadlock in synchronization primitives on asyncio which can happen if a task acquiring a
    primitive is hit with a native (not AnyIO) cancellation with just the right timing, leaving the
    next acquiring task waiting forever
  - Added workaround for bpo-46313_ to enable compatibility with OpenSSL 3.0</comment>
    <requestid>946668</requestid>
  </revision>
  <revision rev="9" vrev="2">
    <srcmd5>da218cf984179eb047e48f21692cc303</srcmd5>
    <version>3.5.0</version>
    <time>1645054212</time>
    <user>dimstar_suse</user>
    <comment>- skip some tests for older distros (lack of TLSv1.3 support)</comment>
    <requestid>955059</requestid>
  </revision>
  <revision rev="10" vrev="3">
    <srcmd5>66d568141b7220292147cb0ef8ee3349</srcmd5>
    <version>3.5.0</version>
    <time>1650735912</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>965303</requestid>
  </revision>
  <revision rev="11" vrev="1">
    <srcmd5>41f888be59ac9dfb50bc8ffd7758b2db</srcmd5>
    <version>3.6.2</version>
    <time>1669193266</time>
    <user>dimstar_suse</user>
    <comment>- update to 3.6.2:
  - Pinned Trio to &lt; 0.22 to avoid incompatibility with AnyIO's ``ExceptionGroup`` class
    causing ``AttributeError: 'NonBaseMultiError' object has no attribute '_exceptions'``
    (AnyIO 4 is unaffected)
  - Fixed exception handler in the asyncio test runner not properly handling a context
    that does not contain the ``exception`` key
  - Fixed ``TypeError`` in ``get_current_task()`` on asyncio when using a custom ``Task`` factory
  - Updated type annotations on ``run_process()`` and ``open_process()``:
    * ``command`` now accepts accepts bytes and sequences of bytes
    * ``stdin``, ``stdout`` and ``stderr`` now accept file-like objects
  - Changed the pytest plugin to run both the setup and teardown phases of asynchronous
    generator fixtures within a single task to enable use cases such as cancel scopes and
    task groups where a context manager straddles the ``yield``
- drop anyio-pytest7.patch (upstream)</comment>
    <requestid>1037186</requestid>
  </revision>
  <revision rev="12" vrev="2">
    <srcmd5>1918c3f6e881187817a2ee5423882627</srcmd5>
    <version>3.6.2</version>
    <time>1671305777</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>1043354</requestid>
  </revision>
  <revision rev="13" vrev="3">
    <srcmd5>26bdb24fff88b97b300c2ce3de9f6c4c</srcmd5>
    <version>3.6.2</version>
    <time>1678283478</time>
    <user>dimstar_suse</user>
    <comment>- Add patc support-trio-0.22.patch:
  * Support trio &gt;= 0.22 just enough for asyncclick.</comment>
    <requestid>1069824</requestid>
  </revision>
  <revision rev="14" vrev="4">
    <srcmd5>f5ff1ea7902feac08f3b6727be3aaa35</srcmd5>
    <version>3.6.2</version>
    <time>1682282628</time>
    <user>dimstar_suse</user>
    <comment>Forwarded request #1081325 from dirkmueller

SR for python stack proposal</comment>
    <requestid>1082169</requestid>
  </revision>
  <revision rev="15" vrev="5">
    <srcmd5>671e85f6516f3936989238d78a08883d</srcmd5>
    <version>3.6.2</version>
    <time>1684490105</time>
    <user>dimstar_suse</user>
    <comment>- Add patch fix-failing-tls-tests.patch:
  * Fix test failures with Python TLS changes.</comment>
    <requestid>1084544</requestid>
  </revision>
  <revision rev="16" vrev="6">
    <srcmd5>6d2e67727da538a9388c3cebb3bb84f3</srcmd5>
    <version>3.6.2</version>
    <time>1694113967</time>
    <user>anag+factory</user>
    <comment>- Add patch support-trio-0.22.patch:</comment>
    <requestid>1109337</requestid>
  </revision>
  <revision rev="17" vrev="7">
    <srcmd5>53c675e4994bb339a45050dfe9a73788</srcmd5>
    <version>3.6.2</version>
    <time>1699301620</time>
    <user>anag+factory</user>
    <comment></comment>
    <requestid>1122669</requestid>
  </revision>
  <revision rev="18" vrev="1">
    <srcmd5>7fd699623429721ee668eb6d1ec5d3fb</srcmd5>
    <version>3.7.1</version>
    <time>1700771923</time>
    <user>anag+factory</user>
    <comment>- update to 3.7.1:
  * Fixed sending large buffers via UNIX stream sockets on
    asyncio
  * Fixed several minor documentation issues (broken links to
    classes, missing classes or attributes)
  * Dropped support for Python 3.6
  * Improved type annotations:
  * Several functions and methods that were previously annotated
    as accepting ``Coroutine[Any, Any, Any]`` as the return type
    of the callable have been amended to accept ``Awaitable[Any]``
    instead, to allow a slightly broader set of coroutine-like
    inputs, like ``async_generator_asend`` objects returned from
    the ``asend()`` method of async generators, and to match
    the ``trio`` annotations:
    * ``anyio.run()``
    * ``anyio.from_thread.run()``
    * ``TaskGroup.start_soon()``
    * ``TaskGroup.start()``
    * ``BlockingPortal.call()``
    * ``BlockingPortal.start_task_soon()``
    * ``BlockingPortal.start_task()``
  * Changed ``TLSAttribute.shared_ciphers`` to match the
    documented semantics of ``SSLSocket.shared_ciphers``
    of always returning ``None`` for client-side streams
  * Fixed ``CapacityLimiter`` on the asyncio backend to order
    waiting tasks in the FIFO order (instead of LIFO)
  * Fixed ``CancelScope.cancel()`` not working on asyncio if
    called before entering the scope
  * Fixed ``open_signal_receiver()`` inconsistently yielding
    integers instead of ``signal.Signals`` instances on the</comment>
    <requestid>1126958</requestid>
  </revision>
  <revision rev="19" vrev="1">
    <srcmd5>f2d50db36275a6bc1a633c08e1b2721f</srcmd5>
    <version>4.2.0</version>
    <time>1705874853</time>
    <user>anag+factory</user>
    <comment>- update to 4.2.0:
  * Add support for byte-based paths in connect_unix,
    create_unix_listeners, create_unix_datagram_socket, and
    create_connected_unix_datagram_socket. (PR by Lura Skye)
  * Enabled the Event and CapacityLimiter classes to be
    instantiated outside an event loop thread
  * Broadly improved/fixed the type annotations. Among other
    things, many functions and methods that take variadic
    positional arguments now make use of PEP 646 TypeVarTuple to
    allow the positional arguments to be validated by static type
    checkers. These changes affected numerous methods and
    functions, including: * anyio.run() * TaskGroup.start_soon()
    * anyio.from_thread.run() * anyio.from_thread.run_sync() *
    anyio.to_thread.run_sync() * anyio.to_process.run_sync() *
    BlockingPortal.call() * BlockingPortal.start_task_soon() *
    BlockingPortal.start_task() (also resolves #560)
  * Fixed various type annotations of anyio.Path to match
    Typeshed: * anyio.Path.__lt__() * anyio.Path.__le__() *
    anyio.Path.__gt__() * anyio.Path.__ge__() *
    anyio.Path.__truediv__() * anyio.Path.__rtruediv__() *
    anyio.Path.hardlink_to() * anyio.Path.samefile() *
    anyio.Path.symlink_to() * anyio.Path.with_segments() (PR by
    Ganden Schaffner)
  * Fixed adjusting the total number of tokens in a
    CapacityLimiter on asyncio failing to wake up tasks waiting
    to acquire the limiter in certain edge cases (fixed with help
    from Egor Blagov)
  * Fixed loop_factory and use_uvloop options not being used on
    the asyncio backend
  * Fixed cancellation propagating on asyncio from a task group</comment>
    <requestid>1136274</requestid>
  </revision>
  <revision rev="20" vrev="1">
    <srcmd5>4d2a3599bb72fe430144bfb88da8ec30</srcmd5>
    <version>4.3.0</version>
    <time>1710434547</time>
    <user>anag+factory</user>
    <comment>- Update to 4.3.0:
  * Added support for the Python 3.12 ``walk_up`` keyword argument in
    ``anyio.Path.relative_to()``
  * Fixed passing ``total_tokens`` to ``anyio.CapacityLimiter()`` as a
    keyword argument not working on the ``trio`` backend
  * Fixed ``Process.aclose()`` not performing the minimum level of
    necessary cleanup when cancelled
  * Fixed ``Process.stdin.aclose()``, ``Process.stdout.aclose()``, and
    ``Process.stderr.aclose()``
- Add exceptiongroup to {Build,}Requires.</comment>
    <requestid>1157062</requestid>
  </revision>
  <revision rev="21" vrev="1">
    <srcmd5>e268938253e1734717a310c4376b342a</srcmd5>
    <version>4.4.0</version>
    <time>1723708654</time>
    <user>dimstar_suse</user>
    <comment>- update to 4.4.0:
  * Added the BlockingPortalProvider class to aid with
    constructing synchronous counterparts to asynchronous
    interfaces that would otherwise require multiple blocking
    portals
  * Added __slots__ to AsyncResource so that child classes can
    use __slots__
  * Added the TaskInfo.has_pending_cancellation() method
  * Fixed erroneous RuntimeError: called 'started' twice on the
    same task status when cancelling a task in a TaskGroup
    created with the start() method before the first checkpoint
    is reached after calling task_status.started()
  * Fixed two bugs with TaskGroup.start() on asyncio: Fixed
    erroneous RuntimeError: called 'started' twice on the same
    task status when cancelling a task in a TaskGroup created
    with the start() method before the first checkpoint is
    reached after calling task_status.started() (#706; PR by
    Dominik Schwabe) Fixed the entire task group being cancelled
    if a TaskGroup.start() call gets cancelled (#685, #710)
  * Fixed erroneous RuntimeError: called 'started' twice on the
    same task status when cancelling a task in a TaskGroup
    created with the start() method before the first checkpoint
    is reached after calling task_status.started()
  * Fixed the entire task group being cancelled if a
    TaskGroup.start() call gets cancelled
  * Fixed a race condition that caused crashes when multiple
    event loops of the same backend were running in separate
    threads and simultaneously attempted to use AnyIO for their
    first time
  * Fixed cancellation delivery on asyncio incrementing the wrong</comment>
    <requestid>1193842</requestid>
  </revision>
  <revision rev="22" vrev="1">
    <srcmd5>18dcd3253780556e236f6b7968da8cc7</srcmd5>
    <version>4.6.0</version>
    <time>1727971237</time>
    <user>anag+factory</user>
    <comment></comment>
    <requestid>1205309</requestid>
  </revision>
  <revision rev="23" vrev="1">
    <srcmd5>da025a07231e8f8a5093fcef03c93fa6</srcmd5>
    <version>4.6.2.post1</version>
    <time>1729710501</time>
    <user>anag+factory</user>
    <comment>- update to 4.6.2:
  * Fixed regression caused by (\#807) that prevented the use
    of parametrized async fixtures
- update to 4.6.1:
  * Fixed TaskGroup and CancelScope producing cyclic references
    in tracebacks when raising exceptions (\#806) (PR by
    @graingert)</comment>
    <requestid>1217080</requestid>
  </revision>
  <revision rev="24" vrev="1">
    <srcmd5>ed4fd4ff780307d440cfebd430e18ea7</srcmd5>
    <version>4.8.0</version>
    <time>1739305266</time>
    <user>anag+factory</user>
    <comment>- Update to 4.8.0:
  * Added experimental support for running functions in 
    subinterpreters on Python 3.13 and later
  * Added support for the copy(), copy_into(), move() and move_into() 
    methods in anyio.Path, available in Python 3.14
  * Changed TaskGroup on asyncio to always spawn tasks non-eagerly, 
    even if using a task factory created 
    via asyncio.create_eager_task_factory(), to preserve expected 
    Trio-like task scheduling semantics (PR by @agronholm and @graingert)
  * Configure SO_RCVBUF, SO_SNDBUF and TCP_NODELAY on the selector 
    thread waker socket pair (this should improve the performance of 
    wait_readable() and wait_writable() when using the ProactorEventLoop) 
    (#836; PR by @graingert)
  * Fixed AssertionError when using nest-asyncio (#840)
  * Fixed return type annotation of various context managers' 
    __exit__ method (#847; PR by @Enegg)
- from 4.7.0:
  * Updated TaskGroup to work with asyncio's eager task factories (#764)
  * Added the wait_readable() and wait_writable() functions which will 
    accept an object with a .fileno() method or an integer handle, and 
    deprecated their now obsolete versions (wait_socket_readable() and 
    wait_socket_writable()) (PR by @davidbrochart)
  * Changed EventAdapter (an Event with no bound async backend) to allow 
    set() to work even before an async backend is bound to it (#819)
  * Added support for wait_readable() and wait_writable() on 
    ProactorEventLoop (used on asyncio + Windows by default)
  * Fixed a misleading ValueError in the context of DNS failures 
    (#815; PR by @graingert)
  * Fixed the return type annotations of readinto() and readinto1() 
    methods in the anyio.AsyncFile class (#825)
  * Fixed TaskInfo.has_pending_cancellation() on asyncio returning 
    false positives in cleanup code on Python &gt;= 3.11 
    (#832; PR by @gschaffner)
  * Fixed cancelled cancel scopes on asyncio calling 
    asyncio.Task.uncancel when propagating a CancelledError on exit 
    to a cancelled parent scope (#790; PR by @gschaffner)
</comment>
    <requestid>1244802</requestid>
  </revision>
  <revision rev="25" vrev="1">
    <srcmd5>db8a6a467d1108c3e0d1089cd883346d</srcmd5>
    <version>4.9.0</version>
    <time>1753120756</time>
    <user>anag_factory</user>
    <comment>- Inject multibuild to break a build loop. 

- Update to 4.9.0:
  * Added async support for temporary file handling (#344; PR by @11kkw)
  * Added 4 new fixtures for the AnyIO pytest plugin:
    * free_tcp_port_factory: session scoped fixture returning a callable
      that generates unused TCP port numbers
    * free_udp_port_factory: session scoped fixture returning a callable
      that generates unused UDP port numbers
    * free_tcp_port: function scoped fixture that invokes the
      free_tcp_port_factory fixture to generate a free TCP port number
    * free_udp_port: function scoped fixture that invokes the
      free_udp_port_factory fixture to generate a free UDP port number
  * Added stdin argument to anyio.run_process() akin to what
    anyio.open_process(), asyncio.create_subprocess(), trio.run_process(),
    and subprocess.run() already accept (PR by @jmehnle)
  * Added the info property to anyio.Path on Python 3.14
  * Changed anyio.getaddrinfo() to ignore (invalid) IPv6 name resolution
    results when IPv6 support is disabled in Python
  * Changed EndOfStream raised from MemoryObjectReceiveStream.receive()
    to leave out the AttributeError from the exception chain which was
    merely an implementation detail and caused some confusion
  * Fixed traceback formatting growing quadratically with level of
    TaskGroup nesting on asyncio due to exception chaining when raising
    ExceptionGroups in TaskGroup.__aexit__ (#863; PR by @tapetersen)
  * Fixed anyio.Path.iterdir() making a blocking call in Python 3.13
    (#873; PR by @cbornet and @agronholm)
  * Fixed connect_tcp() producing cyclic references in tracebacks when
    raising exceptions (#809; PR by @graingert)
  * Fixed anyio.to_thread.run_sync() needlessly holding on to references</comment>
    <requestid>1294656</requestid>
  </revision>
  <revision rev="26" vrev="2">
    <srcmd5>d70f6bf40d4d62567f4e1c36bb29280f</srcmd5>
    <version>4.9.0</version>
    <time>1754658595</time>
    <user>dimstar_suse</user>
    <comment>- Increase timeout in in test_keyboardinterrupt_during_test, it helps
  with flaky tests in i586 arches.</comment>
    <requestid>1298106</requestid>
  </revision>
  <revision rev="27" vrev="1">
    <srcmd5>c6e2f2267edf5031a31482c6bb174532</srcmd5>
    <version>4.10.0</version>
    <time>1755095013</time>
    <user>dimstar_suse</user>
    <comment>Should fix the build in Staging:C

- Skip flaky test_keyboardinterrupt_during_test, the timeout increase
  doesn't always help.
- Fix build for Leap

- Update to 4.10.0:
  + Added the feed_data() method to the BufferedByteReceiveStream
    class, allowing users to inject data directly into the buffer
  + Added various class methods to wrap existing sockets as
    listeners or socket streams
  + Added a hierarchy of connectable stream classes for
    transparently connecting to various remote or local endpoints
    for exchanging bytes or objects
  + Added context manager mix-in classes (anyio.ContextManagerMixin
    and anyio.AsyncContextManagerMixin) to help write classes that
    embed other context managers, particularly cancel scopes or
    task groups
  + Added the ability to specify the thread name in start_blocking
   _portal()
  + Added anyio.notify_closing to allow waking anyio.wait_readable
    and anyio.wait_writable before closing a socket. Among other
    things, this prevents an OSError on the ProactorEventLoop.
  + Incorporated several documentation improvements from the
    EuroPython 2025 sprint
  + Added a documentation page explaining why one might want to use
    AnyIO's APIs instead of asyncio's
  + Updated the to_interpreters module to use the public
    concurrent.interpreters API on Python 3.14 or later
  + Fixed anyio.Path.copy() and anyio.Path.copy_into() failing on
    Python 3.14.0a7
  + Fixed return annotation of __aexit__ on async context managers.</comment>
    <requestid>1299192</requestid>
  </revision>
  <revision rev="28" vrev="1">
    <srcmd5>a04c8494c5ecfa0b337c7405dfafa158</srcmd5>
    <version>4.11.0</version>
    <time>1758818630</time>
    <user>anag_factory</user>
    <comment></comment>
    <requestid>1306903</requestid>
  </revision>
</revisionlist>
