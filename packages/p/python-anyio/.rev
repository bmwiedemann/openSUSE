<revisionlist>
  <revision rev="1" vrev="1">
    <srcmd5>6fd271565be1cf7c566547b97fb84f14</srcmd5>
    <version>2.0.2</version>
    <time>1612989003</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>868493</requestid>
  </revision>
  <revision rev="2" vrev="1">
    <srcmd5>a8280ed10a9b1a64c85060f5d35c24f3</srcmd5>
    <version>2.2.0</version>
    <time>1615802186</time>
    <user>dimstar_suse</user>
    <comment>- Update to 2.2.0:
  * Added the ``maybe_async()`` and ``maybe_async_cm()`` functions to facilitate forward compatibility with AnyIO 3
  * Fixed socket stream bug on asyncio where receiving a half-close from the peer would shut down the entire connection
  * Fixed native task names not being set on asyncio on Python 3.8+
  * Fixed ``TLSStream.send_eof()`` raising ``ValueError`` instead of the expected ``NotImplementedError``
  * Fixed ``open_signal_receiver()`` on asyncio and curio hanging if the cancel scope was cancelled before the function could run
  * Fixed Trio test runner causing unwarranted test errors on ``BaseException``s
  * Fixed formatted output of ``ExceptionGroup`` containing too many newlines
  * Added the ``spawn_task()`` and ``wrap_async_context_manager()`` methods to ``BlockingPortal``
  * Added the ``handshake_timeout`` and ``error_handler`` parameters to ``TLSListener``
  * Fixed ``Event`` objects on the trio backend not inheriting from ``anyio.abc.Event``
  * Fixed ``run_sync_in_worker_thread()`` raising ``UnboundLocalError`` on asyncio when cancelled
  * Fixed ``send()`` on socket streams not raising any exception on asyncio, and an unwrapped
  * ``BrokenPipeError`` on trio and curio when the peer has disconnected
  * Fixed ``MemoryObjectSendStream.send()`` raising ``BrokenResourceError`` when the last receiver is closed right after receiving the item
  * Fixed ``ValueError: Invalid file descriptor: -1`` when closing a ``SocketListener`` on asyncio</comment>
    <requestid>879046</requestid>
  </revision>
  <revision rev="3" vrev="1">
    <srcmd5>258275cb7c35bd58e063a9470a852845</srcmd5>
    <version>3.1.0</version>
    <time>1626045890</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>897206</requestid>
  </revision>
  <revision rev="4" vrev="1">
    <srcmd5>6ab4bd0b10076a96ffe89aa2615498eb</srcmd5>
    <version>3.3.1</version>
    <time>1631913971</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>919878</requestid>
  </revision>
  <revision rev="5" vrev="1">
    <srcmd5>48add22fa300b860105f358aa07ba36d</srcmd5>
    <version>3.3.3</version>
    <time>1634587145</time>
    <user>dimstar_suse</user>
    <comment>- update to 3.3.3:
  * Fixed UNIX socket listener not setting accepted sockets to non-blocking
    mode on asyncio
  * Changed unconnected UDP sockets to be always bound to a local port (on
    &quot;any&quot; interface) to avoid errors on asyncio + Windows
  * Fixed cancellation problem on asyncio where level-triggered cancellation
    for **all** parent cancel scopes would not resume after exiting a 
    shielded nested scope</comment>
    <requestid>925754</requestid>
  </revision>
  <revision rev="6" vrev="1">
    <srcmd5>2df47aee1bc1855945f224101147024f</srcmd5>
    <version>3.3.4</version>
    <time>1635366061</time>
    <user>dimstar_suse</user>
    <comment>- update to 3.3.4:
  * Fixed ``BrokenResourceError`` instead of ``EndOfStream`` being raised in
   ``TLSStream`` when the peer abruptly closes the connection while
   ``TLSStream`` is receiving data with ``standard_compatible=False`` set</comment>
    <requestid>927591</requestid>
  </revision>
  <revision rev="7" vrev="1">
    <srcmd5>ffd87bb359bb54ead0ef1c9a57584d3d</srcmd5>
    <version>3.4.0</version>
    <time>1638203320</time>
    <user>dimstar_suse</user>
    <comment>- update to 3.4.0:
  * Added context propagation to/from worker threads in ``to_thread.run_sync()``,
  ``from_thread.run()`` and ``from_thread.run_sync()``
  * Fixed race condition in ``Lock`` and ``Semaphore`` classes when a task waiting on ``acquire()``
  is cancelled while another task is waiting to acquire the same primitive
  * Fixed async context manager's ``__aexit__()`` method not being called in
  ``BlockingPortal.wrap_async_context_manager()`` if the host task is cancelled
  * Fixed worker threads being marked as being event loop threads in sniffio
  * Fixed task parent ID not getting set to the correct value on asyncio
  * Enabled the test suite to run without IPv6 support, trio or pytest plugin autoloading</comment>
    <requestid>934534</requestid>
  </revision>
  <revision rev="8" vrev="1">
    <srcmd5>83424a0d6faf9c1e0d19be9aee4b5633</srcmd5>
    <version>3.5.0</version>
    <time>1642273524</time>
    <user>dimstar_suse</user>
    <comment>- update to 3.5.0:
  - Added ``start_new_session`` keyword argument to ``run_process()`` and ``open_process()``
  - Fixed deadlock in synchronization primitives on asyncio which can happen if a task acquiring a
    primitive is hit with a native (not AnyIO) cancellation with just the right timing, leaving the
    next acquiring task waiting forever
  - Added workaround for bpo-46313_ to enable compatibility with OpenSSL 3.0</comment>
    <requestid>946668</requestid>
  </revision>
  <revision rev="9" vrev="2">
    <srcmd5>da218cf984179eb047e48f21692cc303</srcmd5>
    <version>3.5.0</version>
    <time>1645054212</time>
    <user>dimstar_suse</user>
    <comment>- skip some tests for older distros (lack of TLSv1.3 support)</comment>
    <requestid>955059</requestid>
  </revision>
  <revision rev="10" vrev="3">
    <srcmd5>66d568141b7220292147cb0ef8ee3349</srcmd5>
    <version>3.5.0</version>
    <time>1650735912</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>965303</requestid>
  </revision>
  <revision rev="11" vrev="1">
    <srcmd5>41f888be59ac9dfb50bc8ffd7758b2db</srcmd5>
    <version>3.6.2</version>
    <time>1669193266</time>
    <user>dimstar_suse</user>
    <comment>- update to 3.6.2:
  - Pinned Trio to &lt; 0.22 to avoid incompatibility with AnyIO's ``ExceptionGroup`` class
    causing ``AttributeError: 'NonBaseMultiError' object has no attribute '_exceptions'``
    (AnyIO 4 is unaffected)
  - Fixed exception handler in the asyncio test runner not properly handling a context
    that does not contain the ``exception`` key
  - Fixed ``TypeError`` in ``get_current_task()`` on asyncio when using a custom ``Task`` factory
  - Updated type annotations on ``run_process()`` and ``open_process()``:
    * ``command`` now accepts accepts bytes and sequences of bytes
    * ``stdin``, ``stdout`` and ``stderr`` now accept file-like objects
  - Changed the pytest plugin to run both the setup and teardown phases of asynchronous
    generator fixtures within a single task to enable use cases such as cancel scopes and
    task groups where a context manager straddles the ``yield``
- drop anyio-pytest7.patch (upstream)</comment>
    <requestid>1037186</requestid>
  </revision>
  <revision rev="12" vrev="2">
    <srcmd5>1918c3f6e881187817a2ee5423882627</srcmd5>
    <version>3.6.2</version>
    <time>1671305777</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>1043354</requestid>
  </revision>
  <revision rev="13" vrev="3">
    <srcmd5>26bdb24fff88b97b300c2ce3de9f6c4c</srcmd5>
    <version>3.6.2</version>
    <time>1678283478</time>
    <user>dimstar_suse</user>
    <comment>- Add patc support-trio-0.22.patch:
  * Support trio &gt;= 0.22 just enough for asyncclick.</comment>
    <requestid>1069824</requestid>
  </revision>
  <revision rev="14" vrev="4">
    <srcmd5>f5ff1ea7902feac08f3b6727be3aaa35</srcmd5>
    <version>3.6.2</version>
    <time>1682282628</time>
    <user>dimstar_suse</user>
    <comment>Forwarded request #1081325 from dirkmueller

SR for python stack proposal</comment>
    <requestid>1082169</requestid>
  </revision>
</revisionlist>
