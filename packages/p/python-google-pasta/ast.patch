From 3451d8b9fb67a2fa3098edd73ea3dba98074d6dd Mon Sep 17 00:00:00 2001
From: Nick Smith <smithnick@google.com>
Date: Wed, 18 Mar 2020 13:27:57 -0700
Subject: [PATCH] Add test for ast node support

Checks that there are not ast nodes which are unsupported, by checking
that there is a visit_<Node> function for each node type in the _ast
module.
---
 pasta/base/annotate.py               | 32 ++++++++++++++++++++
 pasta/base/annotate_test.py          | 45 ++++++++++++++++++++++++++++
 pasta/base/codegen.py                |  9 ++++++
 testdata/ast/constant.in             |  7 +++++
 testdata/ast/golden/3.4/constant.out |  9 ++++++
 testdata/ast/golden/3.5/constant.out |  9 ++++++
 testdata/ast/golden/3.6/constant.out |  9 ++++++
 testdata/ast/golden/3.7/constant.out |  9 ++++++
 testdata/ast/golden/3.8/constant.out |  9 ++++++
 testdata/ast/golden/3.8/ellipsis.out |  4 +--
 10 files changed, 140 insertions(+), 2 deletions(-)
 create mode 100644 testdata/ast/constant.in
 create mode 100644 testdata/ast/golden/3.4/constant.out
 create mode 100644 testdata/ast/golden/3.5/constant.out
 create mode 100644 testdata/ast/golden/3.6/constant.out
 create mode 100644 testdata/ast/golden/3.7/constant.out
 create mode 100644 testdata/ast/golden/3.8/constant.out

diff --git a/pasta/base/annotate.py b/pasta/base/annotate.py
index af2a55a..5b53c76 100644
--- a/pasta/base/annotate.py
+++ b/pasta/base/annotate.py
@@ -23,6 +23,7 @@
 import contextlib
 import functools
 import itertools
+import numbers
 import six
 from six.moves import zip
 import sys
@@ -849,6 +850,27 @@ def visit_Compare(self, node):
       self.attr(node, 'op_suffix_%d' % i, [self.ws], default=' ')
       self.visit(comparator)
 
+  @expression
+  def visit_Constant(self, node):
+    if hasattr(node, 'kind') and node.kind:
+      self.attr(node, 'content', [self.tokens.str],
+                default='%s"%s"' % (node.kind, node.value), deps=('value',))
+    elif isinstance(node.value, bool):
+      self.attr(node, 'content', [str(node.value)], default=str(node.value),
+                deps=('value',))
+    elif node.value is Ellipsis:
+      self.token('...')
+    elif isinstance(node.value, numbers.Number):
+      token_number_type = token_generator.TOKENS.NUMBER
+      self.attr(node, 'content',
+                [lambda: self.tokens.next_of_type(token_number_type).src],
+                deps=('value',), default=str(node.value))
+    elif isinstance(node.value, six.text_type) or isinstance(node.value, bytes):
+      self.attr(node, 'content', [self.tokens.str], deps=('value',),
+                default=node.value)
+    else:
+      self.token(str(node.value))
+
   @expression
   def visit_Dict(self, node):
     self.token('{')
@@ -988,6 +1010,12 @@ def visit_UnaryOp(self, node):
   def visit_Ellipsis(self, node):
     self.token('...')
 
+  def visit_And(self, node):
+    self.token(ast_constants.NODE_TYPE_TO_TOKENS[type(node)][0])
+
+  def visit_Or(self, node):
+    self.token(ast_constants.NODE_TYPE_TO_TOKENS[type(node)][0])
+
   def visit_Add(self, node):
     self.token(ast_constants.NODE_TYPE_TO_TOKENS[type(node)][0])
 
@@ -1000,6 +1028,9 @@ def visit_Mult(self, node):
   def visit_Div(self, node):
     self.token(ast_constants.NODE_TYPE_TO_TOKENS[type(node)][0])
 
+  def visit_MatMult(self, node):
+    self.token(ast_constants.NODE_TYPE_TO_TOKENS[type(node)][0])
+
   def visit_Mod(self, node):
     self.token(ast_constants.NODE_TYPE_TO_TOKENS[type(node)][0])
 
@@ -1389,6 +1420,7 @@ def token(self, token_val):
     """Parse a single token with exactly the given value."""
     token = self.tokens.next()
     if token.src != token_val:
+      print(type(token.src), type(token_val))
       raise AnnotationError("Expected %r but found %r\nline %d: %s" % (
           token_val, token.src, token.start[0], token.line))
 
diff --git a/pasta/base/annotate_test.py b/pasta/base/annotate_test.py
index 44c969f..cfc251d 100644
--- a/pasta/base/annotate_test.py
+++ b/pasta/base/annotate_test.py
@@ -18,8 +18,10 @@
 from __future__ import division
 from __future__ import print_function
 
+import _ast
 import ast
 import difflib
+import inspect
 import itertools
 import os.path
 from six import with_metaclass
@@ -452,6 +454,48 @@ def test_fstring_escaping(self):
         'f"a {{{__pasta_fstring_val_0__} {{c}}"')
 
 
+
+class VersionSupportTest(test_utils.TestCase):
+
+  def test_all_ast_nodes_supported(self):
+    functions = inspect.getmembers(annotate.AstAnnotator)
+    handled_nodes = {name[6:] for name, _ in functions
+                     if name.startswith('visit_')}
+
+    def should_ignore_type(n):
+      if not issubclass(n, _ast.AST):
+        return True
+      # Expression contexts are not visited since the have no formatting
+      if hasattr(_ast, 'expr_context') and issubclass(n, _ast.expr_context):
+        return True
+      return False
+
+    ast_nodes = {
+        name for name, member in inspect.getmembers(_ast, inspect.isclass)
+        if not should_ignore_type(member)
+    }
+    ignored_nodes = {
+        'AST',
+        'Expression',
+        'FunctionType',
+        'Interactive',
+        'MatMult',
+        'Suite',
+        'TypeIgnore',  # TODO: Support syntax for this?
+        'boolop',
+        'cmpop',
+        'excepthandler',
+        'expr',
+        'mod',
+        'operator',
+        'slice',
+        'stmt',
+        'type_ignore',
+        'unaryop',
+    }
+    self.assertEqual(set(), ast_nodes - handled_nodes - ignored_nodes)
+
+
 def _get_diff(before, after):
   return difflib.ndiff(after.splitlines(), before.splitlines())
 
@@ -463,6 +507,7 @@ def suite():
   result.addTests(unittest.makeSuite(PrefixSuffixTest))
   result.addTests(unittest.makeSuite(PrefixSuffixGoldenTest))
   result.addTests(unittest.makeSuite(FstringTest))
+  result.addTests(unittest.makeSuite(VersionSupportTest))
   return result
 
 
diff --git a/pasta/base/codegen.py b/pasta/base/codegen.py
index dfc74aa..dfdff1a 100644
--- a/pasta/base/codegen.py
+++ b/pasta/base/codegen.py
@@ -88,6 +88,15 @@ def visit_Bytes(self, node):
     self.code += content if content is not None else repr(node.s)
     self.suffix(node)
 
+  def visit_Constant(self, node):
+    self.prefix(node)
+    if node.value is Ellipsis:
+      content = '...'
+    else:
+      content = fmt.get(node, 'content')
+    self.code += content if content is not None else repr(node.s)
+    self.suffix(node)
+
   def token(self, value):
     self.code += value
 
diff --git a/testdata/ast/constant.in b/testdata/ast/constant.in
new file mode 100644
index 0000000..e801e03
--- /dev/null
+++ b/testdata/ast/constant.in
@@ -0,0 +1,7 @@
+None
+
+...
+
+u"None"
+
+u"..."
diff --git a/testdata/ast/golden/3.4/constant.out b/testdata/ast/golden/3.4/constant.out
new file mode 100644
index 0000000..1a4097f
--- /dev/null
+++ b/testdata/ast/golden/3.4/constant.out
@@ -0,0 +1,9 @@
+(-1, -1)     Module               	prefix=||	suffix=||	indent=||
+(1, 0)       Expr                 	prefix=||	suffix=|\n|	indent=||
+(3, 0)       Expr                 	prefix=|\n|	suffix=||	indent=||
+(5, 0)       Expr                 	prefix=||	suffix=|\n|	indent=||
+(7, 0)       Expr                 	prefix=|\n|	suffix=|\n|	indent=||
+(1, 0)       NameConstant         	prefix=||	suffix=||	indent=||
+(3, 0)       Ellipsis             	prefix=||	suffix=|\n\n|	indent=||
+(5, 0)       Str                  	prefix=||	suffix=||	indent=||
+(7, 0)       Str                  	prefix=||	suffix=||	indent=||
diff --git a/testdata/ast/golden/3.5/constant.out b/testdata/ast/golden/3.5/constant.out
new file mode 100644
index 0000000..1a4097f
--- /dev/null
+++ b/testdata/ast/golden/3.5/constant.out
@@ -0,0 +1,9 @@
+(-1, -1)     Module               	prefix=||	suffix=||	indent=||
+(1, 0)       Expr                 	prefix=||	suffix=|\n|	indent=||
+(3, 0)       Expr                 	prefix=|\n|	suffix=||	indent=||
+(5, 0)       Expr                 	prefix=||	suffix=|\n|	indent=||
+(7, 0)       Expr                 	prefix=|\n|	suffix=|\n|	indent=||
+(1, 0)       NameConstant         	prefix=||	suffix=||	indent=||
+(3, 0)       Ellipsis             	prefix=||	suffix=|\n\n|	indent=||
+(5, 0)       Str                  	prefix=||	suffix=||	indent=||
+(7, 0)       Str                  	prefix=||	suffix=||	indent=||
diff --git a/testdata/ast/golden/3.6/constant.out b/testdata/ast/golden/3.6/constant.out
new file mode 100644
index 0000000..1a4097f
--- /dev/null
+++ b/testdata/ast/golden/3.6/constant.out
@@ -0,0 +1,9 @@
+(-1, -1)     Module               	prefix=||	suffix=||	indent=||
+(1, 0)       Expr                 	prefix=||	suffix=|\n|	indent=||
+(3, 0)       Expr                 	prefix=|\n|	suffix=||	indent=||
+(5, 0)       Expr                 	prefix=||	suffix=|\n|	indent=||
+(7, 0)       Expr                 	prefix=|\n|	suffix=|\n|	indent=||
+(1, 0)       NameConstant         	prefix=||	suffix=||	indent=||
+(3, 0)       Ellipsis             	prefix=||	suffix=|\n\n|	indent=||
+(5, 0)       Str                  	prefix=||	suffix=||	indent=||
+(7, 0)       Str                  	prefix=||	suffix=||	indent=||
diff --git a/testdata/ast/golden/3.7/constant.out b/testdata/ast/golden/3.7/constant.out
new file mode 100644
index 0000000..1a4097f
--- /dev/null
+++ b/testdata/ast/golden/3.7/constant.out
@@ -0,0 +1,9 @@
+(-1, -1)     Module               	prefix=||	suffix=||	indent=||
+(1, 0)       Expr                 	prefix=||	suffix=|\n|	indent=||
+(3, 0)       Expr                 	prefix=|\n|	suffix=||	indent=||
+(5, 0)       Expr                 	prefix=||	suffix=|\n|	indent=||
+(7, 0)       Expr                 	prefix=|\n|	suffix=|\n|	indent=||
+(1, 0)       NameConstant         	prefix=||	suffix=||	indent=||
+(3, 0)       Ellipsis             	prefix=||	suffix=|\n\n|	indent=||
+(5, 0)       Str                  	prefix=||	suffix=||	indent=||
+(7, 0)       Str                  	prefix=||	suffix=||	indent=||
diff --git a/testdata/ast/golden/3.8/constant.out b/testdata/ast/golden/3.8/constant.out
new file mode 100644
index 0000000..a376053
--- /dev/null
+++ b/testdata/ast/golden/3.8/constant.out
@@ -0,0 +1,9 @@
+(-1, -1)     Module               	prefix=||	suffix=||	indent=||
+(1, 0)       Expr                 	prefix=||	suffix=|\n|	indent=||
+(3, 0)       Expr                 	prefix=|\n|	suffix=|\n|	indent=||
+(5, 0)       Expr                 	prefix=|\n|	suffix=|\n|	indent=||
+(7, 0)       Expr                 	prefix=|\n|	suffix=|\n|	indent=||
+(1, 0)       Constant             	prefix=||	suffix=||	indent=||
+(3, 0)       Constant             	prefix=||	suffix=||	indent=||
+(5, 0)       Constant             	prefix=||	suffix=||	indent=||
+(7, 0)       Constant             	prefix=||	suffix=||	indent=||
diff --git a/testdata/ast/golden/3.8/ellipsis.out b/testdata/ast/golden/3.8/ellipsis.out
index cadaa8e..a8ff894 100644
--- a/testdata/ast/golden/3.8/ellipsis.out
+++ b/testdata/ast/golden/3.8/ellipsis.out
@@ -1,5 +1,5 @@
 (-1, -1)     Module               	prefix=||	suffix=||	indent=||
 (1, 0)       FunctionDef a        	prefix=||	suffix=||	indent=||
 (-1, -1)     arguments            	prefix=||	suffix=||	indent=||
-(2, 2)       Expr                 	prefix=|  |	suffix=||	indent=|  |
-(2, 2)       Constant             	prefix=||	suffix=|\n|	indent=|  |
+(2, 2)       Expr                 	prefix=|  |	suffix=|\n|	indent=|  |
+(2, 2)       Constant             	prefix=||	suffix=||	indent=|  |
