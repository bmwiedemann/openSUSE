<revisionlist>
  <revision rev="1" vrev="1">
    <srcmd5>29cf44768553744e6730bb0e82c59381</srcmd5>
    <version>3.7.7.0</version>
    <time>1569233432</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>730704</requestid>
  </revision>
  <revision rev="2" vrev="2">
    <srcmd5>29cf44768553744e6730bb0e82c59381</srcmd5>
    <version>3.7.7.0</version>
    <time>1569234569</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>730704</requestid>
  </revision>
  <revision rev="3" vrev="3">
    <srcmd5>29cf44768553744e6730bb0e82c59381</srcmd5>
    <version>3.7.7.0</version>
    <time>1569234694</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>730704</requestid>
  </revision>
  <revision rev="4" vrev="1">
    <srcmd5>13fcb6eb64f79e362cf533239054c489</srcmd5>
    <version>3.7.7.1</version>
    <time>1603961125</time>
    <user>dimstar_suse</user>
    <comment>- update to 3.7.7.1:
  * Fixed a memory leak in ``readdb()``.
  * Fixed the ``Body.copy()`` method to correctly copy
  object-specific fields across to the new object, like Saturn ring tilt
  and Earth satellite catalog number.</comment>
    <requestid>835116</requestid>
  </revision>
  <revision rev="5" vrev="1">
    <srcmd5>170d6854fda77772b5042a6e1652e917</srcmd5>
    <version>4.1.1</version>
    <time>1642455273</time>
    <user>dimstar_suse</user>
    <comment>- update to 4.1.1:
  * When you provide PyEphem with a Python ``datetime`` that has a time
  zone attached, PyEphem now detects the time zone and converts the date
  and time to UTC automatically.
  * A new search routine had been written and tested
  to power the :ref:`transit-rising-setting` methods
  ``previous_rising()``,
  ``previous_setting()``,
  ``next_rising()``, and
  ``next_setting()``.
  They should no longer be susceptible to getting hung up in a loop.
  You should also find them substantially faster.
  * Fixed the ``constellation()`` routine so that it uses astrometric,
  rather than apparent, right ascension and declination.  This should
  make it more accurate along the borders of each constellation.
  * Fixed how the underlying “libastro” library computes whether a body’s
  image is deflected by gravity when its light passes close to the Sun.
  Previously, users would see coordinates jump unexpectedly as the
  deflection formula turned on and off haphazardly.
  * Fixed the star positions in the ``ephem.stars`` star catalog by adding
  8.75 years of proper motion to each star.  Previously, each 1991.25
  position from the Hipparcos catalog was being incorrectly treated as a
  2000.0 position.
  * A new routine ``unrefract()`` lets you compute the real altitude
  of a body that you observe in the sky at a given apparent altitude.
  * The old ``cities.lookup()`` function is now officially deprecated.
  Because of a Google API restriction, it stopped working in 2018.
  * Planetary moon positions are now available through the year 2040
  (previously, asking for a position past 2020 returned zeroes).
  * The ``Date`` object is improved such that the return values of</comment>
    <requestid>947053</requestid>
  </revision>
  <revision rev="6" vrev="1">
    <srcmd5>253af2db7ce2477252e3c75dce101591</srcmd5>
    <version>4.1.3</version>
    <time>1642459730</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>947073</requestid>
  </revision>
  <revision rev="7" vrev="1">
    <srcmd5>95f88043de6f491abd0666355b0782a7</srcmd5>
    <version>4.1.4</version>
    <time>1672754725</time>
    <user>dimstar_suse</user>
    <comment>- update to 4.1.4:
  * A memory leak has been resolved, that was failing to free the storage
  for the satellite name (a Python string) and catalog number (a Python
  integer) when the satellite object itself was freed.
  * In previous versions, if you asked for the position of a body
  (a) whose elliptical or hyperbolic orbit has an eccentricity very
  close to 1.0 and (b) which is very far from perihelion, then the
  underlying C library would print a warning ``Near-parabolic orbit:
  inaccurate result`` but let your Python script continue on unawares.
  Now, no message is printed directly to the screen, and instead a
  ``RuntimeError`` will tell you why PyEphem can’t compute the body’s
  position.
  * The underlying C library should no longer produce a segmentation fault
  if given the floating point number ``NaN`` as a date.  The Python
  rising and setting logic now also watches out for ``NaN`` dates, and
  raises a ``ValueError`` when one is detected.</comment>
    <requestid>1046298</requestid>
  </revision>
  <revision rev="8" vrev="1">
    <srcmd5>a1e125218acf147ca1a2ea45afd29144</srcmd5>
    <version>4.1.5</version>
    <time>1701727378</time>
    <user>anag+factory</user>
    <comment>- update to 4.1.5:
  * Add support for Python 3.12.</comment>
    <requestid>1130849</requestid>
  </revision>
  <revision rev="9" vrev="1">
    <srcmd5>7df4068bf4018ae149a45eaad2fadf9f</srcmd5>
    <version>4.1.6</version>
    <time>1731508112</time>
    <user>anag+factory</user>
    <comment></comment>
    <requestid>1223762</requestid>
  </revision>
  <revision rev="10" vrev="2">
    <srcmd5>a380013a4039873ee201dbf5a84c3f4f</srcmd5>
    <version>4.1.6</version>
    <time>1750683901</time>
    <user>anag_factory</user>
    <comment>- Switch to pyproject macros.</comment>
    <requestid>1287772</requestid>
  </revision>
</revisionlist>
