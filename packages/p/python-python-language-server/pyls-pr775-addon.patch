diff --git a/pyls/plugins/jedi_completion.py b/pyls/plugins/jedi_completion.py
index 9106c3c..5c9c358 100644
--- a/pyls/plugins/jedi_completion.py
+++ b/pyls/plugins/jedi_completion.py
@@ -53,18 +53,22 @@ def pyls_completions(config, document, position):
     try:
         code_position = {}
         if position:
-            code_position = {'line': position['line'] + 1,
-                             'column': _utils.clip_column(position['character'], document.lines, position['line'])}
-        definitions = document.jedi_script().complete(**code_position)
+            code_position = {
+                'line': position['line'] + 1,
+                'column': _utils.clip_column(position['character'],
+                                             document.lines,
+                                             position['line'])}
+        completions = document.jedi_script().complete(**code_position)
     except AttributeError as e:
         if 'CompiledObject' in str(e):
             # Needed to handle missing CompiledObject attribute
             # 'sub_modules_dict'
-            definitions = None
+            # TODO: probably not needed for new Complete objects
+            completions = None
         else:
             raise e
 
-    if not definitions:
+    if not completions:
         return None
 
     completion_capabilities = config.capabilities.get('textDocument', {}).get('completion', {})
@@ -73,7 +77,7 @@ def pyls_completions(config, document, position):
     settings = config.plugin_settings('jedi_completion', document_path=document.path)
     should_include_params = settings.get('include_params')
     include_params = snippet_support and should_include_params and use_snippets(document, position)
-    return [_format_completion(signature, include_params) for d in definitions for signature in d.get_signatures()] or None
+    return [_format_completion(c, include_params) for c in completions] or None
 
 
 def is_exception_class(name):
@@ -142,9 +146,9 @@ def _format_completion(d, include_params=True):
         path = path.replace('/', '\\/')
         completion['insertText'] = path
 
-    if (include_params and hasattr(d, 'params') and d.params and
-            not is_exception_class(d.name)):
-        positional_args = [param for param in d.params
+    sig = d.get_signatures()
+    if (include_params and sig and not is_exception_class(d.name)):
+        positional_args = [param for param in sig[0].params
                            if '=' not in param.description and
                            param.name not in {'/', '*'}]
 
@@ -167,8 +171,9 @@ def _format_completion(d, include_params=True):
 
 
 def _label(definition):
-    if definition.type in ('function', 'method') and hasattr(definition, 'params'):
-        params = ', '.join([param.name for param in definition.params])
+    sig = definition.get_signatures()
+    if definition.type in ('function', 'method') and sig:
+        params = ', '.join([param.name for param in sig[0].params])
         return '{}({})'.format(definition.name, params)
 
     return definition.name
diff --git a/pyls/workspace.py b/pyls/workspace.py
index f5c7237..05ca83e 100644
--- a/pyls/workspace.py
+++ b/pyls/workspace.py
@@ -213,16 +213,9 @@ class Document(object):
         return m_start[0] + m_end[-1]
 
     def jedi_names(self, all_scopes=False, definitions=True, references=False):
-        environment_path = None
-        if self._config:
-            jedi_settings = self._config.plugin_settings('jedi', document_path=self.path)
-            environment_path = jedi_settings.get('environment')
-        environment = self.get_enviroment(environment_path) if environment_path else None
-
-        return jedi.api.names(
-            source=self.source, path=self.path, all_scopes=all_scopes,
-            definitions=definitions, references=references, environment=environment,
-        )
+        script = self.jedi_script()
+        return script.get_names(all_scopes=all_scopes, definitions=definitions,
+                                references=references)
 
     def jedi_script(self, position=None):
         extra_paths = []
