<revisionlist>
  <revision rev="1" vrev="1">
    <srcmd5>a24863fd4bf80d9bacae8ceef1fdbf80</srcmd5>
    <version>1.4.46</version>
    <time>1683403744</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>1085134</requestid>
  </revision>
  <revision rev="2" vrev="2">
    <srcmd5>bd70c91d2ebbf9c25fea8ee6f1a2f04d</srcmd5>
    <version>1.4.46</version>
    <time>1683630428</time>
    <user>dimstar_suse</user>
    <comment>- remove parallel testing, too unstable
- readd provides which is needed to select between 1.x and 2.x</comment>
    <requestid>1085288</requestid>
  </revision>
  <revision rev="3" vrev="3">
    <srcmd5>f35763c47f1b4c3ce117ae8aa1a60944</srcmd5>
    <version>1.4.46</version>
    <time>1683728237</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>1085868</requestid>
  </revision>
  <revision rev="4" vrev="1">
    <srcmd5>8534c657b3ba9ed4f48d7f07d5a292ca</srcmd5>
    <version>1.4.49</version>
    <time>1695853492</time>
    <user>dimstar_suse</user>
    <comment>- update to 1.4.49
  * support for python3.12
  * see https://docs.sqlalchemy.org/en/20/changelog/changelog_14.html#change-1.4.49
</comment>
    <requestid>1113619</requestid>
  </revision>
  <revision rev="5" vrev="1">
    <srcmd5>b88e03484f68f6d4f2878572ad4d40b1</srcmd5>
    <version>1.4.54</version>
    <time>1726844936</time>
    <user>anag+factory</user>
    <comment>- Update to 1.4.54:
  * Fixed regression from 1.3 where the column key used for a hybrid property
    might be populated with that of the underlying column that it returns.
  * The pin for ``setuptools&lt;69.3`` in ``pyproject.toml`` has been removed.
  * Set up full Python 3.13 support to the extent currently possible, repairing
    issues within internal language helpers as well as the serializer extension
    module.
  * Adjustments to the C extensions, which are specific to the SQLAlchemy 1.x
    series, to work under Python 3.13.
  * Fixed regression going back to 1.4 where accessing a collection using the
    &quot;dynamic&quot; strategy on a transient object and attempting to query would
    raise an internal error. 
  * Fixed bug where ORM :func:`_orm.with_loader_criteria` would not apply
    itself to a :meth:`_sql.Select.join` where the ON clause were given as a
    plain SQL comparison, rather than as a relationship target or similar.
  * Fixed regression introduced by the fix when using pool pre-ping with
    PyMySQL version older than 1.0.
  * Fixed critical issue in asyncio version of the connection pool where
    calling :meth:`_asyncio.AsyncEngine.dispose` would produce a new connection
    pool that did not fully re-establish the use of asyncio-compatible mutexes
  * Fixed fundamental issue which prevented some forms of ORM &quot;annotations&quot;
    from taking place for subqueries which made use of :meth:`_sql.Select.join`
    against a relationship target
  * Repaired a new incompatibility in the MySQL &quot;pre-ping&quot; routine where the
    ``False`` argument passed to ``connection.ping()``, which is intended to
    disable an unwanted &quot;automatic reconnect&quot; feature
- Switch to pyproject macros.</comment>
    <requestid>1201952</requestid>
  </revision>
</revisionlist>
