Index: llvmlite-0.32.0/ffi/build.py
===================================================================
--- llvmlite-0.32.0.orig/ffi/build.py
+++ llvmlite-0.32.0/ffi/build.py
@@ -110,8 +110,8 @@ def main_posix(kind, library_ext):
 
     out = out.decode('latin1')
     print(out)
-    if not (out.startswith('8.0.') or out.startswith('7.0.')
-            or out.startswith('7.1.')):
+    if not (out.startswith('10.0') or out.startswith('9.0.') or out.startswith('8.0.')
+            or out.startswith('7.0.') or out.startswith('7.1.')):
         msg = (
             "Building llvmlite requires LLVM 7.0.x, 7.1.x or 8.0.x, got {!r}. "
             "Be sure to set LLVM_CONFIG to the right executable path.\n"
Index: llvmlite-0.32.0/llvmlite/tests/test_binding.py
===================================================================
--- llvmlite-0.32.0.orig/llvmlite/tests/test_binding.py
+++ llvmlite-0.32.0/llvmlite/tests/test_binding.py
@@ -356,7 +356,7 @@ class TestMisc(BaseTest):
     def test_version(self):
         major, minor, patch = llvm.llvm_version_info
         # one of these can be valid
-        valid = [(8, 0), (7, 0), (7, 1)]
+        valid = [(10,0), (9,0), (8, 0), (7, 0), (7, 1)]
         self.assertIn((major, minor), valid)
         self.assertIn(patch, range(10))
 
@@ -545,7 +545,7 @@ class TestModuleRef(BaseTest):
         with self.assertRaises(RuntimeError) as cm:
             llvm.parse_bitcode(b"")
         self.assertIn("LLVM bitcode parsing error", str(cm.exception))
-        self.assertIn("Invalid bitcode signature", str(cm.exception))
+        self.assertIn("file too small to contain bitcode header", str(cm.exception))
 
     def test_bitcode_roundtrip(self):
         # create a new context to avoid struct renaming
Index: llvmlite-0.32.0/ffi/linker.cpp
===================================================================
--- llvmlite-0.32.0.orig/ffi/linker.cpp
+++ llvmlite-0.32.0/ffi/linker.cpp
@@ -42,7 +42,7 @@ LLVMPY_LinkModules(LLVMModuleRef Dest, L
     auto OldDiagnosticHandler = Ctx.getDiagnosticHandler();
 
     // set the handler to a new one
-    Ctx.setDiagnosticHandler(llvm::make_unique<ReportNotAbortDiagnosticHandler>(errstream));
+    Ctx.setDiagnosticHandler(std::make_unique<ReportNotAbortDiagnosticHandler>(errstream));
 
     // link
     bool failed = LLVMLinkModules2(Dest, Src);
