<revisionlist>
  <revision rev="1" vrev="1">
    <srcmd5>c9364e85f86385e357bcb6bafe6be773</srcmd5>
    <version>0.11.0</version>
    <time>1559375523</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>706253</requestid>
  </revision>
  <revision rev="2" vrev="2">
    <srcmd5>7a0ba2cde693d0655957b07f884b00ba</srcmd5>
    <version>0.11.0</version>
    <time>1559580983</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>707069</requestid>
  </revision>
  <revision rev="3" vrev="1">
    <srcmd5>83af24cd0df9cf87bf798eb345acbcde</srcmd5>
    <version>0.12.1</version>
    <time>1565097112</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>721100</requestid>
  </revision>
  <revision rev="4" vrev="1">
    <srcmd5>ce213a4736b291f1d36e450c8bf6b60d</srcmd5>
    <version>0.13.0</version>
    <time>1578867851</time>
    <user>dimstar_suse</user>
    <comment>- update to 0.13.0
 * Use slots for memory channel state and statistics which should make
    memory channels slightly smaller and faster. 
 * OpenSSL has a bug in its handling of TLS 1.3 session tickets that can cause
    deadlocks or data loss in some rare edge cases. These edge cases most frequently
    happen during tests.
 * Trio now uses signal.set_wakeup_fd on all platforms.
 * Trio no longer crashes when an async function is implemented in C or Cython
    and then passed directly to trio.run or nursery.start_soon.
 * When a Trio task makes improper use of a non-Trio async library, Trio nowi
    causes an exception to be raised within the task at the point of the error,
    rather than abandoning the task and raising an error in its parent.
    This improves debuggability and resolves the TrioInternalError that would
    sometimes result from the old strategy. (#552)
 * In 0.12.0 we deprecated trio.run_sync_in_worker_thread in favor
    of trio.to_thread.run_sync. But, the deprecation message listed the wrong
    name for the replacement.
 * Fix regression introduced with cancellation changes in 0.12.0, where
    a trio.CancelScope which isn't cancelled could catch a propagating
    trio.Cancelled exception if shielding were changed while the cancellation
    was propagating.
 * Fix a crash that could happen when using MockClock with autojump enabled
    and a non-zero rate.
 * If you nest &gt;1000 cancel scopes within each other, Trio now handles that
    gracefully instead of crashing with a RecursionError.
 * Fixed the hash behavior of trio.Path to match pathlib.Path. Previously
    trio.Path's hash was inherited from object instead of from pathlib.PurePath.</comment>
    <requestid>763378</requestid>
  </revision>
  <revision rev="5" vrev="1">
    <srcmd5>7bf6ab19f5b449aee2b6b92ef4f846a2</srcmd5>
    <version>0.15.1</version>
    <time>1591742941</time>
    <user>dimstar_suse</user>
    <comment>- Update to 0.15.1:
  * Added a helpful error message if an async function is passed to
    trio.from_thread.run_sync or a sync function to trio.from_thread.run. (#1244)
  * Previously, when trio.run_process was cancelled, it always killed the subprocess immediately. Now, on Unix, it first gives the process a chance to clean up by sending SIGTERM, and only escalates to SIGKILL if the process is still running after 5 seconds. But if you prefer the old behavior, or want to adjust the timeout, then don't worry: you can now pass a custom deliver_cancel= argument to define your own process killing policy. (#1104)
  * It turns out that creating a subprocess can block the parent process for a surprisingly long time. So trio.open_process now uses a worker thread to avoid blocking the event loop. (#1109)
  * On Linux kernels v5.3 or newer, trio.Process.wait now uses the pidfd API to track child processes. This shouldn't have any user-visible change, but it makes working with subprocesses faster and use less memory. (#1241)
  * The trio.Process.returncode attribute is now automatically updated as needed, instead of only when you call ~trio.Process.poll or ~trio.Process.wait. Also, repr(process_object) now always contains up-to-date information about the process status. (#1315)</comment>
    <requestid>812800</requestid>
  </revision>
</revisionlist>
