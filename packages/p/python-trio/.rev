<revisionlist>
  <revision rev="1" vrev="1">
    <srcmd5>c9364e85f86385e357bcb6bafe6be773</srcmd5>
    <version>0.11.0</version>
    <time>1559375523</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>706253</requestid>
  </revision>
  <revision rev="2" vrev="2">
    <srcmd5>7a0ba2cde693d0655957b07f884b00ba</srcmd5>
    <version>0.11.0</version>
    <time>1559580983</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>707069</requestid>
  </revision>
  <revision rev="3" vrev="1">
    <srcmd5>83af24cd0df9cf87bf798eb345acbcde</srcmd5>
    <version>0.12.1</version>
    <time>1565097112</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>721100</requestid>
  </revision>
  <revision rev="4" vrev="1">
    <srcmd5>ce213a4736b291f1d36e450c8bf6b60d</srcmd5>
    <version>0.13.0</version>
    <time>1578867851</time>
    <user>dimstar_suse</user>
    <comment>- update to 0.13.0
 * Use slots for memory channel state and statistics which should make
    memory channels slightly smaller and faster. 
 * OpenSSL has a bug in its handling of TLS 1.3 session tickets that can cause
    deadlocks or data loss in some rare edge cases. These edge cases most frequently
    happen during tests.
 * Trio now uses signal.set_wakeup_fd on all platforms.
 * Trio no longer crashes when an async function is implemented in C or Cython
    and then passed directly to trio.run or nursery.start_soon.
 * When a Trio task makes improper use of a non-Trio async library, Trio nowi
    causes an exception to be raised within the task at the point of the error,
    rather than abandoning the task and raising an error in its parent.
    This improves debuggability and resolves the TrioInternalError that would
    sometimes result from the old strategy. (#552)
 * In 0.12.0 we deprecated trio.run_sync_in_worker_thread in favor
    of trio.to_thread.run_sync. But, the deprecation message listed the wrong
    name for the replacement.
 * Fix regression introduced with cancellation changes in 0.12.0, where
    a trio.CancelScope which isn't cancelled could catch a propagating
    trio.Cancelled exception if shielding were changed while the cancellation
    was propagating.
 * Fix a crash that could happen when using MockClock with autojump enabled
    and a non-zero rate.
 * If you nest &gt;1000 cancel scopes within each other, Trio now handles that
    gracefully instead of crashing with a RecursionError.
 * Fixed the hash behavior of trio.Path to match pathlib.Path. Previously
    trio.Path's hash was inherited from object instead of from pathlib.PurePath.</comment>
    <requestid>763378</requestid>
  </revision>
  <revision rev="5" vrev="1">
    <srcmd5>7bf6ab19f5b449aee2b6b92ef4f846a2</srcmd5>
    <version>0.15.1</version>
    <time>1591742941</time>
    <user>dimstar_suse</user>
    <comment>- Update to 0.15.1:
  * Added a helpful error message if an async function is passed to
    trio.from_thread.run_sync or a sync function to trio.from_thread.run. (#1244)
  * Previously, when trio.run_process was cancelled, it always killed the subprocess immediately. Now, on Unix, it first gives the process a chance to clean up by sending SIGTERM, and only escalates to SIGKILL if the process is still running after 5 seconds. But if you prefer the old behavior, or want to adjust the timeout, then don't worry: you can now pass a custom deliver_cancel= argument to define your own process killing policy. (#1104)
  * It turns out that creating a subprocess can block the parent process for a surprisingly long time. So trio.open_process now uses a worker thread to avoid blocking the event loop. (#1109)
  * On Linux kernels v5.3 or newer, trio.Process.wait now uses the pidfd API to track child processes. This shouldn't have any user-visible change, but it makes working with subprocesses faster and use less memory. (#1241)
  * The trio.Process.returncode attribute is now automatically updated as needed, instead of only when you call ~trio.Process.poll or ~trio.Process.wait. Also, repr(process_object) now always contains up-to-date information about the process status. (#1315)</comment>
    <requestid>812800</requestid>
  </revision>
  <revision rev="6" vrev="1">
    <srcmd5>4ca09add97d7c623223c21bb291aae88</srcmd5>
    <version>0.16.0</version>
    <time>1595773134</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>822413</requestid>
  </revision>
  <revision rev="7" vrev="1">
    <srcmd5>77b69357d4989657fdbc929b219bb6fb</srcmd5>
    <version>0.17.0</version>
    <time>1603961249</time>
    <user>dimstar_suse</user>
    <comment>- Remove hashbang and tests in runtime package
- Disable test test_close_at_bad_time_for_send_all due to failure on PPC
- Update to v0.17.0
  * trio.open_tcp_stream has a new local_address= keyword argument
    that can be used on machines with multiple IP addresses to
    control which IP is used for the outgoing connection
  * If you pass a raw IP address into sendto, it no longer spends
    any time trying to resolve the hostname. If you're using UDP,
    this should substantially reduce your per-packet overhead
  * trio.lowlevel.checkpoint is now much faster
  * new, lower-overhead data structure to track upcoming timeouts,
    which should make your programs faster
  * Trio can now be imported when sys.excepthook is a functools.partial
    instance, which might occur in a pytest-qt test function
  * The thread cache didn't release its reference to the previous job
  * Remove wait_socket_*, notify_socket_closing, notify_fd_closing,
    run_sync_in_worker_thread and current_default_worker_thread_limiter
  * When using &quot;instruments&quot;, you now only &quot;pay for what you use&quot;:
    if there are no instruments installed that override a particular
    hook such as `abc.Instrument.before_task_step`, then Trio doesn't
    waste any effort on checking its instruments when the event
    corresponding to that hook occurs.</comment>
    <requestid>841142</requestid>
  </revision>
  <revision rev="8" vrev="2">
    <srcmd5>bfdf4624cb4cf522d8cdcbfa30925fd7</srcmd5>
    <version>0.17.0</version>
    <time>1610736205</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>861750</requestid>
  </revision>
  <revision rev="9" vrev="1">
    <srcmd5>d608b0b7249eb316c876ac8c3a5b5d6c</srcmd5>
    <version>0.19.0</version>
    <time>1639685933</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>940542</requestid>
  </revision>
  <revision rev="10" vrev="1">
    <srcmd5>c1b067e130085c8aaa5be2565b036774</srcmd5>
    <version>0.20.0</version>
    <time>1648916423</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>965627</requestid>
  </revision>
  <revision rev="11" vrev="1">
    <srcmd5>db87a76dd1e29181a2ffbc8200703f80</srcmd5>
    <version>0.21.0</version>
    <time>1664210863</time>
    <user>dimstar_suse</user>
    <comment>- update to 0.21.0:
  * Trio now supports Python 3.11.
  * Remove support for Python 3.6.</comment>
    <requestid>1005914</requestid>
  </revision>
  <revision rev="12" vrev="2">
    <srcmd5>d383740887359a1acd59609b6ddf725e</srcmd5>
    <version>0.21.0</version>
    <time>1669193264</time>
    <user>dimstar_suse</user>
    <comment>- Fix rpmlint error python-tests-in-package.
</comment>
    <requestid>1037176</requestid>
  </revision>
  <revision rev="13" vrev="1">
    <srcmd5>e3d7b6e0787adaa8379d86027fe35254</srcmd5>
    <version>0.22.0</version>
    <time>1672315719</time>
    <user>dimstar_suse</user>
    <comment>Forwarded request #1045068 from bnavigator

- Try again with 0.22.0 and a fixed httpcore

  - go back to 0.21.0 as it breaks httpcore</comment>
    <requestid>1045129</requestid>
  </revision>
  <revision rev="14" vrev="2">
    <srcmd5>0cfd59c4951ebf11e3cebe31f37633fe</srcmd5>
    <version>0.22.0</version>
    <time>1682193497</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>1081734</requestid>
  </revision>
  <revision rev="15" vrev="3">
    <srcmd5>3d9d4576c6964caaa2ac188b6939f539</srcmd5>
    <version>0.22.0</version>
    <time>1695327199</time>
    <user>anag+factory</user>
    <comment>- remove buildrequires that are not used on sle15

  * If you want to use Trio, but are stuck with some other event loop
    memory channels slightly smaller and faster.</comment>
    <requestid>1112325</requestid>
  </revision>
  <revision rev="16" vrev="1">
    <srcmd5>0cf45712fe8026efc34e6419104160ad</srcmd5>
    <version>0.23.2</version>
    <time>1705874854</time>
    <user>anag+factory</user>
    <comment></comment>
    <requestid>1138213</requestid>
  </revision>
  <revision rev="17" vrev="1">
    <srcmd5>1c6eff5b1c5eec81f18f9c3ce160edb7</srcmd5>
    <version>0.25.0</version>
    <time>1711477470</time>
    <user>anag+factory</user>
    <comment>Forwarded request #1160593 from mcalabkova

- Update to 0.25.0
    * New helper classes: RaisesGroup and Matcher.
    * MultiError has been fully removed, and all relevant trio 
      functions now raise ExceptionGroups instead.
    * The strict_exception_groups parameter now defaults to True 
      in trio.run and trio.lowlevel.start_guest_run.
    * Add trio.testing.wait_all_threads_completed, which blocks 
      until no threads are running tasks.
    * Path is now a subclass of pathlib.PurePath, allowing it to 
      interoperate with other standard pathlib types.</comment>
    <requestid>1160629</requestid>
  </revision>
  <revision rev="18" vrev="1">
    <srcmd5>dd3fa087216f82fb0cd09c691aa909d4</srcmd5>
    <version>0.25.1</version>
    <time>1719255050</time>
    <user>anag+factory</user>
    <comment>Automatic submission by obs-autosubmit</comment>
    <requestid>1182980</requestid>
  </revision>
  <revision rev="19" vrev="1">
    <srcmd5>c9395983a1f66a106cbd23d7e1cc089f</srcmd5>
    <version>0.26.2</version>
    <time>1725885806</time>
    <user>anag+factory</user>
    <comment>- update to 0.26.2:
  * Remove remaining hash usage and fix test configuration issue
    that prevented it from being caught.
  * Switched attrs usage off of hash, which is now deprecated.
  * Use PyPI's Trusted Publishers to make releases.
  * Added an interactive interpreter python -m trio. This makes
    it easier to try things and experiment with trio in the a
    Python repl. Use the await keyword without needing to call
    trio.run()  $ python -m trio Trio 0.21.0+dev, Python 3.10.6
    Use &quot;await&quot; directly instead of &quot;trio.run()&quot;. Type &quot;help&quot;,
    &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information. &gt;&gt;&gt;
    import trio &gt;&gt;&gt; await trio.sleep(1); print(&quot;hi&quot;)  # prints
    after one second hi  See :ref:`interactive debugging` for
    further detail. (#2972)
  * :class:`trio.testing.RaisesGroup` can now catch an unwrapped
    exception with unwrapped=True. This means that the behaviour
    of :ref:`except* &lt;except_star&gt;` can be fully replicated in
    combination with flatten_subgroups=True (formerly
    strict=False). (#2989)
  * Fixed a bug where :class:`trio.testing.RaisesGroup(...,
    strict=False) &lt;trio.testing.RaisesGroup&gt;` would check the
    number of exceptions in the raised ExceptionGroup before
    flattening subgroups, leading to incorrectly failed matches.
    It now properly supports end ($) regex markers in the match
    message, by no longer including &quot; (x sub-exceptions)&quot; in the
    string it matches against.
  * Deprecated strict parameter from
    :class:`trio.testing.RaisesGroup`, previous functionality of
    strict=False is now in flatten_subgroups=True.</comment>
    <requestid>1199467</requestid>
  </revision>
</revisionlist>
