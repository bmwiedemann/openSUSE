From 191dc768b564e3b41f8f130561a4ddc51d82b9e9 Mon Sep 17 00:00:00 2001
From: Kevin Marsh <kevinmarsh3@gmail.com>
Date: Fri, 23 Sep 2022 10:08:10 -0700
Subject: [PATCH 1/3] Stop supporting older deprecated Django versions (2.2 and
 3.1)

---
 .github/workflows/test.yml | 6 +-----
 .pre-commit-config.yaml    | 2 +-
 README.rst                 | 4 ++--
 requirements.in            | 2 +-
 setup.py                   | 4 +---
 tox.ini                    | 6 ++----
 6 files changed, 8 insertions(+), 16 deletions(-)

diff --git a/requirements.in b/requirements.in
index d9a47c7..ed4b0d4 100644
--- a/requirements.in
+++ b/requirements.in
@@ -1,5 +1,5 @@
 bump2version
-Django>2.2
+Django>3.2
 pip-tools
 pre-commit
 wheel
diff --git a/setup.py b/setup.py
index 212157e..bde3794 100644
--- a/setup.py
+++ b/setup.py
@@ -5,7 +5,7 @@
 
 
 REQUIREMENTS = [
-    'django>=2.2',
+    'django>=3.2',
 ]
 
 
@@ -21,8 +21,6 @@
     'Programming Language :: Python :: 3.9',
     'Programming Language :: Python :: 3.10',
     'Framework :: Django',
-    'Framework :: Django :: 2.2',
-    'Framework :: Django :: 3.1',
     'Framework :: Django :: 3.2',
     'Framework :: Django :: 4.0',
     'Topic :: Internet :: WWW/HTTP',

From c345edf1e2180eea641a69f10939475820c6df8c Mon Sep 17 00:00:00 2001
From: Kevin Marsh <kevinmarsh3@gmail.com>
Date: Fri, 23 Sep 2022 09:42:21 -0700
Subject: [PATCH 2/3] Fix `Tag` name breaking in Django 4.1

Django underwent some refactoring with regards to how it's
tag names are generated and registered in the template library

Closes #84
---
 classytags/core.py | 15 +++------------
 tests/test_core.py | 22 ++++++++++++++++++++++
 2 files changed, 25 insertions(+), 12 deletions(-)

diff --git a/classytags/core.py b/classytags/core.py
index 9a991e1..8190e40 100644
--- a/classytags/core.py
+++ b/classytags/core.py
@@ -108,22 +108,13 @@ def parse(self, parser, tokens):
 class TagMeta(type):
     """
     Metaclass for the Tag class that set's the name attribute onto the class
-    and a _decorated_function pseudo-function which is used by Django's
-    template system to get the tag name.
     """
     def __new__(cls, name, bases, attrs):
-        parents = [base for base in bases if isinstance(base, TagMeta)]
-        if not parents:
+        if not any(base for base in bases if isinstance(base, TagMeta)):
             return super().__new__(cls, name, bases, attrs)
         tag_name = str(attrs.get('name', get_default_name(name)))
-
-        def fake_func():
-            pass  # pragma: no cover
-
-        fake_func.__name__ = tag_name
-        attrs['_decorated_function'] = fake_func
-        attrs['name'] = str(tag_name)
-        return super().__new__(cls, name, bases, attrs)
+        attrs['name'] = tag_name
+        return super().__new__(cls, tag_name, bases, attrs)
 
 
 class Tag(TagMeta('TagMeta', (Node,), {})):
diff --git a/tests/test_core.py b/tests/test_core.py
index e1cc8ae..13d6a2e 100644
--- a/tests/test_core.py
+++ b/tests/test_core.py
@@ -591,6 +591,22 @@ class MyTag2(core.Tag):
         msg = "'my_tag2' in %s" % lib.tags.keys()
         self.assertTrue('my_tag2' not in lib.tags, msg)
 
+        # test decorated naming
+        lib = template.Library()
+
+        @lib.tag(name="my_decorated_tag_5")
+        class MyTag5(core.Tag):
+            pass
+        msg = "'my_decorated_tag_5' not in %s" % lib.tags.keys()
+        self.assertTrue('my_decorated_tag_5' in lib.tags, msg)
+
+        # test decorated and explicit naming
+        # the tag registration takes precedence over the name attribute
+        lib = template.Library()
+        lib.tag('my_decorated_tag_6', MyTag2)
+        msg = "'my_decorated_tag_6' not in %s" % lib.tags.keys()
+        self.assertTrue('my_decorated_tag_6' in lib.tags, msg)
+
     def test_hello_world(self):
         class Hello(core.Tag):
             options = core.Options(
@@ -971,6 +987,12 @@ class MyTag(core.Tag):
         tag = MyTag(dummy_parser, DummyTokens())
         self.assertEqual('<Tag: mytag>', repr(tag))
 
+    def test_repr_without_explicit_name(self):
+        class MyTag(core.Tag):
+            pass
+        tag = MyTag(dummy_parser, DummyTokens())
+        self.assertEqual('<Tag: my_tag>', repr(tag))
+
     def test_non_required_multikwarg(self):
         options = core.Options(
             arguments.MultiKeywordArgument('multi', required=False),

From 3292aeeaae38694e0efdf0842c6894efc25f6a3f Mon Sep 17 00:00:00 2001
From: Kevin Marsh <kevinmarsh3@gmail.com>
Date: Fri, 23 Sep 2022 09:46:03 -0700
Subject: [PATCH 3/3] Officially support Django 4.1

---
 .github/workflows/test.yml | 5 +++--
 CHANGELOG.rst              | 4 +++-
 setup.py                   | 1 +
 tox.ini                    | 2 --
 4 files changed, 7 insertions(+), 5 deletions(-)

diff --git a/setup.py b/setup.py
index bde3794..c8c7d43 100644
--- a/setup.py
+++ b/setup.py
@@ -23,6 +23,7 @@
     'Framework :: Django',
     'Framework :: Django :: 3.2',
     'Framework :: Django :: 4.0',
+    'Framework :: Django :: 4.1',
     'Topic :: Internet :: WWW/HTTP',
     'Topic :: Internet :: WWW/HTTP :: Dynamic Content',
     'Topic :: Software Development',
