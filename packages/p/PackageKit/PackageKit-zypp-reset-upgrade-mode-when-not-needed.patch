From d9b4b4ab05a36612bf2771bbfc7e648d5534dc14 Mon Sep 17 00:00:00 2001
From: Jonathan Kang <jonathankang@gnome.org>
Date: Wed, 16 Oct 2019 08:44:42 +0800
Subject: [PATCH] zypp: Reset upgrade mode to FALSE when not needed
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Previously, after upgrade mode is set to TRUE, it’ll stay to be TRUE
util PackageKit daemon quits(it’s configured to quit after idling for
15 seconds). This can lead to some unexpected error somehow.

Fix that by spawning a timeout function after setting it to TRUE. We
cannot direct reset it, because updates-packages relies upgrade mode
in Tumbleweed to perform distribution upgrade. 1 second seems to be
enough for update-packages to be called, and then we can cancel the
timeout function and reset upgrade mode after all actions are done in
update-packages.
---
 backends/zypp/pk-backend-zypp.cpp | 41 ++++++++++++++++++++++++++++++-
 1 file changed, 40 insertions(+), 1 deletion(-)

Index: PackageKit-1.1.12/backends/zypp/pk-backend-zypp.cpp
===================================================================
--- PackageKit-1.1.12.orig/backends/zypp/pk-backend-zypp.cpp
+++ PackageKit-1.1.12/backends/zypp/pk-backend-zypp.cpp
@@ -154,6 +154,9 @@ guint _dl_count = 0;
 guint _dl_progress = 0;
 guint _dl_status = 0;
 
+/* Timeout id for resetting upgrade mode. */
+static guint upgrade_mode_id = 0;
+
 /**
  * Build a package_id from the specified resolvable.  The returned
  * gchar * should be freed with g_free ().
@@ -2409,6 +2412,18 @@ check_for_self_update (PkBackend *backen
 	return FALSE;
 }*/
 
+static gboolean
+reset_upgrade_mode (gpointer user_data)
+{
+   PkBackendJob *job = PK_BACKEND_JOB (user_data);
+   ZyppJob zjob (job);
+   ZYpp::Ptr zypp = zjob.get_zypp ();
+
+   zypp->resolver ()->setUpgradeMode (FALSE);
+
+   return G_SOURCE_REMOVE;
+}
+
 static void
 backend_get_updates_thread (PkBackendJob *job, GVariant *params, gpointer user_data)
 {
@@ -2476,6 +2491,22 @@ backend_get_updates_thread (PkBackendJob
 	}
 
 	pk_backend_job_set_percentage (job, 100);
+
+   /* We only want to set the upgrade mode to TRUE when we're
+    * getting available updates and updating the system in
+    * Tumbleweed. And we should reset it to FALSE after it's done
+    * so that it won't impact other actions which doesn't expect
+    * upgrade mode to be TRUE.
+    *
+    * For get-updates command, we can simply reset upgrade mode
+    * when it's done. But the issue is "pkcon update" calls
+    * get-updates to get a list of updates and them update those
+    * packages(upgrade mode should be kept TRUE in Tumbleweed).
+    *
+    * To fix that, we can spawn a timeout function to reset upgrade
+    * mode. We need cancel the timeout function in
+    * backend_update_packages_thread(). */
+   upgrade_mode_id = g_timeout_add (1000, reset_upgrade_mode, job);
 }
 
 void
@@ -3348,6 +3379,10 @@ backend_update_packages_thread (PkBacken
 	ResPool pool = zypp_build_pool (zypp, TRUE);
 	PkRestartEnum restart = PK_RESTART_ENUM_NONE;
 	
+   if (upgrade_mode_id) {
+       g_source_remove (upgrade_mode_id);
+   }
+
 	if ( zypp->resolver()->upgradeMode() ) {
 		zypp->resolver()->dupSetAllowVendorChange ( ZConfig::instance().solver_dupAllowVendorChange() );
 	}
@@ -3393,6 +3428,11 @@ backend_update_packages_thread (PkBacken
 	zypp_perform_execution (job, zypp, UPDATE, FALSE, transaction_flags);
 
 	zypp->resolver()->setUpgradeMode(FALSE);
+   /* Don't reset upgrade mode if we're simulating the changes. Only reset
+    * it after the real actions has been done. */
+   if (!pk_bitfield_contain (transaction_flags, PK_TRANSACTION_FLAG_ENUM_SIMULATE)) {
+       zypp->resolver()->setUpgradeMode(FALSE);
+   }
 }
 
 /**
