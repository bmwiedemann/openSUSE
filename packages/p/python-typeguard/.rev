<revisionlist>
  <revision rev="1" vrev="1">
    <srcmd5>a25dc8e482c0139db605503e1c576deb</srcmd5>
    <version>2.9.1</version>
    <time>1593458230</time>
    <user>dimstar_suse</user>
    <comment>Initial package for 2.9.1</comment>
    <requestid>817607</requestid>
  </revision>
  <revision rev="2" vrev="1">
    <srcmd5>1dacfddf5565ab3778c6a3f039a94028</srcmd5>
    <version>2.13.3</version>
    <time>1665591750</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>1009899</requestid>
  </revision>
  <revision rev="3" vrev="2">
    <srcmd5>63ae8bd020bce3c699b78efd6cddda89</srcmd5>
    <version>2.13.3</version>
    <time>1682193722</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>1081995</requestid>
  </revision>
  <revision rev="4" vrev="1">
    <srcmd5>fd266ec33fc84702f798b4db6bee605c</srcmd5>
    <version>4.0.0</version>
    <time>1684490117</time>
    <user>dimstar_suse</user>
    <comment>- update to 4.0.0:
  * Fixed ``@typechecked`` optimization causing compilation of
    instrumented code to fail  when an ``if`` block was left
    empty by the AST transformer
  * Fixed the AST transformer trying to parse the second argument
    of ``typing.Annotated`` as a forward reference
  * Added ``InstrumentationWarning`` to the public API
  * Changed ``@typechecked`` to skip instrumentation in optimized
    mode, as in typeguard 2.x
  * Avoid type checks where the types in question are shadowed by
    local variables
  * Fixed instrumentation using ``typing.Optional`` without a
    subscript when the subscript value was erased due to
    being an ignored import
  * Fixed ``TypeError: isinstance() arg 2 must be a type or tuple
    of types`` when instrumented code tries to check a value
    against a naked (``str``, not ``ForwardRef``)
  * forward reference
  * Fixed instrumentation using the wrong &quot;self&quot; type in the
    ``__new__()`` method
  * Fixed imports guarded by ``if TYPE_CHECKING:`` when used with
    subscripts
  * (``SomeType[...]``) being replaced with ``Any[...]`` instead
    of just ``Any``
  * Fixed instrumentation inadvertently mutating a function's
    annotations on Python 3.7 and 3.8
  * Fixed ``Concatenate[...]`` in ``Callable`` parameters causing
    ``TypeError`` to be raised
  * Fixed type checks for ``*args`` or ``**kwargs`` not being
    suppressed when their types are unusable</comment>
    <requestid>1087114</requestid>
  </revision>
  <revision rev="5" vrev="1">
    <srcmd5>1d767b10f7593682e1e5d8cab8507ca1</srcmd5>
    <version>4.1.5</version>
    <time>1701792064</time>
    <user>anag+factory</user>
    <comment>- update to 4.1.5:
  * Fixed ``Callable`` erroneously rejecting a callable that has
    the requested amount of positional arguments but they have
    defaults
  * Fixed a regression introduced in v4.1.4 where the elements of
    ``Literal`` got quotes removed from them by the AST transformer
  * Fixed ``AttributeError`` where the transformer removed
    elements from a PEP 604 union
  * Fixed ``AttributeError: 'Subscript' object has no attribute
    'slice'`` when encountering an annotation with a subscript
    containing an ignored type
  * Fixed type checking not being skipped when the target is a
    union (PEP 604 or ``typing.Union``) where one of the elements
    is an ignored type (shadowed by an argument, variable
    assignment or an ``if TYPE_CHECKING`` import)
  * Dropped Python 3.7 support
  * Fixed ``@typechecked`` optimization causing compilation of
    instrumented code to fail when any block was left empty by the
    AST transformer (eg ``if`` or ``try`` / ``except`` blocks)
  * Fixed placement of injected typeguard imports with respect to
    ``__future__`` imports and module docstrings
  * Fixed ``Any`` being removed from a subscript that still
    contains other elements
  * Fixed ``suppress_type_checks()`` causing annotated variable
    assignments to always assign ``None``
  * Added support for passing a tuple as ``expected_type`` to
    ``check_type()``, making it more of a drop-in replacement for
    ``isinstance()``
  * Fixed regression where ``Literal`` inside a ``Union`` had
    quotes stripped from its contents, thus typically causing</comment>
    <requestid>1130725</requestid>
  </revision>
  <revision rev="6" vrev="1">
    <srcmd5>9a6aa16306c64f0a8c75a01a7355ffc9</srcmd5>
    <version>4.3.0</version>
    <time>1718033818</time>
    <user>anag+factory</user>
    <comment>- update to 4.3.0:
  * Added support for checking against static protocols
  * Fixed some compatibility problems when running on Python 3.13
  * Fixed test suite incompatibility with pytest 8.2
  * Fixed pytest plugin crashing on pytest version older than
    v7.0.0 (even if it's just present)
  * Fixed missing typing_extensions dependency for Python 3.12
  * Fixed deprecation warning in the test suite on Python 3.13
  * Added support for specifying options for the pytest plugin
    via pytest config files
  * Avoid creating reference cycles when type checking unions (PR
    by Shantanu)
  * Fixed Optional[...] being removed from the AST if it was
    located within a subscript
  * Fixed TypedDict from typing_extensions not being recognized
    as one
  * Fixed typing types (dict[str, int], List[str], etc.) not
    passing checks against type or Type
  * Fixed detection of optional fields (NotRequired[...]) in
    TypedDict when using forward references
  * Fixed mapping checks against Django's MultiValueDict</comment>
    <requestid>1179514</requestid>
  </revision>
  <revision rev="7" vrev="1">
    <srcmd5>72484b183a9b2c8748c1498894afd525</srcmd5>
    <version>4.4.0</version>
    <time>1730491242</time>
    <user>dimstar_suse</user>
    <comment>- update to 4.4.0:
  * Added proper checking for method signatures in protocol
    checks
  * Fixed basic support for intersection protocols
  * Fixed protocol checks running against the class of an
    instance and not the instance itself (this produced wrong
    results for non-method member checks)</comment>
    <requestid>1219719</requestid>
  </revision>
  <revision rev="8" vrev="1">
    <srcmd5>e9cb7645175d3364a8ad604ce534dd0f</srcmd5>
    <version>4.4.1</version>
    <time>1732198407</time>
    <user>anag+factory</user>
    <comment>- update to 4.4.1:
  * Dropped Python 3.8 support
  * Changed the signature of typeguard_ignore() to be compatible
    with typing.no_type_check() (PR by @jolaf)
  * Avoid creating reference cycles when type checking uniontypes
    and classes
  * Fixed checking of variable assignments involving tuple
    unpacking
  * Fixed TypeError when checking a class against type[Self]
  * Fixed checking of protocols on the class level (against
    type[SomeProtocol])
  * Fixed Self checks in instance/class methods that have
    positional-only arguments
  * Fixed explicit checks of PEP 604 unions against
    types.UnionType
  * Fixed checks against annotations wrapped in NotRequired not
    being run unless the NotRequired is a forward reference
  * Fixed the pytest_ignore_collect hook in the pytest plugin
    blocking default pytest collection ignoring behavior by
    returning None instead of False (PR by @mgorny)</comment>
    <requestid>1225374</requestid>
  </revision>
  <revision rev="9" vrev="1">
    <srcmd5>833e0bba35da3f6b3b30e005ca8216b9</srcmd5>
    <version>4.4.2</version>
    <time>1741268889</time>
    <user>anag+factory</user>
    <comment>- drop unneeded dependency
- Update to 4.4.2
  * Fixed ``TypeCheckError`` in unpacking assignment involving
    properties of a parameter of the function
  * Fixed display of module name for forward references
  * Fixed ``TypeError`` when using an assignment expression
  * Fixed ``ValueError: no signature found for builtin`` when
    checking against a protocol and a matching attribute in the
    subject is a built-in function
</comment>
    <requestid>1250003</requestid>
  </revision>
  <revision rev="10" vrev="1">
    <srcmd5>38c93a766457f0db4980d4d007fd048a</srcmd5>
    <version>4.4.4</version>
    <time>1751281415</time>
    <user>anag_factory</user>
    <comment></comment>
    <requestid>1288852</requestid>
  </revision>
</revisionlist>
