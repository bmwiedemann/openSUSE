-------------------------------------------------------------------
Mon May  8 05:29:06 UTC 2023 - Johannes Kastl <kastl@b1-systems.de>

- add sle15_python_module_pythons

-------------------------------------------------------------------
Wed Jan 18 08:12:49 UTC 2023 - Torsten Gruner <simmphonie@opensuse.org>

- ignore some faulty tests
  Because of python-packaging version: gh#sarugaku/resolvelib#114

-------------------------------------------------------------------
Thu Dec 15 21:03:50 UTC 2022 - Dirk Müller <dmueller@suse.com>

- add comment on why we need to stay with < 0.9.0 (bsc#1206225)

-------------------------------------------------------------------
Sun Jul 17 08:24:27 UTC 2022 - Dirk Müller <dmueller@suse.com>

- update to 0.8.1:
  * A new reporter hook ``resolving_conflicts`` is added. The resolver triggers
  * this hook when it detects conflicts in the dependency tree, and before it
  * attempts to fix them. The hook accepts one single argument ``causes``, which
  * is a list of ``(requirement, parent)`` 2-tuples that represents all the
  * edges that lead to the detected conflicts. 

-------------------------------------------------------------------
Sun Nov  7 18:26:54 UTC 2021 - Dirk Müller <dmueller@suse.com>

- update to 0.8.0:
  * Add ``backtrack_causes`` to ``get_preference``, which contains information
    about the requirements involved in the most recent backtrack. This allows
    the provider to utilise this information to tweak the ordering as well as
    for recording/reporting conflicts.
  * When merging a candidate's dependencies, make sure the merge target is
    up-to-date within the loop, so the merge does not lose information when a
    candidate returns multiple dependency specifications under one identifier
    (e.g. specifyiung two dependencies ``a>1`` and ``a<2``, instead of one single
    ``a>1,<2`` dependency).  `#80 <https://github.com/sarugaku/resolvelib/issues/80>`_
  * Redesign ``get_preference()`` to include resolution state on dependencies
    other than the currently working one, to allow the provider to better take
    account of the global resolver knowledge and determine the best strategy. The
    provider now can, for example, correctly calculate how far a dependency is
    from the root node in the graph.  `#74 <https://github.com/sarugaku/resolvelib/issues/74>`_
  * A new argument ``incompatibilities`` is now passed to the ``find_matches()``
    hook, which the provider must use to exclude matches from the return value.
  * Redesign ``find_matches()`` to include resolution state on dependencies other
    than the currently working one, to handle usages that need to return candidates
    based on non-local states. One such example is PEP 508 direct URLs specified
    on a package, which need to be available to the same package specified with
    extras (which would have a different identifier).
  * The resolver no longer relies on implicit candidate equality to detect
    incompatibilities. This is done by an additional ``find_matches()`` argument;
    see the *Features* section to learn more.
  * Provide type stubs for most classes. 
  * Fix a state management bug that causes the resolver to enter an infinite loop
    in certain backtracking cases.
  * Fix a performance regression if ``find_matches()`` returns a non-built-in sequence instance.
  * ``find_matches()`` now may return a ``Callable[[], Iterator[Candidate]]`` to
    avoid needing to provide all candidates eagerly for the resolver. This
    improves performance when fetching candidates is costly, but not always
    required.
  * Add ``parent`` argument to the ``add_requirement()`` reporter hook.
  * Redesign ``find_matches()`` to support a requirement "adding" candidates to
    the set, and nudge the provider away from implementing ``find_matches()`` and
    ``is_satisfied_by()`` with incorrect set properties.

-------------------------------------------------------------------
Wed Apr 15 15:49:52 UTC 2020 - Marketa Calabkova <mcalabkova@suse.com>

- Update to 0.3.0
  * Provide both the requirements and their parents as exceptiondata for the
    ``ResolutionImpossible`` exception, via a ``causes`` attribute that replaces
    the previous ``requirements`` attribute.
  * Make resolver backtrack when none of the candidates requested for a package
    are able to resolve due to them requesting unworkable requirements, or a
    package has no candidates at all. Previously the resolver would give up on the
    spot.
  * Ensure the result returned by the resolver only contains candidates that are
    actually needed. This is done by tracing the graph after resolution completes,
    snipping nodes that don’t have a route to the root.

-------------------------------------------------------------------
Sat Mar 16 17:27:15 UTC 2019 - Jan Engelhardt <jengelh@inai.de>

- Use noun phrase in descriptions.

-------------------------------------------------------------------
Fri Mar  1 01:57:24 PM UTC 2019 - John Vandenberg <jayvdb@gmail.com>

- Initial spec for v0.2.2
