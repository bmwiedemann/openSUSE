<revisionlist>
  <revision rev="1" vrev="1">
    <srcmd5>39921f00fa42e1f4d949e2ba13b37cb0</srcmd5>
    <version>1.2.1</version>
    <time>1585176375</time>
    <user>dimstar_suse</user>
    <comment> </comment>
    <requestid>788099</requestid>
  </revision>
  <revision rev="2" vrev="1">
    <srcmd5>a21bd42d02516dc70415905b1e7fe4b5</srcmd5>
    <version>1.3.0</version>
    <time>1594228374</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>819132</requestid>
  </revision>
  <revision rev="3" vrev="1">
    <srcmd5>2e7e213c7a3eb4e332ccf9c3be72046b</srcmd5>
    <version>1.4.2</version>
    <time>1596652101</time>
    <user>dimstar_suse</user>
    <comment>- Update to 1.4.2:
  * C-level:
      - simplify pack/unpack code
      - fix memory leak in `~` operation (bitarray_cpinvert)
  * add official Python 3.9 support
  * improve many docstrings
  * add DeprecationWarning for `bitdiff()`
  * add DeprecationWarning when trying to extend bitarrays
    from bytes on Python 3 (`bitarrays(b'011')` and `.extend(b'110')`)
  * C-level:
      - rewrote `.fromfile()` and `.tofile()` implementation,
        such that now the same code is used for Python 2 and 3.
        The new implementation is more memoery efficient on
        Python 3.
      - use memcmp() in richcompare to shortcut EQ/NE, when
        comparing two very large bitarrays for equality the
        speedup can easily be 100x
      - simplify how unpacking is handled
  * add more tests
  * add `.clear()` method (Python 3.3 added this method to lists)
  * avoid overallocation when bitarray objects are initially created
  * raise BufferError when resizing bitarrays which is exporting buffers
  * add example to study the resize() function
  * improve some error messages
  * raise `NotImplementedError` with (useful message) when trying to call
    the `.fromstring()` or `.tostring()` methods, which have been removed
    in the last release</comment>
    <requestid>824394</requestid>
  </revision>
  <revision rev="4" vrev="1">
    <srcmd5>94beff9957b4f1c007f00e70e0952444</srcmd5>
    <version>1.5.2</version>
    <time>1598885450</time>
    <user>dimstar_suse</user>
    <comment>- Update to 1.5.2: 
  * add PyType_Ready usage, issue #66
  * speedup search() for bitarrays with length 1 in sparse bitarrays,
    see issue #67
  * add tests
  * support signed integers in `util.ba2int()` and `util.int2ba()`,
    see issue #85
  * deprecate `.length()` in favor of `len()`
  * Use `Py_ssize_t` for bitarray index.  This means that on 32bit
    systems, the maximun number of elements in a bitarray is 2 GBits.
    We used to have a special 64bit index type for all architectures, but
    this prevented us from using Python's sequence, mapping and number
    methods, and made those method lookups slow.
  * speedup slice operations when step size = 1 (if alignment allows
    copying whole bytes)
  * Require equal endianness for operations: `&amp;`, `|`, `^`, `&amp;=`, `|=`, `^=`.
    This should have always been the case but was overlooked in the past.
  * raise TypeError when tring to create bitarray from boolean
  * This will be last release to still support Python 2.6 (which was retired
    in 2013).  We do NOT plan to stop support for Python 2.7 anytime soon.</comment>
    <requestid>830624</requestid>
  </revision>
  <revision rev="5" vrev="1">
    <srcmd5>7f63466ff82fe0fe727907dc2494258e</srcmd5>
    <version>1.5.3</version>
    <time>1601488461</time>
    <user>dimstar_suse</user>
    <comment>- Update to 1.5.3:
  * add optional index parameter to `.index()` to invert single bit
  * fix `sys.getsizeof(bitarray)` by adding `.__sizeof__()`, see issue #100</comment>
    <requestid>838633</requestid>
  </revision>
  <revision rev="6" vrev="1">
    <srcmd5>110e3a69fc2df606a7741c4ff9a7af90</srcmd5>
    <version>1.6.1</version>
    <time>1604865550</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>846885</requestid>
  </revision>
  <revision rev="7" vrev="1">
    <srcmd5>a64ac89c4fd60f9ba03e08b2dd2d2dee</srcmd5>
    <version>1.9.2</version>
    <time>1618223849</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>884519</requestid>
  </revision>
  <revision rev="8" vrev="1">
    <srcmd5>6706ccd08ecadb4fabd716b618ac33b6</srcmd5>
    <version>2.1.1</version>
    <time>1623521292</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>899598</requestid>
  </revision>
  <revision rev="9" vrev="1">
    <srcmd5>922aa4abed45249c7361262f690cd072</srcmd5>
    <version>2.1.2</version>
    <time>1626788371</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>907194</requestid>
  </revision>
  <revision rev="10" vrev="1">
    <srcmd5>bba85b283314b7b363dd817b1a520dfa</srcmd5>
    <version>2.3.0</version>
    <time>1629471474</time>
    <user>RBrownSUSE</user>
    <comment></comment>
    <requestid>913269</requestid>
  </revision>
  <revision rev="11" vrev="1">
    <srcmd5>5d1bf4e2511763458b1f2c129078c1eb</srcmd5>
    <version>2.4.0</version>
    <time>1649014270</time>
    <user>dimstar_suse</user>
    <comment>Automatic submission by obs-autosubmit</comment>
    <requestid>966668</requestid>
  </revision>
  <revision rev="12" vrev="1">
    <srcmd5>7717f194d2f07c71ab35d6064d91f3e4</srcmd5>
    <version>2.6.0</version>
    <time>1663935321</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>1005519</requestid>
  </revision>
  <revision rev="13" vrev="1">
    <srcmd5>af780d3899848bbc8e17acfc0cb1c6a4</srcmd5>
    <version>2.6.2</version>
    <time>1672754719</time>
    <user>dimstar_suse</user>
    <comment>- update to 2.6.2:
  * optimize `richcompare()` for opposite endianness
  * improve some docstrings add tests
  * add documentation on shift operators, #181
  * fix typo in iterable initializer description, #179
  * optimize `richcompare()`</comment>
    <requestid>1046261</requestid>
  </revision>
  <revision rev="14" vrev="1">
    <srcmd5>5bed3e42c2f08d27f351a60edf4eb23e</srcmd5>
    <version>2.7.0</version>
    <time>1676036163</time>
    <user>dimstar_suse</user>
    <comment>- update to 2.7.0:
  * add util.sc_encode() and util.sc_decode() for
    compression of sparse bitarrays
  * add util.any_and()
  * add util.intervals()
  * move functionality of the following utility functions
    entirely to C:
    hex2ba(), base2ba(), deserialize(), vl_decode(), zeros()
  * improve error checking for unpickling
  * add distance metrics</comment>
    <requestid>1064212</requestid>
  </revision>
  <revision rev="15" vrev="1">
    <srcmd5>b0d3b6eea283ed580034cea45f0801b5</srcmd5>
    <version>2.7.1</version>
    <time>1676149032</time>
    <user>dimstar_suse</user>
    <comment>- update to 2.7.1:
  * optimize ``util.sc_encode()``</comment>
    <requestid>1064329</requestid>
  </revision>
  <revision rev="16" vrev="1">
    <srcmd5>6c3e4fd1cb4b0d447176a0ad99577d09</srcmd5>
    <version>2.7.2</version>
    <time>1676562944</time>
    <user>dimstar_suse</user>
    <comment>- update to 2.7.2:
  * speedup all count functionality by using
    ``__builtin_popcountll`` when available
  * add ``popcount64()`` to ``bitarray.h`` - we assume now that
    ``uint64_t`` is always available
  * improve testing</comment>
    <requestid>1065971</requestid>
  </revision>
  <revision rev="17" vrev="1">
    <srcmd5>e155d382eea5aa34858aa6818b2e1482</srcmd5>
    <version>2.7.3</version>
    <time>1678204206</time>
    <user>dimstar_suse</user>
    <comment>- update to 2.7.3:
  * allow running ``python setup.py test``
  * add official Python 3.12 support
  * simplify count functionality in util module
  * retire ``bitcount_lookup[256]`` table
  * improve ``util.count_n()`` error messages
  * avoid ``util`` module tests from being run more than once in
    each call to ``bitarray.test()`` when called multiple times in
    the same Python process
  * improve testing</comment>
    <requestid>1069754</requestid>
  </revision>
  <revision rev="18" vrev="1">
    <srcmd5>a62c27fea227f9d2f50f721840bd2f64</srcmd5>
    <version>2.7.5</version>
    <time>1686576358</time>
    <user>dimstar_suse</user>
    <comment>- update to 2.7.5:
  * fix for pypy3.9-v7.3.11
  * register ``bitarray`` as ``abc.MutableSequence``
  * improve documentation regarding type when indexing single
  * bitarray items</comment>
    <requestid>1092275</requestid>
  </revision>
  <revision rev="19" vrev="1">
    <srcmd5>66176ad6bd54161335e12640af7a6534</srcmd5>
    <version>2.7.6</version>
    <time>1687796140</time>
    <user>dimstar_suse</user>
    <comment>- update to 2.7.6:
  * remove caching hash value</comment>
    <requestid>1095233</requestid>
  </revision>
  <revision rev="20" vrev="1">
    <srcmd5>1525c9381a30ff1fec074cd46ae1f824</srcmd5>
    <version>2.8.1</version>
    <time>1691594770</time>
    <user>dimstar_suse</user>
    <comment>- update to 2.8.1:
  * use reconstructor function for pickling
  * simplify implementation of ``.reverse()``
  * allow `integer sequence indexing &lt;indexing.rst&gt;`__ by list of
    indices,
  * add `masked indexing &lt;indexing.rst&gt;`__ by bitarray masks,
  * improve ``.bytereverse()`` docstring, see issue</comment>
    <requestid>1103087</requestid>
  </revision>
  <revision rev="21" vrev="1">
    <srcmd5>f566c8ac9d64b96e85dbbb68a5ece3b6</srcmd5>
    <version>2.8.2</version>
    <time>1696529097</time>
    <user>anag+factory</user>
    <comment>- update to 2.8.2:
  * improve error messages for masked assignment
  * simplify test collection
  * added ``pytest.ini`` to allow running pytest with no
    additional arguments
  * ``util.sc_encode()``: avoid writing empty blocks at end of
    compressed stream, ie. skip encoding when total population
    count is reached

  * optimize `richcompare()`
  * `.bytereverse()` no longer sets unused pad bits to zero
  * fix `sys.getsizeof(bitarray)` by adding `.__sizeof__()`, see issue #100
- Update to 1.5.2:</comment>
    <requestid>1115784</requestid>
  </revision>
  <revision rev="22" vrev="1">
    <srcmd5>4f29b144c4887d39bf91b3c20e5ac222</srcmd5>
    <version>2.8.3</version>
    <time>1699994612</time>
    <user>anag+factory</user>
    <comment>- update to 2.8.3:
  * ensure readonly attribute is set correctly when creating new
    objects
  * optimize sparse bitarray compression for raw block type
  * improve hash functions in Bloom filter example</comment>
    <requestid>1125860</requestid>
  </revision>
  <revision rev="23" vrev="1">
    <srcmd5>90293c6c3df45d8ee919bcf3dfdaa8ee</srcmd5>
    <version>2.8.4</version>
    <time>1701902877</time>
    <user>anag+factory</user>
    <comment>- update to 2.8.4:
  * simplify ``copy_n()`` (remove special cases)
  * add `word shift example C program
  * and simplify ``shift_r8()``
  * improve documentation and testing</comment>
    <requestid>1131186</requestid>
  </revision>
  <revision rev="24" vrev="1">
    <srcmd5>269edf6018f794d7a20cc1131cc65bf1</srcmd5>
    <version>2.8.5</version>
    <time>1703024152</time>
    <user>anag+factory</user>
    <comment>Automatic submission by obs-autosubmit</comment>
    <requestid>1133923</requestid>
  </revision>
  <revision rev="25" vrev="1">
    <srcmd5>aeb71c3c408a2aa5362e307811050447</srcmd5>
    <version>2.9.1</version>
    <time>1703800864</time>
    <user>anag+factory</user>
    <comment>- update to 2.9.1:
  * avoid buffer being unnecessarily initialized with 0s in
    several functions of the ``bitarray.util`` module
  * fix ``.count()`` type hint in pyi-file
  * improve testing
  * deprecate support for Python 2 - Python 2.7 support will be
    removed in bitarray version 3.0
  * ``bitarray(n)`` for integer initializer ``n`` will always
    return a bitarray of length ``n`` with all items initialized
    to ``0``
  * allow sub-bitarray in ``.count()``, `#212
  * add ``util.ones()`` ``.find()`` and ``.index()``:
    add keyword argument ``right`` for rightmost index
  * ``.itersearch()``: add start and stop argument, and keyword
  * argument ``right``
  * deprecate ``util.rindex()`` (will be removed in 3.0 release),
  * use ``.index(..., right=True)`` instead
  * deprecate ``util.make_endian()`` (will be removed in 3.0
    release),
  * use ``bitarray(..., endian=...)`` instead</comment>
    <requestid>1135240</requestid>
  </revision>
  <revision rev="26" vrev="1">
    <srcmd5>82f1c6acd6493f03063fe0d3fcfe9458</srcmd5>
    <version>2.9.2</version>
    <time>1704829775</time>
    <user>anag+factory</user>
    <comment>- update to 2.9.2:
  * optimize initialization from strings by not constantly
    resizing buffer
  * optimize util.hex2ba() and util.base2ba() by avoiding
    unnecessary copies
  * optimize util.base2ba() and util.ba2base() for n=16
    (hexadecimal)</comment>
    <requestid>1137632</requestid>
  </revision>
  <revision rev="27" vrev="2">
    <srcmd5>251c94ce5d2548a13a791ac89885f513</srcmd5>
    <version>2.9.2</version>
    <time>1729710662</time>
    <user>anag+factory</user>
    <comment></comment>
    <requestid>1217238</requestid>
  </revision>
  <revision rev="28" vrev="1">
    <srcmd5>7b3c4cc2d7923d00d41477d2c5d967ed</srcmd5>
    <version>3.0.0</version>
    <time>1730125385</time>
    <user>anag+factory</user>
    <comment>- update to 3.0.0:
  * see Bitarray 3 transition
  * remove Python 2.7 support
  * .decode() now returns iterator (equivalent to past
    .iterdecode())
  * .search() now returns iterator (equivalent to past
    .itersearch())
  * remove .iterdecode() and .itersearch()
  * remove util.rindex(), use .index(..., right=1) instead,
    deprecated since 2.9
  * remove util.make_endian(), use bitarray(..., endian=...)
    instead, deprecated since 2.9
  * remove hackish support for bitarray() handling unpickling,
    see detailed explaination in #207 - closes #206
  * add official Python 3.13 support
  * update cibuildwheel to 2.21.3
  * minor simplifications
  * fix some typos</comment>
    <requestid>1218794</requestid>
  </revision>
  <revision rev="29" vrev="1">
    <srcmd5>f797c158aa1b9c2eb6992375400e8aa8</srcmd5>
    <version>3.2.0</version>
    <time>1742937185</time>
    <user>anag+factory</user>
    <comment></comment>
    <requestid>1255999</requestid>
  </revision>
  <revision rev="30" vrev="1">
    <srcmd5>b6c746495d5ea43a4f634f62cd8f2671</srcmd5>
    <version>3.3.1</version>
    <time>1745508360</time>
    <user>anag_factory</user>
    <comment>- update to 3.3.1:
  * remove License classifier in favor of a SPDX license
    expression, #231
  * reorganize and cleanup many tests
  * add optional group and sep arguments' to .to01(), #230 - as
    well as util.ba2hex() and util.ba2base()
  * ignore whitespace in util.base2ba() and util.hex2ba()
  * check for embedded nul characters when extending (and
    initializing) bitarray from string
  * improve testing
  * add double precision floating point number example</comment>
    <requestid>1272311</requestid>
  </revision>
  <revision rev="31" vrev="1">
    <srcmd5>5d6f0048ed689ee61fb5f87f675c37e0</srcmd5>
    <version>3.3.2</version>
    <time>1746476917</time>
    <user>anag_factory</user>
    <comment></comment>
    <requestid>1274384</requestid>
  </revision>
  <revision rev="32" vrev="1">
    <srcmd5>0550d5e33923f858135780aa17aca5d8</srcmd5>
    <version>3.4.0</version>
    <time>1747234920</time>
    <user>anag_factory</user>
    <comment></comment>
    <requestid>1277385</requestid>
  </revision>
  <revision rev="33" vrev="1">
    <srcmd5>0d6d51cc62cc545655771a7dc6da0e4c</srcmd5>
    <version>3.4.1</version>
    <time>1747726694</time>
    <user>anag_factory</user>
    <comment></comment>
    <requestid>1278335</requestid>
  </revision>
</revisionlist>
