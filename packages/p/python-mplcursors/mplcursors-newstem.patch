From 6dbf40796b9774ae988fc650596880d31cbc0e89 Mon Sep 17 00:00:00 2001
From: Antony Lee <anntzer.lee@gmail.com>
Date: Thu, 16 Apr 2020 13:01:50 +0200
Subject: [PATCH] Switch to supporting new-style stem plots.

---
 CHANGELOG.rst                |  5 +++--
 lib/mplcursors/_pick_info.py | 20 +++++++++++---------
 tests/test_mplcursors.py     |  2 +-
 3 files changed, 15 insertions(+), 12 deletions(-)

Index: mplcursors-0.3/CHANGELOG.rst
===================================================================
--- mplcursors-0.3.orig/CHANGELOG.rst
+++ mplcursors-0.3/CHANGELOG.rst
@@ -1,3 +1,7 @@
+Patches
+======
+- Switch to supporting only "new-style" (`LineCollection`) `stem` plots.
+
 0.3
 ===
 
@@ -39,8 +43,8 @@ Miscellaneous bugfixes.
 - Selections on images now have an index as well.
 - Selections created on `scatter` plots, `errorbar` plots, and `polar` plots
   can now be moved.
-- `PathCollection`\s not created by `plt.scatter` are now picked as paths, not
-  as collections of points.
+- `PathCollection`\s not created by `scatter` are now picked as paths, not as
+  collections of points.
 - `Patch`\es now pick on their borders, not their interior.
 - Improved picking of `Container`\s.
 - In hover mode, annotations can still be removed by right-clicking.
Index: mplcursors-0.3/lib/mplcursors/_pick_info.py
===================================================================
--- mplcursors-0.3.orig/lib/mplcursors/_pick_info.py
+++ mplcursors-0.3/lib/mplcursors/_pick_info.py
@@ -464,14 +464,16 @@ def _(container, event):
     sel = compute_pick(container.markerline, event)
     if sel:
         return sel
-    idx_sel = min(filter(lambda idx_sel: idx_sel[1] is not None,
-                         ((idx, compute_pick(line, event))
-                          for idx, line in enumerate(container.stemlines))),
-                  key=lambda idx_sel: idx_sel[1].dist, default=None)
-    if idx_sel:
-        idx, _ = idx_sel
+    if not isinstance(container.stemlines, LineCollection):
+        warnings.warn("Only stem plots created with use_line_collection=True "
+                      "are supported.")
+        return
+    sel = compute_pick(container.stemlines, event)
+    if sel:
+        idx, _ = sel.target.index
         target = _with_attrs(
-            container.stemlines[idx].get_xydata()[-1], index=idx)
+            container.stemlines.get_segments()[idx][-1],
+            index=sel.target.index)
         return Selection(container, target, 0, None, None)
 
 
@@ -520,7 +522,7 @@ def get_ann_text(sel):
     classes follow.
     """
     warnings.warn(
-        f"Annotation support for {type(sel.artist).__name__} is missing")
+        f"Annotation support for {type(sel.artist).__name__} is missing.")
     return ""
 
 
@@ -753,7 +755,7 @@ def make_highlight(sel, *, highlight_kwa
     classes follow.
     """
     warnings.warn(
-        f"Highlight support for {type(sel.artist).__name__} is missing")
+        f"Highlight support for {type(sel.artist).__name__} is missing.")
 
 
 def _set_valid_props(artist, kwargs):
Index: mplcursors-0.3/tests/test_mplcursors.py
===================================================================
--- mplcursors-0.3.orig/tests/test_mplcursors.py
+++ mplcursors-0.3/tests/test_mplcursors.py
@@ -384,7 +384,7 @@ def test_dataless_errorbar(ax):
 
 def test_stem(ax):
     with pytest.warns(None):  # stem use_line_collection API change.
-        ax.stem([1, 2, 3])
+        ax.stem([1, 2, 3], use_line_collection=True)
     cursor = mplcursors.cursor()
     assert len(cursor.artists) == 1
     _process_event("__mouse_click__", ax, (.5, .5), 1)
