From 1913149cceb0275f6b8f8bf7ad6e49ab61f5d736 Mon Sep 17 00:00:00 2001
From: Antony Lee <anntzer.lee@gmail.com>
Date: Thu, 30 Apr 2020 20:14:43 +0200
Subject: [PATCH] Don't use Matplotlib's incorrect LineCollection contains()
 check.

---
 lib/mplcursors/_pick_info.py | 32 ++++++++++++++++----------------
 tests/test_mplcursors.py     |  3 ++-
 2 files changed, 18 insertions(+), 17 deletions(-)

Index: mplcursors-0.3/lib/mplcursors/_pick_info.py
===================================================================
--- mplcursors-0.3.orig/lib/mplcursors/_pick_info.py
+++ mplcursors-0.3/lib/mplcursors/_pick_info.py
@@ -332,13 +332,15 @@ def _(artist, event):
 @compute_pick.register(PatchCollection)
 @compute_pick.register(PathCollection)
 def _(artist, event):
-    # Use the C implementation to prune the list of segments.
-    contains, info = artist.contains(event)
-    if not contains:
-        return
     offsets = artist.get_offsets()
     paths = artist.get_paths()
     if _is_scatter(artist):
+        # Use the C implementation to prune the list of segments -- but only
+        # for scatter plots as that implementation is inconsistent with Line2D
+        # for segment-like collections (matplotlib/matplotlib#17279).
+        contains, info = artist.contains(event)
+        if not contains:
+            return
         inds = info["ind"]
         offsets = artist.get_offsets()[inds]
         offsets_screen = artist.get_offset_transform().transform(offsets)
@@ -350,23 +352,21 @@ def _(artist, event):
         return Selection(artist, target, ds[argmin], None, None)
     else:
         # Note that this won't select implicitly closed paths.
-        sels = [
+        sels = [*filter(None, [
             _compute_projection_pick(
                 artist,
                 Affine2D().translate(*offsets[ind % len(offsets)])
                 .transform_path(paths[ind % len(paths)]),
                 (event.x, event.y))
-            for ind in info["ind"]]
-        sel, index = min(
-            ((sel, info["ind"][idx]) for idx, sel in enumerate(sels) if sel),
-            key=lambda sel_idx: sel_idx[0].dist,
-            default=(None, None))
-        if sel:
-            sel = sel._replace(artist=artist)
-            sel.target.index = (index, sel.target.index)
-            if (isinstance(artist, PatchCollection)
-                    and sel.dist >= PATCH_PICKRADIUS):
-                sel = None
+            for ind in range(max(len(offsets), len(paths)))])]
+        if not sels:
+            return None
+        idx = min(range(len(sels)), key=lambda idx: sels[idx].dist)
+        sel = sels[idx]
+        if sel.dist >= artist.get_pickradius():
+            return None
+        sel = sel._replace(artist=artist)
+        sel.target.index = (idx, sel.target.index)
         return sel
 
 
Index: mplcursors-0.3/tests/test_mplcursors.py
===================================================================
--- mplcursors-0.3.orig/tests/test_mplcursors.py
+++ mplcursors-0.3/tests/test_mplcursors.py
@@ -316,7 +316,8 @@ def test_image_subclass(ax):
 def test_linecollection(ax):
     ax.eventplot([0, 1])
     cursor = mplcursors.cursor()
-    _process_event("__mouse_click__", ax, (0, .5), 1)
+    _process_event("__mouse_click__", ax, (0, 0), 1)
+    _process_event("__mouse_click__", ax, (.5, 1), 1)
     assert len(cursor.selections) == 0
     _process_event("__mouse_click__", ax, (0, 1), 1)
     assert cursor.selections[0].target.index == approx((0, .5))
