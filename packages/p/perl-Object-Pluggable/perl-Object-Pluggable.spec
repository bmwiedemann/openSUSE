#
# spec file for package perl-Object-Pluggable
#
# Copyright (c) 2017 SUSE LINUX GmbH, Nuernberg, Germany.
#
# All modifications and additions to the file contributed by third parties
# remain the property of their copyright owners, unless otherwise agreed
# upon. The license for this file, and modifications and additions to the
# file, is the same license as for the pristine package itself (unless the
# license for the pristine package is not an Open Source License, in which
# case the license is the MIT License). An "Open Source License" is a
# license that conforms to the Open Source Definition (Version 1.9)
# published by the Open Source Initiative.

# Please submit bugfixes or comments via http://bugs.opensuse.org/
#


Name:           perl-Object-Pluggable
Version:        1.29
Release:        0
%define cpan_name Object-Pluggable
Summary:        Base Class for Creating Plugin-Enabled Objects
License:        Artistic-1.0 or GPL-1.0+
Group:          Development/Libraries/Perl
Url:            http://search.cpan.org/dist/Object-Pluggable/
Source0:        https://cpan.metacpan.org/authors/id/H/HI/HINRIK/%{cpan_name}-%{version}.tar.gz
Source1:        cpanspec.yml
BuildArch:      noarch
BuildRoot:      %{_tmppath}/%{name}-%{version}-build
BuildRequires:  perl
BuildRequires:  perl-macros
BuildRequires:  perl(Pod::Parser) >= 1.36
BuildRequires:  perl(Task::Weaken)
BuildRequires:  perl(constant) >= 1.17
Requires:       perl(Task::Weaken)
Requires:       perl(constant) >= 1.17
%{perl_requires}

%description
Object::Pluggable is a base class for creating plugin enabled objects. It
is a generic port of POE::Component::IRC's plugin system.

If your object dispatches events to listeners, then Object::Pluggable may
be a good fit for you.

Basic use would involve subclassing Object::Pluggable, then overriding
'_pluggable_event()' and inserting '_pluggable_process()' wherever you
dispatch events from.

Users of your object can then load plugins using the plugin methods
provided to handle events generated by the object.

You may also use plugin style handlers within your object as
'_pluggable_process()' will attempt to process any events with local method
calls first. The return value of these handlers has the same significance
as the return value of 'normal' plugin handlers.

%prep
%setup -q -n %{cpan_name}-%{version}

%build
%{__perl} Makefile.PL INSTALLDIRS=vendor
%{__make} %{?_smp_mflags}

%check
%{__make} test

%install
%perl_make_install
%perl_process_packlist
%perl_gen_filelist

%files -f %{name}.files
%defattr(-,root,root,755)
%doc Changes examples README
%license LICENSE

%changelog
