<revisionlist>
  <revision rev="1" vrev="1">
    <srcmd5>295e3c2fc76f27ae4b493df4e33afa3e</srcmd5>
    <version>0.15</version>
    <time>1315233480</time>
    <user>lrupp</user>
    <comment>Replaces python-cython</comment>
    <requestid>80647</requestid>
  </revision>
  <revision rev="2" vrev="2">
    <srcmd5>848ea3a93b788983e6a3f65b4ab95708</srcmd5>
    <version>0.15</version>
    <time>1315233493</time>
    <user>lrupp</user>
    <comment>Autobuild autoformatter for 80647
</comment>
  </revision>
  <revision rev="3" vrev="3">
    <srcmd5>3b8ed0807839146bbc6ecde7bf6bc553</srcmd5>
    <version>0.15</version>
    <time>1315861704</time>
    <user>lrupp</user>
    <comment></comment>
    <requestid>81087</requestid>
  </revision>
  <revision rev="4" vrev="1">
    <srcmd5>54879c7862177887d538f087a253b44b</srcmd5>
    <version>0.15.1</version>
    <time>1316681287</time>
    <user>saschpe</user>
    <comment>- Update to version 0.15.1:
  * Please see http://wiki.cython.org/ReleaseNotes-0.15.1</comment>
    <requestid>84174</requestid>
  </revision>
  <revision rev="5" vrev="3">
    <srcmd5>54879c7862177887d538f087a253b44b</srcmd5>
    <version>0.15.1</version>
    <time>1319182378</time>
    <user>adrianSuSE</user>
  </revision>
  <revision rev="6" vrev="4">
    <srcmd5>8252b2baedb8c78a753b6ee2be5e5bf2</srcmd5>
    <version>0.15.1</version>
    <time>1323194113</time>
    <user>coolo</user>
    <comment>replace license with spdx.org variant</comment>
  </revision>
  <revision rev="7" vrev="1">
    <srcmd5>cf923dc619c4915788607666919262a4</srcmd5>
    <version>0.16</version>
    <time>1338284236</time>
    <user>coolo</user>
    <comment>Fix .py/.pyc issues</comment>
    <requestid>122248</requestid>
  </revision>
  <revision rev="8" vrev="2">
    <srcmd5>91f69dda5cc6a933b96e47420644d963</srcmd5>
    <version>0.16</version>
    <time>1339767633</time>
    <user>coolo</user>
    <comment>Fix building on openSUSE 11.4 (forwarded request 124994 from TheBlackCat) (forwarded request 124996 from TheBlackCat)</comment>
    <requestid>124997</requestid>
  </revision>
  <revision rev="9" vrev="4">
    <srcmd5>91f69dda5cc6a933b96e47420644d963</srcmd5>
    <version>0.16</version>
    <time>1340184028</time>
    <user>adrianSuSE</user>
    <comment>branched from openSUSE:Factory</comment>
  </revision>
  <revision rev="10" vrev="1">
    <srcmd5>f1c2c840fd24ea27616fd409aeb1d396</srcmd5>
    <version>0.17.2</version>
    <time>1354109573</time>
    <user>coolo</user>
    <comment>- Update to version 0.17.2:
  + Please see http://wiki.cython.org/ReleaseNotes-0.18.2
- Drop excessive macro usage
- No need for &quot;-fno-strict-aliasing&quot; anymore
- One rpmlintrc is enough

- Update to version 0.17.2:
  + Please see http://wiki.cython.org/ReleaseNotes-0.18.2
- Drop excessive macro usage
- No need for &quot;-fno-strict-aliasing&quot; anymore
- One rpmlintrc is enough
- Python3 binary suffix should be &quot;-%{py3_ver}&quot;</comment>
    <requestid>142493</requestid>
  </revision>
  <revision rev="11" vrev="3">
    <srcmd5>f1c2c840fd24ea27616fd409aeb1d396</srcmd5>
    <version>0.17.2</version>
    <time>1359109974</time>
    <user>adrianSuSE</user>
    <comment>Split 12.3 from Factory</comment>
  </revision>
  <revision rev="12" vrev="1">
    <srcmd5>638903eafc95bd54bf59eaddd9d6c786</srcmd5>
    <version>0.18</version>
    <time>1365160977</time>
    <user>coolo</user>
    <comment>fixed python3 build for &lt;12.2 (forwarded request 162331 from apersaud)</comment>
    <requestid>162600</requestid>
  </revision>
  <revision rev="13" vrev="1">
    <srcmd5>64fcdb114dbc4630c1663185d301a055</srcmd5>
    <version>0.19.1</version>
    <time>1368696318</time>
    <user>coolo</user>
    <comment>- update to 0.19.1:
  * Completely empty C-API structs for extension type slots (protocols like
  number/mapping/sequence) are no longer generated into the C code.
  * Docstrings that directly follow a public/readonly attribute declaration
  in a cdef class will be used as docstring of the auto-generated property.
  This fixes ticket 206.
  * The automatic signature documentation tries to preserve more semantics
  of default arguments and argument types.  Specifically, ``bint`` arguments
  now appear as type ``bool``.
  * A warning is emitted when negative literal indices are found inside of
  a code section that disables ``wraparound`` handling.  This helps with
  fixing invalid code that might fail in the face of future compiler
  optimisations.
  * Constant folding for boolean expressions (and/or) was improved.
  * Added a build_dir option to cythonize() which allows one to place
  the generated .c files outside the source tree.

- Update to version 0.19:
  + Please see http://wiki.cython.org/ReleaseNotes-0.19 (forwarded request 175219 from dirkmueller)</comment>
    <requestid>175239</requestid>
  </revision>
  <revision rev="14" vrev="2">
    <srcmd5>c91b95eb25a24c03a19fb1ef35a96b26</srcmd5>
    <version>0.19.1</version>
    <time>1371651632</time>
    <user>coolo</user>
    <comment>housekeeping sr, necessary due to split between d:l:p and d:l:p3 and (manual) _link removal in Factory.</comment>
    <requestid>179674</requestid>
  </revision>
  <revision rev="15" vrev="4">
    <srcmd5>c91b95eb25a24c03a19fb1ef35a96b26</srcmd5>
    <version>0.19.1</version>
    <time>1379664098</time>
    <user>adrianSuSE</user>
    <comment>Split 13.1 from Factory</comment>
  </revision>
  <revision rev="16" vrev="5">
    <srcmd5>876777fadb2f73a0474204994c275676</srcmd5>
    <version>0.19.1</version>
    <time>1382013063</time>
    <user>scarabeus_factory</user>
    <comment>update-alternative implementation (forwarded request 203001 from posophe)</comment>
    <requestid>203002</requestid>
  </revision>
  <revision rev="17" vrev="1">
    <srcmd5>628c0ea70c7ebdf4820ffe92fc7bfce4</srcmd5>
    <version>0.19.2</version>
    <time>1382378490</time>
    <user>scarabeus_factory</user>
    <comment>- update to 0.19.2:
    * Some standard declarations were fixed or updated, including the previously
    incorrect declaration of ``PyBuffer_FillInfo()`` and some missing bits in
    ``libc.math``.
    * Heap allocated subtypes of ``type`` used the wrong base type struct at the
    C level.
    * Calling the unbound method dict.keys/value/items() in dict subtypes could
    call the bound object method instead of the unbound supertype method.
    * &quot;yield&quot; wasn't supported in &quot;return&quot; value expressions.
    * Using the &quot;bint&quot; type in memory views lead to unexpected results.
    It is now an error.
    * Assignments to global/closure variables could catch them in an illegal state
    while deallocating the old value. (forwarded request 204137 from dirkmueller)</comment>
    <requestid>204142</requestid>
  </revision>
  <revision rev="18" vrev="1">
    <srcmd5>3a523969fe6ab81d36558efc66db56d5</srcmd5>
    <version>0.20</version>
    <time>1391274287</time>
    <user>coolo</user>
    <comment>- Update to version 0.20:
  * Support for CPython 3.4.
  * Support for calling C++ template functions.
  * yield is supported in finally clauses.
  * The C code generated for finally blocks is duplicated for each exit
    case to allow for better optimisations by the C compiler.
  * Cython tries to undo the Python optimisationism of assigning a bound
    method to a local variable when it can generate better code for the
    direct call.
  * Constant Python float values are cached.
  * String equality comparisons can use faster type specific code in
    more cases than before.
  * String/Unicode formatting using the '%' operator uses a faster
    C-API call.
  * bytearray has become a known type and supports coercion from and
    to C strings.  Indexing, slicing and decoding is optimised. Note that
    this may have an impact on existing code due to type inference.
  * Using cdef basestring stringvar and function arguments typed as
    basestring is now meaningful and allows assigning exactly
    str and unicode objects, but no subtypes of these types.
  * Support for the __debug__ builtin.
  * Assertions in Cython compiled modules are disabled if the running
    Python interpreter was started with the &quot;-O&quot; option.
  * Some types that Cython provides internally, such as functions and
    generators, are now shared across modules if more than one Cython
    implemented module is imported.
  * The type inference algorithm works more fine granular by taking the
    results of the control flow analysis into account.
  * A new script in bin/cythonize provides a command line frontend
    to the cythonize() compilation function (including distutils build).</comment>
    <requestid>220455</requestid>
  </revision>
  <revision rev="19" vrev="2">
    <srcmd5>a60d59847693009b7245f67c47f20e2d</srcmd5>
    <version>0.20</version>
    <time>1391666794</time>
    <user>coolo</user>
    <comment>- add python-xml as require (forwarded request 220743 from jengelh)</comment>
    <requestid>220746</requestid>
  </revision>
  <revision rev="20" vrev="1">
    <srcmd5>05fab06b69712569999f2a0ddb72287c</srcmd5>
    <version>0.20.1</version>
    <time>1399703534</time>
    <user>coolo</user>
    <comment>Update to version 0.20.1 (forwarded request 233040 from TheBlackCat)</comment>
    <requestid>233041</requestid>
  </revision>
  <revision rev="21" vrev="1">
    <srcmd5>baa6107a2d6b1893e88d7bec20448437</srcmd5>
    <version>0.20.2</version>
    <time>1407236401</time>
    <user>coolo</user>
    <comment>1</comment>
    <requestid>243451</requestid>
  </revision>
  <revision rev="22" vrev="3">
    <srcmd5>baa6107a2d6b1893e88d7bec20448437</srcmd5>
    <version>0.20.2</version>
    <time>1409302785</time>
    <user>adrianSuSE</user>
    <comment>Split 13.2 from Factory</comment>
  </revision>
  <revision rev="23" vrev="1">
    <srcmd5>2470bcf9b7f19e35d2f7ee79f4f1ad7d</srcmd5>
    <version>0.21</version>
    <time>1411017139</time>
    <user>coolo</user>
    <comment>1</comment>
    <requestid>248950</requestid>
  </revision>
  <revision rev="24" vrev="2">
    <srcmd5>7e9f6d41987a827404fe1f9d96ee33a4</srcmd5>
    <version>0.21</version>
    <time>1416048055</time>
    <user>dimstar_suse</user>
    <comment>1</comment>
    <requestid>260882</requestid>
  </revision>
  <revision rev="25" vrev="1">
    <srcmd5>f4d7a34bc965826402c92b773f2048a9</srcmd5>
    <version>0.21.1</version>
    <time>1420927626</time>
    <user>dimstar_suse</user>
    <comment>1</comment>
    <requestid>280656</requestid>
  </revision>
  <revision rev="26" vrev="1">
    <srcmd5>f6f5e24b2ccd41af161e0afb7f2f288f</srcmd5>
    <version>0.22.1</version>
    <time>1438899633</time>
    <user>dimstar_suse</user>
    <comment>1</comment>
    <requestid>319399</requestid>
  </revision>
  <revision rev="27" vrev="2">
    <srcmd5>6d924e873c6c7cae43ac7f4c8022695a</srcmd5>
    <version>0.22.1</version>
    <time>1440138291</time>
    <user>dimstar_suse</user>
    <comment>1</comment>
    <requestid>324563</requestid>
  </revision>
  <revision rev="28" vrev="3">
    <srcmd5>84356fdbb2c0c61368946574d7013c5b</srcmd5>
    <version>0.22.1</version>
    <time>1440871328</time>
    <user>coolo</user>
    <comment>1</comment>
    <requestid>327453</requestid>
  </revision>
  <revision rev="29" vrev="1">
    <srcmd5>368be5b99b79af1981d34d83b00fbee8</srcmd5>
    <version>0.23.4</version>
    <time>1455021056</time>
    <user>dimstar_suse</user>
    <comment>1</comment>
    <requestid>357131</requestid>
  </revision>
  <revision rev="30" vrev="1">
    <srcmd5>eeec95d11dfa9b483a85a3a816a38941</srcmd5>
    <version>0.25.1</version>
    <time>1477990193</time>
    <user>dimstar_suse</user>
    <comment>1</comment>
    <requestid>437640</requestid>
  </revision>
  <revision rev="31" vrev="2">
    <srcmd5>394de43086ee0470a0aec5ba1ff4ab9c</srcmd5>
    <version>0.25.1</version>
    <time>1489759493</time>
    <user>dimstar_suse</user>
    <comment>- update for multipython build</comment>
    <requestid>479725</requestid>
  </revision>
  <revision rev="32" vrev="3">
    <srcmd5>26745a076d1013dfb4f0653c0c5de0db</srcmd5>
    <version>0.25.1</version>
    <time>1507196961</time>
    <user>dimstar_suse</user>
    <comment>1</comment>
    <requestid>530883</requestid>
  </revision>
  <revision rev="33" vrev="1">
    <srcmd5>ba1d97cef2378a376fbf6c78451f00b8</srcmd5>
    <version>0.26.1</version>
    <time>1507896421</time>
    <user>dimstar_suse</user>
    <comment>1</comment>
    <requestid>532572</requestid>
  </revision>
  <revision rev="34" vrev="1">
    <srcmd5>919474c46fad420faff814cbdf28a203</srcmd5>
    <version>0.27.3</version>
    <time>1517668617</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>570447</requestid>
  </revision>
  <revision rev="35" vrev="2">
    <srcmd5>98a98a432b07dd74723d54824e0c991c</srcmd5>
    <version>0.27.3</version>
    <time>1519557657</time>
    <user>dimstar_suse</user>
    <comment>- Disable tests as they randomly fail while it can't be triggered
  when reproducing localy

- update to 0.27.3
  * see CHANGES.txt for details
- Disable abs test wrt upstream issue with new GCC versions:
  * https://github.com/cython/cython/issues/1911
- Export fno-strict-aliasing to CFLAGS

- Also fixes bsc#1062237</comment>
    <requestid>578692</requestid>
  </revision>
  <revision rev="36" vrev="1">
    <srcmd5>02193f82f3bfa5f27171ac4e579377bc</srcmd5>
    <version>0.28.1</version>
    <time>1521716169</time>
    <user>dimstar_suse</user>
    <comment>- Version update to 0.28.1:
  * PyFrozenSet_New() was accidentally used in PyPy where it is lacking
    from the C-API.
  * Assignment between some C++ templated types were incorrectly rejected
    when the templates mix const with ctypedef. (Github issue #2148)
  * Undeclared C++ no-args constructors in subclasses could make the
    compilation fail if the base class constructor was declared without
    nogil. (Github issue #2157)
  * Bytes %-formatting inferred basestring (bytes or unicode) as result type
    in some cases where bytes would have been safe to infer. (Github issue #2153)
  * None was accidentally disallowed as typed return value of dict.pop().

- update to version 0.28:
  * Features added
    + Cdef classes can now multiply inherit from ordinary Python
      classes. (The primary base must still be a c class, possibly
      object, and the other bases must not be cdef classes.)
    + Type inference is now supported for Pythran compiled NumPy
      expressions. Patch by Nils Braun. (Github issue #1954)
    + The const modifier can be applied to memoryview declarations to
      allow read-only buffers as input. (Github issues #1605, #1869)
    + C code in the docstring of a cdef extern block is copied
      verbatimly into the generated file. Patch by Jeroen
      Demeyer. (Github issue #1915)
    + When compiling with gcc, the module init function is now tuned
      for small code size instead of whatever compile flags were
      provided externally. Cython now also disables some code
      intensive optimisations in that function to further reduce the
      code size. (Github issue #2102)
    + Decorating an async coroutine with @cython.iterable_coroutine</comment>
    <requestid>588610</requestid>
  </revision>
  <revision rev="37" vrev="2">
    <srcmd5>dae829887d98ce89969b1378214dc776</srcmd5>
    <version>0.28.1</version>
    <time>1522934922</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>593187</requestid>
  </revision>
  <revision rev="38" vrev="1">
    <srcmd5>5f06f8f70c57289e590b119c280ca149</srcmd5>
    <version>0.28.2</version>
    <time>1524400573</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>598790</requestid>
  </revision>
  <revision rev="39" vrev="1">
    <srcmd5>fbb7cefe6985259e698e8c437714c7f4</srcmd5>
    <version>0.28.3</version>
    <time>1527673255</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>612616</requestid>
  </revision>
  <revision rev="40" vrev="1">
    <srcmd5>1de7683ae94904a95d60aaa1de14983c</srcmd5>
    <version>0.28.4</version>
    <time>1531946145</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>622245</requestid>
  </revision>
  <revision rev="41" vrev="1">
    <srcmd5>f592c636173bd3c74d5f848c4c88bf53</srcmd5>
    <version>0.28.5</version>
    <time>1537263713</time>
    <user>maxlin_factory</user>
    <comment></comment>
    <requestid>628791</requestid>
  </revision>
  <revision rev="42" vrev="1">
    <srcmd5>e4a45f3cd6a83ea43fc22b99ba6fe099</srcmd5>
    <version>0.29</version>
    <time>1540447731</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>642685</requestid>
  </revision>
  <revision rev="43" vrev="2">
    <srcmd5>740837907a9d4b14581a21847fe6cbc6</srcmd5>
    <version>0.28.5</version>
    <time>1544441270</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>655560</requestid>
  </revision>
  <revision rev="44" vrev="1">
    <srcmd5>da5bdde4950b83de94df7d0e53bc59fc</srcmd5>
    <version>0.29.3</version>
    <time>1549311725</time>
    <user>coolo</user>
    <comment></comment>
    <requestid>667297</requestid>
  </revision>
  <revision rev="45" vrev="1">
    <srcmd5>b4491d859ca499b890c77f0f798b640c</srcmd5>
    <version>0.29.4</version>
    <time>1549630066</time>
    <user>coolo</user>
    <comment></comment>
    <requestid>671992</requestid>
  </revision>
  <revision rev="46" vrev="1">
    <srcmd5>63249cc583d133ebadb392e3c1470d1d</srcmd5>
    <version>0.29.6</version>
    <time>1551686997</time>
    <user>dimstar_suse</user>
    <comment>- update to 0.29.6
 * Fix a crash when accessing the __kwdefaults__ special attribute of fused functions.
 * Fix the parsing of buffer format strings that contain numeric sizes, which
    could lead to incorrect input rejections.
 * Avoid a C #pragma in old gcc versions that was only added in GCC 4.6.
 * Auto-encoding of Unicode strings to UTF-8 C/C++ strings failed in Python 3,
    even though the default encoding there is UTF-8.
 * Crash when defining a Python subclass of an extension type and repeatedly
    calling a cpdef method on it.
 * Compiler crash when prange() loops appear inside of with-statements.
 * Some C compiler warnings were resolved.
 * Python conversion of C++ enums failed in 0.29.

- update to 0.29.6
 * Fix a crash when accessing the __kwdefaults__ special attribute of fused functions.
 * Fix the parsing of buffer format strings that contain numeric sizes, which
    could lead to incorrect input rejections.
 * Avoid a C #pragma in old gcc versions that was only added in GCC 4.6.
 * Auto-encoding of Unicode strings to UTF-8 C/C++ strings failed in Python 3,
    even though the default encoding there is UTF-8.
 * Crash when defining a Python subclass of an extension type and repeatedly
    calling a cpdef method on it.
 * Compiler crash when prange() loops appear inside of with-statements.
 * Some C compiler warnings were resolved.
 * Python conversion of C++ enums failed in 0.29.</comment>
    <requestid>680181</requestid>
  </revision>
  <revision rev="47" vrev="2">
    <srcmd5>826ecb7b22e611632b7a6a12619552b0</srcmd5>
    <version>0.29.6</version>
    <time>1554372347</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>690772</requestid>
  </revision>
  <revision rev="48" vrev="1">
    <srcmd5>d8d293a2f8319a0cb208ce10b412826e</srcmd5>
    <version>0.29.7</version>
    <time>1555574135</time>
    <user>dimstar_suse</user>
    <comment>- update to 0.29.7
 * Crash when the shared Cython config module gets unloaded and another
    Cython module reports an exceptions. Cython now makes sure it keeps
    an owned reference to the module
 * Resolved a C89 compilation problem when enabling the fast-gil sharing feature.
 * Coverage reporting did not include the signature line of cdef functions
 * Casting a GIL-requiring function into a nogil function now issues a warning
 * Generators and coroutines were missing their return type annotation

- update to 0.29.7
 * Crash when the shared Cython config module gets unloaded and another
    Cython module reports an exceptions. Cython now makes sure it keeps
    an owned reference to the module
 * Resolved a C89 compilation problem when enabling the fast-gil sharing feature.
 * Coverage reporting did not include the signature line of cdef functions
 * Casting a GIL-requiring function into a nogil function now issues a warning
 * Generators and coroutines were missing their return type annotation</comment>
    <requestid>694800</requestid>
  </revision>
  <revision rev="49" vrev="1">
    <srcmd5>410752025f69a63a9773098c7857e581</srcmd5>
    <version>0.29.10</version>
    <time>1560862198</time>
    <user>dimstar_suse</user>
    <comment>- Say goodbye to -doc subpackage as the documentation is online
  and does not build with latest sphinx releases (even in master
  at the moment).
- The testing in -doc spec was disabled anyway and if needed we
  will reintroduce it as a multibuild

- update to 0.29.10
 * Fix compile errors in CPython 3.8b1 due to the new &quot;tp_vectorcall&quot; slots.
 * Remove an incorrect cast when using true-division in C++ operations. 
 * C compile errors with CPython 3.8 were resolved. 
 * Python tuple constants that compare equal but have different item types
     could incorrectly be merged into a single constant.
 * Non-ASCII characters in unprefixed strings could crash the compiler
     when used with language level 3str
 * Starred expressions in %-formatting tuples could fail to compile for unicode strings
 * Passing Python class references through cython.inline() was broken.</comment>
    <requestid>709360</requestid>
  </revision>
  <revision rev="50" vrev="1">
    <srcmd5>83d87608e62cf881178ae2d20d23e36e</srcmd5>
    <version>0.29.13</version>
    <time>1564484789</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>718922</requestid>
  </revision>
  <revision rev="51" vrev="1">
    <srcmd5>280e65b3b393161f2a09cd53ffd8ca1c</srcmd5>
    <version>0.29.14</version>
    <time>1574414697</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>749103</requestid>
  </revision>
</revisionlist>
