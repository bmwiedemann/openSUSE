<revisionlist>
  <revision rev="1" vrev="1">
    <srcmd5>295e3c2fc76f27ae4b493df4e33afa3e</srcmd5>
    <version>0.15</version>
    <time>1315233480</time>
    <user>lrupp</user>
    <comment>Replaces python-cython</comment>
    <requestid>80647</requestid>
  </revision>
  <revision rev="2" vrev="2">
    <srcmd5>848ea3a93b788983e6a3f65b4ab95708</srcmd5>
    <version>0.15</version>
    <time>1315233493</time>
    <user>lrupp</user>
    <comment>Autobuild autoformatter for 80647
</comment>
  </revision>
  <revision rev="3" vrev="3">
    <srcmd5>3b8ed0807839146bbc6ecde7bf6bc553</srcmd5>
    <version>0.15</version>
    <time>1315861704</time>
    <user>lrupp</user>
    <comment></comment>
    <requestid>81087</requestid>
  </revision>
  <revision rev="4" vrev="1">
    <srcmd5>54879c7862177887d538f087a253b44b</srcmd5>
    <version>0.15.1</version>
    <time>1316681287</time>
    <user>saschpe</user>
    <comment>- Update to version 0.15.1:
  * Please see http://wiki.cython.org/ReleaseNotes-0.15.1</comment>
    <requestid>84174</requestid>
  </revision>
  <revision rev="5" vrev="3">
    <srcmd5>54879c7862177887d538f087a253b44b</srcmd5>
    <version>0.15.1</version>
    <time>1319182378</time>
    <user>adrianSuSE</user>
  </revision>
  <revision rev="6" vrev="4">
    <srcmd5>8252b2baedb8c78a753b6ee2be5e5bf2</srcmd5>
    <version>0.15.1</version>
    <time>1323194113</time>
    <user>coolo</user>
    <comment>replace license with spdx.org variant</comment>
  </revision>
  <revision rev="7" vrev="1">
    <srcmd5>cf923dc619c4915788607666919262a4</srcmd5>
    <version>0.16</version>
    <time>1338284236</time>
    <user>coolo</user>
    <comment>Fix .py/.pyc issues</comment>
    <requestid>122248</requestid>
  </revision>
  <revision rev="8" vrev="2">
    <srcmd5>91f69dda5cc6a933b96e47420644d963</srcmd5>
    <version>0.16</version>
    <time>1339767633</time>
    <user>coolo</user>
    <comment>Fix building on openSUSE 11.4 (forwarded request 124994 from TheBlackCat) (forwarded request 124996 from TheBlackCat)</comment>
    <requestid>124997</requestid>
  </revision>
  <revision rev="9" vrev="4">
    <srcmd5>91f69dda5cc6a933b96e47420644d963</srcmd5>
    <version>0.16</version>
    <time>1340184028</time>
    <user>adrianSuSE</user>
    <comment>branched from openSUSE:Factory</comment>
  </revision>
  <revision rev="10" vrev="1">
    <srcmd5>f1c2c840fd24ea27616fd409aeb1d396</srcmd5>
    <version>0.17.2</version>
    <time>1354109573</time>
    <user>coolo</user>
    <comment>- Update to version 0.17.2:
  + Please see http://wiki.cython.org/ReleaseNotes-0.18.2
- Drop excessive macro usage
- No need for &quot;-fno-strict-aliasing&quot; anymore
- One rpmlintrc is enough

- Update to version 0.17.2:
  + Please see http://wiki.cython.org/ReleaseNotes-0.18.2
- Drop excessive macro usage
- No need for &quot;-fno-strict-aliasing&quot; anymore
- One rpmlintrc is enough
- Python3 binary suffix should be &quot;-%{py3_ver}&quot;</comment>
    <requestid>142493</requestid>
  </revision>
  <revision rev="11" vrev="3">
    <srcmd5>f1c2c840fd24ea27616fd409aeb1d396</srcmd5>
    <version>0.17.2</version>
    <time>1359109974</time>
    <user>adrianSuSE</user>
    <comment>Split 12.3 from Factory</comment>
  </revision>
  <revision rev="12" vrev="1">
    <srcmd5>638903eafc95bd54bf59eaddd9d6c786</srcmd5>
    <version>0.18</version>
    <time>1365160977</time>
    <user>coolo</user>
    <comment>fixed python3 build for &lt;12.2 (forwarded request 162331 from apersaud)</comment>
    <requestid>162600</requestid>
  </revision>
  <revision rev="13" vrev="1">
    <srcmd5>64fcdb114dbc4630c1663185d301a055</srcmd5>
    <version>0.19.1</version>
    <time>1368696318</time>
    <user>coolo</user>
    <comment>- update to 0.19.1:
  * Completely empty C-API structs for extension type slots (protocols like
  number/mapping/sequence) are no longer generated into the C code.
  * Docstrings that directly follow a public/readonly attribute declaration
  in a cdef class will be used as docstring of the auto-generated property.
  This fixes ticket 206.
  * The automatic signature documentation tries to preserve more semantics
  of default arguments and argument types.  Specifically, ``bint`` arguments
  now appear as type ``bool``.
  * A warning is emitted when negative literal indices are found inside of
  a code section that disables ``wraparound`` handling.  This helps with
  fixing invalid code that might fail in the face of future compiler
  optimisations.
  * Constant folding for boolean expressions (and/or) was improved.
  * Added a build_dir option to cythonize() which allows one to place
  the generated .c files outside the source tree.

- Update to version 0.19:
  + Please see http://wiki.cython.org/ReleaseNotes-0.19 (forwarded request 175219 from dirkmueller)</comment>
    <requestid>175239</requestid>
  </revision>
  <revision rev="14" vrev="2">
    <srcmd5>c91b95eb25a24c03a19fb1ef35a96b26</srcmd5>
    <version>0.19.1</version>
    <time>1371651632</time>
    <user>coolo</user>
    <comment>housekeeping sr, necessary due to split between d:l:p and d:l:p3 and (manual) _link removal in Factory.</comment>
    <requestid>179674</requestid>
  </revision>
  <revision rev="15" vrev="4">
    <srcmd5>c91b95eb25a24c03a19fb1ef35a96b26</srcmd5>
    <version>0.19.1</version>
    <time>1379664098</time>
    <user>adrianSuSE</user>
    <comment>Split 13.1 from Factory</comment>
  </revision>
  <revision rev="16" vrev="5">
    <srcmd5>876777fadb2f73a0474204994c275676</srcmd5>
    <version>0.19.1</version>
    <time>1382013063</time>
    <user>scarabeus_factory</user>
    <comment>update-alternative implementation (forwarded request 203001 from posophe)</comment>
    <requestid>203002</requestid>
  </revision>
  <revision rev="17" vrev="1">
    <srcmd5>628c0ea70c7ebdf4820ffe92fc7bfce4</srcmd5>
    <version>0.19.2</version>
    <time>1382378490</time>
    <user>scarabeus_factory</user>
    <comment>- update to 0.19.2:
    * Some standard declarations were fixed or updated, including the previously
    incorrect declaration of ``PyBuffer_FillInfo()`` and some missing bits in
    ``libc.math``.
    * Heap allocated subtypes of ``type`` used the wrong base type struct at the
    C level.
    * Calling the unbound method dict.keys/value/items() in dict subtypes could
    call the bound object method instead of the unbound supertype method.
    * &quot;yield&quot; wasn't supported in &quot;return&quot; value expressions.
    * Using the &quot;bint&quot; type in memory views lead to unexpected results.
    It is now an error.
    * Assignments to global/closure variables could catch them in an illegal state
    while deallocating the old value. (forwarded request 204137 from dirkmueller)</comment>
    <requestid>204142</requestid>
  </revision>
  <revision rev="18" vrev="1">
    <srcmd5>3a523969fe6ab81d36558efc66db56d5</srcmd5>
    <version>0.20</version>
    <time>1391274287</time>
    <user>coolo</user>
    <comment>- Update to version 0.20:
  * Support for CPython 3.4.
  * Support for calling C++ template functions.
  * yield is supported in finally clauses.
  * The C code generated for finally blocks is duplicated for each exit
    case to allow for better optimisations by the C compiler.
  * Cython tries to undo the Python optimisationism of assigning a bound
    method to a local variable when it can generate better code for the
    direct call.
  * Constant Python float values are cached.
  * String equality comparisons can use faster type specific code in
    more cases than before.
  * String/Unicode formatting using the '%' operator uses a faster
    C-API call.
  * bytearray has become a known type and supports coercion from and
    to C strings.  Indexing, slicing and decoding is optimised. Note that
    this may have an impact on existing code due to type inference.
  * Using cdef basestring stringvar and function arguments typed as
    basestring is now meaningful and allows assigning exactly
    str and unicode objects, but no subtypes of these types.
  * Support for the __debug__ builtin.
  * Assertions in Cython compiled modules are disabled if the running
    Python interpreter was started with the &quot;-O&quot; option.
  * Some types that Cython provides internally, such as functions and
    generators, are now shared across modules if more than one Cython
    implemented module is imported.
  * The type inference algorithm works more fine granular by taking the
    results of the control flow analysis into account.
  * A new script in bin/cythonize provides a command line frontend
    to the cythonize() compilation function (including distutils build).</comment>
    <requestid>220455</requestid>
  </revision>
  <revision rev="19" vrev="2">
    <srcmd5>a60d59847693009b7245f67c47f20e2d</srcmd5>
    <version>0.20</version>
    <time>1391666794</time>
    <user>coolo</user>
    <comment>- add python-xml as require (forwarded request 220743 from jengelh)</comment>
    <requestid>220746</requestid>
  </revision>
  <revision rev="20" vrev="1">
    <srcmd5>05fab06b69712569999f2a0ddb72287c</srcmd5>
    <version>0.20.1</version>
    <time>1399703534</time>
    <user>coolo</user>
    <comment>Update to version 0.20.1 (forwarded request 233040 from TheBlackCat)</comment>
    <requestid>233041</requestid>
  </revision>
  <revision rev="21" vrev="1">
    <srcmd5>baa6107a2d6b1893e88d7bec20448437</srcmd5>
    <version>0.20.2</version>
    <time>1407236401</time>
    <user>coolo</user>
    <comment>1</comment>
    <requestid>243451</requestid>
  </revision>
  <revision rev="22" vrev="3">
    <srcmd5>baa6107a2d6b1893e88d7bec20448437</srcmd5>
    <version>0.20.2</version>
    <time>1409302785</time>
    <user>adrianSuSE</user>
    <comment>Split 13.2 from Factory</comment>
  </revision>
  <revision rev="23" vrev="1">
    <srcmd5>2470bcf9b7f19e35d2f7ee79f4f1ad7d</srcmd5>
    <version>0.21</version>
    <time>1411017139</time>
    <user>coolo</user>
    <comment>1</comment>
    <requestid>248950</requestid>
  </revision>
  <revision rev="24" vrev="2">
    <srcmd5>7e9f6d41987a827404fe1f9d96ee33a4</srcmd5>
    <version>0.21</version>
    <time>1416048055</time>
    <user>dimstar_suse</user>
    <comment>1</comment>
    <requestid>260882</requestid>
  </revision>
  <revision rev="25" vrev="1">
    <srcmd5>f4d7a34bc965826402c92b773f2048a9</srcmd5>
    <version>0.21.1</version>
    <time>1420927626</time>
    <user>dimstar_suse</user>
    <comment>1</comment>
    <requestid>280656</requestid>
  </revision>
  <revision rev="26" vrev="1">
    <srcmd5>f6f5e24b2ccd41af161e0afb7f2f288f</srcmd5>
    <version>0.22.1</version>
    <time>1438899633</time>
    <user>dimstar_suse</user>
    <comment>1</comment>
    <requestid>319399</requestid>
  </revision>
  <revision rev="27" vrev="2">
    <srcmd5>6d924e873c6c7cae43ac7f4c8022695a</srcmd5>
    <version>0.22.1</version>
    <time>1440138291</time>
    <user>dimstar_suse</user>
    <comment>1</comment>
    <requestid>324563</requestid>
  </revision>
  <revision rev="28" vrev="3">
    <srcmd5>84356fdbb2c0c61368946574d7013c5b</srcmd5>
    <version>0.22.1</version>
    <time>1440871328</time>
    <user>coolo</user>
    <comment>1</comment>
    <requestid>327453</requestid>
  </revision>
  <revision rev="29" vrev="1">
    <srcmd5>368be5b99b79af1981d34d83b00fbee8</srcmd5>
    <version>0.23.4</version>
    <time>1455021056</time>
    <user>dimstar_suse</user>
    <comment>1</comment>
    <requestid>357131</requestid>
  </revision>
  <revision rev="30" vrev="1">
    <srcmd5>eeec95d11dfa9b483a85a3a816a38941</srcmd5>
    <version>0.25.1</version>
    <time>1477990193</time>
    <user>dimstar_suse</user>
    <comment>1</comment>
    <requestid>437640</requestid>
  </revision>
  <revision rev="31" vrev="2">
    <srcmd5>394de43086ee0470a0aec5ba1ff4ab9c</srcmd5>
    <version>0.25.1</version>
    <time>1489759493</time>
    <user>dimstar_suse</user>
    <comment>- update for multipython build</comment>
    <requestid>479725</requestid>
  </revision>
  <revision rev="32" vrev="3">
    <srcmd5>26745a076d1013dfb4f0653c0c5de0db</srcmd5>
    <version>0.25.1</version>
    <time>1507196961</time>
    <user>dimstar_suse</user>
    <comment>1</comment>
    <requestid>530883</requestid>
  </revision>
  <revision rev="33" vrev="1">
    <srcmd5>ba1d97cef2378a376fbf6c78451f00b8</srcmd5>
    <version>0.26.1</version>
    <time>1507896421</time>
    <user>dimstar_suse</user>
    <comment>1</comment>
    <requestid>532572</requestid>
  </revision>
  <revision rev="34" vrev="1">
    <srcmd5>919474c46fad420faff814cbdf28a203</srcmd5>
    <version>0.27.3</version>
    <time>1517668617</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>570447</requestid>
  </revision>
  <revision rev="35" vrev="2">
    <srcmd5>98a98a432b07dd74723d54824e0c991c</srcmd5>
    <version>0.27.3</version>
    <time>1519557657</time>
    <user>dimstar_suse</user>
    <comment>- Disable tests as they randomly fail while it can't be triggered
  when reproducing localy

- update to 0.27.3
  * see CHANGES.txt for details
- Disable abs test wrt upstream issue with new GCC versions:
  * https://github.com/cython/cython/issues/1911
- Export fno-strict-aliasing to CFLAGS

- Also fixes bsc#1062237</comment>
    <requestid>578692</requestid>
  </revision>
  <revision rev="36" vrev="1">
    <srcmd5>02193f82f3bfa5f27171ac4e579377bc</srcmd5>
    <version>0.28.1</version>
    <time>1521716169</time>
    <user>dimstar_suse</user>
    <comment>- Version update to 0.28.1:
  * PyFrozenSet_New() was accidentally used in PyPy where it is lacking
    from the C-API.
  * Assignment between some C++ templated types were incorrectly rejected
    when the templates mix const with ctypedef. (Github issue #2148)
  * Undeclared C++ no-args constructors in subclasses could make the
    compilation fail if the base class constructor was declared without
    nogil. (Github issue #2157)
  * Bytes %-formatting inferred basestring (bytes or unicode) as result type
    in some cases where bytes would have been safe to infer. (Github issue #2153)
  * None was accidentally disallowed as typed return value of dict.pop().

- update to version 0.28:
  * Features added
    + Cdef classes can now multiply inherit from ordinary Python
      classes. (The primary base must still be a c class, possibly
      object, and the other bases must not be cdef classes.)
    + Type inference is now supported for Pythran compiled NumPy
      expressions. Patch by Nils Braun. (Github issue #1954)
    + The const modifier can be applied to memoryview declarations to
      allow read-only buffers as input. (Github issues #1605, #1869)
    + C code in the docstring of a cdef extern block is copied
      verbatimly into the generated file. Patch by Jeroen
      Demeyer. (Github issue #1915)
    + When compiling with gcc, the module init function is now tuned
      for small code size instead of whatever compile flags were
      provided externally. Cython now also disables some code
      intensive optimisations in that function to further reduce the
      code size. (Github issue #2102)
    + Decorating an async coroutine with @cython.iterable_coroutine</comment>
    <requestid>588610</requestid>
  </revision>
  <revision rev="37" vrev="2">
    <srcmd5>dae829887d98ce89969b1378214dc776</srcmd5>
    <version>0.28.1</version>
    <time>1522934922</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>593187</requestid>
  </revision>
  <revision rev="38" vrev="1">
    <srcmd5>5f06f8f70c57289e590b119c280ca149</srcmd5>
    <version>0.28.2</version>
    <time>1524400573</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>598790</requestid>
  </revision>
  <revision rev="39" vrev="1">
    <srcmd5>fbb7cefe6985259e698e8c437714c7f4</srcmd5>
    <version>0.28.3</version>
    <time>1527673255</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>612616</requestid>
  </revision>
  <revision rev="40" vrev="1">
    <srcmd5>1de7683ae94904a95d60aaa1de14983c</srcmd5>
    <version>0.28.4</version>
    <time>1531946145</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>622245</requestid>
  </revision>
  <revision rev="41" vrev="1">
    <srcmd5>f592c636173bd3c74d5f848c4c88bf53</srcmd5>
    <version>0.28.5</version>
    <time>1537263713</time>
    <user>maxlin_factory</user>
    <comment></comment>
    <requestid>628791</requestid>
  </revision>
  <revision rev="42" vrev="1">
    <srcmd5>e4a45f3cd6a83ea43fc22b99ba6fe099</srcmd5>
    <version>0.29</version>
    <time>1540447731</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>642685</requestid>
  </revision>
  <revision rev="43" vrev="2">
    <srcmd5>740837907a9d4b14581a21847fe6cbc6</srcmd5>
    <version>0.28.5</version>
    <time>1544441270</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>655560</requestid>
  </revision>
  <revision rev="44" vrev="1">
    <srcmd5>da5bdde4950b83de94df7d0e53bc59fc</srcmd5>
    <version>0.29.3</version>
    <time>1549311725</time>
    <user>coolo</user>
    <comment></comment>
    <requestid>667297</requestid>
  </revision>
  <revision rev="45" vrev="1">
    <srcmd5>b4491d859ca499b890c77f0f798b640c</srcmd5>
    <version>0.29.4</version>
    <time>1549630066</time>
    <user>coolo</user>
    <comment></comment>
    <requestid>671992</requestid>
  </revision>
  <revision rev="46" vrev="1">
    <srcmd5>63249cc583d133ebadb392e3c1470d1d</srcmd5>
    <version>0.29.6</version>
    <time>1551686997</time>
    <user>dimstar_suse</user>
    <comment>- update to 0.29.6
 * Fix a crash when accessing the __kwdefaults__ special attribute of fused functions.
 * Fix the parsing of buffer format strings that contain numeric sizes, which
    could lead to incorrect input rejections.
 * Avoid a C #pragma in old gcc versions that was only added in GCC 4.6.
 * Auto-encoding of Unicode strings to UTF-8 C/C++ strings failed in Python 3,
    even though the default encoding there is UTF-8.
 * Crash when defining a Python subclass of an extension type and repeatedly
    calling a cpdef method on it.
 * Compiler crash when prange() loops appear inside of with-statements.
 * Some C compiler warnings were resolved.
 * Python conversion of C++ enums failed in 0.29.

- update to 0.29.6
 * Fix a crash when accessing the __kwdefaults__ special attribute of fused functions.
 * Fix the parsing of buffer format strings that contain numeric sizes, which
    could lead to incorrect input rejections.
 * Avoid a C #pragma in old gcc versions that was only added in GCC 4.6.
 * Auto-encoding of Unicode strings to UTF-8 C/C++ strings failed in Python 3,
    even though the default encoding there is UTF-8.
 * Crash when defining a Python subclass of an extension type and repeatedly
    calling a cpdef method on it.
 * Compiler crash when prange() loops appear inside of with-statements.
 * Some C compiler warnings were resolved.
 * Python conversion of C++ enums failed in 0.29.</comment>
    <requestid>680181</requestid>
  </revision>
  <revision rev="47" vrev="2">
    <srcmd5>826ecb7b22e611632b7a6a12619552b0</srcmd5>
    <version>0.29.6</version>
    <time>1554372347</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>690772</requestid>
  </revision>
  <revision rev="48" vrev="1">
    <srcmd5>d8d293a2f8319a0cb208ce10b412826e</srcmd5>
    <version>0.29.7</version>
    <time>1555574135</time>
    <user>dimstar_suse</user>
    <comment>- update to 0.29.7
 * Crash when the shared Cython config module gets unloaded and another
    Cython module reports an exceptions. Cython now makes sure it keeps
    an owned reference to the module
 * Resolved a C89 compilation problem when enabling the fast-gil sharing feature.
 * Coverage reporting did not include the signature line of cdef functions
 * Casting a GIL-requiring function into a nogil function now issues a warning
 * Generators and coroutines were missing their return type annotation

- update to 0.29.7
 * Crash when the shared Cython config module gets unloaded and another
    Cython module reports an exceptions. Cython now makes sure it keeps
    an owned reference to the module
 * Resolved a C89 compilation problem when enabling the fast-gil sharing feature.
 * Coverage reporting did not include the signature line of cdef functions
 * Casting a GIL-requiring function into a nogil function now issues a warning
 * Generators and coroutines were missing their return type annotation</comment>
    <requestid>694800</requestid>
  </revision>
  <revision rev="49" vrev="1">
    <srcmd5>410752025f69a63a9773098c7857e581</srcmd5>
    <version>0.29.10</version>
    <time>1560862198</time>
    <user>dimstar_suse</user>
    <comment>- Say goodbye to -doc subpackage as the documentation is online
  and does not build with latest sphinx releases (even in master
  at the moment).
- The testing in -doc spec was disabled anyway and if needed we
  will reintroduce it as a multibuild

- update to 0.29.10
 * Fix compile errors in CPython 3.8b1 due to the new &quot;tp_vectorcall&quot; slots.
 * Remove an incorrect cast when using true-division in C++ operations. 
 * C compile errors with CPython 3.8 were resolved. 
 * Python tuple constants that compare equal but have different item types
     could incorrectly be merged into a single constant.
 * Non-ASCII characters in unprefixed strings could crash the compiler
     when used with language level 3str
 * Starred expressions in %-formatting tuples could fail to compile for unicode strings
 * Passing Python class references through cython.inline() was broken.</comment>
    <requestid>709360</requestid>
  </revision>
  <revision rev="50" vrev="1">
    <srcmd5>83d87608e62cf881178ae2d20d23e36e</srcmd5>
    <version>0.29.13</version>
    <time>1564484789</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>718922</requestid>
  </revision>
  <revision rev="51" vrev="1">
    <srcmd5>280e65b3b393161f2a09cd53ffd8ca1c</srcmd5>
    <version>0.29.14</version>
    <time>1574414697</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>749103</requestid>
  </revision>
  <revision rev="52" vrev="1">
    <srcmd5>50efb4e9dd48eea24ff93c9f339efd56</srcmd5>
    <version>0.29.15</version>
    <time>1582394548</time>
    <user>dimstar_suse</user>
    <comment>- update to 0.29.15
 * Crash when returning a temporary Python object from an async-def function.
 * Crash when using **kwargs in generators.
 * Double reference free in __class__ cell handling for super() calls.
 * Compile error when using *args as Python class bases.
 * Fixed C name collision in the auto-pickle code
 * Deprecated import failed in Python 3.9</comment>
    <requestid>775286</requestid>
  </revision>
  <revision rev="53" vrev="1">
    <srcmd5>2a70dd9f945c0617c5c0ae778d37e00d</srcmd5>
    <version>0.29.16</version>
    <time>1587580918</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>794812</requestid>
  </revision>
  <revision rev="54" vrev="1">
    <srcmd5>391eabc774e904099f4f270a7d8fbcd9</srcmd5>
    <version>0.29.17</version>
    <time>1588609979</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>799980</requestid>
  </revision>
  <revision rev="55" vrev="1">
    <srcmd5>e61fe8732c69253ea76213501d145002</srcmd5>
    <version>0.29.19</version>
    <time>1590649735</time>
    <user>maxlin_factory</user>
    <comment></comment>
    <requestid>808048</requestid>
  </revision>
  <revision rev="56" vrev="1">
    <srcmd5>925b71190d28ac7a1a4397554a0dd209</srcmd5>
    <version>0.29.20</version>
    <time>1592758154</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>813397</requestid>
  </revision>
  <revision rev="57" vrev="1">
    <srcmd5>eb8a0572bf7d87e2f052502ce80b73e4</srcmd5>
    <version>0.29.21</version>
    <time>1594807428</time>
    <user>dimstar_suse</user>
    <comment>- Update TO 0.29.21
 * Fix a regression in 0.29.20 where __div__ failed to be found in extension types
 * Fix a regression in 0.29.20 where a call inside of a finally clause could
    fail to compile
 * Zero-sized buffers could fail to validate as C/Fortran-contiguous.
 * exec() did not allow recent Python syntax features in Py3.8+
    due to https://bugs.python.org/issue35975
 * Binding staticmethods of Cython functions were not behaving like
    Python methods in Py3
 * Pythran calls to NumPy methods no longer generate useless method lookup code.
 * The PyUnicode_GET_LENGTH() macro was missing from the cpython.* declarations
 * The deprecated PyUnicode_*() C-API functions are no longer used, except
    for Unicode strings that contain lone surrogates. Unicode strings that
    contain non-BMP characters or surrogate pairs now generate different C
    code on 16-bit Python 2.x Unicode deployments (such as MS-Windows).
    Generating the C code on Python 3.x is recommended in this case
 * Some template parameters were missing from the C++ std::unordered_map declaration
 * Several internal code generation issues regarding temporary variables were resolved</comment>
    <requestid>819616</requestid>
  </revision>
  <revision rev="58" vrev="1">
    <srcmd5>149133efe2308153f5a0b82c022e7816</srcmd5>
    <version>0.29.22</version>
    <time>1614692551</time>
    <user>RBrownSUSE</user>
    <comment></comment>
    <requestid>874544</requestid>
  </revision>
  <revision rev="59" vrev="1">
    <srcmd5>71de0f6905e95f22a64f8481e500643b</srcmd5>
    <version>0.29.23</version>
    <time>1619298395</time>
    <user>dimstar_suse</user>
    <comment>- update to 0.29.23:
  * Some problems with Python 3.10 were resolved.
    Patches by Victor Stinner and David Woods.  (Github issues #4046, #4100)
  * An incorrect &quot;optimisation&quot; was removed that allowed changes to a keyword
    dict to leak into keyword arguments passed into a function.
    Patch by Peng Weikang.  (Github issue #3227)
  * Multiplied str constants could end up as bytes constants with language_level=2.
    Patch by Alphadelta14 and David Woods.  (Github issue #3951)
  * ``PY_SSIZE_T_CLEAN`` does not get defined any more if it is already defined.
    Patch by Andrew Jones.  (Github issue #4104)</comment>
    <requestid>887377</requestid>
  </revision>
  <revision rev="60" vrev="1">
    <srcmd5>ed341366e6ef1e816b0c3310447c1572</srcmd5>
    <version>0.29.24</version>
    <time>1626557782</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>906304</requestid>
  </revision>
  <revision rev="61" vrev="1">
    <srcmd5>43e2e69c03527d259649a72660a2f8cf</srcmd5>
    <version>0.29.25</version>
    <time>1639075519</time>
    <user>dimstar_suse</user>
    <comment>- update to 0.29.25:
  * Several incompatibilities with CPython 3.11 were resolved.
  * Some C compiler warnings were resolved.
  * C++ ``std::move()`` should only be used automatically in MSVC versions that support it.
  * The ``Py_hash_t`` type failed to accept arbitrary &quot;index&quot; values.
  * Avoid copying unaligned 16-bit values since some platforms require them to be aligned.
    Use memcpy() instead to let the C compiler decide how to do it.
  * Cython crashed on invalid truthiness tests on C++ types without ``operator bool``.
  * The declaration of ``PyUnicode_CompareWithASCIIString()`` in ``cpython.unicode`` was incorrect.</comment>
    <requestid>936122</requestid>
  </revision>
  <revision rev="62" vrev="1">
    <srcmd5>821197df0dc75ed082173566e3e72d98</srcmd5>
    <version>0.29.26</version>
    <time>1641555874</time>
    <user>dimstar_suse</user>
    <comment>- update to 0.29.26:
  * An incompatibility with CPython 3.11.0a3 was resolved.
  * The ``in`` operator failed on literal lists with starred
    expressions.
  * A C compiler warning in PyPy about a missing struct field
    initialisation was resolved.</comment>
    <requestid>943796</requestid>
  </revision>
  <revision rev="63" vrev="1">
    <srcmd5>ec0d55bdeacdc858881aedfc177c4c2a</srcmd5>
    <version>0.29.27</version>
    <time>1643926575</time>
    <user>dimstar_suse</user>
    <comment>- Make the running the test suite conditional (default
  off). Seven hours of running it is just too much.
- Enable running of the test suite.
- update to 0.29.27:
  * The ``cythonize`` command has a new option ``-M`` to generate ``.dep`` dependency
    files for the compilation unit.  This can be used by external build tools to track
    these dependencies.
  * Calls to ``range()`` with more than three arguments did not fail.
  * Some C compiler warnings about missing type struct initialisers in Py3.10 were resolved.
  * Cython no longer warns about using OpenMP 3.0 features since they are now
    considered generally available.
</comment>
    <requestid>950793</requestid>
  </revision>
  <revision rev="64" vrev="1">
    <srcmd5>db2b496e58b2724d2d931891989c9513</srcmd5>
    <version>0.29.28</version>
    <time>1648062919</time>
    <user>dimstar_suse</user>
    <comment>- update to 0.29.28:
  * Due to backwards incompatible changes in CPython 3.11a4, the feature flags
    ``CYTHON_FAST_THREAD_STATE`` and ``CYTHON_USE_EXC_INFO_STACK`` are now disabled
    in Python 3.11 and later.  They are enabled again in Cython 3.0.
    Patch by David Woods.  (Github issue #4610)
  * A C compiler warning in older PyPy versions was resolved.
    Patch by Matti Picus.  (Github issue #4236)</comment>
    <requestid>963357</requestid>
  </revision>
  <revision rev="65" vrev="1">
    <srcmd5>338c7024249c6062a14beb7d7844a7ef</srcmd5>
    <version>0.29.30</version>
    <time>1653061815</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>977998</requestid>
  </revision>
  <revision rev="66" vrev="1">
    <srcmd5>5242d70be4e6d3973acb7a6a7d9e49a8</srcmd5>
    <version>0.29.32</version>
    <time>1659554189</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>992334</requestid>
  </revision>
  <revision rev="67" vrev="2">
    <srcmd5>7b20e82e63770660f7cdfd585e0d6cea</srcmd5>
    <version>0.29.32</version>
    <time>1666871536</time>
    <user>dimstar_suse</user>
    <comment>- Remove leftover Python 2 gubbins.
- Stop using handrolled macros for install and update-alternatives,
  switch to the provided ones.
- Update package names in rpmlintrc.</comment>
    <requestid>1031225</requestid>
  </revision>
  <revision rev="68" vrev="1">
    <srcmd5>62a27dea720eacf12570acda949e4dc6</srcmd5>
    <version>0.29.33</version>
    <time>1673724682</time>
    <user>dimstar_suse</user>
    <comment>- update to 0.29.33:
  * The ``cythonize`` and ``cython`` commands have a new option ``-M`` /
    ``--depfile`` to generate ``.dep`` dependency files for the
    compilation unit.  This can be used by external build tools to
    track these dependencies. 
  * ``const`` fused types could not be used with memory views.
  * ``wstr`` usage was removed in Python 3.12 and later (PEP-623).
  * A type check assertion for Cython functions failed in debug Python
    builds.
  * Fixed various compiler warnings.
  * Fixed error when calculating complex powers of negative numbers.
  * Corrected a small mis-formatting of exception messages on Python 2.
  * The ``PyUnicode_AsUTF8AndSize()`` C-API function was missing from the
    CPython declarations.
  * A performance problem in the compiler was resolved when nesting
    conditional expressions.
  * Test suite problems with recent NumPy and CPython versions were
    resolved.
  * Other changes
  * The undocumented, untested and apparently useless syntax
  ``from somemodule cimport class/struct/union somename`` was deprecated
  in anticipation of its removal in Cython 3.  The type
  modifier is not needed here and a plain ``cimport`` of the name will do.
  * Properly disable generation of descriptor docstrings on PyPy since they
    cause crashes.
  It was previously disabled, but only accidentally via a typo.
  * The ``cpow`` directive of Cython 3.0 is available as a no-op.</comment>
    <requestid>1058181</requestid>
  </revision>
  <revision rev="69" vrev="1">
    <srcmd5>473153f5361d5edfabdd61be2471f083</srcmd5>
    <version>0.29.34</version>
    <time>1680789333</time>
    <user>dimstar_suse</user>
    <comment>- update to 0.29.34:
  * A refence leak of the for-loop list/tuple iterable was
    resolved if the for-loop's  ``else:`` branch executes 
    a ``break`` for an outer loop.
  * Some C compile failures in CPython 3.12 were resolved.
  * Some old usages of the deprecated Python ``imp`` module were
    replaced with ``importlib``.
  * Patch by Matúš Valo.  (Github issue :issue:`5300`)
  * Some issues with ``depfile`` generation were resolved.
  * Patches by Eli Schwartz.  (Github issues :issue:`5279`,
    :issue:`5291`)</comment>
    <requestid>1077062</requestid>
  </revision>
  <revision rev="70" vrev="2">
    <srcmd5>ddb619b8222a8ef5864e43ed526eb1cf</srcmd5>
    <version>0.29.34</version>
    <time>1682193769</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>1082042</requestid>
  </revision>
  <revision rev="71" vrev="1">
    <srcmd5>66d4d656fb6b2f8ebb951d8c860c2a94</srcmd5>
    <version>0.29.35</version>
    <time>1685393251</time>
    <user>dimstar_suse</user>
    <comment>- update to 0.29.35:
  * A garbage collection enabled subtype of a non-GC extension
    type could call into the deallocation function of the
    super type with GC tracking enabled.  This could lead
    to crashes during deallocation if GC was triggered on the
    type at the same time.
  * Some C compile failures and crashes in CPython 3.12 were
    resolved.
  * ``except + nogil`` was syntactically not allowed.
  * ``except +nogil`` (i.e. defining a C++ exception handling
    function called ``nogil``) is now disallowed to prevent typos.
  * A C compile failure in PyPy 3.10 was resolved.
  * Cython modules now use PEP-489 multi-phase init by default in
    PyPy 3.9 and later.
  * API header files generated by different Cython versions can
    now be included in the same C file.
  * Function signatures containing a type like `tuple[()]` could
    not be printed.</comment>
    <requestid>1089349</requestid>
  </revision>
  <revision rev="72" vrev="1">
    <srcmd5>fdc48307cc71e91de614ab42673128b0</srcmd5>
    <version>0.29.36</version>
    <time>1689175565</time>
    <user>dimstar_suse</user>
    <comment>- Clean up SPEC file.
- update to version 0.29.36:
  * Async generators lost their return value in PyPy. (Github issue
    :issue:`5465`)
  * The outdated C macro _PyGC_FINALIZED() is no longer used in
    Py3.9+.
  * The deprecated Py_OptimizeFlag is no longer used in Python
    3.9+. (Github issue :issue:`5343`)
  * Using the global __debug__ variable but not assertions could lead
    to compile errors.
  * The broken HTML template support was removed from Tempita. (Github
    issue :issue:`3309`)
</comment>
    <requestid>1098027</requestid>
  </revision>
  <revision rev="73" vrev="1">
    <srcmd5>e25ac458948f83fb18fd265185c1c603</srcmd5>
    <version>3.0.0</version>
    <time>1692379647</time>
    <user>anag+factory</user>
    <comment>- Update to the official release of 3.0.0:
  - The complete list is seriously long, so I would relegate you
    to https://github.com/cython/cython/blob/master/CHANGES.rst
  - The implemented PEPs are:
    - PEP-3131: Supporting Non-ASCII Identifiers
    - PEP-479: generator_stop (enabled by default for language_level=3)
    - PEP-487: Simpler customisation of class creation
    - PEP-563: Postponed Evaluation of Annotations
    - PEP-570: Positional-Only Parameters
    - PEP-572: Assignment Expressions (a.k.a. the walrus operator :=)
    - PEP-590: Vectorcall protocol
    - PEP-614: Relaxing Grammar Restrictions On Decorators
  - Cython supports all released versions of Python from 2.7 to
    3.11 (and some experimental parts of 3.12) inclusive.</comment>
    <requestid>1103745</requestid>
  </revision>
  <revision rev="74" vrev="1">
    <srcmd5>f26f7fac51979e71eb1d1974e0e054a3</srcmd5>
    <version>3.0.2</version>
    <time>1693383487</time>
    <user>anag+factory</user>
    <comment>- update to version 3.0.2:
  * Bugs fixed
    + Using None as default value for arguments annotated as int could
      crash Cython. (Github issue :issue:`5643`)
    + Default values of fused types that include complex could
      generate invalid C code with -DCYTHON_CCOMPLEX=0. (Github issue
      :issue:`5644`)
    + Using C++ enum class types in extension type method signatures
      could generate invalid C code. (Github issue :issue:`5637`)
- changes from version 3.0.1:
  * Features added
    + The error messages regarding exception declarations were
      improved in order to give better help about possible reasons and
      fixes. (Github issue :issue:`5547`)
  * Bugs fixed
    + Memory view types in Python argument annotations no longer
      accept None. They now require an explicit Optional[] or a None
      default value in order to allow None to be passed. This was an
      oversight in the 3.0.0 release and is a BACKWARDS INCOMPATIBLE
      change. However, since it only applies to code using Python
      syntax, it probably only applies to newly written code that was
      written for Cython 3.0 and can easily be adapted. In most cases,
      we expect that this change will avoid bugs in user code rather
      than produce problems. (Github issue :issue:`5612`)
    + nogil functions using parallel code could freeze when called
      with the GIL held. (Github issues :issue:`5564`, :issue:`5573`)
    + Relative cimports could end up searching globally and find the
      same package installed elsewhere, potentially in another
      version. (Github issue :issue:`5511`)
    + Attribute lookups on known standard library modules could
      accidentally search in the module namespace instead. (Github
      issue :issue:`5536`)
    + Using constructed C++ default arguments could generate invalid
      C++ code. (Github issue :issue:`5553`)
    + libcpp.memory.make_unique() was lacking C++ exception
      handling. (Github issue :issue:`5560`)
    + Some non-public and deprecated CAPI usages were replaced by
      public (and thus more future proof) API code.
    + Many issues with the Limited API support were resolved. Patches
      by Lisandro Dalcin et al. (Github issues :issue:`5549`,
      :issue:`5550`, :issue:`5556`, :issue:`5605`, :issue:`5617`)
    + Some C compiler warnings were resolved. Patches by Matti Picus
      et al. (Github issues :issue:`5557`, :issue:`5555`)
    + Large Python integers are now stored in hex instead of decimal
      strings to work around security limits in Python and generally
      speed up their Python object creation.
    + NULL could not be used as default for fused type pointer
      arguments. (Github issue :issue:`5554`)
    + C functions that return pointer types now return NULL as default
      exception value. Previously, calling code wasn't aware of this
      and always tested for raised exceptions. (Github issue
      :issue:`5554`)
    + Untyped literal default arguments in fused functions could
      generate invalid C code. (Github issue :issue:`5614`)
    + C variables declared as const could generate invalid C code when
      used in closures, generator expressions, ctuples, etc. (Github
      issues :issue:`5558`, :issue:`5333`)
    + Enums could not refer to previously defined enums in their
      definition. (Github issue :issue:`5602`)
    + The Python conversion code for anonymous C enums conflicted with
      regular int conversion. (Github issue :issue:`5623`)
    + Using memory views for property methods (and other special
      methods) could lead to refcounting problems. (Github issue
      :issue:`5571`)
    + Star-imports could generate code that tried to assign to
      constant C macros like PY_SSIZE_T_MAX and PY_SSIZE_T_MIN. Patch
      by Philipp Wagner. (Github issue :issue:`5562`)
    + CYTHON_USE_TYPE_SPECS can now be (explicitly) enabled in PyPy.
    + The template parameter &quot;delimeters&quot; in the Tempita Template
      class was corrected to &quot;delimiters&quot;. The old spelling is still
      available in the main template API but now issues a
      DeprecationWarning. (Github issue :issue:`5608`)
    + The cython --version output is now less likely to reach both
      stdout and stderr. Patch by Eli Schwartz. (Github issue
      :issue:`5504`)
    + The sdist was missing the Shadow.pyi stub file.
</comment>
    <requestid>1107857</requestid>
  </revision>
  <revision rev="75" vrev="1">
    <srcmd5>908f86f9700e037fa4bc7ba0f0792336</srcmd5>
    <version>3.0.4</version>
    <time>1697748438</time>
    <user>anag+factory</user>
    <comment>- update to version 3.0.4:
  * Features added
    - A new compiler directive show_performance_hints was added to
      disable the newly added performance hint output. (Github issue
      :issue:`5748`)
  * Bugs fixed
   - `cythonize` required ``distutils even for operations that did not
     build binaries. (Github issue :issue:`5751`)
   - A regression in 3.0.3 was fixed that prevented calling inline
     functions from another inline function in .pxd files. (Github
     issue :issue:`5748`)
   - Some C compiler warnings were resolved. Patch by Pierre Jolivet.
     (Github issue :issue:`5756`)
- update to version 3.0.3:
  * Features added
    - More warnings were added to help users migrate and avoid bugs.
      (Github issue #5650)
    - A warning-like category for performance hints was added that
      bypasses -Werror. (Github issue #5673)
    - FastGIL now uses standard thread_local in C++. (Github issue
      #5640)
    - reference_wrapper was added to libcpp.functional. Patch by Vyas
      Ramasubramani. (Github issue #5671)
    - The cythonize command now supports the --cplus option known from
      the cython command. (Github issue #5736)
  * Bug fixed
    - Performance regressions where the GIL was needlessly acquired
      were fixed. (Github issues #5670, #5700)
    - A reference leak for exceptions in Python 3.12 was resolved.
      Patch by Eric Johnson. (Github issue #5724)
    - fastcall calls with keyword arguments generated incorrect C
      code. (Github issue #5665)
    - Assigning the type converted result of a conditional (if-else)
      expression to int or bool variables could lead to incorrect C
      code. (Github issue #5731)
    - Early (unlikely) failures in Python function wrappers no longer
      set a traceback in order to simplify the C code flow. Being
      mostly memory allocation errors, they probably would never have
      created a traceback anyway. (Github issue #5681)
    - Relative cimports from packages with __init__.py files could
      fail. (Github issue #5715)
    - Several issues with the Limited API support were resolved.
      (Github issues #5641, #5648, #5689)
    - The code generated for special-casing both Cython functions and
      PyCFunctions was cleaned up to avoid calling C-API functions
      that were not meant for the other type respectively. This could
      previously trigger assertions in CPython debug builds and now
      also plays better with the Limited API. (Github issues #4804,
      #5739)
    - Fix some C compiler warnings. Patches by Ralf Gommers, Oleksandr
      Pavlyk, Sebastian Koslowski et al. (Github issues #5651, #5663,
      #5668, #5717, #5726, #5734)
    - Generating gdb debugging information failed when using generator
      expressions. Patch by Oleksandr Pavlyk. (Github issue #5552)
    - Passing a setuptools.Extension into cythonize() instead of a
      distutils.Extension could make it miss the matching extensions.
    - cython -M needlessly required distutils, which made it fail in
      Python 3.12. (Github issue #5681)
  * Other changes
    - The visible deprecation warning for DEF was removed again since
      it proved difficult for some users to migrate away from it. The
      statement is still meant to be removed at some point (and thus,
      like IF, should not be used in new code), but the time for
      sunset is probably not around the corner. (Github issue #4310)
    - The np_pythran option raise a DeprecationWarning if it receives
      other values than True and False. This will eventually be
      disallowed (in line with all other boolean options).
</comment>
    <requestid>1118531</requestid>
  </revision>
</revisionlist>
