diff --git a/nilearn/image/resampling.py b/nilearn/image/resampling.py
index da34963a7d..778740c08c 100644
--- a/nilearn/image/resampling.py
+++ b/nilearn/image/resampling.py
@@ -686,8 +686,8 @@ def resample_img(
         # preventing ringing artefact
         # We need to add zero as a value considered for clipping, as it
         # appears in padding images.
-        vmin = min(data.min(), 0)
-        vmax = max(data.max(), 0)
+        vmin = min(np.nanmin(data), 0)
+        vmax = max(np.nanmax(data), 0)
         resampled_data.clip(vmin, vmax, out=resampled_data)
 
     return new_img_like(img, resampled_data, target_affine)
diff --git a/nilearn/image/tests/test_resampling.py b/nilearn/image/tests/test_resampling.py
index 483aec9f99..3e63a9a016 100644
--- a/nilearn/image/tests/test_resampling.py
+++ b/nilearn/image/tests/test_resampling.py
@@ -586,8 +586,7 @@ def test_resampling_nan(affine, core_shape):
 
     # check 3x3 transformation matrix
     target_affine = np.eye(3)[axis_permutation]
-    with pytest.warns(Warning, match=r"(\bnan\b|invalid value)"):
-        resampled_img = resample_img(source_img, target_affine=target_affine)
+    resampled_img = resample_img(source_img, target_affine=target_affine)
 
     resampled_data = get_data(resampled_img)
     if full_data.ndim == 4:
diff --git a/nilearn/maskers/nifti_maps_masker.py b/nilearn/maskers/nifti_maps_masker.py
index b0cbaf386e..13cf1a2d26 100644
--- a/nilearn/maskers/nifti_maps_masker.py
+++ b/nilearn/maskers/nifti_maps_masker.py
@@ -228,10 +228,17 @@ def generate_report(self, displayed_maps=10):
         """
         from nilearn.reporting.html_report import generate_report
 
-        if (
-            displayed_maps != "all"
-            and not isinstance(displayed_maps, (list, np.ndarray, int))
-        ):
+        incorrect_type = not isinstance(
+            displayed_maps, (list, np.ndarray, int, str)
+        )
+        incorrect_string = (
+            isinstance(displayed_maps, str) and displayed_maps != "all"
+        )
+        not_integer = (
+            not isinstance(displayed_maps, str)
+            and np.array(displayed_maps).dtype != int
+        )
+        if incorrect_type or incorrect_string or not_integer:
             raise TypeError(
                 "Parameter ``displayed_maps`` of "
                 "``generate_report()`` should be either 'all' or "
