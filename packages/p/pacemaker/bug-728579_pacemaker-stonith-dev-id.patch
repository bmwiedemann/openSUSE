commit 1e01228825eb8d4449edfbb1a1fa0c38fab4d5e6
Author: Gao,Yan <ygao@suse.com>
Date:   Thu Sep 6 15:14:58 2012 +0800

    Medium: stonith: Expose IDs of stonith resources to stonith agents through "$CRM_meta_st_device_id" environment variable

Index: pacemaker-3.0.0+20250416.6085fd03bf/daemons/fenced/fenced_commands.c
===================================================================
--- pacemaker-3.0.0+20250416.6085fd03bf.orig/daemons/fenced/fenced_commands.c
+++ pacemaker-3.0.0+20250416.6085fd03bf/daemons/fenced/fenced_commands.c
@@ -1115,6 +1115,7 @@ build_device_from_xml(const xmlNode *dev
                  (const char *) device->on_target_actions->str);
     }
 
+    g_hash_table_insert(device->params, strdup(CRM_META "_" PCMK__XE_ST_DEVICE_ID), strdup(device->id));
     device->work = mainloop_add_trigger(G_PRIORITY_HIGH, stonith_device_dispatch, device);
 
     return device;
Index: pacemaker-3.0.0+20250416.6085fd03bf/lib/fencing/st_actions.c
===================================================================
--- pacemaker-3.0.0+20250416.6085fd03bf.orig/lib/fencing/st_actions.c
+++ pacemaker-3.0.0+20250416.6085fd03bf/lib/fencing/st_actions.c
@@ -33,6 +33,7 @@ struct stonith_action_s {
     char *agent;
     char *action;
     GHashTable *args;
+    char *dev_id;
     int timeout;
     bool async;
     void *userdata;
@@ -215,6 +216,7 @@ stonith__destroy_action(stonith_action_t
             services_action_free(action->svc_action);
         }
         pcmk__reset_result(&(action->result));
+        free(action->dev_id);
         free(action);
     }
 }
@@ -272,6 +274,8 @@ stonith__action_create(const char *agent
     if (device_args) {
         char buffer[512];
         const char *value = NULL;
+        const char *st_dev_id_key = CRM_META "_" PCMK__XE_ST_DEVICE_ID;
+        const char *st_dev_id_value = NULL;
 
         snprintf(buffer, sizeof(buffer), "pcmk_%s_retries", action_name);
         value = g_hash_table_lookup(device_args, buffer);
@@ -279,6 +283,11 @@ stonith__action_create(const char *agent
         if (value) {
             action->max_retries = atoi(value);
         }
+
+        st_dev_id_value = g_hash_table_lookup(device_args, st_dev_id_key);
+        if (st_dev_id_value) {
+            action->dev_id = strdup(st_dev_id_value);
+        }
     }
 
     return action;
@@ -640,6 +649,10 @@ internal_stonith_action_execute(stonith_
         return -E2BIG;
     }
 
+    if (action->dev_id) {
+        svc_action->rsc = strdup(action->dev_id);
+    }
+
     /* keep retries from executing out of control and free previous results */
     if (is_retry) {
         pcmk__reset_result(&(action->result));
Index: pacemaker-3.0.0+20250416.6085fd03bf/lib/services/services_linux.c
===================================================================
--- pacemaker-3.0.0+20250416.6085fd03bf.orig/lib/services/services_linux.c
+++ pacemaker-3.0.0+20250416.6085fd03bf/lib/services/services_linux.c
@@ -25,6 +25,9 @@
 #include "crm/services.h"
 #include "crm/services_internal.h"
 
+#include "crm/stonith-ng.h"
+#include "crm/fencing/internal.h"
+
 #include "services_private.h"
 
 static void close_pipe(int fildes[]);
@@ -446,6 +449,15 @@ static void
 add_action_env_vars(const svc_action_t *op)
 {
     void (*env_setter)(gpointer, gpointer, gpointer) = NULL;
+
+    if (pcmk__str_eq(op->standard, PCMK_RESOURCE_CLASS_STONITH, pcmk__str_casei)
+        && pcmk__str_eq(op->agent, "fence_legacy", pcmk__str_casei)
+        && op->rsc != NULL) {
+        const char *st_dev_id_key = CRM_META "_" PCMK__XE_ST_DEVICE_ID;
+
+        setenv(st_dev_id_key, op->rsc, 1);
+    }
+
     if (op->agent == NULL) {
         env_setter = set_alert_env;  /* we deal with alert handler */
 
