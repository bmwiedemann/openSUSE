-------------------------------------------------------------------
Thu Feb 18 08:32:36 UTC 2021 - andy great <andythe_great@pm.me>

- Update to version 3.5.
  * ``sqlite-utils insert --sniff`` option for detecting the delimiter
    and quote character used by a CSV file
  * The ``table.rows_where()``, ``table.search()`` and 
    ``table.search_sql()`` methods all now take optional ``offset=`` 
    and ``limit=`` arguments.
  * New ``--no-headers`` option for ``sqlite-utils insert --csv`` to
    handle CSV files that are missing the header row.
  * Fixed bug where inserting data with extra columns in subsequent
    chunks would throw an error.
  * Fixed bug importing CSV files with columns containing more than
    128KB of data.
  * Test suite now runs in CI against Ubuntu, macOS and Windows.
- Updates for 3.4.1
  * Fixed a code import bug that slipped in to 3.4.
- Updates for 3.4
  * ``sqlite-utils insert --csv`` now accepts optional
  ``--delimiter`` and ``--quotechar`` options.
- Updates for 3.3
  * The ``table.m2m()`` method now accepts an optional ``alter=True``
    argument to specify that any missing columns should be added to
    the referenced table.
- Updates for 3.2.1
  * Fixed a bug where ``.add_missing_columns()`` failed to take case
    insensitive column names into account.
- Updates for 3.2
  * This release introduces a new mechanism for speeding up 
    ``count(*)`` queries using cached table counts, stored in a 
    ``_counts`` table and updated by triggers. This mechanism is 
    described in :ref:`python_api_cached_table_counts`, and can be 
    enabled using Python API methods or the new ``enable-counts`` 
    CLI command.
  * ``table.enable_counts()`` method for enabling these triggers 
    on a specific table.
  * ``db.enable_counts()`` method for enabling triggers on every 
    table in the database.
  * New ``sqlite-utils enable-counts my.db`` command for enabling 
    counts on all or specific tables, see :ref:`cli_enable_counts`.
  * New ``sqlite-utils triggers`` command for listing the triggers
    defined for a database or specific tables.
  * New ``db.use_counts_table`` property which, if ``True``, causes
    ``table.count`` to read from the ``_counts`` table.
  * ``table.has_counts_triggers`` property revealing if a table has
    been configured with the new ``_counts`` database triggers.
  * ``db.reset_counts()`` method and ``sqlite-utils reset-counts`` 
    command for resetting the values in the ``_counts`` table.
  * The previously undocumented ``db.escape()`` method has been 
    renamed to ``db.quote()``.
  * New ``table.triggers_dict`` and ``db.triggers_dict`` 
    introspection properties.
  * ``sqlite-utils insert`` now shows a more useful error message 
    for invalid JSON.
- Updates for 3.1.1
  * Fixed failing test caused by ``optimize`` sometimes creating 
   larger database files. 
  * Documentation now lives on https://sqlite-utils.datasette.io/
  * README now includes ``brew install sqlite-utils`` installation method.
- Updates for 3.1
  * New command: ``sqlite-utils analyze-tables my.db`` outputs useful
   information about the table columns in the database, such as the
   number of distinct values and how many rows are null.
  * New ``table.analyze_column(column)`` Python method used by the 
    ``analyze-tables`` command - see :ref:`python_api_analyze_column`.
  * The ``table.update()`` method now correctly handles values that
    should be stored as JSON. 
- Updates for 3.0
  * This release introduces a new ``sqlite-utils search`` command 
    for searching tables, see :ref:`cli_search`.
  * The ``table.search()`` method has been redesigned.
  * The release includes minor backwards-incompatible changes, hence
    the version bump to 3.0. Those changes, which should not affect 
    most users, are:
  * The ``-c`` shortcut option for outputting CSV is no longer 
    available. The full ``--csv`` option is required instead.
  * The ``-f`` shortcut for ``--fmt`` has also been removed - use 
    ``--fmt``.
  * The ``table.search()`` method now defaults to sorting by 
    relevance, not sorting by ``rowid``.
  * The ``table.search()`` method now returns a generator over a list
    of Python dictionaries. It previously returned a list of tuples.
  * The ``query``, ``tables``, ``rows`` and ``search`` CLI commands 
    now accept a new ``--tsv`` option which outputs the results in TSV.
  * A new ``table.virtual_table_using`` property reveals if a table
    is a virtual table, and returns the upper case type of virtual 
    table (e.g. ``FTS4`` or ``FTS5``) if it is. It returns ``None``
    if the table is not a virtual table.
  * The new ``table.search_sql()`` method returns the SQL for 
    searching a table, see :ref:`python_api_fts_search_sql`.
  * ``sqlite-utils rows`` now accepts multiple optional ``-c`` 
    parameters specifying the columns to return.
  * The ``sqlite-utils search`` command now defaults to returning 
    every result, unless you add a ``--limit 20`` option.
  * The ``sqlite-utils search -c`` and ``table.search(columns=[])``
    options are now fully respected.
- Skip python2 because python-sqlite-fts4 don't support it.
- Skip python36 because python-panda don't support it.

-------------------------------------------------------------------
Sun Aug 23 16:02:45 UTC 2020 - John Vandenberg <jayvdb@gmail.com>

- Update to v2.16

-------------------------------------------------------------------
Mon Jan  6 20:21:59 UTC 2020 - John Vandenberg <jayvdb@gmail.com>

- Initial spec for v2.0.1
