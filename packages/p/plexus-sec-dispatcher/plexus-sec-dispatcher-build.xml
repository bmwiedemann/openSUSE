<?xml version="1.0" encoding="UTF-8"?>

<project name="plexus-sec-dispatcher" default="package" basedir=".">

  <!-- ====================================================================== -->
  <!-- Build environment properties                                           -->
  <!-- ====================================================================== -->

  <property file="build.properties"/>

  <property name="project.groupId" value="org.sonatype.plexus"/>
  <property name="project.artifactId" value="plexus-sec-dispatcher"/>
  <property name="project.version" value="1.4"/>
  <property name="project.url" value="http://spice.sonatype.org/${project.artifactId}"/>
  <property name="project.name" value="Plexus Security Dispatcher Component"/>
  <property name="project.organization.name" value="Sonatype, Inc."/>

  <property name="compiler.source" value="1.6"/>
  <property name="compiler.target" value="${compiler.source}"/>

  <property name="build.finalName" value="${project.artifactId}-${project.version}"/>
  <property name="build.dir" value="target"/>
  <property name="build.outputDir" value="${build.dir}/classes"/>
  <property name="build.srcDir" value="src/main/java"/>
  <property name="build.resourceDir" value="src/main/resources"/>
  <property name="build.testOutputDir" value="${build.dir}/test-classes"/>
  <property name="build.testDir" value="src/test/java"/>
  <property name="build.testResourceDir" value="src/test/resources"/>
  <property name="test.reports" value="${build.dir}/test-reports"/>
  <property name="reporting.outputDirectory" value="${build.dir}/site"/>

  <property name="build.mdoDir" value="src/main/mdo"/>
  <property name="build.mdoOutputDir" value="${build.dir}/generated-sources/modello"/>

  <!-- ====================================================================== -->
  <!-- Defining classpaths                                                    -->
  <!-- ====================================================================== -->

  <path id="build.classpath">
    <fileset dir="lib">
      <!-- plexus-utils-3.1.1 plexus-cipher-1.4 classworlds-1.1-alpha-2
           plexus-container-default-1.0-alpha-9-stable-1.jar -->
      <include name="**/*.jar"/>
    </fileset>
  </path>
  <path id="build.test.classpath">
    <fileset dir="lib">
     <!-- plexus-utils-3.1.1 plexus-cipher-1.4 classworlds-1.1-alpha-2
          plexus-container-default-1.0-alpha-9-stable-1.jar junit-3.8.2 -->
      <include name="**/*.jar"/>
    </fileset>
  </path>

  <!-- ====================================================================== -->
  <!-- Cleaning up target                                                     -->
  <!-- ====================================================================== -->

  <target name="clean" description="Clean the output directory">
    <delete dir="${build.dir}"/>
  </target>

  <!-- ====================================================================== -->
  <!-- Code generation target                                                 -->
  <!-- ====================================================================== -->

  <target name="gen-src" description="Generate sources from mdo files">
    <mkdir dir="${build.mdoOutputDir}"/>
    <exec executable="modello" failonerror="true">
      <arg value="${build.mdoDir}/settings-security.mdo"/>
      <arg value="java"/>
      <arg value="${build.mdoOutputDir}"/>
      <arg value="1.0.0"/>
      <arg value="false"/>
      <arg value="true"/>
    </exec>
    <exec executable="modello" failonerror="true">
      <arg value="${build.mdoDir}/settings-security.mdo"/>
      <arg value="xpp3-reader"/>
      <arg value="${build.mdoOutputDir}"/>
      <arg value="1.0.0"/>
      <arg value="false"/>
      <arg value="true"/>
    </exec>
    <exec executable="modello" failonerror="true">
      <arg value="${build.mdoDir}/settings-security.mdo"/>
      <arg value="xpp3-writer"/>
      <arg value="${build.mdoOutputDir}"/>
      <arg value="1.0.0"/>
      <arg value="false"/>
      <arg value="true"/>
    </exec>
  </target>

  <!-- ====================================================================== -->
  <!-- Compilation target                                                     -->
  <!-- ====================================================================== -->

  <target name="compile" depends="gen-src" description="Compile the code">
    <mkdir dir="${build.outputDir}"/>
    <javac destdir="${build.outputDir}"
           nowarn="false"
           debug="true"
           optimize="false"
           deprecation="true"
           target="${compiler.target}"
           verbose="false"
           fork="false"
           source="${compiler.source}">
      <src>
        <pathelement location="${build.srcDir}"/>
        <pathelement location="${build.mdoOutputDir}"/>
      </src>
      <classpath refid="build.classpath"/>
    </javac>
  </target>

  <!-- ====================================================================== -->
  <!-- Plexus component.xml generation target                                 -->
  <!-- ====================================================================== -->

  <target name="gen-meta"
          depends="compile"
          description="Generate Plexus component.xml">
    <mkdir dir="${build.outputDir}/META-INF/plexus"/>
    <exec executable="plexus-metadata-generator" failonerror="true">
      <env key="CLASSPATH" value="${build.outputDir}"/>
      <arg value="-s"/>
      <arg value="${build.srcDir}"/>
      <arg value="-c"/>
      <arg value="${build.outputDir}"/>
      <arg value="-m"/>
      <arg value="${build.outputDir}/META-INF/plexus"/>
      <arg value="-o"/>
      <arg value="${build.outputDir}/META-INF/plexus/components.xml"/>
    </exec>
  </target>

  <!-- ====================================================================== -->
  <!-- Test-compilation target                                                -->
  <!-- ====================================================================== -->

  <target name="compile-tests"
          depends="gen-meta"
          description="Compile the test code"
          unless="test.skip">
    <mkdir dir="${build.testOutputDir}"/>
    <javac destdir="${build.testOutputDir}"
           nowarn="false"
           debug="true"
           optimize="false"
           deprecation="true"
           target="${compiler.target}"
           verbose="false"
           fork="false"
           source="${compiler.source}">
      <src>
        <pathelement location="${build.testDir}"/>
      </src>
      <classpath>
        <path refid="build.test.classpath"/>
        <pathelement location="${build.outputDir}"/>
      </classpath>
    </javac>
    <copy todir="${build.testOutputDir}">
      <fileset dir="${build.testResourceDir}"/>
    </copy>
  </target>

  <!-- ====================================================================== -->
  <!-- Run all tests                                                          -->
  <!-- ====================================================================== -->

  <target name="test"
          depends="compile-tests, junit-missing"
          unless="junit.skipped"
          description="Run the test cases">
    <mkdir dir="${test.reports}"/>
    <junit printSummary="yes" haltonerror="true" haltonfailure="true" fork="true" dir=".">
      <sysproperty key="basedir" value="."/>
      <formatter type="xml"/>
      <formatter type="plain" usefile="false"/>
      <classpath>
        <path refid="build.test.classpath"/>
        <pathelement location="${build.outputDir}"/>
        <pathelement location="${build.testOutputDir}"/>
      </classpath>
      <batchtest todir="${test.reports}" unless="test">
        <fileset dir="${build.testDir}">
          <include name="**/Test*.java"/>
          <include name="**/*Test.java"/>
          <include name="**/*TestCase.java"/>
          <exclude name="**/*Abstract*Test.java"/>
        </fileset>
      </batchtest>
      <batchtest todir="${test.reports}" if="test">
        <fileset dir="${build.testDir}">
          <include name="**/${test}.java"/>
          <exclude name="**/*Abstract*Test.java"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="test-junit-present">
    <available classname="junit.framework.Test" property="junit.present" classpathref="build.test.classpath"/>
  </target>

  <target name="test-junit-status"
          depends="test-junit-present">
    <condition property="junit.missing">
      <and>
        <isfalse value="${junit.present}"/>
        <isfalse value="${test.skip}"/>
      </and>
    </condition>
    <condition property="junit.skipped">
      <or>
        <isfalse value="${junit.present}"/>
        <istrue value="${test.skip}"/>
      </or>
    </condition>
  </target>

  <target name="junit-missing"
          depends="test-junit-status"
          if="junit.missing">
    <echo>=================================== WARNING ===================================</echo>
    <echo> JUnit is not present in the test classpath or your $ANT_HOME/lib directory. Tests not executed.</echo>
    <echo>===============================================================================</echo>
  </target>

  <!-- ====================================================================== -->
  <!-- Javadoc target                                                         -->
  <!-- ====================================================================== -->

  <target name="javadoc"
          depends="gen-src"
          description="Generates the Javadoc of the application">
    <path id="src.path">
        <pathelement location="${build.srcDir}"/>
        <pathelement location="${build.mdoOutputDir}"/>
    </path>
    <javadoc sourcepathref="src.path"
             packagenames="*"
             destdir="${reporting.outputDirectory}/apidocs"
             access="protected"
             source="${compiler.source}"
             verbose="false"
             version="true"
             use="true"
             author="true"
             splitindex="false"
             nodeprecated="false"
             nodeprecatedlist="false"
             notree="false"
             noindex="false"
             nohelp="false"
             nonavbar="false"
             serialwarn="false"
             charset="ISO-8859-1"
             linksource="false"
             breakiterator="false">
      <classpath refid="build.classpath"/>
    </javadoc>
  </target>

  <!-- ====================================================================== -->
  <!-- Package target                                                         -->
  <!-- ====================================================================== -->

  <target name="package" depends="gen-meta,test" description="Package the application">
    <jar jarfile="${build.dir}/${build.finalName}.jar"
         compress="true"
         index="false"
         basedir="${build.outputDir}"
         excludes="**/package.html">
      <manifest>
        <attribute name="Implementation-Title" value="${project.name}"/>
        <attribute name="Implementation-URL" value="${project.url}"/>
        <attribute name="Implementation-Vendor" value="${project.organization.name}"/>
        <attribute name="Implementation-Vendor-Id" value="${project.groupId}"/>
        <attribute name="Implementation-Version" value="${project.version}"/>
        <attribute name="JavaPackages-ArtifactId" value="${project.artifactId}"/>
        <attribute name="JavaPackages-GroupId" value="${project.groupId}"/>
        <attribute name="JavaPackages-Version" value="${project.version}"/>
        <attribute name="Specification-Title" value="${project.name}"/>
        <attribute name="Specification-Vendor" value="${project.organization.name}"/>
        <attribute name="Specification-Version" value="${project.version}"/>
      </manifest>
    </jar>
  </target>

  <!-- ====================================================================== -->
  <!-- A dummy target for the package named after the type it creates         -->
  <!-- ====================================================================== -->

  <target name="jar" depends="package" description="Builds the jar for the application"/>

</project>
