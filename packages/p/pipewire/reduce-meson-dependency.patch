Index: pipewire-0.3.57/doc/meson.build
===================================================================
--- pipewire-0.3.57.orig/doc/meson.build
+++ pipewire-0.3.57/doc/meson.build
@@ -1,8 +1,8 @@
 doxyfile_conf = configuration_data()
 doxyfile_conf.set('PACKAGE_NAME', meson.project_name())
 doxyfile_conf.set('PACKAGE_VERSION', meson.project_version())
-doxyfile_conf.set('top_srcdir', meson.project_source_root())
-doxyfile_conf.set('top_builddir', meson.project_build_root())
+doxyfile_conf.set('top_srcdir', meson.source_root())
+doxyfile_conf.set('top_builddir', meson.build_root())
 
 dot_found = find_program('dot', required: false).found()
 summary({'dot (used with doxygen)': dot_found}, bool_yn: true, section: 'Optional programs')
@@ -48,35 +48,35 @@ extra_docs = [
 
 inputs = []
 foreach extra : extra_docs
-  inputs += meson.project_source_root() / 'doc' / extra
+  inputs += meson.source_root() / 'doc' / extra
 endforeach
 foreach h : pipewire_headers
-  inputs += meson.project_source_root() / 'src' / 'pipewire' / h
+  inputs += meson.source_root() / 'src' / 'pipewire' / h
 endforeach
 foreach h : pipewire_ext_headers
-  inputs += meson.project_source_root() / 'src' / 'pipewire' / 'extensions' / h
+  inputs += meson.source_root() / 'src' / 'pipewire' / 'extensions' / h
 endforeach
 foreach h : pipewire_ext_sm_headers
-  inputs += meson.project_source_root() / 'src' / 'pipewire' / 'extensions' / h
+  inputs += meson.source_root() / 'src' / 'pipewire' / 'extensions' / h
 endforeach
 foreach h : pipewire_sources
-  inputs += meson.project_source_root() / 'src' / 'pipewire' / h
+  inputs += meson.source_root() / 'src' / 'pipewire' / h
 endforeach
 foreach h : module_sources
-  inputs += meson.project_source_root() / 'src' / 'modules' / h
+  inputs += meson.source_root() / 'src' / 'modules' / h
 endforeach
-inputs += meson.project_source_root() / 'test' / 'pwtest.h'
-input_dirs = [ meson.project_source_root() / 'spa' / 'include' / 'spa' ]
+inputs += meson.source_root() / 'test' / 'pwtest.h'
+input_dirs = [ meson.source_root() / 'spa' / 'include' / 'spa' ]
 
 path_prefixes = [
-  meson.project_source_root() / 'src',
-  meson.project_source_root() / 'spa' / 'include',
-  meson.project_source_root(),
+  meson.source_root() / 'src',
+  meson.source_root() / 'spa' / 'include',
+  meson.source_root(),
 ]
 
 cssfiles = [
-  meson.project_source_root() / 'doc' / 'doxygen-awesome.css',
-  meson.project_source_root() / 'doc' / 'custom.css'
+  meson.source_root() / 'doc' / 'doxygen-awesome.css',
+  meson.source_root() / 'doc' / 'custom.css'
 ]
 
 # Example files (in order from simple to esoteric)
@@ -116,13 +116,25 @@ input_dirs += [ 'doc/examples.dox' ]
 
 man_doxygen = []
 man_subpages = []
+manpages = [
+  'pipewire.1.rst.in',
+  'pipewire-pulse.1.rst.in',
+  'pipewire.conf.5.rst.in',
+  'pw-cat.1.rst.in',
+  'pw-cli.1.rst.in',
+  'pw-dot.1.rst.in',
+  'pw-metadata.1.rst.in',
+  'pw-mididump.1.rst.in',
+  'pw-mon.1.rst.in',
+  'pw-profiler.1.rst.in',
+]
 foreach m : manpages
   manconf = configuration_data()
-  pagename = 'page_man_' + m.split('.rst.in').get(0).replace('.', '_').replace('-', '_')
+  pagename = 'page_man_' + m.split('.rst.in').get(0).underscorify()
   filename = m.split('.rst.in').get(0) + '.dox'
   manconf.set('pagename', pagename)
-  manconf.set('title', m.split('.rst.in').get(0).replace('.1','').replace('.5',''))
-  manconf.set('filename', meson.project_source_root() / 'man' / m)
+  manconf.set('title', m.split('.rst.in').get(0).strip('.15'))
+  manconf.set('filename', meson.source_root() / 'man' / m)
   manfile = configure_file(input: 'manpage.dox.in',
                            output: filename,
                            configuration: manconf)
@@ -141,8 +153,8 @@ input_dirs += [ 'doc/pipewire-tools.dox'
 doxyfile_conf.set('inputs', ' '.join(inputs + input_dirs))
 doxyfile_conf.set('cssfiles', ' '.join(cssfiles))
 doxyfile_conf.set('path_prefixes', ' '.join(path_prefixes))
-doxyfile_conf.set('c_input_filter', meson.project_source_root() / 'doc' / 'input-filter.sh')
-doxyfile_conf.set('h_input_filter', meson.project_source_root() / 'doc' / 'input-filter-h.sh')
+doxyfile_conf.set('c_input_filter', meson.source_root() / 'doc' / 'input-filter.sh')
+doxyfile_conf.set('h_input_filter', meson.source_root() / 'doc' / 'input-filter-h.sh')
 
 doxyfile = configure_file(input: 'Doxyfile.in',
                           output: 'Doxyfile',
Index: pipewire-0.3.57/man/meson.build
===================================================================
--- pipewire-0.3.57.orig/man/meson.build
+++ pipewire-0.3.57/man/meson.build
@@ -21,7 +21,7 @@ manpages = [
   'pw-top.1.rst.in',
 ]
 
-if get_option('pipewire-jack').allowed()
+if (get_option('pipewire-jack').enabled() or get_option('pipewire-jack').auto())
   manpages += 'pw-jack.1.rst.in'
 endif
 
Index: pipewire-0.3.57/meson.build
===================================================================
--- pipewire-0.3.57.orig/meson.build
+++ pipewire-0.3.57/meson.build
@@ -1,7 +1,7 @@
 project('pipewire', ['c' ],
   version : '0.3.57',
   license : [ 'MIT', 'LGPL-2.1-or-later', 'GPL-2.0-only' ],
-  meson_version : '>= 0.59.0',
+  meson_version : '>= 0.54.0',
   default_options : [ 'warning_level=3',
                       'c_std=gnu99',
                       'cpp_std=c++17',
@@ -235,8 +235,8 @@ includes_inc = include_directories('incl
 pipewire_inc = include_directories('src')
 
 makedata = configuration_data()
-makedata.set('BUILD_ROOT', meson.project_build_root())
-makedata.set('SOURCE_ROOT', meson.project_source_root())
+makedata.set('BUILD_ROOT', meson.build_root())
+makedata.set('SOURCE_ROOT', meson.source_root())
 makedata.set('VERSION', pipewire_version)
 if version_arr.length() == 4
   makedata.set('TAG', 'HEAD')
@@ -333,7 +333,7 @@ endforeach
 gst_dp_found = gst_dep.length() > 0
 summary({'gstreamer-device-provider': gst_dp_found}, bool_yn: true, section: 'Backend')
 
-cdata.set('HAVE_GSTREAMER_DEVICE_PROVIDER', get_option('gstreamer-device-provider').allowed())
+cdata.set('HAVE_GSTREAMER_DEVICE_PROVIDER', get_option('gstreamer-device-provider').enabled() or get_option('gstreamer-device-provider').auto())
 
 webrtc_dep = dependency('webrtc-audio-processing',
   version : ['>= 0.2', '< 1.0'],
@@ -396,10 +396,10 @@ endforeach
 
 installed_tests_metadir = pipewire_datadir / 'installed-tests' / pipewire_name
 installed_tests_execdir = pipewire_libexecdir / 'installed-tests' / pipewire_name
-installed_tests_enabled = get_option('installed_tests').allowed()
+installed_tests_enabled = (get_option('installed_tests').enabled() or get_option('installed_tests').auto())
 installed_tests_template = files('template.test.in')
 
-if get_option('tests').allowed()
+if (get_option('tests').enabled() or get_option('tests').auto())
   gstack = find_program('gstack', required : false)
   cdata.set('HAVE_GSTACK', gstack.found())
 endif
@@ -408,17 +408,17 @@ subdir('po')
 subdir('spa')
 subdir('src')
 
-if get_option('tests').allowed()
+if (get_option('tests').enabled() or get_option('tests').auto())
   subdir('test')
 endif
 
 configure_file(output : 'config.h',
                configuration : cdata)
 
-if get_option('pipewire-jack').allowed()
+if (get_option('pipewire-jack').enabled() or get_option('pipewire-jack').auto())
   subdir('pipewire-jack')
 endif
-if get_option('pipewire-v4l2').allowed()
+if (get_option('pipewire-v4l2').enabled() or get_option('pipewire-v4l2').auto())
   subdir('pipewire-v4l2')
 endif
 
@@ -429,7 +429,7 @@ if alsa_dep.found()
 endif
 
 generate_manpages = false
-if get_option('man').allowed()
+if (get_option('man').enabled() or get_option('man').auto())
   rst2man = find_program('rst2man', required: false)
   if not rst2man.found()
     rst2man = find_program('rst2man.py', required: get_option('man'))
@@ -450,20 +450,20 @@ endif
 setenv = find_program('pw-uninstalled.sh')
 run_target('pw-uninstalled',
   command : [setenv,
-             '-b@0@'.format(meson.project_build_root()),
+             '-b@0@'.format(meson.build_root()),
              '-v@0@'.format(pipewire_version)]
 )
 
 devenv = environment()
 
-builddir = meson.project_build_root()
-srcdir = meson.project_source_root()
+builddir = meson.build_root()
+srcdir = meson.source_root()
 
-devenv.set('PIPEWIRE_CONFIG_DIR', pipewire_dep.get_variable('confdatadir'))
-devenv.set('PIPEWIRE_MODULE_DIR', pipewire_dep.get_variable('moduledir'))
+devenv.set('PIPEWIRE_CONFIG_DIR', pipewire_dep.get_variable(internal: 'confdatadir'))
+devenv.set('PIPEWIRE_MODULE_DIR', pipewire_dep.get_variable(internal: 'moduledir'))
 
-devenv.set('SPA_PLUGIN_DIR', spa_dep.get_variable('plugindir'))
-devenv.set('SPA_DATA_DIR', spa_dep.get_variable('datadir'))
+devenv.set('SPA_PLUGIN_DIR', spa_dep.get_variable(internal: 'plugindir'))
+devenv.set('SPA_DATA_DIR', spa_dep.get_variable(internal: 'datadir'))
 
 devenv.set('GST_PLUGIN_PATH', builddir / 'src'/ 'gst')
 
@@ -475,4 +475,6 @@ devenv.set('LD_LIBRARY_PATH', builddir /
 
 devenv.set('PW_UNINSTALLED', '1')
 
-meson.add_devenv(devenv)
+if meson.version().version_compare('>=0.58.0')
+  meson.add_devenv(devenv)
+endif
Index: pipewire-0.3.57/spa/meson.build
===================================================================
--- pipewire-0.3.57.orig/spa/meson.build
+++ pipewire-0.3.57/spa/meson.build
@@ -31,7 +31,7 @@ pkgconfig.generate(filebase : 'lib@0@'.f
 
 subdir('include')
 
-if get_option('spa-plugins').allowed()
+if (get_option('spa-plugins').enabled() or get_option('spa-plugins').auto())
   udevrulesdir = get_option('udevrulesdir')
   if udevrulesdir == ''
     # absolute path, otherwise meson prepends the prefix
@@ -84,6 +84,6 @@ endif
 
 subdir('tools')
 subdir('tests')
-if get_option('examples').allowed()
+if (get_option('examples').enabled() or get_option('examples').auto())
   subdir('examples')
 endif
Index: pipewire-0.3.57/spa/plugins/audioconvert/meson.build
===================================================================
--- pipewire-0.3.57.orig/spa/plugins/audioconvert/meson.build
+++ pipewire-0.3.57/spa/plugins/audioconvert/meson.build
@@ -146,7 +146,7 @@ foreach a : test_apps
       install : installed_tests_enabled,
       install_dir : installed_tests_execdir / 'audioconvert'),
       env : [
-        'SPA_PLUGIN_DIR=@0@'.format(spa_dep.get_variable('plugindir')),
+        'SPA_PLUGIN_DIR=@0@'.format(spa_dep.get_variable(internal: 'plugindir')),
         ])
 
     if installed_tests_enabled
@@ -176,7 +176,7 @@ foreach a : benchmark_apps
       install : installed_tests_enabled,
       install_dir : installed_tests_execdir / 'audioconvert'),
       env : [
-        'SPA_PLUGIN_DIR=@0@'.format(spa_dep.get_variable('plugindir')),
+        'SPA_PLUGIN_DIR=@0@'.format(spa_dep.get_variable(internal: 'plugindir')),
         ])
 
     if installed_tests_enabled
Index: pipewire-0.3.57/spa/plugins/audiomixer/meson.build
===================================================================
--- pipewire-0.3.57.orig/spa/plugins/audiomixer/meson.build
+++ pipewire-0.3.57/spa/plugins/audiomixer/meson.build
@@ -81,7 +81,7 @@ foreach a : test_apps
       install : installed_tests_enabled,
       install_dir : installed_tests_execdir / 'audiomixer'),
       env : [
-        'SPA_PLUGIN_DIR=@0@'.format(spa_dep.get_variable('plugindir')),
+        'SPA_PLUGIN_DIR=@0@'.format(spa_dep.get_variable(internal: 'plugindir')),
         ])
 
     if installed_tests_enabled
@@ -110,7 +110,7 @@ foreach a : benchmark_apps
       install : installed_tests_enabled,
       install_dir : installed_tests_execdir / 'audiomixer'),
       env : [
-        'SPA_PLUGIN_DIR=@0@'.format(spa_dep.get_variable('plugindir')),
+        'SPA_PLUGIN_DIR=@0@'.format(spa_dep.get_variable(internal: 'plugindir')),
         ])
 
     if installed_tests_enabled
Index: pipewire-0.3.57/spa/plugins/bluez5/meson.build
===================================================================
--- pipewire-0.3.57.orig/spa/plugins/bluez5/meson.build
+++ pipewire-0.3.57/spa/plugins/bluez5/meson.build
@@ -6,12 +6,12 @@ foreach dep: bluez5_deps
 endforeach
 
 cdata.set('HAVE_BLUEZ_5_BACKEND_NATIVE',
-          get_option('bluez5-backend-hsp-native').allowed() or
-          get_option('bluez5-backend-hfp-native').allowed())
-cdata.set('HAVE_BLUEZ_5_BACKEND_HSP_NATIVE', get_option('bluez5-backend-hsp-native').allowed())
-cdata.set('HAVE_BLUEZ_5_BACKEND_HFP_NATIVE', get_option('bluez5-backend-hfp-native').allowed())
-cdata.set('HAVE_BLUEZ_5_BACKEND_OFONO', get_option('bluez5-backend-ofono').allowed())
-cdata.set('HAVE_BLUEZ_5_BACKEND_HSPHFPD', get_option('bluez5-backend-hsphfpd').allowed())
+          (get_option('bluez5-backend-hsp-native').enabled() or get_option('bluez5-backend-hsp-native').auto()) or
+          (get_option('bluez5-backend-hfp-native').enabled() or get_option('bluez5-backend-hfp-native').auto()))
+cdata.set('HAVE_BLUEZ_5_BACKEND_HSP_NATIVE', (get_option('bluez5-backend-hsp-native').enabled() or get_option('bluez5-backend-hsp-native').auto()))
+cdata.set('HAVE_BLUEZ_5_BACKEND_HFP_NATIVE', (get_option('bluez5-backend-hfp-native').enabled() or get_option('bluez5-backend-hfp-native').auto()))
+cdata.set('HAVE_BLUEZ_5_BACKEND_OFONO', (get_option('bluez5-backend-ofono').enabled() or get_option('bluez5-backend-ofono').auto()))
+cdata.set('HAVE_BLUEZ_5_BACKEND_HSPHFPD', (get_option('bluez5-backend-hsphfpd').enabled() or get_option('bluez5-backend-hsphfpd').auto()))
 cdata.set('HAVE_BLUEZ_5_HCI', dependency('bluez', version: '< 6', required: false).found())
 
 bluez5_sources = [
@@ -34,18 +34,18 @@ bluez5_data = ['bluez-hardware.conf']
 
 install_data(bluez5_data, install_dir : spa_datadir / 'bluez5')
 
-if get_option('bluez5-backend-hsp-native').allowed() or get_option('bluez5-backend-hfp-native').allowed()
+if (get_option('bluez5-backend-hsp-native').enabled() or get_option('bluez5-backend-hsp-native').auto()) or (get_option('bluez5-backend-hfp-native').enabled() or get_option('bluez5-backend-hfp-native').auto())
   if libusb_dep.found()
     bluez5_deps += libusb_dep
   endif
   bluez5_sources += ['backend-native.c']
 endif
 
-if get_option('bluez5-backend-ofono').allowed()
+if (get_option('bluez5-backend-ofono').enabled() or get_option('bluez5-backend-ofono').auto())
   bluez5_sources += ['backend-ofono.c']
 endif
 
-if get_option('bluez5-backend-hsphfpd').allowed()
+if (get_option('bluez5-backend-hsphfpd').enabled() or get_option('bluez5-backend-hsphfpd').auto())
   bluez5_sources += ['backend-hsphfpd.c']
 endif
 
@@ -110,7 +110,7 @@ if ldac_dep.found()
     install_dir : spa_plugindir / 'bluez5')
 endif
 
-if get_option('bluez5-codec-lc3plus').allowed() and lc3plus_dep.found()
+if (get_option('bluez5-codec-lc3plus').enabled() or get_option('bluez5-codec-lc3plus').auto()) and lc3plus_dep.found()
   bluez_codec_lc3plus = shared_library('spa-codec-bluez5-lc3plus',
     [ 'a2dp-codec-lc3plus.c', 'a2dp-codecs.c' ],
     include_directories : [ configinc ],
@@ -120,7 +120,7 @@ if get_option('bluez5-codec-lc3plus').al
     install_dir : spa_plugindir / 'bluez5')
 endif
 
-if get_option('bluez5-codec-opus').allowed() and opus_dep.found()
+if (get_option('bluez5-codec-opus').enabled() or get_option('bluez5-codec-opus').auto()) and opus_dep.found()
   opus_args = codec_args
   opus_dep = [ opus_dep ]
   bluez_codec_opus = shared_library('spa-codec-bluez5-opus',
Index: pipewire-0.3.57/spa/plugins/meson.build
===================================================================
--- pipewire-0.3.57.orig/spa/plugins/meson.build
+++ pipewire-0.3.57/spa/plugins/meson.build
@@ -1,19 +1,22 @@
 if alsa_dep.found()
   subdir('alsa')
 endif
-if get_option('avb').require(host_machine.system() == 'linux', error_message: 'AVB support is only available on Linux').allowed()
+if (get_option('avb').enabled() or get_option('avb').auto())
+  if (host_machine.system() != 'linux')
+    error('AVB support is only available on Linux')
+  endif
   subdir('avb')
 endif
-if get_option('audioconvert').allowed()
+if (get_option('audioconvert').enabled() or get_option('audioconvert').auto())
   subdir('audioconvert')
 endif
-if get_option('audiomixer').allowed()
+if (get_option('audiomixer').enabled() or get_option('audiomixer').auto())
   subdir('audiomixer')
 endif
-if get_option('control').allowed()
+if (get_option('control').enabled() or get_option('control').auto())
   subdir('control')
 endif
-if get_option('audiotestsrc').allowed()
+if (get_option('audiotestsrc').enabled() or get_option('audiotestsrc').auto())
   subdir('audiotestsrc')
 endif
 if bluez_dep.found()
@@ -25,19 +28,19 @@ endif
 if jack_dep.found()
   subdir('jack')
 endif
-if get_option('support').allowed()
+if (get_option('support').enabled() or get_option('support').auto())
   subdir('support')
 endif
-if get_option('test').allowed()
+if (get_option('test').enabled() or get_option('test').auto())
   subdir('test')
 endif
-if get_option('videoconvert').allowed()
+if (get_option('videoconvert').enabled() or get_option('videoconvert').auto())
   subdir('videoconvert')
 endif
-if get_option('videotestsrc').allowed()
+if (get_option('videotestsrc').enabled() or get_option('videotestsrc').auto())
   subdir('videotestsrc')
 endif
-if get_option('volume').allowed()
+if (get_option('volume').enabled() or get_option('volume').auto())
   subdir('volume')
 endif
 if vulkan_headers
Index: pipewire-0.3.57/spa/plugins/support/meson.build
===================================================================
--- pipewire-0.3.57.orig/spa/plugins/support/meson.build
+++ pipewire-0.3.57/spa/plugins/support/meson.build
@@ -23,7 +23,7 @@ spa_support_lib = shared_library('spa-su
   install_dir : spa_plugindir / 'support')
 spa_support_dep = declare_dependency(link_with: spa_support_lib)
 
-if get_option('evl').allowed()
+if (get_option('evl').enabled() or get_option('evl').auto())
   evl_inc = include_directories('/usr/evl/include')
   evl_lib = cc.find_library('evl',
                             dirs: ['/usr/evl/lib/'],
Index: pipewire-0.3.57/spa/tests/meson.build
===================================================================
--- pipewire-0.3.57.orig/spa/tests/meson.build
+++ pipewire-0.3.57/spa/tests/meson.build
@@ -5,7 +5,7 @@ find = find_program('find', required: fa
 summary({'find (for header testing)': find.found()}, bool_yn: true, section: 'Optional programs')
 if find.found()
   spa_headers = run_command(find,
-                            meson.project_source_root() / 'spa' / 'include',
+                            meson.source_root() / 'spa' / 'include',
                             '-name', '*.h',
                             '-not', '-name', 'type-info.h',
                             '-type', 'f',
@@ -41,7 +41,7 @@ foreach a : benchmark_apps
       install_dir : installed_tests_execdir,
     ),
     env : [
-      'SPA_PLUGIN_DIR=@0@'.format(spa_dep.get_variable('plugindir')),
+      'SPA_PLUGIN_DIR=@0@'.format(spa_dep.get_variable(internal: 'plugindir')),
     ]
   )
 
Index: pipewire-0.3.57/src/daemon/meson.build
===================================================================
--- pipewire-0.3.57.orig/src/daemon/meson.build
+++ pipewire-0.3.57/src/daemon/meson.build
@@ -18,9 +18,9 @@ conf_config.set('pulse_comment', '#')
 
 conf_config_uninstalled = conf_config
 conf_config_uninstalled.set('pipewire_path',
-  meson.project_build_root() / 'src' / 'daemon' / 'pipewire')
+  meson.build_root() / 'src' / 'daemon' / 'pipewire')
 conf_config_uninstalled.set('pipewire_pulse_path',
-  meson.project_build_root() / 'src' / 'daemon' / 'pipewire-pulse')
+  meson.build_root() / 'src' / 'daemon' / 'pipewire-pulse')
 conf_config_uninstalled.set('pulse_comment', '')
 
 build_ms = 'media-session' in get_option('session-managers')
@@ -116,7 +116,7 @@ custom_target('pipewire-uninstalled',
   install: false,
   input: pipewire_exec,
   output: 'pipewire-uninstalled',
-  command: [ln, '-fs', meson.project_build_root() + '/@INPUT@', '@OUTPUT@'],
+  command: [ln, '-fs', meson.build_root() + '/@INPUT@', '@OUTPUT@'],
 )
 
 #desktop_file = i18n.merge_file(
Index: pipewire-0.3.57/src/daemon/systemd/meson.build
===================================================================
--- pipewire-0.3.57.orig/src/daemon/systemd/meson.build
+++ pipewire-0.3.57/src/daemon/systemd/meson.build
@@ -1,6 +1,6 @@
-if get_option('systemd-system-service').allowed()
+if (get_option('systemd-system-service').enabled() or get_option('systemd-system-service').auto())
   subdir('system')
 endif
-if get_option('systemd-user-service').allowed()
+if (get_option('systemd-user-service').enabled() or get_option('systemd-user-service').auto())
   subdir('user')
 endif
Index: pipewire-0.3.57/src/daemon/systemd/user/meson.build
===================================================================
--- pipewire-0.3.57.orig/src/daemon/systemd/user/meson.build
+++ pipewire-0.3.57/src/daemon/systemd/user/meson.build
@@ -1,4 +1,4 @@
-systemd_user_services_dir = systemd.get_variable('systemduserunitdir', pkgconfig_define : [ 'prefix', prefix])
+#systemd_user_services_dir = systemd.get_variable('systemduserunitdir', pkgconfig_define : [ 'prefix', prefix])
 if get_option('systemd-user-unit-dir') != ''
   systemd_user_services_dir = get_option('systemd-user-unit-dir')
 endif
Index: pipewire-0.3.57/src/gst/meson.build
===================================================================
--- pipewire-0.3.57.orig/src/gst/meson.build
+++ pipewire-0.3.57/src/gst/meson.build
@@ -8,7 +8,7 @@ pipewire_gst_sources = [
   'gstpipewiresrc.c',
 ]
 
-if get_option('gstreamer-device-provider').allowed()
+if (get_option('gstreamer-device-provider').enabled() or get_option('gstreamer-device-provider').auto())
   pipewire_gst_sources += [ 'gstpipewiredeviceprovider.c' ]
 endif
 
Index: pipewire-0.3.57/src/meson.build
===================================================================
--- pipewire-0.3.57.orig/src/meson.build
+++ pipewire-0.3.57/src/meson.build
@@ -3,10 +3,10 @@ subdir('pipewire')
 subdir('daemon')
 subdir('tools')
 subdir('modules')
-if get_option('examples').allowed()
+if (get_option('examples').enabled() or get_option('examples').auto())
   subdir('examples')
 endif
-if get_option('tests').allowed()
+if (get_option('tests').enabled() or get_option('tests').auto())
   subdir('tests')
 endif
 
Index: pipewire-0.3.57/src/modules/meson.build
===================================================================
--- pipewire-0.3.57.orig/src/modules/meson.build
+++ pipewire-0.3.57/src/modules/meson.build
@@ -386,9 +386,9 @@ test('pw-test-protocol-native',
     install_dir : installed_tests_execdir,
   ),
   env : [
-    'SPA_PLUGIN_DIR=@0@'.format(spa_dep.get_variable('plugindir')),
-    'PIPEWIRE_CONFIG_DIR=@0@'.format(pipewire_dep.get_variable('confdatadir')),
-    'PIPEWIRE_MODULE_DIR=@0@'.format(pipewire_dep.get_variable('moduledir')),
+    'SPA_PLUGIN_DIR=@0@'.format(spa_dep.get_variable(internal: 'plugindir')),
+    'PIPEWIRE_CONFIG_DIR=@0@'.format(pipewire_dep.get_variable(internal: 'confdatadir')),
+    'PIPEWIRE_MODULE_DIR=@0@'.format(pipewire_dep.get_variable(internal: 'moduledir')),
   ]
 )
 
@@ -527,8 +527,11 @@ pipewire_module_fallback_sink = shared_l
   dependencies : [mathlib, dl_lib, rt_lib, pipewire_dep],
 )
 
-build_module_avb = get_option('avb').require(host_machine.system() == 'linux', error_message: 'AVB support is only available on Linux').allowed()
+build_module_avb = (get_option('avb').enabled() or get_option('avb').auto())
 if build_module_avb
+if (host_machine.system() != 'linux')
+  error('AVB support is only available on Linux')
+endif
 pipewire_module_avb = shared_library('pipewire-module-avb',
   [ 'module-avb.c',
     'module-avb/avb.c',
Index: pipewire-0.3.57/src/tests/meson.build
===================================================================
--- pipewire-0.3.57.orig/src/tests/meson.build
+++ pipewire-0.3.57/src/tests/meson.build
@@ -14,9 +14,9 @@ foreach a : test_apps
       install : installed_tests_enabled,
       install_dir : installed_tests_execdir),
     env : [
-      'SPA_PLUGIN_DIR=@0@'.format(spa_dep.get_variable('plugindir')),
-      'PIPEWIRE_CONFIG_DIR=@0@'.format(pipewire_dep.get_variable('confdatadir')),
-      'PIPEWIRE_MODULE_DIR=@0@'.format(pipewire_dep.get_variable('moduledir')),
+      'SPA_PLUGIN_DIR=@0@'.format(spa_dep.get_variable(internal: 'plugindir')),
+      'PIPEWIRE_CONFIG_DIR=@0@'.format(pipewire_dep.get_variable(internal: 'confdatadir')),
+      'PIPEWIRE_MODULE_DIR=@0@'.format(pipewire_dep.get_variable(internal: 'moduledir')),
       ])
 
   if installed_tests_enabled
Index: pipewire-0.3.57/src/tools/meson.build
===================================================================
--- pipewire-0.3.57.orig/src/tools/meson.build
+++ pipewire-0.3.57/src/tools/meson.build
@@ -32,7 +32,7 @@ if ncurses_dep.found()
 endif
 
 build_pw_cat = false
-if get_option('pw-cat').allowed() and sndfile_dep.found()
+if (get_option('pw-cat').enabled() or get_option('pw-cat').auto()) and sndfile_dep.found()
   build_pw_cat = true
 
   pwcat_sources = [
Index: pipewire-0.3.57/test/meson.build
===================================================================
--- pipewire-0.3.57.orig/test/meson.build
+++ pipewire-0.3.57/test/meson.build
@@ -14,8 +14,8 @@ pwtest_deps = [
 ]
 
 pwtest_c_args = [
-  '-DBUILD_ROOT="@0@"'.format(meson.project_build_root()),
-  '-DSOURCE_ROOT="@0@"'.format(meson.project_source_root()),
+  '-DBUILD_ROOT="@0@"'.format(meson.build_root()),
+  '-DSOURCE_ROOT="@0@"'.format(meson.source_root()),
 ]
 
 pwtest_inc = [
