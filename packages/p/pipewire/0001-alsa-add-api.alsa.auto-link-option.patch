From 896fea62c2072c836e6d821f7bdafe840ce8540e Mon Sep 17 00:00:00 2001
From: Wim Taymans <wtaymans@redhat.com>
Date: Mon, 9 Oct 2023 10:10:46 +0200
Subject: [PATCH] alsa: add api.alsa.auto-link option

Add an option to automatically use snd_pcm_link when the follower clock
is matching the driver. Only set this to true in pro-audio and when
nodes are scheduled together.

See #3556
---
 spa/plugins/alsa/acp/acp.c  | 2 ++
 spa/plugins/alsa/alsa-pcm.c | 4 +++-
 spa/plugins/alsa/alsa-pcm.h | 1 +
 3 files changed, 6 insertions(+), 1 deletion(-)

diff --git a/spa/plugins/alsa/acp/acp.c b/spa/plugins/alsa/acp/acp.c
index 67b1e4654..127379fc4 100644
--- a/spa/plugins/alsa/acp/acp.c
+++ b/spa/plugins/alsa/acp/acp.c
@@ -390,6 +390,7 @@ static int add_pro_profile(pa_card *impl, uint32_t index)
 				pa_proplist_setf(m->output_proplist, "device.profile.pro", "true");
 				pa_proplist_setf(m->output_proplist, "node.group", "pro-audio-%u", index);
 				pa_proplist_setf(m->output_proplist, "node.link-group", "pro-audio-%u", index);
+				pa_proplist_set(m->input_proplist, "api.alsa.auto-link", "true");
 				pa_alsa_close(&m->output_pcm);
 				m->supported = true;
 				pa_channel_map_init_auto(&m->channel_map, m->sample_spec.channels, PA_CHANNEL_MAP_AUX);
@@ -423,6 +424,7 @@ static int add_pro_profile(pa_card *impl, uint32_t index)
 				pa_proplist_setf(m->input_proplist, "device.profile.pro", "true");
 				pa_proplist_setf(m->input_proplist, "node.group", "pro-audio-%u", index);
 				pa_proplist_setf(m->input_proplist, "node.link-group", "pro-audio-%u", index);
+				pa_proplist_set(m->input_proplist, "api.alsa.auto-link", "true");
 				pa_alsa_close(&m->input_pcm);
 				m->supported = true;
 				pa_channel_map_init_auto(&m->channel_map, m->sample_spec.channels, PA_CHANNEL_MAP_AUX);
diff --git a/spa/plugins/alsa/alsa-pcm.c b/spa/plugins/alsa/alsa-pcm.c
index ef148d76b..87dba34b0 100644
--- a/spa/plugins/alsa/alsa-pcm.c
+++ b/spa/plugins/alsa/alsa-pcm.c
@@ -131,6 +131,8 @@ static int alsa_set_param(struct state *state, const char *k, const char *s)
 		state->multi_rate = spa_atob(s);
 	} else if (spa_streq(k, "api.alsa.htimestamp")) {
 		state->htimestamp = spa_atob(s);
+	} else if (spa_streq(k, "api.alsa.auto-link")) {
+		state->auto_link = spa_atob(s);
 	} else if (spa_streq(k, "latency.internal.rate")) {
 		state->process_latency.rate = atoi(s);
 	} else if (spa_streq(k, "latency.internal.ns")) {
@@ -3034,7 +3036,7 @@ int spa_alsa_prepare(struct state *state)
 	spa_list_for_each(follower, &state->followers, driver_link) {
 		if (follower != state && !follower->matching) {
 			spa_alsa_prepare(follower);
-			if (!follower->linked)
+			if (!follower->linked && state->auto_link)
 				do_link(state, follower);
 		}
 	}
diff --git a/spa/plugins/alsa/alsa-pcm.h b/spa/plugins/alsa/alsa-pcm.h
index c770eeabb..ae4574526 100644
--- a/spa/plugins/alsa/alsa-pcm.h
+++ b/spa/plugins/alsa/alsa-pcm.h
@@ -214,6 +214,7 @@ struct state {
 	unsigned int htimestamp:1;
 	unsigned int is_pro:1;
 	unsigned int sources_added:1;
+	unsigned int auto_link:1;
 	unsigned int linked:1;
 
 	uint64_t iec958_codecs;
-- 
GitLab

