From f0ad2f6c0c7ce15336f6a3adc3708f4a5a9757c6 Mon Sep 17 00:00:00 2001
From: Steve Kowalik <steven@wedontsleep.org>
Date: Tue, 9 Jan 2024 14:27:30 +1100
Subject: [PATCH] Fix deprecated assertions

Python 3.1 and Python 3.2 deprecated a large amount of assertions, and
have finally been removed in Python 3.12. Move to the "new" function
names.

Fixes #80
---
 ometa/test/test_builder.py  |  2 +-
 ometa/test/test_protocol.py | 12 ++++++------
 ometa/test/test_pymeta.py   |  4 ++--
 ometa/test/test_runtime.py  |  4 ++--
 4 files changed, 11 insertions(+), 11 deletions(-)

diff --git a/ometa/test/test_builder.py b/ometa/test/test_builder.py
index b02656e..5cfbe72 100644
--- a/ometa/test/test_builder.py
+++ b/ometa/test/test_builder.py
@@ -325,7 +325,7 @@ def test_markAsTree(self):
         x = t.Rule("foo", t.List(
                 t.Exactly("x")))
         g = t.Grammar("TestGrammar", True, [x])
-        self.assert_("\n        tree = True\n" in writePython(g, ""))
+        self.assertIn("\n        tree = True\n", writePython(g, ""))
 
 
     def test_rule(self):
diff --git a/ometa/test/test_protocol.py b/ometa/test/test_protocol.py
index a052da4..67001f8 100644
--- a/ometa/test/test_protocol.py
+++ b/ometa/test/test_protocol.py
@@ -90,7 +90,7 @@ def test_parserPassed(self):
     def test_connectionEstablishes(self):
         """prepareParsing is called on the receiver after connection establishment."""
         self.protocol.makeConnection(None)
-        self.assert_(self.protocol.receiver.connected)
+        self.assertTrue(self.protocol.receiver.connected)
 
     def test_basicParsing(self):
         """Rules can be parsed multiple times for the same effect."""
@@ -161,10 +161,10 @@ def test_parseFailure(self):
         transport = FakeTransport()
         self.protocol.makeConnection(transport)
         self.protocol.dataReceived('b')
-        self.failIfEqual(self.protocol.receiver.lossReason, None)
+        self.assertIsNotNone(self.protocol.receiver.lossReason)
         self.assertTrue(
             isinstance(self.protocol.receiver.lossReason.value, ParseError))
-        self.assert_(transport.aborted)
+        self.assertTrue(transport.aborted)
 
     def test_exceptionsRaisedFromReceiver(self):
         """
@@ -174,10 +174,10 @@ def test_exceptionsRaisedFromReceiver(self):
         transport = FakeTransport()
         self.protocol.makeConnection(transport)
         self.protocol.dataReceived('e')
-        self.failIfEqual(self.protocol.receiver.lossReason, None)
+        self.assertIsNotNone(self.protocol.receiver.lossReason)
         self.assertTrue(
             isinstance(self.protocol.receiver.lossReason.value, SomeException))
-        self.assert_(transport.aborted)
+        self.assertTrue(transport.aborted)
 
     def test_dataIgnoredAfterDisconnection(self):
         """After connectionLost is called, all incoming data is ignored."""
@@ -187,4 +187,4 @@ def test_dataIgnoredAfterDisconnection(self):
         self.protocol.connectionLost(reason)
         self.protocol.dataReceived('d')
         self.assertEqual(self.protocol.receiver.lossReason, reason)
-        self.assert_(not transport.aborted)
+        self.assertFalse(transport.aborted)
diff --git a/ometa/test/test_pymeta.py b/ometa/test/test_pymeta.py
index ed7e57f..e8a6b91 100644
--- a/ometa/test/test_pymeta.py
+++ b/ometa/test/test_pymeta.py
@@ -1138,8 +1138,8 @@ def test_brokenGrammar(self):
         """
         e = self.assertRaises(ParseError, OMeta.makeGrammar, grammar,
                               "Foo")
-        self.assertEquals(e.position, 57)
-        self.assertEquals(e.error, [("message", "end of input")])
+        self.assertEqual(e.position, 57)
+        self.assertEqual(e.error, [("message", "end of input")])
 
 
     def test_subclassing(self):
diff --git a/ometa/test/test_runtime.py b/ometa/test/test_runtime.py
index 957f3bc..ecbbacb 100644
--- a/ometa/test/test_runtime.py
+++ b/ometa/test/test_runtime.py
@@ -54,8 +54,8 @@ def test_exactlyFail(self):
         data = "foo"
         o = OMetaBase(data)
         exc = self.assertRaises(ParseError, o.rule_exactly, "g")
-        self.assertEquals(exc.args[1], expected(None, "g"))
-        self.assertEquals(exc.args[0], 0)
+        self.assertEqual(exc.args[1], expected(None, "g"))
+        self.assertEqual(exc.args[0], 0)
 
 
 
