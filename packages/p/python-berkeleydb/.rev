<revisionlist>
  <revision rev="1" vrev="1">
    <srcmd5>76a0ddadde95afd28828da38e8947ec5</srcmd5>
    <version>18.1.8</version>
    <time>1707166881</time>
    <user>anag+factory</user>
    <comment>Initial release of 18.1.8</comment>
    <requestid>1144076</requestid>
  </revision>
  <revision rev="2" vrev="1">
    <srcmd5>a3298c8cd5ba633f9202c332a9889eb5</srcmd5>
    <version>18.1.10</version>
    <time>1728504779</time>
    <user>anag+factory</user>
    <comment>- update to 18.1.10:
  * Since MS Windows is unsupported without community help, I
    deleted some legacy code. It could be restored if there is
    demand and some help to improve MS Windows support.
  * New URL for :Oracle:`Oracle documentation &lt;index.html&gt;`.
  * Now we also use Python Stable ABI under Python 3.8 and 3.9.
    Under Python 3.10 and up we can define types that users can
    not instantiate as Py_TPFLAGS_DISALLOW_INSTANTIATION, but
    that flag is not available under previous Python versions. In
    Python 3.8 and 3.9 we used to do type-&gt;tp_new = NULL; for
    that, but this approach is not available under Python Stable
    ABI. That is the reason this module could use Python Stable
    ABI only when compiled under Python 3.10 and superior. In
    this release we define the slot Py_tp_new as NULL in Python
    3.8 and 3.9 to achieve the same effect, and that is available
    under Python Stable ABI.
  * Since this module can now use Python Stable ABI under all
    supported Python releases, that is exactly what we do. From
    now on this module always uses Python Stable ABI.
  * WARNING - BREAKING CHANGE: Change return value of
    berkeleydb.py_limited_api(). This function was introduced in
    18.1.9 and it is used to indicate if the module was using the
    Python Stable ABI or not, and the version Python Stable ABI
    used. Now that the module has been improved to use Python
    Stable ABI always, the function returns a tuple of integers.
    First tuple element tells us what Python Stable ABI version
    are we supporting. Second element tells us what Python
    release was this module compiled under, although it should
    work in any more recent Python release. Since this function
    was introduced in release 18.1.9, we consider this breaking</comment>
    <requestid>1206439</requestid>
  </revision>
  <revision rev="3" vrev="1">
    <srcmd5>fc44e5ef4bba71ed58a6353c25a6ef07</srcmd5>
    <version>18.1.11</version>
    <time>1732051434</time>
    <user>anag+factory</user>
    <comment>- update to 18.1.11:
  * WARNING - BREAKING CHANGE: Drop support for Python 3.8. This
    breaking change should usually require a major and/or minor
    number update. Since berkeleydb traditional numbering is
    related to the higher Oracle Berkeley DB supported, I would
    usually wait until Oracle releases a new version to upgrade
    my own version and deprecate old Python support at the same
    time. Given that Oracle has not released a new Oracle
    Berkeley DB in almost five years, I must break this practice
    for now. I am sorry if this update breaks your Python 3.8
    environment. In that case, please pin your berkeleydb
    installation to</comment>
    <requestid>1225105</requestid>
  </revision>
  <revision rev="4" vrev="1">
    <srcmd5>04ea33c283b2823f1768494e4a4b0427</srcmd5>
    <version>18.1.13</version>
    <time>1738615533</time>
    <user>anag+factory</user>
    <comment></comment>
    <requestid>1242863</requestid>
  </revision>
  <revision rev="5" vrev="1">
    <srcmd5>87541bf1564bce40ee40c22850e7c701</srcmd5>
    <version>18.1.14</version>
    <time>1745849846</time>
    <user>dimstar_suse</user>
    <comment>- update to 18.1.14:
  *  Warning WARNING - BREAKING CHANGE: We eliminate dbobj.py. It
    was very outdated and it was only barely useful if you wanted
    to create subclasses of berkeleydb classes.
  * Allow unicode and binary keys when using encryption.
    Previously, only unicode keys were allowed. In both cases,
    null bytes will raise an exception.
  * Correctly display (in the raised exception) the type of the
    parameter when it is not accepted, beside the required type.
    This solves a regression introduced in 18.1.9.
  * Delete stale and outdated entries in the TO DO file.
  * Solve some redefinitions in the dictionary returned by
    DBEnv.lock_stat() and add more entries:  Berkeley DB &gt;= 4.8:
    locksteals, maxhlocks, maxhobjects, maxlsteals, maxosteals,
    objectsteals, part_max_nowait, part_max_wait, part_nowait,
    part_wait, partitions. Berkeley DB &gt;= 5.3: initlocks,
    initlockers, initobjects, lockers, locks, objects, tablesize.
    Berkeley DB &gt;= 6.2: nlockers_hit, nlockers_reused.
  * Berkeley DB &gt;= 4.8: locksteals, maxhlocks, maxhobjects,
    maxlsteals, maxosteals, objectsteals, part_max_nowait,
    part_max_wait, part_nowait, part_wait, partitions.
  * Berkeley DB &gt;= 5.3: initlocks, initlockers, initobjects,
    lockers, locks, objects, tablesize.
  * Berkeley DB &gt;= 6.2: nlockers_hit, nlockers_reused.
  * Add more entries to DBEnv.log_stat() if we are using Berkeley
    DB &gt;= 5.3: fileid_init, maxnfileid, nfileid.
  * nelem value in DB.stat() for hash databases was dropped some
    time ago. Update stale documentation. That value is actually
    available via DB.get_h_nelem().
  * Improve docs explaining the end value in the dictionary</comment>
    <requestid>1273057</requestid>
  </revision>
</revisionlist>
