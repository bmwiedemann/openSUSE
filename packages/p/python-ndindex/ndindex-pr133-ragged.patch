From 66f2d3c9526d1ac87b91a4265e4d31da0d8a70bc Mon Sep 17 00:00:00 2001
From: Aaron Meurer <asmeurer@gmail.com>
Date: Thu, 27 Oct 2022 16:56:45 -0600
Subject: [PATCH 1/3] Fix the test for handling of invalid ragged arrays

---
 ndindex/array.py              | 7 +++++--
 ndindex/tests/test_ndindex.py | 7 +++++--
 2 files changed, 10 insertions(+), 4 deletions(-)

diff --git a/ndindex/array.py b/ndindex/array.py
index 618e5ff4..2e2d3b91 100644
--- a/ndindex/array.py
+++ b/ndindex/array.py
@@ -19,7 +19,7 @@ class ArrayIndex(NDIndex):
 
     def _typecheck(self, idx, shape=None, _copy=True):
         try:
-            from numpy import ndarray, asarray, integer, bool_, empty, intp
+            from numpy import ndarray, asarray, integer, bool_, empty, intp, VisibleDeprecationWarning
         except ImportError: # pragma: no cover
             raise ImportError("NumPy must be installed to create array indices")
 
@@ -37,7 +37,10 @@ def _typecheck(self, idx, shape=None, _copy=True):
         if isinstance(idx, (list, ndarray, bool, integer, int, bool_)):
             # Ignore deprecation warnings for things like [1, []]. These will be
             # filtered out anyway since they produce object arrays.
-            with warnings.catch_warnings(record=True):
+            with warnings.catch_warnings():
+                warnings.filterwarnings('ignore',
+                                        category=VisibleDeprecationWarning,
+                                        message='Creating an ndarray from ragged nested sequences')
                 a = asarray(idx)
                 if a is idx and _copy:
                     a = a.copy()
diff --git a/ndindex/tests/test_ndindex.py b/ndindex/tests/test_ndindex.py
index 0f90b8e1..ce42eeb3 100644
--- a/ndindex/tests/test_ndindex.py
+++ b/ndindex/tests/test_ndindex.py
@@ -1,11 +1,12 @@
 import inspect
+import warnings
 
 import numpy as np
 
 from hypothesis import given, example, settings
 from hypothesis.strategies import integers
 
-from pytest import raises, warns
+from pytest import raises
 
 from ..ndindex import ndindex, asshape, iter_indices, ncycles, BroadcastError, AxisError
 from ..booleanarray import BooleanArray
@@ -103,7 +104,9 @@ def test_ndindex_invalid():
 
     # This index is allowed by NumPy, but gives a deprecation warnings. We are
     # not going to allow indices that give deprecation warnings in ndindex.
-    with warns(None) as r: # Make sure no warnings are emitted from ndindex()
+    with warnings.catch_warnings(record=True) as r:
+        # Make sure no warnings are emitted from ndindex()
+        warnings.simplefilter("error")
         raises(IndexError, lambda: ndindex([1, []]))
     assert not r
 

From 07157430c164c88b32646e35061a9b54b8ac23de Mon Sep 17 00:00:00 2001
From: Aaron Meurer <asmeurer@gmail.com>
Date: Thu, 27 Oct 2022 17:25:29 -0600
Subject: [PATCH 2/3] Add an @example for coverage

---
 ndindex/tests/test_ndindex.py | 1 +
 1 file changed, 1 insertion(+)

diff --git a/ndindex/tests/test_ndindex.py b/ndindex/tests/test_ndindex.py
index ce42eeb3..a58b0260 100644
--- a/ndindex/tests/test_ndindex.py
+++ b/ndindex/tests/test_ndindex.py
@@ -17,6 +17,7 @@
 from .helpers import (ndindices, check_same, assert_equal, prod,
                       mutually_broadcastable_shapes, skip_axes)
 
+@example([1, 2])
 @given(ndindices)
 def test_eq(idx):
     index = ndindex(idx)

From 1bcd427382c61311c597a3e6a32c931cdeb54ad1 Mon Sep 17 00:00:00 2001
From: Aaron Meurer <asmeurer@gmail.com>
Date: Thu, 27 Oct 2022 17:25:35 -0600
Subject: [PATCH 3/3] Ignore coverage for some test code that only triggers in
 NumPy < 1.23

---
 ndindex/tests/helpers.py | 5 ++++-
 1 file changed, 4 insertions(+), 1 deletion(-)

diff --git a/ndindex/tests/helpers.py b/ndindex/tests/helpers.py
index a14ddd19..d8d452fd 100644
--- a/ndindex/tests/helpers.py
+++ b/ndindex/tests/helpers.py
@@ -215,7 +215,10 @@ def assert_equal(x, y):
             try:
                 a_raw = raw_func(a, idx)
             except Warning as w:
-                if ("Using a non-tuple sequence for multidimensional indexing is deprecated" in w.args[0]):
+                # In NumPy < 1.23, this is a FutureWarning. In 1.23 the
+                # deprecation was removed and lists are always interpreted as
+                # array indices.
+                if ("Using a non-tuple sequence for multidimensional indexing is deprecated" in w.args[0]): # pragma: no cover
                     idx = array(idx)
                     a_raw = raw_func(a, idx)
                 elif "Out of bound index found. This was previously ignored when the indexing result contained no elements. In the future the index error will be raised. This error occurs either due to an empty slice, or if an array has zero elements even before indexing." in w.args[0]:
