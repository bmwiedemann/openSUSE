---
 pytest.ini                               |    5 ++++-
 tests/_device_tests/_attributes_tests.py |    1 +
 tests/_device_tests/_device_tests.py     |    1 +
 tests/_device_tests/_devices_tests.py    |    3 +++
 tests/test_enumerate.py                  |    2 +-
 tests/test_util.py                       |    2 ++
 6 files changed, 12 insertions(+), 2 deletions(-)

--- a/pytest.ini
+++ b/pytest.ini
@@ -1,3 +1,6 @@
-[tool:pytest]
+[pytest]
 # do not search for tests in build directory
 norecursedirs = .* _* build
+markers =
+    conversion
+    real_udev
--- a/tests/_device_tests/_attributes_tests.py
+++ b/tests/_device_tests/_attributes_tests.py
@@ -122,6 +122,7 @@ class TestAttributes(object):
                 with pytest.raises(ValueError):
                     device.attributes.asbool(key)
 
+    @pytest.mark.real_udev
     @_UDEV_TEST(167, "test_available_attributes")
     @given(strategies.sampled_from(_DEVICES))
     @settings(max_examples=5)
--- a/tests/_device_tests/_device_tests.py
+++ b/tests/_device_tests/_device_tests.py
@@ -215,6 +215,7 @@ class TestDevice(object):
         if device.device_node:
             assert is_unicode_string(device.device_node)
 
+    @pytest.mark.real_udev
     @given(_CONTEXT_STRATEGY, strategies.sampled_from(_DEVICE_DATA))
     @settings(max_examples=5)
     def test_device_number(self, a_context, device_datum):
--- a/tests/_device_tests/_devices_tests.py
+++ b/tests/_device_tests/_devices_tests.py
@@ -128,6 +128,7 @@ class TestDevices(object):
         assert error.subsystem == "no_such_subsystem"
         assert error.sys_name == "foobar"
 
+    @pytest.mark.real_udev
     @failed_health_check_wrapper
     @given(
         _CONTEXT_STRATEGY,
@@ -143,6 +144,7 @@ class TestDevices(object):
         device = Devices.from_device_number(a_context, typ, a_device.device_number)
         assert a_device == device
 
+    @pytest.mark.real_udev
     @failed_health_check_wrapper
     @given(
         _CONTEXT_STRATEGY,
@@ -178,6 +180,7 @@ class TestDevices(object):
         with pytest.raises(DeviceNotFoundByNumberError):
             Devices.from_device_number(_CONTEXT, "foobar", 100)
 
+    @pytest.mark.real_udev
     @failed_health_check_wrapper
     @given(
         _CONTEXT_STRATEGY,
--- a/tests/test_enumerate.py
+++ b/tests/test_enumerate.py
@@ -104,7 +104,7 @@ class TestEnumerator(object):
 
     @failed_health_check_wrapper
     @given(_CONTEXT_STRATEGY, _SUBSYSTEM_STRATEGY)
-    @settings(max_examples=1)
+    @settings(max_examples=1, deadline=None)
     def test_match_subsystem_nomatch(self, context, subsystem):
         """
         Subsystem no match gets no subsystem with subsystem.
--- a/tests/test_util.py
+++ b/tests/test_util.py
@@ -132,6 +132,7 @@ def raise_valueerror():
 _CHAR_DEVICES = list(_CONTEXT.list_devices(subsystem="tty"))
 
 
+@pytest.mark.real_udev
 @pytest.mark.skipif(len(_CHAR_DEVICES) == 0, reason="no tty devices")
 @given(strategies.sampled_from(_CHAR_DEVICES))
 @settings(max_examples=5)
@@ -145,6 +146,7 @@ def test_get_device_type_character_devic
 _BLOCK_DEVICES = list(_CONTEXT.list_devices(subsystem="block"))
 
 
+@pytest.mark.real_udev
 @pytest.mark.skipif(len(_BLOCK_DEVICES) == 0, reason="no block devices")
 @given(strategies.sampled_from(_BLOCK_DEVICES))
 @settings(max_examples=5)
