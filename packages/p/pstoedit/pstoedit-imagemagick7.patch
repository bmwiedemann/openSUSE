Index: pstoedit-3.70/configure.ac
===================================================================
--- pstoedit-3.70.orig/configure.ac	2014-12-28 21:39:18.000000000 +0100
+++ pstoedit-3.70/configure.ac	2017-09-20 11:15:45.248170328 +0200
@@ -299,7 +299,7 @@ if test "x${PSTOEDIT_GCC_OK}" = xno ; th
 else
       if test -n "$PKG_CONFIG"; then
         AC_MSG_CHECKING(ImageMagick flags through pkg-config)
-	PKG_CHECK_MODULES(LIBMAGICK, ImageMagick++, 
+	PKG_CHECK_MODULES(LIBMAGICK, Magick++, 
 		HAVE_LIBMAGICK=yes 
 		LIBMAGICK_CFLAGS="-DHAVE_MAGIC $LIBMAGICK_CFLAGS" 
 		LIBMAGICK_LDFLAGS="$LIBMAGICK_LIBS" , 
Index: pstoedit-3.70/src/drvmagick++.cpp
===================================================================
--- pstoedit-3.70.orig/src/drvmagick++.cpp	2015-01-01 18:05:33.000000000 +0100
+++ pstoedit-3.70/src/drvmagick++.cpp	2017-09-20 11:20:15.660949630 +0200
@@ -60,16 +60,16 @@ constructBase, imgcount(0), imageptr(NIL
 //test xxx.push_back("asdsda");
 
 	try {
-		InitializeMagick(0);
-		imageptr = new Image(Geometry(600, 800), Color("white"));
+		Magick::InitializeMagick(0);
+		imageptr = new Magick::Image(Magick::Geometry(600, 800), Magick::Color("white"));
  
 		if (withdummycontext)
-			imageptr->draw(DrawablePushGraphicContext());
+			imageptr->draw(Magick::DrawablePushGraphicContext());
 #ifdef onedrawlist
-		drawList.push_back(DrawablePushGraphicContext());
-		drawList.push_back(DrawableViewbox(0, 0, 640, 800));
+		drawList.push_back(Magick::DrawablePushGraphicContext());
+		drawList.push_back(Magick::DrawableViewbox(0, 0, 640, 800));
 #else
-		imageptr->draw(DrawableViewbox(0, 0, 640, 800));
+		imageptr->draw(Magick::DrawableViewbox(0, 0, 640, 800));
 #endif
 
 		// Display the result 
@@ -79,7 +79,7 @@ constructBase, imgcount(0), imageptr(NIL
 //  image.write("result.jpg");
 	}
 
-	catch (Exception & error_) {
+	catch (Magick::Exception & error_) {
 		cout << "Caught exception: " << error_.what() << endl;
 		ctorOK = false;
 		//return 1; 
@@ -90,10 +90,10 @@ drvMAGICK::~drvMAGICK()
 {
 	try {
 		if (withdummycontext)
-			imageptr->draw(DrawablePopGraphicContext());
+			imageptr->Magick::Image::draw(Magick::DrawablePopGraphicContext());
 
 #ifdef onedrawlist
-		drawList.push_back(DrawablePopGraphicContext());
+		drawList.push_back(Magick::DrawablePopGraphicContext());
 		// Draw everything using completed drawing list 
 		imageptr->draw(drawList);
 #endif
@@ -107,14 +107,14 @@ drvMAGICK::~drvMAGICK()
 		if (Verbose()) cout << "writing " << outFileName.c_str() << endl;
 		imageptr->write(outFileName.c_str());
 	}
-	catch (const Exception & error_) {
+	catch (const Magick::Exception & error_) {
 		cout << "Caught exception: " << error_.what() << endl;
 	}
 	delete imageptr;
 	imageptr = NIL;
 }
 
-void drvMAGICK::create_vpath(VPathList &vpath)
+void drvMAGICK::create_vpath(Magick::VPathList &vpath)
 {
 	for (unsigned int n = 0; n < numberOfElementsInPath(); n++) {
 		const basedrawingelement & elem = pathElement(n);
@@ -123,26 +123,26 @@ void drvMAGICK::create_vpath(VPathList &
 				const Point & p = elem.getPoint(0);
 				const Magick::Coordinate coord(p.x_ + x_offset,
 											   currentDeviceHeight - p.y_ + y_offset);
-				vpath.push_back(PathMovetoAbs(coord));
+				vpath.push_back(Magick::PathMovetoAbs(coord));
 			}
 			break;
 		case lineto:{
 				const Point & p = elem.getPoint(0);
 				const Magick::Coordinate coord(p.x_ + x_offset,
 											   currentDeviceHeight - p.y_ + y_offset);
-				vpath.push_back(PathLinetoAbs(coord));
+				vpath.push_back(Magick::PathLinetoAbs(coord));
 			}
 			break;
 		case closepath:
-			vpath.push_back(PathClosePath());
+			vpath.push_back(Magick::PathClosePath());
 			break;
 		case curveto:{
 				const Point & p0 = elem.getPoint(0);
 				const Point & p1 = elem.getPoint(1);
 				const Point & p2 = elem.getPoint(2);
 				vpath.
-					push_back(PathCurvetoAbs
-							  (PathCurvetoArgs
+					push_back(Magick::PathCurvetoAbs
+							  (Magick::PathCurvetoArgs
 							   (p0.x_ + x_offset, currentDeviceHeight - p0.y_ + y_offset,
 								p1.x_ + x_offset, currentDeviceHeight - p1.y_ + y_offset,
 								p2.x_ + x_offset, currentDeviceHeight - p2.y_ + y_offset)));
@@ -170,14 +170,14 @@ void drvMAGICK::close_page()
 void drvMAGICK::show_text(const TextInfo & textinfo)
 {
 	try {
-		DrawableList drawList;
-		drawList.push_back(DrawablePushGraphicContext());
-		drawList.push_back(DrawableFont(textinfo.currentFontName.c_str(), AnyStyle, 400, AnyStretch));
-//      drawList.push_back( DrawableText(100,100,"test") );
-		drawList.push_back(DrawablePointSize(textinfo.currentFontSize));
-		drawList.push_back(DrawableFillColor
-					  (ColorRGB(textinfo.currentR, textinfo.currentG, textinfo.currentB)));
-		drawList.push_back(DrawableStrokeColor(Color()));	// unset color
+		Magick::DrawableList drawList;
+		drawList.push_back(Magick::DrawablePushGraphicContext());
+		drawList.push_back(Magick::DrawableFont(textinfo.currentFontName.c_str(), Magick::AnyStyle, 400, Magick::AnyStretch));
+//      drawList.push_back( Magick::DrawableText(100,100,"test") );
+		drawList.push_back(Magick::DrawablePointSize(textinfo.currentFontSize));
+		drawList.push_back(Magick::DrawableFillColor
+					  (Magick::ColorRGB(textinfo.currentR, textinfo.currentG, textinfo.currentB)));
+		drawList.push_back(Magick::DrawableStrokeColor(Magick::Color()));	// unset color
 #if 1
 /*
 
@@ -200,19 +200,19 @@ are translation.
 		const double sy_ = CTM[3] / fontsize;
 		const double tx_ = CTM[4] + x_offset;
 		const double ty_ = currentDeviceHeight - CTM[5] + y_offset;
-		drawList.push_back(DrawableAffine(sx_, sy_, rx_, ry_, tx_, ty_));
+		drawList.push_back(Magick::DrawableAffine(sx_, sy_, rx_, ry_, tx_, ty_));
 #else
-//      drawList.push_back( DrawableAngle(textinfo.currentFontAngle/6.29) );
+//      drawList.push_back( Magick::DrawableAngle(textinfo.currentFontAngle/6.29) );
 		drawList.
-			push_back(DrawableTranslation
+			push_back(Magick::DrawableTranslation
 					  (textinfo.x + x_offset, currentDeviceHeight - textinfo.y + y_offset));
-		drawList.push_back(DrawableRotation(360.0 - textinfo.currentFontAngle));
+		drawList.push_back(Magick::DrawableRotation(360.0 - textinfo.currentFontAngle));
 #endif
-		drawList.push_back(DrawableText(0, 0, textinfo.thetext.c_str()));
-		drawList.push_back(DrawablePopGraphicContext());
+		drawList.push_back(Magick::DrawableText(0, 0, textinfo.thetext.c_str()));
+		drawList.push_back(Magick::DrawablePopGraphicContext());
 		imageptr->draw(drawList);
 	}
-	catch (const Exception & error_) {
+	catch (const Magick::Exception & error_) {
 		cout << "Caught exception: " << error_.what() << endl;
 	}
 } 
@@ -220,14 +220,14 @@ are translation.
 void drvMAGICK::show_path()
 {
 
-	static const Color NoColor;	// Bob says that a default color means no-fill/no-stroke
+	static const Magick::Color NoColor;	// Bob says that a default color means no-fill/no-stroke
 
 	// Construct drawing list
 #ifndef onedrawlist
-	std::list < Magick::Drawable > drawList;
+	std::vector < Magick::Drawable > drawList;
 #endif
 
-	VPathList vpath;
+	Magick::VPathList vpath;
 	create_vpath(vpath);
 
 
@@ -238,28 +238,28 @@ void drvMAGICK::show_path()
 //      outf << " (polyline): " << endl;
 //  outf << "\tcurrentShowType: ";
 #ifndef onedrawlist
-	drawList.push_back(DrawablePushGraphicContext());
+	drawList.push_back(Magick::DrawablePushGraphicContext());
 #endif
 
 	switch (currentShowType()) {
 	case drvbase::stroke:
 		//outf << "stroked";
-		drawList.push_back(DrawableStrokeColor(ColorRGB(edgeR(), edgeG(), edgeB())));
-		drawList.push_back(DrawableStrokeWidth(currentLineWidth()));	// Stroke width 
-		drawList.push_back(DrawableFillColor(NoColor));
+		drawList.push_back(Magick::DrawableStrokeColor(Magick::ColorRGB(edgeR(), edgeG(), edgeB())));
+		drawList.push_back(Magick::DrawableStrokeWidth(currentLineWidth()));	// Stroke width 
+		drawList.push_back(Magick::DrawableFillColor(NoColor));
 		// image.fillColor("");
 		break;
 	case drvbase::fill:
 		//  outf << "filled";
-		drawList.push_back(DrawableStrokeColor(NoColor));
-		drawList.push_back(DrawableFillRule(NonZeroRule));
-		drawList.push_back(DrawableFillColor(ColorRGB(fillR(), fillG(), fillB())));	// Fill color 
+		drawList.push_back(Magick::DrawableStrokeColor(NoColor));
+		drawList.push_back(Magick::DrawableFillRule(Magick::NonZeroRule));
+		drawList.push_back(Magick::DrawableFillColor(Magick::ColorRGB(fillR(), fillG(), fillB())));	// Fill color 
 		break;
 	case drvbase::eofill:
 		//  outf << "eofilled";
-		drawList.push_back(DrawableStrokeColor(NoColor));
-		drawList.push_back(DrawableFillRule(EvenOddRule));
-		drawList.push_back(DrawableFillColor(ColorRGB(fillR(), fillG(), fillB())));	// Fill color 
+		drawList.push_back(Magick::DrawableStrokeColor(NoColor));
+		drawList.push_back(Magick::DrawableFillRule(Magick::EvenOddRule));
+		drawList.push_back(Magick::DrawableFillColor(Magick::ColorRGB(fillR(), fillG(), fillB())));	// Fill color 
 		break;
 	default:
 		// cannot happen
@@ -278,29 +278,29 @@ void drvMAGICK::show_path()
 			dasharray[i] = d_numbers[i];
 		}
 		dasharray[dp.nrOfEntries] = 0;	// mark last element
-		drawList.push_back(DrawableDashArray(dasharray));	// pulls a copy, so we are the owner of dasharray
-//??    DrawableDashOffset
+		drawList.push_back(Magick::DrawableStrokeDashArray(dasharray));	// pulls a copy, so we are the owner of dasharray
+//??    Magick::DrawableDashOffset
 		delete[]dasharray;
 	}
 
 	const unsigned int join = currentLineJoin();	// 0 miter; 1 round; 2 bevel
-	const LineJoin linejoin =
-		(join == 0) ? MiterJoin : (join == 1) ? RoundJoin : (join == 2) ? BevelJoin : UndefinedJoin;
-	drawList.push_back(DrawableStrokeLineJoin(linejoin));
+	const Magick::LineJoin linejoin =
+		(join == 0) ? Magick::MiterJoin : (join == 1) ? Magick::RoundJoin : (join == 2) ? Magick::BevelJoin : Magick::UndefinedJoin;
+	drawList.push_back(Magick::DrawableStrokeLineJoin(linejoin));
 
 	// const float miter = currentMiterLimit();
 
 	const unsigned int cap = currentLineCap();	// 0 butt; 1 round; 2 square
-	const LineCap linecap =
-		(cap == 0) ? ButtCap : (cap == 1) ? RoundCap : (cap == 2) ? SquareCap : UndefinedCap;
-	drawList.push_back(DrawableStrokeLineCap(linecap));
+	const Magick::LineCap linecap =
+		(cap == 0) ? Magick::ButtCap : (cap == 1) ? Magick::RoundCap : (cap == 2) ? Magick::SquareCap : Magick::UndefinedCap;
+	drawList.push_back(Magick::DrawableStrokeLineCap(linecap));
 
-	drawList.push_back(DrawablePath(vpath));
+	drawList.push_back(Magick::DrawablePath(vpath));
 
 #ifndef onedrawlist
-	drawList.push_back(DrawablePopGraphicContext());
+	drawList.push_back(Magick::DrawablePopGraphicContext());
 	// Draw everything using completed drawing list 
-	imageptr->draw(drawList);
+	imageptr->Magick::Image::draw(drawList);
 #endif
 
 }
@@ -323,7 +323,7 @@ void drvMAGICK::show_image(const PSImage
 
 	if (imageinfo.isFileImage) {
 		try {
-			DrawableList drawList;
+			Magick::DrawableList drawList;
 
 			const double sx = imageinfo.normalizedImageCurrentMatrix[0];
 			const double rx = -imageinfo.normalizedImageCurrentMatrix[1];
@@ -347,23 +347,23 @@ void drvMAGICK::show_image(const PSImage
 
 			cout << "drawing subimage from " << filename << endl;
 
-			drawList.push_back(DrawablePushGraphicContext());
-			drawList.push_back(DrawableAffine(sx, sy, rx, ry, tx, ty));
+			drawList.push_back(Magick::DrawablePushGraphicContext());
+			drawList.push_back(Magick::DrawableAffine(sx, sy, rx, ry, tx, ty));
 
-			Image pngimage(filename);
+			Magick::Image pngimage(filename);
 			//  cout << "rows " << pngimage.rows() << " columns " << pngimage.columns() << endl;
-			//  drawList.push_back( DrawableCompositeImage(0,0,width, height, filename) );
+			//  drawList.push_back( Magick::DrawableCompositeImage(0,0,width, height, filename) );
 			if ((pngimage.rows() > 0) && (pngimage.columns() > 0)) {
-				DrawableCompositeImage theimage(x, y, width, height, pngimage);
+				Magick::DrawableCompositeImage theimage(x, y, width, height, pngimage);
 				theimage.magick("png");
 				drawList.push_back(theimage);
 			} else {
 				errf << "reading image from " << filename << " failed " << endl;
 			}
-			drawList.push_back(DrawablePopGraphicContext());
+			drawList.push_back(Magick::DrawablePopGraphicContext());
 			imageptr->draw(drawList);
 		}
-		catch (const Exception & error_) {
+		catch (const Magick::Exception & error_) {
 			errf << "Caught exception: " << error_.what() << endl;
 		}
 	} else {
Index: pstoedit-3.70/src/drvmagick++.h
===================================================================
--- pstoedit-3.70.orig/src/drvmagick++.h	2014-08-25 21:29:50.000000000 +0200
+++ pstoedit-3.70/src/drvmagick++.h	2017-09-20 11:19:38.360290336 +0200
@@ -34,7 +34,6 @@
 #endif
 #include <Magick++.h>
 using namespace std;
-using namespace Magick;
 
 class drvMAGICK : public drvbase {
 
@@ -59,10 +58,10 @@ public:
 	virtual void    show_image(const PSImage & imageinfo); 
 
 private:
-	void create_vpath(VPathList & vpath);
+	void create_vpath(Magick::VPathList & vpath);
 	int	      imgcount;
 
-	Image * imageptr; //Magick::Image meant here
+	Magick::Image * imageptr; //Magick::Image meant here
 	
 };
 
