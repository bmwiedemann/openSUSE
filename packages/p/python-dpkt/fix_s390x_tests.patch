From 4ce0b897e60a67fec4b590af058fd702563d79c5 Mon Sep 17 00:00:00 2001
From: Oscar <oscar.ibatullin@gmail.com>
Date: Sun, 27 Dec 2020 11:18:50 -0800
Subject: [PATCH] Fix #505 and other big endian arch bugfixes (#510)

* issue #505: fix inet checksum calculation
* issue #505: fix pcapng unit test
* issue #505: fix ieee80211
* issue #505: radiotap fix for big endian systems
---
 dpkt/compat.py    | 12 ++++++++++--
 dpkt/dpkt.py      | 24 +++++++++++++-----------
 dpkt/ieee80211.py | 21 +++++++++++----------
 dpkt/pcapng.py    |  8 +++++++-
 dpkt/radiotap.py  |  5 ++---
 5 files changed, 43 insertions(+), 27 deletions(-)

--- a/dpkt/compat.py
+++ b/dpkt/compat.py
@@ -1,5 +1,6 @@
 from __future__ import absolute_import
 
+from struct import pack, unpack
 import sys
 
 if sys.version_info < (3,):
@@ -19,9 +20,9 @@ try:
 except ImportError:
     from io import StringIO
 
-try: 
+try:
     from BytesIO import BytesIO
-except ImportError: 
+except ImportError:
     from io import BytesIO
 
 if sys.version_info < (3,):
@@ -37,3 +38,10 @@ else:
 
     # python3 will return an int if you round to 0 decimal places
     intround = round
+
+
+def ntole(v):
+    """convert a 2-byte word from the network byte order (big endian) to little endian;
+    replaces socket.ntohs() to work on both little and big endian architectures
+    """
+    return unpack('<H', pack('!H', v))[0]
--- a/dpkt/dpkt.py
+++ b/dpkt/dpkt.py
@@ -1,15 +1,13 @@
 # $Id: dpkt.py 43 2007-08-02 22:42:59Z jon.oberheide $
 # -*- coding: utf-8 -*-
 """Simple packet creation and parsing."""
-from __future__ import absolute_import 
+from __future__ import absolute_import
 
 import copy
-import socket
 import struct
-import array
 from functools import partial
 
-from .compat import compat_ord, compat_izip, iteritems
+from .compat import compat_ord, compat_izip, iteritems, ntole
 
 
 class Error(Exception):
@@ -48,7 +46,7 @@ class Packet(_MetaPacket("Temp", (object
     """Base packet class, with metaclass magic to generate members from self.__hdr__.
 
     Attributes:
-        __hdr__: Packet header should be defined as a list of 
+        __hdr__: Packet header should be defined as a list of
                  (name, structfmt, default) tuples.
         __byte_order__: Byte order, can be set to override the default ('>')
 
@@ -146,7 +144,7 @@ class Packet(_MetaPacket("Temp", (object
 
     def __str__(self):
         return str(self.__bytes__())
-    
+
     def __bytes__(self):
         return self.pack_hdr() + bytes(self.data)
 
@@ -200,16 +198,17 @@ def hexdump(buf, length=16):
 def in_cksum_add(s, buf):
     n = len(buf)
     cnt = (n // 2) * 2
-    a = array.array('H', buf[:cnt])
+    a = struct.unpack('<{}H'.format(n // 2), buf[:cnt])  # unpack as little endian words
+    res = s + sum(a)
     if cnt != n:
-        a.append(compat_ord(buf[-1]))
-    return s + sum(a)
+        res += compat_ord(buf[-1])
+    return res
 
 
 def in_cksum_done(s):
     s = (s >> 16) + (s & 0xffff)
     s += (s >> 16)
-    return socket.ntohs(~s & 0xffff)
+    return ntole(~s & 0xffff)
 
 
 def in_cksum(buf):
@@ -222,5 +221,6 @@ def test_utils():
     __hd = '  0000:  00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e     ...............'
     h = hexdump(__buf)
     assert (h == __hd)
+    assert in_cksum_add(0, __buf) == 12600  # endianness
     c = in_cksum(__buf)
     assert (c == 51150)
--- a/dpkt/ieee80211.py
+++ b/dpkt/ieee80211.py
@@ -8,6 +8,7 @@ import socket
 import struct
 
 from . import dpkt
+from .compat import ntole
 
 # Frame Types
 MGMT_TYPE = 0
@@ -329,7 +330,7 @@ class IEEE80211(dpkt.Packet):
 
         # Strip off the FCS field
         if self.fcs_present:
-            self.fcs = struct.unpack('I', self.data[-1 * FCS_LENGTH:])[0]
+            self.fcs = struct.unpack('<I', self.data[-1 * FCS_LENGTH:])[0]
             self.data = self.data[0: -1 * FCS_LENGTH]
 
         if self.type == MGMT_TYPE:
@@ -362,7 +363,7 @@ class IEEE80211(dpkt.Packet):
         if self.type == MGMT_TYPE:
             self.unpack_ies(field.data)
             if self.subtype in FRAMES_WITH_CAPABILITY:
-                self.capability = self.Capability(socket.ntohs(field.capability))
+                self.capability = self.Capability(ntole(field.capability))
 
         if self.type == DATA_TYPE and self.subtype == D_QOS_DATA:
             self.qos_data = self.QoS_Data(field.data)
@@ -421,7 +422,7 @@ class IEEE80211(dpkt.Packet):
         def unpack(self, buf):
             dpkt.Packet.unpack(self, buf)
             self.data = buf[self.__hdr_len__:]
-            self.ctl = socket.ntohs(self.ctl)
+            self.ctl = ntole(self.ctl)
 
             if self.compressed:
                 self.bmp = struct.unpack('8s', self.data[0:_COMPRESSED_BMP_LENGTH])[0]
@@ -654,7 +655,7 @@ def test_802211_ack():
     assert ieee.wep == 0
     assert ieee.order == 0
     assert ieee.ack.dst == b'\x00\x12\xf0\xb6\x1c\xa4'
-    fcs = struct.unpack('I', s[-4:])[0]
+    fcs = struct.unpack('<I', s[-4:])[0]
     assert ieee.fcs == fcs
 
 def test_80211_beacon():
@@ -677,7 +678,7 @@ def test_80211_beacon():
     assert ieee.rate.data == b'\x82\x84\x8b\x0c\x12\x96\x18\x24'
     assert ieee.ds.data == b'\x01'
     assert ieee.tim.data == b'\x00\x01\x00\x00'
-    fcs = struct.unpack('I', s[-4:])[0]
+    fcs = struct.unpack('<I', s[-4:])[0]
     assert ieee.fcs == fcs
 
 def test_80211_data():
@@ -689,7 +690,7 @@ def test_80211_data():
     assert ieee.data_frame.src == b'\x00\x16\x44\xb0\xae\xc6'
     assert ieee.data_frame.frag_seq == 0x807e
     assert ieee.data == b'\xaa\xaa\x03\x00\x00\x00\x08\x00\x45\x00\x00\x28\x07\x27\x40\x00\x80\x06\x1d\x39\x8d\xd4\x37\x3d\x3f\xf5\xd1\x69\xc0\x5f\x01\xbb\xb2\xd6\xef\x23\x38\x2b\x4f\x08\x50\x10\x42\x04'
-    assert ieee.fcs == struct.unpack('I', b'\xac\x17\x00\x00')[0]
+    assert ieee.fcs == struct.unpack('<I', b'\xac\x17\x00\x00')[0]
 
     from . import llc
     llc_pkt = llc.LLC(ieee.data_frame.data)
@@ -706,7 +707,7 @@ def test_80211_data_qos():
     assert ieee.data_frame.frag_seq == 0x207b
     assert ieee.data == b'\xaa\xaa\x03\x00\x00\x00\x88\x8e\x01\x00\x00\x74\x02\x02\x00\x74\x19\x80\x00\x00\x00\x6a\x16\x03\x01\x00\x65\x01\x00\x00\x61\x03\x01\x4b\x4c\xa7\x7e\x27\x61\x6f\x02\x7b\x3c\x72\x39\xe3\x7b\xd7\x43\x59\x91\x7f\xaa\x22\x47\x51\xb6\x88\x9f\x85\x90\x87\x5a\xd1\x13\x20\xe0\x07\x00\x00\x68\xbd\xa4\x13\xb0\xd5\x82\x7e\xc7\xfb\xe7\xcc\xab\x6e\x5d\x5a\x51\x50\xd4\x45\xc5\xa1\x65\x53\xad\xb5\x88\x5b\x00\x1a\x00\x2f\x00\x05\x00\x04\x00\x35\x00\x0a\x00\x09\x00\x03\x00\x08\x00\x33\x00\x39\x00\x16\x00\x15\x00\x14\x01\x00'
     assert ieee.qos_data.control == 0x0
-    assert ieee.fcs == struct.unpack('I', b'\xff\xff\xff\xff')[0]
+    assert ieee.fcs == struct.unpack('<I', b'\xff\xff\xff\xff')[0]
 
 def test_bug():
     s = b'\x88\x41\x2c\x00\x00\x26\xcb\x17\x44\xf0\x00\x1e\x52\x97\x14\x11\x00\x1f\x6d\xe8\x18\x00\xd0\x07\x00\x00\x6f\x00\x00\x20\x00\x00\x00\x00'
@@ -765,7 +766,7 @@ def test_action_block_ack_request():
     assert ieee.action.category == BLOCK_ACK
     assert ieee.action.code == BLOCK_ACK_CODE_REQUEST
     assert ieee.action.block_ack_request.timeout == 0
-    parameters = struct.unpack('H', b'\x10\x02')[0]
+    parameters = struct.unpack('<H', b'\x10\x02')[0]
     assert ieee.action.block_ack_request.parameters == parameters
 
 def test_action_block_ack_response():
@@ -775,9 +776,9 @@ def test_action_block_ack_response():
     assert ieee.subtype == M_ACTION
     assert ieee.action.category == BLOCK_ACK
     assert ieee.action.code == BLOCK_ACK_CODE_RESPONSE
-    timeout = struct.unpack('H', b'\x13\x88')[0]
+    timeout = struct.unpack('<H', b'\x13\x88')[0]
     assert ieee.action.block_ack_response.timeout == timeout
-    parameters = struct.unpack('H', b'\x10\x02')[0]
+    parameters = struct.unpack('<H', b'\x10\x02')[0]
     assert ieee.action.block_ack_response.parameters == parameters
 
 if __name__ == '__main__':
--- a/dpkt/pcapng.py
+++ b/dpkt/pcapng.py
@@ -941,6 +941,10 @@ def test_writepkts():
     return pkts
 
 
+def test_pcapng_block_pack():
+    assert bytes(_PcapngBlock())
+
+
 if __name__ == '__main__':
     # TODO: big endian unit tests; could not find any examples..
 
--- a/dpkt/radiotap.py
+++ b/dpkt/radiotap.py
@@ -3,10 +3,9 @@
 from __future__ import print_function
 from __future__ import absolute_import
 
-import socket
-
 from . import dpkt
 from . import ieee80211
+from .compat import ntole
 
 # Ref: http://www.radiotap.org
 # Fields Ref: http://www.radiotap.org/defined-fields/all
@@ -234,7 +233,7 @@ class Radiotap(dpkt.Packet):
 
     def unpack(self, buf):
         dpkt.Packet.unpack(self, buf)
-        self.data = buf[socket.ntohs(self.length):]
+        self.data = buf[ntole(self.length):]
 
         self.fields = []
         buf = buf[self.__hdr_len__:]
