From 5bd9a221116458b0922baeadc0a51ff02ac0b56b Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Micha=C5=82=20G=C3=B3rny?= <mgorny@gentoo.org>
Date: Fri, 24 Jun 2022 07:43:33 +0200
Subject: [PATCH] Handle missing watchfiles and watchgod gracefully in tests

Skip the tests relying on watchfiles and watchgod reloaders when
the required dependencies are not available rather than causing
an ImportError.  Since these packages are optional and watchfiles
does not support all the platforms that uvicorn used to work on so far,
it is useful to be able to run at least part of the test suite there.
---
 tests/supervisors/test_reload.py | 23 ++++++++++++++++++-----
 1 file changed, 18 insertions(+), 5 deletions(-)

diff --git a/tests/supervisors/test_reload.py b/tests/supervisors/test_reload.py
index 04bfb41cf..6010d703b 100644
--- a/tests/supervisors/test_reload.py
+++ b/tests/supervisors/test_reload.py
@@ -2,7 +2,7 @@
 import signal
 from pathlib import Path
 from time import sleep
-from typing import Type
+from typing import Optional, Type
 
 import pytest
 
@@ -10,8 +10,16 @@
 from uvicorn.config import Config
 from uvicorn.supervisors.basereload import BaseReload, _display_path
 from uvicorn.supervisors.statreload import StatReload
-from uvicorn.supervisors.watchfilesreload import WatchFilesReload
-from uvicorn.supervisors.watchgodreload import WatchGodReload
+
+try:
+    from uvicorn.supervisors.watchfilesreload import WatchFilesReload
+except ImportError:  # pragma: no cover
+    WatchFilesReload = None
+
+try:
+    from uvicorn.supervisors.watchgodreload import WatchGodReload
+except ImportError:  # pragma: no cover
+    WatchGodReload = None
 
 
 def run(sockets):
@@ -23,8 +31,10 @@ class TestBaseReload:
     def setup(
         self,
         reload_directory_structure: Path,
-        reloader_class: Type[BaseReload],
+        reloader_class: Optional[Type[BaseReload]],
     ):
+        if reloader_class is None:  # pragma: no cover
+            pytest.skip("Needed dependency not installed")
         self.reload_path = reload_directory_structure
         self.reloader_class = reloader_class
 
@@ -43,7 +53,7 @@ def _setup_reloader(self, config: Config) -> BaseReload:
 
     def _reload_tester(self, touch_soon, reloader: BaseReload, *files: Path) -> bool:
         reloader.restart()
-        if isinstance(reloader, WatchFilesReload):
+        if WatchFilesReload is not None and isinstance(reloader, WatchFilesReload):
             touch_soon(*files)
         else:
             assert not next(reloader)
@@ -240,6 +250,7 @@ def test_override_defaults(self, touch_soon) -> None:
 
             reloader.shutdown()
 
+    @pytest.mark.skipif(WatchFilesReload is None, reason="watchfiles not available")
     @pytest.mark.parametrize("reloader_class", [WatchFilesReload])
     def test_watchfiles_no_changes(self) -> None:
         sub_dir = self.reload_path / "app" / "sub"
@@ -296,6 +307,7 @@ def test_should_detect_new_reload_dirs(
             reloader.shutdown()
 
 
+@pytest.mark.skipif(WatchFilesReload is None, reason="watchfiles not available")
 def test_should_watch_one_dir_cwd(mocker, reload_directory_structure):
     mock_watch = mocker.patch("uvicorn.supervisors.watchfilesreload.watch")
     app_dir = reload_directory_structure / "app"
@@ -312,6 +324,7 @@ def test_should_watch_one_dir_cwd(mocker, reload_directory_structure):
         assert mock_watch.call_args[0] == (Path.cwd(),)
 
 
+@pytest.mark.skipif(WatchFilesReload is None, reason="watchfiles not available")
 def test_should_watch_separate_dirs_outside_cwd(mocker, reload_directory_structure):
     mock_watch = mocker.patch("uvicorn.supervisors.watchfilesreload.watch")
     app_dir = reload_directory_structure / "app"
