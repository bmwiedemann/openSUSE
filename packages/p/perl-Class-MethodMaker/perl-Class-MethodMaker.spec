#
# spec file for package perl-Class-MethodMaker
#
# Copyright (c) 2025 SUSE LLC
#
# All modifications and additions to the file contributed by third parties
# remain the property of their copyright owners, unless otherwise agreed
# upon. The license for this file, and modifications and additions to the
# file, is the same license as for the pristine package itself (unless the
# license for the pristine package is not an Open Source License, in which
# case the license is the MIT License). An "Open Source License" is a
# license that conforms to the Open Source Definition (Version 1.9)
# published by the Open Source Initiative.

# Please submit bugfixes or comments via https://bugs.opensuse.org/
#


%define cpan_name Class-MethodMaker
Name:           perl-Class-MethodMaker
Version:        2.250.0
Release:        0
# 2.25 -> normalize -> 2.250.0
%define cpan_version 2.25
License:        Artistic-1.0 OR GPL-1.0-or-later
Summary:        Module for creating generic methods
URL:            https://metacpan.org/release/%{cpan_name}
Source0:        https://cpan.metacpan.org/authors/id/S/SC/SCHWIGON/class-methodmaker/%{cpan_name}-%{cpan_version}.tar.gz
BuildRequires:  perl
BuildRequires:  perl-macros
Provides:       perl(Class::MethodMaker) = %{version}
Provides:       perl(Class::MethodMaker::Constants)
Provides:       perl(Class::MethodMaker::Engine) = %{version}
Provides:       perl(Class::MethodMaker::OptExt)
Provides:       perl(Class::MethodMaker::V1Compat)
Provides:       perl(Generate)
%undefine       __perllib_provides
%{perl_requires}

%description
This module solves the problem of having to continually write accessor
methods for your objects that perform standard tasks.

The argument to 'use' is an *arrayref*, as pairs whose "keys" are the names
of types of generic methods generated by MethodMaker and whose "values"
tell method maker what methods to make.

To override any generated methods, it is sufficient to ensure that the
overriding method is defined when Class::MethodMaker is called. Note that
the 'use' keyword introduces a 'BEGIN' block, so you may need to define (or
at least declare) your overriding method in a 'BEGIN' block.

%prep
%autosetup  -n %{cpan_name}-%{cpan_version}

find . -type f ! -path "*/t/*" ! -name "*.pl" ! -path "*/bin/*" ! -path "*/script/*" ! -path "*/scripts/*" ! -name "configure" -print0 | xargs -0 chmod 644

%build
perl Makefile.PL INSTALLDIRS=vendor OPTIMIZE="%{optflags}"
%make_build

%check
make test

%install
%perl_make_install
%perl_process_packlist
%perl_gen_filelist

%files -f %{name}.files
%doc Changes examples README TODO

%changelog
