<revisionlist>
  <revision rev="1" vrev="1">
    <srcmd5>6d47e35a031789e47419edc338153446</srcmd5>
    <version>0.18.0</version>
    <time>1626045893</time>
    <user>dimstar_suse</user>
    <comment>this package should certainly get to Factory IMO</comment>
    <requestid>897236</requestid>
  </revision>
  <revision rev="2" vrev="1">
    <srcmd5>3cc9dfdf4879fe55b9e04df881125ff2</srcmd5>
    <version>0.18.2</version>
    <time>1626118816</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>905775</requestid>
  </revision>
  <revision rev="3" vrev="1">
    <srcmd5>ac11b44a2c7736d38552aba7be419760</srcmd5>
    <version>0.22.0</version>
    <time>1643926572</time>
    <user>dimstar_suse</user>
    <comment>- Update to 0.22.0:
  * Add support for `Client(allow_redirects=&lt;bool&gt;)`. (Pull #1790)
  * Add automatic character set detection, when no `charset` is included in the response `Content-Type` header. (Pull #1791)
  * Added the `httpx` command-line client.
  * Response instances now include `.is_informational`, `.is_success`, `.is_redirect`, `.is_client_error`, and `.is_server_error`
    properties for checking 1xx, 2xx, 3xx, 4xx, and 5xx response types. Note that the behaviour of `.is_redirect` is slightly different in that it now returns True for all 3xx responses, in order to allow for a consistent set of properties onto the different HTTP status code types. The `response.has_redirect_location` location may be used to determine responses with properly formed URL redirects.
  * Support for [the SOCKS5 proxy protocol](https://www.python-httpx.org/advanced/#socks) via [the `socksio` package](https://github.com/sethmlarson/socksio). (#2034)
  * Support for custom headers in multipart/form-data requests (#1936)
  * Event hooks are now also called for any additional redirect or auth requests/responses. (Pull #1806)
  * Strictly enforce that upload files must be opened in binary mode. (Pull #1736)
  * Strictly enforce that client instances can only be opened and closed once, and cannot be re-opened. (Pull #1800)
  * Drop `mode` argument from `httpx.Proxy(..., mode=...)`. (Pull #1795)
  * The `allow_redirects` flag is now `follow_redirects` and defaults to `False`.
  * The `raise_for_status()` method will now raise an exception for any responses
    except those with 2xx status codes. Previously only 4xx and 5xx status codes
    would result in an exception.
  * The low-level transport API changes to the much simpler `response = transport.handle_request(request)`.
  * The `client.send()` method no longer accepts a `timeout=...` argument, but the
    `client.build_request()` does. This required by the signature change of the
    Transport API. The request timeout configuration is now stored on the request
    instance, as `request.extensions['timeout']`.
  * `response.iter_bytes()` no longer raises a ValueError when called on a response with no content. (Pull #1827)
  * The `'wsgi.error'` configuration now defaults to `sys.stderr`, and is corrected to be a `TextIO` interface, not a `BytesIO` interface. Additionally, the WSGITransport now accepts a `wsgi_error` configuration. (Pull #1828)
  * Follow the WSGI spec by properly closing the iterable returned by the application. (Pull #1830)
  * Don't perform unreliable close/warning on `__del__` with unclosed clients. (#2026)
  * Fix `Headers.update(...)` to correctly handle repeated headers (#2038)
  * Fix streaming uploads using `SyncByteStream` or `AsyncByteStream`. Regression in 0.21.2. (#2016)
  * HTTP/2 support for tunnelled proxy cases. (#2009)
  * Improved the speed of large file uploads. (#1948)
  * The `response.url` property is now correctly annotated as `URL`, instead of `Optional[URL]`. (#1940)</comment>
    <requestid>950349</requestid>
  </revision>
  <revision rev="4" vrev="2">
    <srcmd5>dc9f52305bd2890a1f5a904297e2055b</srcmd5>
    <version>0.22.0</version>
    <time>1644874554</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>953911</requestid>
  </revision>
  <revision rev="5" vrev="3">
    <srcmd5>e1d5c0746c2cf0273743a6cf5ff743ce</srcmd5>
    <version>0.22.0</version>
    <time>1651669824</time>
    <user>dimstar_suse</user>
    <comment>- Add patch CVE-2021-41945-copy_with-data-leak.patch:
  * Do not leak data in httpx.URL.copy_with (bsc#1199002, CVE-2021-41945)</comment>
    <requestid>974250</requestid>
  </revision>
  <revision rev="6" vrev="1">
    <srcmd5>9372453e7a1d7ff70a6d6380ce194325</srcmd5>
    <version>0.23.0</version>
    <time>1659941104</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>993276</requestid>
  </revision>
  <revision rev="7" vrev="1">
    <srcmd5>eabf4c78686b48cca434781c56907d4d</srcmd5>
    <version>0.23.3</version>
    <time>1674043698</time>
    <user>dimstar_suse</user>
    <comment>- Update to 0.23.3
  * Version 0.23.2 accidentally included stricter type checking on query
    parameters. This shouldn've have been included in a minor version bump, and
    is now reverted. (#2523, #2539)
- 0.23.2 (2nd Jan, 2023)
  * Support digest auth nonce counting to avoid multiple auth requests. (#2463)
  * Multipart file uploads where the file length cannot be determine now use
    chunked transfer encoding, rather than loading the entire file into memory
    in order to determine the `Content-Length`. (#2382)
  * Raise `TypeError` if content is passed a dict-instance. (#2495)
  * Partially revert the API breaking change in 0.23.1, which removed `RawURL`.
    We continue to expose a `url.raw` property which is now a plain
    named-tuple. This API is still expected to be deprecated, but we will do so
    with a major version bump. (#2481)
- 0.23.1 (18th Nov, 2022)
  **Note**: The 0.23.1 release should have used a proper version bump, rather
            than a minor point release. There are API surface area changes
            that may affect some users. See the &quot;Removed&quot; section of these
            release notes for details.
  ### Added
    * Support for Python 3.11. (#2420)
    * Allow setting an explicit multipart boundary in `Content-Type` header.
      (#2278)
    * Allow `tuple` or `list` for multipart values, not just `list`. (#2355)
    * Allow `str` content for multipart upload files. (#2400)
    * Support connection upgrades. See
      https://www.encode.io/httpcore/extensions/#upgrade-requests
  ### Fixed
    * Don't drop empty query parameters. (#2354)
  ### Removed
    * Upload files *must* always be opened in binary mode. (#2400)
    * Drop `.read`/`.aread` from `SyncByteStream`/`AsyncByteStream`. (#2407)
    * Drop `RawURL`. (#2241)
</comment>
    <requestid>1058832</requestid>
  </revision>
  <revision rev="8" vrev="2">
    <srcmd5>a79db298d5258aabbf4e2e0ad23d05ce</srcmd5>
    <version>0.23.3</version>
    <time>1682193633</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>1081896</requestid>
  </revision>
  <revision rev="9" vrev="1">
    <srcmd5>ddf5c6ccd7faa398d57e289f0824e8d8</srcmd5>
    <version>0.24.0</version>
    <time>1683630376</time>
    <user>dimstar_suse</user>
    <comment>- update to 0.24.0:
  * The logging behaviour has been changed to be more in-line
    with other standard Python logging usages. We no longer have
    a custom `TRACE` log level, and we no longer use the
    `HTTPX_LOG_LEVEL` environment variable to auto-configure
    logging. We now have a significant amount of `DEBUG` logging
    available at the network level. Full documentation is
    available at https://www.python-httpx.org/logging/ (#2547,
    encode/httpcore#648)
  * The `Response.iter_lines()` method now matches the stdlib
    behaviour and does not include the newline characters. It
    also resolves a performance issue. (#2423)
  * Query parameter encoding switches from using + for spaces and
    %2F for forward slash, to instead using %20 for spaces and
    treating forward slash as a safe, unescaped character. This
    differs from `requests`, but is in line with browser behavior
    in Chrome, Safari, and Firefox. Both options are RFC valid.
    (#2543)
  * NetRC authentication is no longer automatically handled, but
    is instead supported by an explicit `httpx.NetRCAuth()`
    authentication class. See the documentation at
    https://www.python-httpx.org/advanced/#netrc-support (#2525)
  * The `rfc3986` dependancy has been removed. (#2252)</comment>
    <requestid>1084883</requestid>
  </revision>
  <revision rev="10" vrev="1">
    <srcmd5>986e27fa611fd02474b79083925d52a0</srcmd5>
    <version>0.24.1</version>
    <time>1694545337</time>
    <user>anag+factory</user>
    <comment></comment>
    <requestid>1110267</requestid>
  </revision>
  <revision rev="11" vrev="1">
    <srcmd5>19563e87a2319b6a83bfc7081f813346</srcmd5>
    <version>0.25.0</version>
    <time>1698333108</time>
    <user>anag+factory</user>
    <comment>REQUIRES SR#1120297

- Update to 0.25.0:
  - Drop support for Python 3.7.
  - Support HTTPS proxies.
  - Change the type of Extensions from Mapping[Str, Any] to
    MutableMapping[Str, Any].
  - Add socket_options argument to httpx.HTTPTransport and
    httpx.AsyncHTTPTransport classes.
  - The Response.raise_for_status() method now returns
    the response instance. For example: data =
    httpx.get('...').raise_for_status().json().
  - Return 500 error response instead of exceptions when
    raise_app_exceptions=False is set on ASGITransport.
  - Ensure all WSGITransport environs have a SERVER_PROTOCOL.
  - Always encode forward slashes as %2F in query parameters
  - Use Mozilla documentation instead of httpstatuses.com for
    HTTP error reference
- Requires higher version of httpcore.</comment>
    <requestid>1120298</requestid>
  </revision>
  <revision rev="12" vrev="2">
    <srcmd5>20f2d4c134b816ab16999f7312b52d46</srcmd5>
    <version>0.25.0</version>
    <time>1698952851</time>
    <user>anag+factory</user>
    <comment></comment>
    <requestid>1121509</requestid>
  </revision>
  <revision rev="13" vrev="1">
    <srcmd5>a5fe9e4c837ac5e2f3c06b4c9ba84156</srcmd5>
    <version>0.25.2</version>
    <time>1701206329</time>
    <user>anag+factory</user>
    <comment>- update to 0.25.2:
  * Add missing type hints to few `__init__()` methods. (#2938)
  * Add support for Python 3.12. (#2854)
  * Add support for httpcore 1.0 (#2885)
  * Raise `ValueError` on `Response.encoding` being set after
    `Response.text` has been accessed. (#2852)
- drop newer-httpcore.patch (upstream)

  * Do not leak data in httpx.URL.copy_with (bsc#1199002, CVE-2021-41945)</comment>
    <requestid>1129219</requestid>
  </revision>
  <revision rev="14" vrev="1">
    <srcmd5>2d7cdab133a51ac97f9af96d94240bd4</srcmd5>
    <version>0.26.0</version>
    <time>1704659953</time>
    <user>dimstar_suse</user>
    <comment>- update to 0.26.0:
  * The `proxy` argument was added. You should use the `proxy`
    argument instead of the deprecated `proxies`, or use
    `mounts=` for more complex configurations.
  * The `proxies` argument is now deprecated. It will still
    continue to work, but it will be removed in the future.
  * Fix cases of double escaping of URL path components. Allow /
    as a safe character in the query portion.
  * Handle `NO_PROXY` envvar cases when a fully qualified URL is
    supplied as the value.
  * Allow URLs where username or password contains unescaped '@'.
  * Ensure ASGI `raw_path` does not include URL query component.
  * Ensure `Response.iter_text()` cannot yield empty strings.</comment>
    <requestid>1137276</requestid>
  </revision>
  <revision rev="15" vrev="1">
    <srcmd5>23c44b101e34fe5607866791874f63f4</srcmd5>
    <version>0.27.0</version>
    <time>1711477517</time>
    <user>anag+factory</user>
    <comment>Forwarded request #1160604 from mcalabkova

- Update to 0.27.0
    * The app=... shortcut has been deprecated. Use the explicit style of 
      transport=httpx.WSGITransport() or transport=httpx.ASGITransport() instead.
    * Respect the http1 argument while configuring proxy transports. (#3023)
    * Fix RFC 2069 mode digest authentication. (#3045)</comment>
    <requestid>1160630</requestid>
  </revision>
  <revision rev="16" vrev="1">
    <srcmd5>fb70144100b7252d5c3e1de432b3c138</srcmd5>
    <version>0.27.2</version>
    <time>1726152841</time>
    <user>anag+factory</user>
    <comment>- update to 0.27.2:
  * Reintroduced supposedly-private `URLTypes` shortcut.
  * Support for `zstd` content decoding using the python
    `zstandard` package is added. Installable using
    `httpx[zstd]`.
  * Improved error messaging for `InvalidURL` exceptions.
  * Fix `app` type signature in `ASGITransport`.

  * The app=... shortcut has been deprecated. Use the explicit style of</comment>
    <requestid>1200062</requestid>
  </revision>
</revisionlist>
