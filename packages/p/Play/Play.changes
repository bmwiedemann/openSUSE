-------------------------------------------------------------------
Tue Feb 16 14:50:51 UTC 2021 - guillaume.gardet@opensuse.org

- Update to version 0~git20210216:
  * Update Dependencies submodule.
  * Upper and lower affected registers code works the same now.
  * Style fix.
  * First shot at non hack fix for GoW FMAC stall situation.
  * Add per element stall check for lower ops.
  * Add another test that represents the real issue with GoW.
  * Add another stall test.
  * Add single point of definition for monospaced font used in debugger.
  * Fix formatting.
  * Resize column to fit contents in RegView page.
  * Improve size formulae once again.
  * Initialize variables.
  * Remove some hardcoded values.
  * Improve size formula.
  * Update address when scroll position changes.
  * WIP: Use sizeHintForColumn to improve performance.
  * Improve formatting.
  * Set monospaced font.
  * Initialize some variables.
  * fix windows libretro s3 upload name
  * fix windows aws upload
  * fix short_hash on windows builds
  * cleanup
  * Force fetching tags
  * remove appveyor build
  * rename CI action name
  * Fix build
  * Github Actions CI: add PsfPlayer windows build
  * Github Actions CI: add windows build
  * Set correct defaults for SMODE, DISPLAY 1 and 2.
  * correctly use initialisation flag
  * Another 2 glCheckFramebufferStatus calls
  * remove assertion code in release
  * Fix flag pipe display.
  * Remove dead code.
  * Fix namespace.
  * Handle case of removing non-empty directory.
  * Close frame debugger when closing the main window.
  * Remove extra version specifiers in CDROM file path.
  * Fix contents of address view not being visible after closing window.
  * Clamp some input vectors.
  * Merge ADD code in a single function.
  * Added some NaN related utils.
  * Redraw after changing active unit, as cell size could change, this also fixes incorrect cell size if we set byte per line to auto
  * framedebugger: StepVu1: add menu option & keyboard shortcut(F10)
  * let Qt handle Cell sizes
  * Add some warnings.
  * Change register name display.
  * Remove strange logic.
  * Add padding in AOT_BLOCK_KEY to align pointers on 8 bytes.
  * Fix warnings.
  * Adjust SPU transfer throttling.
  * Make frame debugger an orphan.
  * Change how feature toggles are applied.
  * Update Framework submodule.
  * Force fetching tags, fixes version names in GitHub Action builds.
  * Code style fixes.
  * Use fixed width font in regview.
  * Rename VU column headers.
  * Make VU's disassembly instruction columns resizable.
  * show threadsView widget and the threadsView is is shown
  * framedebugger: scale different modes
  * fix heighlight scaling
  * Add some prints to help debugging.
  * Add warning when module can't be registered.
  * Add more functions.
  * Formatting fixes.
  * Refine IOPRP version detection.
  * Improve formatting.
  * Create some directories inside our HDD upon startup.
  * Try getting directory first on Getstat.
  * Add stubs for Remove/Rmdir.
  * Fix assert.
  * Use proper function name.
  * Rename CreateDirectory to MakeDirectory.
  * Implement Seek64.
  * Add missing include.
  * Seek uses a signed offset.
  * Move files.
  * Seems to be possible to write to partitions.
  * Add basic mount/umount support for HDDs.
  * Devices don't support directory creation by default.
  * Handle some more DevCtls.
  * Improve DevCtl logging again.
  * Use generic reply.
  * Add HDD directory.
  * Remove unused struct.
  * Call IOMAN's Dopen.
  * Use generic reply.
  * Start using GENERICREPLY to clean up code.
  * Add Chstat.
  * Implement MkDir.
  * Add Dclose/Dread.
  * Add DevCtl definitions.
  * Implement AllocLoadMemory in MODLOAD.
  * Add bcmp.
  * Use GetPtr in memcmp.
  * Update warning message.
  * Add flag combo.
  * Implement Sync.
  * Implement Write.
  * Set warning.
  * Add Format.
  * Register HDD device.
  * Add Ioctl2.
  * Add HardDiskDevice.
  * Fix structure name.
  * Respond to some HDD DevCtls.
  * Add missing cases.
  * scale framebuffer dump appropriately
  * simplify finding next/previous kicks
  * syntax cleanup
  * scroll to kickdraw packet when moving from one to another
  * highlight draw kicks
  * showEvent doesnt seem to propgate correctly to children of QMdiSubWindow
  * cleanup: using QMdiArea as parent for Non-QMdiSubWindow widget is technically invalid
  * Set alpha buffer size.
  * Fix loading of ee_functions on macOS.
  * Remove Win32 Debugger Code
  * move Win32 Debug files that are still being used by PsfPlayer
  * silence warning
  * Cleanup: string formatting
  * Cleanup: remove deadcode
  * syntax cleanup
  * cleanup
  * use instruction mapping to prepare disasm view
  * expose mapping range
  * limit EE dis view to instruction maps
  * merge target/comment column and colour the text
  * Qt commits seppuku if we dont set a min column size or an inital column size
  * change ee debugger address access
  * use enum
  * Fix CQtMemoryViewModel address calculation
  * Fix OSX Build
  * allow unsetting comments
  * fix address to column calculation
  * show comments in disasm view
  * fix typo, incorrectly incremented address by 4
  * syntax cleanup
  * trigger show/resize Event
  * fix Qt MemoryViewTable display
  * Fix double declaration, caused by rebase
  * give I-Mn & I-Op a fixed size
  * fix style
  * disasmwnd dont scroll if address is in view
  * use same font in disasm view
  * set size the same as win32 version
  * fix memory view display... will need to re-review the view's code
  * hide regs view header
  * fix: functionview double click crash, only item with addresses can be clicked
  * fix framedebugger crash
  * cleanup
  * add cmd option to open framedebugger
  * cleanup
  * attach action to save button
  * fix segfault when attempting to access model before its initialised
  * only swap buffer when window is exposed
  * cleanup
  * cleanup
  * fix debugger build on linux
  * code style fixes
  * cleanup
  * use qt signals to avoid non-ui-thead access to ui
  * refresh view when its exposed
  * simplify QTableView to QTableView
  * simplify CRegViewWnd to QTabWidget
  * simplify CCallStackWnd to QListWidget
  * simplify CMemoryViewMIPSWnd to QWidget
  * simplify CDisAsmWnd to QTableView
  * cmake cleanup
  * fix typo
  * set display mode
  * move Framedebugger to Qt
  * use base class type to make it more generic
  * move move surface format to its own static function, so it can be used in the frame debugger as well
  * make CDisAsmWnd a QWidget to make it more re-usable
  * move OpenGL Framedebugger GSH to Qt
  * move platform agnoist source
  * disable Win32 Framedebugger... we're going to now starting Qt debugger, and slowly port it over
  * move few qt creation to qt creator
  * cleanup
  * abstract Memory viewer
  * cleanup
  * cleanup
  * replace MessageBeep(); with Qt's equivalent QApplication::beep();
  * cleanup
  * QWidget can only parent 1 layout, silence Qt warning
  * Code style fixes.
  * ELFProgramView place an empty widget to take the free space
  * small fixes
  * Add Qt ELFView
  * QtMemoryViewModel can dynamically change getByte and data size
  * make memory model more generic
  * Code style fixes.
  * add icon to QtDebugger, since QtDebugger is no longer a child of MainWindow, we must give it its own icon
  * save view layout, when windows is getting closed, and only if the main debugger view visible, if its not visible it will report all children and invisible as well
  * cleanup
  * remove QtDebugger parent, to allow it to have its own taskbar icon
  * set correct memory size for disAsm
  * revert back to unique pointer, release pointer early, to avoid segfault when trying to save tags
  * cleanup
  * cleanup
  * Replace FunctionsView's QTableView with QTreeWidget to allow item grouping
  * remove redundant 'this->' pointer
  * rename function for consistancy
  * cleanup
  * cleanup
  * Code style fixes.
  * typo fix
  * add debug keyboard shortcuts
  * fix: setup history before use
  * Add arrow key shortcuts to Disassembler view
  * make RegView non-editable
  * fix: using wrong variable name
  * QtDisAsmTableModel cleanup
  * cleanup
  * enable debug action menu
  * DisAsmWnd.cpp cleanup
  * DisAsmWnd.cpp use QMessageBox
  * add Qt MemoryViewMIPSWnd
  * re-enable Disassembly view layout
  * cleanup
  * add Registers view menu action
  * rename regview to Registers
  * cleanup
  * DisAsm add breakpoint toggle
  * add DisAsm OnCopy
  * Add DisAsmWnd selection
  * cleanup
  * add context menu to DisAsmWnd
  * restructure DisAsm
  * resize scrope icon, add arrow
  * rogue include...merge back
  * initial Qt DisAsm
  * use Qt debugger on window
  * allow list select via double click
  * fix: crash when no item is selected
  * cleanup
  * update title to reflect current active chip
  * save/load layout position
  * cleanup
  * enable debug for VU0/1 IOP
  * dont show window on start
  * enable window focus
  * enable more code
  * more menu action
  * enable signals
  * cleanup
  * cleanup
  * finish ReanalyzeEe(...) reimplementation
  * enable AssembleJAL(...) menu action
  * enable FindWordValue(...) menu action
  * update table behaviour
  * add button/click events to FunctionsView
  * CThreadsViewWnd cleanu merge back
  * add QtDialogListWidget, threadCallStackViewWnd's replacement
  * cleanup
  * cleanup
  * we dont want to set a min size, change min size to resize
  * make CRegViewWnd QMdiSubWindow, this fixed layout menu action for CRegViewWnd
  * add doubleclick to CallStackWnd
  * enable layout config config seems to only apply correctly to RegView, need to look into it
  * enable few calls
  * set actions to some of "Virtual Machine" toolbar items
  * populate toolbar menu
  * replace Debugger(QDockWidget) with QtDebugger(QMainWindow) as QMainWindow has its own toolbar menu
  * add double click to CThreadsViewWnd
  * CAddressListViewWnd Qt initial implementation
  * add CQtGenericTableModel::getItem(...)
  * cleanup
  * initial CFunctionsView support
  * initial CThreadsViewWnd implementation
  * create generic table model
  * add title to RegView window
  * this is causing infinite loop
  * initial Qt CCallStackWnd implementation
  * Convert Debug menu over to use QT
  * syntax cleanup
  * flip texture coordinates
  * use SendGSCall to access mailbox
  * fix texture colouring
  * disbale code on GLES, GLES doesnt support GL_BGRA or glGetTexImage, these can be worked around using GL_RGBA, and attaching texture to debugger and reading with glReadPixels, however since these functions are use only in frame debugger, there is no need for a workaround
  * Framedebugger replace DirectX with OpenGl
  * update CGSH_OpenGL to match CGSH_Direct3D9
  * Add an explanation for the delay thing.
  * Save/load new member state.
  * Change how we report FIFO contents when FDR is on.
  * Update Framework submodule.
  * Code style fixes.
  * Set channel state when transitioning from KEY_ON to STOPPED.
  * Add key-on/key-off SPU test.
  * Fix build.
  * Move generic test infra in CTest.
  * Add SPU test.
  * Cleanup.
  * Update Framework submodule.
  * Add missing include.
  * Fix Windows build.
  * Remove loop in favor of intrinsic.
  * Code style fixes.
  * Add switch to enable/disable widescreen on Android.
  * Add switch to enable/disable widescreen on iOS.
  * Change ratios.
  * Add option to resize window to specific sizes.
  * Add widescreen mode.
  * Update CodeGen submodule.
  * syntax clean up
  * we need to ensure the VM is paused before continuing
  * Initialize atomic variable.
  * use PauseAsync in the libretro core
  * Add PauseAsync to PS2VM
  * set m_flipped flag on flush, otherwise ProcessSingleFrame() would never return
  * Add values to prevent reading out of bounds.
  * Add missing blending formulae.
  * Set IRQ address earlier in SampleReader.
  * Use a different minImageCount on macOS.
  * MoltenVK now supports Vulkan 1.1.
  * Fix shader compilation warning.
  * Update MoltenVK path on macOS.
  * VulkanSDK is a DMG on macOS.
  * Upgrade VulkanSDK version.
  * Fix warning.
  * Fix reset staying disabled after loading a game.
  * Make bootable loading behavior coherent.
  * Don't prevent starting game if we can't update the bootable database.
  * Github action: disable signing/uploading setups when user doesnt have them setup, e.g in forks
  * Use proper frequency for HSYNC based timers.
  * Use nice enums instead of meaningless constants.
  * upload artifacts to github
  * fix cue/bin path concat on windows S3, on windows the path will look like /s3/bucket\game.bin so aws s3 can't find the game
  * Fix some CMake minimum version warnings.
  * Run workflows on pull requests.
  * Code style fix.
  * Remove ObjCMemberFunctionPointer.
  * Update Dependencies submodule.
  * Actions: Missing Checkout.
  * Actions: Build iOS.
  * Remove iOS build from Travis.
  * Actions: Cache Android NDK.
  * Move some variables.
  * Don't sign APKs on pull requests.
  * Remove Android build from TravisCI.
  * Actions: Android build.
  * Rename scripts.
  * Actions: Cache Qt on macOS.
  * Remove Linux x86-64 build from TravisCI.
  * Build Linux x86-64 on GitHub Actions.
  * Rename workflow.
  * Remove macOS config in TravisCI.
  * Build macOS on GitHub Actions.
  * Code style fixes.
  * Make the job succeed if nothing has changed.
  * Remove formatting from Travis.
  * Add clang-format action.
  * Code style fixes.
  * Attach exception handler to GS thread on macOS/iOS.
  * Handle DMA transfers with 0 QWC
  * Display VU addresses associated with register writes.
  * Update tests.
  * Preserve W component of FD in OPMSUB.
  * Remove unused include.
  * Flush Q pipeline when setting register through CTC2.
  * Clear BUSDIR upon GS reset.
  * update vulkan sdk download link
  * Implement texture clamping in shader on OpenGL.
  * Add pause/resume action to MainWindow.
  * Hide cursor when in fullscreen mode.
  * Add wait state for CdSync.
  * Preserve LO/HI registers when context switching on IOP.
  * Implement PEXEH.
  * Clarify comments.
  * Rework various hardware timer functions.
  * Handle invalid threads in WakeupThread gracefully.
  * Update Android Gradle Tools version.
  * Remove game specific hack.
  * Don't care for mode on reading files from optical media
  * review fix - move code to better respect ordering
  * Implement FileNotFoundException in CIoman
  * Add warning for invalid VIF commands
  * Implement GS BUSDIR register
  * Filter out SSBUS register access
  * Add some missing EE DMAC ASR register interactions
  * Implement DMACMAN calls 33, 34 and 35
  * Implement 2000 blend mode. Used by BGDA
  * Implement IOP DPCR2
  * Misc VIF fixes
  * Implement VIF ERR register
  * Add more warnings
  * Update Framework submodule.
  * Wait for flip to be complete when finishing.
  * Code style fix.
  * Fix frame debugger.
  * Simplify GS handler's interface.
  * Fix problems with non threaded GS (libretro)
  * Don't flip when VM is running.
  * Don't wait for flip to complete.
  * Submit register write buffer before reading image data.
  * Write batching v3.
  * Write batching v2.
  * Implement FreeHardTimer in TIMRMAN.
  * Update Android signing process.
  * Upgrade Android build tools version.
  * Update Framework submodule.
  * Update Gradle plugin version.
  * Tweak idle loop detection.
  * Throttle all SPU voice transfers.
  * Add some logging for SetEffectAttr.
  * Fix build.
  * Code style fix.
  * Use supported disc image extensions list.
  * Add function to obtain supported disc image extensions.
  * Add cue sheet support.
  * Reorganise code.
  * Reorganise disc image format code.
  * Remove -msse -msse2 for TARGET_PLATFORM_UNIX_ARM

-------------------------------------------------------------------
Tue Oct  6 14:32:33 UTC 2020 - Guillaume GARDET <guillaume.gardet@opensuse.org>

- Fix build on aarch64 with openGL ES:
  * fix-aarch64.patch

-------------------------------------------------------------------
Tue Oct 06 13:17:46 UTC 2020 - guillaume.gardet@opensuse.org

- Update to version 0~git20201003:
  * Allow getting block providers from OpticalMedia.
  * Fix memory leak that can happen when failing to create an optical media.
  * Disable dual layer detection when getting disc id.
  * Remove dead code.
  * Fetch all tags in Travis.
  * Add missing blending formulae in D3D9.
  * Add missing blending formulae in OGL.
  * Save/load module states in a nicer manner.
  * Fix find predicate.
  * Save/Load Timrman state.
  * Add SaveState and LoadState in Module interface.
  * Keep track of allocated timers.
  * Enable textures on lines.
  * Remove useless assert.
  * Fix code style.
  * Implement line rendering in Vulkan.
  * Scan timer list in reverse order.
  * Return an error when no timer is found.
  * IOP timer 3 can also count on hblank.
  * Improve formatting.
  * Set some defaults when creating an input profile.
  * Make Config All work on pad 2.
  * Allow unbound buttons to be saved and loaded properly.
  * Use enum.
  * Fix build.
  * Rename BindingModel to InputBindingModel.
  * Handle SetMainMode in PADMAN HLE.
  * Cleanup.
  * Handle multiple pads in PADMAN HLE.
  * Only process pad 1 in HLE PADMAN.
  * Update both pads in PH_GenericInput.
  * Allow defining bindings for pad 2.
  * Move Amazon S3 client in Framework submodule.
  * Add missing pixel format.
  * Write out current directory when ChDir is called.
  * Add way to change the system's language.
  * Cleanup.
  * Remove some old style pointer handling.
  * Update Framework submodule.
  * Style fix
  * Fix filter logic
  * Make sure we only filter repeat CIFS mounts
  * Add CIFS mount support for Android clients
  * Tidy up the code.
  * Mask ADDR field from DMAtags.
  * Request Legacy External Storage on Android.
  * Update Framework submodule.
  * Sign app only if not building a pull request.
  * Send app for notarization by Apple.
  * Sign macOS executable.
  * Import macOS dev id certificate in TravisCI.
  * Use TravisCI's homebrew addon.
  * Rename macosx to macos.
  * Code style fix.
  * Update CodeGen submodule.
  * Disable NSOpenGLContext thread assertions.
  * Build using Xcode 11.6 for macOS on Travis.
  * Take into account DSAY not being a multiple of page height.
  * Add Espgaluda transfer invalidation range test.
  * Fix crash that can occur when trying to delete covers.
  * Update Android build environment.

-------------------------------------------------------------------
Tue Aug 25 19:27:10 UTC 2020 - i@guoyunhe.me

- Update to version 0~git20200825:
  * Save/load DIRECT qword buffer state.
  * Handle DIRECT commands with partial qword transfers.
  * Cleanup.
  * Save/load pendingMicroProgram state.
  * Make delayed MSCAL handling more robust.
  * Enable DELAYED_MSCAL.
  * Improve handling of GIF RegList.
  * Implement HIGHLIGHT texture function.
  * Increase draw area size.
  * pselect changes the contents of fd_set inplace, so they need to be reset when used in a loop
  * Set the currently selected Vulkan device in settings dialog.

-------------------------------------------------------------------
Wed Aug 12 19:10:53 UTC 2020 - i@guoyunhe.me

- Update to version 0~git20200812:
  * Fix iOS build.
  * Use git describe in Windows installers.
  * Clean Win32 install scripts.
  * Automatically insert version in Cydia's package control file.
  * Use same versioning system in Android APK.
  * Use git describe to obtain a version number.
  * Make message a warning.
  * Implement CdStandby.
  * Update Android build environment.
  * Reset TLB handlers on initialization.
  * Implement TLBR & move TLBWI.
  * Add basic TLB support.
  * Properly initialize out links.
  * Greatly improve block link bookkeeping algorithm.
  * Simplify cached block handling in EE executor.
  * Add implementation for TLBWI.
  * Rename FileIoHandler2240 to FileIoHandler2200.
  * Add scan path for jailbroken iOS devices.
  * Update Dependencies submodule.
  * Update Xcode version used on TravisCI for iOS.
  * Add function to enable some FP exceptions (for debugging purposes).
  * Adjust external clock timer divider (multiplied by 2).
  * Flush image transfer if we get a register write.
  * Mask frame buffer and depth buffer write addresses.
  * Add missing transfer case.
  * Fix some issues in GetBucketLocation.
  * Update Framework submodule.
  * Fix GCC10 build.
  * Fix code style.
  * Increase delay a bit.
  * Change the mechanism used to delay MCSERV's GetInfo response.
  * Add missing D1_ASRx registers.
  * Handle transfers to VU micro memory that might wrap around the address space.
  * Add project generation scripts for VS2019.
  * Add delay to MCSERV's GetInfo.
  * "Triangle" typo.
  * Prevent crashing when we can't get a file stream.
  * We're done reading when we got 0 bytes from the file.
  * Use proper open modes.
  * Simulate the debugger being detached when quitting the app.
  * Code style fixes.
  * Add blending mode 1221 on OpenGL.
  * Only enable colorOutputWhite if alpha blending is enabled.
  * Fix blending mode 1201 on OpenGL.
  * Implement 1201 blending mode in D3D9.
  * Keep alpha since source alpha is always written to framebuffer.
  * Implement blending mode 1221 on D3D9.
  * Add missing blending formulae in D3D9.
  * Ensure that all drawing has completed before we do a local 2 local transfer
  * Handle CGSH_OpenGL::ProcessLocalToLocalTransfer texture write
  * Convert some temporaries into variables.
  * use gcc 10
  * fix linux builds, we only need to link directly against libinotify.so on FreeBSD (perhaps other variants?)
  * Fix FreeBSD linking
  * Fix pselect call
  * update GamePadDeviceListener to support FreeBSD
  * update GamePadInputEventListener to support FreeBSD
  * add freebsd travis ci
  * remove branching from FCOR/FCAND/FCEQ
  * print the path when it fails to open
  * map host0 device to host
  * add rom0 device

-------------------------------------------------------------------
Wed Jun 10 18:55:05 UTC 2020 - i@guoyunhe.me

- Add BuildRequires: Mesa-libGLESv3-devel to fix arm build
- Update to version 0~git20200610:
  * Fedora32 build fix
  * std::string needs #include <string>
  * std::runtime_error needs #include <stdexcept>
  * std::runtime_error needs #include <stdexcept>
  * Make sure sticky flags arrive at the proper time.
  * Add test to check sticky flag handling.
  * Handle VU branching peculiarities found in Star Ocean 3.
  * Formatting niceties.
  * Implement ERSADD.
  * Spice up test case.
  * Add VU branch test.
  * Add label support in VuAssembler.
  * Cleanup.
  * Fix build error.
  * Fix formatting.
  * Enable linear filtering in some scenarios.
  * Linear texture sampling (not enabled yet).
  * Fix warnings.
  * Apply (0.5, 0.5) offset to snap on pixel grid.
  * Implement HWREG.
  * Add support for some missing pixel formats.

-------------------------------------------------------------------
Thu May 28 12:21:26 UTC 2020 - i@guoyunhe.me

- Update to version 0~git20200525:
  * fix FreeBSD builds
  * Add SSE & SSE2 compiler flags to Unix builds.
  * improve VU MOVE/RNEXT instruction
  * Disable resume/pause menu when executable is not loaded.
  * Add few test cases in MinMax test.
  * Clamp vectors before comparing in MINI/MAX.
  * Implement CIoman::Mkdir
  * A sample is 16-bits.
  * Implement ADDAq.
  * Prevent ITOF0 & ITOF12 from clobbering VF0.
  * Add constraint to CheckAsync matcher.
  * Handle SPU IRQs in CORE0 output area.
  * Updated README for Ubuntu builds
  * Update CodeGen submodule.
  * Update CodeGen submodule.
  * Update CodeGen submodule.
  * Use LoadFromRefIdx in ILW.
  * Update CodeGen submodule.
  * Use StoreAtRefIdx in ISW.
  * Use StoreAtRefIdx4 in QueueInFlagPipeline.
  * Update Dependencies submodule.
  * update submodules
  * silence nlohmann_json warning
  * silence warning
  * travis linux parallel build
  * LibMc2: Warn if optional functions are not found.
  * Make sure we can't ChDir out of the memory card's path.
  * Add quotes around paths.
  * Fix symbol error when building libretro core with gcc-8

-------------------------------------------------------------------
Mon May 04 20:19:37 UTC 2020 - i@guoyunhe.me

- Update to version 0~git20200503:
  * Only log scan process if we want to.
  * Code style fix.
  * Update Dependencies submodule.
  * Use non-throwing variant of directory_iterator.
  * Enclose directory listing in a try/catch block.
  * Log scanning process.
  * Fix code style.
  * Implement LoadModuleBufferAddress.
  * Implement CdGetReadPos.
  * Enable Tenkaichi test.
  * Fix code style.
  * Clarify comment.
  * Add some invalidation range tests.
  * Make GetTransferInvalidationRange function public.
  * Add test base class.
  * Extract invalidation range computation logic.
  * Constify some functions.
  * Change check method.
  * Add GsAreaTest.
  * Allow Vulkan instance to be created without validation layer active.
  * Update Framework submodule.
  * Fix code style.
  * Allow selecting a specific device to be used by Vulkan.
  * Save & load device/vendor IDs.
  * Use suitable physical device.
  * Account for textures with 0 buffer width
  * Display available devices.
  * Fix build errors.
  * Add missing files.
  * Add Vulkan DeviceInfo module.
  * Update Framework submodule.
  * Use GetStructPtr.
  * Implement alternative GS CSR register
  * Fix edge cases in RegisterVblankHandler
  * Implement ReleaseVblankHandler in VBlank IOP module
  * Implement missing blendmode 1002
  * document CCdvdfsv::Invoke592 method 0 structure
  * Fix stylin issues.
  * Update CodeGen submodule.
  * Use GetStructPtr to obtain VsyncFlag locations.
  * Add MAX in test.
  * Implement MINI/MAX VU operations differently.
  * Setup denormal handling mode in test.
  * Add VU MinMax test.
  * Remove dead code.
  * Handle alternate WriteFile function.
  * Handle error case in ReadFile.
  * Test signed values.
  * Fix some return values.
  * Hook Mc2 functions when specific IOP modules are loaded.
  * Make sure SearchFile returns not found if file is not there.
  * Tweak the function detection heuristic.
  * Hook Mc2 functions somewhere else.
  * Implement ChDir.
  * Clean ReadFile handling.
  * Use defines for operation results.
  * Flesh out GetDir implementation.
  * Function 5 is ReadFileAsync.
  * Fix some problems in GetDir.
  * Default to port 0.
  * Add WriteFileAsync.
  * Add MkDirAsync and CreateFileAsync.
  * Add some basic error checking.
  * Use constant for memory card port.
  * Find function pointers using an heuristic.
  * Hook the underlaying check async function.
  * Fix function id.
  * Initial version of libmc2 HLE.
  * MC investigation again.
  * MC investigation.
  * Various hooks that made the SIO2 test working.
  * More MemoryCard SIO2 investigation.
  * Memory Card SIO2 protocol investigation.
  * Add DMACMAN and SECRMAN HLE modules.
  * Fix strip command line.
  * Add error check and logging in RetroArch Android build script.
  * Build using NDK r21.
  * Update Gradle & Gradle Plugin.
  * update model after checking all s3 entries
  * moving warning call to its own function
  * display s3 bootables as they're proccessed
  * Bootable dialog, add statusbar
  * prevent dialog closure when proccessing s3 bootables
  * explicitly set S3 bootable std::async flag to std::launch::async
  * move S3 bootable processing to std::async
  * Handle splitting of image transfers that may have addresses that go out of bounds.
  * Flush command buffer when we're about to read GS RAM.
  * Update CodeGen submodule.
  * Update Nuanceur submodule.
  * Code style fixes.
  * Update mainwindow.cpp
  * Update main.cpp
  * Use Xenial for Travis ARM64 builds.
  * Update CodeGen submodule.
  * Update CodeGen submodule.
  * Mask GS Regs
  * Update Framework submodule
  * Code style fixes.
  * Add PSMZ16 swizzle table.
  * Implement transfer read handlers.
  * Fix validation warning.
  * Remove annoying asserts.
  * Cache CLUT transfers. Allow previous transfers to be reused.
  * Store CLUT in a buffer instead of image.
  * Add PSMT8 Local to Local transfers.
  * Fix destination alpha test.
  * Add destination alpha test for 32-bit frame buffers.
  * Add destination alpha test.
  * Add missing alpha test condition.
  * Rename VulkanTransfer to VulkanTransferHost.
  * More pixel formats.
  * Basic implementation of local to local transfers.
  * Load and save CBP0/1 state.
  * Add const parameter to Copy.
  * Use enable_testing earlier to allow CodeGenTestSuite to be added to tests.
  * Add "denormals are zero" check in IsZero function.
  * Code style fixes.
  * Enable flush-to-zero mode on AArch64.
  * Limit intrinsic usage to x86 platforms.
  * Set proper denormal handling modes.
  * we dont want to auto default to s3 scan button
  * display serial number in list view
  * show disc path in listview, can be useful to distinguish between different copies
  * Qt check image extension for type, instead of header, we assume images downloaded from TGDB are jpg, so it can fail if the image is png with jpg extension
  * check to see if bootable is listed before trying to get diskId, speed up scan, especially on aws S3 buckets
  * Qt: list S3 games in bootables
  * s3 listing to own function
  * simplify AppImage packaging process
  * statically link against libgcc & libstdc++ on unix platforms
  * Add a stub for FileIO ccode function.
  * Also make sure VU mem and Micro mem are aligned.
  * Make sure our virtual machine is allocated with proper alignment.
  * Code style fixes.
  * Remove float types from VuTests.
  * Check broadcast elements in FMAC stall detection.
  * Rename functions for more consistency.
  * Cleanup.
  * Update flag skip compile hint algorithm.
  * Go back to the static adjustment approach.
  * Add another stall test.
  * Add some annotations to the test.
  * Move helper functions.
  * Another slightly different approach.
  * Add stall test case.
  * Slightly different approach.
  * Add very basic FMAC hazard detection.
  * Improve README
  * save input profile before loading different profile
  * allow deleting of all profile, but not the last remaining one
  * fix profile delete, note: removing item triggers index change, which triggers profile change, which triggers old profile config save, thus recreating the file again
  * initial Gamepad profiles support
  * Enable protecting RAM pages to detect modified code on iOS.
  * Add some asserts.
  * Update submodules.
  * use default margining value
  * support region s3 buckets
  * Properly handle SPU DMA stop mode.
  * Return error in CdRead is command is already pending.
  * Add comment to say which game requires the delay.
  * Add delay to NDiskReady command.
  * Upgrade Android Gradle plugin version.
  * Another attempt at fixing mount's output read issue.
  * block signal to gs combobox during population, else it will always call currentIndexChanged(0) forcing the option to OpenGL even when not changed
  * move gs label updating to own function, update gs label when handler is changed through the setting menu
  * use enum for gs handler index
  * Don't cache blocks that have breakpoints.
  * Add log.
  * Fix code style.
  * Better skip flags hint computation.
  * Fix crash.
  * Update test with breaking case.
  * Add simple flags test.
  * Move hints computation to a function.
  * Skip flags update when we're sure result won't be used.
  * directly copy GS states
  * hide gs selection+warning when vulkan is not available during build
  * make GS selectable, add toggle option
  * dont fail to load game info, if it has no overview
  * allow replacing GSHandler on the fly
  * create render window manually, to avoid dependency on showEvent()
  * Code stylin'.
  * Make Vulkan optional in the build.
  * Install proper package for ARM64 build.
  * Use proper platform def.
  * Fix Linux build.
  * Add fog support.
  * Add pipeline barrier between draw calls.
  * Don't send a resize event if nothing has been exposed.
  * Catch error when booting from command line.
  * Linux Vulkan Surface Creation.
  * Build using latest Vulkan SDK.
  * Code style fixes.
  * Tweak settings dialog to make text visible on Windows and macOS.
  * Add less than alpha test.
  * Merge render passes.
  * Implement PSMCT24 transfers.
  * Disable synchronous queue submits on macOS.
  * Add support for CLUT CSM2 mode.
  * Make accessors const.
  * PSMCT16 CLUT support.
  * Implement RGB_ONLY alpha test fail.
  * Handle special alpha test case.
  * Implement presentation params.
  * Remove duplicated code.
  * Fix HIGHLIGHT2 texture function.
  * Divide by Q for sprites.
  * Add missing PSMCT16 case.
  * Factor out the CLD processing logic and use it in Vulkan.
  * Add not equal alpha test.
  * Recreate swapchain if presentation size changed.
  * Create & destroy semaphore at same time as swap chain.
  * Cleanup.
  * Remove dead code.
  * Increase vertex buffer size to get rid of syncs.
  * Make alpha testing active.
  * Move color and depth update code to functions.
  * Update submodule.
  * Prepare for alpha testing.
  * Add pipeline barriers to prevent flickering issues.
  * More PSMCT24 texture handling.
  * Handle PSMCT24 frame buffers.
  * Add support for PSMT8H/PSMT4HL/PSMT4HH.
  * Add support for PSMT4 transfers.
  * Add tex coord clamping support.
  * Remove projMatrix from draw push constants.
  * Fix mask.
  * Make the GPU side RAM read/writeable by other GS operations.
  * Add missing PSMCT16 cases.
  * Remove redundant definitions.
  * Add missing file in CMakeLists.txt
  * Update submodule.
  * Prevent redundant CLUT loads.
  * Make sure we flush vertices before transfer.
  * Fix command buffer leak.
  * Allow more than one frame to be in-flight.
  * Don't wait for transfers to complete.
  * Don't reset descriptor pool.
  * Save descriptor sets.
  * Save Present descriptor sets.
  * Command buffers are one time submit.
  * Add offset.
  * Use Generic Buffer in Transfer.
  * Handle DECAL.
  * Fix viewport size.
  * Add texture alpha expansion.
  * Update Nuanceur submodule.
  * Make textureColor a variable.
  * Increase vertex buffer size.
  * Add submission counter.
  * Fix color masking implementation.
  * Add check.
  * Add support for Highlight2 texture function.
  * Handle transfers that are not divisible by compute shader local size.
  * Update Nuanceur submodule.
  * Use palette colors for PSMT4 textures.
  * Simplify Memory_Read4.
  * Add missing break.
  * Add support for 16-bit color mask.
  * Add fixed alpha blending parameter.
  * Submodule update.
  * Add basic color write mask support.
  * Handle some texture functions.
  * Prepare alpha testing.
  * Depth testing.
  * Add Memory Read/Write 24.
  * Compute depth address.
  * Passthrough depth value.
  * Set depth test function in caps.
  * Fix warnings.
  * Make some definitions public.
  * PSMZ32 swizzle table.
  * Prepare for depth.
  * Add descriptor set pooling in draw module.
  * Divide tex coord by Q.
  * Fix version number again.
  * Add checkbox to enable/disable Vulkan through UI.
  * Mini fixes.
  * Fix host to local transfer code to allow OpenGL to work again.
  * Update Nuanceur submodule.
  * Keep apiVersion to 1.0.
  * Embed MoltenVK in macOS bundle.
  * Don't enable validation layers on macOS/iOS.
  * Add padding to CLUT load params.
  * Add padding to xfer params.
  * Output dst color for debugging purposes.
  * Use buffer for GS memory.
  * Handle PSMCT24 in present.
  * Make Vulkan GS handler enableable through a setting.
  * Fix indices.
  * Remove VulkanWindow from build if not supporting Vulkan.
  * Generalized blending.
  * Fix Memory_Write16.
  * Allow drawing to PSMCT16S framebuffers.
  * Allow presenting PSMCT16S framebuffers.
  * Compile GSH_VulkanQt only if Vulkan is enabled.
  * Cleanup.
  * Enable GSH Vulkan through CMakeLists.
  * WIP support for more image formats.
  * Support IDX4 clut loads.
  * Add checks.
  * Load more swizzle tables.
  * Implement BuildPageOffsetTable for PSMT4.
  * Code style fixes.
  * Don't build Vulkan for AArch64 Linux.
  * Handle out of date swapchain.
  * Linux build fixes.
  * Download Vulkan SDK on Travis.
  * Set scissor.
  * Add basic alpha blending.
  * Use push constants for present parameters.
  * Use swizzle tables for memory accesses.
  * Add swizzle tables.
  * Add getter for page offsets.
  * Use image helper.
  * Use pipeline cache.
  * Cleanup.
  * Move handling of the frame's command buffer in a separate class.
  * Read from CLUT when drawing.
  * Execute CLUT load.
  * Cleanup.
  * Initialize CLUT image.
  * Update CMakeLists.txt
  * Use pipeline cache.
  * Add CLUT loader module.
  * Remove hard coded local size in transfer compute shader.
  * Preparing for CLUT support.
  * Modulate multiplies by 2.
  * Update submodules following rebase.
  * Move draw parameters to push constants.
  * Support another texture format.
  * Allow multiple transfer pipelines.
  * Add GetPixelAddress helper.
  * Use texture size when reading texels.
  * Add memory read/write utils.
  * Add memory utils.
  * Very basic texturing.
  * Laying the groundwork for texturing.
  * Flip Y output render.
  * Change the vertex buffering strategy.
  * Enable sprites.
  * Draw in the framebuffer area.
  * Update memory management code.
  * Present now shows display framebuffer area.
  * Minor cleanup.
  * Free vertex buffer properly.
  * Use buffer helper.
  * More work towards memory transfers.
  * Setting the bases for transfers.
  * More color channels.
  * Updates following rebase.
  * Remove test code.
  * Update Nuanceur submodule.
  * Stop using Qt's VkInstance.
  * Specify that we want to enable fragment shader interlock.
  * Enable extensions and features.
  * Bind temporary image view to make rendering work on MoltenVK.
  * Use invocation interlock.
  * Move reseting.
  * Draw triangles with input colors.
  * Basic triangle draw.
  * Remove test code.
  * Starting primitive drawing.
  * Some shades of red.
  * Download and setup Vulkan SDK on macOS Travis.
  * Fix Win32 build.
  * Update VulkanSDK version used on AppVeyor.
  * Add macOS Vulkan init code.
  *  Different shade of red.
  * Test storage image reading.
  * Update submodule.
  * Create descriptor set layout for draw pipeline.
  * Create descriptor pool.
  * Moved all presentation related code in a class.
  * First triangle draw!
  * Fix indent.
  * Basic shaders and graphics pipeline.
  * Create present render pass.
  * Add bases for rendering code.
  * Query surface extents.
  * Use properly initialized structures.
  * Enable validation layers in debug.
  * Destroy swap chain.
  * Remove hardcoded surface format.
  * Download VulkanSDK only if it's not there.
  * Cache VulkanSDK for faster AppVeyor builds.
  * Install VulkanSDK on AppVeyor.
  * Let Framework's Vulkan CMakeList handle the Vulkan dependency.
  * Moved resource freeing stuff in proper function.
  * Use Framework's Vulkan wrapper.
  * Vulkan Initialization + Qt.
  * Remove unused dtor.
  * Create an API agnostic OutputWindow class.
  * cleanup
  * capture screenshot directly from display framebuffer, at rendering resolution
  * Fix color issues in iOS PsfPlayer UI.
  * Various iOS UI fixes: - Fixed menu button placement for iPhone X layouts. - Fixed dark mode support.
  * Some adjustments for iPhone X screen layout.
  * Use TravisCI deploy v2.
  * Add move overload to SendGSCall.
  * rename windows libretro core, to distinguish between releases, note RA requires both to be named play_libretro.dll, however, that'd cause upload conflict
  * fix libretro ios deploy
  * Update TheGamesDbClient.cpp
  * libretro support elf loading.... this id currently duplicating code from BootablesProcesses
  * Code style fixes.
  * remove direct access to CMailBox in Android & DirectX GS
  * fix libretro deploy
  * fix android libretro build
  * fix cmake path
  * libretro: set lower audio buffer
  * make mutex a class object
  * Cleanup
  * change to unix line endings
  * libretro: cmake: add iOS suffix
  * cleanup
  * Update android libretro bash build scrip
  * libretro: add _android.so suffix to shared library, its how retroarch expect the libraries to be named
  * Libretro: Fix iOS build
  * cleanup
  * Libretro: update input to support bitmasking
  * Update libretro.h
  * Libretro: Audio: replace queue with buffer, remove audio mute option (thats handled by RA)
  * Libretro: move audio processing to main thread
  * Libretro: Remove audio dependencies
  * poll button state on retro_run() thread... to avoid race condition, as these methods are not thread safe
  * libretro: update supported format
  * Disable early logs, set storage path for android
  * Code style fixes.
  * compile with PIC when building libretro cores... maybe enable it by default?
  * Appveyor: Build an deploy Windows Libretro Core
  * Travis: build libretro cores
  * Fix iOS build
  * Fix Android build
  * Select correct OpenGL version
  * Add Android Audio support
  * Cleanup
  * Prepare CMakeLists.txt for Android/iOS builds
  * Update CMakelists.txt
  * Prepare for non windows builds
  * libretro: add save state support
  * libretro: pass ram, for cheat system
  * Cleanup: fix multiplier selection, set base resolution to PS2 default, use internal rendering resolution before rendering
  * Initial Libretro implementation
  * allow GS to run in non-/threaded mode

-------------------------------------------------------------------
Thu Jan  2 10:54:22 UTC 2020 - Yunhe Guo <i@guoyunhe.me>

- Remove unrar source

-------------------------------------------------------------------
Thu Jan 02 10:50:43 UTC 2020 - i@guoyunhe.me

- Update to version 0~git20191220:
  * Make cdvd_ee_driver stoppable and unloadable, even if it doesn't exist.
  * Add a no link threshold for recycled blocks.
  * Recycle compiled blocks.
  * Remove boost dependency
  * use Iop::PathUtils::MakeHostPath() in CDirectoryDevice
  * move MakeHostPath(...) to seperate namespace
  * use MakeHostPath(...) in GetEntSpace(...)

-------------------------------------------------------------------
Fri Nov 29 15:50:24 UTC 2019 - i@guoyunhe.me

- Update to version 0~git20191127:
  * add missing break in CStdio::PrintFormatted(...)
  * rearrange IOP memory reserve to reduce foot print
  * reserve IOP Mem addr 0x480 for intr handler table, set CDVDROM fake handler
  * dont include libc, as it will cause issues with newer OSs
  * Update submodules to solve GLEW issue
  * Code style fixes.
  * Make sure GetAvailableBits won't return a negative value.
  * Make the change to IPU_CMD register behavior less intrusive.
  * Remove useless asserts.
  * Add default values to intra & non-intra IQ matrices.
  * Various IPU tests
  * Update submodules.
  * Code style fix.
  * Add exception for VU SUB instruction which is meant to clear a register.
  * Enable receiving IPU DMA transfers from SPR.
  * Fillchar can only be 0 or a space.
  * cleanup
  * Fix path
  * Linux: bundle libc and libstdc++ with AppImage to increase compatibility with older distros
  * prepare entire env before building, this should avoid odd failure, where you'd go through the entire build, but then fails to download needed binary for deployment

-------------------------------------------------------------------
Mon Nov  4 19:23:55 UTC 2019 - Yunhe Guo <i@guoyunhe.me>

- Use system library as much as possible

-------------------------------------------------------------------
Mon Nov 04 11:15:21 UTC 2019 - i@guoyunhe.me

- Update to version 0~git20191031:
  * Let's hope this is the last one.
  * Remove last remnants of boost.
  * Grab error code to prevent exception being thrown on Windows.
  * Remove more boost usage.
  * Remove boost::filesystem usage.
  * Update submodule.
  * Remove boost usage.
  * Replace boost header by system header.
  * Remove boost version number.

-------------------------------------------------------------------
Wed Oct 30 10:44:25 UTC 2019 - i@guoyunhe.me

- Update to version 0~git20191029:
  * Fix Linux build.
  * Change detecting scheme for S3 paths.
  * Change the path format used to specify images stored on S3.
  * Code style fixes.
  * Add missing include.
  * Update Framework submodule.
  * Don't store current working directory in a fs::path.
  * Also check ChDir's result.
  * Update path handling in MCSERV.
  * Code style fixes.
  * Fix iOS build.
  * Use helper function to get save modification time.
  * Remove unicode literals.
  * Remove boost filesystem header.
  * Add missing files to CMakeLists.
  * Android build fixes.
  * Use new time conversion function.
  * Remove boost::filesystem dependency.
  * Move misplaced include.
  * Add missing include.
  * Remove some more boost::filesystem remnants.
  * Remove wchar_t literals.
  * Remove boost::filesystem namespace rename.
  * Update submodules.
  * Remove usage of boost::filesystem.
  * Reorganise Travis script.
  * Add repo.
  * Build using GCC9 on TravisCI.
  * Fix Qt GLES builds
  * build arm64 on travis ci
  * Be granular also on VU microprogram upload.
  * Be a bit more granular when invalidating VU microprograms.
  * Code style fixes.
  * Check test validation algorithm.
  * Add missing file in CMakeLists.txt.
  * Make sure test fails in Release config.

-------------------------------------------------------------------
Sun Oct 20 11:11:58 UTC 2019 - i@guoyunhe.me

- Update to version 0~git20191019:
  * Also test on Linux and macOS.
  * Run tests after building.
  * update submodule, and references to it
  * Update README.md.
  * Fix screen orientation issues on iOS 13.
  * Prevent VF0 from being clobbered.
  * Install png and svg icons to correct location on Unix
  * Correct .desktop and icon file installation
  * Unix: install icon before .desktop file

-------------------------------------------------------------------
Wed Oct 16 07:37:38 UTC 2019 - i@guoyunhe.me

- Update to version 0~git20191015:
  * Code style fixes.
  * Prevent crashing when erasing something that's not there.
  * Remove extra VU state copies.
  * Make sure EE's and VU0's states are synced before starting VU0.

-------------------------------------------------------------------
Tue Oct 15 19:38:36 UTC 2019 - Yunhe Guo <i@guoyunhe.me>

- Initial version
