Index: argcomplete-1.12.2/test/test.py
===================================================================
--- argcomplete-1.12.2.orig/test/test.py
+++ argcomplete-1.12.2/test/test.py
@@ -1310,40 +1310,6 @@ class TestBashGlobal(TestBash):
         self._test_console_script(package=True, wheel=True)
 
 
-class TestTcsh(_TestSh, unittest.TestCase):
-    expected_failures = [
-        'test_unquoted_space',
-        'test_quoted_space',
-        'test_continuation',
-        'test_parse_special_characters',
-        'test_parse_special_characters_dollar',
-        # Test case doesn't work under tcsh, could be fixed.
-        'test_comp_point',
-    ]
-
-    def setUp(self):
-        sh = Shell('tcsh')
-        path = ' '.join([os.path.join(BASE_DIR, 'scripts'), TEST_DIR, '$path'])
-        sh.run_command('set path = ({0})'.format(path))
-        sh.run_command('setenv PYTHONPATH {0}'.format(BASE_DIR))
-        # 'dummy' argument unused; checks multi-command registration works
-        # by passing 'prog' as the second argument.
-        output = sh.run_command('eval `register-python-argcomplete --shell tcsh dummy prog`')
-        self.assertEqual(output, '')
-        # Register a dummy completion with an external argcomplete script
-        # to ensure this doesn't overwrite our previous registration.
-        output = sh.run_command('eval `register-python-argcomplete --shell tcsh dummy --external-argcomplete-script dummy`')
-        self.assertEqual(output, '')
-        self.sh = sh
-
-    def tearDown(self):
-        # The shell wrapper is fragile; exactly which exception is raised
-        # differs depending on environment.
-        with self.assertRaises((pexpect.EOF, OSError)):
-            self.sh.run_command('exit')
-            self.sh.run_command('')
-
-
 class TestFish(_TestSh, unittest.TestCase):
     expected_failures = [
         'test_parse_special_characters',
