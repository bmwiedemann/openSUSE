-------------------------------------------------------------------
Tue Aug 31 11:04:29 UTC 2021 - John Paul Adrian Glaubitz <adrian.glaubitz@suse.com>

- Update to 0.12.0
  * All calculations of stacksize now check for stack underflow to
    avoid segfault at runtime PR #69
  * Fix recursion limitations when compiling bytecode with numerous basic
    blocks. PR #57
  * Fix handling of line offsets. Issue #67, PR #71
  * Forbid an :class:`Instr` to hold an EXTENDED_ARG op_code PR #65
  * Forbid the use of :class:`ConcreteInstr` in :class:`Bytecode` and
    :class:`ControlFlowGraph` PR #65
    This is motivated by the extra complexity that handling possible EXTENDED_ARG
    instruction in those representation would bring (stack computation, etc)
  * Always remove EXTENDED_ARG when converting :class:`ConcreteBytecode` to
    :class:`Bytecode` PR #65
  * This is equivalent to say that the :class:`ConcreteBytecode` converted to
    :class:`Bytecode` was generated by :meth:`ConcreteBytecode.from_code`
    with extended_args=False
  * :class:`Instr` now has a new method :meth:`Instr.pre_and_post_stack_effect`
    for checking the prerequisite stack size of an operation PR #69
  * :meth:`_compute_stack_size` now uses :meth:`Instr.pre_and_post_stack_effect`
    to compute the stack size to reject code that will lead to runtime segfault
    caused by stack underflow PR #69

-------------------------------------------------------------------
Thu Apr  9 11:29:55 UTC 2020 - pgajdos@suse.com

- initial version 0.11.0, required by python-enaml 

