---
 libs/luajit/configure                         |    9 +++++++++
 libs/luajit/m4/lj-system.m4                   |    8 +++++++-
 texk/dvisvgm/dvisvgm-src/libs/xxHash/xxhash.h |    6 +++---
 3 files changed, 19 insertions(+), 4 deletions(-)

--- libs/luajit/configure
+++ libs/luajit/configure	2020-04-30 15:42:15.998038368 +0000
@@ -15602,6 +15602,15 @@ fi
                 if test "x$LJHOST" = xPS3
 then :
   echo '-D PPE -D TOC' >>dynasm_flags
+fi
+                if grep 'LJ_ARCH_PPC_OPD 1' conftest.i >/dev/null 2>&1; then :
+  echo '-D OPD' >>dynasm_flags
+fi
+                if grep 'LJ_ARCH_PPC_OPDENV 1' conftest.i >/dev/null 2>&1; then :
+  echo '-D OPDENV' >>dynasm_flags
+fi
+                if grep 'LJ_ARCH_PPC_ELFV2 1' conftest.i >/dev/null 2>&1; then :
+  echo '-D ELFV2' >>dynasm_flags
 fi ;; #(
   *) :
      ;;
--- libs/luajit/m4/lj-system.m4
+++ libs/luajit/m4/lj-system.m4	2020-04-30 15:42:03.782274022 +0000
@@ -87,7 +87,13 @@ AS_CASE([$LJARCH],
                 AS_IF([grep 'LJ_ARCH_PPC64 ' conftest.i >/dev/null 2>&1],
                       [DASM_ARCH=ppc64])
                 AS_IF([test "x$LJHOST" = xPS3],
-                      [echo '-D PPE -D TOC' >>dynasm_flags])])
+                      [echo '-D PPE -D TOC' >>dynasm_flags])
+                AS_IF([grep 'LJ_ARCH_PPC_OPD 1' conftest.i >/dev/null 2>&1],
+                      [echo '-D OPD' >>dynasm_flags])
+                AS_IF([grep 'LJ_ARCH_PPC_OPDENV 1' conftest.i >/dev/null 2>&1],
+                      [echo '-D OPDENV' >>dynasm_flags])
+                AS_IF([grep 'LJ_ARCH_PPC_ELFV2 1' conftest.i >/dev/null 2>&1],
+                      [echo '-D ELFV2' >>dynasm_flags])])
 
 AS_IF([test "x$build" != "x$host"],
  [AS_CASE([$LJHOST],
| --- texk/dvisvgm/dvisvgm-src/libs/xxHash/xxhash.h
| +++ texk/dvisvgm/dvisvgm-src/libs/xxHash/xxhash.h	2022-10-28 08:55:05.465324386 +0000
| @@ -4128,7 +4128,7 @@ XXH3_accumulate_512_vsx(  void* XXH_REST
|                      const void* XXH_RESTRICT secret)
|  {
|      /* presumed aligned */
| -    unsigned long long* const xacc = (unsigned long long*) acc;
| +    unsigned int* const xacc = (unsigned int*) acc;
|      xxh_u64x2 const* const xinput   = (xxh_u64x2 const*) input;   /* no alignment restriction */
|      xxh_u64x2 const* const xsecret  = (xxh_u64x2 const*) secret;    /* no alignment restriction */
|      xxh_u64x2 const v32 = { 32, 32 };
| @@ -4144,7 +4144,7 @@ XXH3_accumulate_512_vsx(  void* XXH_REST
|          /* product = ((xxh_u64x2)data_key & 0xFFFFFFFF) * ((xxh_u64x2)shuffled & 0xFFFFFFFF); */
|          xxh_u64x2 const product  = XXH_vec_mulo((xxh_u32x4)data_key, shuffled);
|          /* acc_vec = xacc[i]; */
| -        xxh_u64x2 acc_vec        = vec_xl(0, xacc + 2 * i);
| +        xxh_u64x2 acc_vec        = (xxh_u64x2)vec_xl(0, xacc + 2 * i);
|          acc_vec += product;
|  
|          /* swap high and low halves */
| @@ -4154,7 +4154,7 @@ XXH3_accumulate_512_vsx(  void* XXH_REST
|          acc_vec += vec_xxpermdi(data_vec, data_vec, 2);
|  #endif
|          /* xacc[i] = acc_vec; */
| -        vec_xst(acc_vec, 0, xacc + 2 * i);
| +        vec_xst((xxh_u32x4)acc_vec, 0, xacc + 2 * i);
|      }
|  }
|  
