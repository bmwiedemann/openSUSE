-------------------------------------------------------------------
Thu Oct 15 21:57:47 UTC 2020 - Mia Herkt <mia@0x0.st>

- Update to version 1.14.0
This release still only contains partial session support for
QtWebEngine 5.15. It's still recommended to run against Qt 5.15
due to the security patches contained in it -- for most users,
the added workarounds seem to work out fine. A rewritten session
support will be part of qutebrowser v2.0.0, tentatively planned
for the end of the year or early 2021.

Changed
  * The content.media_capture setting got split up into three more
    fine-grained settings, content.media.audio_capture,
    .video_capture and .audio_video_capture. Before this change,
    answering "always" to a prompt about e.g. audio capturing would
    set the content.media_capture setting, which would also allow
    the same website to capture video on a future visit. Now every
    prompt will set the appropriate setting, though existing
    content.media_capture settings in autoconfig.yml will be
    migrated to set all three settings. To review/change previously
    granted permissions, use :config-diff and e.g.
    :config-unset -u example.org content.media.video_capture.
  * The main window's (invisible) background color is now set to
    transparent. This allows using the alpha channel in
    statusbar/tabbar colors to get a partially transparent
    qutebrowser window on a setup which supports doing so.
  * If QtWebEngine is compiled with PipeWire support and
    libpipewire is installed, qutebrowser will now support screen
    sharing on Wayland. Note that QtWebEngine 5.15.1 is needed.
  * When :undo is used with a count, it now reopens the count-th
    to last tab instead of the last one. The depth can instead be
    passed as an argument, which is also completed.
  * The default completion.timestamp_format now also shows the
    time.
  * :back and :forward now take an optional index which is
    completed using the current tab's history.
  * The time a website in a tab was visited is now saved/restored
    in sessions.
  * When attempting to download a file to a location for which
    there's already a still-running download, a confirmation prompt
    is now displayed.
  * :completion-item-focus now understands next-page and prev-page
    with corresponding <PgDown> / <PgUp> default bindings.
  * When the last private window is closed, all private browsing
    data is now cleared.
  * When config.source(...) is used with a --config-py argument
    given, qutebrowser used to search relative files in the config
    basedir, leading to them not being found when using a shared
    config.py for different basedirs. Instead, they are now
    searched relative to the given config.py file.
  * navigate prev ([[) and navigate next (]]) now recognize links
    with nav-prev and nav-next classes, such as those used by the
    Hugo static site generator.
  * When tabs.favicons is disabled but tabs.tabs_are_windows is
    set, the window icon is still set to the page's favicon now.
  * Dark mode (colors.webpage.darkmode.*) is now supported with
    Qt 5.15.2 (which is not released yet).
  * The default for the darkmode policy.images setting is now set
    to smart which fixes issues with e.g. formulas on Wikipedia.
  * The readability-js userscript now adds some CSS to improve the
    reader mode styling in various scenarios:
    + Images are now shrinked to the page width, similarly to what
      Firefox' reader mode does.
    + Some images ore now displayed as block (rather than inline)
      which is what Firefox' reader mode does as well.
    + Blockquotes are now styled more distinctively, again based
      on the Firefox reader mode.
    + Code blocks are now easier to distinguish from text and
      tables have visible cell margins.
  * The readability-js userscript now supports hint userscript
    mode.

Added
  * New argument strip for :navigate which removes queries and
    fragments from the current URL.
  * :undo now has a new -w / --window argument, which can be used
    to restore closed windows (rather than tabs). This is bound to
    U by default.
  * :jseval can now take javascript:... URLs via a new --url flag.
  * New replacement {aligned_index} for tabs.title.format and
    format_pinned which behaves like {index}, but space-pads the
    index based on the total numbers of tabs. This can be used to
    get aligned tab texts with vertical tabs.
  * New command :devtools-focus (bound to wIf) to toggle keyboard
    focus between the devtools and web page.
  * The --target argument to qutebrowser now understands a new
    private-window value, which can be used to open a private
    window in an existing instance from the commandline.
  * The :download-open command now has a new --dir flag, which can
    be used to open the directory containing the downloaded file.
    An entry to do the same was also added to the context menu.
  * Messages are now wrapped when they are too long to be displayed
    on a single line.
  * New possible --debug-flag values:
    + wait-renderer-process waits for a SIGUSR1 in the renderer
      process so a debugger can be attached.
    + avoid-chromium-init allows using --version without needing
      a working QtWebEngine/Chromium.

Fixed
  * A URL pattern with a *. host was considered valid and matched
    all hosts. Due to keybindings like tsH toggling scripts for
    *://*.{url:host}/*, invoking them on pages without a host
    (e.g. about:blank) could result in accidentally
    allowing/blocking JavaScript for all pages. Such patterns are
    now considered invalid, with existing patterns being
    automatically removed from autoconfig.yml.
  * When scrolling.bar was set to overlay (the default),
    qutebrowser would internally override any enable-features=...
    flags passed via qt.args or --qt-flag. It now correctly
    combines existing enable-feature flags with internal ones.
  * Elements with an inherited contenteditable attribute now
    trigger insert mode and get hints assigned correctly.
  * When checkmarks, radio buttons and some other elements are
    styled via the Bootstrap CSS framework, they now get hints
    correctly.
  * When the session file isn't writable when qutebrowser exits,
    an error is now logged instead of crashing.
  * When using -m with the qute-lastpass userscript, it
    accidentally matched URLs containing the match as substring.
    This is now fixed.
  * When a filename is derived from a page's title, it's now
    shortened to the maximum filename length permitted by the
    filesystem.
  * :enter-mode register crashed since v1.13.0, it now displays
    an error instead.
  * With the QtWebKit backend, webpage resources loading certain
    invalid URLs could cause a crash, which is now fixed.
  * When :config-edit is used but no config.py exists yet, the file
    is now created (and watched for changes properly) before
    spawning the external editor.
  * When hint mode was entered from outside normal mode, the status
    bar was empty instead of displaying the proper text.
    This is now fixed.
  * When entering different modes too quickly (e.g. pressing fV),
    the statusbar could end up in a confusing state. This is now
    fixed.
  * When qutebrowser quits, running downloads are now cancelled
    properly.
  * The site-specific quirk for web.whatsapp.com has been updated
    to work after recent changes in WhatsApp.
  * Highlighting in the completion now works properly when UTF-16
    surrogate pairs (such as emoji) are involved.
  * When a windowed inspector is clicked, insert mode now isn't
    entered anymore.
  * When :undo is used to re-open a tab, but tabs.tabs_are_windows
    was set between closing and undoing the close, qutebrowser
    crashed. This is now fixed.
  * With QtWebEngine 5.15.0, setting the darkmode image policy to
    smart leads to renderer process crashes. The offending setting
    value is now ignored with a warning.
  * Fixes for the qute-pass userscript:
    + With newer gopass versions, a deprecation notice was copied
      as password due to qute-pass using it in a deprecated way.
    + The --password-store argument didn't actually set
    + PASSWORD_STORE_DIR for pass, resulting in qute-pass finding
      matches but the underlying pass not finding matching
      passwords.

-------------------------------------------------------------------
Fri Jul 17 19:42:28 UTC 2020 - Mia Herkt <mia@0x0.st>

- Update to version 1.13.1
Fixed
  * With Qt 5.14, shared workers are now disabled. This works
    around a crash in QtWebEngine on certain sites (like the Epic
    Games Store or the Unreal Engine page).
  * When a window is closed, the tab it contains are now correctly
    shut down (closing e.g. any dialogs which are still open for
    those tabs).
  * The Qt 5.15 session workaround now loads the correct (rather
    than the last) page when :back was used before saving a
    session.
  * Certain autoconfig.yml with an invalid structure could lead to
    crashes, which are now fixed.
  * Ever since Qt 5.9, when input.mouse.rocker_gestures was
    enabled, the context menu still was shown when clicking the
    right mouse button, thus preventing the rocker gestures.
    This is now fixed.
  * Clicking the inspector switched from existing modes (such as
    passthrough) to normal mode since v1.13.0. Now insert mode is
    only entered when the inspector is clicked in normal mode.
  * Pulseaudio now shows qutebrowser's audio streams as qutebrowser
    correctly, rather than showing them as Chromium with some Qt
    versions.
  * If :help was called with a deprecated command (e.g. :help
    :inspector), the help page would show despite deprecated
    commands not being documented. This now shows an error instead.
  * The qute-lastpass userscript now filters out duplicate entries
    with --merge-candidates.

-------------------------------------------------------------------
Mon Jul  6 23:40:08 UTC 2020 - Mia Herkt <mia@0x0.st>

- Update to version 1.13.0
Deprecated
  * The :inspector command is deprecated and has been replaced by
    a new :devtools command (see below).

Removed
  * The :debug-log-level command was removed as it's replaced by
    the new logging.level.console setting.
  * The qute://plainlog special page got replaced by
    qute://log?plain - the names of those pages is considered an
    implementation detail, and :messages --plain should be used
    instead.

Changed
  * Changes to commands:
    + :config-write-py now adds a note about config.py files being
      targeted at advanced users.
    + :report now takes two optional arguments for bug/contact
      information, so that it can be used without the report window
      popping up.
    + :message now takes a --logfilter / -f argument, which is a
      list of logging categories to show.
    + :debug-log-filter now understands the full logfilter syntax.
  * Changes to settings:
    + fonts.tabs has been split into
      fonts.tabs.{selected,unselected} (see below).
    + statusbar.hide has been renamed to statusbar.show with the
      possible values being always (hide = False),
      never (hide = True) or in-mode (new, only show statusbar
      outside of normal mode).
    + The QtFont config type formerly used for fonts.tabs and
      fonts.debug_console is now removed and entirely replaced
      by Font. The former distinction was mainly an implementation
      detail, and the accepted values shouldn't have changed.
    + input.rocker_gestures has been renamed to
      input.mouse.rocker_gestures.
    + content.dns_prefetch is now enabled by default again,
      since the crashes it caused are now fixed (Qt 5.15)
      or worked around.
    + scrolling.bar supports a new overlay value to show an overlay
      scrollbar, which is now the default. On unsupported
      configurations (on Qt < 5.11, with QtWebKit or on macOS),
      the value falls back to when-searching or never (QtWebKit).
    + url.auto_search supports a new schemeless value which always
      opens a search unless the given URL includes an explicit
      scheme.
  * New handling of bindings in hint mode which fixes various bugs
    and allows for single-letter keybindings in hint mode.
  * The statusbar now shows partial keychains in all modes
    (e.g. while hinting).
  * New t[Cc][Hh] default bindings which work similarly to the
    t[Ss][Hh] bindings for JavaScript but toggle cookie permissions
  * The tor_identity userscript now takes the password via a -p
    flag and has a new -c flag to customize the Tor control port.
  * Small performance improvements.

Added
  * New settings:
    + logging.level.ram and logging.level.console to configure the
      default logging levels via the config.
    + fonts.tabs.selected and fonts.tabs.unselected to set the font
      of the selected tab independently from unselected tabs
      (e.g. to make it bold).
    + input.mouse.back_forward_buttons which can be set to false
      to disable back/forward mouse buttons.
  * New :devtools command (replacing :inspector) with various
    improved functionality:
    + The devtools can now be docked to the main window, by running
      :devtools left (wIh), bottom (wIj), top (wIk) or right (wIl).
      To show them in a new window, use :devtools window (wIw).
      Using :devtools (wi) will open them at the last used position
    + The devtool window now has a "qutebrowser developer tools"
      window title.
    + When a resource is opened from the devtools, it now opens in
      a proper qutebrowser tab.
    + If opened as a window, the devtools are now closed properly
      when the associated tab is closed.
    + When the devtools are clicked, insert mode is entered
      automatically.

Fixed
  * Crash when tabs.focus_stack_size is set to -1.
  * Crash when a pdf.js file for PDF.js exists, but viewer.html
    does not.
  * Crash when there's a feature permission request from Qt with an
    invalid URL (which happens due to a Qt bug with Qt 5.15 in
    private browsing mode).
  * Crash in rare cases where QtWebKit/QtWebEngine imports fail in
    unexpected ways.
  * Crash when something removed qutebrowser's IPC socket file and
    it's been running for 6 hours.
  * :config-write-py now works with paths starting with ~/... again
  * New site-specific quirk for a missing globalThis in Qt <= 5.12
    on Reddit and Spotify.
  * When ; is added to hints.chars, using hint labels containing ;;
    now works properly.
  * Hint letters outside of ASCII should now work.
  * When bindings.key_mappings is used with hints, it now works
    properly with letters outside of ASCII as well.
  * With Qt 5.15, the audible/muted indicators are not updated
    properly due to a Qt bug. This release adds a workaround
    so that at least the muted indicator is shown properly.
  * As a workaround for crashes with QtWebEngine versions between
    5.12 and 5.14 (inclusive), changing the user agent
    (content.headers.user_agent) exposed to JS now requires
    a restart. The corresponding HTTP header is not affected.

-------------------------------------------------------------------
Tue Jun  2 13:01:22 UTC 2020 - Mia Herkt <mia@0x0.st>

- Update to version 1.12.0
Removed
  * Support for using config.bind(key, None) in config.py to unbind
    a key was deprecated in v1.8.2 and is now removed.
    Use config.unbind(key) instead.
  * :yank markdown was deprecated in v1.7.0 and is now removed.
    Use :yank inline [{title}]({url}) instead.

Added
  * New :debug-keytester command, which shows a "key tester"
    widget. Previously, that was only available as a separate
    application via python3 -m scripts.keytester.
  * New :config-diff command which opens the qute://configdiff
    page.
  * New --debug-flag log-cookies to log cookies to the debug log.
  * New colors.contextmenu.disabled.{fg,bg} settings to customize
    colors for disabled items in the context menu.
  * New line selection mode (:toggle-selection --line), bound to
    Shift-V in caret mode.
  * New colors.webpage.darkmode.* settings to control Chromium's
    dark mode. Note that those settings only work with QtWebEngine
    on Qt >= 5.14 and require a restart of qutebrowser.

Changed
  * The content.cookies.accept setting now accepts URL patterns.
  * The :tab-focus command now has completion for tabs in the
    current window.
  * The bindings.key_mappings setting now maps <Ctrl+I> to the tab
    key by default.
  * :tab-give --private now detaches a tab into a new private
    window.

Fixed
  * Using :open -s now only rewrites http:// in URLs to https://,
    not other schemes like qute://.
  * When an unhandled exception happens in certain parts of the
    code (outside of the main thread), qutebrowser did crash or
    freeze when trying to show its exception handler.
    This is now fixed.
  * :inspector now works correctly when cookies are disabled
    globally.
  * When entering caret selection mode (v, v) very early before a
    page is loaded, an error is now shown instead of a crash
    happening.
  * The workaround for session loading with Qt 5.15 now handles
    sessions.lazy_restore so that the saved page is loaded instead
    of the "stub" page with no possibility to get to the web page.
  * A site specific quirk to allow typing accented characters on
    Google Docs was active for docs.google.com, but not
    drive.google.com. It is now applied for both subdomains.
  * With older graphics hardware (OpenGL < 4.3) with Qt 5.14 on
    Wayland, WebGL causes segfaults. Now qutebrowser detects that
    combination and suggests to disable WebGL or use XWayland.

-------------------------------------------------------------------
Fri May  8 08:32:56 UTC 2020 - Mia Herkt <mia@0x0.st>

- Update to version 1.11.1
  * CVE-2020-11054: After a certificate error was overridden by
  the user, qutebrowser displays the URL as yellow
  (colors.statusbar.url.warn.fg). However, when the affected
  website was subsequently loaded again, the URL was mistakenly
  displayed as green (colors.statusbar.url.success_https).
  While the user already has seen a certificate error prompt
  at this point (or set content.ssl_strict to false which is not
  recommended), this could still provide a false sense of security.
  This is now fixed.

-------------------------------------------------------------------
Wed May  6 05:00:29 UTC 2020 - Mia Herkt <mia@0x0.st>

- Update to version 1.11.0
Added
  * New settings:
    + search.wrap which can be set to false to prevent wrapping
      around the page when searching. With QtWebEngine, Qt 5.14
      or newer is required.
    + content.unknown_url_scheme_policy which allows controlling
      when an external application is opened for external links
      (never, from user interaction, always).
    + content.fullscreen.overlay_timeout to configure how long the
      fullscreen overlay should be displayed. If set to 0,
      no overlay is displayed.
    + hints.padding to add additional padding for hints.
    + hints.radius to set a border radius for hints
      (set to 3 by default).
  * New placeholders for url.searchengines values:
    + {unquoted} inserts the search term without any quoting.
    + {semiquoted} (same as {}) quotes most special characters,
      but slashes remain unquoted.
    + {quoted} (same as {} in earlier releases) also quotes slashes

Changed
  * First adaptions to Qt 5.15, including a stop-gap measure for
    session loading not working properly with it.
  * Searching now wraps around the page by default with QtWebKit
    (where it didn't before). Set search.wrap to false to restore
    the old behavior.
  * The {} placeholder for search engines
    (the url.searchengines setting) now does not quote slashes
    anymore, but other characters typically encoded in URLs still
    get encoded. This matches the behavior of search engines in
    Chromium. To revert to the old behavior, use {quoted} instead.
  * The content.windowed_fullscreen setting got renamed to
    content.fullscreen.window.
  * Mouse-wheel scrolling is now prevented while hints are active.
  * Changes to userscripts:
    + qute-bitwarden now has an optional --totp flag which can be
      used to copy TOTP codes to clipboard
      (requires the pyperclip module).
    + readability-js now opens readability tabs next to the
      original tab (using the :open --related flag).
    + readability-js now displays a favicon for readability tabs.
    + password_fill now triggers a change JavaScript event after
      filling the data.
  * The dictcli.py script now shows better error messages.
  * Minor performance improvements.

Deprecated
  * A warning about old Qt versions is now also shown with Qt 5.9
    and 5.10, as support for Qt < 5.11 will be dropped in
    qutebrowser v2.0.

Fixed
  * unsafeWindow is now defined for Greasemonkey scripts with
    QtWebKit.
  * The proxied window global is now shared between different
    Greasemonkey scripts (but still separate from the page's
    window), to match the original Greasemonkey implementation.
  * The --output-messages (-m) flag added in v1.9.0 now also works
    correctly when using :spawn --userscript.
  * :version and --version now don't crash if there's an (invalid)
    /etc/os-release file which has non-comment lines without
    a = character.
  * Scripts in scripts/ now report errors to stderr correctly,
    instead of using stdout.

-------------------------------------------------------------------
Sun Apr 19 16:08:25 UTC 2020 - Mia Herkt <mia@0x0.st>

- Update to version 1.10.2
Fixed
  * The WhatsApp workaround now also works when using WhatsApp in
    languages other than English.

-------------------------------------------------------------------
Sun Feb 16 12:38:59 UTC 2020 - Martin Herkt <9+suse@cirno.systems>

- Update to version 1.10.1
Fixed
  * Crash when saving data fails during shutdown (which was a
    regression introduced in v1.9.0).
  * Error while reading config.py when fonts.tabs or
    fonts.debug_console is set to a value including default_size.
  * When a state file contains invalid UTF-8 data, a proper error
    is now displayed.

Changed
  * When the Qt version changes (and also on the first start of
    v1.10.1 on Qt 5.14), service workers registered by websites are
    now deleted. This is done as a workaround for QtWebEngine
    issues causing crashes when visiting pages using service
    workers (such as Google Mail/Drive). No persistent data should
    be affected as websites can re-register their service workers,
    but a (single) backup is kept at webengine/Service Worker-bak
    in qutebrowser's data directory.
  * Better output on stdout when config errors occur.
  * The default for colors.statusbar.command.private.bg has been
    changed to a slightly different gray, as a workaround for a Qt
    issue where the cursor was invisible in that case.

-------------------------------------------------------------------
Thu Feb 13 16:14:30 UTC 2020 - Tom Warnke <tom+opensuse@toromtomtom.com>

- replace shebangs pointing to /usr/bin/bash with /bin/bash. This 
  removes the requirement /usr/bin/bash from the RPM.
  Fixes boo#1163276.

-------------------------------------------------------------------
Wed Feb  5 07:18:39 UTC 2020 - Martin Rey <mrey@suse.com>

- Update to version 1.10.0
Added
  * New colors.webpage.prefers_color_scheme_dark setting which
    allows forcing prefers-color-scheme: dark colors for websites
    (QtWebEngine with Qt 5.14 or newer).
  * New fonts.default_size setting which can be used to set a
    bigger font size for all UI fonts.

Changed
  * The fonts.monospace setting has been removed and replaced by
    fonts.default_family. The new default_family setting is
    improved in various ways:
    + It accepts a list of font families (or a single font family)
      rather than a comma-separated string. As an example, instead
      of fonts.monospace = "Courier, Monaco", use
      fonts.default_family = ["Courier", "Monaco"].
    + Since a list is now accepted as value, no quoting of font
      names with spaces is required anymore. As an example,
      instead of fonts.monospace = '"xos4 Terminus"', use
      fonts.default_family = 'xos4 Terminus'.
    + It is now empty by default rather than having a long list of
      font names in the default config. When the value is empty,
      the system's default monospaced font is used.
  * If monospace is now used in a font value, it's used literally
    and not replaced anymore. Instead, default_family is replaced
    as explained above.
  * The default content.headers.accept_language value now adds a
    ;q=0.9 classifier which should make the value sent more
    in-line with what other browsers do.
  * The qute-pass userscript now has a new --mode gopass switch
    which uses gopass rather than pass.
  * The tox -e mkvenv (or mkvenv-pypi) way of installing
    qutebrowser is now replaced by a mkvenv.py script. See the
    updated link:install{outfilesuffix}#tox[install instructions]
    for details.

Fixed
  * When quitting qutebrowser, components are now cleaned up
    differently. This should fix certain (rare) segmentation
    faults and exceptions when quitting, especially with the new
    exit scheme introduced in in PyQt5 5.13.1.
  * Added a workaround for per-domain settings (e.g. a JavaScript
    whitelist) not being applied in some scenarios with Qt 5.13
    and above.
  * Added additional site-specific quirk for WhatsApp Web.
  * The qute-pass userscript now works correctly when a
    PASSWORD_STORE_DIR ending with a trailing slash is given.

-------------------------------------------------------------------
Thu Jan  9 22:24:07 UTC 2020 - Martin Herkt <9+suse@cirno.systems>

- Update to version 1.9.0
Added
  * Initial support for Qt 5.14.
  * New content.site_specific_quirks setting which enables
    workarounds for websites with broken user agent parsing
    (enabled by default, see the "Fixed" section for fixed
    websites).
  * New qt.force_platformtheme setting to force Qt to use a given
    platform theme.
  * New tabs.tooltips setting which can be used to disable hover
    tooltips for tabs.
  * New settings to configure the appearance of context menus:
    + fonts.contextmenu
    + colors.contextmenu.menu.bg
    + colors.contextmenu.menu.fg
    + colors.contextmenu.selected.bg
    + colors.contextmenu.selected.fg

Changed
  * The content.headers.user_agent setting now is a format string
    with the default value resembling the behavior of it being set
    to null before. This slightly changes the sent user agent for
    QtWebKit: Instead of mentioning qutebrowser and its version
    it now mentions the Qt version.
  * The qute-pass userscript now has a new --extra-url-suffixes
    (-s) argument which passes extra URL suffixes to the tldextract
    library.
  * A stack is now used for :tab-focus last rather than just saving
    one tab. Additionally, :tab-focus now understands stack-prev
    and stack-next arguments to traverse that stack.
  * :hint now has a new right-click target which allows
    right-clicking elements via hints.
  * The Terminus font has been removed from the default monospace
    fonts since it caused trouble with HighDPI setups. To get it
    back, add either "xos4 Terminus" or Terminus (depending on
    fontconfig version) to the beginning of the fonts.monospace
    setting.
  * As a workaround for a Qt bug causing a segfault, desktop
    sharing is now automatically rejected on Qt versions before
    5.13.2. Note that screen sharing still won't work on Linux
    before Qt 5.14.
  * Comment lines in quickmarks/bookmarks files are now ignored.
    However, note that qutebrowser will overwrite those files if
    bookmark/quickmark commands are used.
  * Reopening PDF.js pages from e.g. a session file will now
    re-download and display those PDFs.
  * Improved behavior when using :open-download in a sandboxed
    environment (KDE Flatpak).
  * qutebrowser now enables the new PyQt exit scheme, which should
    result in things being cleaned up more properly (e.g. cookies
    being saved even without a timeout) on PyQt 5.13.1 and newer.
  * The :spawn command has a new -m / --output-messages argument
    which shows qutebrowser messages based on a command's standard
    output/error.
  * Improved insert mode detection for some CodeMirror usages
    (e.g. in JupyterLab and Jupyter Notebook).
  * If JavaScript is disabled globally, file://* now doesn't
    automatically have it enabled anymore. Run :set -u file://*
    content.javascript.enabled true to restore the previous
    behavior.
  * Settings with URL patterns can now be used to affect the
    behavior of the QtWebEngine inspector. Note that the underlying
    URL is chrome-devtools://* from Qt 5.11 to Qt 5.13, but
    devtools://* with Qt 5.14.
  * Improvements when tabs.tabs_are_windows is set:
    + Using :tab-take and :tab-give now shows an error, as the
      effect of doing so would be equal to :tab-clone.
    + The :buffer completion doesn't show any window sections
      anymore, only a flat list of tabs.
  * Improved parsing in some corner cases for the QtFont type
    (used for fonts.tabs and fonts.debug_console).
  * Performance improvements for the following areas:
    + Adding settings with URL patterns
    + Matching of settings using URL patterns

Fixed
  * Downloads (e.g. via :download) now see the same user agent
    header as webpages, which fixes cases where overly restrictive
    servers/WAFs closed the connection before.
  * The logic for :restart has been revisited, which should fix
    issues with relative basedirs.
  * Remaining issues related to Python 3.8 are now fixed
    (mostly warnings, especially on QtWebKit).
  * Workaround for a Qt bug where a page never finishes loading
    with a non-overridable TLS error (e.g. due to HSTS).
  * The qute://configdiff page now doesn't show built-in settings
    (e.g. javascript being enabled for qute:// and chrome:// pages)
    anymore.
  * The qute-lastpass userscript now stops prompting for passwords
    when cancelling the password input.
  * The tab hover text now shows ampersands (&) correctly.
  * With QtWebEngine and Qt >= 5.11, the inspector now shows its
    icons correctly even if loading of images is disabled via the
    content.images setting.
  * Entering a very long string (over 50k characters) in the
    completion used to crash, now it shows an error message instead
  * Various improvements for URL/searchengine detection:
    + Strings with a dot but with characters not allowed in a URL
      (e.g. an underscore) are now not treated as URL anymore.
    + Strings like "5/8" are now not treated as IP anymore.
    + URLs with an explicit scheme and a space (%20) are correctly
      treated as URLs.
    + Mail addresses are now treated as search terms.
    + With url.open_base_url set, searching for a search engine
      name now works.
    + url.open_base_url = True together with
      url.auto_search = 'never' is now handled correctly.
    + Fixed crash when a search engine URL turns out to be invalid.
  * New "site specific quirks", which work around some broken
    websites:
    + WhatsApp Web
    + Google Accounts
    + Slack (with older QtWebEngine versions)
    + Dell.com support pages (with Qt 5.7)
    + Google Docs (fixes broken IME/compose key)

-------------------------------------------------------------------
Thu Dec  5 23:17:55 UTC 2019 - Martin Herkt <9+suse@cirno.systems>

- Update to version 1.8.3
Fixed
  * Segmentation fault introduced in v1.8.2 when a tab gets closed
    immediately after it has finished loading (e.g. with certain
    login flows).

-------------------------------------------------------------------
Tue Nov 26 04:39:55 UTC 2019 - Martin Herkt <9+suse@cirno.systems>

- Update to version 1.8.2
Fixed
  * Unbinding keys via config.bind(key, None) accidentally worked
    in v1.7.0 but raises an exception in v1.8.0. It now works
    again, but is deprecated and shows an error. Note that
    :config-py-write did write such invalid lines before v1.8.0,
    so existing config files might need adjustments.
  * The readability-js userscript now handles encodings correctly
    (which it didn't before for some websites).
  * can now be used to paste text starting with a hyphen.
  * Following hints via the number keypad now works properly again.
  * Errors while reading the state file are now displayed instead
    of causing a crash.
  * Crash when using :debug-log-level without a console attached.
  * Downloads are now hidden properly when the browser is in
    fullscreen mode.
  * Crash when setting colors.webpage.bg to an empty value with
    QtWebKit.
  * Crash when the history database file is not a proper sqlite
    database.

-------------------------------------------------------------------
Thu Oct 17 22:57:12 UTC 2019 - Martin Herkt <9+suse@cirno.systems>

- Update to version 1.8.1
Added
  * New userscripts:
    + readability-js which uses Mozilla's node.js readability
      library.
    + qute-bitwarden which integrates the Bitwarden CLI.

Changed
  * The statusbar text for passthrough mode now shows all
    configured bindings to leave the mode, not only one.
  * When :config-source is used with a relative filename, the file
    is now searched in the config directory instead of the current
    working directory.
  * HTML5 inputs with date/time types now enter insert mode when
    selected.
  * dictcli.py now shows where dictionaries are installed to and
    complains when running it as root if doing so would result in
    a wrong installation path.
  * Changes to userscripts:
    + qute-pass: Don't run pass if only a username is requested.
    + qute-pass: Support private domains like myrouter.local.
    + readability: Improved CSS styling.
  * Performance improvements in various areas:
    + Loading config files
    + Typing without any completion matches
    + General keyboard handling
    + Scrolling
  * :version now shows details about the loaded
    autoconfig.yml/config.py.
  * Hosts are now additionally looked up including their ports in
    netrc files.
  * With Qt 5.10 or newer, qutebrowser now doesn't force software
    rendering with Nouveau drivers anymore. However,
    QtWebEngine/Chromium still do so.
  * The XSS Auditor is now disabled by default
    (content.xss_auditing = false). This reflects a similar change
    in Chromium, see their XSS Auditor Design Document for details.

Fixed
  * :config-write-py now correctly writes config.unbind(...) lines
    (instead of config.bind(..., None)) when unbinding a default
    keybinding.
  * Prevent repeat keyup events for JavaScript when a key is held
    down.
  * ~/.config/qutebrowser/blocked-hosts can now also contain
    /etc/hosts-like lines, not just simple hostnames.
  * Restored compatibility with Jinja2 2.8
  * Fixed implicit type conversion warning with Python 3.8.
  * The desktop file now sets StartupWMClass correctly, so the
    qutebrowser icon is no longer shown twice in the Gnome dock
    when pinned.
  * Bindings involving keys which need the AltGr key now work
    properly.
  * Fixed crash (caused by a Qt bug) when typing characters above
    the Unicode BMP (such as certain emoji or CJK characters).
  * dictcli.py now works properly again.
  * Shift can now be used while typing hint keystrings, which e.g.
    allows typing number hints on French keyboards.
  * With rapid hinting in number mode, backspace now edits the
    filter text after following a hint.
  * A certain type of error ("locking protocol") while initializing
    sqlite now isn't handled as crash anymore.
  * Crash when showing a permission request in certain scenarios.

Removed
  * At least Python 3.5.2 is now required to run qutebrowser,
    support for 3.5.0 and 3.5.1 was dropped.

-------------------------------------------------------------------
Thu Jul 18 15:27:22 UTC 2019 - Martin Herkt <9+suse@cirno.systems>

- Update to version 1.7.0
Added
  * New settings:
    + colors.tabs.pinned.* to control colors of pinned tabs.
    + hints.leave_on_load which allows disabling leaving of hint
      mode when a new page is loaded.
    + colors.completion.item.selected.match.fg which allows
      configuring the text color for the matching text in the
      currently selected completion item.
    + tabs.undo_stack_size to limit how many undo entries are kept
      for closed tabs.
  * New commands:
    + :reverse-selection (o in caret mode) to swap the
      stationary/moving ends of a selection.
  * New commandline replacements:
    + {url:domain}, {url:auth}, {url:scheme}, {url:username},
      {url:password}, {url:host}, {url:port}, {url:path},
      {url:query} for the respective parts of the current URL.
    + {title} for the current page title.
  * The {title} field in tabs.title.format,
    tabs.title.format_pinned and window.title_format got renamed to
    {current_title} (mirroring {current_url}) in order to not
    conflict with the new {title} commandline replacement.
  * New delete target for :hint which removes the hinted element
    from the DOM.
  * New --config-py commandline argument to use a custom config.py
    file.
  * Qt 5.13: Support for notifications (shown via system tray).

Changed
  * The desktop file qutebrowser.desktop is now renamed to
    org.qutebrowser.qutebrowser.desktop.
  * Pinned tabs now always show a favicon (even if the site doesn't
    provide one) when shrinking.
  * Setting downloads.location.directory now changes the directory
    displayed in the download prompt even if
    downloads.location.remember is set.
  * The yank command gained a new inline argument, which allows to
    e.g. use :yank inline [{title}]({url}).
  * Duplicate consecutive history entries with the same URL are now
    ignored.
  * More detailed error messages when spawning a process failed.
  * The content.pdfjs setting now supports domain patterns.
  * Improved process status output with :spawn -o.
  * The colors.tabs.bar.bg setting is now of type QssColor and thus
    supports gradients.
  * The :fullscreen command now understands a new --enter flag
    which causes it to always enter fullscreen instead of toggling
    the current state.
  * --debug-flag stack is now needed to show stack traces on
    renderer process crashes.
  * --debug-flag chromium can be used to easily turn on verbose
    Chromium logging.
  * Permission prompts can now be answered with
    Y (:prompt-accept --save yes) and N (:prompt-accept --save no)
    to save the answer as a per-domain setting.
  * content.dns_prefetch is now turned off by default, as it causes
    crashes inside QtWebEngine.
  * The (still unofficial) interceptor plugin API now contains
    resource_type for a request and allows redirecting requests.
  * :bookmark-remove now shows a message for consistency with
    :bookmark-add.
  * Very early segfaults are now also caught by the crash handler.
  * The appdata XML now contains proper release information and an
    (empty) OARS content rating.
  * Improved Linux distribution detection.
  * Qt 5.13: Request filtering now happens in the UI rather than
    IO thread.
  * Qt 5.13: Support for PDFium (Chromium's PDF viewer) is disabled
    for now so that PDFs can still be downloaded
    (or shown with PDF.js) properly.
  * Various performance improvements (e.g. for showing hints or
    the :open completion).

Deprecated
  * :yank markdown got deprecated, as :yank inline [{title}]({url})
    can now be used instead.

Fixed
  * Various QtWebEngine load signals are now handled differently,
    which should fix issues with insert mode being left while
    typing on sites like Google Translate.
  * Race condition causing a colored statusbar in normal mode when
    entering/exiting caret mode quickly.
  * Using 100% for a hue in a hsv(...) config value now corresponds
    to 359 (rather than 255), matching the fixed behavior in
    Qt 5.13.
  * Chaining commands with ;; used to abort with some failing
    commands. It now runs the second command no matter whether the
    first one succeeded or not.
  * Handling of profiles and private windows (and resulting crashes
    with Qt 5.12.2).
  * Fixes for corner-cases when using :navigate increment/decrement
  * The type for the colors.hints.match.fg setting was changed to
    QtColor.
  * Gradients were never supported for this setting, and with this
    change, values like rgb(0, 0, 0) now work as well.
  * Permission prompts now show a properly normalized URL with
    QtWebKit.
  * Crash on start when PyQt was built without SSL support with
    Qt >= 5.12.
  * Minor memory leaks.

-------------------------------------------------------------------
Tue Jun 18 12:13:45 UTC 2019 - Martin Herkt <9+suse@cirno.systems>

- Update to version 1.6.3
Fixed

  * Crash when hinting and changing/closing the tab before hints
    are displayed.
  * Crash on redirects with Qt 5.13.
  * Hide bogus AA_ShareOpenGLContexts warning with Qt 5.12.4.
  * Workaround for renderer process crashes with Qt 5.12.4.
    If you're unable to update, you can remove ~/.cache/qutebrowser
    for the same result.

-------------------------------------------------------------------
Mon May  6 21:15:52 UTC 2019 - Martin Herkt <9+suse@cirno.systems>

- Update to version 1.6.2
Fixed

  * Crash when SQL errors occur while using the completion.
  * Crash when cancelling a download prompt started in an already
    closed window.
  * Crash when many prompts are opened at the same time.
  * Running without Qt installed now displays a proper error again.
  * High CPU usage when using the keyhint widget with a low delay.

-------------------------------------------------------------------
Mon Apr  1 19:40:27 UTC 2019 - Martin Herkt <9+suse@cirno.systems>

- Force sqlite backend to be installed, otherwise qtbrowser segfaults
  bsc#1126269

-------------------------------------------------------------------
Wed Mar 20 06:05:39 UTC 2019 - Martin Herkt <9+suse@cirno.systems>

- Update to version 1.6.1
Fixed

  * Crash when using :config-{dict,list}-{add,remove} with an invalid setting.
  * Functionality like hinting on pages with an element with ID _qutebrowser
    (such as qutebrowser.org) on Qt 5.12.
  * The .desktop file in v1.6.0 was missing the "Actions" key.
  * The SVG icon now has a size of 256x256px set to comply with freedesktop
    standards.
  * Setting colors.statusbar.*.bg to a gradient now has the expected effect of
    the gradient spanning the entire statusbar.

-------------------------------------------------------------------
Tue Feb 26 01:48:56 UTC 2019 - Martin Herkt <9+suse@cirno.systems>

- Update to version 1.6.0
Added

  * New settings:
    + tabs.new_position.stacking which controls whether new tabs
      opened from a page should stack on each other or not.
    + completion.open_categories which allows to configure which
      categories are shown in the :open completion, and how they
      are ordered.
    + tabs.pinned.frozen to allow/deny navigating in pinned tabs.
    + hints.selectors which allows to configure what CSS selectors
      are used for hints, and also allows adding custom hint groups
    + input.insert_mode.leave_on_load to turn off leaving insert
      mode when a new page is loaded.

  * New config manipulation commands:
    + :config-dict-add and :config-list-add to a new element to a
      dict/list setting.
    + :config-dict-remove and :config-list-remove to remove an
      element from a dict/list setting.
    + New :yank markdown feature which yanks the current URL and
      title in markdown format.
    + Support for new QtWebEngine features in Qt 5.12:
      ~ Basic support for client certificates. Selecting the
        certificate to use when there are multiple matching
        certificates isn't implemented yet.
      ~ Support for DNS prefetching (plus new content.dns_prefetch
        setting).

Changed
  * :q now closes the current window instead of quitting
    qutebrowser completely (:close), while :qa quits (:quit).
    The behavior of :wq remains unchanged (:quit --save), as
    closing a window while saving the session doesn't make sense.
  * Completion highlighting is now done differently (using
    QSyntaxHighlighter), which should fix some highlighting
    corner-cases.
  * The QtColor config type now also understands colors like
    rgb(...).
  * :yank now has a --quiet option which causes it to not display
    a message.
  * The :open completion now also shows search engines by default.
  * The content.host_blocking.enabled setting now supports URL
    patterns, so the adblocker can be disabled on a given page.
  * Elements with a tabindex attribute now also get hints by
    default.
  * Various small performance improvements for hints and the
    completion.
  * The Wayland check for QtWebEngine is now disabled on
    Qt >= 5.11.2, as those versions should work without any issues.
  * The JavaScript console object is now available in PAC files.
  * PAC proxies currently don't work properly on QtWebEngine (and
    never did), so an error is now shown when trying to configure
    a PAC proxy.
  * The metainfo file qutebrowser.appdata.xml is now renamed to
    org.qutebrowser.qutebrowser.appdata.xml.
  * The qute-pass userscript now understands domains in gpg
    filenames in addition to directory names.
  * The autocompletion for content.headers.user_agent got updated
    to only include the default and Chrome, as setting the UA to
    Firefox has various bad side-effects.
  * Combining Qt 5.12 with an older PyQt can lead to issues, so a
    warning is now shown when starting qutebrowser with that
    combination.

Fixed
  * Invalid world IDs now get rejected for :jseval and GreaseMonkey
    scripts.
  * When websites suggest download filenames with invalid
    characters, those are now correctly replaced.
  * Invalid hint length calculation in certain rare cases.
  * Dragging tabs in the tab bar (which was broken in v1.5.0)
  * Using Shift-Home in command mode now works properly.
  * Workaround for a Qt bug which prevented
    content.cookies.accept = no-3rdparty from working properly on
    some pages like GMail. However, the default for
    content.cookies.accept is still all to be in line with what
    other browsers do.
  * :navigate not incrementing in anchors or queries.
  * Crash when trying to use a proxy requiring authentication with
    QtWebKit.
  * Slashes in search terms are now percent-escaped.
  * When scrolling.bar = True was set in versions before v1.5.0,
    this now correctly gets migrated to always instead of
    when-searching.
  * Completion highlighting now works again on Qt 5.11.3 and 5.12.1
  * The non-standard header X-Do-Not-Track is no longer sent.
  * PAC proxies were never correctly supported with QtWebEngine,
    but are now explicitly disallowed.
  * Issues with fullscreen handling when exiting a video player.
  * Various fixes for Qt 5.12 issues:
    + A javascript error on page load was fixed.
    + window.print() works with Qt 5.12 now.
    + Fixed handling of duplicate download filenames.
    + Fixed broken qute://history page.
    + Fixed PDF.js not working properly.
    + The download button in PDF.js now works (it's not possible
      to make it work with earlier Qt versions).
    + Since Greasemonkey scripts modifying the DOM fail when being
      run at document-start, some known-broken scripts (Iridium,
      userstyles.org) are now forced to run at document-end.

-------------------------------------------------------------------
Sat Feb 23 19:28:37 UTC 2019 - Martin Herkt <9+suse@cirno.systems>

- Require python3-qtwebengine-qt5 on TW
  (package split since PyQt5 5.12)

-------------------------------------------------------------------
Mon Oct 29 22:23:40 UTC 2018 - Martin Herkt <9+suse@cirno.systems>

- Update to version 1.5.2:
  * The content.cookies.accept setting is now set to all instead
    of no-3rdparty by default, as no-3rdparty breaks various pages
    such as GMail.

-------------------------------------------------------------------
Wed Oct 10 17:50:18 UTC 2018 - Martin Herkt <9+suse@cirno.systems>

- Update to version 1.5.1:
  Fixed:
    * Flickering when opening/closing tabs (as soon as more than
      10 are open) on some pages.
    * Improved logging for PDF.js resources which fail to load.
    * Crash when closing a tab after doing a search.
    * Tabs appearing when hidden after e.g. closing tabs.

-------------------------------------------------------------------
Wed Oct  3 18:23:48 UTC 2018 - Martin Herkt <9+suse@cirno.systems>

- Update to version 1.5.0:
  Added:
    * Rewritten PDF.js support:
      + PDF.js support and the content.pdfjs setting are now
        available with QtWebEngine.
      + Opening a PDF file now doesn't start a second request
        anymore.
      + Opening PDFs on https:// sites now works properly.
      + New --pdfjs flag for prompt-open-download, so PDFs can be
        opened in PDF.js with <Ctrl-P> in the download prompt.
    * New settings:
      + content.mouse_lock to handle HTML5 pointer locking.
      + completion.web_history.exclude which hides a list of URL
        patterns from the completion.
      + qt.process_model which can be used to change Chromium's
        process model.
      + qt.low_end_device_mode which turns on Chromium's low-end
        device mode. This mode uses less RAM, but the expense of
        performance.
      + content.webrtc_ip_handling_policy, which allows more
        fine-grained/restrictive control about which IPs are
        exposed via WebRTC.
      + tabs.max_width which allows to have a more "normal" look
        for tabs.
      + content.mute which allows to mute pages (or all tabs) by
        default.
    * Running qutebrowser with QtWebKit or Qt < 5.9 now shows a
      warning (only once), as support for those is going to be
      removed in a future release.
    * New t[iI][hHu] default bindings (similar to tsh etc.) to
      toggle images.
    * The qute-pass userscript now has optional OTP support.
    * When :spawn --userscript is called with a count, that count
      is now passed to userscripts as $QUTE_COUNT.
  Changed:
    * Various performance improvements when many tabs are opened.
    * The content.headers.referer setting now works on QtWebEngine.
    * The :repeat command now takes a count which is multiplied
      with the given "times" argument.
    * The default keybinding to leave passthrough mode was changed
      from <Ctrl-V> to <Shift-Escape>, which makes pasting from the
      clipboard easier in passthrough mode and is also unlikely to
      conflict with webpage bindings.
    * The app_id is now set to qutebrowser for Wayland.
    * Using :set option now shows the value of the setting
      (like :set option? already did).
    * The completion.web_history_max_items setting got renamed to
      completion.web_history.max_items.
    * Regenerating completion history now shows a progress dialog.
    * The content.autoplay setting now supports URL patterns on
      Qt >= 5.11.
    * The content.host_blocking.whitelist setting now takes a list
      of URL patterns instead of globs.
    * In passthrough mode, Ctrl + Mousewheel now also gets passed
      through to the page instead of zooming.
    * Editing text in an external editor now simulates a JS "input"
      event, which improves compatibility with websites reacting
      via JS to input.
    * The qute://settings page is now properly sorted on Python 3.5
    * :zoom, :zoom-in and :zoom-out now have a --quiet switch which
      causes them to not display a message.
    * The scrolling.bar setting now takes three values instead of
      being a boolean: always, never, and when-searching (which
      only displays it while a search is active).
    * '@@' now repeats the last run macro.
    * The content.host_blocking.lists setting now accepts a file://
      URL to a directory, and reads all files in that directory.
    * The :tab-give and :tab-take command now have a new flag
      --keep which causes them to keep the old tab around.
    * :navigate now clears the URL query.
  Fixed:
    * qute:// pages now work properly on Qt 5.11.2
    * Error when passing a substring with spaces to :tab-take.
    * Greasemonkey scripts which start with an UTF-8 BOM are now
      handled correctly.
    * When no documentation has been generated, the plaintext
      documentation now can be shown for more files such as
      qute://help/userscripts.html.
    * Crash when doing initial run on Wayland without XWayland.
    * Crash when trying to load an empty session file.
    * :hint with an invalid --mode= value now shows a proper error.
    * Rare crash on Qt 5.11.2 when clicking on <select> elements.
    * Rare crash related to the completion.
  Removed:
    * Support for importing pre-v1.0.0 history files has been
      removed.
    * The content.webrtc_public_interfaces_only setting has been
      removed and replaced by content.webrtc_ip_handling_policy.

-------------------------------------------------------------------
Sun Sep  2 13:39:04 UTC 2018 - 9+suse@cirno.systems

- Update to version 1.4.2:
  Changed:
    * The content.xss_auditing setting is now enabled by default,
      to mirror Chromium's rather than Qt's default behavior.
    * Long URLs in the statusbar are now elided at the end rather
      than in the middle, to make sure the hostname is completely
      visible whenever possible.
  Fixed:
    * Crash in Qt 5.7.1 when a website uses window.print().
    * The workaround for Nouveau graphic drivers now works properly
      again.
    * Crash when using :follow-selected with a link which is
      outside of the view.
    * Workaround for windows not showing as urgent with some window
      managers (like i3).
    * Crash when opening URLs with some unicode characters
      (IDNA 2008). Those URLs still won't open though, due to
      missing support in Qt.
    * Crash when a download directory which can't be created is
      configured.
    * Crash in the importer.py script when importing Chrome
      bookmarks from newer Chrome versions.
    * The content.webrtc_public_interfaces_only option didn't work
      on Qt 5.11 previously (it now does). Note it still does not
      work on Qt 5.10 (due to a Qt bug) and Qt < 5.9.2.
    * Repeated escaping of entries in qute://log when refreshing
      page.
    * The host blocker doesn't block 0.0.0.0 anymore.
    * Crash when using :// as URL pattern.
    * The :buffer completion now sorts tabs with indices >= 10
      correctly again.

-------------------------------------------------------------------
Wed Jul 11 17:46:59 UTC 2018 - 9+suse@cirno.systems

- Update to version 1.4.1:
  Security:
    * CVE-2018-10895: Fix CSRF issue on the qute://settings page,
      leading to possible arbitrary code execution (boo#1100968).
      See the related GitHub issue for details:
      https://github.com/qutebrowser/qutebrowser/issues/4060
  Fixed:
    * Rare crash when an error occurs in downloads.
    * Newlines are now stripped from the :version pastebin URL.
    * Worked around a Qt issue which redirects to a
      chrome-error:// page when trying to use U2F.
    * The link_pyqt.py script now works correctly with PyQt 5.11.

-------------------------------------------------------------------
Tue Jul  3 16:29:33 UTC 2018 - 9+suse@cirno.systems

- Update %description
- Update to version 1.4.0:
  Added:
    * Support for the bundled sip module in PyQt 5.11 and other
      changes in Qt/PyQt 5.11.x.
    * New --debug-flag log-requests to log requests to the debug
      log for debugging.
    * New --first flag for :hint (bound to gi for inputs) which
      automatically selects the first hint.
    * New input.escape_quits_reporter setting which can be used to
      avoid accidentally quitting the crash reporter when pressing
      escape.
    * New qute-lastpass userscript which uses the LastPass CLI to
      fill passwords.
    * The Makefile now installs a
      /usr/share/metainfo/qutebrowser.appdata.xml file.
    * QtWebEngine: Support for printing from webpages via
      window.print.
    * QtWebEngine: Support for muting tabs:
      + New {audio} field for window.title_format and
        tabs.title.format which displays [M]/[A] for
        muted/recently audible tabs.
      + New :tab-mute command (bound to <Alt-m>) to mute/unmute a
        tab.
    * QtWebEngine: Support for content.cookies.accept with
      third-party cookies blocked by default (requires Qt 5.11).
    * QtWebEngine: New settings:
      + Support for requesting persistent storage via
        navigator.webkitPersistentStorage.requestQuota with a new
        content.persistent_storage setting (requires Qt 5.11).
        This setting also supports URL patterns.
      + Support for registering custom protocol handlers via
        navigator.registerProtocolHandler with a new
        content.register_protocol_handler setting (requires
        Qt 5.11). This setting also supports URL patterns.
      + Support for WebRTC screen sharing with a new
        content.desktop_capture setting (requires Qt 5.10).
        This setting also supports URL patterns.
      + New content.autoplay setting to enable/disable automatic
        video playback (requires Qt 5.10).
      + New content.webrtc_public_interfaces_only setting to only
        expose public interfaces over WebRTC (requires Qt 5.9.2
        or 5.11).
      + New content.canvas_reading setting to disable reading from
        canvas elements.
  Changed:
    * The following settings now support URL patterns:
      + content.headers.do_not_track
      + content.headers.custom
      + content.headers.accept_language
      + content.headers.user_agent
      + content.ssl_strict
      + content.geolocation
      + content.notifications
      + content.media_capture
    * New short flags for commandline arguments: -B and -T for
      --basedir and --temp-basedir; -d and -D for --debug and
      --debug-flag.
    * Deleting history items via :history-clear or
      :completion-item-del now also removes that URL from
      QtWebEngine's visited links.
    * There's now completion for commands taking a variable count
      of arguments (like :config-cycle).
    * QtWebEngine: On Qt 5.11.1, no reloads are needed anymore
      when switching between pages with changed settings
      (e.g. content.javascript.enabled).
    * The qt.force_software_rendering setting changed from a
      boolean to taking different values (software-opengl,
      qt-quick and chromium) for different kinds of software
      rendering workarounds.
    * On Qt 5.11, using wayland with QtWebEngine is now possible
      when using software rendering.
    * GreaseMonkey scripts now get their own global scope (based on
      the page's one), which allows scripts like OneeChan to work.
    * Rapid hinting is now supported with the yank and yank-primary
      targets, copying newline-separated links.
    * QtWebEngine: On Qt 5.11, the developer tools (inspector) can
      now be used securely and without requiring the
      --enable-webengine-inspector option.
    * The <Enter> key (:follow-selected) now follows the currently
      focused element if there's no selection.
    * The --logfilter argument now can be prepended with an
      exclamation mark (e.g. --logfilter '!init,destroy') to
      invert the filter.
    * :view-source now has a --pygments flag which uses the "old"
      way of rendering sources even with QtWebEngine.
    * Improved error messages when a setting needs a newer Qt
      version.
    * QtWebEngine: Various improvements to make the cursor more
      visible in caret browsing.
    * When a prompt is opened in insert/passthrough mode, the mode
      is restored after closing the prompt.
    * On Qt 5.10 or newer, dictionaries are now read from the
      qutebrowser data directory (e.g. ~/.local/share/qutebrowser)
      instead of /usr/share/qt.
      Existing dictionaries are copied over.
    * If an error while parsing ~/.netrc occurs, the cause of the
      error is now logged.
    * On Qt 5.9 or newer, certificate errors now show Chromium's
      detailed error page.
    * Greasemonkey scripts now support a "@qute-js-world" tag to
      run them in a different JavaScript context.
  Fixed:
    * Various subtle keyboard focus issues.
    * The security fix in v1.3.3 caused URLs with ampersands
      (www.example.com?one=1&two=2) to send the wrong arguments
      when clicked on the qute://history page (boo#1100968,
      CVE-2018-1000559).
    * Crash when opening a PDF page with PDF.js enabled
      (on QtWebKit), but no PDF.js installed.
    * Crash when closing a tab shortly after opening it.
  Removed:
    * :tab-detach which has been deprecated in v1.1.0 has been
      removed.
    * The content.developer_extras setting got removed.
      On QtWebKit, developer extras are now automatically enabled
      when opening the inspector.

-------------------------------------------------------------------
Fri Jun 22 10:25:18 UTC 2018 - 9+suse@cirno.systems

- Update to version 1.3.3:
  Security:
    * An XSS vulnerability on the qute://history page allowed
      websites to inject HTML into the page via a crafted title
      tag. This could allow them to steal your browsing history.
      If you're currently unable to upgrade, avoid using :history.
      This issue has been assigned CVE-2018-1000559.
  Fixed:
    * Crash in a workaround for a Qt 5.11 bug in rare
      circumstances.
    * Workaround for a Qt bug which preserves searches between page
      loads.

-------------------------------------------------------------------
Wed Jun 13 21:56:04 UTC 2018 - 9+suse@cirno.systems

- Update to version 1.3.2:
  * QtWebEngine: Improved workaround for a bug in Qt 5.11 where
    only the top/bottom half of the window is used.
  * QtWebEngine: Work around a bug in Qt 5.11 where an endless
    loading-loop is triggered when clicking a link with an unknown
    scheme.
  * QtWebEngine: When switching between pages with changed
    settings, less unnecessary reloads are done now.
  * QtWebEngine: It's now possible to open external links such as
    magnet:// or mailto: via hints.

-------------------------------------------------------------------
Tue May 29 09:23:43 UTC 2018 - 9+suse@cirno.systems

- Update to version 1.3.1:
  * Work around a bug in Qt 5.11 where only the top/bottom half of
    the window is used. This workaround is incomplete, but fixes
    the majority of the cases where this happens.
  * Work around keyboard focus issues with Qt 5.11.
  * Work around an issue in Qt 5.11 where e.g. activating
    JavaScript per-domain needed a manual reload in some cases.
  * Don't crash when a ² key is pressed (e.g. on AZERTY keyboards).
  * Don't crash when a tab is opened and quickly closed again.

-------------------------------------------------------------------
Fri May  4 10:29:52 UTC 2018 - 9+suse@cirno.systems

- Use upstream Makefile to install
  * Package scripts and manpage
- Package AppStream metadata
- Update to version 1.3.0:
  Added:
    * New :scroll-to-anchor command to scroll to an anchor in the
      document.
    * New url.open_base_url option to open the base URL of a
      searchengine when no search term is given.
    * New tabs.min_width setting to configure the minimal width
      for tabs.
    * New userscripts:
        + getbib to download bibtex information for DOIs on a page.
        + qute-keepass to get passwords from KeePassX.

  Changed:
    * QtWebEngine: Support for JavaScript Shared Web Workers have
      been disabled on Qt versions older than 5.11 because of
      security issues in in Chromium. You can get the same effect
      in earlier versions via
      ":set qt.args ['disable-shared-workers']". An equivalent
      workaround is also contained in Qt 5.9.5 and 5.10.1.
    * The file dialog for downloads now has basic tab completion
      based on the entered text.
    * :version now shows OS information for POSIX OS other than
      Linux/macOS.
    * When there's an error inserting the text from an external
      editor, a backup file is now saved.
    * The window.hide_wayland_decoration setting got renamed to
      window.hide_decoration and now also works outside of wayland.
    * The tabs.favicons.show setting now can take three values:
      'always' (was True), 'never' (was False) and 'pinned'
      (to only show favicons for pinned tabs).
    * Hover tooltips on tabs now always show the webpage's title.
    * The default value for content.host_blocking.lists was
      changed to only include https://github.com/StevenBlack/hosts
      which combines various sources.
    * Error messages when trying to wrap when tabs.wrap is False
      are now logged to debug instead of messages.

  Fixed:
    * Using hints before a page is fully loaded is now possible
      again.
    * Selecting hints with the number keypad now works again.
    * Tab titles for tabs loaded from sessions should now really be
      correct instead of showing the URL.
    * Loading URLs with customized settings from a session now
      avoids an additional reload.
    * The window icon and title now get set correctly again.
    * The tabs.switching_delay setting now has a correct maximum
      value limit set.
    * The taskadd script now works properly when there's multi-line
      output.
    * QtWebEngine: Worked around issues with
      GreaseMonkey/stylesheets not being loaded correctly in some
      situations.
    * The statusbar now more closely reflects the caret mode state.
    * The icon on Windows should now be displayed in a higher
      resolution.
    * The QtWebEngine development tools (inspector) now also work
      when JavaScript is disabled globally.
    * Building .exe files now works when upx is installed on the
      system.
    * The keyhint widget now shows the correct text for chained
      modifiers.
    * Loading GreaseMonkey scripts now also works with Jinja2 2.8
      (e.g. on Debian Stable).
    * Adding styles with GreaseMonkey on fast sites now works
      properly.
    * Window ID 0 is now excluded properly from ":tab-take"
      completion.
    * A rare crash when cancelling a download has been fixed.
    * The Makefile (intended for packagers) now supports PREFIX
      properly.
    * The workaround for a black window with Nvidia graphics is now
      enabled on non-Linux systems (like FreeBSD) as well.
    * Initial support for Qt 5.11.
    * Checking for a new version after sending a crash report now
      works properly again.
    * "@match" in Greasemonkey scripts now more closely matches the
      proper pattern syntax.
    * Searching via / or ? now doesn't handle any characters in a
      special way.
    * Fixed crash when trying to retry some failed downloads on
      QtWebEngine.
    * An invalid spellcheck dictionary filename now doesn't crash
      anymore. When no spellcheck dictionaries are configured,
      it's now disabled internally. This works around an issue with
      entering special characters on Facebook messenger.

-------------------------------------------------------------------
Wed Mar 14 19:31:01 UTC 2018 - 9+suse@cirno.systems

- Update to version 1.2.1:
  Fixed:
    * qutebrowser now starts properly when the PyQt5
      QOpenGLFunctions package wasn't found.
    * The keybinding cheatsheet on the quickstart page is now
      loaded from a local qute:// URL again.
    * Unbinding keys which were bound in older qutebrowser versions
      now doesn't crash anymore.
    * Fixed a crash when reloading a page which wasn't fully
      loaded with v1.2.0
    * Keys on the numeric keypad now fall back to the same bindings
      without Num+ if no Num+ binding was found.
    * Fixed hinting on some pages with Qt < 5.10.
    * Titles are now displayed correctly again for tabs which are
      cloned or loaded from sessions.

-------------------------------------------------------------------
Sat Mar 10 01:23:23 UTC 2018 - 9+suse@cirno.systems

- Update keyring
- Update to version 1.2.0:
  Added:
    * Initial implementation of per-domain settings:
      + :set and :config-cycle now have a -u/--pattern argument
        taking a URL match pattern for supported settings.
      + config.set in config.py now takes a third argument which is
        the pattern.
      + New with config.pattern('...') as p: context manager for
        config.py to use the shorthand syntax with a pattern.
      + New tsh keybinding to toggle scripts for the current host.
        With a capital S, the toggle is saved. With a capital H,
        subdomains are included. With u instead of h, the exact
        current URL is used.
      + New tph keybinding to toggle plugins, with the same
        additional binding described above.
    * New QtWebEngine features:
      + Caret/visual mode
      + Authentication via ~/.netrc
      + Retrying downloads with Qt 5.10 or newer
      + Hinting and other features inside same-origin frames
    * New flags for existing commands:
      + :session-load has a new --delete flag which deletes the
        session after loading it.
      + New --no-last flag for :tab-focus to not focus the last tab
        when focusing the currently focused one.
      + New --edit flag for :view-source to open the source in an
        external editor.
      + New --select flag for :follow-hint which acts like the
        given string was entered but doesn't necessary follow the
        hint.
    * New special pages:
      + qute://bindings (opened via :bind) which shows all
        keybindings.
      + qute://tabs (opened via :buffer) which lists all tabs.
    * New settings:
      + statusbar.widgets to configure which widgets should be
        shown in which order in the statusbar.
      + tabs.mode_on_change which replaces
        tabs.persist_mode_on_change. It can now be set to restore
        which remembers input modes (input/passthrough) per tab.
      + input.insert_mode.auto_enter which makes it possible to
        disable entering insert mode automatically when an editable
        element was clicked. Together with
        input.forward_unbound_keys, this should allow for
        emacs-like "modeless" keybindings.
    * New :prompt-yank command (bound to Alt-y by default) to yank
      URLs referenced in prompts.
    * The hostblock_blame script which was removed in v1.0 was
      updated for the new config and re-added.
    * New cycle-inputs.js script in scripts/ which can be used with
      :jseval -f to cycle through inputs.

  Changed:
    * Complete refactoring of key input handling, with various
      effects:
      + emacs-like keychains such as <Ctrl-X><Ctrl-C> can now be
        bound.
      + Key chains can now be bound in any mode (this allows
        binding unused keys in hint mode).
      + Yes/no prompts don't use keybindings from the prompt
        section anymore, they have their own yesno section instead.
      + Trying to bind invalid keys now shows an error.
      + The bindings.default setting can now only be set in a
        config.py, and existing values in autoconfig.yml are
        ignored.
    * Improvements for GreaseMonkey support:
      + @include and @exclude now support regex matches.
        With QtWebEngine and Qt 5.8 and newer, Qt handles the
        matching, but similar functionality will be added in
        Qt 5.11.
      + Support for @requires
      + Support for the GreaseMonkey 4.0 API
    * The sqlite history now uses write-ahead logging which should
      be a performance and stability improvement.
    * When an editor is spawned with :open-editor and :config-edit,
      the changes are now applied as soon as the file is saved in
      the editor.
    * The hist_importer.py script now only imports URL schemes
      qutebrowser can handle.
    * Deleting a prefix (:, / or ?) via backspace now leaves
      command mode.
    * Angular 1 elements and <summary>/<details> now get hints
      assigned.
    * :tab-only with pinned tabs now still closes unpinned tabs.
    * The url.incdec_segments option now also can take port as
      possible segment.
    * QtWebEngine: :view-source now uses Chromium's view-source:
      scheme.
    * Tabs now show their full title as tooltip.
    * When there are multiple unknown keys in a autoconfig.yml,
      they now all get reported in one error.
    * More performance improvements when opening/closing many tabs.
    * The :version page now has a button to pastebin the
      information.
    * Replacements like {url} can now be escaped as {{url}}.

  Fixed:
    * QtWebEngine bugfixes:
      + Improved fullscreen handling with Qt 5.10.
      + Hinting and scrolling now works properly on special
        view-source: pages.
      + Scroll positions are now restored correctly from sessions.
      + :follow-selected should now work in more cases with
        Qt > 5.10.
      + Incremental search now flickers less and doesn't move to
        the second result when pressing Enter.
      + Keys like Ctrl-V or Shift-Insert are now correctly
        handled/filtered with Qt 5.10.
      + Fixed hangs/segfaults on exit with Qt 5.10.1.
      + Fixed favicons sometimes getting cleared with Qt 5.10.
      + Qt download objects are now cleaned up properly when a
        download is removed.
      + JavaScript messages are now not double-HTML escaped anymore
        on Qt < 5.11
    * QtWebKit bugfixes:
      + Fixed GreaseMonkey-related crashes.
      + :view-source now displays a valid URL.
    * URLs containing ampersands and other special chars are now
      shown correctly when filtering them in the completion.
    * :bookmark-add "" foo can now be used to save the current URL
      with a custom title.
    * :spawn -o now waits until the process has finished before
      trying to show the output. Previously, it incorrectly showed
      the previous output immediately.
    * Suspended pages now should always load the correct page when
      being un-suspended.
    * Exception types are now shown properly with :config-source
      and :config-edit.
    * When using :bookmark-add --toggle, bookmarks are now saved
      properly.
    * Crash with an empty completion.timestamp_format.
    * Crash when completion.min_chars is set in some cases.
    * HTML/JS resource files are now read into RAM on start to
      avoid crashes when changing qutebrowser versions while it's
      open.
    * Setting bindings.key_mappings to an empty value is now
      allowed.
    * Bindings to an empty commands are now ignored rather than
      crashing.

  Removed:
    * QUTE_SELECTED_HTML is now not set for userscripts anymore
      except when called via hints.
    * The qutebrowser_viewsource userscript has been removed as
      :view-source --edit can now be used.
    * The tabs.persist_mode_on_change setting has been removed and
      replaced by tabs.mode_on_change.

-------------------------------------------------------------------
Thu Mar  1 23:44:36 UTC 2018 - 9+suse@cirno.systems

- Update to version 1.1.2:
  Fixed:
    * QtWebEngine: Crash with Qt 5.10.1 when using :undo on some
      tabs.
    * Compatibility with Python 3.7
- Use %license macro

-------------------------------------------------------------------
Sat Jan 20 18:51:40 UTC 2018 - 9@cirno.systems

- Update to version 1.1.1:
  * Fixed crashes with Qt 5.10 when closing a tab before it
    finished loading.

-------------------------------------------------------------------
Mon Jan 15 19:04:57 UTC 2018 - 9@cirno.systems

- Update to version 1.1.0: 
  Added:
    * Initial support for Greasemonkey scripts. There are still
      some rough edges, but many scripts should already work.
    * New fields for window.title_format and tabs.title.format:
      + {current_url}
      + {protocol}
    * New settings:
      + colors.statusbar.passthrough.fg/.bg
      + completion.delay and completion.min_chars to update the
        completion less often.
      + completion.use_best_match to automatically use the
        best-matching command in the completion.
      + keyhint.radius to configure the edge rounding for the key
        hint widget.
      + qt.highdpi to turn on Qt's High-DPI scaling.
      + tabs.pinned.shrink (true by default) to make it possible
        for pinned tabs and normal tabs to have the same size.
      + content.windowed_fullscreen to show e.g. a fullscreened
        video in the window without fullscreening that window.
      + tabs.persist_mode_on_change to keep the current mode when
        switching tabs.
      + session.lazy_restore which allows to not load pages
        immediately when restoring a session.
    * New commands:
      + :tab-give and :tab-take, to give tabs to another window,
        or take them from another window.
      + :completion-item-yank (bound to <Ctrl-C>) to yank the
        current completion item text.
      + :edit-command to edit the commandline in an editor.
      + search.incremental for incremental text search.
    * New flags for existing commands:
      + -o flag for :spawn to show stdout/stderr in a new tab.
      + --rapid flag for :command-accept (bound to Ctrl-Enter by
        default), which allows executing a command in the
        completion without closing it.
      + --private and --related flags for :edit-url, which have the
        same effect they have with :open.
      + --history for :completion-item-focus which causes it to go
        through the command history when no text was entered.
        The default bindings for cursor keys in the completion
        changed to use that, so that they can be used again to
        navigate through completion items when a text was entered.
      + --file for :debug-pyeval which makes it take a filename
        instead of a line of code.
    * New config.source(...) method for config.py to source another
      file.
    * New {line} and {column} replacements for editor.command to
      position the cursor correctly.
    * New qute-pass userscript as alternative to password_fill
      which allows selecting accounts via rofi or any other
      dmenu-compatile application.
    * New hist_importer.py script to import history from
      Firefox/Chromium.

  Changed:
    * Some settings got renamed:
    * tabs.width.bar -> tabs.width
    * tabs.width.indicator -> tabs.indicator.width
    * tabs.indicator_padding -> tabs.indicator.padding
    * session_default_name -> session.default_name
    * ignore_case -> search.ignore_case
    * Much improved user stylesheet handling for QtWebEngine which
      reduces flickering and updates immediately after setting a
      stylesheet.
    * High-DPI favicons are now used when available.
    * The asciidoc2html.py script now uses Pygments (which is
      already a dependency of qutebrowser) instead of
      source-highlight for syntax highlighting.
    * The :buffer command now doesn't require quoting anymore,
      similar to :open.
    * The importer.py script was largely rewritten and now also
      supports importing from Firefox' places.sqlite file and
      Chrome/Chromium profiles.
    * Various internal refactorings to use Python 3.5 and
      ECMAscript 6 features.
    * If the window.hide_wayland_decoration setting is False, but
      QT_WAYLAND_DISABLE_WINDOWDECORATION is set in the
      environment, the decorations are still hidden.
    * The install_dict.py script for QtWebEngine was renamed to
      dictcli.py and can now also upgrade dictionaries correctly.
    * :undo now can re-open multiple tabs after :tab-only was used.
    * :config-write-py with a relative path now puts the file into
      the config directory.
    * The qute://version page now also shows the uptime of
      qutebrowser.
    * qutebrowser now prompts to create a non-existing directory
      when starting a download.
    * :jseval --file now searches relative paths in a js/ subdir in
      qutebrowser's data dir, e.g. ~/.local/share/qutebrowser/js.
    * The current/default bindings are now shown in the ``:bind`
      completion.
    * Empty categories are now hidden in the :open completion.
    * Search terms for URLs and titles can now be mixed when
      filtering the completion.
    * The default font size for the UI got bumped up from 8pt to
      10pt.
    * Improved matching in the completion: The words entered are
      now matched in any order, and mixed matches on URL/tite are
      possible.
    * The system's default encoding (rather than UTF-8) is now used
      to decode subprocess output.
    * qutebrowser now ensures it's focused again after an external
      editor is closed.
    * The colors.completion.fg setting can now be a list, allowing
      to specify different colors for the three completion columns.

  Fixed:
    * More consistent sizing for favicons with vertical tabs.
    * Using :home on pinned tabs is now prevented.
    * Fix crash with unknown file types loaded via qute://help.
    * Scrolling performance improvements.
    * Sites like qute://help now redirect to qute://help/ to make
      sure links work properly.
    * Fixes for the size calculation of pinned tabs in the tab bar.
    * Worked around a crash with PyQt 5.9.1 compiled against
      Qt < 5.9.1 when using :yank or qute:// URLs.
    * Fixed crash when opening qute://help/img.
    * Fixed gU (:navigate up) on qute://help and webservers not
      handling .. in a URL.
    * Using e.g. -s backend webkit to set the backend now works
      correctly.
    * Fixed crash when closing the tab an external editor was
      opened in.
    * When using :search-next before a search is finished, no
      warning about no results being found is shown anymore.
    * Fix :click-element with an ID containing non-alphanumeric
      characters.
    * Fix crash when a subprocess outputs data which is not
      decodable as UTF-8.
    * Fix crash when closing a tab immediately after hinting.
    * Worked around issues in Qt 5.10 with loading progress never
      being finished.
    * Fixed a crash when writing a flag before a command
      (e.g. :-w open).
    * Fixed a crash when clicking certain form elements with
      QtWebEngine.

  Deprecated:
    * :tab-detach has been deprecated, as :tab-give without
      argument can be used instead.

  Removed:
    * The long-deprecated :prompt-yes, :prompt-no, :paste-primary
      and :paste commands have been removed.
    * The invocation :download <url> <dest> which was deprecated
      in v0.5.0
      was removed, use :download --dest <dest> <url> instead.
    * The messages.unfocused option which wasn't used anymore was
      removed.
    * The x[xtb] default bindings got removed again as many users
      accidentally triggered them.

-------------------------------------------------------------------
Tue Nov 28 10:12:35 UTC 2017 - 9@cirno.systems

- Update to version 1.0.4:
  * The qute://gpl page now works correctly again.
  * Trying to bind an empty command now doesn't crash anymore.
  * Fixed crash when :config-write-py fails to write to the given
    path.
  * Fixed crash for some users when selecting a file with Qt 5.9.3
  * Improved handling for various SQL errors
  * Fix crash when setting content.cache.size to a big value
    (> 2 GB) 

-------------------------------------------------------------------
Sat Nov  4 16:32:49 UTC 2017 - aavindraa@gmail.com

- Update to version 1.0.3:
  * Changed
    + Performance improvements for tab rendering.
    + The :open-editor command is not hidden anymore and also usable
      in normal mode.
    + Security enhancements for macos and windows builds
  * Fixed
    + Handle accessing a locked sqlite database gracefully
    + Abort pinned tab dialogs properly when a tab is closed e.g.
      by closing a window.
    + Unbinding a default keybinding twice no longer binds it again
    + Completions are now sorted correctly again when filtered

-------------------------------------------------------------------
Sat Oct 21 20:20:10 UTC 2017 - sor.alexei@meowr.ru

- Add the missing python3-attrs dependency (boo#1064515).

-------------------------------------------------------------------
Tue Oct 17 13:47:35 UTC 2017 - aavindraa@gmail.com

- Update to version 1.0.2:
  * Fixed
    + Fix workaround for black screens or crashes with Nvidia cards
    + Handle a filesystem going read-only gracefully
    + Fix crash when setting fonts.monospace
    + Fix list options not being modifyable via .append() in
      config.py
    + Mark the content.notifications setting as QtWebKit only
      correctly
    + Fix wrong rendering of keys like <back> in the completion
  * Changed
    + Nicer error messages and other minor improvements
  * Includes fixes from 1.0.1:
    + Fixed starting after customizing fonts.tabs or
      fonts.debug_console.
    + Fixed starting with old PyQt versions compiled against newer
      Qt versions.
    + Fixed check for PyQt version to correctly enforce 5.7
     (not 5.2).

-------------------------------------------------------------------
Thu Oct 12 12:44:12 UTC 2017 - aloisio@gmx.com

- Update to version 1.0.0
  * Dependency changes:
    +  Support for legacy QtWebKit (before 5.212 which is
       distributed independently from Qt) is dropped.
    +  Support for Python 3.4 is dropped.
    +  Support for Qt before 5.7.1 and PyQt before 5.7 is dropped.
    +  New dependency on the QtSql module and Qt sqlite support.
    +  New dependency on the attrs project (packaged as
       python-attr in some distributions).
    +  The depedency on PyOpenGL (when using QtWebEngine) got
       removed. Note that PyQt5.QtOpenGL is still a dependency.
    +  PyQt5.QtOpenGL is now always required, even with QtWebKit.
  * The QtWebEngine backend is now used by default. Note this
    means that QtWebEngine now should be a required dependency, and
    QtWebKit (if new enough) should be changed to an optional
    dependency.
  * Completely rewritten configuration system which ignores the
    old config file. See link:qute://help/configuring.html[] for
    details.
  * Various documentation files got moved to the doc/ subfolder;
    qutebrowser.desktop got moved to misc/.
  * :set now doesn't support toggling/cycling values anymore, that
    functionality got moved to :config-cycle.
  * New completion engine based on sqlite, which allows to
    complete the entire browsing history. The default for
    completion.web_history_max_items got changed to -1 (unlimited).
    If the completion is too slow on your machine, try setting it to
    a few 1000 items.
  Added:
  * QtWebEngine: Spell checking support, see the
    spellcheck.languages setting.
  * New qt.args setting to pass additional arguments to
    Qt/Chromium.
  * New backend setting to select the backend to use. Together
    with the previous setting, this should make most wrapper
    scripts unnecessary.
  * qutebrowser can now be set as the default browser on macOS.
  * New config commands:
    + :config-cycle to cycle an option between multiple values.
    + :config-unset to remove a configured option.
    + :config-clear to remove all configured options.
    + :config-source to (re-)read a config.py file.
    + :config-edit to open the config.py file in an editor.
    + :config-write-py to write a config.py template file.
  * New :version command which opens qute://version.
  * New back/forward indicator in the statusbar.
  * New bindings.key_mappings setting to map keys to other keys.
  * QtWebEngine: Support for proxy authentication.
  Changed:
  * Using :download now uses the page's title as filename.
  * Using :back or :forward with a count now skips intermediate
    pages.
  * When there are multiple messages shown, the timeout is
    increased.
  * :search now only clears the search if one was displayed
    before, so pressing <Escape> doesn't un-focus inputs anymore.
  * Pinned tabs now adjust to their text's width, so the
    tabs.width.pinned setting got removed.
  * :set-cmd-text now has a --run-on-count argument to run the
    underlying command directly if a count was given.
  * :scroll-perc got renamed to :scroll-to-perc.
  Removed:
  * Migrating QtWebEngine data written by versions before
    2016-11-15 (before v0.9.0) is now not supported anymore.
  * Upgrading qutebrowser with a version older than v0.4.0 still
    running now won't work properly anymore.
  * The --harfbuzz and --relaxed-config commandline arguments got
    dropped.
  Fixes:
  * Exiting fullscreen via :fullscreen or buttons on a page now
    restores the correct previous window state
    (maximized/fullscreen).
  * When input.insert_mode.auto_load is set, background tabs now
    don't enter insert mode anymore.
  * The keybinding help widget now works correctly when using
    keybindings with a count.
  * The window.hide_wayland_decoration setting now works correctly
    again.

-------------------------------------------------------------------
Sun Aug 13 17:25:21 UTC 2017 - 9@cirno.systems

- Update to version 0.11.0:
  * New dependencies:
    + New dependency on PyQt5.QtOpenGL if QtWebEngine is used.
      QtWebEngine depends on QtOpenGL already, but on distributions packaging
      split PyQt5 wrappers, the wrappers for QtOpenGL are now required.
    + New dependency on PyOpenGL if QtWebEngine is used.
  * Added:
    + Private browsing is now implemented for QtWebEngine, and changed its
      behavior: The general -> private-browsing setting now only applies to
      newly opened windows, and you can use the -p flag to :open to open a
      private window.
    + New "pinned tabs" feature, with a new :tab-pin command
      (bound to <Ctrl-p> by default).
    + (QtWebEngine) Implemented :follow-selected.
    + New :clear-messages command to clear shown messages.
    + New ui -> keyhint-delay setting to configure the delay until
      the keyhint overlay pops up.
    + New -s option for :open to force a HTTPS scheme.
    + :debug-log-filter now accepts none as an argument to clear any log
      filters.
    + New --debug-flag argument which replaces --debug-exit and --pdb-postmortem
    + New tabs -> favicon-scale option to scale up/down favicons.
    + colors -> statusbar.bg/fg.private and .command.private to customize
      statusbar colors for private windows.
    + New {private} field displaying [Private Mode] for
      ui -> window-title-format and tabs -> title-format.
    + (QtWebEngine) Proxy support with Qt 5.7.1
      (already was supported for 5.8 and newer)
  * Changed:
    + To prevent elaborate phishing attacks, the Punycode version (xn--*) is now
      shown in addition to the decoded version for international domain names
      (IDN).
    + Starting with legacy QtWebKit now shows a warning message.
      With the next release, support for it will be removed.
    + Improved qute://history page (with lazy loading)
    + Crash reports are not public anymore.
    + Comments in the config file are now placed before the individual options
      instead of being before sections.
    + Messages are now hidden when clicked.
    + stdin is now closed immediately for processes spawned from qutebrowser.
    + When ui -> message-timeout is set to 0, messages are now never cleared.
    + Middle/right-clicking the blank parts of the tab bar (when vertical) now
      closes the current tab.
    + The adblocker now also blocks non-GET requests (e.g. POST).
    + javascript: links can now be hinted.
    + :view-source, :tab-clone and :navigate --tab now don't open the tab as
      "explicit" anymore, i.e. (with the default settings) open it next to the
      active tab.
    + qute:* pages now use qute://* instead (e.g. qute://version instead of
      qute:version), but the old versions are automatically redirected.
    + Texts in prompts are now selectable.
    + The default level for :messages is now info, not error
    + Trying to focus the currently focused tab with :tab-focus now focuses the
      last viewed tab.
    + (QtWebEngine) With Qt 5.9, content -> cookies-store can now be set without
      a restart.
    + (QtWebEngine) With Qt 5.9, better error messages are now shown for failed
      downloads.
    + (QtWebEngine) The underlying Chromium version is now shown in the version
      info.
    + (QtWebKit) Renderer process crashes now show an error page on Qt 5.9
      or newer.
    + (QtWebKit) storage -> offline-web-application-storagegot renamed to
      ...-cache
    + (QtWebKit) PAC now supports SOCKS5 as type.
  * Fixed:
    + Fixed crash with :download on PyQt 5.9.
    + Cloning a page without history doesn't crash anymore.
    + When a download results in a HTTP error, it now shows the error correctly
      instead of crashing.
    + Pressing ctrl-c while a config error is shown works as intended now.
    + When the key config isn't writable, we now show an error instead of
      crashing.
    + Fixed crash when unbinding an unbound key in the key config.
    + Fixed crash when using :debug-log-filter when --filter wasn't given
      on startup.
    + Fixed crash with some invalid setting values.
    + Continuing a search after clearing it now works correctly.
    + The tabbar and completion should now be more consistently and correctly
      styled with various system styles.
    + Applying styiles in qt5ct now shouldn't crash anymore.
    + The validation for colors in stylesheets is now less strict,
      allowing for all valid Qt values.
    + data: URLs now aren't added to the history anymore.
    + Accidentally starting with Python 2 now shows a proper error message again
    + For some people, running some userscripts crashed - this should now be
      fixed.
    + Various other rare crashes should now be fixed.
    + The settings documentation was truncated with v0.10.1 which should now be
      fixed.
    + Scrolling to an anchor in a background tab now works correctly,
      and javascript gets the correct window size for background tabs.
    + (QtWebEngine) Added a workaround for a black screen with some setups
    + (QtWebEngine) Starting with Nouveau graphics now shows an error message
      instead of crashing in Qt.
    + (QtWebEngine) Retrying downloads now shows an error instead of crashing.
    + (QtWebEngine) Cloning a view-source tab now doesn't crash anymore.
    + (QtWebEngine) window.navigator.userAgent is now set correctly when
      customizing the user agent.
    + (QtWebEngine) HTML fullscreen is now tracked for each tab separately,
      which means it's not possible anymore to accidentally get stuck in
      fullscreen state by closing a tab with a fullscreen video.
    + (QtWebEngine) :scroll-page with --bottom-navigate now works correctly.
    + (QtWebKit) The HTTP cache is disabled on Qt 5.7.1 and 5.8 now as it leads
      to frequent crashes due to a Qt bug.
    + (QtWebKit) Fixed Crash when a PAC file returns an invalid value.

-------------------------------------------------------------------
Tue May  2 06:56:20 UTC 2017 - sor.alexei@meowr.ru

- Update to version 0.10.1:
  * --qt-arg and --qt-flag can now also be used to pass arguments
    to Chromium when using QtWebEngine.
  * URLs are now redacted properly (username/password, and
    path/query for HTTPS) when using Proxy Autoconfig with QtWebKit.
  * Fix a crash when updating adblock lists with invalid UTF8-chars
    in them.
  * Fix the web inspector with QtWebEngine.
  * Version checks when starting qutebrowser now also take the Qt
    version PyQt was compiled against into account.
  * Hinting a input now doesn't select existing text anymore with
    QtWebKit.
  * The cursor now moves to the end when input elements are
    selected with QtWebEngine.
  * Download suffixes like (1) are now correctly stripped with
    QtWebEngine.
  * Fix a crash when trying to print a tab which was closed in the
    meantime.
- Add the missing python3-sip dependency (boo#1036934).

-------------------------------------------------------------------
Sun Feb 26 13:14:24 UTC 2017 - sor.alexei@meowr.ru

- Update to version 0.10.0:
  * Userscripts now have a new `$QUTE_COMMANDLINE_TEXT` environment
    variable, containing the current commandline contents.
  * A new `ripbang` userscript to create a searchengine from a
    duckduckgo bang.
  * QtWebKit Reloaded (https://github.com/annulen/webkit) is now
    fully supported.
  * Various new functionality with the QtWebEngine backend:
    + printing support with Qt >= 5.8;
    + proxy support with Qt >= 5.8;
    + the `general -> print-element-backgrounds` option with
      Qt >= 5.8;
    + the `content -> cookies-store` option;
    + the `storage -> cache-size` option;
    + the `colors -> webpage.bg` option;
    + the HTML5 fullscreen API (e.g. youtube videos);
    + `:download --mhtml`.
  * A new `qute:history` URL and `:history` command to show the
    browsing history.
  * Open tabs are now auto-saved on each successful load and
    restored in case of a crash.
  * `:jseval` now has a `--file` flag so you can pass a javascript
    file.
  * `:session-save` now has a `--only-active-window` flag to only
    save the active window.
  * PyQt 5.7/Qt 5.7.1 is now required for the QtWebEngine backend.
  * Scrolling with the scrollwheel while holding shift now scrolls
    sideways.
  * New way of clicking hints which solves various small issues.
  * When yanking a mailto: link via hints, the mailto: prefix is 
    now stripped.
  * Zoom level messages are now not stacked on top of each other
    anymore.
  * qutebrowser now automatically uses QtWebEngine if QtWebKit is
    not available.
  * :history-clear now asks for a confirmation, unless it's run
    with --force.
  * `input -> mouse-zoom-divider` can now be 0 to disable zooming
    by mouse wheel.
  * `network -> proxy` can also be set to `pac+file://...` now to
    use a local proxy autoconfig file (on QtWebKit).
  * Fix various bugs with Qt 5.8 and QtWebEngine:
    + a segfault when closing a window;
    + a segfault when closing a tab with a search active;
    + fix various mouse actions (like automatically entering insert
      mode) not working;
    + fixed hints sometimes not working;
    + segfault when opening a URL after a QtWebEngine renderer
      process crash.
  * Other QtWebEngine fixes:
    + insert mode now gets entered correctly with a non-100% zoom;
    + crash reports are now re-enabled when using QtWebEngine;
    + fix crashes when closing tabs while hinting;
    + using :undo or :tab-clone with a view-source:// or chrome://
      tab is now prevented, as it segfaults.
  * `:enter-mode` now refuses to enter modes which can't be entered
    manually (which caused crashes).
  * `:record-macro` (`q`) now doesn't try to record macros for
    special keys without a text.
  * Fix PAC (proxy autoconfig) not working with QtWebKit.
  * `:download --mhtml` now uses the new file dialogue.
  * Word hints are now upper-cased correctly when
    hints -> uppercase is true.
  * Font validation is now more permissive in the config, allowing
    e.g. "Terminus (TTF)" as font name.
  * Fix starting on newer PyQt/sip versions with LibreSSL.
  * When downloading files with QtWebKit, a User-Agent header is
    set when possible.
  * Fix showing keybindings in the :help completion.
  * `:navigate prev/next` now detects `rel` attributes on `<a>`
    elements, and handles multiple `rel` attributes correctly.
  * Fix a crash when hinting with target `userscript` and spawning
    a non-existing script.
  * Lines in Jupyter notebook now trigger insert mode.

-------------------------------------------------------------------
Sat Feb 25 09:38:44 UTC 2017 - otto.tuominen@openmailbox.org

- Update to version 0.9.1 (changes since 0.8.1):
  * Prevent websites from downloading files to a location outside of the download
    folder with QtWebEngine.
  * New dependency: qutebrowser now depends on the Qt QML module, which is
    packaged separately in some distributions (as Qt Declarative/QML/Quick).
  * New :rl-backward-kill-word command which does what :rl-unix-word-rubout
    did before v0.8.0.
  * New :rl-unix-filename-rubout command which is similar to readline's
    unix-filename-rubout.
  * New fonts -> completion.category setting to customize the font used for
    completion category headers.
  * New :debug-log-capacity command to adjust how many lines are logged into RAM
    (to report bugs which are difficult to reproduce).
  * New hide-unmatched-rapid-hints option to not hide hint unmatched hint labels
    in rapid mode.
  * New {clipboard} and {primary} replacements for the commandline which
    replace the :paste command.
  * New :insert-text command to insert a given text into a field on the page,
    which replaces :paste-primary together with the {primary} replacement.
  * New :window-only command to close all other windows.
  * New prev-category and next-category arguments to :completion-item-focus
    to focus the previous/next category in the completion (bound to <Ctrl-Tab>
  * and <Ctrl-Shift-Tab> by default).
  * New :click-element command to fake a click on a element.
  * New :debug-log-filter command to change console log filtering on-the-fly.
  * New :debug-log-level command to change the console loglevel on-the-fly.
  * New general -> yank-ignored-url-parameters option to configure which URL
    parameters (like utm_source etc.) to strip off when yanking an URL.
  * Support for the HTML5 page visibility API
  * New readability userscript which shows a readable version of a page (using
    the readability-lxml python package)
  * New cast userscript to show a video on a Google Chromecast
  * New :run-with-count command which replaces the (undocumented) :count:command syntax.
  * New :record-macro (q) and :run-macro (@) commands for keyboard macros.
  * New ui -> hide-scrollbar setting to hide the scrollbar independently of the
    user-stylesheet setting.
  * New general -> default-open-dispatcher setting to configure what to open
    downloads with (instead of e.g. xdg-open on Linux).
  * Support for PAC (proxy autoconfig) with QtWebKit  
  * Hints are now drawn natively in Qt instead of using web elements. This has a
    few implications for users:
        The hints -> opacity setting does not exist anymore, but you can use
        rgba(r, g, b, alpha) colors instead for colors -> hints.bg.
        The hints -> font setting is not affected by
        fonts -> web-family-fixed anymore. Thus, a transformer got added to
        change Monospace to ${_monospace}.
        Gradients in hint colors can now be configured by using qlineargradient
        and friends instead of -webkit-gradient. The most common cases get
        migrated automatically, but if you drastically changed the defaults,
        you'll need to manually adjust your config.
        Styling hints by styling qutehint elements in user-stylesheet was
        never officially supported and does not work anymore.
        Hints are now not affected by the page's stylesheet or zoom anymore.
  * :bookmark-add now has a --toggle flag which deletes the bookmark if it
    already exists.
  * :bookmark-load now has a --delete flag which deletes the bookmark after
    loading it.
  * :open now also accepts quickmark names instead of URLs
  * :tab-move now optionally takes an index for absolute moving.
  * Commands taking either an argument or a count (like :zoom or :tab-focus)
    now prefer the count instead of showing an error message.
  * :open now has an --implicit argument to treat the opened tab as implicit
    (i.e. to open it at the position it would be opened if it was a clicked link)
  * :download-open and :prompt-open-download now have an optional cmdline
    argument to pass a commandline to open the download with.
  * :yank now has a position argument to select what to yank instead of using
    flags.
  * Replacements like {url} can now also be used in the middle of an argument.
  * Consequently, commands taking another command (:later, :repeat and
    :bind) now don't immediately evaluate variables.
  * Tab titles in the :buffer completion now update correctly when a page's
    title is changed via javascript.
  * :hint now has a --mode <mode> flag to override the hint mode configured
    using the hints -> mode setting.
  * With new-instance-open-target set to a tab option, the tab is now opened in
    the most recently focused (instead of the last opened) window. This can be
    configured with the new new-instance-open-target.window setting.
  * It can also be set to last-visible to show the pages in the most recently
    visible window, or first-opened to use the first (oldest) available window.
  * Word hints now are more clever about getting the element text from some elements.
  * Completions for :help and :bind now also show hidden commands
  * The :buffer completion now also filters using the first column (id).
  * :undo has been improved to reopen tabs at the position they were closed.
  * :navigate now takes a count for up/increment/decrement.
  * The hints -> auto-follow setting now can be set to
    always/full-match/unique-match/never to more precisely control when
    hints should be followed automatically.
  * Counts can now be used with special keybindings (e.g. with modifiers).
    This was already implemented for v0.7.0 originally, but got reverted because
    it caused some issues and then never re-applied.
  * Sending a command to an existing instance (via "qutebrowser :reload") now
    doesn't mark it as urgent anymore.
  * tabs -> title-format now treats an empty string as valid.
  * Bindings for :, / and ? are now configured explicitly and not hardcoded
    anymore.
  * The completion -> show setting can now be set to always, auto or
    never.
  * :open-editor can now be used in any mode.
  * Lots of improvements to and bugfixes for the QtWebEngine backend, such as
    working hints. However, using qutebrowser directly from git is still advised
    when using --backend webengine.
    content -> javascript-can-open-windows got renamed to
    javascript-can-open-windows-automatically.
  * :prompt-accept now optionally accepts a value which overrides the one
    entered in the input box. yes and no can be used as values for yes/no
    questions.
  * The new --qt-arg and --qt-flag arguments can be used to pass
    arguments/flags to Qt's commandline.
  * Error/warning/info messages are now shown stacked above the statusbar.
  * This also added various new settings:
        colors -> messages.fg.error (renamed from statusbar.fg.error)
        colors -> messages.bg.error (renamed from statusbar.bg.error)
        colors -> messages.border.error
        colors -> messages.fg.warning (renamed from statusbar.fg.warning)
        colors -> messages.bg.warning (renamed from statusbar.bg.warning)
        colors -> messages.border.warning
        colors -> messages.fg.info
        colors -> messages.bg.info
        colors -> messages.border.info
        fonts -> messages.error
        fonts -> messages.warning
        fonts -> messages.info
  * The qute:settings page now also shows option descriptions.
  * qute:version and qutebrowser --version now show various important paths
  * :spawn/userscripts now show a nicer error when a script wasn't found
  * Various functionality now works when javascript is disabled with QtWebKit
  * Various commands/settings taking left/right/previous arguments now take
    prev/next/last-used to remove ambiguity.
  * The ui -> user-stylesheet setting now only takes filenames, not CSS snippets
  * ui -> window-title-format now has a new {backend} replacement
  * :hint has a new --add-history argument to add the URL to the history for
    yank/spawn targets.
  * :set now cycles through values if more than one argument is given.
  * :open now opens default-page without an URL even without -t/-b/-w given.
  * The :paste command got deprecated as :open with {clipboard} and
    {primary} can be used instead.
  * The :paste-primary command got deprecated as :insert-text {primary} can
    be used instead.
  * The :prompt-yes and :prompt-no commands got deprecated as
    :prompt-accept yes and :prompt-accept no can be used instead.
  * The :yank-selected command got merged into :yank as :yank selection
    and thus removed.
  * The :completion-item-prev and :completion-item-next commands got merged
    into a new :completion-focus {prev,next} command and thus removed.
  * The ui -> hide-mouse-cursor setting since it was completely broken and
    nobody seemed to care.
  * The hints -> opacity setting - see the "Changed" section for details.
  * The completion -> auto-open setting got merged into completion -> show and
    thus removed.
  * All --qt-* arguments got replaced by --qt-arg and --qt-flag and thus
    removed.
  * The -c/--confdir, --datadir and --cachedir arguments got removed, as
    --basedir should be sufficient.
  * :undo now doesn't undo tabs "closed" by :tab-detach anymore.
  * Fixed an issue with hint chars not being cleared correctly when leaving hint
    mode.
  * :tab-detach now fails correctly when there's only one tab open.
  * Various small issues with the command completion
  * Fixed hang when using multiple spaces in a row with the URL completion
  * qutebrowser now still starts with an incorrectly configured
    $XDG_RUNTIME_DIR.
  * Fixed crash when a userscript writes invalid unicode data to the FIFO
  * Fixed crash when a included HTML was not found
  * v0.8.3 accidentally broke compatibility with Python 3.4, which is restored with this release.
  * Fixed crash when doing :<space><enter>, another corner-case introduced in v0.8.0
  * Fixed :open-editor (<Ctrl-e>) on Windows
  * Fixed crash when setting general -> auto-save-interval to a too big value.
  * Fixed crash when using hints on Void Linux.
  * Fixed compatibility with Python 3.5.2+ on Debian unstable
  * Compatibility with pdfjs v1.6.210
  * :bind can now be used to bind to an alias (binding by editing keys.conf
    already worked before)
  * The command completion now updates correctly when changing aliases
  * The tabbar now displays correctly with the Adwaita Qt theme
  * The default sk keybinding now sets the commandline to :bind correctly
  * Fixed crash when closing a window without focusing it
  * Fixed general -> private-browsing not being set correctly until a restart
    (which caused e.g. local storage to be enabled).
  * Fixed crash when using hints with JS disabled in some rare circumstances.
    When hinting input fields (:t), also consider input elements without a type.
  * Fixed crash when opening an invalid URL with a percent-encoded and a real @ in it
  * Fixed default ;o and ;O bindings
  * Fixed local storage not working (and possible other bugs) when using a
    relative path with --basedir.
  * Fixed crash when deleting a quickmark with Ctrl-D
  * Fixed HTML5 video playback on Windows
  * Fixed crash when using :prompt-open-download with a file with chars not
    encodable with the OS' filesystem encoding (e.g. with LC_ALL=C)
  * Fixed :prompt-open-download with a too long filename (< 255 bytes)
  * Fixed crash when cancelling a download after doing :prompt-open-download
  * Fixed crash when writing a download to disk fails with
    :prompt-open-download.
  * Fixed HTML5 video playback on Windows



-------------------------------------------------------------------
Sat Jul 30 15:12:32 UTC 2016 - sor.alexei@meowr.ru

- Update to version 0.8.1 (changes since 0.7.0):
  * Add new ":repeat-command" command (mapped to ".") to repeat the
    last command.
    Note that two former default bundings conflict with that
    binding, unbinding them via ":unbind .i" and ":unbind .o" is
    recommended.
  * Add new "qute:bookmarks" page which displays all bookmarks and
    quickmarks.
  * Add new ":prompt-open-download" (bound to Ctrl-X) which can be
    used to open a download directly when getting the filename
    prompt.
  * Add new "{host}" replacement for tab- and window titles which
    evaluates to the current host.
  * Add new default binding ";t" for ":hint input".
  * Add new variables "$QUTE_CONFIG_DIR", "$QUTE_DATA_DIR" and
    "$QUTE_DOWNLOAD_DIR" available for userscripts.
  * Add new option "ui" -> "status-position" to configure the
    position of the status bar (top/bottom).
  * Add new "--pdf <filename>" argument for ":print" WHICH can be
    used to generate a PDF without a dialog.
  * ":scroll-perc" now prefers a count over the argument given to
    it, which means "gg" can be used with a count.
  * Aliases can now use ";;" to have an alias which executed
    multiple commands.
  * ":edit-url" now does nothing if the URL isn't changed in the
    spawned editor.
  * ":bookmark-add" can now be passed a URL and title to add that
    as a bookmark rather than the current page.
  * New "taskadd" userscript to add a taskwarrior task annotated
    with the current URL.
  * ":bookmark-del" and ":quickmark-del" now delete the current
    page's URL if none is given.
  * Fix compatibility with PyQt 5.7.
  * Fix some configuration values being lost when a config option
    gets removed from qutebrowser's code.
  * Fix a crash when downloading with a full drive.
  * Fix using ":jump-mark" (e.g. '') when the current URL is
    invalid doesn't crash anymore.
  * Fix a crash when pressing enter without a command.
  * Remove the ability to display status messages from webpages, as
    well as the related "ui" -> "display-statusbar-messages"
    setting.
  * Remove the "general" -> "wrap-search" setting as searches now
    always wrap.
    According to a quick straw poll and prior crash logs, almost
    nobody is using "wrap-search = false", and turning off wrapping
    is not possible with QtWebEngine.
  * Remove ":edit-url" now doesn't accept a count anymore as its
    behaviour was confusing and it doesn't make much sense to add a
    count.

-------------------------------------------------------------------
Sat Jun 11 09:34:07 UTC 2016 - sor.alexei@meowr.ru

- Update to version 0.7.0:
  * Add new ":edit-url" command to edit the URL in an external
    editor.
  * Add new "network -> custom-headers" setting to send custom
    headers with every request.
  * Add new "{url:pretty}" commandline replacement which gets
    replaced by the decoded URL.
  * Add new marks to remember a scroll position.
  * Add new ":jump-mark" command to jump to a mark, bound to "'".
  * Add new ":set-mark" command to set a mark, bound to ```
    (backtick).
  * Now the "'" mark gets set when moving away (hinting link with
    anchor, searching, etc.) so you can move back with "''".
  * Add new "--force-color" argument to force coloured logging even
    if stdout is not a terminal.
  * Add new ":messages" command to show error messages.
  * Add new pop-up showing possible keybinding when the first key
    of a keychain is pressed. This can be turned off using
    ":set ui keyhint-blacklist *".
  * Add new "hints -> auto-follow-timeout" setting to ignore
    keypresses after following a hint when filtering in number mode.
  * Add new ":history-clear "command to clear the entire history
  * Add new "hints -> find-implementation" to select which
    implementation (JS/Python) should be used to find hints on a
    page. The javascript implementation is better, but slower.
  * Change (slightly update) logo.
  * ":tab-focus" can now take a negative index to focus the nth tab
     counted from the right.
  * ":yank" can now yank the pretty/decoded URL by adding "--pretty".
  * ":navigate" now clears the URL fragment.
  * ":completion-item-del" (Ctrl-D) can now be used in ":buffer"
    completion to close a tab.
  * Counts can now be used with special keybindings (e.g. with
    modifiers).
  * Various SSL ciphers are now disabled by default. With recent
    Qt/OpenSSL versions those already all are disabled, but with
    older versions they might not be.
  * Show favicons as window icon with tabs-are-windows set.
  * ":bind <key>" without a command now shows the existing binding.
  * The optional colorlog dependency got removed, as qutebrowser
    now displays coloured logs without it.
  * URLs are now shown decoded when hovering.
  * Keybindings are now shown in the command completion.
  * Improved behaviour when pasting multiple lines.
  * Rapid hints can now also be used for the normal hint target,
    which can be useful with javascript click handlers or
    checkboxes which don’t actually open a new page.
  * ":zoom-in" or ":zoom-out" (+/-) with a too large count now
    zooms to the smallest/largest zoom instead of doing nothing.
  * The commandline now accepts partially typed commands if they’re
    unique.
  * Number hints are now kept filtered after following a hint in
    rapid mode.
  * Number hints are now renumbered after filtering.
  * Number hints can now be filtered with multiple space-separated
    search terms.
  * "hints -> scatter" is now ignored for number hints.
  * Better history implementation which also stores titles. As a
    consequence, URLs which redirect to another URL are now added to
    the history too, marked with an -r suffix to the timestamp field.
  * Fix using ":hint links spawn" with flags – you can now use
    things like the -v argument for ":spawn" or pass flags to the
    spawned commands.
  * Various fixes for hinting corner-cases where following a link
    didn’t work or the hint was drawn at the wrong position.
  * Fix crash when downloading from an URL with SSL errors.
  * Close file handles correctly when a download failed.
  * Fix crash when using ";Y" (":hint links yank-primary") on a
    system without primary selection.
  * Don’t display quit confirmation with finished downloads.
  * Fix updating the tab index in the statusbar when opening a
    background tab.
  * Fix a crash when entering `:-- ` in the commandline.
  * Fix ":debug-console" with PyQt 5.6.
  * Fix qutebrowser not starting when sys.stderr is None.
  * Fix a crash when cancelling a download which belongs to a MHTML
    download.
  * Fix rebinding of keybindings being case-sensitive.
  * Fix for tab indicators getting lost when moving tabs.
  * Fix handling of backspace in number hinting mode.
  * Fix FileNotFoundError when starting in some cases on old Qt
    versions.
  * Fix sharing of cookies between tabs when "private-browsing" is
    enabled.
  * Toggling values with ":set" now uses lower-case values.
  * Hints now work with (non-standard) links with spaces around the
    URL.
  * Strip off trailing spaces for history entries with no title.

-------------------------------------------------------------------
Sat May  7 07:12:54 UTC 2016 - sor.alexei@meowr.ru

- Update to version 0.6.2:
  * Fix crash when using :tab-{prev,next,focus} right after closing
    the last tab with last-close set to close.
  * Fix crash when doing :undo in a new instance with
    tabs -> last-close set to default-page.
  * Fix crash when starting with --cachedir="".
  * Fix crash in some circumstances when using dictionary hints.
  * Fix various crashes related to PyQt 5.6.

-------------------------------------------------------------------
Thu Apr 21 07:07:37 UTC 2016 - sor.alexei@meowr.ru

- Initial Package.
