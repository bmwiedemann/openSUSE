From 0ce7f59cc15da9759d55e6a6b332d2a1bd7f78b4 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?M=C3=A5rten=20Nordheim?= <marten.nordheim@qt.io>
Date: Fri, 17 Nov 2023 15:32:14 +0100
Subject: [PATCH] Fix re-initializing a moved-from QProtobufMessage using copy

It was expecting the data-pointer was not nullptr, but after moving out
it is.

Fixes: QTBUG-119227
Change-Id: I3a8907dd0e16b33604481d9d6c382c238b067676
Reviewed-by: Alexey Edelev <alexey.edelev@qt.io>
(cherry picked from commit 0bc538fa9a544255753bfc387e6b620a10b6d1fa)
Reviewed-by: Qt Cherry-pick Bot <cherrypick_bot@qt-project.org>
---
 src/protobuf/qprotobufmessage.cpp             |  6 ++++-
 .../basic/tst_protobuf_basictypes.cpp         | 26 +++++++++++++++++++
 2 files changed, 31 insertions(+), 1 deletion(-)

diff --git a/src/protobuf/qprotobufmessage.cpp b/src/protobuf/qprotobufmessage.cpp
index 124ec50..2e29b43 100644
--- a/src/protobuf/qprotobufmessage.cpp
+++ b/src/protobuf/qprotobufmessage.cpp
@@ -148,7 +148,11 @@ QProtobufMessage::QProtobufMessage(const QProtobufMessage &other)
 */
 QProtobufMessage &QProtobufMessage::operator=(const QProtobufMessage &other)
 {
-    if (this != &other)
+    if (!other.d_ptr)
+        delete std::exchange(d_ptr, {}); // delete d_ptr if other.d_ptr is null
+    else if (!d_ptr)
+        d_ptr = new QProtobufMessagePrivate(*other.d_ptr);
+    else if (this != &other)
         *d_ptr = *other.d_ptr;
     return *this;
 }
diff --git a/tests/auto/protobuf/basic/tst_protobuf_basictypes.cpp b/tests/auto/protobuf/basic/tst_protobuf_basictypes.cpp
index 83d3c6e..b2e8270 100644
--- a/tests/auto/protobuf/basic/tst_protobuf_basictypes.cpp
+++ b/tests/auto/protobuf/basic/tst_protobuf_basictypes.cpp
@@ -62,6 +62,18 @@ void QtProtobufTypesGenerationTest::EmptyMessageTest()
     QProtobufMessagePointer rawMessage(
             QProtobufMessage::constructByName("qtprotobufnamespace.tests.EmptyMessage"));
     QVERIFY(reinterpret_cast<qtprotobufnamespace::tests::EmptyMessage*>(rawMessage.get()) != nullptr);
+
+    // Move from and reuse. This should compile and run:
+    qtprotobufnamespace::tests::EmptyMessage from;
+    qtprotobufnamespace::tests::EmptyMessage to = std::move(from);
+    from = to;
+    QCOMPARE(from, to);
+
+    qtprotobufnamespace::tests::EmptyMessage bucket = std::move(to);
+    bucket = std::move(from);
+
+    from = to;
+    QCOMPARE(from, to);
 }
 
 void QtProtobufTypesGenerationTest::BoolMessageTest()
@@ -77,6 +89,20 @@ void QtProtobufTypesGenerationTest::BoolMessageTest()
     QCOMPARE(SimpleBoolMessage::TestFieldBoolProtoFieldNumber, 1);
     QCOMPARE(test.propertyOrdering.getMessageFullName(),
              "qtprotobufnamespace.tests.SimpleBoolMessage");
+
+    // Move from and reuse
+    qtprotobufnamespace::tests::SimpleBoolMessage from;
+    qtprotobufnamespace::tests::SimpleBoolMessage to = std::move(from);
+    from = to;
+    QCOMPARE(from.testFieldBool(), to.testFieldBool());
+    // Changes in one should not be visible in the other:
+    to.setTestFieldBool(!to.testFieldBool());
+    QCOMPARE_NE(from.testFieldBool(), to.testFieldBool());
+
+    from = to;
+    to.setProperty(propertyName, QVariant::fromValue(!to.testFieldBool()));
+    QCOMPARE_NE(from.testFieldBool(), to.testFieldBool());
+
 }
 
 void QtProtobufTypesGenerationTest::IntMessageTest()
-- 
2.42.1

