From 96f53a2dbcf3efde06fec2439439bb8298248ea4 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Julius=20K=C3=BCnzel?= <jk.kdedev@smartlab.uber.space>
Date: Fri, 24 Jun 2022 16:16:05 +0200
Subject: [PATCH 4/5] Add MLT_REPOSITORY_DENY envvar to skip plugin loading

Use colon to separate entries

Example:
MLT_REPOSITORY_DENY=libmltplus:libmltavformat:libmltfrei0r

Related to #801
---
 src/framework/mlt_factory.h    |  1 +
 src/framework/mlt_repository.c | 23 +++++++++++++++++++++++
 2 files changed, 24 insertions(+)

diff --git a/src/framework/mlt_factory.h b/src/framework/mlt_factory.h
index 5ae7f53..f590228 100644
--- a/src/framework/mlt_factory.h
+++ b/src/framework/mlt_factory.h
@@ -35,6 +35,7 @@
  * \envvar \em MLT_REPOSITORY overrides the default location of the plugin modules, defaults to \p PREFIX_LIB.
  * MLT_REPOSITORY is ignored on Windows and OS X relocatable builds.
  * \envvar \em MLT_PRESETS_PATH overrides the default full path to the properties preset files, defaults to \p MLT_DATA/presets
+ * \envvar \em MLT_REPOSITORY_DENY colon seperated list of modules to skip. Example: libmltplus:libmltavformat:libmltfrei0r
  * \event \em producer-create-request fired when mlt_factory_producer is called;
  *   the event data is a pointer to mlt_factory_event_data
  * \event \em producer-create-done fired when a producer registers itself;
diff --git a/src/framework/mlt_repository.c b/src/framework/mlt_repository.c
index ce73086..73d91fc 100644
--- a/src/framework/mlt_repository.c
+++ b/src/framework/mlt_repository.c
@@ -98,12 +98,33 @@ mlt_repository mlt_repository_init( const char *directory )
 	free(newpath);
 #endif
 
+	mlt_tokeniser tokeniser = mlt_tokeniser_init();
+	int dl_length = mlt_tokeniser_parse_new( tokeniser, getenv( "MLT_REPOSITORY_DENY" ), ":" );
+
 	// Iterate over files
 	for ( i = 0; i < count; i++ )
 	{
 		int flags = RTLD_NOW;
 		const char *object_name = mlt_properties_get_value( dir, i);
 
+		// check if the plugin was asked to be skipped through MLT_REPOSITORY_DENY
+		int ignore = 0;
+		for (int j = 0; j < dl_length; j++ )
+		{
+			char *denyfile = calloc( 1, strlen( directory ) + strlen( mlt_tokeniser_get_string( tokeniser, j ) ) + 2 );
+			sprintf (denyfile, "%s/%s.", directory, mlt_tokeniser_get_string( tokeniser, j ));
+			ignore += !strncmp(object_name, denyfile, strlen( denyfile ) );
+			free (denyfile);
+		}
+
+		if (ignore)
+		{
+			mlt_log_info(NULL, "%s: skip plugin %s\n", __FUNCTION__, object_name);
+			continue;
+		}
+
+		mlt_log_debug(NULL, "%s: processing plugin at %s\n", __FUNCTION__, object_name);
+
 		// Open the shared object
 		void *object = dlopen( object_name, flags );
 		if ( object != NULL )
@@ -136,6 +157,8 @@ mlt_repository mlt_repository_init( const char *directory )
 
 	mlt_properties_close( dir );
 
+	mlt_tokeniser_close( tokeniser );
+
 	return self;
 }
 
-- 
2.37.1

