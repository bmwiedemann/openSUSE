From c180e7d22e3daa01a5e4c6b50b21bac795d8ecbe Mon Sep 17 00:00:00 2001
From: jlskuz <78424983+jlskuz@users.noreply.github.com>
Date: Wed, 3 Aug 2022 01:23:24 +0200
Subject: [PATCH 5/5] Avoid to load both qt modules (#816)

In case there is the intention to load both qt modules, qt6 will be
blocked. Use MLT_REPOSITORY_DENY to block qt5 (mltqt) instead
---
 src/framework/mlt_factory.h    |  1 +
 src/framework/mlt_repository.c | 26 +++++++++++++++++++++++++-
 2 files changed, 26 insertions(+), 1 deletion(-)

diff --git a/src/framework/mlt_factory.h b/src/framework/mlt_factory.h
index f590228..c4d2cf4 100644
--- a/src/framework/mlt_factory.h
+++ b/src/framework/mlt_factory.h
@@ -36,6 +36,7 @@
  * MLT_REPOSITORY is ignored on Windows and OS X relocatable builds.
  * \envvar \em MLT_PRESETS_PATH overrides the default full path to the properties preset files, defaults to \p MLT_DATA/presets
  * \envvar \em MLT_REPOSITORY_DENY colon seperated list of modules to skip. Example: libmltplus:libmltavformat:libmltfrei0r
+ * In case both qt5 and qt6 modules are found and none of both is blocked by MLT_REPOSITORY_DENY, qt6 will be blocked
  * \event \em producer-create-request fired when mlt_factory_producer is called;
  *   the event data is a pointer to mlt_factory_event_data
  * \event \em producer-create-done fired when a producer registers itself;
diff --git a/src/framework/mlt_repository.c b/src/framework/mlt_repository.c
index 73d91fc..4ad732b 100644
--- a/src/framework/mlt_repository.c
+++ b/src/framework/mlt_repository.c
@@ -101,6 +101,24 @@ mlt_repository mlt_repository_init( const char *directory )
 	mlt_tokeniser tokeniser = mlt_tokeniser_init();
 	int dl_length = mlt_tokeniser_parse_new( tokeniser, getenv( "MLT_REPOSITORY_DENY" ), ":" );
 
+	// check if both qt5 and qt6 modules are available…
+	int qtmodules = 0;
+	for ( i = 0; i < count; i++ )
+	{
+		const char *object_name = mlt_properties_get_value( dir, i);
+		qtmodules += strncmp(object_name, "mltqt", strlen( "mltqt" ) );
+		qtmodules += strncmp(object_name, "mltqt6", strlen( "mltqt6" ) );
+	}
+	// …and not blocked
+	for (int j = 0; j < dl_length; j++ )
+	{
+		char *denyfile = calloc( 1, strlen( directory ) + strlen( mlt_tokeniser_get_string( tokeniser, j ) ) + 3 );
+		sprintf (denyfile, "%s/%s.", directory, mlt_tokeniser_get_string( tokeniser, j ));
+		qtmodules -= !strncmp("mltqt", denyfile, strlen( denyfile ) );
+		qtmodules -= !strncmp("mltqt6", denyfile, strlen( denyfile ) );
+		free (denyfile);
+	}
+
 	// Iterate over files
 	for ( i = 0; i < count; i++ )
 	{
@@ -111,12 +129,18 @@ mlt_repository mlt_repository_init( const char *directory )
 		int ignore = 0;
 		for (int j = 0; j < dl_length; j++ )
 		{
-			char *denyfile = calloc( 1, strlen( directory ) + strlen( mlt_tokeniser_get_string( tokeniser, j ) ) + 2 );
+			char *denyfile = calloc( 1, strlen( directory ) + strlen( mlt_tokeniser_get_string( tokeniser, j ) ) + 3 );
 			sprintf (denyfile, "%s/%s.", directory, mlt_tokeniser_get_string( tokeniser, j ));
 			ignore += !strncmp(object_name, denyfile, strlen( denyfile ) );
 			free (denyfile);
 		}
 
+		// in case we have both qt modules, we block qt6 to avoid conflicts
+		if (qtmodules == 2 && strncmp(object_name, "mltqt6", strlen( "mltqt6" ) ) )
+		{
+			ignore = 1;
+		}
+
 		if (ignore)
 		{
 			mlt_log_info(NULL, "%s: skip plugin %s\n", __FUNCTION__, object_name);
-- 
2.37.1

