From 7665d32526f1192e94db2b4bb3e4e73d6a21f62e Mon Sep 17 00:00:00 2001
From: som <somashekhar.puttagangaiah@intel.com>
Date: Thu, 6 Oct 2022 20:52:18 +0530
Subject: [PATCH] intel-mutual-authentication: new service, fcc-lock

when the device is first shipped or comes out of the factory,
it should be protected with a lock till the device reaches
the end user. This FCC lock feature will ensure the device
is secured till its unlocked.

Co-author: Bestha, Lakshminarayana
(cherry picked from commit 910db9cb2b6fde303d3b4720890cf6dc6fc00880)
---
 ...m-service-intel-mutual-authentication.json |  23 ++
 .../libmbim-glib/libmbim-glib-common.sections |   6 +
 .../libmbim-glib/libmbim-glib-docs.xml        |   6 +
 src/libmbim-glib/generated/meson.build        |   1 +
 src/libmbim-glib/libmbim-glib.h               |   2 +
 src/libmbim-glib/mbim-cid.c                   |  15 ++
 src/libmbim-glib/mbim-cid.h                   |  15 ++
 src/libmbim-glib/mbim-message.c               |   5 +
 src/libmbim-glib/mbim-uuid.c                  |  14 ++
 src/libmbim-glib/mbim-uuid.h                  |  14 ++
 .../mbimcli-intel-mutual-authentication.c     | 207 ++++++++++++++++++
 src/mbimcli/mbimcli.c                         |  10 +
 src/mbimcli/mbimcli.h                         |   5 +
 src/mbimcli/meson.build                       |   1 +
 14 files changed, 324 insertions(+)
 create mode 100644 data/mbim-service-intel-mutual-authentication.json
 create mode 100644 src/mbimcli/mbimcli-intel-mutual-authentication.c

diff --git a/data/mbim-service-intel-mutual-authentication.json b/data/mbim-service-intel-mutual-authentication.json
new file mode 100644
index 0000000..d3943a1
--- /dev/null
+++ b/data/mbim-service-intel-mutual-authentication.json
@@ -0,0 +1,23 @@
+[
+  // *********************************************************************************
+  { "type" : "Service",
+    "name" : "Intel Mutual Authentication" },
+
+  // *********************************************************************************
+  { "name"     : "FCC Lock",
+    "service"  : "Intel Mutual Authentication",
+    "type"     : "Command",
+    "since"    : "1.30",
+    "query"    : [],
+    "set"      : [ { "name"          : "ResponsePresent",
+                     "format"        : "guint32",
+                     "public-format" : "gboolean" },
+                   { "name"          : "Response",
+                     "format"        : "guint32" } ],
+
+    "response" : [ { "name"          : "ChallengePresent",
+                     "format"        : "guint32",
+                     "public-format" : "gboolean" },
+                   { "name"          : "Challenge",
+                     "format"        : "guint32" } ] }
+]
diff --git a/docs/reference/libmbim-glib/libmbim-glib-common.sections b/docs/reference/libmbim-glib/libmbim-glib-common.sections
index 48f7706..5a29bb5 100644
--- a/docs/reference/libmbim-glib/libmbim-glib-common.sections
+++ b/docs/reference/libmbim-glib/libmbim-glib-common.sections
@@ -33,6 +33,7 @@ MBIM_UUID_MS_UICC_LOW_LEVEL_ACCESS
 MBIM_UUID_QUECTEL
 MBIM_UUID_INTEL_THERMAL_RF
 MBIM_UUID_MS_VOICE_EXTENSIONS
+MBIM_UUID_INTEL_MUTUAL_AUTHENTICATION
 <SUBSECTION Methods>
 mbim_service_get_string
 mbim_service_lookup_name
@@ -75,6 +76,7 @@ MbimCidMsUiccLowLevelAccess
 MbimCidQuectel
 MbimCidIntelThermalRf
 MbimCidMsVoiceExtensions
+MbimCidIntelMutualAuthentication
 <SUBSECTION Methods>
 mbim_cid_can_set
 mbim_cid_can_query
@@ -100,6 +102,7 @@ mbim_cid_ms_uicc_low_level_access_get_string
 mbim_cid_quectel_get_string
 mbim_cid_intel_thermal_rf_get_string
 mbim_cid_ms_voice_extensions_get_string
+mbim_cid_intel_mutual_authentication_get_string
 <SUBSECTION Private>
 mbim_cid_atds_build_string_from_mask
 mbim_cid_basic_connect_build_string_from_mask
@@ -121,6 +124,7 @@ mbim_cid_ms_uicc_low_level_access_build_string_from_mask
 mbim_cid_quectel_build_string_from_mask
 mbim_cid_intel_thermal_rf_build_string_from_mask
 mbim_cid_ms_voice_extensions_build_string_from_mask
+mbim_cid_intel_mutual_authentication_build_string_from_mask
 <SUBSECTION Standard>
 MBIM_TYPE_CID_ATDS
 MBIM_TYPE_CID_AUTH
@@ -142,6 +146,7 @@ MBIM_TYPE_CID_MS_UICC_LOW_LEVEL_ACCESS
 MBIM_TYPE_CID_QUECTEL
 MBIM_TYPE_CID_INTEL_THERMAL_RF
 MBIM_TYPE_CID_MS_VOICE_EXTENSIONS
+MBIM_TYPE_CID_INTEL_MUTUAL_AUTHENTICATION
 mbim_cid_atds_get_type
 mbim_cid_auth_get_type
 mbim_cid_basic_connect_get_type
@@ -162,6 +167,7 @@ mbim_cid_ms_sar_get_type
 mbim_cid_quectel_get_type
 mbim_cid_intel_thermal_rf_get_type
 mbim_cid_ms_voice_extensions_get_type
+mbim_cid_intel_mutual_authentication_get_type
 </SECTION>
 
 <SECTION>
diff --git a/docs/reference/libmbim-glib/libmbim-glib-docs.xml b/docs/reference/libmbim-glib/libmbim-glib-docs.xml
index 8b11b72..cc65e64 100644
--- a/docs/reference/libmbim-glib/libmbim-glib-docs.xml
+++ b/docs/reference/libmbim-glib/libmbim-glib-docs.xml
@@ -23,6 +23,7 @@
       <year>2019</year>
       <year>2020</year>
       <year>2021</year>
+      <year>2022</year>
       <holder>The libmbim-glib authors</holder>
     </copyright>
 
@@ -103,6 +104,7 @@
     <xi:include href="xml/mbim-intel-firmware-update.xml"/>
     <xi:include href="xml/mbim-intel-firmware-update-v2.xml"/>
     <xi:include href="xml/mbim-intel-thermal-rf.xml"/>
+    <xi:include href="xml/mbim-intel-mutual-authentication.xml"/>
   </chapter>
 
   <chapter>
@@ -188,6 +190,10 @@
     <title>Index of new symbols in 1.28</title>
     <xi:include href="xml/api-index-1.28.xml"></xi:include>
   </chapter>
+  <chapter id="api-index-1-30" role="1.30">
+    <title>Index of new symbols in 1.30</title>
+    <xi:include href="xml/api-index-1.30.xml"></xi:include>
+  </chapter>
 
   <xi:include href="xml/annotation-glossary.xml"><xi:fallback /></xi:include>
 </book>
diff --git a/src/libmbim-glib/generated/meson.build b/src/libmbim-glib/generated/meson.build
index 2ec85ea..63fe8d1 100644
--- a/src/libmbim-glib/generated/meson.build
+++ b/src/libmbim-glib/generated/meson.build
@@ -108,6 +108,7 @@ services_data = [
   ['sms'],
   ['stk'],
   ['ussd'],
+  ['intel-mutual-authentication'],
 ]
 
 foreach service_data: services_data
diff --git a/src/libmbim-glib/libmbim-glib.h b/src/libmbim-glib/libmbim-glib.h
index ff2e468..38d8db4 100644
--- a/src/libmbim-glib/libmbim-glib.h
+++ b/src/libmbim-glib/libmbim-glib.h
@@ -4,6 +4,7 @@
  * libmbim-glib -- GLib/GIO based library to control MBIM devices
  *
  * Copyright (C) 2013 - 2014 Aleksander Morgado <aleksander@aleksander.es>
+ * Copyright (C) 2022 Intel Corporation
  */
 
 #ifndef _LIBMBIM_GLIB_H_
@@ -45,6 +46,7 @@
 #include "mbim-quectel.h"
 #include "mbim-intel-thermal-rf.h"
 #include "mbim-ms-voice-extensions.h"
+#include "mbim-intel-mutual-authentication.h"
 
 /* backwards compatibility */
 #include "mbim-compat.h"
diff --git a/src/libmbim-glib/mbim-cid.c b/src/libmbim-glib/mbim-cid.c
index d8aa377..11170b3 100644
--- a/src/libmbim-glib/mbim-cid.c
+++ b/src/libmbim-glib/mbim-cid.c
@@ -4,6 +4,7 @@
  * libmbim-glib -- GLib/GIO based library to control MBIM devices
  *
  * Copyright (C) 2013 - 2014 Aleksander Morgado <aleksander@aleksander.es>
+ * Copyright (C) 2022 Intel Corporation
  */
 
 #include "mbim-cid.h"
@@ -228,6 +229,12 @@ static const CidConfig cid_ms_voice_extensions_config [MBIM_CID_MS_VOICE_EXTENSI
     { NO_SET,    QUERY,    NOTIFY }, /* MBIM_CID_MS_VOICE_EXTENSIONS_NITZ */
 };
 
+/* Note: index of the array is CID-1 */
+#define MBIM_CID_INTEL_MUTUAL_AUTHENTICATION_LAST MBIM_CID_INTEL_MUTUAL_AUTHENTICATION_FCC_LOCK
+static const CidConfig cid_intel_mutual_authentication_config [MBIM_CID_INTEL_MUTUAL_AUTHENTICATION_LAST] = {
+    { SET, QUERY, NO_NOTIFY }, /* MBIM_CID_INTEL_MUTUAL_AUTHENTICATION_FCC_LOCK */
+};
+
 gboolean
 mbim_cid_can_set (MbimService service,
                   guint       cid)
@@ -279,6 +286,8 @@ mbim_cid_can_set (MbimService service,
         return cid_intel_thermal_rf_config[cid - 1].set;
     case MBIM_SERVICE_MS_VOICE_EXTENSIONS:
         return cid_ms_voice_extensions_config[cid - 1].set;
+    case MBIM_SERVICE_INTEL_MUTUAL_AUTHENTICATION:
+        return cid_intel_mutual_authentication_config[cid - 1].set;
     case MBIM_SERVICE_INVALID:
     case MBIM_SERVICE_LAST:
     default:
@@ -338,6 +347,8 @@ mbim_cid_can_query (MbimService service,
         return cid_intel_thermal_rf_config[cid - 1].query;
     case MBIM_SERVICE_MS_VOICE_EXTENSIONS:
         return cid_ms_voice_extensions_config[cid - 1].query;
+    case MBIM_SERVICE_INTEL_MUTUAL_AUTHENTICATION:
+        return cid_intel_mutual_authentication_config[cid - 1].query;
     case MBIM_SERVICE_INVALID:
     case MBIM_SERVICE_LAST:
     default:
@@ -397,6 +408,8 @@ mbim_cid_can_notify (MbimService service,
         return cid_intel_thermal_rf_config[cid - 1].notify;
     case MBIM_SERVICE_MS_VOICE_EXTENSIONS:
         return cid_ms_voice_extensions_config[cid - 1].notify;
+    case MBIM_SERVICE_INTEL_MUTUAL_AUTHENTICATION:
+        return cid_intel_mutual_authentication_config[cid - 1].notify;
     case MBIM_SERVICE_INVALID:
     case MBIM_SERVICE_LAST:
     default:
@@ -457,6 +470,8 @@ mbim_cid_get_printable (MbimService service,
         return mbim_cid_intel_thermal_rf_get_string (cid);
     case MBIM_SERVICE_MS_VOICE_EXTENSIONS:
         return mbim_cid_ms_voice_extensions_get_string (cid);
+    case MBIM_SERVICE_INTEL_MUTUAL_AUTHENTICATION:
+        return mbim_cid_intel_mutual_authentication_get_string (cid);
     case MBIM_SERVICE_LAST:
     default:
         g_assert_not_reached ();
diff --git a/src/libmbim-glib/mbim-cid.h b/src/libmbim-glib/mbim-cid.h
index c404271..82014db 100644
--- a/src/libmbim-glib/mbim-cid.h
+++ b/src/libmbim-glib/mbim-cid.h
@@ -4,6 +4,7 @@
  * libmbim-glib -- GLib/GIO based library to control MBIM devices
  *
  * Copyright (C) 2013 - 2018 Aleksander Morgado <aleksander@aleksander.es>
+ * Copyright (C) 2022 Intel Corporation
  */
 
 #ifndef _LIBMBIM_GLIB_MBIM_CID_H_
@@ -428,6 +429,20 @@ typedef enum { /*< since=1.28 >*/
     MBIM_CID_INTEL_THERMAL_RF_RFIM        = 9,
 } MbimCidIntelThermalRf;
 
+/**
+ * MbimCidIntelMutualAuthentication:
+ * @MBIM_CID_INTEL_MUTUAL_AUTHENTICATION_UNKNOWN: Unknown command.
+ * @MBIM_CID_INTEL_MUTUAL_AUTHENTICATION_FCC_LOCK: FCC lock set.
+ *
+ * MBIM commands in the %MBIM_SERVICE_INTEL_MUTUAL_AUTHENTICATION service.
+ *
+ * Since: 1.30
+ */
+typedef enum { /*< since=1.30 >*/
+    MBIM_CID_INTEL_MUTUAL_AUTHENTICATION_UNKNOWN  = 0,
+    MBIM_CID_INTEL_MUTUAL_AUTHENTICATION_FCC_LOCK = 1,
+} MbimCidIntelMutualAuthentication;
+
 /**
  * MbimCidMsVoiceExtensions:
  * @MBIM_CID_MS_VOICE_EXTENSIONS_UNKNOWN: Unknown command.
diff --git a/src/libmbim-glib/mbim-message.c b/src/libmbim-glib/mbim-message.c
index 1b9975d..bead3d2 100644
--- a/src/libmbim-glib/mbim-message.c
+++ b/src/libmbim-glib/mbim-message.c
@@ -5,6 +5,7 @@
  *
  * Copyright (C) 2013 - 2022 Aleksander Morgado <aleksander@aleksander.es>
  * Copyright (C) 2022 Google, Inc.
+ * Copyright (C) 2022 Intel Corporation
  */
 
 #include <glib.h>
@@ -39,6 +40,7 @@
 #include "mbim-quectel.h"
 #include "mbim-intel-thermal-rf.h"
 #include "mbim-ms-voice-extensions.h"
+#include "mbim-intel-mutual-authentication.h"
 
 /*****************************************************************************/
 
@@ -2201,6 +2203,9 @@ mbim_message_get_printable_full (const MbimMessage  *self,
         case MBIM_SERVICE_MS_VOICE_EXTENSIONS:
             fields_printable = __mbim_message_ms_voice_extensions_get_printable_fields (self, line_prefix, &inner_error);
             break;
+        case MBIM_SERVICE_INTEL_MUTUAL_AUTHENTICATION:
+            fields_printable = __mbim_message_intel_mutual_authentication_get_printable_fields (self, line_prefix, &inner_error);
+            break;
         case MBIM_SERVICE_INVALID:
         case MBIM_SERVICE_LAST:
             g_assert_not_reached ();
diff --git a/src/libmbim-glib/mbim-uuid.c b/src/libmbim-glib/mbim-uuid.c
index cda7258..fe95923 100644
--- a/src/libmbim-glib/mbim-uuid.c
+++ b/src/libmbim-glib/mbim-uuid.c
@@ -6,6 +6,7 @@
  * Copyright (C) 2013 - 2014 Aleksander Morgado <aleksander@aleksander.es>
  * Copyright (C) 2014 NVDIA Corporation
  * Copyright (C) 2014 Smith Micro Software, Inc.
+ * Copyright (C) 2022 Intel Corporation
  */
 
 #include <config.h>
@@ -256,6 +257,14 @@ static const MbimUuid uuid_ms_voice_extensions = {
     .e = { 0x61, 0xcb, 0x03, 0x4a, 0x70, 0x2e }
 };
 
+static const MbimUuid uuid_intel_mutual_authentication = {
+    .a = { 0xf8, 0x5d, 0x46, 0xef },
+    .b = { 0xab, 0x26 },
+    .c = { 0x40, 0x81 },
+    .d = { 0x98, 0x68 },
+    .e = { 0x4d, 0x18, 0x3c, 0x0a, 0x3a, 0xec }
+};
+
 static GList *mbim_custom_service_list = NULL;
 
 typedef struct {
@@ -391,6 +400,8 @@ mbim_uuid_from_service (MbimService service)
         return &uuid_intel_thermal_rf;
     case MBIM_SERVICE_MS_VOICE_EXTENSIONS:
         return &uuid_ms_voice_extensions;
+    case MBIM_SERVICE_INTEL_MUTUAL_AUTHENTICATION:
+        return &uuid_intel_mutual_authentication;
     case MBIM_SERVICE_LAST:
         g_assert_not_reached ();
     default:
@@ -467,6 +478,9 @@ mbim_uuid_to_service (const MbimUuid *uuid)
     if (mbim_uuid_cmp (uuid, &uuid_ms_voice_extensions))
         return MBIM_SERVICE_MS_VOICE_EXTENSIONS;
 
+    if (mbim_uuid_cmp (uuid, &uuid_intel_mutual_authentication))
+        return MBIM_SERVICE_INTEL_MUTUAL_AUTHENTICATION;
+
     for (l = mbim_custom_service_list; l != NULL; l = l->next) {
         if (mbim_uuid_cmp (&((MbimCustomService *)l->data)->uuid, uuid))
             return ((MbimCustomService *)l->data)->service_id;
diff --git a/src/libmbim-glib/mbim-uuid.h b/src/libmbim-glib/mbim-uuid.h
index 0fe9b05..3d15adf 100644
--- a/src/libmbim-glib/mbim-uuid.h
+++ b/src/libmbim-glib/mbim-uuid.h
@@ -4,6 +4,7 @@
  * libmbim-glib -- GLib/GIO based library to control MBIM devices
  *
  * Copyright (C) 2013 - 2014 Aleksander Morgado <aleksander@aleksander.es>
+ * Copyright (C) 2022 Intel Corporation
  */
 
 #ifndef _LIBMBIM_GLIB_MBIM_UUID_H_
@@ -113,6 +114,7 @@ gboolean mbim_uuid_from_printable (const gchar *str,
  * @MBIM_SERVICE_QUECTEL: Quectel specific operations. Since 1.26.2.
  * @MBIM_SERVICE_INTEL_THERMAL_RF: Intel thermal rf related commands. Since 1.28
  * @MBIM_SERVICE_MS_VOICE_EXTENSIONS: Microsoft Voice extensions service. Since 1.28.
+ * @MBIM_SERVICE_INTEL_MUTUAL_AUTHENTICATION: Intel mutual authentication commands. Since 1.30.
  * @MBIM_SERVICE_LAST: Internal value.
  *
  * Enumeration of the generic MBIM services.
@@ -141,6 +143,7 @@ typedef enum { /*< since=1.0 >*/
     MBIM_SERVICE_QUECTEL                     = 18,
     MBIM_SERVICE_INTEL_THERMAL_RF            = 19,
     MBIM_SERVICE_MS_VOICE_EXTENSIONS         = 20,
+    MBIM_SERVICE_INTEL_MUTUAL_AUTHENTICATION = 21,
 #if defined LIBMBIM_GLIB_COMPILATION
     MBIM_SERVICE_LAST /*< skip >*/
 #endif
@@ -378,6 +381,17 @@ typedef enum { /*< since=1.0 >*/
  */
 #define MBIM_UUID_MS_VOICE_EXTENSIONS mbim_uuid_from_service (MBIM_SERVICE_MS_VOICE_EXTENSIONS)
 
+/**
+ * MBIM_UUID_INTEL_MUTUAL_AUTHENTICATION:
+ *
+ * Get the UUID of the %MBIM_SERVICE_INTEL_MUTUAL_AUTHENTICATION service.
+ *
+ * Returns: (transfer none): a #MbimUuid.
+ *
+ * Since: 1.30
+ */
+#define MBIM_UUID_INTEL_MUTUAL_AUTHENTICATION mbim_uuid_from_service (MBIM_SERVICE_INTEL_MUTUAL_AUTHENTICATION)
+
 /**
  * mbim_service_lookup_name:
  * @service: a MbimService or custom service.
diff --git a/src/mbimcli/mbimcli-intel-mutual-authentication.c b/src/mbimcli/mbimcli-intel-mutual-authentication.c
new file mode 100644
index 0000000..f1f867d
--- /dev/null
+++ b/src/mbimcli/mbimcli-intel-mutual-authentication.c
@@ -0,0 +1,207 @@
+/* -*- Mode: C; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
+/* SPDX-License-Identifier: GPL-2.0-or-later */
+/*
+ * mbimcli -- Command line interface to control MBIM devices
+ *
+ * Copyright (C) 2022 Intel Corporation
+ */
+
+#include "config.h"
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <locale.h>
+#include <string.h>
+#include <errno.h>
+
+#include <glib.h>
+#include <gio/gio.h>
+
+#include <libmbim-glib.h>
+
+#include "mbim-common.h"
+#include "mbimcli.h"
+#include "mbimcli-helpers.h"
+
+/* Context */
+typedef struct {
+    MbimDevice *device;
+    GCancellable *cancellable;
+} Context;
+static Context *ctx;
+
+/* Options */
+static gboolean query_fcc_lock_flag;
+static gchar    *set_fcc_lock_str;
+
+static GOptionEntry entries[] = {
+    { "query-fcc-lock", 0, 0, G_OPTION_ARG_NONE, &query_fcc_lock_flag,
+      "Query FCC lock information",
+      NULL
+    },
+    { "set-fcc-lock", 0, 0, G_OPTION_ARG_STRING, &set_fcc_lock_str,
+      "Set FCC lock information",
+      "[(ResponsePresent),(Response)]"
+    },
+    {NULL}
+};
+
+GOptionGroup *
+mbimcli_intel_mutual_authentication_get_option_group (void)
+{
+   GOptionGroup *group;
+
+   group = g_option_group_new ("intel-mutual-authentication",
+                               "Intel mutual authentication Service options:",
+                               "Show Intel mutual authentication Service options",
+                               NULL,
+                               NULL);
+   g_option_group_add_entries (group, entries);
+
+   return group;
+}
+
+gboolean
+mbimcli_intel_mutual_authentication_options_enabled (void)
+{
+    static guint n_actions = 0;
+    static gboolean checked = FALSE;
+
+    if (checked)
+        return !!n_actions;
+
+    n_actions = (query_fcc_lock_flag +
+                 !!set_fcc_lock_str);
+
+    if (n_actions > 1) {
+        g_printerr ("error: too many Intel mutual Authentication actions requested\n");
+        exit (EXIT_FAILURE);
+    }
+
+    checked = TRUE;
+    return !!n_actions;
+}
+
+static void
+context_free (Context *context)
+{
+    if (!context)
+        return;
+
+    if (context->cancellable)
+        g_object_unref (context->cancellable);
+    if (context->device)
+        g_object_unref (context->device);
+    g_slice_free (Context, context);
+}
+
+static void
+shutdown (gboolean operation_status)
+{
+    /* Cleanup context and finish async operation */
+    context_free (ctx);
+    mbimcli_async_operation_done (operation_status);
+}
+
+static void
+query_fcc_lock_ready (MbimDevice *device,
+                      GAsyncResult *res,
+                      gpointer     user_data)
+{
+    MbimMessage  *response          = NULL;
+    GError       *error             = NULL;
+    gboolean      challenge_present = FALSE;
+    guint32       challenge         = 0;
+
+    response = mbim_device_command_finish (device, res, &error);
+    if (!response || !mbim_message_response_get_result (response, MBIM_MESSAGE_TYPE_COMMAND_DONE, &error)) {
+        g_printerr ("error: operation failed: %s\n", error->message);
+        shutdown (FALSE);
+        return;
+    }
+
+    if (!mbim_message_intel_mutual_authentication_fcc_lock_response_parse (response,
+                                                                           &challenge_present,
+                                                                           &challenge,
+                                                                           &error)) {
+        g_printerr ("error: couldn't parse response message: %s\n", error->message);
+        shutdown (FALSE);
+        return;
+    }
+
+    g_print ("FCC lock status: %s\n", challenge_present ? "locked" : "unlocked");
+    if (challenge_present)
+        g_print ("\tChallenge: %u\n", challenge);
+
+    shutdown (TRUE);
+}
+
+void
+mbimcli_intel_mutual_authentication_run (MbimDevice   *device,
+                                         GCancellable *cancellable)
+{
+    g_autoptr(MbimMessage) request = NULL;
+    g_autoptr(GError)      error = NULL;
+
+    /* Initialize context */
+    ctx = g_slice_new (Context);
+    ctx->device = g_object_ref (device);
+    ctx->cancellable = cancellable ? g_object_ref (cancellable) : NULL;
+
+    /* Query FCC lock information */
+    if (query_fcc_lock_flag) {
+        g_debug ("Asynchronously querying FCC lock information...");
+
+        request = mbim_message_intel_mutual_authentication_fcc_lock_query_new (NULL);
+        mbim_device_command (ctx->device,
+                             request,
+                             10,
+                             ctx->cancellable,
+                             (GAsyncReadyCallback)query_fcc_lock_ready,
+                             NULL);
+        return;
+    }
+
+    /* Set FCC lock information */
+    if (set_fcc_lock_str) {
+        gboolean       response_present = FALSE;
+        guint32        response = 0;
+        g_auto(GStrv)  split = NULL;
+
+        split = g_strsplit (set_fcc_lock_str, ",", -1);
+
+        if (g_strv_length (split) < 2) {
+            g_printerr ("error: couldn't parse input arguments, missing arguments\n");
+            shutdown (FALSE);
+            return;
+        }
+
+        if (g_strv_length (split) > 2) {
+            g_printerr ("error: couldn't parse input arguments, too many arguments\n");
+            shutdown (FALSE);
+            return;
+        }
+
+        if (!mbimcli_read_boolean_from_string (split[0], &response_present)) {
+            g_printerr ("error: couldn't parse input, wrong value given\n");
+            shutdown (FALSE);
+            return;
+        }
+
+        if (!mbimcli_read_uint_from_string (split[1], &response)) {
+            g_printerr ("error: couldn't parse input, wrong value given\n");
+            shutdown (FALSE);
+            return;
+        }
+
+        request = mbim_message_intel_mutual_authentication_fcc_lock_set_new (response_present, response, NULL);
+        mbim_device_command (ctx->device,
+                             request,
+                             10,
+                             ctx->cancellable,
+                             (GAsyncReadyCallback)query_fcc_lock_ready,
+                             NULL);
+        return;
+    }
+    g_warn_if_reached ();
+}
diff --git a/src/mbimcli/mbimcli.c b/src/mbimcli/mbimcli.c
index 3c12ac6..496d553 100644
--- a/src/mbimcli/mbimcli.c
+++ b/src/mbimcli/mbimcli.c
@@ -4,6 +4,7 @@
  * mbimcli -- Command line interface to control MBIM devices
  *
  * Copyright (C) 2013 - 2014 Aleksander Morgado <aleksander@aleksander.es>
+ * Copyright (C) 2022 Intel Corporation
  */
 
 #include "config.h"
@@ -311,6 +312,9 @@ device_open_ready (MbimDevice   *dev,
     case MBIM_SERVICE_MS_UICC_LOW_LEVEL_ACCESS:
         mbimcli_ms_uicc_low_level_access_run (dev, cancellable);
         return;
+    case MBIM_SERVICE_INTEL_MUTUAL_AUTHENTICATION:
+        mbimcli_intel_mutual_authentication_run (dev, cancellable);
+        return;
     case MBIM_SERVICE_SMS:
     case MBIM_SERVICE_USSD:
     case MBIM_SERVICE_STK:
@@ -447,6 +451,11 @@ parse_actions (void)
         actions_enabled++;
     }
 
+    if (mbimcli_intel_mutual_authentication_options_enabled ()) {
+        service = MBIM_SERVICE_INTEL_MUTUAL_AUTHENTICATION;
+        actions_enabled++;
+    }
+
     /* Noop */
     if (noop_flag)
         actions_enabled++;
@@ -495,6 +504,7 @@ int main (int argc, char **argv)
     g_option_context_add_group (context, mbimcli_intel_thermal_rf_get_option_group ());
     g_option_context_add_group (context, mbimcli_ms_voice_extensions_get_option_group ());
     g_option_context_add_group (context, mbimcli_ms_uicc_low_level_access_get_option_group ());
+    g_option_context_add_group (context, mbimcli_intel_mutual_authentication_get_option_group ());
     g_option_context_add_main_entries (context, main_entries, NULL);
     if (!g_option_context_parse (context, &argc, &argv, &error)) {
         g_printerr ("error: %s\n", error->message);
diff --git a/src/mbimcli/mbimcli.h b/src/mbimcli/mbimcli.h
index e7188e3..7553d3a 100644
--- a/src/mbimcli/mbimcli.h
+++ b/src/mbimcli/mbimcli.h
@@ -4,6 +4,7 @@
  * mbimcli -- Command line interface to control MBIM devices
  *
  * Copyright (C) 2013 - 2014 Aleksander Morgado <aleksander@aleksander.es>
+ * Copyright (C) 2022 Intel Corporation
  */
 
 #include <glib.h>
@@ -30,6 +31,7 @@ GOptionGroup *mbimcli_quectel_get_option_group                     (void);
 GOptionGroup *mbimcli_intel_thermal_rf_get_option_group            (void);
 GOptionGroup *mbimcli_ms_voice_extensions_get_option_group         (void);
 GOptionGroup *mbimcli_ms_uicc_low_level_access_get_option_group    (void);
+GOptionGroup *mbimcli_intel_mutual_authentication_get_option_group (void);
 
 gboolean      mbimcli_basic_connect_options_enabled               (void);
 gboolean      mbimcli_phonebook_options_enabled                   (void);
@@ -44,6 +46,7 @@ gboolean      mbimcli_quectel_options_enabled                     (void);
 gboolean      mbimcli_intel_thermal_rf_options_enabled            (void);
 gboolean      mbimcli_ms_voice_extensions_options_enabled         (void);
 gboolean      mbimcli_ms_uicc_low_level_access_options_enabled    (void);
+gboolean      mbimcli_intel_mutual_authentication_options_enabled (void);
 
 void          mbimcli_basic_connect_run                 (MbimDevice   *device,
                                                          GCancellable *cancellable);
@@ -71,6 +74,8 @@ void          mbimcli_ms_voice_extensions_run           (MbimDevice   *device,
                                                          GCancellable *cancellable);
 void          mbimcli_ms_uicc_low_level_access_run      (MbimDevice   *device,
                                                          GCancellable *cancellable);
+void          mbimcli_intel_mutual_authentication_run   (MbimDevice *device,
+                                                         GCancellable *cancellable);
 
 
 /* link management */
diff --git a/src/mbimcli/meson.build b/src/mbimcli/meson.build
index 2f50b6d..babe487 100644
--- a/src/mbimcli/meson.build
+++ b/src/mbimcli/meson.build
@@ -16,6 +16,7 @@ mbimcli_sources = files(
   'mbimcli-ms-voice-extensions.c',
   'mbimcli-phonebook.c',
   'mbimcli-quectel.c',
+  'mbimcli-intel-mutual-authentication.c',
 )
 
 sources = mbimcli_sources + files(
-- 
2.38.1

