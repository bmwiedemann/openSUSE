From db6dadd6de2041adf34905d77839cce05273924c Mon Sep 17 00:00:00 2001
From: falkTX <falktx@falktx.com>
Date: Fri, 12 Jul 2019 11:55:39 +0200
Subject: [PATCH] Place Qt stuff outside of custom namespace Fixes #894 Closes
 #895

Signed-off-by: falkTX <falktx@falktx.com>

Conflicts:
	source/bridges-ui/CarlaBridgeToolkitQt.cpp
---
 source/bridges-ui/CarlaBridgeToolkitQt.cpp | 10 ++++----
 source/includes/CarlaDefines.h             |  1 -
 source/utils/CarlaUtils.hpp                | 28 ++++++++++++++--------
 3 files changed, 22 insertions(+), 17 deletions(-)

diff --git a/source/bridges-ui/CarlaBridgeToolkitQt.cpp b/source/bridges-ui/CarlaBridgeToolkitQt.cpp
index d0632b86..77c9f608 100644
--- a/source/bridges-ui/CarlaBridgeToolkitQt.cpp
+++ b/source/bridges-ui/CarlaBridgeToolkitQt.cpp
@@ -256,12 +256,6 @@ private:
 #endif
 };
 
-#if (QT_VERSION >= QT_VERSION_CHECK(5, 0, 0))
-# include "CarlaBridgeToolkitQt5.moc"
-#else
-# include "CarlaBridgeToolkitQt4.moc"
-#endif
-
 // -------------------------------------------------------------------------
 
 CarlaBridgeToolkit* CarlaBridgeToolkit::createNew(CarlaBridgeFormat* const format)
@@ -275,13 +269,17 @@ CARLA_BRIDGE_UI_END_NAMESPACE
 
 // -------------------------------------------------------------------------
 
+CARLA_BRIDGE_UI_USE_NAMESPACE
+
 // missing declaration
 int qInitResources();
 int qCleanupResources();
 
 #if QT_VERSION >= QT_VERSION_CHECK(5, 0, 0)
+# include "CarlaBridgeToolkitQt5.moc"
 # include "resources.qt5.cpp"
 #else
+# include "CarlaBridgeToolkitQt4.moc"
 # include "resources.qt4.cpp"
 #endif
 
diff --git a/source/includes/CarlaDefines.h b/source/includes/CarlaDefines.h
index 3c427e02..42baaaf2 100644
--- a/source/includes/CarlaDefines.h
+++ b/source/includes/CarlaDefines.h
@@ -185,7 +185,6 @@
 
 /* Define CARLA_SAFE_EXCEPTION */
 #define CARLA_SAFE_EXCEPTION(msg)             catch(...) { carla_safe_exception(msg, __FILE__, __LINE__); }
-
 #define CARLA_SAFE_EXCEPTION_BREAK(msg)       catch(...) { carla_safe_exception(msg, __FILE__, __LINE__); break; }
 #define CARLA_SAFE_EXCEPTION_CONTINUE(msg)    catch(...) { carla_safe_exception(msg, __FILE__, __LINE__); continue; }
 #define CARLA_SAFE_EXCEPTION_RETURN(msg, ret) catch(...) { carla_safe_exception(msg, __FILE__, __LINE__); return ret; }
diff --git a/source/utils/CarlaUtils.hpp b/source/utils/CarlaUtils.hpp
index 6895333e..803e40b7 100644
--- a/source/utils/CarlaUtils.hpp
+++ b/source/utils/CarlaUtils.hpp
@@ -211,33 +211,41 @@ void carla_safe_assert(const char* const assertion, const char* const file, cons
 }
 
 /*
- * Print a safe assertion error message, with 1 extra integer value.
+ * Print a safe assertion error message, with 1 extra signed integer value.
  */
 static inline
-void carla_safe_assert_int(const char* const assertion, const char* const file, const int line,
-                                                                                const int value) noexcept
+void carla_safe_assert_int(const char* const assertion, const char* const file,
+                           const int line, const int value) noexcept
 {
     carla_stderr2("Carla assertion failure: \"%s\" in file %s, line %i, value %i", assertion, file, line, value);
 }
+
+/*
+ * Print a safe assertion error message, with 1 extra unsigned integer value.
+ */
 static inline
-void carla_safe_assert_uint(const char* const assertion, const char* const file, const int line,
-                                                                                 const uint value) noexcept
+void carla_safe_assert_uint(const char* const assertion, const char* const file,
+                            const int line, const uint value) noexcept
 {
     carla_stderr2("Carla assertion failure: \"%s\" in file %s, line %i, value %u", assertion, file, line, value);
 }
 
 /*
- * Print a safe assertion error message, with 2 extra integer values.
+ * Print a safe assertion error message, with 2 extra signed integer values.
  */
 static inline
-void carla_safe_assert_int2(const char* const assertion, const char* const file, const int line,
-                                                                                 const int v1, const int v2) noexcept
+void carla_safe_assert_int2(const char* const assertion, const char* const file,
+                            const int line, const int v1, const int v2) noexcept
 {
     carla_stderr2("Carla assertion failure: \"%s\" in file %s, line %i, v1 %i, v2 %i", assertion, file, line, v1, v2);
 }
+
+/*
+ * Print a safe assertion error message, with 2 extra unsigned integer values.
+ */
 static inline
-void carla_safe_assert_uint2(const char* const assertion, const char* const file, const int line,
-                                                                                  const uint v1, const uint v2) noexcept
+void carla_safe_assert_uint2(const char* const assertion, const char* const file,
+                             const int line, const uint v1, const uint v2) noexcept
 {
     carla_stderr2("Carla assertion failure: \"%s\" in file %s, line %i, v1 %u, v2 %u", assertion, file, line, v1, v2);
 }
-- 
2.24.0

