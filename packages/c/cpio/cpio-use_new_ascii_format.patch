Index: doc/cpio.info
===================================================================
--- doc/cpio.info.orig
+++ doc/cpio.info
@@ -226,7 +226,8 @@ option, e.g.:
 '-B'
      Set the I/O block size to 5120 bytes.
 '-c'
-     Use the old portable (ASCII) archive format.
+     Identical to "-H newc", use the new (SVR4) portable format.
+     If you wish the old portable (ASCII) archive format, use "-H odc" instead.
 '-C NUMBER'
 '--io-size=NUMBER'
      Set the I/O block size to the given NUMBER of bytes.
@@ -307,7 +308,8 @@ option.
 '-B'
      Set the I/O block size to 5120 bytes.
 '-c'
-     Use the old portable (ASCII) archive format.
+     Identical to "-H newc", use the new (SVR4) portable format.
+     If you wish the old portable (ASCII) archive format, use "-H odc" instead.
 '-C NUMBER'
 '--io-size=NUMBER'
      Set the I/O block size to the given NUMBER of bytes.
@@ -417,7 +419,8 @@ option.
 '-B'
      Set the I/O block size to 5120 bytes.
 '-c'
-     Use the old portable (ASCII) archive format.
+     Identical to "-H newc", use the new (SVR4) portable format.
+     If you wish the old portable (ASCII) archive format, use "-H odc" instead.
 '-C NUMBER'
 '--io-size=NUMBER'
      Set the I/O block size to the given NUMBER of bytes.
@@ -565,7 +568,8 @@ option is valid.
 
 '-c'
      [*note copy-in::,*note copy-out::,*note copy-pass::]
-     Use the old portable (ASCII) archive format.
+     Identical to "-H newc", use the new (SVR4) portable format.
+     If you wish the old portable (ASCII) archive format, use "-H odc" instead.
 
 '-C IO-SIZE'
 '--io-size=IO-SIZE'
Index: src/main.c
===================================================================
--- src/main.c.orig
+++ src/main.c
@@ -328,6 +328,7 @@ parse_opt (int key, char *arg, struct ar
     case 'c':		/* Use the old portable ASCII format.  */
       if (archive_format != arf_unknown)
 	USAGE_ERROR ((0, 0, _("Archive format multiply defined")));
+#define        SVR4_COMPAT
 #ifdef SVR4_COMPAT
       archive_format = arf_newascii; /* -H newc.  */
 #else
