--- Canna37p3/lib/canna/RKkana.c
+++ Canna37p3/lib/canna/RKkana.c
@@ -193,6 +193,12 @@
 
 #endif /* !OBSOLETE_RKKANA */
 
+struct NormalizePair {
+    const unsigned char* s1;
+    const unsigned char* s2;
+};
+extern const struct NormalizePair norm_pair[];
+
 /* RkCvtZen
  *	hankaku moji(ASCII+katakana) wo taiou suru zenkaku moji ni suru
  *	dakuten,handakuten shori mo okonau.
@@ -252,8 +258,30 @@
                    | ((unsigned long)h[1]); h += 2;
 	  byte = 2;
 	}
-	else if ( hi & 0x80 )
-	  code = (hi<<8)|*h++;
+        else if (hi >= 0xa1 && hi <= 0xfe) {
+            // JIS X 0208
+            const struct NormalizePair* np;
+            for (np = norm_pair; np->s1; np++) {
+                if (hi == np->s1[0]) {
+                    const unsigned char* p = np->s1 + 1;
+                    const unsigned char* q = h;
+                    while (q < H && *p && *p == *q) {
+                        p++; q++;
+                    }
+                    if (!*p) {
+                        // match
+                        code = (np->s2[0] << 8) | np->s2[1];
+                        byte = 2;
+                        h = q;
+                        goto l1;
+                    }
+                }
+            }
+            // unmatch
+            code = (hi << 8) | *h++;
+            byte = 2;
+        l1: ;
+        }
 	else  {
 	  if ( !(code = hiragana[hi]) ) 
 	    code = hi;
--- Canna37p3/lib/canna/canna.h
+++ Canna37p3/lib/canna/canna.h
@@ -1003,7 +1003,7 @@
   pro((wchar_t *, BYTE *, int *, int *, int *, int, wchar_t *, int, int));
 extern ChikujiSubstYomi pro((uiContext));
 extern TanMuhenkan pro((uiContext));
-extern CANNA_mbstowcs pro((wchar_t *, char *, int));
+extern size_t CANNA_mbstowcs pro((wchar_t *, char *, size_t));
 extern CANNA_wcstombs pro((char *, wchar_t *, int));
 extern makeRkError pro((uiContext, char *));
 extern void moveStrings pro((wchar_t *, BYTE *, int, int, int));
--- Canna37p3/lib/canna/defaultmap.c
+++ Canna37p3/lib/canna/defaultmap.c
@@ -82,6 +82,14 @@
     }
 }
 
+int getFunction(KanjiMode mode, int key)
+{
+    if (key <= 0xff)
+        return mode->keytbl[key];
+    else
+        return CANNA_FN_FunctionalInsert;
+}
+
 searchfunc(d, mode, whattodo, key, fnum)
 uiContext d;
 KanjiMode mode;
@@ -92,7 +100,7 @@
   int (*func)();
 
   if (fnum == 0) {
-    fnum = mode->keytbl[key];
+      fnum = getFunction(mode, key);
   }
   switch (whattodo) {
   case KEY_CALL:
--- Canna37p3/lib/canna/romaji.c
+++ Canna37p3/lib/canna/romaji.c
@@ -1017,7 +1017,7 @@
 
   fitmarks(yc);
 
-  if (0xa0 < d->ch && d->ch < 0xe0) {
+    if (d->ch >= 0xa1 && d->ch <= 0xdf || d->ch >= 0xa1a1) {
 #ifdef USE_ROMKANATABLE_FOR_KANAKEY
     key = d->buffer_return[0];
 #else
@@ -1466,10 +1466,10 @@
     hv = buf[0];
   }
 
-  if (ch == hv) {
+    if (ch == hv || ch == 0xa1ac) {
     return DAKUON_HV;
   }
-  else if (ch == fv) {
+    else if (ch == fv || ch == 0xa1ab) {
     return DAKUON_FV;
   }
   else {
@@ -1533,6 +1533,39 @@
   }
 }
 
+struct NormalizePair {
+    const unsigned char* s1;
+    const unsigned char* s2;
+};
+ 
+const struct NormalizePair norm_pair[] = {
+    { "¤«¡«", "¤¬" }, { "¤­¡«", "¤®" }, { "¤¯¡«", "¤°" }, { "¤±¡«", "¤²" }, { "¤³¡«", "¤´" },
+    { "¤µ¡«", "¤¶" }, { "¤·¡«", "¤¸" }, { "¤¹¡«", "¤º" }, { "¤»¡«", "¤¼" }, { "¤½¡«", "¤¾" },
+    { "¤¿¡«", "¤À" }, { "¤Á¡«", "¤Â" }, { "¤Ä¡«", "¤Å" }, { "¤Æ¡«", "¤Ç" }, { "¤È¡«", "¤É" },
+    { "¤Ï¡«", "¤Ð" }, { "¤Ò¡«", "¤Ó" }, { "¤Õ¡«", "¤Ö" }, { "¤Ø¡«", "¤Ù" }, { "¤Û¡«", "¤Ü" },
+    { "¥«¡«", "¥¬" }, { "¥­¡«", "¥®" }, { "¥¯¡«", "¥°" }, { "¥±¡«", "¥²" }, { "¥³¡«", "¥´" },
+    { "¥µ¡«", "¥¶" }, { "¥·¡«", "¥¸" }, { "¥¹¡«", "¥º" }, { "¥»¡«", "¥¼" }, { "¥½¡«", "¥¾" },
+    { "¥¿¡«", "¥À" }, { "¥Á¡«", "¥Â" }, { "¥Ä¡«", "¥Å" }, { "¥Æ¡«", "¥Ç" }, { "¥È¡«", "¥É" },
+    { "¥Ï¡«", "¥Ð" }, { "¥Ò¡«", "¥Ó" }, { "¥Õ¡«", "¥Ö" }, { "¥Ø¡«", "¥Ù" }, { "¥Û¡«", "¥Ü" },
+    { "¤Ï¡¬", "¤Ñ" }, { "¤Ò¡¬", "¤Ô" }, { "¤Õ¡¬", "¤×" }, { "¤Ø¡¬", "¤Ú" }, { "¤Û¡¬", "¤Ý" },
+    { "¥Ï¡¬", "¥Ñ" }, { "¥Ò¡¬", "¥Ô" }, { "¥Õ¡¬", "¥×" }, { "¥Ø¡¬", "¥Ú" }, { "¥Û¡¬", "¥Ý" },
+    { "¥¦¡«", "¥ô" },
+    { NULL, NULL }
+};
+ 
+static int isDakuon(const wchar_t* s)
+{
+    const struct NormalizePair* p;
+    for (p = norm_pair; p->s1; p++) {
+        wchar_t c1, c2;
+        MBstowcs(&c1, p->s1, 1);
+        MBstowcs(&c2, p->s1 + 2, 1);
+        if (s[0] == c1 && s[1] == c2)
+            return 1;
+    }
+    return 0;
+}
+
 static
 KanaYomiInsert(d)
 uiContext d;
@@ -1543,7 +1576,6 @@
   wchar_t *bufp, *nextbufp;
   int len, replacelen, spos;
   yomiContext yc = (yomiContext)d->modec;
-  int dakuon, grow_dakuon;
 
   yc->generalFlags &= ~CANNA_YOMI_BREAK_ROMAN;
   kana[0] = (wchar_t)0;
@@ -1553,11 +1585,10 @@
   replacelen = 0; len = 1;
   romajiReplace(0, kanap, 1, SENTOU);
   yc->rStartp = yc->rCurs;
-  if ((dakuon = dakuonP(kanap[0])) != 0) { /* ÂùÅÀ¤Î½èÍý */
+    if (dakuonP(*kanap) != 0) { /* ÂùÅÀ¤Î½èÍý */
     if (yc->rCurs > 1) {
       kana[0] = yc->romaji_buffer[yc->rCurs - 2];
-      if ((grow_dakuon = growDakuonP(kana[0])) == GROW_HV ||
-	  (grow_dakuon && dakuon == DAKUON_FV)) {
+        if (isDakuon(kana) != 0) {
 	kanap = kana; len = 2; replacelen = -1;
 	yc->rAttr[yc->rCurs - 1] &= ~SENTOU;
       }
@@ -4558,6 +4589,8 @@
   return 0;
 }
 
+extern int getFunction(KanjiMode mode, int key);
+
 Yomisearchfunc(d, mode, whattodo, key, fnum)
 uiContext d;
 KanjiMode mode;
@@ -4582,7 +4615,7 @@
   if (cannaconf.romaji_yuusen && yc) { /* ¤â¤·¡¢Í¥Àè¤Ê¤é */
     len = yc->kCurs - yc->kRStartp;
     if (fnum == 0) {
-      fnum = mode->keytbl[key];
+        fnum = getFunction(mode, key);
     }
     if (fnum != CANNA_FN_FunctionalInsert && len > 0) {
       int n, m, t, flag, prevrule;
--- Canna37p3/lib/canna/util.c
+++ Canna37p3/lib/canna/util.c
@@ -1142,11 +1142,11 @@
   return (WWhatGPlain(wc) == 3);
 }
 
-int
+size_t
 CANNA_mbstowcs(dest, src, destlen)
 wchar_t *dest;
 char *src;
-int destlen;
+size_t destlen;
 {
   register int i, j;
   register unsigned ec;
@@ -1529,24 +1529,7 @@
 int *check;
 {
   *check = 1; /* Success as default */
-  if (161 <= key && key <= 223) { /* ¥«¥¿¥«¥Ê¤ÎÈÏ°Ï¤À¤Ã¤¿¤é */
-    char xxxx[4];
-    wchar_t yyyy[4];
-    int nchars;
-
-    xxxx[0] = (char)0x8e; /* SS2 */
-    xxxx[1] = (char)key;
-    xxxx[2] = '\0';
-    nchars = MBstowcs(yyyy, xxxx, 4);
-    if (nchars != 1) {
-      *check = 0;
-      return 0; /* ¥¨¥é¡¼ */
-    }
-    return yyyy[0];
-  }
-  else {
-    return (wchar_t)key;
-  }
+    return (wchar_t) key;  /* key¤È¤·¤Æ¥ï¥¤¥ÉÊ¸»ú¤òÅÏ¤»¤ë¤è¤¦¤Ë¤¹¤ë */
 }
 
 int
