Index: cppcheck-2.18.0/test/testcondition.cpp
===================================================================
--- cppcheck-2.18.0.orig/test/testcondition.cpp
+++ cppcheck-2.18.0/test/testcondition.cpp
@@ -4583,7 +4583,7 @@ private:
         if (std::numeric_limits<char>::is_signed) {
             ASSERT_EQUALS("[test.cpp:6:18]: (style) Condition 'o[1]=='\\0'' is always false [knownConditionTrueFalse]\n", errout_str());
         } else {
-            ASSERT_EQUALS("[test.cpp:4] -> [test.cpp:6]: (style) Condition 'o[1]=='\\0'' is always false [knownConditionTrueFalse]\n", errout_str());
+            ASSERT_EQUALS("[test.cpp:4:25] -> [test.cpp:6:18]: (style) Condition 'o[1]=='\\0'' is always false [knownConditionTrueFalse]\n", errout_str());
         }
 
         check("void f(int x) {\n" // #11449
@@ -5323,7 +5323,7 @@ private:
         if (std::numeric_limits<char>::is_signed) {
             ASSERT_EQUALS("[test.cpp:5:22]: (style) Condition 'buffer.back()=='\\0'' is always false [knownConditionTrueFalse]\n", errout_str());
         } else {
-            ASSERT_EQUALS("[test.cpp:3] -> [test.cpp:5]: (style) Condition 'buffer.back()=='\\0'' is always false\n", errout_str());
+            ASSERT_EQUALS("[test.cpp:3:22] -> [test.cpp:5:22]: (style) Condition 'buffer.back()=='\\0'' is always false [knownConditionTrueFalse]\n", errout_str());
         }
 
         // #9353
