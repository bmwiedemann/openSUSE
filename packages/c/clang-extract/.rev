<revisionlist>
  <revision rev="1" vrev="1">
    <srcmd5>184da0f241bc0e2f560bb0ecff17385a</srcmd5>
    <version>0~20240619.f7c935b</version>
    <time>1719349629</time>
    <user>anag+factory</user>
    <comment></comment>
    <requestid>1183042</requestid>
  </revision>
  <revision rev="2" vrev="1">
    <srcmd5>dd99d6ddd8e514992d044844456e07c5</srcmd5>
    <version>0~20240703.0b3e33c</version>
    <time>1720102962</time>
    <user>anag+factory</user>
    <comment>- Update to version 0~20240703.0b3e33c:
  * Initialize OutputFunctionPrototypeHeader

- Update to version 0~20240702.cbdca46:
  * README.md: Remove dependency on python311-subprocess-tee
  * testsuite: attr: Adapt testcase to be executed on ppc64le
- Remove BR python3-subprocess-tee

- Update to version 0~20240702.1f3826f:
  * testsuite/attr: Skip tests on s390x
  * libtest: Add special dg-skip-on-archs option

- Update to version 0~20240627.52683d1:
  * testsuite: Adapt registers usage to aarch64
  * SymbolExternalizer: Refactor Get_Range_Of_Identifier
  * SymbolExternalizer: Rewrite to use RecursiveASTVisitor
  * SymbolExternalizer: Reduce indentation of _Externalize_Symbol
  * SymbolExternalizer: Simplify Externalize_Symbols</comment>
    <requestid>1185287</requestid>
  </revision>
  <revision rev="3" vrev="1">
    <srcmd5>8eff50ed8909fb5f72815d19f9acbeb8</srcmd5>
    <version>0~20240704.16ab0bf</version>
    <time>1720201833</time>
    <user>anag+factory</user>
    <comment>- Update to version 0~20240704.16ab0bf:
  * IncludeTree: Always check for full name of the header
  * Remove unused python packages
- Remove unneeded python BR

- Update to version 0~20240704.d14d609:
  * libcextract: ArgvParser: Change path to /usr/lib on x86 32bit
  * testsuite: attr: Use esp for current stack point on x86 32bit

- Put version requirement on llvm-devel</comment>
    <requestid>1185728</requestid>
  </revision>
  <revision rev="4" vrev="1">
    <srcmd5>d7739217ecc90dfa30286697a9328c6d</srcmd5>
    <version>0~20240711.74a63c6</version>
    <time>1720796719</time>
    <user>anag+factory</user>
    <comment>- Update to version 0~20240711.74a63c6:
  * Implement Late Externalization for STRONG externalization type
  * Check the TagDecl in TypedefNameDecl for extra attributes
  * Github CI: Drop llvm-16, enable llvm-17 and 18
  * Add logic to get the system's gcc headers install folder
  * Undefine noinline macro if conflicts with AST dump
  * Store ASTUnit in PrettyPrint instead of SourceManager</comment>
    <requestid>1186987</requestid>
  </revision>
  <revision rev="5" vrev="1">
    <srcmd5>7e649e444a8c60fe4db2cb494c4867f7</srcmd5>
    <version>0~20240714.17e3908</version>
    <time>1721065766</time>
    <user>anag+factory</user>
    <comment>- Update to version 0~20240714.17e3908:
  * Fix location comment of LateExternalized variables
  * Implement first effective use in SymbolExternalizer
  * FunctionDepsFinder: Factor out closure logic</comment>
    <requestid>1187429</requestid>
  </revision>
  <revision rev="6" vrev="1">
    <srcmd5>1534bfc30c8443936a3837da60132317</srcmd5>
    <version>0~20240721.9b2dfb6</version>
    <time>1721661445</time>
    <user>anag+factory</user>
    <comment>- Update to version 0~20240721.9b2dfb6:
  * Remove the EnumConstantTable

- Update to version 0~20240720.6054fa3:
  * Fix nested struct being discarded if parent struct is flagged as partial
  * Fix __builtin_convertvector escaping the closure
  * Fix dropped attributes from vector types</comment>
    <requestid>1188956</requestid>
  </revision>
  <revision rev="7" vrev="1">
    <srcmd5>ab3b036714b6bf634f37e21f06fc7e44</srcmd5>
    <version>0~20240722.a998e91</version>
    <time>1721827829</time>
    <user>dimstar_suse</user>
    <comment>- Update to version 0~20240722.a998e91:
  * Fix clang-extract discarding struct-partial definition in nested record
  * Add (failing) testcase
  * Fix clang-extract dropping complete definition of struct when a copy is necessary
  * Fix struct being redefined if defined in variable type
  * Extend parent RecordDecl analysis for EnumDecls
  * Remove redundant leftmost decl from closure
  * Avoid adding every previous decl of a global variable
  * Force TagDecl as needing fulldefiniton if is a return type of a function
  * Deference pointer types when searching for decomposed typedef-struct
  * Analyze CleanupAttr
  * Avoid adding previous declarations of typedefs into closure
  * SymbolExternalizer: Check KLP_ macros only if there was externzalized syms</comment>
    <requestid>1189140</requestid>
  </revision>
  <revision rev="8" vrev="1">
    <srcmd5>548ebb1ad8e3deed39194ef78f65aa82</srcmd5>
    <version>0~20240726.4309abc</version>
    <time>1722282767</time>
    <user>dimstar_suse</user>
    <comment>- Update to version 0~20240726.4309abc:
  * Fix closure missing TypedefDecl because not being referenced by type</comment>
    <requestid>1190165</requestid>
  </revision>
  <revision rev="9" vrev="1">
    <srcmd5>ea5aad2dd17066cc171aaa8a36e7fbd0</srcmd5>
    <version>0~20240731.94276b7</version>
    <time>1722542713</time>
    <user>dimstar_suse</user>
    <comment>- Update to version 0~20240731.94276b7:
  * Remove functions body from Closure.hh
  * Analyze Decls with same BeginLoc
  * LLVMMisc.cpp: Check if identifier exists in SymbolTable
  * Fix failing testcase if system compiler is gcc-14</comment>
    <requestid>1190857</requestid>
  </revision>
  <revision rev="10" vrev="1">
    <srcmd5>f30c88144ab7d29763122c9fef403f53</srcmd5>
    <version>0~20240801.6cf5b73</version>
    <time>1722612438</time>
    <user>dimstar_suse</user>
    <comment>- Update to version 0~20240801.6cf5b73:
  * libcextract: Passes: Drop attributes when creating the KLP_RELOC entries
  * SymbolExternalizer: Drop initializer from expanded macros
  * libcextract: ArgvParser: Use vmlinux on PatchObject when DEBUGINFO is different
  * libcextract: Passes.cpp: Use vmlinux if sym_mod is empty
  * Drop klpe_ prefix for extern function symbols</comment>
    <requestid>1191106</requestid>
  </revision>
  <revision rev="11" vrev="1">
    <srcmd5>03a108559a04a34eb55504ca328bfc20</srcmd5>
    <version>0~20240813.82f77f7</version>
    <time>1723637763</time>
    <user>dimstar_suse</user>
    <comment>- Update to version 0~20240813.82f77f7:
  * libcextract: Add support to zstd
  * Add support to read zlib compressed files, like vmlinux.gz
  * NonLLVMMisc: Add FileHandling class
  * Passes: Drop comments about ibt tail content
- Add new BuildRequires: zlib-devel libzstd-devel</comment>
    <requestid>1193817</requestid>
  </revision>
  <revision rev="12" vrev="1">
    <srcmd5>16927d8c8debb8674d965c90d7b369bf</srcmd5>
    <version>0~20240814.272ac2e</version>
    <time>1723803813</time>
    <user>dimstar_suse</user>
    <comment>- Update to version 0~20240814.272ac2e:
  * Drop VectorRef in favor of ArrayRef
  * Fix copyright headers
  * Drop use of `dynamic_cast` in favor of `dyn_cast`
  * ElfCXX: Convert decompress_gz to use DecompressedObj attribute
  * ElfCXX: Make decompress methods access ElfFd directly</comment>
    <requestid>1194033</requestid>
  </revision>
  <revision rev="13" vrev="1">
    <srcmd5>2c0e37fb236d7db2b7f26f9ecc23349e</srcmd5>
    <version>0~20240902.0a13816</version>
    <time>1725544013</time>
    <user>anag+factory</user>
    <comment>- Update to version 0~20240902.0a13816:
  * libcextract: Passes: Adjust KLP_RELOC_SYMBOL_POS format
  * testsuite: inline: inlined-into-1: Fix noinline and implicit-int
  * Add option to pass two debuginfos
  * Fix symbol visibility
  * Disable const propagation on externalized vars
  * libcextract: ArgvParser: Use basename instead of std::filename
  * Fix Late Externalization when variable is declared as macro expansion
  * Dump includetree together with passes dump
  * libcextract: ExpansionPolicy: Check for abs and rel path differences
  * Remove redundant decls
  * Workaround ';' being output at incorrect location when decl ends with #endif
  * Fix CompleteDefinition of struct being dragged into output because of union field
  * libcextract: ArgvParser: Disable Wduplicate-decl-specifier error
  * Disable Precompiled Headers
  * libcextract: Add support for Weak symbols for kernel mode</comment>
    <requestid>1198748</requestid>
  </revision>
</revisionlist>
