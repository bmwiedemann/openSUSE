Index: coredns-1.12.1/vendor/github.com/quic-go/quic-go/sys_conn_helper_darwin.go
===================================================================
--- coredns-1.12.1.orig/vendor/github.com/quic-go/quic-go/sys_conn_helper_darwin.go
+++ coredns-1.12.1/vendor/github.com/quic-go/quic-go/sys_conn_helper_darwin.go
@@ -30,7 +30,7 @@ func parseIPv4PktInfo(body []byte) (ip n
 	if len(body) != 12 {
 		return netip.Addr{}, 0, false
 	}
-	return netip.AddrFrom4(*(*[4]byte)(body[8:12])), binary.LittleEndian.Uint32(body), true
+	return netip.AddrFrom4(*(*[4]byte)(body[8:12])), binary.NativeEndian.Uint32(body), true
 }
 
 func isGSOEnabled(syscall.RawConn) bool { return false }
Index: coredns-1.12.1/vendor/github.com/quic-go/quic-go/sys_conn_helper_linux.go
===================================================================
--- coredns-1.12.1.orig/vendor/github.com/quic-go/quic-go/sys_conn_helper_linux.go
+++ coredns-1.12.1/vendor/github.com/quic-go/quic-go/sys_conn_helper_linux.go
@@ -58,7 +58,7 @@ func parseIPv4PktInfo(body []byte) (ip n
 	if len(body) != 12 {
 		return netip.Addr{}, 0, false
 	}
-	return netip.AddrFrom4(*(*[4]byte)(body[8:12])), binary.LittleEndian.Uint32(body), true
+	return netip.AddrFrom4(*(*[4]byte)(body[8:12])), binary.NativeEndian.Uint32(body), true
 }
 
 // isGSOEnabled tests if the kernel supports GSO.
Index: coredns-1.12.1/vendor/github.com/quic-go/quic-go/sys_conn_oob.go
===================================================================
--- coredns-1.12.1.orig/vendor/github.com/quic-go/quic-go/sys_conn_oob.go
+++ coredns-1.12.1/vendor/github.com/quic-go/quic-go/sys_conn_oob.go
@@ -222,7 +222,7 @@ func (c *oobConn) ReadPacket() (received
 				// };
 				if len(body) == 20 {
 					p.info.addr = netip.AddrFrom16(*(*[16]byte)(body[:16])).Unmap()
-					p.info.ifIndex = binary.LittleEndian.Uint32(body[16:])
+					p.info.ifIndex = binary.NativeEndian.Uint32(body[16:])
 				} else {
 					invalidCmsgOnceV6.Do(func() {
 						log.Printf("Received invalid IPv6 packet info control message: %+x. "+
