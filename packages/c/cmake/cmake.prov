#!/usr/bin/python3
# -*- coding:utf-8 -*-
#
# Copyright (C) 2015 Daniel Vr√°til <dvratil@redhat.com>
#
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU Library General Public License as
# published by the Free Software Foundation; either version 2 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU Library General Public
# License along with this program; if not, write to the
# Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#

import sys
import re
import glob

class CMakeParser:
    def __init__(self, filelist = None):
        if filelist == None:
            filelist = sys.stdin

        paths = map(lambda x: x.rstrip(), filelist.readlines())
        for path in paths:
            for (modulePath, cmakeModule, lowercase) in self.parseCmakeModuleConfig(path):
                version = self.resolveCMakeModuleVersion(modulePath, cmakeModule, lowercase)

                if version:
                   print("cmake(%s) = %s" % (cmakeModule, version))
                else:
                   print("cmake(%s)" % cmakeModule)

    def parseCmakeModuleConfig(self, configFile):
        paths = configFile.rsplit("/", 3)

        modulePath = "%s/cmake/%s" % (paths[0], paths[2])

        result = []
        for configFile in glob.glob("%s/*Config.cmake" % modulePath):
            moduleName = configFile[len(modulePath) + 1:-len("Config.cmake")]
            result.append( (modulePath, moduleName, False) )

        for configFile in glob.glob("%s/*-config.cmake" % modulePath):
            moduleName = configFile[len(modulePath) + 1:-len("-config.cmake")]
            if (modulePath, moduleName, False) not in result:
                result.append( (modulePath, moduleName, True) )

        return result

    def resolveCMakeModuleVersion(self, modulePath, cmakeModule, lowercase):
        versionFile = ("%s/%s-config-version.cmake" if lowercase else "%s/%sConfigVersion.cmake") % (modulePath, cmakeModule)
        try:
            f = open(versionFile, 'r')
        except:
            return None

        for line in f:
            line = line.strip()

            # set(PACKAGE_VERSION <version>)
            version = re.match(r"^set[\ ]*\([\ ]*PACKAGE_VERSION[\ ]+[\"]*([0-9\.]+)[\"]*[\ ]*[.]*\)", line)
            if version:
                return version.groups(1)[0]

        return None

if __name__ == "__main__":
    parser = CMakeParser()
