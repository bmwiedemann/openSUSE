#!/bin/sh
#
# Copyright (c) 2009 Scorpio IT, Deidesheim, Germany
#
# Author: Christian Wittmer
# Please send feedback to rpm (at) scorpio-it (dot) net
#
# /etc/init.d/cntlm
#   and its symbolic link
# /(usr/)sbin/rccntlm
#
### BEGIN INIT INFO
# Provides:          cntlm
# Required-Start:    $syslog $network $time
# Should-Start:      $remote_fs
# Required-Stop:     $syslog $network $time
# Should-Stop:       $remote_fs
# Default-Start:     2 3 5
# Default-Stop:      0 1 6
# Short-Description: start/stop the cntlm proxy
# Description:       ntlm is meant to be given your proxy address and becomming
#                    the primary proxy then, listening on a selected local port. 
#                    You point all your proxy-aware programs to it and don't ever
#                    have to deal with proxy authentication again.
### END INIT INFO
#
# Note on runlevels:
# 0 - halt/poweroff 			6 - reboot
# 1 - single user			2 - multiuser without network exported
# 3 - multiuser w/ network (text mode)  5 - multiuser w/ network and X11 (xdm)
# 

# Check for missing binaries (stale symlinks should not happen)
# Note: Special treatment of stop for LSB conformance
cntlm_bin="/usr/sbin/cntlm"
test -x $cntlm_bin || { echo "$cntlm_bin not installed"; 
	if [ "$1" = "stop" ]; then exit 0;
	else exit 5; fi; }

# Check for existence of needed sysconfig file and read it
cntlm_config="/etc/cntlm.conf"
test -r $cntlm_config || { echo "$cntlm_config not existing";
	if [ "$1" = "stop" ]; then exit 0;
	else exit 6; fi; }

# Check for existence of needed sysconfig file and read it
cntlm_sysconfig="/etc/sysconfig/cntlm"
test -r $cntlm_sysconfig || { echo "$cntlm_sysconfig not existing";
	if [ "$1" = "stop" ]; then exit 0;
	else exit 6; fi; }

# Read config	
. $cntlm_sysconfig

# some defaults
cntlm_desc="CNTLM Authentication Proxy"
cntlm_pid="/var/run/cntlm/cntlmd.pid"
cntlm_user="-U ${CNTLM_USER:=cntlm}"
cntlm_opts=${CNTLM_OPTS:=""}

# if no "Proxy" is set in cntlm.conf try '127.0.0.1:3128' as a default
if [ `/bin/cat $cntlm_config | grep -e "^Listen" >/dev/null; echo $?` -eq 0 ]; then 
	cntlm_listen=
else
	cntlm_listen="-l ${CNTLM_LISTEN:=127.0.0.1:3128}"
fi

# check for pid_dir
[ ! -d /var/run/cntlm ] && {
	install -d -m0755 -o ${CNTLM_USER:=cntlm} -g root /var/run/cntlm;
}

# Source LSB init functions
# providing start_daemon, killproc, pidofproc, 
# log_success_msg, log_failure_msg and log_warning_msg.
# This is currently not used by UnitedLinux based distributions and
# not needed for init scripts for UnitedLinux only. If it is used,
# the functions from rc.status should not be sourced or used.
#. /lib/lsb/init-functions

# Shell functions sourced from /etc/rc.status:
#      rc_check         check and set local and overall rc status
#      rc_status        check and set local and overall rc status
#      rc_status -v     be verbose in local rc status and clear it afterwards
#      rc_status -v -r  ditto and clear both the local and overall rc status
#      rc_status -s     display "skipped" and exit with status 3
#      rc_status -u     display "unused" and exit with status 3
#      rc_failed        set local and overall rc status to failed
#      rc_failed <num>  set local and overall rc status to <num>
#      rc_reset         clear both the local and overall rc status
#      rc_exit          exit appropriate to overall rc status
#      rc_active        checks whether a service is activated by symlinks
. /etc/rc.status

# Reset status of this service
rc_reset

# Return values acc. to LSB for all commands but status:
# 0	  - success
# 1       - generic or unspecified error
# 2       - invalid or excess argument(s)
# 3       - unimplemented feature (e.g. "reload")
# 4       - user had insufficient privileges
# 5       - program is not installed
# 6       - program is not configured
# 7       - program is not running
# 8--199  - reserved (8--99 LSB, 100--149 distrib, 150--199 appl)
# 
# Note that starting an already running service, stopping
# or restarting a not-running service as well as the restart
# with force-reload (in case signaling is not supported) are
# considered a success.

case "$1" in
    start)
	echo -n "Starting ${cntlm_desc}: "
	## Start daemon with startproc(8). If this fails
	## the return value is set appropriately by startproc.
	/sbin/startproc -p $cntlm_pid $cntlm_bin -P $cntlm_pid $cntlm_listen $cntlm_user $cntlm_opts &>/dev/null

	# Remember status and be verbose
	rc_status -v
	;;
    stop)
	echo -n "Shutting down ${cntlm_desc}: "
	## Stop daemon with killproc(8) and if this fails
	## killproc sets the return value according to LSB.
	/sbin/killproc -p $cntlm_pid -TERM $cntlm_bin &>/dev/null

	# Remember status and be verbose
	rc_status -v
	;;
    try-restart|condrestart)
	## Do a restart only if the service was active before.
	## Note: try-restart is now part of LSB (as of 1.9).
	## RH has a similar command named condrestart.
	if test "$1" = "condrestart"; then
		echo "${attn} Use try-restart ${done}(LSB)${attn} rather than condrestart ${warn}(RH)${norm}"
	fi
	$0 status
	if test $? = 0; then
		$0 restart
	else
		rc_reset	# Not running is not a failure.
	fi

	# Remember status and be quiet
	rc_status
	;;
    restart)
	## Stop the service and regardless of whether it was
	## running or not, start it again.
	$0 stop
	$0 start

	# Remember status and be quiet
	rc_status
	;;
    force-reload|reload)
	## Signal the daemon to reload its config. Most daemons
	## do this on signal 1 (SIGHUP).
	## If it does not support it, restart the service if it
	## is running.

	# cntlm does not support SIGHUP, so restart
	echo -n "Reload ${cntlm_desc}: "
	## if it supports it:
	#/sbin/killproc -p $cntlm_pid -HUP $cntlm_bin

	# Remember status and be verbose
	#rc_status -v

	## Otherwise:
	$0 try-restart

	# Remember status and be quiet
	rc_status
	;;
    status)
	echo -n "Checking for ${cntlm_desc}: "
	## Check status with checkproc(8), if process is running
	## checkproc will return with exit status 0.

	# Return value is slightly different for the status command:
	# 0 - service up and running
	# 1 - service dead, but /var/run/  pid  file exists
	# 2 - service dead, but /var/lock/ lock file exists
	# 3 - service not running (unused)
	# 4 - service status unknown :-(
	# 5--199 reserved (5--99 LSB, 100--149 distro, 150--199 appl.)
	
	# NOTE: checkproc returns LSB compliant status values.
	/sbin/checkproc -p $cntlm_pid $cntlm_bin
	# NOTE: rc_status knows that we called this init script with
	# "status" option and adapts its messages accordingly.

	# Remember status and be verbose
	rc_status -v
	;;
    *)
	echo "Usage: $0 {start|stop|status|try-restart|restart|force-reload|reload}"
	exit 1
	;;
esac
rc_exit
