diff -crB --new-file cilium-1.7.0-backup/daemon/daemon.go cilium-1.7.0-policymapentry-new/daemon/daemon.go
*** cilium-1.7.0-backup/daemon/daemon.go	2020-02-18 14:32:45.000000000 -0800
--- cilium-1.7.0-policymapentry-new/daemon/daemon.go	2020-04-24 10:52:21.067469765 -0700
***************
*** 273,279 ****
  	ctmap.InitMapInfo(option.Config.CTMapEntriesGlobalTCP, option.Config.CTMapEntriesGlobalAny,
  		option.Config.EnableIPv4, option.Config.EnableIPv6,
  	)
! 	policymap.InitMapInfo(option.Config.PolicyMapMaxEntries)
  
  	if option.Config.DryMode == false {
  		if err := bpf.ConfigureResourceLimits(); err != nil {
--- 273,279 ----
  	ctmap.InitMapInfo(option.Config.CTMapEntriesGlobalTCP, option.Config.CTMapEntriesGlobalAny,
  		option.Config.EnableIPv4, option.Config.EnableIPv6,
  	)
! 	policymap.InitMapInfo(option.Config.PolicyMapEntries)
  
  	if option.Config.DryMode == false {
  		if err := bpf.ConfigureResourceLimits(); err != nil {
diff -crB --new-file cilium-1.7.0-backup/pkg/option/config.go cilium-1.7.0-policymapentry-new/pkg/option/config.go
*** cilium-1.7.0-backup/pkg/option/config.go	2020-04-23 21:08:27.747702955 -0700
--- cilium-1.7.0-policymapentry-new/pkg/option/config.go	2020-04-24 17:56:30.130187069 -0700
***************
*** 449,454 ****
--- 449,460 ----
  	// LimitTableMax defines the maximum CT or NAT table limit
  	LimitTableMax = 1 << 24 // 16Mi entries (~1GiB of entries per map)
  
+ 	// PolicyMapMin defines the minimum policy map limit.
+ 	PolicyMapMin = 1 << 8
+ 
+ 	// PolicyMapMax defines the minimum policy map limit.
+ 	PolicyMapMax = 1 << 16
+ 
  	// NATMapEntriesGlobalName configures max entries for BPF NAT table
  	NATMapEntriesGlobalName = "bpf-nat-global-max"
  
***************
*** 971,979 ****
  	// in the BPF NAT table
  	NATMapEntriesGlobal int
  
! 	// PolicyMapMaxEntries is the maximum number of peer identities that an
  	// endpoint may allow traffic to exchange traffic with.
! 	PolicyMapMaxEntries int
  
  	// DisableCiliumEndpointCRD disables the use of CiliumEndpoint CRD
  	DisableCiliumEndpointCRD bool
--- 977,985 ----
  	// in the BPF NAT table
  	NATMapEntriesGlobal int
  
! 	// PolicyMapEntries is the maximum number of peer identities that an
  	// endpoint may allow traffic to exchange traffic with.
! 	PolicyMapEntries int
  
  	// DisableCiliumEndpointCRD disables the use of CiliumEndpoint CRD
  	DisableCiliumEndpointCRD bool
***************
*** 1535,1549 ****
  		}
  	}
  
! 	policyMapMin := (1 << 8)
! 	policyMapMax := (1 << 16)
! 	if c.PolicyMapMaxEntries < policyMapMin {
  		return fmt.Errorf("specified PolicyMap max entries %d must exceed minimum %d",
! 			c.PolicyMapMaxEntries, policyMapMin)
  	}
! 	if c.PolicyMapMaxEntries > policyMapMax {
  		return fmt.Errorf("specified PolicyMap max entries %d must not exceed maximum %d",
! 			c.PolicyMapMaxEntries, policyMapMax)
  	}
  	// Validate that the KVStore Lease TTL value lies between a particular range.
  	if c.KVstoreLeaseTTL > defaults.KVstoreLeaseMaxTTL || c.KVstoreLeaseTTL < defaults.LockLeaseTTL {
--- 1541,1553 ----
  		}
  	}
  
! 	if c.PolicyMapEntries < PolicyMapMin {
  		return fmt.Errorf("specified PolicyMap max entries %d must exceed minimum %d",
! 			c.PolicyMapEntries, PolicyMapMin)
  	}
! 	if c.PolicyMapEntries > PolicyMapMax {
  		return fmt.Errorf("specified PolicyMap max entries %d must not exceed maximum %d",
! 			c.PolicyMapEntries, PolicyMapMax)
  	}
  	// Validate that the KVStore Lease TTL value lies between a particular range.
  	if c.KVstoreLeaseTTL > defaults.KVstoreLeaseMaxTTL || c.KVstoreLeaseTTL < defaults.LockLeaseTTL {
***************
*** 1757,1763 ****
  	c.NAT46Range = viper.GetString(NAT46Range)
  	c.FlannelMasterDevice = viper.GetString(FlannelMasterDevice)
  	c.FlannelUninstallOnExit = viper.GetBool(FlannelUninstallOnExit)
! 	c.PolicyMapMaxEntries = viper.GetInt(PolicyMapEntriesName)
  	c.PProf = viper.GetBool(PProf)
  	c.PreAllocateMaps = viper.GetBool(PreAllocateMapsName)
  	c.PrependIptablesChains = viper.GetBool(PrependIptablesChainsName)
--- 1761,1767 ----
  	c.NAT46Range = viper.GetString(NAT46Range)
  	c.FlannelMasterDevice = viper.GetString(FlannelMasterDevice)
  	c.FlannelUninstallOnExit = viper.GetBool(FlannelUninstallOnExit)
! 	c.PolicyMapEntries = viper.GetInt(PolicyMapEntriesName)
  	c.PProf = viper.GetBool(PProf)
  	c.PreAllocateMaps = viper.GetBool(PreAllocateMapsName)
  	c.PrependIptablesChains = viper.GetBool(PrependIptablesChainsName)
