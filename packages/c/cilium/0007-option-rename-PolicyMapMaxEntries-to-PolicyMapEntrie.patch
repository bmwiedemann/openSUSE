From 1b18e321e27a0aea0d23069f71c2529304b4e35d Mon Sep 17 00:00:00 2001
From: Tobias Klauser <tklauser@distanz.ch>
Date: Mon, 6 Apr 2020 20:13:13 +0200
Subject: [PATCH 07/10] option: rename PolicyMapMaxEntries to PolicyMapEntries

This matches the other map entry size vars and also avoids confusion
with the const PolicyMapMax used for upper bound policy map size.

Signed-off-by: Tobias Klauser <tklauser@distanz.ch>
(cherry picked from commit 4c127422e06f6f497a75a82c892205cbf9380883)
---
 daemon/daemon.go     |  2 +-
 pkg/option/config.go | 14 +++++++-------
 2 files changed, 8 insertions(+), 8 deletions(-)

diff --git a/daemon/daemon.go b/daemon/daemon.go
index 314be6fed..c722cb8bd 100644
--- a/daemon/daemon.go
+++ b/daemon/daemon.go
@@ -266,7 +266,7 @@ func NewDaemon(ctx context.Context, dp datapath.Datapath) (*Daemon, *endpointRes
 	ctmap.InitMapInfo(option.Config.CTMapEntriesGlobalTCP, option.Config.CTMapEntriesGlobalAny,
 		option.Config.EnableIPv4, option.Config.EnableIPv6,
 	)
-	policymap.InitMapInfo(option.Config.PolicyMapMaxEntries)
+	policymap.InitMapInfo(option.Config.PolicyMapEntries)
 
 	if option.Config.DryMode == false {
 		if err := bpf.ConfigureResourceLimits(); err != nil {
diff --git a/pkg/option/config.go b/pkg/option/config.go
index 3643aadec..f6c6fb473 100644
--- a/pkg/option/config.go
+++ b/pkg/option/config.go
@@ -1010,9 +1010,9 @@ type DaemonConfig struct {
 	// in the BPF NAT table
 	NATMapEntriesGlobal int
 
-	// PolicyMapMaxEntries is the maximum number of peer identities that an
+	// PolicyMapEntries is the maximum number of peer identities that an
 	// endpoint may allow traffic to exchange traffic with.
-	PolicyMapMaxEntries int
+	PolicyMapEntries int
 
 	// DisableCiliumEndpointCRD disables the use of CiliumEndpoint CRD
 	DisableCiliumEndpointCRD bool
@@ -1631,13 +1631,13 @@ func (c *DaemonConfig) Validate() error {
 
 	policyMapMin := (1 << 8)
 	policyMapMax := (1 << 16)
-	if c.PolicyMapMaxEntries < policyMapMin {
+	if c.PolicyMapEntries < policyMapMin {
 		return fmt.Errorf("specified PolicyMap max entries %d must exceed minimum %d",
-			c.PolicyMapMaxEntries, policyMapMin)
+			c.PolicyMapEntries, policyMapMin)
 	}
-	if c.PolicyMapMaxEntries > policyMapMax {
+	if c.PolicyMapEntries > policyMapMax {
 		return fmt.Errorf("specified PolicyMap max entries %d must not exceed maximum %d",
-			c.PolicyMapMaxEntries, policyMapMax)
+			c.PolicyMapEntries, policyMapMax)
 	}
 	if err := c.checkIPv4NativeRoutingCIDR(); err != nil {
 		return err
@@ -1868,7 +1868,7 @@ func (c *DaemonConfig) Populate() {
 	c.NAT46Range = viper.GetString(NAT46Range)
 	c.FlannelMasterDevice = viper.GetString(FlannelMasterDevice)
 	c.FlannelUninstallOnExit = viper.GetBool(FlannelUninstallOnExit)
-	c.PolicyMapMaxEntries = viper.GetInt(PolicyMapEntriesName)
+	c.PolicyMapEntries = viper.GetInt(PolicyMapEntriesName)
 	c.PProf = viper.GetBool(PProf)
 	c.PreAllocateMaps = viper.GetBool(PreAllocateMapsName)
 	c.PrependIptablesChains = viper.GetBool(PrependIptablesChainsName)
-- 
2.27.0

