Index: cinnamon-4.2.3/files/usr/share/cinnamon/cinnamon-settings/bin/CinnamonGtkSettings.py
===================================================================
--- cinnamon-4.2.3.orig/files/usr/share/cinnamon/cinnamon-settings/bin/CinnamonGtkSettings.py
+++ cinnamon-4.2.3/files/usr/share/cinnamon/cinnamon-settings/bin/CinnamonGtkSettings.py
@@ -3,8 +3,7 @@
 import os.path
 import signal
 
-import tinycss
-from tinycss import tokenizer
+import tinycss2
 
 import gi
 gi.require_version("Gtk", "3.0")
@@ -87,13 +86,37 @@ class GtkCssEditor:
         self._path = os.path.join(GLib.get_user_config_dir(),
                                   "gtk-3.0",
                                   "gtk.css")
-
-        self.parser = tinycss.make_parser()
+        rules = []
 
         try:
-            self.stylesheet = self.parser.parse_stylesheet_file(self._path)
+            stylesheet = tinycss2.parse_stylesheet_bytes(open(self._path, 'rb').read())
+            for rs in stylesheet[0]:
+                if type(rs) == tinycss2.ast.ParseError:
+                    continue
+                rules.append(rs)
+            self.stylesheet = rules
         except FileNotFoundError:
-            self.stylesheet = tinycss.css21.Stylesheet(rules=[], errors=[], encoding="utf-8")
+            self.stylesheet = rules
+
+    def _serialize_selector(self, rule):
+        at_css = ""
+        if type(rule) == tinycss2.ast.AtRule:
+            at_css += "@" + rule.at_keyword
+        at_css += self._serialize_prelude(rule.prelude)
+        return at_css
+
+    def _serialize_prelude(self, prelude):
+        at_css = ""
+        for cv in prelude:
+            if type(cv) == tinycss2.ast.WhitespaceToken:
+                at_css += " "
+            elif type(cv) == tinycss2.ast.HashToken:
+                at_css += "#" + cv.value
+            elif type(cv) == tinycss2.ast.FunctionBlock:
+                next
+            else:
+                at_css += cv.value
+        return at_css.strip()
 
     def get_ruleset(self, selector_css):
         """
@@ -101,21 +124,30 @@ class GtkCssEditor:
         If it isn't currently defined, returns an empty
         one.
         """
-        for rs in self.stylesheet.rules:
-            if rs.selector.as_css() == selector_css:
-                return rs
+        idx = 0
+        for rs in self.stylesheet:
+            if type(rs) == tinycss2.ast.AtRule or type(rs) == tinycss2.ast.QualifiedRule:
+                if self._serialize_selector(rs) == selector_css:
+                    return rs, idx
+            idx += 1
 
-        new_ruleset = tinycss.css21.RuleSet(tokenizer.tokenize_flat(selector_css), [], None, None)
-        self.stylesheet.rules.append(new_ruleset)
+        new_ruleset = tinycss2.parse_one_rule(selector_css + " {}", False)
+        self.stylesheet.append(new_ruleset)
 
-        return new_ruleset
+        return new_ruleset, len(self.stylesheet) - 1
 
     def get_declaration(self, selector, decl_name):
-        rs = self.get_ruleset(selector)
+        rs, _ = self.get_ruleset(selector)
+
+        declarations = tinycss2.parse_declaration_list(rs.content, True, True)
 
-        for declaration in rs.declarations:
+        for declaration in declarations:
             if decl_name == declaration.name:
-                return declaration.value[0].value
+                decl_value = None
+                for component_value in declaration.value:
+                    if type(component_value) == tinycss2.ast.DimensionToken:
+                        decl_value = component_value.value
+                return decl_value
 
         return None
 
@@ -124,41 +156,67 @@ class GtkCssEditor:
         # get modified, they become invalid (or I'm doing something wrong)
         self.remove_declaration(selector, decl_name)
 
-        rs = self.get_ruleset(selector)
-
-        value_token = tokenizer.tokenize_flat(value_as_str)
-
-        # Make a new declaration, add it to the ruleset
-        new_decl = tinycss.css21.Declaration(decl_name, value_token, None, None, None)
+        rs, idx = self.get_ruleset(selector)
+        # rs.content[0].value: the value of the WhitespaceToken is the actual indent
+        prefix = "\n\t"
+        if len(rs.content) > 0:
+            prefix = rs.content[0].value
+
+        component_values = tinycss2.parse_component_value_list(prefix + decl_name + ": " + value_as_str + ";")
+        for component_value in component_values:
+            self.stylesheet[idx].content.append(component_value)
+
+    def _remove_declaration_from_content(self, declaration, content):
+        idx = 0
+        ident_idx = 0
+        found_ident = False
+        done = False
+        new_content = []
+        for component_value in content:
+            idx += 1
+            if len(content) != idx and type(content[idx]) == tinycss2.ast.IdentToken and content[idx].value == declaration.name and type(component_value) == tinycss2.ast.WhitespaceToken:
+                continue
+            if type(component_value) == tinycss2.ast.IdentToken and component_value.value == declaration.name:
+                found_ident = True
+                continue
+            if found_ident:
+                if type(component_value) == tinycss2.ast.LiteralToken:
+                    if ident_idx == 0 or done == True:
+                        done = False
+                        continue
+                if len(declaration.value) - 1 == ident_idx and component_value == declaration.value[ident_idx]:
+                    done = True
+                    continue
+                if component_value == declaration.value[ident_idx] and content[idx] == declaration.value[ident_idx + 1]:
+                    ident_idx += 1
+                    continue
+            new_content.append(component_value)
 
-        rs.declarations.append(new_decl)
+        return new_content
 
     def remove_declaration(self, selector, decl_name):
-        rs = self.get_ruleset(selector)
+        rs, idx = self.get_ruleset(selector)
 
         if not rs:
             return
 
-        for declaration in rs.declarations:
+        declarations = tinycss2.parse_declaration_list(rs.content, True, True)
+
+        for declaration in declarations:
             if decl_name == declaration.name:
-                rs.declarations.remove(declaration)
+                new_content = self._remove_declaration_from_content(declaration, rs.content)
 
-                if len(rs.declarations) == 0:
-                    self.stylesheet.rules.remove(rs)
+                if len(new_content) == 0:
+                    self.stylesheet.remove(rs)
+                    break
 
+                self.stylesheet[idx].content = new_content
                 break
 
     def save_stylesheet(self):
         out = ""
-
-        for rs in self.stylesheet.rules:
-            out += rs.selector.as_css() + " {\n"
-
-            for decl in rs.declarations:
-                out += "    " + decl.name + ": " + decl.value.as_css() + ";\n"
-
-            out += "}\n"
-
+        for rs in self.stylesheet:
+            out += rs.serialize()
         with open(self._path, "w+") as f:
             f.write(out)
 
