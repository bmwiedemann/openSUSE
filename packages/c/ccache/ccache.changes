-------------------------------------------------------------------
Tue Apr  6 08:12:49 UTC 2021 - Martin Pluskal <mpluskal@suse.com>

- Update to version 4.2.1:
  * Ccache now only dup2`s stderr into `$UNCACHED_ERR_FD for calls to the preprocessor/compiler. This works around a complex bug in interaction with GNU Make, LTO linking and the Linux PTY driver.
  * Fixed detection of color diagnostics usage when using -Xclang -fcolordiagnostics options.
  * The -frecord-gcc-switches compiler option is now handled correctly to avoid false positive cache hits.
  * Made it possible for per-compilation debug log files to be written in most argument processing error scenarios. Previously, ccache would only write debug log files if the argument processing phase was successful.
  * Made ccache bail out on too hard Clang option -gen-cdb-fragment-path.
  * The run_second_cpp made is now enforced on macOS if -g is used since newer Clang versions on macOS produce different debug information when compiling preprocessed code.
  * Made ccache only reject -f(no-)color-diagnostics for a known GCC compiler. This fixes a problem when using said option with clang++ on macOS.
  * Build configuration scripts now probe for atomic increment as well. This fixes a linking error on Sparc.
  * An existing CMake log message level is now used when warning about not finding asciidoc.
  * Fixed assertion in the "Debug option" test.
  * Upgraded to doctest 2.4.6. This fixes a build error with glibc >= 2.34.

-------------------------------------------------------------------
Thu Feb  4 11:11:55 UTC 2021 - Martin Pluskal <mpluskal@suse.com>

- Update to version 4.2:
  * Improved calculation of relative paths when using base_dir to also consider canonical paths (i.e. paths with dereferenced symlinks) as candidates.
  * Added a debug_dir (CCACHE_DEBUGDIR) configuration setting for specifying a directory for files written in debug mode.
  * Added support for compiler option -x cuda, understood by Clang.
  * The value of the SOURCE_DATE_EPOCH variable is now only hashed if it potentially affects the output from ccache. This means that ccache now (like before version 4.0) will be able produce cache hits for source code that doesn’t contain __DATE__ or __TIME__ macros regardless of the value of SOURCE_DATE_EPOCH.

-------------------------------------------------------------------
Mon Nov 23 11:00:00 UTC 2020 - Paul Fee <paul.fee@jci.com>

- Update to version 4.1:
   * Symlinks are now followed when guessing the compiler, e.g. /usr/bin/c++ -> g++10
   * Added a new compiler_type (CCACHE_COMPILERTYPE) configuration option that allows for overriding the guessed compiler type. 
   * Added support for caching compilations with -fsyntax-only.
   * Added a command line option --config-path, which specifies the configuration file to operate on. It can be used instead of setting CCACHE_CONFIGPATH temporarily.

-------------------------------------------------------------------
Wed Nov  4 07:54:08 UTC 2020 - Martin Pluskal <mpluskal@suse.com>

- Update to version 4.0:
  * Changed the default cache directory location to follow the XDG base directory specification.
  * Changed compression algorithm from Deflate (zlib) to Zstandard, enabled by default.
  * Added functionality for recompressing cache content with a higher compression level.
  * Changed hash algorithm from MD4 to BLAKE3.
  * Added checksumming with XXH3 to detect data corruption.
  * Improved cache directory structure.
  * Added support for using file cloning (AKA “reflinks”).
  * Added an experimental “inode cache” for file hashes.
- Changes for version 3.7.12:
  * Coverage files (.gcno) produced by GCC 9+ when using -fprofile-dir=dir are now handled gracefully by falling back to running the compiler.
  * Fixed writing to log file larger than 2 GiB when running ccache compiled in 32-bit mode.
- Drop no longer applying patch:
  * 0001-Add-another-cleanup-mechanism-evict-older-than.patch

-------------------------------------------------------------------
Sun Jul 26 21:10:54 UTC 2020 - Matthias Eliasson <elimat@opensuse.org>

- Update to version 3.7.11:
  * Added knowledge about -fprofile-{correction,reorder-functions,values}.
  * ccache now handles the Intel compiler option -xCODE (where CODE is a
    processor feature code) correctly.
  * Added support for NVCC’s -Werror and --Werror options.
  * ccache’s “Directory is not hashed if using -gz[=zlib]” tests are now
    skipped for GCC 6.

-------------------------------------------------------------------
Sun Jul 19 20:21:16 UTC 2020 - Matthias Eliasson <elimat@opensuse.org>

- Update to version 3.7.10: 
  * Improved handling of profiling options. ccache should now work correctly
    for profiling options like -fprofile-{generate,use}[=path] for GCC ≥ 9
	and Clang as well as -fauto-profile[=path] and the Clang-specific
	-fprofile-instr-{generate,use}[=path] and -fprofile-sample-{use,accurate}
	options.
  * ccache now copies files directly from the cache to the destination file
    instead of via a temporary file. This avoids problems when using
	filenames long enough to be near the file system’s filename max limit.
  * When the hard-link mode is enabled, ccache now only uses hard links for
    object files, not other files like dependency files. This is because
	compilers unlink object files before writing to them but they don’t do
	that for dependency files, so the latter can become overwritten and
	therefore corrupted in the cache.
  * Fixed a glitch related to hard-link mode and an empty cache.
  * ccache now supports the ccache.conf file to be a symlink.
  * Temporary files are now deleted immediately on signals like SIGTERM and
    SIGINT instead of some time later in a cleanup phase.
  * Fixed a bug that affected ccache’s -o/--set-config option for the
    base_dir and cache_dir_levels keys.

-------------------------------------------------------------------
Mon Jun 22 12:00:57 UTC 2020 - Sumit Jamgade <sjamgade@suse.com>

- Added patch for another cleanup mechanism based on age of file:
  * 0001-Add-another-cleanup-mechanism-evict-older-than.patch

-------------------------------------------------------------------
Sun Jun  7 10:07:00 UTC 2020 - Martin Pluskal <mpluskal@suse.com>

- Add symlink for nvidia cuda compiler as well

-------------------------------------------------------------------
Fri Apr  3 07:49:10 UTC 2020 - Martin Pluskal <mpluskal@suse.com>

- Update to version 3.7.9:
  * Fixed replacing of /dev/null when building as root with hard link mode enabled and using -o /dev/null.
  * Removed incorrect assertion resulting in “ccache: error: Internal error in format” when using -fdebug-prefix-map=X= with X equal to $PWD.
  * Improved CUDA/NVCC support: Recognize -dc and -x cu options.
  * Improved name of temporary file used in NFS-safe unlink.

- Changes for version 3.7.8:
  * Use $PWD instead of the real CWD (current working directory) when checking for CWD in preprocessed output. This fixes a problem when $PWD includes a symlink part and the user has set hash_dir = false.
  * Rewrote the Windows version of the lockfile routines. This should mitigate several problems with the old implementation.
  * If localtime_r fails the epoch time is now logged instead of garbage.
  * Improved error message when a boolean environment variable has an invalid value.
  * Improved the regression fix in ccache 3.7.5 related to not passing compilation-only options to the preprocessor.
  * ccache’s PCH test suite now skips running the tests if it detects broken PCH compiler support.
  * Fixed unit test failure on Windows.
  * Fixed “stringop-truncation” build warning on Windows.
  * Improved “x_rename” implementation on Windows.
  * Improved removal of temporary file when rewriting absolute paths to relative in the dependency file.
  * Clarified “include_file_ctime sloppiness” in the Performance section in the manual.

-------------------------------------------------------------------
Thu Feb  6 11:55:59 UTC 2020 - Martin Pluskal <mpluskal@suse.com>

- Update to version 3.7.7:
  * Fixed a bug related to object file location in the dependency file (if using -MD or -MMD but not -MF and the build directory is not the same as the source directory then the object file location in the .d file would become incorrect). This fixes regression in ccache 3.7.5 introduced by the bug fix related to EDG-based compilers. Note that this removes support for EDG-based compilers again. (A better fix for this is planned for ccache 4.0.)
  * Removed the unify mode since it has bugs and shortcomings that are non-trivial or impossible to fix: it doesn’t work with the direct mode, it doesn’t handle C++ raw strings correctly, it can give false cache hits for .incbin directives, it’s turned off when using -g and it can make line numbers in warning messages and __LINE__ macros incorrect.
mtime and ctime values are now stored in the manifest files only when sloppy_file_stat is set. This avoids adding superfluous manifest file entries on direct mode cache misses.
  * A “Result:” line is now always printed to the log.
  * The “cache miss” statistics counter will now be updated for read-only cache misses, making it consistent with the cache hit case.

-------------------------------------------------------------------
Wed Dec 18 09:31:24 UTC 2019 - Martin Pluskal <mpluskal@suse.com>

- Update to version 3.7.6:
  * The opt-in “file_macro sloppiness” mode has been removed so that the input file path now is always included in the direct mode hash. This fixes a bug that could result in false cache hits in an edge case when “file_macro sloppiness” is enabled and several identical source files include a relative header file with the same name but in different directories.
  * Statistics files are no longer lost when the filesystem of the cache is full.
  * Bail out on too hard Clang option -MJarg (in addition to the previous bailout of -MJ arg).
  * Properly handle color diagnostics in the depend mode as well.

-------------------------------------------------------------------
Tue Nov  5 08:14:20 UTC 2019 - Martin Pluskal <mpluskal@suse.com>

- Update to version 3.7.5:
  * Added support for -MF=arg (with an extra equal sign) as understood by EDG-based compilers.
  * Fixed a regression in 3.7.2 that could result in a warning message instead of an error in an edge case related to usage of “-Werror”.
  * An implicit -MQ is now passed to the preprocessor only if the object file extension is non-standard. This will make it easier to use EDG-based compilers (e.g. GHS) which don’t understand -MQ. (This is a bug fix of the corresponding improvement implemented in ccache 3.4.)
  * ccache now falls back to running the real compiler instead of failing fataly if an internal temporary file is missing after compilation.
  * Fixed a crash if localtime returns null pointer in localtime_r replacement.
  * Fixed header file dependency tracking when building ccache itself.
  * Fixed warning during configure in out-of-tree build in developer mode.

-------------------------------------------------------------------
Wed Oct 16 07:21:20 UTC 2019 - Martin Pluskal <mpluskal@suse.com>

- Update to version 3.7.4:
  * Added support for the -gz[=type] compiler option (previously
    ccache would think that “-gz” alone would enable debug
    information, thus potentially including the current directory
    in the hash).
  * Added support for converting paths like “/c/users/...” into
    relative paths on Windows.

-------------------------------------------------------------------
Mon Aug 26 08:57:55 UTC 2019 - Martin Pluskal <mpluskal@suse.com>

- Update to version 3.7.3:
  * The cache size (which is counted in “used disk blocks”) is now correct on filesystems that use more or less disk blocks than conventional filesystems, e.g. ecryptfs or btrfs/zfs with transparent compression. This also fixes a related problem with ccache’s own test suite when run on such file systems.
Fixed a regression in 3.7.2 when using the compiler option “-Werror” and then “-Wno-error” later on the command line.
- Changes n version 3.7.2:
  * The compiler option -gdwarf* no longer forces “run_second_cpp = true”.
  * Added verification that the value passed to the -o/--set-config option is valid.
  * Fixed detection of precompiled headers in the depend mode.
  * Bail out on too hard Clang option -ftime-trace.
  * ccache now updates the correct stats file when adding/updating manifest files. This bug previously made the file and size statistics counters incorrect over time.
  * Fixed warnings from Clang about unused arguments during preprocessing.
  * Unknown manifest versions are now handled gracefully in --dump-manifest.
  * Fixed make check with “funny” locales.

-------------------------------------------------------------------
Thu May  2 08:36:20 UTC 2019 - Martin Pluskal <mpluskal@suse.com>

- Fix upstream urls

-------------------------------------------------------------------
Wed May  1 16:35:56 UTC 2019 -  <l.lunak@centrum.cz>

- Update URLs in the .spec file
- Update to version 3.7.1
- Changes for version 3.7.1
  * Fixed a problem when using the compiler option `-MF /dev/null`.
  * Long commandlines are now handled gracefully on Windows by using 
    the `@file` syntax to avoid hitting the commandline size limit.
  * Fixed complaint from GCC 9’s `-Werror=format-overflow` when 
    compiling ccache itself.
- Changes for version 3.7
  * Fixed crash when the debug mode is enabled and the output file is 
    in a non-writable directory, e.g. when the output file is `/dev/null`.
  * Fixed an issue when printing very large log messages to the debug 
    log.
  * Fixed bugs related to support for `-gsplit-dwarf`. Previously 
    ccache could produce an incorrect link to the `.dwo` file in the 
    `.o` file.
  * Compilations with /dev/null as the input file are now cached.
  * ccache has learned how to contruct the object filename if no `-o` 
    option is given and the source filename does not include a `.` or 
    ends with a `.`.
  * Fixed a temporary file leak when the depend mode is enabled and 
    the compiler produces standard error output.
  * Fixed a bug in the depend mode where a manifest hash only could 
    be associated with one set of header dependencies.
  * Manifest files did not get marked as used on direct cache hits, 
    so the LRU cache cleanup would incorrectly remove them eventually. 
    This has been fixed.
  * The rewriting of absolute paths into relative paths in the 
    dependency file has been enabled in the depend mode as well.
  * ccache now ignores unknown keys in configuration files for 
    forward compatibility.
  * Rearranged command-line options into sections in the help text.
  * Documented the previously undocumented `--dump-manifest` and 
    `--hash-file` options (only useful for debugging ccache itself).
  * Added missing documentation for the command-line option 
    `-k/--get-config` added in ccache 3.5.
  * Renamed the `--print-config` command to `--show-config`.
  * Added a new `--print-stats` command that prints statistics 
    counters in machine-parsable (tab-separated) format.
  * ccache no longer creates a missing output directory, thus 
    mimicking the compiler behavior for `-o out/obj.o` when “out” 
    doesn’t exist.
  * `-fdebug-prefix-map=ARG`, `-ffile-prefix-map=ARG` and 
    `-fmacro-prefix-map=ARG` are now included in the hash, but only 
    the part before “ARG”. This fixes a bug where compiler feature 
    detection of said flags would not work correctly with ccache.
  * Bail out on too hard compiler option `-gtoggle`.
  * Bail out on too hard Clang options `--analyze` and `-analyze`.
  * Improved debug logging of file hashes in depend mode.
  * Improved handling of various `-g*` options. In particular, ccache 
    now understands that `-g0` cancels out previous `-g* options`.
  * Worked around a problem with Automake related to `.d` files when 
    using the hard link mode.
  * Added opt-in (at configure time) support for enabling trace logs 
    for profiling ccache itself. See `doc/DEVELOPER.md` in the code 
    tree for more information
  * Removed support for Fortran 77 again. Some Fortran support was 
    added in ccache 3.3, but the implementation did not work when 
    Fortran modules are involved.

-------------------------------------------------------------------
Thu Jan 31 10:36:48 UTC 2019 - kstreitova@suse.com

- Update to version 3.6
- Changes for version 3.6
  * ccache now has an opt-in ``depend mode'' 
  * Added support for GCC's `-ffile-prefix-map` option
  * Added support for multiple `-fsanitize-blacklist` arguments
  * ccache now includes the environment variables `LANG`, `LC_ALL`,
   `LC_CTYPE` and `LC_MESSAGES` in the hash since they may affect
    localization of compiler warning messages
  * Fixed a problem due to Clang overwriting the output file when
    compiling an assembler file
  * Clarified the manual to explain the reasoning behind the
    “file_macro” sloppiness setting in a better way
  * ccache now handles several levels of nonexistent directories
    when rewriting absolute paths to relative
  * A new sloppiness setting `clang_index_store` makes ccache skip
    the Clang compiler option `-index-store-path` and its argument
    when computing the manifest hash
  * Rename sloppiness `no_system_headers` to `system_headers` for
    consistency with other options
  * The GCC variables “DEPENDENCIES_OUTPUT” and “SUNPRO_DEPENDENCIES”
    are now supported correctly.
  * The algorithm that scans for `__DATE_` and `__TIME__` tokens in
    the hashed source code now doesn't produce false positives for
    tokens where `__DATE__` or `__TIME__` is a substring
- Changes for version 3.5.1 
  * Added missing getopt_long.c source file to release archive
  * Fixed (harmless) compiler warnings when building ccache object
    files
  * CFLAGS is no longer passed to the linker when linking ccache
  * Improved development mode build flags

-------------------------------------------------------------------
Mon Oct 22 06:53:16 UTC 2018 - Martin Pluskal <mpluskal@suse.com>

- Make sure bundled zlib is not used
- Make building more verbose

-------------------------------------------------------------------
Mon Oct 22 06:38:20 UTC 2018 - sean@suspend.net

- Update to version 3.5
  * Added a boolean debug (CCACHE_DEBUG) configuration option
  * Renamed CCACHE_CC to CCACHE_COMPILER
  * Added a new command-line option -k/--get-config
  * Improved performance substantially when using hash_dir = false
  * Renamed "stats zero time" to "stats zeroed"
  * Added file_state_matches_ctime option to disable ctime check

-------------------------------------------------------------------
Wed Jul 11 08:41:42 UTC 2018 - mpluskal@suse.com

- Enable testsuite

-------------------------------------------------------------------
Tue Apr 17 11:52:37 UTC 2018 - kstreitova@suse.com

- Update to version 3.4.2 [bsc#1089879]
  * The cleanup algorithm has been fixed to not misbehave when
    files are removed by another process while the cleanup process
    is running. Previously, too many files could be removed from
    the cache if multiple cleanup processes were triggered at the
    same time, in extreme cases trimming the cache to a much
    smaller size than the configured limits.
  * Correctly hash preprocessed headers located in a
    “.gch directory”. Previously, ccache would not pick up changes
    to such precompiled headers, risking false positive cache hits.
  * Fixed build failure when using the bundled zlib sources.
  * ccache 3.3.5 added a workaround for not triggering Clang errors
    when a precompiled header’s dependency has an updated timestamp
    (but identical content). That workaround is now only applied
    when the compiler is Clang.
  * Made it possible to perform out-of-source builds in dev mode
    again.
- AUTHORS.*, MANUAL.* and NEWS.* files are now located in the doc
  directory

-------------------------------------------------------------------
Thu Mar 15 11:10:32 UTC 2018 - mpluskal@suse.com

- Update to version 3.4.1:
  * Fixed printing of version number in ccache --version.
- Changes for version 3.4.0:
  * The compiler option form --sysroot arg is now handled like the
    documented --sysroot=arg form.
  * Added support for caching .su files generated by GCC flag
    -fstack-usage.
  * ccache should now work with distcc’s “pump” wrapper.
  * The optional unifier is no longer disabled when the direct mode
    is enabled.
  * Added support for nvcc compiler options --compiler-bindir/-ccbin,
    --output-directory/-odir and --libdevice-directory/-ldir.
  * Boolean environment variable settings no longer accept the
    following (case-insensitive) values: 0, false, disable and no.
    All other values are accepted and taken to mean “true”. This is
    to stop users from setting e.g. CCACHE_DISABLE=0 and then
    expect the cache to be used.
  * Improved support for run_second_cpp = false: If combined with
    passing -fdirectives-only (GCC) or frewrite-includes (Clang) to
    the compiler, diagnostics warnings and similar will be correct.
  * An implicit -MQ is now passed to the preprocessor only if the
    object file extension is non-standard. This should make it
    easier to use EDG-based compilers (e.g. GHS) which don’t
    understand -MQ.
  * ccache now treats an unreadable configuration file just like a
    missing configuration file.
  * Documented more pitfalls with enabling hard_links
    (CCACHE_HARDLINK).
  * Documented caveats related to colored warnings from compilers.
  * File size and number counters are now updated correctly when
    files are overwritten in the cache, e.g. when using
    CCACHE_RECACHE.
  * run_second_cpp is now forced for nvcc.
  * Fixed how the nvcc options -optf and -odir are handled.

-------------------------------------------------------------------
Sat Feb  3 04:53:41 UTC 2018 - avindra@opensuse.org

- Update to version 3.3.6:
  * Improved instructions on how to get cache hits between different
    working directories.
- Changes for version 3.3.5:
  * Documented how automatic cache cleanup works.
  * Fixed a regression where the original order of debug options
    could be lost. This reverts the “Improved parsing of -g*
    options” feature in ccache 3.3.
  * Multiple -fdebug-prefix-map options should now be handled
    correctly.
  * Fixed matching of directories in the ignore_headers_in_manifest
    configuration option.
  * Fixed detection of missing argument to -opt/--options-file.
  * ccache now bails out when building a precompiled header if any
    of the corresponding header files have an updated timestamp.
    This fixes complaints from clang.
  * Fixed a bug related to erroneously storing a dependency file
    with absolute paths in the cache on a preprocessed hit.
  * ccache -c/--cleanup now works like documented: it just
    recalculates size counters and trims the cache to not exceed
    the max size and file number limits. Previously, the forced
    cleanup took “limit_multiple” into account, so that ccache
    -c/--cleanup by default would trim the cache to 80% of the max
    limit.
  * ccache no longer ignores linker arguments for clang since clang
    warns about them.
  * Plugged a couple of file descriptor leaks.
  * Fixed a bug where ccache would skip hashing the compiler
    argument following a -fno-working-directory,
    -fworking-directory, -nostdinc, -nostdinc++, -remap or
    -trigraphs option in preprocessor mode.
- cleanup with spec-cleaner

-------------------------------------------------------------------
Wed Apr  5 09:25:15 UTC 2017 - mpluskal@suse.com

- Update to version 3.3.4:
  * Documented the different cache statistics counters.
  * Fixed a regression in ccache 3.3 related to potentially bad
    content of dependency files when compiling identical source
    code but with different source paths. This was only partially
    fixed in 3.3.2 and reverts the new “Names of included files are
    no longer included in the hash of the compiler’s preprocessed
    output” feature in 3.3.
  * Corrected statistics counter for -optf/--options-file failure.
  * Fixed undefined behavior warnings in ccache found by
    -fsanitize=undefined.

-------------------------------------------------------------------
Thu Jan 19 21:41:05 UTC 2017 - asn@cryptomilk.org

- Update to version 3.3.3
  * ccache now detects usage of .incbin assembler directives in
    the source code and avoids caching such compilations.
- Changes for version 3.3.2:
  * Fixed a regression in ccache 3.3 related to potentially bad
    content of dependency files when compiling identical source
    code but with different source paths.
  * Fixed a regression in ccache 3.3.1: ccache could get confused
    when using the compiler option -Wp, to pass multiple options
    to the preprocessor, resulting in missing dependency files
    from direct mode cache hits.

-------------------------------------------------------------------
Sun Sep 11 07:42:26 UTC 2016 - mpluskal@suse.com

- Update to version 3.3.1:
  * Fixed a problem in the “multiple -arch options” support
    introduced in 3.3. When using the direct mode (the default),
    different combinations of -arch options were not detected
    properly.
  * Fixed an issue when compiler option -Wp,-MT,path is used
    instead of -MT path (and similar for -MF, -MP and -MQ) and
    run_second_cpp (CCACHE_CPP2) is enabled.
- Changes for version 3.3.0:
  * A C99-compatible compiler is now required to build ccache.
  * The configuration option run_second_cpp (CCACHE_CPP2) now
    defaults to true. This improves ccache’s out-of-the-box 
    experience for compilers that can’t compile their own
    preprocessed output with the same outcome as if they compiled
    the real source code directly, e.g. newer versions of GCC and
    Clang.
  * The configuration option hash_dir (CCACHE_HASHDIR) now defaults
    to true.
  * Added a new ignore_headers_in_manifest configuration option, 
    which specifies headers that should be ignored in the direct
    mode.
  * Added a new prefix_command_cpp (CCACHE_PREFIX_CPP) configuration
    option, which specifies one or several prefixes to add to the
    command line ccache uses when invoking the preprocessor.
  * Added a new limit_multiple (CCACHE_LIMIT_MULTIPLE) configuration
    option, which specifies how much of the cache to remove when
    cleaning.
  * Added a new keep_comments_cpp (CCACHE_COMMENTS) configuration
    option, which tells ccache not to discard the comments before
    hashing preprocessor output. This can be used to check
    documentation with -Wdocumentation.
  * Added a new sloppiness option no_system_headers, which tells
    ccache not to include system headers in manifest files.
  * Added a new statistics counter that tracks the number of
    performed cleanups due to the cache size being over the limit.
    The value is shown in the output of “ccache -s”.
  * Added support for relocating debug info directory using
    -fdebug-prefix-map. This allows for cache hits even when
    hash_dir is used in combination with base_dir.
  * Added a new “cache hit rate” field to the output of “ccache -s”.
  * Added support for caching compilation of assembler code produced
    by e.g. “gcc -S file.c”.
  * Added support for cuda including the -optf/--options-file option.
  * Added support for Fortran 77.
  * Added support for multiple -arch options to produce "fat binaries".
  * Multiple identical -arch arguments are now handled without bailing.
  * The concatenated form of some long compiler options is now
    recognized, for example when using -isystemPATH instead of
    -isystem PATH.
  * If hard-linking is enabled and but fails (e.g. due to
    cross-device linking), ccache now falls back to copying instead
    of running the compiler.
  * Made the hash_dir option only have effect when generating debug
    info.
  * ccache now knows how to convert absolute paths to relative
    paths inside dependency files when using base_dir.
  * Improved parsing of -g* options.
  * Made ccache understand -Wp,-D* options.
  * ccache now understands the undocumented -coverage (only one
    dash) GCC option.
  * Names of included files are no longer included in the hash of
    the compiler’s preprocessed output. This leads to more
    potential cache hits when not using the direct mode.
  * Increased buffer size used when reading file data. This
    improves performance slightly.
- Changes for version 3.2.8:
  * Bail out on too hard compiler option -P.
  * Fixed clang test suite when running on Linux.
  * Fixed build and test for MinGW32 and Windows.
- Add fortran amd objc symlinks

-------------------------------------------------------------------
Fri Aug 26 13:27:20 UTC 2016 - tchvatal@suse.com

- Version update to 3.2.7:
  - Fixed build problem on QNX, which lacks ``SA_RESTART''.
  - Bail out on compiler option `-fstack-usage` since it creates a `.su` file
    which ccache currently doesn't handle.
  - Fixed a bug where (due to ccache rewriting paths) the compiler could choose
    incorrect include files if `CCACHE_BASEDIR` is used and the source file path
    is absolute and is a symlink.
  - Fixed a bug which could lead to false cache hits for compiler command lines
    with a missing argument to an option that takes an argument.
  - ccache now knows how to work around a glitch in the output of GCC 6's
    preprocessor.

-------------------------------------------------------------------
Fri Aug 26 13:21:18 UTC 2016 - tchvatal@suse.com

- Create basic symlinks for clang and regular cc calls for ccache
  * this makes it easier to use ccache with osc build

-------------------------------------------------------------------
Fri Jul  8 18:05:38 UTC 2016 - mpluskal@suse.com

- Small spec file cleanup
- Disable testsuite as it is not reliable in OBS

-------------------------------------------------------------------
Thu Apr 28 07:17:22 UTC 2016 - idonmez@suse.com

- Update to 3.2.5
  * Only pass clang-specific -stdlib= to the preprocessor.
  * Improved handling of stale NFS handles.
  * Made it harder to misinterpret documentation of boolean
    environment settings' semantics.
  * Corrected "Performance" section in the manual regarding __DATE_,
    __TIME__ and __FILE__ macros.
  * Don’t (try to) update manifest file in “read-only” and 
    “read-only direct” modes.
  * Fixed a bug in caching of stat system calls in “file_stat_matches
    sloppiness mode”.
  * Fixed bug in hashing of clang plugins, leading to unnecessary
    cache misses.
  * Fixed --print-config to show “pch_defines sloppiness”.

-------------------------------------------------------------------
Thu Oct  8 20:32:17 UTC 2015 - mpluskal@suse.com

- Update to 3.2.4
  * Fixed build error related to zlib on systems with older make 
    versions (regression in ccache 3.2.3).
  * Made conversion-to-bool explicit to avoid build warnings (and 
    potential runtime errors) on legacy systems.
  * Improved signal handling: Kill compiler on SIGTERM; wait for 
    compiler to exit before exiting; die appropriately.
  * Minor fixes related to Windows support.
  * The correct compression level is now used if compression is 
    requested.
  * Fixed a bug where cache cleanup could be run too early for 
    caches larger than 64 GiB on 32-bit systems.

-------------------------------------------------------------------
Sat Aug 22 20:36:16 UTC 2015 - astieger@suse.com

- update to 3.2.3:
  * Added support for compiler option -gsplit-dwarf.
  * Support external zlib in nonstandard directory.
  * Avoid calling exit() inside an exit handler.
  * Let exit handler terminate properly.
  * Bail out on compiler option --save-temps in addition to
    -save-temps.
  * Only log "Disabling direct mode" once when failing to read
    potential include files.

-------------------------------------------------------------------
Fri May 22 07:14:06 UTC 2015 - mpluskal@suse.com

- Update to 3.2.2
  * Added support for `CCACHE_COMPILERCHECK=string:<value>`. This 
    is a faster alternative to `CCACHE_COMPILERCHECK=<command>` if 
    the command's output can be precalculated by the build system.
  * Add support for caching code coverage results (compiling for 
    gcov).
  * Fixed bug which could result in false cache hits when source 
    code contains `'"'` followed by `" /*"` or `" //"` (with 
    variations).
  * Made hash of cached result created with and without 
    `CCACHE_CPP2` different. This makes it possible to rebuild 
    with `CCACHE_CPP2` set without having to clear the cache to 
    get new results.
  * Don't try to reset a non-existing stats file. This avoids 
    ``No such file or directory'' messages in the ccache log when 
    the cache directory doesn't exist.
  * Fixed a bug where ccache deleted clang diagnostics after 
    compiler failures.
  * Avoid performing an unnecessary copy of the object file on a 
    cache miss.
  * Bail out on too hard compiler option `-fmodules`.
  * Bail out on too hard compiler option `-fplugin=libcc1plugin` 
    (interaction with GDB).
  * Fixed build error when compiling ccache with recent clang 
    versions.
  * Removed signal-unsafe code from signal handler.
  * Corrected logic for when to output cached stderr.
  * Wipe the whole cached result on failure retrieving a cached 
    file.
  * Fixed build error when compiling ccache with recent clang 
    versions.

-------------------------------------------------------------------
Fri May 15 10:08:14 UTC 2015 - mvyskocil@opensuse.org

- Add the compat symlinks for gcc/g++ to libdir, so prepending
  libdir to PATH enabled ccache by default

-------------------------------------------------------------------
Fri Feb 20 18:12:09 UTC 2015 - mpluskal@suse.com

- Add gpg signature
- Remove ccache-gcc48.patch and xclang.patch (both are already 
  present in current release)
- On i586, use only small testsuite (quicktest) full testsuite
  fails (https://bugzilla.samba.org/show_bug.cgi?id=11109)
- Update to 3.2.1:
  * Added support for configuring ccache via one or several 
    configuration files instead of via environment variables. 
    Environment variables still have priority but are no longer 
    the recommended way of customizing ccache behavior. See the 
    manual for more information.
  * Added support for compiler error/warning messages with color.
  * Made creation of temporary directories and cache directories 
    smarter to avoid unnecessary stat calls.
  * Improved efficiency of the algorithm that scans for 
    __DATE_ and __TIME__ tokens in the hashed source code.
  * Added support for several binaries (separated by space) in 
    CCACHE_PREFIX.
  * The -c option is no longer passed to the preprocessor. 
    This fixes problems with clang and Solaris’s C++ compiler.
  * ccache no longer passes preprocessor options like -D and -I to 
    the compiler when compiling preprocessed output. This fixes 
    warnings emitted by clang.
  * Compiler options -fprofile-generate, -fprofile-arcs, 
    -fprofile-use and -fbranch-probabilities are now handled 
    without bailing.
  * Added support for clang’s --serialize-diagnostic option, 
    storing the diagnostic file (.dia) in the cache.
  * Added support for precompiled headers when using clang.
  * Changed the -x language option to use the new objective C 
    standard for GCC and clang.
  * On a cache miss, ccache now instructs the compiler to create 
    the object file at the real destination and then copies the 
    file into the cache instead of the other way around. This is 
    needed to support compiler options like -fprofile-arcs 
    and --serialize-diagnostics.
  * ccache now checks that included files' ctimes aren’t too new. 
    This check can be turned off by adding include_file_ctime 
    to the “ccache sloppinessâhe filename part of options 
    like -Wp,-MDfilename is no longer included in the hash 
    since the filename doesn’t have any bearing on the result.
  * Added a “read-only directâefault cache size is now 5 GB 
    (was previously 1 GiB).
  * Added support for @file and -@file arguments (reading options 
    from a file).
  * Bail out on too hard compiler option -Wp,-P.
  * Optimized MD4 calculation code on little-endian systems.
  * Various improvements and fixes on win32.
  * Improved logging to the ccache log file.
  * Added --dump-manifest command-line option for debugging purposes.
  * Added --with-bundled-zlib configure option.
  * Upgraded bundled zlib to version 1.2.8.
  * Improved dev.mk to be more platform independent.
  * Made the test suite work with clang and gcc-llvm on OS X.
  * Various other improvements of the test suite.

-------------------------------------------------------------------
Tue Jun 25 08:44:41 UTC 2013 - pgajdos@suse.com

- fixed build with gcc 4.8
  * ccache-gcc48.patch

-------------------------------------------------------------------
Sat Feb 23 20:55:27 UTC 2013 - asterios.dramis@gmail.com

- Update to 3.1.9:
  - The EAGAIN signal is now handled correctly when emitting cached stderr
    output. This fixes a problem triggered by large error outputs from the
    compiler.
  - Subdirectories in the cache are no longer created in read-only mode.
  - Fixed so that ccache's log file descriptor is not made available to the
    compiler.
  - Improved error reporting when failing to create temporary stdout/stderr
    files when executing the compiler.
  - Disappearing temporary stdout/stderr files are now handled gracefully.
  - Fixed test suite to work on ecryptfs.

-------------------------------------------------------------------
Fri Jan  4 23:37:14 UTC 2013 - llunak@suse.com

- Add xclang.patch: support -Xclang option

-------------------------------------------------------------------
Fri Nov  9 13:37:23 UTC 2012 - idonmez@suse.com

- Implement %check
- Don't install INSTALL.* files

-------------------------------------------------------------------
Sat Aug 11 15:22:26 UTC 2012 - puzel@suse.com

- update to ccache-3.1.8 
  - Made paths to dependency files relative in order to increase
    cache hits.
  - Added work-around to make ccache work with buggy GCC 4.1 when
    creating a pre-compiled header.
  - Clang plugins are now hashed to catch plugin upgrades.
  - Fixed crash when the current working directory has been
    removed.
  - Fixed crash when stderr is closed.
  - Corrected a corner case when parsing backslash escapes in
    string literals.
  - Paths are now correctly canonicalized when computing paths
    relative to the base directory.
  - Made git version macro work when compiling outside of the
    source directory.
  - Fixed `static_assert` macro definition clash with GCC 4.7.

-------------------------------------------------------------------
Mon Jan  9 07:30:04 UTC 2012 - puzel@suse.com

- update to ccache-3.1.7 
  - Non-writable `CCACHE_DIR` is now handled gracefully when
    `CCACHE_READONLY` is set.
  - Made failure to create files (typically due to bad directory
    permissions) in the cache directory fatal. Previously, such
    failures were silently and erroneously flagged as "compiler
    produced stdout".
  - Both the `-specs=file` and `--specs=file` forms are now
    recognized.
  - Added recognition and hashing of GCC plugins specified with
    `-fplugin=file`.
  - `CCACHE_COMPILERCHECK` now also determines how to hash explicit
    specs files (`-specs=file`).
  - Added `CPATH`, `C_INCLUDE_PATH` and similar environment
    variables to the hash to avoid false cache hits when such
    variables have changed.
  - Corrected log message when unify mode is enabled.
  - Reverted the GCC bug compatibility introduced in ccache 3.1.5
    for `-MT`/`-MQ` options with concatenated arguments. (The bug
    is fixed in recent GCC versions.)

-------------------------------------------------------------------
Sat Sep 17 22:39:57 UTC 2011 - jengelh@medozas.de

- Remove redundant tags/sections from specfile

-------------------------------------------------------------------
Sun Aug 21 18:24:58 UTC 2011 - asterios.dramis@gmail.com

- update to ccache-3.1.6
  - Rewrite argument to --sysroot if CCACHE_BASEDIR is used.
  - Don't crash if getcwd() fails.
  - Fixed alignment of "called for preprocessing" counter.

-------------------------------------------------------------------
Mon Jun  6 14:52:55 UTC 2011 - puzel@novell.com

- update to ccache-3.1.5
  - Added a new statistics counter named ``called for
    preprocessing''.
  - The original command line is now logged to the file specified
    with `CCACHE_LOGFILE`.
  - Improved error logging when system calls fail.
  - Added support for rewriting absolute paths in
    `-F`/`-iframework` GCC options.
  - Improved order of statistics counters in `ccache -s` output.
  - The `-MF`/`-MT`/`-MQ` options with concatenated argument are
    now handled correctly when they are last on the commandline.
  - ccache is now bug compatible with GCC for the `-MT`/`-MQ`
    options with concatenated arguments.
  - Fixed a minor memory leak.
  - Systems that lack (and don't need to be linked with) libm are
    now supported.

-------------------------------------------------------------------
Wed Feb 16 18:19:41 UTC 2011 - asterios.dramis@gmail.com

- update to ccache-3.1.4
  - Made a work-around for a bug in gzputc() in zlib 1.2.5.
  - Corrupt manifest files are now removed so that they won't block direct
    mode hits.
  - ccache now copes with file systems that don't know about symbolic links.
  - The file handle in now correctly closed on write error when trying to
    create a cache dir tag.
- Spec file updates:
  - Changes based on rpmdevtools templates and spec-cleaner run.
  - Updated Summary: and %description.
  - Made it compile with external zlib instead of the bundled copy.
  - Added also the html files in the %doc section.

-------------------------------------------------------------------
Mon Nov 29 09:56:02 UTC 2010 - puzel@novell.com

- update to ccache-3.1.3 
  - The -MFarg, -MTarg and -MQarg compiler options (i.e, without
    space between option and argument) are now handled correctly.

-------------------------------------------------------------------
Mon Nov 22 10:58:50 UTC 2010 - puzel@novell.com

- update to ccache-3.1.2 
  - bail out on too hard compiler options '-fdump-*'
  - NULL return values from malloc/calloc of zero bytes are now
    handled correctly
  - improved documentation on which information is included in the
    hash sum
  - made the 'too new header file' test case work on file systems
    with unsynchronized clocks
  - the test suite now also works on systems that lack a /dev/zero

-------------------------------------------------------------------
Mon Nov  8 09:46:57 UTC 2010 - puzel@novell.com

- update to ccache-3.1.1 
  - ccache now falls back to preprocessor mode when a non-regular
    include file (device, socket, etc) has been detected so that
    potential hanging due to blocking reads is avoided.
  - CRC errors are now detected when decompressing compressed files
    in the cache.
  - Fixed potential object file corruption race on NFS.
  - Minor documentation corrections.
  - Fixed configure detection of ar.
  - ccache development version (set by dev.mk) now works with gits
    whose `describe` command doesn't understand `--dirty`.

-------------------------------------------------------------------
Fri Sep 17 09:22:59 UTC 2010 - puzel@novell.com

- update to ccache-3.1 
 - features:
  - Added support for hashing the output of a custom command
    (e.g. `$compiler --version`) to identify the compiler
    instead of stat-ing or hashing the compiler binary.   
  - Added support for caching compilations that use precompiled
    headers.
  - Locking of the files containing statistics counters is now
    done using symlinks instead of POSIX locks.  
  - Manifest files are now updated without the need of taking
    locks.
  - Added `.cp` and `.CP` as known C++ suffixes.
  - Improved logging.
 - bugfixes:
  - Non-fatal error messages are now never printed to stderr but
    logged instead.
  - Fixed a bug affecting failing commands when `--ccache-skip` is
    used.
  - Made `--ccache-skip` work for all options.
  - EINTR is now handled correctly.

-------------------------------------------------------------------
Fri Jul 16 08:15:51 UTC 2010 - puzel@novell.com

- update to ccache-3.0.1 
 - bugfixes:
  - The statistics counter ``called for link'' is now correctly 
    updated when linking with a single object file.
  - Fixed a problem with out-of-source builds.

-------------------------------------------------------------------
Mon Jul 12 11:43:54 UTC 2010 - puzel@novell.com

- update to ccache-3.0
 - notable changes:
 - The way the hashes are calculated has changed, so you won't get
   cache hits for compilation results stored by older ccache
   versions. Because of this, you might as well clear the old
   cache directory with `ccache --clear` if you want, unless you
   plan to keep using an older ccache version.
 - ccache now has a ``direct mode'' where it computes a hash of
   the source code (including all included files) and compiler
   options without running the preprocessor. By not running the
   preprocessor, CPU usage is reduced; the speed is somewhere
   between 1 and 5 times that of ccache running in traditional
   mode, depending on the circumstances. The speedup will be
   higher when I/O is fast (e.g., when files are in the disk
   cache).  The direct mode can be disabled by setting
   +CCACHE_NODIRECT+.
 - Support has been added for rewriting absolute paths to relative
   paths when hashing, in order to increase cache hit rate when
   building the same source code in different directories even
   when compiling with `-g` and when using absolute include
   directory paths. This is done by setting the `CCACHE_BASEDIR`
   environment variable to an absolute path that specifies which
   paths to rewrite.
 - Object files are now optionally stored compressed in the cache.
   The runtime cost is negligible, and more files will fit in the
   ccache directory and in the disk cache. Set `CCACHE_COMPRESS`
   to enable object file compression. Note that you can't use
   compression in combination with the hard link feature.
 - A `CCACHE_COMPILERCHECK` option has been added. This option
   tells ccache what compiler-identifying information to hash to
   ensure that results retrieved from the cache are accurate.
   Possible values are: none (don't hash anything), mtime (hash
   the compiler's mtime and size) and content (hash the content of
   the compiler binary). The default is mtime.
- see /usr/share/doc/packages/ccache/NEWS.txt for complete
  release notes

-------------------------------------------------------------------
Wed Jan 25 21:34:51 CET 2006 - mls@suse.de

- converted neededforbuild to BuildRequires

-------------------------------------------------------------------
Thu Sep 29 03:16:43 CEST 2005 - dmueller@suse.de

 - add norootforbuild

-------------------------------------------------------------------
Wed Sep 28 23:24:29 CEST 2005 - dmueller@suse.de

- add norootforbuild 

-------------------------------------------------------------------
Thu Oct 21 11:56:47 CEST 2004 - ltinkl@suse.cz

- update to version 2.4

-------------------------------------------------------------------
Mon Sep 29 11:38:06 CEST 2003 - ltinkl@suse.cz

- update to version 2.3

-------------------------------------------------------------------
Wed Jul 09 13:28:43 CEST 2003 - ltinkl@suse.cz

- updated sources to version 2.2

-------------------------------------------------------------------
Fri Mar 28 15:38:13 CET 2003 - vbobek@suse.cz

- provides binary from older distcc package [#25806]

-------------------------------------------------------------------
Mon Feb 10 14:32:44 CET 2003 - vbobek@suse.cz

- initial suse release 2.1.1

