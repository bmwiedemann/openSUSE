From d6b4f36d6b22b70fb14e692f36d20910ef5563c1 Mon Sep 17 00:00:00 2001
From: Alexander Egorenkov <egorenar@linux.ibm.com>
Date: Tue, 29 Jun 2021 08:39:00 +0200
Subject: [PATCH] Handle task_struct state member changes for kernels >=
 5.14-rc1

Kernel commit 2f064a59a11ff9bc22e52e9678bc601404c7cb34 ("sched: Change
task_struct::state") renamed the member state of task_struct to __state
and its type changed from long to unsigned int.  Without the patch,
crash fails to start up with the following error:

  crash: invalid structure member offset: task_struct_state
         FILE: task.c  LINE: 5929  FUNCTION: task_state()

Signed-off-by: Alexander Egorenkov <egorenar@linux.ibm.com>
---
 defs.h    |  1 +
 symbols.c |  1 +
 task.c    | 10 +++++++++-
 3 files changed, 11 insertions(+), 1 deletion(-)

Index: b/defs.h
===================================================================
--- a/defs.h
+++ b/defs.h
@@ -2265,6 +2265,7 @@ struct size_table {         /* stash of
 	long printk_info;
 	long printk_ringbuffer;
 	long prb_desc;
+	long task_struct_state;
 };

 struct array_table {
Index: b/symbols.c
===================================================================
--- a/symbols.c
+++ b/symbols.c
@@ -10655,6 +10655,7 @@ dump_offset_table(char *spec, ulong make
 		SIZE(page_cache_bucket));
         fprintf(fp, "                       pt_regs: %ld\n", SIZE(pt_regs));
         fprintf(fp, "                   task_struct: %ld\n", SIZE(task_struct));
+	fprintf(fp, "             task_struct_state: %ld\n", SIZE(task_struct_state));
         fprintf(fp, "             task_struct_flags: %ld\n", SIZE(task_struct_flags));
         fprintf(fp, "            task_struct_policy: %ld\n", SIZE(task_struct_policy));
         fprintf(fp, "                   thread_info: %ld\n", SIZE(thread_info));
Index: b/task.c
===================================================================
--- a/task.c
+++ b/task.c
@@ -297,6 +297,11 @@ task_init(void)
 	}
 
         MEMBER_OFFSET_INIT(task_struct_state, "task_struct", "state");
+	MEMBER_SIZE_INIT(task_struct_state, "task_struct", "state");
+	if (INVALID_MEMBER(task_struct_state)) {
+		MEMBER_OFFSET_INIT(task_struct_state, "task_struct", "__state");
+		MEMBER_SIZE_INIT(task_struct_state, "task_struct", "__state");
+	}
         MEMBER_OFFSET_INIT(task_struct_exit_state, "task_struct", "exit_state");
         MEMBER_OFFSET_INIT(task_struct_pid, "task_struct", "pid");
         MEMBER_OFFSET_INIT(task_struct_comm, "task_struct", "comm");
@@ -5913,7 +5918,10 @@ task_state(ulong task)
 	if (!tt->last_task_read)
 		return 0;
 
-	state = ULONG(tt->task_struct + OFFSET(task_struct_state));
+	if (SIZE(task_struct_state) == sizeof(ulong))
+		state = ULONG(tt->task_struct + OFFSET(task_struct_state));
+	else
+		state = UINT(tt->task_struct + OFFSET(task_struct_state));
 	exit_state = VALID_MEMBER(task_struct_exit_state) ?
 		ULONG(tt->task_struct + OFFSET(task_struct_exit_state)) : 0;
 
