-------------------------------------------------------------------
Mon Oct  9 20:09:43 UTC 2023 - Matej Cepl <mcepl@cepl.eu>

- Adjust luajit-lua-versioned.patch to have correct LUA_LJDIR
  (bsc#1215592).

-------------------------------------------------------------------
Wed Sep 06 21:51:55 UTC 2023 - mcepl@cepl.eu

- Update to version 5.1.2.1.0+git.1693350652.41fb94d:
  * Add randomized register allocation for fuzz testing.
  * ARM64: Improve register allocation for integer IR_MUL/IR_MULOV.
  * ARM64: Fix register allocation for IR_*LOAD.
  * Update external MSDN URL in code.
  * FFI/ARM64/OSX: Handle non-standard OSX C calling conventions.
  * FFI: Unify stack setup for C calls in interpreter.
  * ARM64: Prevent STP fusion for conditional code emitted by TBAR.
  * ARM64: Fix LDP/STP fusing for unaligned accesses.
  * Handle table unsinking in the presence of IRFL_TAB_NOMM.
  * Use fallback name for install files without valid .git or .relver.
  * Handle non-.git checkout with .relver in .bat-file builds.
  * Fix external C call stack check when using LUAJIT_MODE_WRAPCFUNC.
  * Fix predict_next() in parser (again).
- Update luajit-lua-versioned.patch to work with the git checkout
  created tarball. The point of the patch is to extend the
  version number so that it is always bigger than 2.2.0 version
  of moonjit, which is Obsoleted by this package.

-------------------------------------------------------------------
Wed Aug 23 14:18:06 UTC 2023 - mcepl@cepl.eu

- Update to version 2.1.0~beta3+git.1692716794.03c3112:
  * Fix typo.
  * Handle the case when .git is not a directory.
  * Add .gitattributes to dynamically resolve .relver.
  * Add .gitattributes to dynamically resolve .relver.
  * Fix for last commit: also remove symlink on uninstall.
  * Switch to rolling releases: mark v2.1 as production.
  * Fix Windows build scripts for rolling releases.
  * Switch MSVC and console build scripts to rolling releases.
  * Switch build system to rolling releases.
  * Update documentation for switch to rolling releases.
  * Bump copyright date.
  * Remove work-in-progress notice in string buffer docs.
  * MIPS: Fix "bad FP FLOAD" assertion.
  * Ensure forward progress on trace exit to BC_ITERN.
  * ARM64: Add support for ARM64e pointer authentication codes (PAC).
  * DynASM/ARM64: Add instructions for ARM64e PAC.
  * Fix maxslots when recording BC_VARG, part 3.
  * Fix predict_next() in parser.
  * MIPS32: Declare that the assembler part uses the FR=0 model.
  * ARM64: Fix assembly of HREFK (again).
  * Fix frame for more types of on-trace error messages.
  * Add workaround for bytecode dump of builtins.
  * DynASM: Fix regression due to warning fix.
  * Fix base register coalescing in side trace.
  * ARM64: Fix assembly of HREFK.
  * Fix maxslots when recording BC_VARG, part 2.
  * Fix maxslots when recording BC_TSETM.
  * Fix maxslots when recording BC_VARG.
  * Fix register mask for stack check in head of side trace.
  * FFI: Fix ffi.metatype() for non-raw types.
  * ARM64: Fix LDP code generation.
  * MIPSr6: Add missing files to Makefile install target.
  * DynASM: Fix warnings.
  * Fix frame for on-trace out-of-memory error.
  * Fix handling of instable types in TNEW/TDUP load forwarding.
  * Fix compiler warning.
  * Fix last commit.
  * Print errors from __gc finalizers instead of rethrowing them.
  * Fix TDUP load forwarding after table rehash.
  * Fix canonicalization of +-0.0 keys for IR_NEWREF.
  * Improve error reporting on stack overflow.
  * Allow building sources with mixed LF/CRLF line-endings.
  * Fix compiler warning.
  * Don't fail for Clang builds, which pretend to be an ancient GCC.
  * Avoid negation of signed integers in C that may hold INT*_MIN.
  * Correct fix for stack check when recording BC_VARG.
  * Disable FMA by default. Use -Ofma or jit.opt.start("+fma") to enable.
  * FFI: Fix dangling reference to CType. Improve checks.
  * ARM64: Fix code generation for IR_SLOAD with typecheck + conversion.
  * PS4/PS5: Fix build scripts.
  * Avoid assertion in case of stack overflow from stitched trace.

-------------------------------------------------------------------
Mon Aug 21 13:04:40 UTC 2023 - Matej Cepl <mcepl@suse.com>

- Update luajit-s390x.patch from gh#LuaJIT/LuaJIT#631 to the
  current form.

-------------------------------------------------------------------
Wed Jan 25 10:52:05 UTC 2023 - Michal Suchanek <msuchanek@suse.de>

- Opencode %make_build to prevent build failure when not defined.

-------------------------------------------------------------------
Tue Nov 22 23:18:13 UTC 2022 - mcepl@cepl.eu

- Update to version 2.1.0~beta3+git.1669107176.46aa45d:
  * NX: Always compile with -fPIC.
  * Clarify contact page.
  * Ensure correct stack top for OOM error message.
  * ARM64: Fix IR_SLOAD assembly.
  * Fix trace join to BC_JLOOP originating from BC_ITERN.
  * Fix compiler warnings.
  * Fix last edit.
  * Remove dead Wiki links.
  * Fix QNX build.
  * Add -F option to override filename in jit.bcsave (luajit -b).
  * Patch luajit.pc with INSTALL_INC, if customized.
  * LJ_GC64: Fix lua_concat().
  * Prevent use of RTLD_DEFAULT when NO_RTLD_DEFAULT is defined.
  * Improve GC estimation for userdata with attached managed memory.
  * Add missing GC steps to string buffer methods.
  * x86/x64: Limit VLOAD fusion to simple cases.
  * OSX/iOS/ARM64: Fix generation of Mach-O object files.
  * Prevent trace start at BC_ITERL after compiled BC_ITERN.
  * ARM64: Allow building with unwinding disabled.
  * FFI: Fix sizeof expression in C parser for reference types.
  * FFI: Fix ffi.alignof() for reference types.
  * FFI: Allow ffi.metatype() for typedefs with attributes.
  * OSX/iOS/ARM64: Fix bytecode embedding in Mach-O object file.
  * LJ_GC64: Fix IR_VARG offset for fixed number of results.
  * x86/x64: Fix math.ceil(-0.9) result sign.
  * Grammar and spell check.
  * Make embedded bytecode readable and forward-compatible.
  * DynASM: Fix warnings.
  * Fix warnings in minilua.c.
  * Update console build instructions.
  * Add Nintendo Switch port.
  * Avoid zero-sized arrays in jit_State.
  * Don't use jit_State during build with JIT disabled.
  * DynASM/ARM64: Fix LSL/BFI* encoding with variable registers.
  * Fix ITERN loop detection when hook checks are enabled.
  * Prevent C compiler undefined-behavior optimization.
  * Fix alias analysis for table length forwarding.
  * Fix loop initialization in table.foreach().
  * LJ_GC64: Fix HREFK optimization.
  * Fix recording of __concat metamethod.
  * Cleanup of system and architecture support docs.
  * Add PS5 port.
  * Fix assertions.
  * x64: Fix RETHI/RETLO swap after call.
  * Fix assertion for LJ_KEYINDEX.
  * Add missing check for LJ_KEYINDEX in ITERN recording.
  * DynASM/ARM64: Fix NOP instruction for aligment
- Was forced to remove perhaps in future important patches:
  - luajit-ppc64-replace-asserts.patch
  - 0004-Add-ppc64-support-based-on-koriakin-GitHub-patchset.patch

-------------------------------------------------------------------
Tue Nov 22 16:22:18 UTC 2022 - Michael Gorse <mgorse@suse.com>

- Also exclude s390x from the build (boo#1204557).

-------------------------------------------------------------------
Tue Nov  1 16:01:53 UTC 2022 - Michael Gorse <mgorse@suse.com>

- Add ppc64 and ppc64le to ExcludeArch for now. This can be
  removed if we rebase the ppc64 patch, but it is no longer being
  maintained and seems unlikely to land upstream (bsc#1204557).

-------------------------------------------------------------------
Tue Oct  4 19:00:14 UTC 2022 - Dirk MÃ¼ller <dmueller@suse.com>

- exclude luajit from building on riscv64 - not yet supported

-------------------------------------------------------------------
Wed Mar 23 21:33:11 UTC 2022 - mcepl@cepl.eu

- Update to version 2.1.0~beta3+git.1647772157.43ebb949:
  * Fix soft-float IR_POW splitting.
  * Fix BC_UCLO insertion for returns.
  * Fix compiler warning.
  * Revert to trival pow() optimizations to prevent inaccuracies.
  * Fix string buffer COW handling, part 2.
  * Fix install docs for Android.
  * *BSD: Fix getentropy() declaration.
  * Fix string buffer COW handling.
  * Fix command-line argv handling.
  * Don't export internal symbol.
  * Fix pow() optimization inconsistencies.
  * Always exit after machine code page protection change fails.
  * Fix FOLD rule for BUFHDR append with intervening buffer use.
  * Fix compiled error handling for buffer methods.
  * Prevent unroll across BC_ITERN.
  * Prevent replay of buffer operation for PHI operands.
  * Save trace recorder state around VM event call.
  * Bump copyright date.
  * FFI: Ensure library is loaded before de-serializing FFI types.
  * Fix HREFK forwarding vs. table.clear().
  * Fix FOLD rule for BUFHDR append.
  * OSX: Disable unreliable assertion for external frame unwinding.
  * Limit exponent range in number parsing.
  * Fix tonumber("-0") in dual-number mode.
  * Limit work done in SINK pass.
  * Fix ABC FOLD rule with constants.
  * Prevent CSE of a REF_BASE operand across IR_RETF.
  * Windows: Fix binary output of jit.bcsave to stdout.
  * Fix FOLD rule for x-0.
  * Update Android build docs.
  * Update Android build docs.
  * ARM64: Fix pcall() error case.
  * OSX/ARM64: Fix external unwinding.
  * Fix string buffer method recording.
  * Fix interaction of profiler and ITERN recording.
  * Fix compilation of multi-result call to next().
  * ARM64: Fix IR_HREF code generation.
  * MIPS64: Fix soft-float IR_TOSTR.
  * MIPS: Fix register allocation in assembly of HREF.
  * Fix compiler warning.
  * Windows/x64: Document MSVC flags for C++ exception interoperability.
  * FFI: Ensure returned string is alive in ffi.typeinfo().
  * OSX/ARM64: Disable unwind info.
  * Fix stack allocation after on-trace stack check.
  * Fix ITERN blacklisting.
  * Ensure ITERN forward progress on interpreter bailout.
  * ARM64: Reorder interpreter stack frame and fix unwinding.
  * Don't bail out to interpreter to JLOOP originating from ITERN.
  * FFI: Don't load PC from non-function object in FFI continuation.
  * FFI: Don't load PC from non-function object in FFI continuation.
  * FFI: Fix missing cts->L initialization in argv2ctype().
  * OSX/ARM64: Disable external unwinding for now.
  * Compile table traversals: next(), pairs(), BC_ISNEXT/BC_ITERN.
  * Use IR_HIOP for generalized two-register returns.
  * Refactor table traversal.
  * ARM: Fix symbol display in trace disassembly.
  * Refactor IR_TMPREF generation.
  * Refactor IR_VLOAD to take an offset.
  * MIPS: Fix trace linking.
  * String buffers, part 4b: Improve de-serialization checks.
  * String buffers, part 4a: Add metatable serialization dictionary.
  * Consider slots used by upvalues in use-def analysis.
  * Prevent loop in snap_usedef().
  * Fix io.close() error message.
  * Fix io.close().
  * Fix minilua vararg stack handling.
  * PS4: Fix compile.
  * Avoid out-of-range number of results when compiling select(k, ...).
  * String buffers, part 3d: Compile string buffer methods and functions.
  * Minor improvements of optimizations.
  * Fix error message in lj_lib_checkintrange().
  * String buffers, part 2f: Prevent self-put of buffer.
  * String buffers, part 3c: Add IRBUFHDR_WRITE mode.
  * Fix IRXLOAD_* mode bits description.
  * String buffers, part 3b: Change IR_BUFHDR op2 mode bits to mode.
  * String buffers, part 3a: Add IR_TMPREF for passing TValues to helpers.
  * Add IRCONV_NONE for pass-through INT to I64/U64 type change.
  * Fix jit.dump() output for IR_CONV.
- Patches broken in the need of rebase (temporarily switched off):
  - 0004-Add-ppc64-support-based-on-koriakin-GitHub-patchset.patch
  - luajit-ppc64-replace-asserts.patch

-------------------------------------------------------------------
Wed Oct 27 20:20:36 UTC 2021 - Fabian Vogt <fvogt@suse.com>

- Replace luajit-ppc64-remove-asserts.patch with
  luajit-ppc64-replace-asserts.patch to use the proper assert
  functions instead of removing them.

-------------------------------------------------------------------
Mon Oct 25 21:55:16 UTC 2021 - Michael Gorse <mgorse@suse.com>

- Add luajit-ppc64-remove-asserts.patch: remove calls to
  lua_assert. Fixes the build with our revision (bsc#1191615).
- Add luajit-s390x.patch: add s390x support, based on Fedora's
  patch and ported to our revision.
- Remove ExcludeArch, since package currently builds on s390x.

-------------------------------------------------------------------
Thu Oct  7 15:09:55 UTC 2021 - Michael Gorse <mgorse@suse.com>

- Exclude s390x for now. There is a not-yet-upstreamed port
  available, but we would need to rebase it for our release.

-------------------------------------------------------------------
Mon Jul 12 17:15:55 UTC 2021 - Matej Cepl <mcepl@suse.com>

- Clean up SPEC. We don't need update-alternatives after all.

-------------------------------------------------------------------
Tue Jun 29 17:17:36 UTC 2021 - munix9@googlemail.com

- Update to version 2.1.0~beta3+git294.e9577376:
  * Disable unreliable assertion for external frame unwinding.
  * Flush and close output file after profiling run.
  * Avoid conflict between 64 bit lightuserdata and ITERN key.

-------------------------------------------------------------------
Thu Jun 24 10:15:35 UTC 2021 - munix9@googlemail.com

- Update to version 2.1.0~beta3+git291.3f9389ed:
  * Throw any errors before stack changes in trace stitching.
  * DynASM/x86: Add missing escape in pattern.
  * Fix HTML.
  * String buffers, part 2e: add serialization string dictionary.
  * DynASM/ARM64: Fix LSL/BFI* encoding with variable shifts.
  * Fix MinGW static build.
  * Fix dependencies.
  * Fix IR_BUFHDR assembly.

