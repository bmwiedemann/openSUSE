<revisionlist>
  <revision rev="1" vrev="1">
    <srcmd5>7faf214908261c79ebfa535c556a7d6b</srcmd5>
    <version>2.1.0~beta3+git.1624618403.e9577376</version>
    <time>1626466380</time>
    <user>dimstar_suse</user>
    <comment>LuaJIT seems to be more maintained than MoonJIT at the moment.</comment>
    <requestid>906669</requestid>
  </revision>
  <revision rev="2" vrev="2">
    <srcmd5>f7835e01ce9b7b2536f856c660bd1f0d</srcmd5>
    <version>2.1.0~beta3+git.1624618403.e9577376</version>
    <time>1633963717</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>924043</requestid>
  </revision>
  <revision rev="3" vrev="3">
    <srcmd5>7cd6f61d7e6a9b86ad8bd8ff6a5b920a</srcmd5>
    <version>2.1.0~beta3+git.1624618403.e9577376</version>
    <time>1635628401</time>
    <user>dimstar_suse</user>
    <comment>- Replace luajit-ppc64-remove-asserts.patch with
  luajit-ppc64-replace-asserts.patch to use the proper assert
  functions instead of removing them.
- Add luajit-ppc64-remove-asserts.patch: remove calls to
  lua_assert. Fixes the build with our revision (bsc#1191615).
- Add luajit-s390x.patch: add s390x support, based on Fedora's
  patch and ported to our revision.
- Remove ExcludeArch, since package currently builds on s390x.
</comment>
    <requestid>927861</requestid>
  </revision>
  <revision rev="4" vrev="1">
    <srcmd5>8b1aa8fec09427ca91bcfc75f1feb721</srcmd5>
    <version>2.1.0~beta3+git.1647772157.43ebb949</version>
    <time>1648479493</time>
    <user>dimstar_suse</user>
    <comment>- Update to version 2.1.0~beta3+git.1647772157.43ebb949:
  * Fix soft-float IR_POW splitting.
  * Fix BC_UCLO insertion for returns.
  * Fix compiler warning.
  * Revert to trival pow() optimizations to prevent inaccuracies.
  * Fix string buffer COW handling, part 2.
  * Fix install docs for Android.
  * *BSD: Fix getentropy() declaration.
  * Fix string buffer COW handling.
  * Fix command-line argv handling.
  * Don't export internal symbol.
  * Fix pow() optimization inconsistencies.
  * Always exit after machine code page protection change fails.
  * Fix FOLD rule for BUFHDR append with intervening buffer use.
  * Fix compiled error handling for buffer methods.
  * Prevent unroll across BC_ITERN.
  * Prevent replay of buffer operation for PHI operands.
  * Save trace recorder state around VM event call.
  * Bump copyright date.
  * FFI: Ensure library is loaded before de-serializing FFI types.
  * Fix HREFK forwarding vs. table.clear().
  * Fix FOLD rule for BUFHDR append.
  * OSX: Disable unreliable assertion for external frame unwinding.
  * Limit exponent range in number parsing.
  * Fix tonumber(&quot;-0&quot;) in dual-number mode.
  * Limit work done in SINK pass.
  * Fix ABC FOLD rule with constants.
  * Prevent CSE of a REF_BASE operand across IR_RETF.
  * Windows: Fix binary output of jit.bcsave to stdout.
  * Fix FOLD rule for x-0.
  * Update Android build docs.
  * Update Android build docs.
  * ARM64: Fix pcall() error case.
  * OSX/ARM64: Fix external unwinding.
  * Fix string buffer method recording.
  * Fix interaction of profiler and ITERN recording.
  * Fix compilation of multi-result call to next().
  * ARM64: Fix IR_HREF code generation.
  * MIPS64: Fix soft-float IR_TOSTR.
  * MIPS: Fix register allocation in assembly of HREF.
  * Fix compiler warning.
  * Windows/x64: Document MSVC flags for C++ exception interoperability.
  * FFI: Ensure returned string is alive in ffi.typeinfo().
  * OSX/ARM64: Disable unwind info.
  * Fix stack allocation after on-trace stack check.
  * Fix ITERN blacklisting.
  * Ensure ITERN forward progress on interpreter bailout.
  * ARM64: Reorder interpreter stack frame and fix unwinding.
  * Don't bail out to interpreter to JLOOP originating from ITERN.
  * FFI: Don't load PC from non-function object in FFI continuation.
  * FFI: Don't load PC from non-function object in FFI continuation.
  * FFI: Fix missing cts-&gt;L initialization in argv2ctype().
  * OSX/ARM64: Disable external unwinding for now.
  * Compile table traversals: next(), pairs(), BC_ISNEXT/BC_ITERN.
  * Use IR_HIOP for generalized two-register returns.
  * Refactor table traversal.
  * ARM: Fix symbol display in trace disassembly.
  * Refactor IR_TMPREF generation.
  * Refactor IR_VLOAD to take an offset.
  * MIPS: Fix trace linking.
  * String buffers, part 4b: Improve de-serialization checks.
  * String buffers, part 4a: Add metatable serialization dictionary.
  * Consider slots used by upvalues in use-def analysis.
  * Prevent loop in snap_usedef().
  * Fix io.close() error message.
  * Fix io.close().
  * Fix minilua vararg stack handling.
  * PS4: Fix compile.
  * Avoid out-of-range number of results when compiling select(k, ...).
  * String buffers, part 3d: Compile string buffer methods and functions.
  * Minor improvements of optimizations.
  * Fix error message in lj_lib_checkintrange().
  * String buffers, part 2f: Prevent self-put of buffer.
  * String buffers, part 3c: Add IRBUFHDR_WRITE mode.
  * Fix IRXLOAD_* mode bits description.
  * String buffers, part 3b: Change IR_BUFHDR op2 mode bits to mode.
  * String buffers, part 3a: Add IR_TMPREF for passing TValues to helpers.
  * Add IRCONV_NONE for pass-through INT to I64/U64 type change.
  * Fix jit.dump() output for IR_CONV.
- Patches broken in the need of rebase (temporarily switched off):
  - 0004-Add-ppc64-support-based-on-koriakin-GitHub-patchset.patch
  - luajit-ppc64-replace-asserts.patch
</comment>
    <requestid>964404</requestid>
  </revision>
  <revision rev="5" vrev="2">
    <srcmd5>674487bb583d78274d40b878025b39ef</srcmd5>
    <version>2.1.0~beta3+git.1647772157.43ebb949</version>
    <time>1665420262</time>
    <user>favogt_factory</user>
    <comment></comment>
    <requestid>1008310</requestid>
  </revision>
  <revision rev="6" vrev="3">
    <srcmd5>3f07afb2ddcf6ddac36416d93d67b4d4</srcmd5>
    <version>2.1.0~beta3+git.1647772157.43ebb949</version>
    <time>1667579493</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>1032964</requestid>
  </revision>
  <revision rev="7" vrev="1">
    <srcmd5>147684b997131b6e896da3bbd39b08b4</srcmd5>
    <version>2.1.0~beta3+git.1669107176.46aa45d</version>
    <time>1669288937</time>
    <user>dimstar_suse</user>
    <comment>- Update to version 2.1.0~beta3+git.1669107176.46aa45d:
  * NX: Always compile with -fPIC.
  * Clarify contact page.
  * Ensure correct stack top for OOM error message.
  * ARM64: Fix IR_SLOAD assembly.
  * Fix trace join to BC_JLOOP originating from BC_ITERN.
  * Fix compiler warnings.
  * Fix last edit.
  * Remove dead Wiki links.
  * Fix QNX build.
  * Add -F option to override filename in jit.bcsave (luajit -b).
  * Patch luajit.pc with INSTALL_INC, if customized.
  * LJ_GC64: Fix lua_concat().
  * Prevent use of RTLD_DEFAULT when NO_RTLD_DEFAULT is defined.
  * Improve GC estimation for userdata with attached managed memory.
  * Add missing GC steps to string buffer methods.
  * x86/x64: Limit VLOAD fusion to simple cases.
  * OSX/iOS/ARM64: Fix generation of Mach-O object files.
  * Prevent trace start at BC_ITERL after compiled BC_ITERN.
  * ARM64: Allow building with unwinding disabled.
  * FFI: Fix sizeof expression in C parser for reference types.
  * FFI: Fix ffi.alignof() for reference types.
  * FFI: Allow ffi.metatype() for typedefs with attributes.
  * OSX/iOS/ARM64: Fix bytecode embedding in Mach-O object file.
  * LJ_GC64: Fix IR_VARG offset for fixed number of results.
  * x86/x64: Fix math.ceil(-0.9) result sign.
  * Grammar and spell check.
  * Make embedded bytecode readable and forward-compatible.
  * DynASM: Fix warnings.
  * Fix warnings in minilua.c.</comment>
    <requestid>1037521</requestid>
  </revision>
  <revision rev="8" vrev="2">
    <srcmd5>b049c09d2da6647675bf739086dfb347</srcmd5>
    <version>2.1.0~beta3+git.1669107176.46aa45d</version>
    <time>1674810914</time>
    <user>dimstar_suse</user>
    <comment>Forwarded request #1060899 from michals

- Opencode %make_build to prevent build failure when not defined.</comment>
    <requestid>1061036</requestid>
  </revision>
  <revision rev="9" vrev="3">
    <srcmd5>5103c3c5dfe7fb9f32e5bc70b052bc9c</srcmd5>
    <version>2.1.0~beta3+git.1669107176.46aa45d</version>
    <time>1692687300</time>
    <user>anag+factory</user>
    <comment>- Update luajit-s390x.patch from gh#LuaJIT/LuaJIT#631 to the
  current form.
</comment>
    <requestid>1105084</requestid>
  </revision>
  <revision rev="10" vrev="1">
    <srcmd5>5275153368734bc0c06df19def015735</srcmd5>
    <version>5.1.2.1.0+git.1693350652.41fb94d</version>
    <time>1694344168</time>
    <user>anag+factory</user>
    <comment>- Update to version 5.1.2.1.0+git.1693350652.41fb94d:
  * Add randomized register allocation for fuzz testing.
  * ARM64: Improve register allocation for integer IR_MUL/IR_MULOV.
  * ARM64: Fix register allocation for IR_*LOAD.
  * Update external MSDN URL in code.
  * FFI/ARM64/OSX: Handle non-standard OSX C calling conventions.
  * FFI: Unify stack setup for C calls in interpreter.
  * ARM64: Prevent STP fusion for conditional code emitted by TBAR.
  * ARM64: Fix LDP/STP fusing for unaligned accesses.
  * Handle table unsinking in the presence of IRFL_TAB_NOMM.
  * Use fallback name for install files without valid .git or .relver.
  * Handle non-.git checkout with .relver in .bat-file builds.
  * Fix external C call stack check when using LUAJIT_MODE_WRAPCFUNC.
  * Fix predict_next() in parser (again).
- Update luajit-lua-versioned.patch to work with the git checkout
  created tarball. The point of the patch is to extend the
  version number so that it is always bigger than 2.2.0 version
  of moonjit, which is Obsoleted by this package.

- Update to version 2.1.0~beta3+git.1692716794.03c3112:
  * Fix typo.
  * Handle the case when .git is not a directory.
  * Add .gitattributes to dynamically resolve .relver.
  * Add .gitattributes to dynamically resolve .relver.
  * Fix for last commit: also remove symlink on uninstall.
  * Switch to rolling releases: mark v2.1 as production.
  * Fix Windows build scripts for rolling releases.
  * Switch MSVC and console build scripts to rolling releases.
  * Switch build system to rolling releases.
  * Update documentation for switch to rolling releases.</comment>
    <requestid>1109627</requestid>
  </revision>
  <revision rev="11" vrev="2">
    <srcmd5>9029ac716108c384671287f8f78cf32c</srcmd5>
    <version>5.1.2.1.0+git.1693350652.41fb94d</version>
    <time>1696963926</time>
    <user>anag+factory</user>
    <comment>- Adjust luajit-lua-versioned.patch to have correct LUA_LJDIR
  (bsc#1215592).
</comment>
    <requestid>1116533</requestid>
  </revision>
  <revision rev="12" vrev="1">
    <srcmd5>7e29717cac038463574e87fcef89cd64</srcmd5>
    <version>5.1.2.1.0+git.1707061634.0d313b2</version>
    <time>1709493571</time>
    <user>dimstar_suse</user>
    <comment>- Update to version 5.1.2.1.0+git.1707061634.0d313b2:
  * Rework stack overflow handling.
  * Preserve keys with dynamic values in template tables when saving bytecode.
  * Prevent include of luajit_rolling.h.
  * Fix documentation bug about '\z' string escape.
  * Fix zero stripping in %g number formatting.
  * Fix unsinking of IR_FSTORE for NULL metatable.
  * DynASM/x86: Add endbr instruction.
  * MIPS64 R2/R6: Fix FP to integer conversions.
  * Add cross-32/64 bit and deterministic bytecode generation.
  * DynASM/x86: Allow [&amp;expr] operand.
  * Check for IR_HREF vs. IR_HREFK aliasing in non-nil store check.
  * Respect jit.off() on pending trace exit.
  * Simplify handling of instable types in TNEW/TDUP load forwarding.
  * Only emit proper parent references in snapshot replay.
  * Fix anchoring for string buffer set() method (again).
  * ARM: Fix stack restore for FP slots.
  * Document workaround for multilib vs. cross-compiler conflict.
  * Fix anchoring for string buffer set() method.
  * Fix runtime library flags for MSVC debug builds.
  * Fix .debug_abbrev section in GDB JIT API.
  * Optimize table.new() with constant args to (sinkable) IR_TNEW.
  * Emit sunk IR_NEWREF only once per key on snapshot replay.
  * Fix last commit.
  * x86/x64: Don't fuse loads across IR_NEWREF.
  * Improve last commit.
  * x86/x64: Don't fuse loads across table.clear.
  * x86/x64: Add more red zone checks to assembler backend.
  * Add stack check to pcall/xpcall.
  * Invalidate SCEV entry when returning to lower frame.
  * FFI: Fix pragma push stack limit check and throw on overflow.
  * ARM64: Fix disassembly of ldp/stp offsets.
  * Check for upvalue state transition in IR_UREFO.
  * x64: Properly fix __call metamethod return dispatch.
  * Windows/x86: _BitScan*64 are only available on 64 bit archs.
  * Add 'cc' file type for saving bytecode.
  * FFI/Windows: Fix type declaration for int64_t and uint64_t.
  * FFI: Fix dangling reference to CType in carith_checkarg().
  * DynASM/ARM64: Support ldp/stp of q registers.
  * ARM64: Use ADR and ADRP to form constants.
  * ARM64: Fix disassembly of U12 loads.
  * ARM64: Unify constant register handling in interpreter.
  * ARM: Fix register hint for FFI calls with FP results.
  * ARM64: Fix register hint for FFI calls with FP results.
  * ARM64: Restore fp before sp in C stack unwinders.
  * FFI: Fix ffi.abi(&quot;pauth&quot;).
  * Maintain chain invariant in DCE.
  * LJ_FR2: Fix stack checks in vararg calls.
  * Follow-up fix for stack overflow handling cleanup.
  * Handle OOM error on stack resize in coroutine.resume and lua_checkstack.
  * Restore cur_L for specific Lua/C API use case.
  * Consistently use 64 bit constants for 64 bit IR instructions.
  * ARM64: Fix IR_HREF code generation for constant FP keys.
  * ARM64: Fuse negative 32 bit constants into arithmetic ops again.
  * Handle all stack layouts in (delayed) TRACE vmevent.
  * Add missing coercion when recording select(string, ...)
  * Cleanup stack overflow handling.
  * Windows/ARM64: Add MSVC cross-build support for x64 to ARM64.
  * IR_MIN/IR_MAX is non-commutative due to underlying FPU ops.
  * ARM64: Set fixed interpreter registers before rethrow.
  * Windows/ARM64: Update install docs.
  * Windows: Call C++ destructors without compiling with /EHa.
  * Windows: Pass scratch CONTEXT record to RtlUnwindEx.
  * ARM64: External unwinder already restores non-volatile registers.
  * Windows/ARM64: Fix exception unwinding (again).
  * Windows/ARM64: Fix typo in exception unwinding.
  * FFI: Fix 64 bit shift fold rules.
  * Windows/ARM64: Support Windows calling conventions.
  * Windows/ARM64: Fix exception unwinding.
  * ARM64: Remove unneeded IRCALL_* defs for math intrinsics.
  * Fix Cygwin build.
  * Allow path overrides in genversion.lua with minilua, too.
  * Windows/ARM64: Add initial support.
  * Improve architecture detection error messages.
  * ARM64: Fuse rotates into logical operands.
  * ARM64: Don't fuse sign extensions into logical operands.
  * ARM64: Disassemble rotates on logical operands.
  * ARM: Fix stack check code generation.
  * ARM64: Fix LDP/STP fusion (again).
  * ARM64: Ensure branch is in range before emitting TBZ/TBNZ.
  * Fix mcode limit check for non-x86 archs.
  * ARM64: Improve BC_JLOOP.
  * ARM64: Improve integer IR_MUL code generation.
  * ARM64: Simplify code generation for IR_STRTO.
  * ARM64: Use RID_TMP instead of scratch register in more places.
  * ARM64: Improve IR_OBAR code generation.
  * ARM64: Improve IR_UREF code generation.
  * ARM64: Improve IR_HREF code generation.
  * ARM64: Reload BASE via GL instead of spilling it.
  * ARM64: Consolidate 32/64-bit constant handling in assembler.
  * ARM64: Tune emit_lsptr. Avoid wrong load for asm_prof.
  * ARM64: Inline only use of emit_loada.
  * ARM64: Improve K13 constant rematerialization.
  * Add NaN check to IR_NEWREF.
  * Allow override of paths for genversion.lua.
  * Fix native MinGW build.
- Also refresh luajit-s390x.patch from the rebased pull request.
</comment>
    <requestid>1154166</requestid>
  </revision>
  <revision rev="13" vrev="1">
    <srcmd5>cfcb32777ba37263f1840a6f04f208eb</srcmd5>
    <version>5.1.2.1.0+git.1724512491.f725e44</version>
    <time>1724780315</time>
    <user>anag+factory</user>
    <comment>- Update to version 5.1.2.1.0+git.1724512491.f725e44:
  * Fix limit check in narrow_conv_backprop().
  * Always use IRT_NIL for IR_TBAR.
  * ARM64: Use ldr literal to load FP constants.
  * FFI: Add missing coercion when recording 64-bit bit.*().
  * ARM64: Make tobit conversions match JIT backend behavior.
  * ARM: Make hard-float tobit conversions match JIT backend behavior.
  * FFI: Drop finalizer table rehash after GC cycle.
  * Fix another potential file descriptor leak in luaL_loadfile*().
  * MIPS32: Fix little-endian IR_RETF.
  * Correctly close VM state after early OOM during open.
  * Fix potential file descriptor leak in luaL_loadfile*().
  * Reflect override of INSTALL_LJLIBD in package.path.
  * ARM64: Use movi to materialize FP constants.
  * Add more FOLD rules for integer conversions.
  * Different fix for partial snapshot restore due to stack overflow.
  * Fix IR_ABC hoisting.
  * Limit CSE for IR_CARG to fix loop optimizations.
  * Call math.randomseed() without arguments to seed from system entropy.
  * Restore state when recording __concat metamethod throws an error.
  * Add build flag LUAJIT_DISABLE_TAILCALL to disable tailcall generation.
  * Clarify that lj_buf_shrink() does not keep any buffer data.
  * OSX: Fix installed luajit.pc.
  * FFI: Fix various issues in recff_cdata_arith.
  * Fix predict_next() in parser (for real now).
  * FFI: Fix __tostring metamethod access to enum cdata value.
  * Fix typo.
  * Handle partial snapshot restore due to stack overflow.
  * Update Nintendo Switch build script.
  * Prevent sanitizer warning in snap_restoredata().
  * Typo.
  * Limit number of string format elements to compile.
  * FFI: Clarify scalar boxing behavior.
  * Fix internal link in docs.
  * OSX/iOS: Fix SDK incompatibility.
  * Windows/MSVC: Cleanup msvcbuild.bat and always generate PDB.
  * Fix segment release check in internal memory allocator.
  * Fix compiler warning.
  * FFI: Turn FFI finalizer table into a proper GC root.
  * OSX/iOS: Always generate 64 bit non-FAT Mach-O object files.
  * Show name of NYI bytecode in -jv and -jdump.
  * Use generic trace error for OOM during trace stitching.
  * Fix serialization format docs.
  * Handle all types of errors during trace stitching.
  * Fix recording of __concat metamethod.
  * Prevent down-recursion for side traces.
  * Check frame size limit before returning to a lower frame.
  * FFI: Treat cdata finalizer table as a GC root.
  * Handle stack reallocation in debug.setmetatable() and lua_setmetatable().
- Update patches:
  - luajit-lua-versioned.patch
  - luajit-s390x.patch (update to the latest base code)
</comment>
    <requestid>1196125</requestid>
  </revision>
  <revision rev="14" vrev="1">
    <srcmd5>3fd8b7a806b695e484d009cf4bbcd9c6</srcmd5>
    <version>5.1.2.1.0+git.1727870382.97813fb</version>
    <time>1730993037</time>
    <user>anag+factory</user>
    <comment>- Update to version 5.1.2.1.0+git.1727870382.97813fb:
  * macOS: Remove obsolete -single_module flag.
  * macOS: Workaround for buggy XCode 15.0 - 15.2 linker.
  * macOS: Fix macOS 15 / Clang 16 build.
  * Fix bit op coercion in DUALNUM builds.
  * Fix compiliation of getmetatable() for UDTYPE_IO_FILE.
  * Remove ancient RtlUnwindEx workaround for MinGW64.
  * Drop unused function wrapper.
- Update luajit-s390x.patch from
  gh#openresty/luajit2!195 (following the advice on
  gh#LuaJIT/LuaJIT!631#issuecomment-2459913131).
</comment>
    <requestid>1221954</requestid>
  </revision>
  <revision rev="15" vrev="1">
    <srcmd5>93c89d8cd6627f2b21e8c79288692089</srcmd5>
    <version>5.1.2.1.0+git.1731601260.fe71d0f</version>
    <time>1732198384</time>
    <user>anag+factory</user>
    <comment>- Update to version 5.1.2.1.0+git.1731601260.fe71d0f:
  * Windows: Allow amalgamated static builds with msvcbuild.bat.
  * Always close profiler output file.
  * Fix override of INSTALL_LJLIBD in the presence of DESTDIR.
  * Fix bit op coercion for shifts in DUALNUM builds.
</comment>
    <requestid>1225213</requestid>
  </revision>
  <revision rev="16" vrev="2">
    <srcmd5>b6d390b4fbc0e4dfbea014e7e95e97fc</srcmd5>
    <version>5.1.2.1.0+git.1731601260.fe71d0f</version>
    <time>1733654182</time>
    <user>anag+factory</user>
    <comment></comment>
    <requestid>1228734</requestid>
  </revision>
  <revision rev="17" vrev="3">
    <srcmd5>8354e5a75f9cb2af2b715eb8edc111f6</srcmd5>
    <version>5.1.2.1.0+git.1731601260.fe71d0f</version>
    <time>1741722223</time>
    <user>anag+factory</user>
    <comment></comment>
    <requestid>1251653</requestid>
  </revision>
  <revision rev="18" vrev="1">
    <srcmd5>e567f38bbaa3d17d1658d8c06d906906</srcmd5>
    <version>5.1.2.1.0+git.1741730670.538a821</version>
    <time>1743413831</time>
    <user>anag+factory</user>
    <comment>- Update to version 5.1.2.1.0+git.1741730670.538a821:
  * Change handling of nil value markers in template tables.
  * REVERT: Change handling of nil value markers in template tables.
  * macOS: Fix Apple hardened runtime support and put behind build option.
  * macOS: Fix support for Apple hardened runtime.
  * Fix handling of nil value markers in template tables.
  * Avoid unpatching bytecode twice after a trace flush.
  * Fix state restore when recording __concat metamethod.
  * Windows: Allow mixed builds with msvcbuild.bat.
  * macOS: Add suport for Apple hardened runtime.
  * Add compatibility string coercion for fp:seek() argument.
  * Windows: Clarify installation directory layout.
  * Remove Cygwin from docs, since it's not a supported target.
  * Improve CLI signal handling on POSIX.
  * FFI: Add pre-declared int128_t, uint128_t, __int128 types.
  * Use dylib extension for iOS installs, too.
  * Change handling of nil value markers in template tables.
  * Fix recording of BC_VARG.
  * Reject negative getfenv()/setfenv() levels to prevent compiler warning.
  * Bump copyright date.
  * Force fallback source name for stripped bytecode.
  * Remove dependency on &lt;limits.h&gt;.
  * Restore state when recording __concat metamethod throws OOM.
  * MIPS64: Fix pcall() error case.
  * Fix detection of inconsistent renames due to sunk values.</comment>
    <requestid>1256453</requestid>
  </revision>
</revisionlist>
