---
 python/lalpulsar/pulsarpputils.py |   22 +++++++++++-----------
 1 file changed, 11 insertions(+), 11 deletions(-)

Index: lalpulsar-6.1.0/python/lalpulsar/pulsarpputils.py
===================================================================
--- lalpulsar-6.1.0.orig/python/lalpulsar/pulsarpputils.py
+++ lalpulsar-6.1.0/python/lalpulsar/pulsarpputils.py
@@ -37,7 +37,7 @@ import struct
 import re
 import h5py
 
-from scipy.integrate import cumtrapz
+from scipy.integrate import cumulative_trapezoid
 from scipy.interpolate import interp1d
 
 try:
@@ -899,7 +899,7 @@ def plot_posterior_hist(
 
         # if upper limit is needed then integrate posterior using trapezium rule
         if upperlimit != 0:
-            ct = cumtrapz(n, bins)
+            ct = cumulative_trapezoid(n, bins)
 
             # prepend a zero to ct
             ct = np.insert(ct, 0, 0)
@@ -940,7 +940,7 @@ def upper_limit(
 
     # if upper limit is needed then integrate posterior using trapezium rule
     if upperlimit != 0:
-        ct = cumtrapz(n, bins)
+        ct = cumulative_trapezoid(n, bins)
 
         # prepend a zero to ct
         ct = np.insert(ct, 0, 0)
@@ -1232,18 +1232,18 @@ def plot_2Dhist_from_file(
         # marginalise over y-axes and produce plots
         xmarg = []
         for i in range(len(xbins)):
-            xmarg.append(np.trapz(histarr[:][i], x=ybins))
+            xmarg.append(np.trapezoid(histarr[:][i], x=ybins))
 
         # normalise
-        xarea = np.trapz(xmarg, x=xbins)
+        xarea = np.trapezoid(xmarg, x=xbins)
         xmarg = map(lambda x: x / xarea, xmarg)
 
         ymarg = []
         for i in range(len(ybins)):
-            ymarg.append(np.trapz(np.transpose(histarr)[:][i], x=xbins))
+            ymarg.append(np.trapezoid(np.transpose(histarr)[:][i], x=xbins))
 
         # normalise
-        yarea = np.trapz(ymarg, x=ybins)
+        yarea = np.trapezoid(ymarg, x=ybins)
         ymarg = map(lambda x: x / yarea, ymarg)
 
         # plot x histogram
@@ -1287,15 +1287,15 @@ def h0ul_from_prior_file(priorfile, ulva
     # marginalise over cos(iota)
     h0marg = []
     for i in range(len(h0bins)):
-        h0marg.append(np.trapz(histarr[:][i], x=cibins))
+        h0marg.append(np.trapezoid(histarr[:][i], x=cibins))
 
     # normalise h0 posterior
     h0bins = h0bins - (h0bins[1] - h0bins[0]) / 2
-    h0area = np.trapz(h0marg, x=h0bins)
+    h0area = np.trapezoid(h0marg, x=h0bins)
     h0margnorm = map(lambda x: x / h0area, h0marg)
 
     # get cumulative probability
-    ct = cumtrapz(h0margnorm, h0bins)
+    ct = cumulative_trapezoid(h0margnorm, h0bins)
 
     # prepend a zero to ct
     ct = np.insert(ct, 0, 0)
@@ -1516,7 +1516,7 @@ def hist_norm_bounds(samples, nbins, low
         n = np.append(n, nbound)
 
     # now calculate area and normalise
-    area = np.trapz(n, x=bincentres)
+    area = np.trapezoid(n, x=bincentres)
 
     ns = np.array([])
     for i in range(0, len(bincentres)):
