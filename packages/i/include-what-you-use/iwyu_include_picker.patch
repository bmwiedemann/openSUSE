diff --git a/iwyu_include_picker.cc b/iwyu_include_picker.cc
index fdb7364..1aa49f5 100644
--- a/iwyu_include_picker.cc
+++ b/iwyu_include_picker.cc
@@ -82,14 +82,14 @@ struct IncludeMapEntry {      // A POD so we can make the input static
 namespace {
 
 // Listed below are all IWYU's native symbol and include mappings,
-// loosely based on GCC 4.4's libc and libstdc++.
+// loosely based on GCC 14's libc and libstdc++.
 
 // Symbol -> include mappings for GNU libc
 const IncludeMapEntry libc_symbol_map[] = {
   // For library symbols that can be defined in more than one header
   // file, maps from symbol-name to legitimate header files.
   // This list was generated via
-  // grep -R '__.*_defined' /usr/include | perl -nle 'm,/usr/include/([^:]*):#\s*\S+ __(.*)_defined, and print qq@    { "$2", kPublic, "<$1>", kPublic },@' | sort -u
+  // grep -R '__.*_defined' /usr/include | perl -nle 'm,/usr/include/([^:]*):#\s*\S+ __(.*)_defined, and print qq@  { "$2", kPrivate, "<$1>", kPublic },@' | sort -u
   // I ignored all entries that only appeared once on the list (eg uint32_t).
   // I then added in NULL, which according to [diff.null] C.2.2.3, can
   // be defined in <clocale>, <cstddef>, <cstdio>, <cstdlib>,
@@ -339,6 +339,23 @@ const IncludeMapEntry stdlib_cxx_symbol_map[] = {
   { "std::size_t", kPrivate, "<ctime>", kPublic },
   { "std::size_t", kPrivate, "<cuchar>", kPublic },
   { "std::size_t", kPrivate, "<cwchar>", kPublic },
+
+  { "std::pair", kPrivate, "<map>", kPublic },
+  { "std::pair", kPrivate, "<multimap>", kPublic },
+  { "std::pair", kPrivate, "<utility>", kPublic },
+
+  { "std::istringstream", kPrivate, "<sstream>", kPublic },
+  { "std::ostringstream", kPrivate, "<sstream>", kPublic },
+  { "std::stringstream", kPrivate, "<sstream>", kPublic },
+  { "std::wistringstream", kPrivate, "<sstream>", kPublic },
+  { "std::wostringstream", kPrivate, "<sstream>", kPublic },
+  { "std::wstringstream", kPrivate, "<sstream>", kPublic },
+  { "std::ifstream", kPrivate, "<fstream>", kPublic },
+  { "std::ofstream", kPrivate, "<fstream>", kPublic },
+  { "std::fstream", kPrivate, "<fstream>", kPublic },
+  { "std::wifstream", kPrivate, "<fstream>", kPublic },
+  { "std::wofstream", kPrivate, "<fstream>", kPublic },
+  { "std::wfstream", kPrivate, "<fstream>", kPublic },
 };
 
 // Symbol -> include mappings for GNU libstdc++
@@ -349,51 +366,63 @@ const IncludeMapEntry libstdcpp_symbol_map[] = {
 
 const IncludeMapEntry libc_include_map[] = {
   // Private -> public include mappings for GNU libc
-  // ( cd /usr/include && grep '^ *# *include' {sys/,net/,}* | perl -nle 'm/^([^:]+).*<([^>]+)>/ && print qq@    { "<$2>", kPrivate, "<$1>", kPublic },@' | grep bits/ | sort )
+  // ( cd /usr/include && grep '^ *# *include' {sys/,net/,}* | perl -nle 'm/^([^:]+).*<([^>]+)>/ && print qq@  { "<$2>", kPrivate, "<$1>", kPublic },@' | grep bits/ | sort )
   // When I saw more than one mapping for these, I typically picked
   // what I thought was the "best" one.
   { "<bits/a.out.h>", kPrivate, "<a.out.h>", kPublic },
-  { "<bits/auxv.h>", kPrivate, "<sys/auxv.h>", kPublic },
+  { "<bits/argp-ldbl.h>", kPrivate, "<argp.h>", kPublic },
   { "<bits/byteswap.h>", kPrivate, "<byteswap.h>", kPublic },
+  { "<bits/byteswap.h>", kPrivate, "<endian.h>", kPublic },
   { "<bits/cmathcalls.h>", kPrivate, "<complex.h>", kPublic },
   { "<bits/confname.h>", kPrivate, "<unistd.h>", kPublic },
+  { "<bits/cpu-set.h>", kPrivate, "<sched.h>", kPublic },
   { "<bits/dirent.h>", kPrivate, "<dirent.h>", kPublic },
+  { "<bits/dirent_ext.h>", kPrivate, "<dirent.h>", kPublic },
+  { "<bits/dl_find_object.h>", kPrivate, "<dlfcn.h>", kPublic },
   { "<bits/dlfcn.h>", kPrivate, "<dlfcn.h>", kPublic },
   { "<bits/elfclass.h>", kPrivate, "<link.h>", kPublic },
   { "<bits/endian.h>", kPrivate, "<endian.h>", kPublic },
   { "<bits/environments.h>", kPrivate, "<unistd.h>", kPublic },
   { "<bits/epoll.h>", kPrivate, "<sys/epoll.h>", kPublic },
+  { "<bits/err-ldbl.h>", kPrivate, "<err.h>", kPublic },
   { "<bits/errno.h>", kPrivate, "<errno.h>", kPublic },
+  { "<bits/error-ldbl.h>", kPrivate, "<error.h>", kPublic },
   { "<bits/error.h>", kPrivate, "<error.h>", kPublic },
   { "<bits/eventfd.h>", kPrivate, "<sys/eventfd.h>", kPublic },
   { "<bits/fcntl.h>", kPrivate, "<fcntl.h>", kPublic },
   { "<bits/fcntl2.h>", kPrivate, "<fcntl.h>", kPublic },
   { "<bits/fenv.h>", kPrivate, "<fenv.h>", kPublic },
-  { "<bits/fenvinline.h>", kPrivate, "<fenv.h>", kPublic },
-  { "<bits/huge_val.h>", kPrivate, "<math.h>", kPublic },
-  { "<bits/huge_valf.h>", kPrivate, "<math.h>", kPublic },
-  { "<bits/huge_vall.h>", kPrivate, "<math.h>", kPublic },
+  { "<bits/floatn.h>", kPrivate, "<math.h>", kPublic },
+  { "<bits/flt-eval-method.h>", kPrivate, "<math.h>", kPublic },
+  { "<bits/fp-fast.h>", kPrivate, "<math.h>", kPublic },
+  { "<bits/fp-logb.h>", kPrivate, "<math.h>", kPublic },
+  { "<bits/getopt_core.h>", kPrivate, "<getopt.h>", kPublic },
+  { "<bits/getopt_ext.h>", kPrivate, "<getopt.h>", kPublic },
+  { "<bits/getopt_posix.h>", kPrivate, "<stdio.h>", kPublic },
+  { "<bits/getopt_posix.h>", kPrivate, "<unistd.h>", kPublic },
   { "<bits/hwcap.h>", kPrivate, "<sys/auxv.h>", kPublic },
-  { "<bits/inf.h>", kPrivate, "<math.h>", kPublic },
+  { "<bits/indirect-return.h>", kPrivate, "<ucontext.h>", kPublic },
   { "<bits/inotify.h>", kPrivate, "<sys/inotify.h>", kPublic },
   { "<bits/ioctl-types.h>", kPrivate, "<sys/ioctl.h>", kPublic },
   { "<bits/ioctls.h>", kPrivate, "<sys/ioctl.h>", kPublic },
   { "<bits/ipc.h>", kPrivate, "<sys/ipc.h>", kPublic },
   { "<bits/ipctypes.h>", kPrivate, "<sys/ipc.h>", kPublic },
-  { "<bits/libio-ldbl.h>", kPrivate, "<libio.h>", kPublic },
+  { "<bits/iscanonical.h>", kPrivate, "<math.h>", kPublic },
   { "<bits/link.h>", kPrivate, "<link.h>", kPublic },
+  { "<bits/link_lavcurrent.h>", kPrivate, "<link.h>", kPublic },
   { "<bits/locale.h>", kPrivate, "<locale.h>", kPublic },
-  { "<bits/math-finite.h>", kPrivate, "<math.h>", kPublic },
+  { "<bits/long-double.h>", kPrivate, "<sys/cdefs.h>", kPublic },
+  { "<bits/math-vector.h>", kPrivate, "<math.h>", kPublic },
+  { "<bits/mathcalls-helper-functions.h>", kPrivate, "<math.h>", kPublic },
+  { "<bits/mathcalls-narrow.h>", kPrivate, "<math.h>", kPublic },
   { "<bits/mathcalls.h>", kPrivate, "<math.h>", kPublic },
-  { "<bits/mathdef.h>", kPrivate, "<math.h>", kPublic },
-  { "<bits/mathinline.h>", kPrivate, "<math.h>", kPublic },
+  { "<bits/mathdef.h>", kPrivate, "<complex.h>", kPublic },
   { "<bits/mman.h>", kPrivate, "<sys/mman.h>", kPublic },
-  { "<bits/mman-shared.h>", kPrivate, "<sys/mman.h>", kPublic },
+  { "<bits/mman_ext.h>", kPrivate, "<sys/mman.h>", kPublic },
   { "<bits/monetary-ldbl.h>", kPrivate, "<monetary.h>", kPublic },
   { "<bits/mqueue.h>", kPrivate, "<mqueue.h>", kPublic },
   { "<bits/mqueue2.h>", kPrivate, "<mqueue.h>", kPublic },
   { "<bits/msq.h>", kPrivate, "<sys/msg.h>", kPublic },
-  { "<bits/nan.h>", kPrivate, "<math.h>", kPublic },
   { "<bits/netdb.h>", kPrivate, "<netdb.h>", kPublic },
   { "<bits/param.h>", kPrivate, "<sys/param.h>", kPublic },
   { "<bits/poll.h>", kPrivate, "<sys/poll.h>", kPrivate },
@@ -402,8 +431,15 @@ const IncludeMapEntry libc_include_map[] = {
   { "<bits/posix2_lim.h>", kPrivate, "<limits.h>", kPublic },
   { "<bits/posix_opt.h>", kPrivate, "<unistd.h>", kPublic },
   { "<bits/printf-ldbl.h>", kPrivate, "<printf.h>", kPublic },
+  { "<bits/procfs-extra.h>", kPrivate, "<sys/procfs.h>", kPublic },
+  { "<bits/procfs-id.h>", kPrivate, "<sys/procfs.h>", kPublic },
+  { "<bits/procfs-prregset.h>", kPrivate, "<sys/procfs.h>", kPublic },
+  { "<bits/procfs.h>", kPrivate, "<sys/procfs.h>", kPublic },
+  { "<bits/pthread_stack_min-dynamic.h>", kPrivate, "<pthread.h>", kPublic },
   { "<bits/pthreadtypes.h>", kPrivate, "<pthread.h>", kPublic },
+  { "<bits/ptrace-shared.h>", kPrivate, "<sys/ptrace.h>", kPublic },
   { "<bits/resource.h>", kPrivate, "<sys/resource.h>", kPublic },
+  { "<bits/rseq.h>", kPrivate, "<sys/rseq.h>", kPublic },
   { "<bits/sched.h>", kPrivate, "<sched.h>", kPublic },
   { "<bits/select.h>", kPrivate, "<sys/select.h>", kPublic },
   { "<bits/select2.h>", kPrivate, "<sys/select.h>", kPublic },
@@ -414,42 +450,44 @@ const IncludeMapEntry libc_include_map[] = {
   { "<bits/shm.h>", kPrivate, "<sys/shm.h>", kPublic },
   { "<bits/sigaction.h>", kPrivate, "<signal.h>", kPublic },
   { "<bits/sigcontext.h>", kPrivate, "<signal.h>", kPublic },
-  { "<bits/siginfo.h>", kPrivate, "<signal.h>", kPublic },
-  { "<bits/signum.h>", kPrivate, "<signal.h>", kPublic },
+  { "<bits/sigevent-consts.h>", kPrivate, "<signal.h>", kPublic },
+  { "<bits/siginfo-consts.h>", kPrivate, "<signal.h>", kPublic },
+  { "<bits/signal_ext.h>", kPrivate, "<signal.h>", kPublic },
+  { "<bits/signalfd.h>", kPrivate, "<sys/signalfd.h>", kPublic },
   { "<bits/signum-arch.h>", kPrivate, "<signal.h>", kPublic },
-  { "<bits/sigset.h>", kPrivate, "<signal.h>", kPublic },
+  { "<bits/signum-generic.h>", kPrivate, "<signal.h>", kPublic },
   { "<bits/sigstack.h>", kPrivate, "<signal.h>", kPublic },
+  { "<bits/sigstksz.h>", kPrivate, "<signal.h>", kPublic },
   { "<bits/sigthread.h>", kPrivate, "<signal.h>", kPublic },
   { "<bits/sockaddr.h>", kPrivate, "<sys/un.h>", kPublic },
   { "<bits/socket.h>", kPrivate, "<sys/socket.h>", kPublic },
   { "<bits/socket2.h>", kPrivate, "<sys/socket.h>", kPublic },
-  { "<bits/socket_type.h>", kPrivate, "<sys/socket.h>", kPublic },
+  { "<bits/ss_flags.h>", kPrivate, "<signal.h>", kPublic },
   { "<bits/stab.def>", kPrivate, "<stab.h>", kPublic },
   { "<bits/stat.h>", kPrivate, "<sys/stat.h>", kPublic },
   { "<bits/statfs.h>", kPrivate, "<sys/statfs.h>", kPublic },
   { "<bits/statvfs.h>", kPrivate, "<sys/statvfs.h>", kPublic },
   { "<bits/statx-generic.h>", kPrivate, "<sys/stat.h>", kPublic },
+  { "<bits/statx.h>", kPrivate, "<sys/stat.h>", kPublic },
+  { "<bits/stdint-intn.h>", kPrivate, "<stdint.h>", kPublic },
+  { "<bits/stdint-uintn.h>", kPrivate, "<stdint.h>", kPublic },
   { "<bits/stdio-ldbl.h>", kPrivate, "<stdio.h>", kPublic },
-  { "<bits/stdio-lock.h>", kPrivate, "<libio.h>", kPublic },
   { "<bits/stdio.h>", kPrivate, "<stdio.h>", kPublic },
+  { "<bits/stdio2-decl.h>", kPrivate, "<stdio.h>", kPublic },
   { "<bits/stdio2.h>", kPrivate, "<stdio.h>", kPublic },
   { "<bits/stdio_lim.h>", kPrivate, "<stdio.h>", kPublic },
   { "<bits/stdlib-bsearch.h>", kPrivate, "<stdlib.h>", kPublic },
   { "<bits/stdlib-float.h>", kPrivate, "<stdlib.h>", kPublic },
   { "<bits/stdlib-ldbl.h>", kPrivate, "<stdlib.h>", kPublic },
   { "<bits/stdlib.h>", kPrivate, "<stdlib.h>", kPublic },
-  { "<bits/string.h>", kPrivate, "<string.h>", kPublic },
-  { "<bits/string2.h>", kPrivate, "<string.h>", kPublic },
-  { "<bits/string3.h>", kPrivate, "<string.h>", kPublic },
-  { "<bits/stropts.h>", kPrivate, "<stropts.h>", kPublic },
-  { "<bits/struct_stat.h>", kPrivate, "<sys/stat.h>", kPublic },
-  { "<bits/struct_stat.h>", kPrivate, "<ftw.h>", kPublic },
-  { "<bits/sys_errlist.h>", kPrivate, "<stdio.h>", kPublic },
+  { "<bits/string_fortified.h>", kPrivate, "<string.h>", kPublic },
+  { "<bits/strings_fortified.h>", kPrivate, "<strings.h>", kPublic },
   { "<bits/syscall.h>", kPrivate, "<sys/syscall.h>", kPublic },
-  { "<bits/sysctl.h>", kPrivate, "<sys/sysctl.h>", kPublic },
   { "<bits/syslog-ldbl.h>", kPrivate, "<sys/syslog.h>", kPrivate },
   { "<bits/syslog-path.h>", kPrivate, "<sys/syslog.h>", kPrivate },
   { "<bits/syslog.h>", kPrivate, "<sys/syslog.h>", kPrivate },
+  { "<bits/syslog.h>", kPrivate, "<sys/syslog.h>", kPrivate },
+  { "<bits/sysmacros.h>", kPrivate, "<sys/sysmacros.h>", kPublic },
   { "<bits/termios-c_cc.h>", kPrivate, "<termios.h>", kPublic },
   { "<bits/termios-c_cflag.h>", kPrivate, "<termios.h>", kPublic },
   { "<bits/termios-c_iflag.h>", kPrivate, "<termios.h>", kPublic },
@@ -459,16 +497,52 @@ const IncludeMapEntry libc_include_map[] = {
   { "<bits/termios-struct.h>", kPrivate, "<termios.h>", kPublic },
   { "<bits/termios-tcflow.h>", kPrivate, "<termios.h>", kPublic },
   { "<bits/termios.h>", kPrivate, "<termios.h>", kPublic },
+  { "<bits/thread-shared-types.h>", kPrivate, "<threads.h>", kPublic },
   { "<bits/time.h>", kPrivate, "<time.h>", kPublic },
-  { "<bits/time.h>", kPrivate, "<sys/time.h>", kPublic },
   { "<bits/timerfd.h>", kPrivate, "<sys/timerfd.h>", kPublic },
+  { "<bits/timesize.h>", kPrivate, "<features-time64.h>", kPublic },
   { "<bits/timex.h>", kPrivate, "<sys/timex.h>", kPublic },
   { "<bits/types.h>", kPrivate, "<sys/types.h>", kPublic },
+  { "<bits/types/FILE.h>", kPrivate, "<stdio.h>", kPublic },
+  { "<bits/types/__FILE.h>", kPrivate, "<stdio.h>", kPublic },
+  { "<bits/types/__fpos64_t.h>", kPrivate, "<stdio.h>", kPublic },
+  { "<bits/types/__fpos_t.h>", kPrivate, "<stdio.h>", kPublic },
+  { "<bits/types/__mbstate_t.h>", kPrivate, "<gconv.h>", kPublic },
+  { "<bits/types/__sigset_t.h>", kPrivate, "<sys/poll.h>", kPrivate },
+  { "<bits/types/clock_t.h>", kPrivate, "<time.h>", kPublic },
+  { "<bits/types/clockid_t.h>", kPrivate, "<sys/types.h>", kPublic },
+  { "<bits/types/cookie_io_functions_t.h>", kPrivate, "<stdio.h>", kPublic },
+  { "<bits/types/error_t.h>", kPrivate, "<errno.h>", kPublic },
+  { "<bits/types/locale_t.h>", kPrivate, "<locale.h>", kPublic },
+  { "<bits/types/mbstate_t.h>", kPrivate, "<uchar.h>", kPublic },
+  { "<bits/types/res_state.h>", kPrivate, "<resolv.h>", kPublic },
+  { "<bits/types/sig_atomic_t.h>", kPrivate, "<signal.h>", kPublic },
+  { "<bits/types/sigevent_t.h>", kPrivate, "<signal.h>", kPublic },
   { "<bits/types/siginfo_t.h>", kPrivate, "<signal.h>", kPublic },
-  { "<bits/types/siginfo_t.h>", kPrivate, "<sys/wait.h>", kPublic },
-  { "<bits/uio.h>", kPrivate, "<sys/uio.h>", kPublic },
+  { "<bits/types/sigset_t.h>", kPrivate, "<signal.h>", kPublic },
+  { "<bits/types/sigval_t.h>", kPrivate, "<signal.h>", kPublic },
+  { "<bits/types/stack_t.h>", kPrivate, "<signal.h>", kPublic },
+  { "<bits/types/struct_FILE.h>", kPrivate, "<stdio.h>", kPublic },
+  { "<bits/types/struct___jmp_buf_tag.h>", kPrivate, "<setjmp.h>", kPublic },
+  { "<bits/types/struct_iovec.h>", kPrivate, "<sys/socket.h>", kPublic },
+  { "<bits/types/struct_iovec.h>", kPrivate, "<sys/uio.h>", kPublic },
+  { "<bits/types/struct_itimerspec.h>", kPrivate, "<sys/timerfd.h>", kPublic },
+  { "<bits/types/struct_osockaddr.h>", kPrivate, "<sys/socket.h>", kPublic },
+  { "<bits/types/struct_rusage.h>", kPrivate, "<sys/wait.h>", kPublic },
+  { "<bits/types/struct_sigstack.h>", kPrivate, "<signal.h>", kPublic },
+  { "<bits/types/struct_timeb.h>", kPrivate, "<sys/timeb.h>", kPublic },
+  { "<bits/types/struct_timespec.h>", kPrivate, "<time.h>", kPublic },
+  { "<bits/types/struct_timeval.h>", kPrivate, "<sys/time.h>", kPublic },
+  { "<bits/types/struct_tm.h>", kPrivate, "<time.h>", kPublic },
+  { "<bits/types/timer_t.h>", kPrivate, "<sys/types.h>", kPublic },
+  { "<bits/types/wint_t.h>", kPrivate, "<gconv.h>", kPublic },
+  { "<bits/types/wint_t.h>", kPrivate, "<wchar.h>", kPublic },
+  { "<bits/types/wint_t.h>", kPrivate, "<wctype.h>", kPublic },
+  { "<bits/uintn-identity.h>", kPrivate, "<endian.h>", kPublic },
+  { "<bits/uio-ext.h>", kPrivate, "<sys/uio.h>", kPublic },
+  { "<bits/uio_lim.h>", kPrivate, "<sys/uio.h>", kPublic },
   { "<bits/unistd.h>", kPrivate, "<unistd.h>", kPublic },
-  { "<bits/ustat.h>", kPrivate, "<sys/ustat.h>", kPrivate },
+  { "<bits/unistd_ext.h>", kPrivate, "<unistd.h>", kPublic },
   { "<bits/utmp.h>", kPrivate, "<utmp.h>", kPublic },
   { "<bits/utmpx.h>", kPrivate, "<utmpx.h>", kPublic },
   { "<bits/utsname.h>", kPrivate, "<sys/utsname.h>", kPublic },
@@ -477,61 +551,155 @@ const IncludeMapEntry libc_include_map[] = {
   { "<bits/wchar-ldbl.h>", kPrivate, "<wchar.h>", kPublic },
   { "<bits/wchar.h>", kPrivate, "<wchar.h>", kPublic },
   { "<bits/wchar2.h>", kPrivate, "<wchar.h>", kPublic },
+  { "<bits/wctype-wchar.h>", kPrivate, "<wchar.h>", kPublic },
+  { "<bits/wctype-wchar.h>", kPrivate, "<wctype.h>", kPublic },
   { "<bits/wordsize.h>", kPrivate, "<limits.h>", kPublic },
   { "<bits/xopen_lim.h>", kPrivate, "<limits.h>", kPublic },
-  { "<bits/xtitypes.h>", kPrivate, "<stropts.h>", kPublic },
   // Sometimes libc tells you what mapping to do via an '#error':
   // # error "Never use <bits/dlfcn.h> directly; include <dlfcn.h> instead."
   // or
   // # error "Never include <bits/socket_type.h> directly; use <sys/socket.h> instead."
-  // ( cd /usr/include && grep -R '^ *# *error "Never use\|include' * | perl -nle 'm/<([^>]+).*directly.*<([^>]+)/ && print qq@    { "<$1>", kPrivate, "<$2>", kPublic },@' | sort )
+  // ( cd /usr/include && grep -R '^ *# *error "Never use\|include' * | perl -nle 'm/<([^>]+).*directly.*<([^>]+)/ && print qq@  { "<$1>", kPrivate, "<$2>", kPublic },@' | sort )
   { "<bits/a.out.h>", kPrivate, "<a.out.h>", kPublic },
-  { "<bits/byteswap-16.h>", kPrivate, "<byteswap.h>", kPublic },
+  { "<bits/argp-ldbl.h>", kPrivate, "<argp.h>", kPublic },
   { "<bits/byteswap.h>", kPrivate, "<byteswap.h>", kPublic },
   { "<bits/cmathcalls.h>", kPrivate, "<complex.h>", kPublic },
   { "<bits/confname.h>", kPrivate, "<unistd.h>", kPublic },
+  { "<bits/cpu-set.h>", kPrivate, "<sched.h>", kPublic },
+  { "<bits/dirent_ext.h>", kPrivate, "<dirent.h>", kPublic },
   { "<bits/dirent.h>", kPrivate, "<dirent.h>", kPublic },
   { "<bits/dlfcn.h>", kPrivate, "<dlfcn.h>", kPublic },
+  { "<bits/dl_find_object.h>", kPrivate, "<dlfcn.h>", kPublic },
   { "<bits/elfclass.h>", kPrivate, "<link.h>", kPublic },
-  { "<bits/endian.h>", kPrivate, "<endian.h>", kPublic },
+  { "<bits/endianness.h>", kPrivate, "<endian.h>", kPublic },
   { "<bits/epoll.h>", kPrivate, "<sys/epoll.h>", kPublic },
+  { "<bits/err-ldbl.h>", kPrivate, "<err.h>", kPublic },
+  { "<bits/errno.h>", kPrivate, "<errno.h>", kPublic },
+  { "<bits/error.h>", kPrivate, "<error.h>", kPublic },
+  { "<bits/error-ldbl.h>", kPrivate, "<error.h>", kPublic },
   { "<bits/eventfd.h>", kPrivate, "<sys/eventfd.h>", kPublic },
   { "<bits/fcntl-linux.h>", kPrivate, "<fcntl.h>", kPublic },
+  { "<bits/fcntl2.h>", kPrivate, "<fcntl.h>", kPublic },
   { "<bits/fcntl.h>", kPrivate, "<fcntl.h>", kPublic },
   { "<bits/fenv.h>", kPrivate, "<fenv.h>", kPublic },
-  { "<bits/huge_val.h>", kPrivate, "<math.h>", kPublic },
-  { "<bits/huge_valf.h>", kPrivate, "<math.h>", kPublic },
-  { "<bits/huge_vall.h>", kPrivate, "<math.h>", kPublic },
+  { "<bits/flt-eval-method.h>", kPrivate, "<math.h>", kPublic },
+  { "<bits/fp-fast.h>", kPrivate, "<math.h>", kPublic },
+  { "<bits/fp-logb.h>", kPrivate, "<math.h>", kPublic },
+  { "<bits/hwcap.h>", kPrivate, "<sys/auxv.h>", kPublic },
+  { "<bits/indirect-return.h>", kPrivate, "<ucontext.h>", kPublic },
   { "<bits/in.h>", kPrivate, "<netinet/in.h>", kPublic },
-  { "<bits/inf.h>", kPrivate, "<math.h>", kPublic },
   { "<bits/inotify.h>", kPrivate, "<sys/inotify.h>", kPublic },
   { "<bits/ioctl-types.h>", kPrivate, "<sys/ioctl.h>", kPublic },
   { "<bits/ioctls.h>", kPrivate, "<sys/ioctl.h>", kPublic },
   { "<bits/ipc.h>", kPrivate, "<sys/ipc.h>", kPublic },
+  { "<bits/ipc-perm.h>", kPrivate, "<sys/ipc.h>", kPublic },
   { "<bits/ipctypes.h>", kPrivate, "<sys/ipc.h>", kPublic },
+  { "<bits/iscanonical.h>", kPrivate, "<math.h>", kPublic },
+  { "<bits/link.h>", kPrivate, "<link.h>", kPublic },
+  { "<bits/link_lavcurrent.h>", kPrivate, "<link.h>", kPublic },
   { "<bits/locale.h>", kPrivate, "<locale.h>", kPublic },
-  { "<bits/math-finite.h>", kPrivate, "<math.h>", kPublic },
-  { "<bits/mathdef.h>", kPrivate, "<math.h>", kPublic },
-  { "<bits/mathinline.h>", kPrivate, "<math.h>", kPublic },
+  { "<bits/mathcalls.h>", kPrivate, "<math.h>", kPublic },
+  { "<bits/mathcalls-narrow.h>", kPrivate, "<math.h>", kPublic },
+  { "<bits/mathdef.h>", kPrivate, "<complex.h>", kPublic },
+  { "<bits/mman_ext.h>", kPrivate, "<sys/mman.h>", kPublic },
   { "<bits/mman-linux.h>", kPrivate, "<sys/mman.h>", kPublic },
   { "<bits/mman.h>", kPrivate, "<sys/mman.h>", kPublic },
+  { "<bits/mman-map-flags-generic.h>", kPrivate, "<sys/mman.h>", kPublic },
+  { "<bits/mman-shared.h>", kPrivate, "<sys/mman.h>", kPublic },
+  { "<bits/monetary-ldbl.h>", kPrivate, "<monetary.h>", kPublic },
+  { "<bits/mqueue2.h>", kPrivate, "<mqueue.h>", kPublic },
   { "<bits/mqueue.h>", kPrivate, "<mqueue.h>", kPublic },
   { "<bits/msq.h>", kPrivate, "<sys/msg.h>", kPublic },
-  { "<bits/nan.h>", kPrivate, "<math.h>", kPublic },
+  { "<bits/msq.h>", kPrivate, "<sys/msg.h>", kPublic },
+  { "<bits/msq.h>", kPrivate, "<sys/msg.h>", kPublic },
+  { "<bits/netdb.h>", kPrivate, "<netdb.h>", kPublic },
   { "<bits/param.h>", kPrivate, "<sys/param.h>", kPublic },
+  { "<bits/platform/x86.h>", kPrivate, "<sys/platform/x86.h>", kPublic },
   { "<bits/poll.h>", kPrivate, "<sys/poll.h>", kPrivate },
-  { "<bits/predefs.h>", kPrivate, "<features.h>", kPublic },
+  { "<bits/poll2.h>", kPrivate, "<sys/poll.h>", kPrivate },
+  { "<bits/printf-ldbl.h>", kPrivate, "<printf.h>", kPublic },
+  { "<bits/procfs-extra.h>", kPrivate, "<sys/procfs.h>", kPublic },
+  { "<bits/procfs.h>", kPrivate, "<sys/procfs.h>", kPublic },
+  { "<bits/procfs-id.h>", kPrivate, "<sys/procfs.h>", kPublic },
+  { "<bits/procfs-prregset.h>", kPrivate, "<sys/procfs.h>", kPublic },
+  { "<bits/ptrace-shared.h>", kPrivate, "<sys/ptrace.h>", kPublic },
   { "<bits/resource.h>", kPrivate, "<sys/resource.h>", kPublic },
+  { "<bits/rseq.h>", kPrivate, "<sys/rseq.h>", kPublic },
+  { "<bits/sched.h>", kPrivate, "<sched.h>", kPublic },
+  { "<bits/select2.h>", kPrivate, "<sys/select.h>", kPublic },
   { "<bits/select.h>", kPrivate, "<sys/select.h>", kPublic },
   { "<bits/semaphore.h>", kPrivate, "<semaphore.h>", kPublic },
+  { "<bits/sem.h>", kPrivate, "<sys/sem.h>", kPublic },
+  { "<bits/setjmp2.h>", kPrivate, "<setjmp.h>", kPublic },
+  { "<bits/setjmp.h>", kPrivate, "<setjmp.h>", kPublic },
+  { "<bits/shm.h>", kPrivate, "<sys/shm.h>", kPublic },
+  { "<bits/shmlba.h>", kPrivate, "<sys/shm.h>", kPublic },
+  { "<bits/sigaction.h>", kPrivate, "<signal.h>", kPublic },
   { "<bits/sigcontext.h>", kPrivate, "<signal.h>", kPublic },
+  { "<bits/sigevent-consts.h>", kPrivate, "<signal.h>", kPublic },
+  { "<bits/siginfo-consts.h>", kPrivate, "<signal.h>", kPublic },
+  { "<bits/signal_ext.h>", kPrivate, "<signal.h>", kPublic },
   { "<bits/signalfd.h>", kPrivate, "<sys/signalfd.h>", kPublic },
+  { "<bits/signum-arch.h>", kPrivate, "<signal.h>", kPublic },
+  { "<bits/signum-generic.h>", kPrivate, "<signal.h>", kPublic },
+  { "<bits/sigstksz.h>", kPrivate, "<signal.h>", kPublic },
+  { "<bits/socket2.h>", kPrivate, "<sys/socket.h>", kPublic },
+  { "<bits/socket-constants.h>", kPrivate, "<sys/socket.h>", kPublic },
+  { "<bits/socket.h>", kPrivate, "<sys/socket.h>", kPublic },
+  { "<bits/socket_type.h>", kPrivate, "<sys/socket.h>", kPublic },
+  { "<bits/statfs.h>", kPrivate, "<sys/statfs.h>", kPublic },
+  { "<bits/stat.h>", kPrivate, "<sys/stat.h>", kPublic },
+  { "<bits/statvfs.h>", kPrivate, "<sys/statvfs.h>", kPublic },
+  { "<bits/statx-generic.h>", kPrivate, "<sys/stat.h>", kPublic },
+  { "<bits/statx.h>", kPrivate, "<sys/stat.h>", kPublic },
+  { "<bits/stdio2-decl.h>", kPrivate, "<stdio.h>", kPublic },
+  { "<bits/stdio2.h>", kPrivate, "<stdio.h>", kPublic },
+  { "<bits/stdio.h>", kPrivate, "<stdio.h>", kPublic },
+  { "<bits/stdio-ldbl.h>", kPrivate, "<stdio.h>", kPublic },
+  { "<bits/stdio_lim.h>", kPrivate, "<stdio.h>", kPublic },
   { "<bits/stdlib-float.h>", kPrivate, "<stdlib.h>", kPublic },
-  { "<bits/string.h>", kPrivate, "<string.h>", kPublic },
-  { "<bits/string2.h>", kPrivate, "<string.h>", kPublic },
-  { "<bits/string3.h>", kPrivate, "<string.h>", kPublic },
+  { "<bits/stdlib.h>", kPrivate, "<stdlib.h>", kPublic },
+  { "<bits/stdlib-ldbl.h>", kPrivate, "<stdlib.h>", kPublic },
+  { "<bits/string_fortified.h>", kPrivate, "<string.h>", kPublic },
+  { "<bits/struct_stat.h>", kPrivate, "<sys/stat.h>", kPublic },
+  { "<bits/syscall.h>", kPrivate, "<sys/syscall.h>", kPublic },
+  { "<bits/syslog.h>", kPrivate, "<sys/syslog.h>", kPrivate },
+  { "<bits/syslog-ldbl.h>", kPrivate, "<sys/syslog.h>", kPrivate },
+  { "<bits/sysmacros.h>", kPrivate, "<sys/sysmacros.h>", kPublic },
+  { "<bits/termios-baud.h>", kPrivate, "<termios.h>", kPublic },
+  { "<bits/termios_c_cc.h>", kPrivate, "<termios.h>", kPublic },
+  { "<bits/termios-c_cflag.h>", kPrivate, "<termios.h>", kPublic },
+  { "<bits/termios-ciflags.h>", kPrivate, "<termios.h>", kPublic },
+  { "<bits/termios-c_lflag.h>", kPrivate, "<termios.h>", kPublic },
+  { "<bits/termios-c_oflag.h>", kPrivate, "<termios.h>", kPublic },
+  { "<bits/termios.h>", kPrivate, "<termios.h>", kPublic },
+  { "<bits/termios-misc.h>", kPrivate, "<termios.h>", kPublic },
+  { "<bits/termios-struct.h>", kPrivate, "<termios.h>", kPublic },
+  { "<bits/termios-tcflow.h>", kPrivate, "<termios.h>", kPublic },
+  { "<bits/time64.h>", kPrivate, "<sys/types.h>", kPublic },
   { "<bits/timerfd.h>", kPrivate, "<sys/timerfd.h>", kPublic },
   { "<bits/typesizes.h>", kPrivate, "<sys/types.h>", kPublic },
+  { "<bits/types/struct_semid_ds.h>", kPrivate, "<sys/sem.h>", kPublic },
+  { "<bits/types/struct_semid_ds.h>", kPrivate, "<sys/sem.h>", kPublic },
+  { "<bits/types/struct_shmid_ds.h>", kPrivate, "<sys/shm.h>", kPublic },
+  { "<bits/types/struct_shmid_ds.h>", kPrivate, "<sys/shm.h>", kPublic },
+  { "<bits/types/struct_statx.h>", kPrivate, "<sys/stat.h>", kPublic },
+  { "<bits/types/struct_statx_timestamp.h>", kPrivate, "<sys/stat.h>", kPublic },
+  { "<bits/uintn-identity.h>", kPrivate, "<endian.h>", kPublic },
+  { "<bits/uio-ext.h>", kPrivate, "<sys/uio.h>", kPublic },
+  { "<bits/unistd_ext.h>", kPrivate, "<unistd.h>", kPublic },
+  { "<bits/unistd.h>", kPrivate, "<unistd.h>", kPublic },
+  { "<bits/utmp.h>", kPrivate, "<utmp.h>", kPublic },
+  { "<bits/utmpx.h>", kPrivate, "<utmpx.h>", kPublic },
+  { "<bits/utsname.h>", kPrivate, "<sys/utsname.h>", kPublic },
+  { "<bits/waitflags.h>", kPrivate, "<sys/wait.h>", kPublic },
+  { "<bits/waitstatus.h>", kPrivate, "<sys/wait.h>", kPublic },
+  { "<bits/wchar2.h>", kPrivate, "<wchar.h>", kPublic },
+  { "<bits/wchar-ldbl.h>", kPrivate, "<wchar.h>", kPublic },
+  { "<bits/wctype-wchar.h>", kPrivate, "<wchar.h>", kPublic },
+  { "<gnu/lib-names-32.h>", kPrivate, "<gnu/lib-names.h>", kPublic },
+  { "<gnu/lib-names-64.h>", kPrivate, "<gnu/lib-names.h>", kPublic },
+
   // Top-level #includes that just forward to another file:
   // $ for i in /usr/include/*; do [ -f $i ] && [ `wc -l < $i` = 1 ] && echo $i; done
   // (poll.h, syscall.h, syslog.h, ustat.h, wait.h).
@@ -557,8 +725,9 @@ const IncludeMapEntry libc_include_map[] = {
   // $ for i in /usr/include/bits/*; do for dir in asm linux; do grep -H -e $dir/`basename $i` $i; done; done
   { "<linux/errno.h>", kPrivate, "<bits/errno.h>", kPrivate },
   { "<asm/ioctls.h>", kPrivate, "<bits/ioctls.h>", kPrivate },
+  { "<linux/param.h>", kPrivate, "<bits/param.h>", kPrivate },
+  { "<asm/socket.h>", kPrivate, "<bits/socket.h>", kPrivate },
   { "<asm/socket.h>", kPrivate, "<bits/socket.h>", kPrivate },
-  { "<linux/socket.h>", kPrivate, "<bits/socket.h>", kPrivate },
   // Some asm files have 32- and 64-bit variants:
   // $ ls /usr/include/asm/*_{32,64}.h
   { "<asm/posix_types_32.h>", kPrivate, "<asm/posix_types.h>", kPublic },
@@ -594,7 +763,7 @@ const IncludeMapEntry stdlib_c_include_map[] = {
   // <cassert> back to <assert.h>.  (If you *did* want to replace
   // assert.h with cassert, you'd change it to a public->private
   // mapping.)  Here is how I identified the files to map:
-  // $ for i in /usr/include/c++/4.4/c* ; do ls /usr/include/`basename $i | cut -b2-`.h /usr/lib/gcc/*/4.4/include/`basename $i | cut -b2-`.h 2>/dev/null ; done
+  // $ for i in /usr/include/c++/14/c* ; do ls /usr/include/`basename $i | cut -b2-`.h /usr/lib/gcc/*/14/include/`basename $i | cut -b2-`.h 2>/dev/null ; done
   //
   // These headers are defined in [headers.cpp.c].
   // https://github.com/cplusplus/draft/blob/c+%2B20/source/lib-intro.tex
@@ -728,25 +897,29 @@ const IncludeMapEntry stdlib_cpp_include_map[] = {
   // #including each other (eg <iostream> #includes <istream>).  We
   // are pretty forgiving: if a user specifies any public header, we
   // generally don't require the others.
-  // ( cd /usr/crosstool/v12/gcc-4.3.1-glibc-2.3.6-grte/x86_64-unknown-linux-gnu/x86_64-unknown-linux-gnu/include/c++/4.3.1 && egrep '^ *# *include <(istream|ostream|iostream|fstream|sstream|streambuf|ios|iosfwd)>' *stream* ios | perl -nle 'm/^([^:]+).*[<"]([^>"]+)[>"]/ and print qq@    { "<$2>", kPublic, "<$1>", kPublic },@' | sort -u )
+  // ( cd /usr/include/c++/14 && egrep '^ *# *include <(istream|ostream|iostream|fstream|sstream|streambuf|ios|iosfwd)>' *stream* ios | perl -nle 'm/^([^:]+).*[<"]([^>"]+)[>"]/ and print qq@  { "<$2>", kPublic, "<$1>", kPublic },@' | sort -u )
   { "<ios>", kPublic, "<istream>", kPublic },
   { "<ios>", kPublic, "<ostream>", kPublic },
   { "<iosfwd>", kPublic, "<ios>", kPublic },
   { "<iosfwd>", kPublic, "<streambuf>", kPublic },
   { "<istream>", kPublic, "<fstream>", kPublic },
   { "<istream>", kPublic, "<iostream>", kPublic },
+  { "<istream>", kPublic, "<spanstream>", kPublic },
   { "<istream>", kPublic, "<sstream>", kPublic },
   { "<ostream>", kPublic, "<fstream>", kPublic },
   { "<ostream>", kPublic, "<iostream>", kPublic },
   { "<ostream>", kPublic, "<istream>", kPublic },
+  { "<ostream>", kPublic, "<spanstream>", kPublic },
   { "<ostream>", kPublic, "<sstream>", kPublic },
+  { "<sstream>", kPublic, "<syncstream>", kPublic },
   { "<streambuf>", kPublic, "<ios>", kPublic },
+  { "<streambuf>", kPublic, "<spanstream>", kPublic },
 };
 
 // GNU libstdc++ mappings generated with:
 //
-// mapgen/iwyu-mapgen-libstdcxx.py --lang=c++ /usr/include/c++/11 \
-//     /usr/include/x86_64-linux-gnu/c++/11
+// mapgen/iwyu-mapgen-libstdcxx.py --lang=c++ /usr/include/c++/14 \
+//     /usr/include/c++/14/x86_64-suse-linux
 //
 // Do not edit!
 const IncludeMapEntry libstdcpp_include_map[] = {
@@ -799,9 +972,8 @@ const IncludeMapEntry libstdcpp_include_map[] = {
   { "<bits/stdc++.h>", kPrivate, "<bits/extc++.h>", kPrivate },
   { "<bits/stdc++.h>", kPrivate, "<bits/stdtr1c++.h>", kPrivate },
   { "<bits/stdtr1c++.h>", kPrivate, "<bits/extc++.h>", kPrivate },
-  { "<bits/uses_allocator.h>", kPrivate, "<bits/stl_queue.h>", kPrivate },
-  { "<bits/uses_allocator.h>", kPrivate, "<bits/stl_stack.h>", kPrivate },
   { "<debug/assertions.h>", kPrivate, "<bits/align.h>", kPrivate },
+  { "<debug/assertions.h>", kPrivate, "<bits/memory_resource.h>", kPrivate },
   { "<debug/assertions.h>", kPrivate, "<bits/stl_deque.h>", kPrivate },
   { "<debug/assertions.h>", kPrivate, "<bits/stl_iterator_base_funcs.h>", kPrivate },
   { "<debug/assertions.h>", kPrivate, "<bits/stl_vector.h>", kPrivate },
