-------------------------------------------------------------------
Fri Aug 29 05:59:46 UTC 2025 - Bernhard Wiedemann <bwiedemann@suse.de>

- Add fix-i586.patch to fix compilation for i586 with gcc-15

-------------------------------------------------------------------
Fri Aug 29 01:26:36 UTC 2025 - Bernhard Wiedemann <bwiedemann@suse.de>

- Drop -Werror

-------------------------------------------------------------------
Thu Aug 28 12:28:14 UTC 2025 - Ana Guerrero <ana.guerrero@suse.com>

- Update to version 1.21.1+git20250827.61b4585e2:
  *  [efi] Drag in MNP driver whenever SNP driver is present
  *  [bnxt] Update CQ doorbell type
  *  [dwgpio] Use fdt_reg() to get GPIO port numbers
  *  [fdt] Provide fdt_reg() for unsized single-entry regions
  *  [cmdline] Show commands in alphabetical order
  *  [digest] Treat inability to acquire an image as a fatal error
  *  [digest] Add "--set" option to store digest value in a setting
  *  [digest] Add commands for all enabled digest algorithms
  *  [dwgpio] Add driver for the DesignWare GPIO controller
  *  [gpio] Add a framework for GPIO controllers
  *  [fdt] Use phandle as device location
  *  [dwmac] Show core version in debug messages
  *  [bnxt] Remove unnecessary test_if macro
  *  [bnxt] Remove unnecessary I/O macros
  *  [serial] Explicitly initialise serial console UART to NULL
  *  [undi] Assume that legacy interrupts are broken for any PCIe device
  *  [pxeprefix] Display PCI vendor and device ID in PXE startup banner
  *  [fdt] Add ability to locate node by phandle
  *  [dwusb] Add driver for DesignWare USB3 host controller
  *  [xhci] Allow for non-PCI xHCI host controllers
  *  [xhci] Use root hub port number to determine slot type
  *  [efi] Check only the non-extended WaitForKey event
  *  [efi] Allow compiler to perform type checks on EFI_EVENT
  *  [init] Show initialisation function names in debug messages
  *  [efi] Assume that vendor wireless drivers are unusable via SNP
  *  [efi] Drop to external TPL for calls to ConnectController()
  *  [efi] Provide efi_tpl_name() for transcribing TPLs in debug messages
  *  [dwmac] Add driver for DesignWare Ethernet MAC
  *  [dma] Use virtual addresses for dma_map()
  *  [build] Handle isohybrid with xorrisofs
  *  [iobuf] Ensure I/O buffer data sits within unshared cachelines
  *  [uaccess] Allow for coherent DMA mapping of the 32-bit address space
  *  [bnxt] Update supported devices array
  *  [bnxt] Update device descriptions
  *  [bnxt] Remove VLAN stripping logic
  *  [bnxt] Increase Tx descriptors
  *  [build] Disable use of common symbols
  *  [build] Allow for the existence of small-data sections
  *  [legacy] Allocate legacy driver .bss-like segments at probe time
  *  [legacy] Rename the global legacy NIC to "legacy_nic"
  *  [legacy] Allocate extra padding in receive buffers
  *  [pxe] Use a weak symbol for isapnp_read_port
  *  [fdtcon] Add basic support for FDT-based system serial console
  *  [dwuart] Read input clock frequency from the device tree
  *  [uart] Wait for 16550 UART to become idle before modifying LCR
  *  [serial] Allow platform to specify mechanism for identifying console
  *  [dwuart] Add "ns16550a" compatible device ID
  *  [dwuart] Add a basic driver for the Synopsys DesignWare UART
  *  [uart] Allow for dynamically registered 16550 UARTs
  *  [uart] Add support for MMIO-accessible 16550 UARTs
  *  [uart] Allow for the existence of non-16550 UARTs
  *  [uart] Remove ability to use frame formats other than 8n1
  *  [fdt] Allow paths and aliases to be terminated with separator characters
  *  [bnxt] Remove TX padding
  *  [fdtmem] Limit relocation to 32-bit address space
  *  [dt] Allow for creation of standalone devices
  *  [ipv4] Add support for classless static routes
  *  [ipv4] Extend routing mechanism to handle non-default routes
  *  [ipv4] Add self-tests for IPv4 routing
  *  [test] Add infrastructure for test network devices
  *  [dt] Locate parent node at point of use in dt_ioremap()
  *  [fdt] Provide ability to locate the parent device node
  *  [fdt] Add tests for device tree creation
  *  [image] Use image name rather than pointer value in all debug messages
  *  [fdtmem] Ignore reservation regions with no fixed addresses
  *  [memmap] Allow explicit colour selection for memory map debug messages
  *  [memmap] Rename addr/last fields to min/max for clarity
  *  [lkrn] Support initrd construction for RISC-V bare-metal kernels
  *  [initrd] Squash and shuffle only initrds within the external heap
  *  [initrd] Split out initrd construction from bzimage.c
  *  [initrd] Allow for images straddling the top of the reshuffle region
  *  [initrd] Rename bzimage_align() to initrd_align()
  *  [initrd] Swap initrds entirely in-place via triple reversal
  *  [uheap] Expose external heap region directly
  *  [uheap] Prevent allocation of blocks with zero physical addresses
  *  [fdtmem] Allow iPXE to be relocated to the top of the address space
  *  [lkrn] Shut down devices before jumping to kernel entry point
  *  [lkrn] Allow a single initrd to be passed to the booted kernel
  *  [fdt] Allow an initrd to be specified when creating a device tree
  *  [initrd] Move initrd reshuffling to be architecture-independent code
  *  [image] Use image replacement when executing extracted images
  *  [lkrn] Add support for EFI zboot compressed kernel images
  *  [lkrn] Add basic support for the RISC-V Linux kernel image format
  *  [bios] Use generic external heap based on the system memory map
  *  [uheap] Add a generic external heap based on the system memory map
  *  [malloc] Allow heap to specify block and pointer alignments
  *  [malloc] Allow for the existence of multiple heaps
  *  [memmap] Remove now-obsolete get_memmap()
  *  [bios] Use memmap_describe() to find an external heap location
  *  [settings] Use memmap_describe() to construct memory map settings
  *  [bios] Use memmap_describe() to find a relocation address
  *  [comboot] Use memmap_describe() to obtain available memory
  *  [multiboot] Use memmap_describe() to construct Multiboot memory map
  *  [image] Use memmap_describe() to check loadable image segments
  *  [memmap] Use memmap_dump_all() to dump debug memory maps
  *  [bios] Describe umalloc() heap as an in-use memory area
  *  [bios] Update to use the generic system memory map API
  *  [fdtmem] Update to use the generic system memory map API
  *  [memmap] Define an API for managing the system memory map
  *  [tests] Remove prehistoric umalloc() test code
  *  [fdtmem] Record size of accessible physical address space
  *  [bios] Rename memmap.c to int15.c
  *  [bnxt] Use updated DMA APIs
  *  [bnxt] Return proper error codes in probe
  *  [crypto] Remove redundant null pointer check
  *  [fdtmem] Add ability to parse FDT memory map for a relocation address
  *  [fdt] Generalise access to "reg" property
  *  [build] Formalise mechanism for accessing absolute symbols
  *  [libc] Display assertion failure message before incrementing counter
  *  [uaccess] Generalise librm's virt_offset mechanism for RISC-V
  *  [build] Constrain PHYS_CODE() and REAL_CODE() to use i386 registers
  *  [zbin] Allow for constructing compressed dynamic relocation records
  *  [build] Allow for 32-bit and 64-bit versions of util/zbin
  *  [uaccess] Remove redundant virt_to_user() and userptr_t
  *  [uaccess] Reduce scope of included uaccess.h header
  *  [image] Make image data read-only to most consumers
  *  [image] Add the concept of a static image
  *  [image] Move embedded images from .rodata to .data
  *  [test] Separate read-only and writable CMS test images
  *  [uaccess] Remove redundant copy_from_user() and copy_to_user()
  *  [image] Clear recorded replacement image immediately after consuming
  *  [bofm] Remove userptr_t from BOFM table parsing and updating
  *  [bofm] Allow BOFM tests to be run without a BOFM-capable device driver
  *  [build] Remove some long-obsolete unused header files
  *  [peerdist] Remove never-used peerdist_msg_blk() macro
  *  [peerdist] Remove userptr_t from PeerDist content information parsing
  *  [xferbuf] Simplify and generalise data transfer buffers
  *  [prefix] Remove userptr_t from command line image construction
  *  [comboot] Remove userptr_t from COM32 API implementation
  *  [comboot] Remove userptr_t from COMBOOT API implementation
  *  [comboot] Remove userptr_t from COMBOOT image parsing
  *  [uaccess] Remove redundant UNULL definition
  *  [bzimage] Remove userptr_t from bzImage parsing
  *  [initrd] Use physical addresses for calculations on initrd locations
  *  [bzimage] Use image name in debug messages
  *  [efi] Add ability to reboot to firmware setup menu
  *  [reboot] Generalise warm reboot indicator to a flags bitmask
  *  [multiboot] Remove userptr_t from Multiboot and ELF image parsing
  *  [multiboot] Use image name in Multiboot and ELF debug messages
  *  [linux] Enable compiler warnings when building the linux_api.o object
  *  [linux] Add missing return statement to linux_poll()
  *  [build] Disable gcc unterminated-string-initializer warnings
  *  [build] Remove unsafe disable function wrapper from legacy NIC drivers
  *  [build] Prevent the use of reserved words in C23
  *  [build] Fix old-style function definition
  *  [build] Fix typo in xenver.h header guard
  *  [pnm] Remove userptr_t from PNM image parsing
  *  [png] Remove userptr_t from PNG image parsing
  *  [fbcon] Avoid redrawing unchanged characters when scrolling
  *  [fbcon] Remove userptr_t from framebuffer console drivers
  *  [efi] Remove userptr_t from EFI PE image parsing
  *  [pxe] Remove userptr_t from PXE file API implementation
  *  [pxe] Remove userptr_t from PXE API call dispatcher
  *  [cmdline] Remove userptr_t from "digest" command
  *  [nbi] Remove userptr_t from NBI image parsing
  *  [sdi] Remove userptr_t from SDI image parsing
  *  [pxe] Remove userptr_t from PXE NBP image parsing
  *  [block] Remove userptr_t from block device abstraction
  *  [uaccess] Remove now-obsolete memchr_user()
  *  [script] Remove userptr_t from script image parsing
  *  [ucode] Remove userptr_t from microcode image parsing
  *  [ucode] Remove userptr_t from microcode update mechanism
  *  [thunderx] Replace uses of userptr_t with direct pointer dereferences
  *  [exanic] Replace uses of userptr_t with direct pointer dereferences
  *  [uaccess] Remove trivial uses of userptr_t
  *  [gve] Replace uses of userptr_t with direct pointer dereferences
  *  [umalloc] Remove userptr_t from user memory allocations
  *  [smbios] Remove userptr_t from SMBIOS structure parsing
  *  [acpi] Remove userptr_t from ACPI table parsing
  *  [deflate] Remove userptr_t from decompression code
  *  [image] Remove userptr_t from image definition
  *  [crypto] Remove userptr_t from CMS verification and decryption
  *  [crypto] Remove userptr_t from ASN.1 parsers
  *  [uaccess] Remove redundant read_user()
  *  [uaccess] Replace real_to_user() with real_to_virt()
  *  [uaccess] Remove user_to_phys() and phys_to_user()
  *  [uaccess] Remove redundant user_to_virt()
  *  [uaccess] Remove redundant memcpy_user() and related string functions
  *  [uaccess] Remove redundant userptr_add() and userptr_diff()
  *  [uaccess] Change userptr_t to be a pointer type
  *  [uaccess] Add explicit casts to and from userptr_t where needed
  *  [uaccess] Rename userptr_sub() to userptr_diff()
  *  [time] Use currticks() to provide the null system time
  *  [cgem] Add a driver for the Cadence GEM NIC
  *  [undi] Work around broken ASUSTeK KNPA-U16 server PXE ROM
  *  [efi] Inhibit calls to Shutdown() for wireless SNP devices
  *  [netdevice] Add the concept of an insomniac network device
  *  [efi] Allow for custom methods for disconnecting existing drivers
  *  [dt] Provide dt_ioremap() to map device registers
  *  [fdt] Add fdt_cells() to read cell-based properties such as "reg"
  *  [netdevice] Add missing bus type identifier for devicetree devices
  *  [crypto] Allow for explicit control of external trust sources
  *  [dt] Add basic concept of a devicetree bus
  *  [fdt] Remove concept of a device tree cursor
  *  [fdt] Add basic tests for reading values from a flattened device tree
  *  [fdt] Avoid temporarily modifying path during path lookup
  *  [fdt] Provide fdt_strings() to read string list properties
  *  [fdt] Allow for trailing slashes in path lookups
  *  [crypto] Switch to using python-asn1crypto instead of python-asn1
  *  [fdt] Populate boot arguments in constructed device tree
  *  [fdt] Identify free space (if any) at end of parsed tree
  *  [x509] Ensure certificate remains valid during x509_append()
  *  [tls] Support fragmentation of transmitted records
  *  [tls] Send an empty client certificate chain if we have no certificate
  *  [iobuf] Limit automatic I/O buffer alignment to page size
  *  [tls] Encrypt data in place to reduce memory usage
  *  [xfer] Use xfer_alloc_iob() for transmit I/O buffers on stream sockets
  *  [isa] Disable legacy ISA device probing by default
  *  [efi] Allow for fact that SNP device may be removed by executed image
  *  [efi] Check correct return value from efi_pxe_find()
  *  [efi] Disconnect existing drivers on a per-protocol basis
  *  [efi] Define an attachment priority order for EFI drivers
  *  [efi] Show all drivers claiming support for a handle in debug messages
  *  [efi] Return success from Stop() if driver is already stopped
  *  [efi] Add various well-known GUIDs encountered in WiFi boot
  *  [efi] Install a device tree for the booted OS, if available
  *  [fdt] Provide the ability to create a device tree for a booted OS
  *  [efi] Create a copy of the system flattened device tree, if present
  *  [fdt] Allow for parsing device trees where the length is known in advance
  *  [fdt] Allow for the existence of multiple device trees
  *  [fdt] Add the "fdt" command
  *  [fdt] Add the concept of an FDT image
  *  [efi] Add support for installing EFI configuration tables
  *  [efi] Add flattened device tree header and GUID definitions
  *  [efi] Add ACPI and SMBIOS tables as well-known GUIDs
  *  [undi] Ensure forward progress is made even if UNDI IRQ is stuck
  *  [pxeprefix] Ensure that UNDI IRQ is disabled before starting iPXE
  *  [pxeprefix] Work around missing type values from PXENV_UNDI_GET_NIC_TYPE
  *  [efi] Allow use of typed pointers for efi_open() et al
  *  [efi] Eliminate uses of HandleProtocol()
  *  [efi] Use efi_open() for all ephemeral protocol opens
  *  [efi] Use efi_open_unsafe() for all explicitly unsafe protocol opens
  *  [efi] Use efi_open_by_driver() for all by-driver protocol opens
  *  [efi] Use efi_open_by_child() for all by-child protocol opens
  *  [efi] Create safe wrappers for OpenProtocol() and CloseProtocol()
  *  [efi] Remove the efipci_open() and efipci_close() wrappers
  *  [efi] Avoid function name near-collision
  *  [efi] Remove spurious close of SNP device parent's device path
  *  [efi] Use driver name only from driver binding handles in debug messages
  *  [efi] Get veto candidate driver name via either component name protocol
  *  [efi] Get veto candidate driver name from image handle
  *  [efi] Show image address range in veto debug messages
  *  [efi] Prefer driver name to device path for debug messages
  *  [efi] Attempt to retrieve driver name from image handle for debug messages
  *  [efi] Allow wrapping the global boot services table in situ
  *  [efi] Fix debug wrappers for CloseEvent() and CheckEvent()
  *  [efi] Ignore path separator characters in virtual filenames
  *  [efi] Prescroll the display after a failed wrapped ExitBootServices() call
  *  [efi] Add EFI_RNG_PROTOCOL_GUID as a well-known GUID
  *  [crypto] Update cmsdetach to work with python-asn1 version 3.0.0
  *  [rng] Restore state of IRQ 8 and PIE when disabling entropy gathering
  *  [pic8259] Return previous state when enabling or disabling IRQs
  *  [contrib] Update bochsrc.txt to work with current versions
  *  [efi] Accept and trust CA certificates in the TlsCaCertificates variable
  *  [efi] Add TLS authentication header and GUID definitions
  *  [efi] Add EFI_GLOBAL_VARIABLE as a well-known GUID
  *  [cpio] Allow for the construction of pure directories
  *  [cpio] Fix calculation of name lengths in CPIO headers
  *  [crypto] Support extracting certificates from EFI signature list images
  *  [crypto] Allow for parsing of DER data separate from DER images
  *  [efi] Allow efi_guid_ntoa() to be used in non-EFI builds
  *  [efi] Add EFI_SIGNATURE_LIST header and GUID definitions
  *  [efi] Update to current EDK2 headers
  *  [build] Use -fshort-wchar when building EFI host utilities
  *  [efi] Mark UsbHostController.h as a non-imported header
  *  [lkrnprefix] Support a longer version string
  *  [cpio] Allow for construction of parent directories as needed
  *  [menu] Allow a post-activity timeout to be defined
  *  [crypto] Start up RBG on demand if needed
  *  [efi] Increase download timeout for autoexec.ipxe
  *  [crypto] Support direct reduction only for Montgomery constant R^2 mod N
  *  [crypto] Expose shifted out bit from big integer shifts
  *  [bnxt] Allocate TX rings with firmware input
  *  [malloc] Ensure free memory blocks remain aligned
  *  [malloc] Clean up debug messages
  *  [crypto] Add definitions and tests for the NIST P-384 elliptic curve
  *  [crypto] Add definitions and tests for the NIST P-256 elliptic curve
  *  [crypto] Add support for Weierstrass elliptic curve point multiplication
  *  [crypto] Add a generic implementation of a Montgomery ladder
  *  [test] Add generic tests for elliptic curve point multiplication
  *  [tls] Allow for NIST elliptic curve point formats
  *  [crypto] Generalise elliptic curve key exchange to ecdhe_key()
  *  [crypto] Add bigint_ntoa() for transcribing big integers
  *  [crypto] Extract bigint_reduce_supremum() from bigint_mod_exp()
  *  [crypto] Allow for relaxed Montgomery reduction
  *  [efi] Add EFI_TCG2_PROTOCOL header and GUID definition
  *  [efi] Update to current EDK2 headers
  *  [crypto] Calculate inverse of modulus on demand in bigint_montgomery()
  *  [gve] Run startup process only while device is open
  *  [crypto] Remove obsolete bigint_mod_multiply()
  *  [crypto] Use Montgomery reduction for modular exponentiation
  *  [crypto] Add bigint_montgomery() to perform Montgomery reduction
  *  [crypto] Use inverse size as effective size for bigint_mod_invert()
  *  [crypto] Eliminate temporary working space for bigint_mod_invert()
  *  [crypto] Eliminate temporary working space for bigint_reduce()
  *  [crypto] Expose carry flag from big integer addition and subtraction
  *  [crypto] Add bigint_msb_is_set() to clarify code
  *  [efi] Ensure local drives are connected when attempting a SAN boot
  *  [build] Allow for per-architecture cross-compilation prefixes
  *  [sbi] Add support for running as a RISC-V SBI payload
  *  [build] Allow default platform to vary by architecture
  *  [pci] Provide a null PCI API for platforms with no PCI bus
  *  [fdt] Add ability to parse unsigned integer properties
  *  [pci] Drag in PCI settings mechanism only when PCI support is present
  *  [uaccess] Rename UACCESS_EFI to UACCESS_FLAT
  *  [smbios] Provide a null SMBIOS API for platforms with no concept of SMBIOS
  *  [crypto] Add bigint_mod_invert() to calculate inverse modulo a power of two
  *  [usb] Expose USB device descriptor and strings via settings
  *  [usb] Add "usbscan" command for iterating over USB devices
  *  [crypto] Separate out bigint_reduce() from bigint_mod_multiply()
  *  [crypto] Use architecture-independent bigint_is_set()
  *  [crypto] Rename bigint_rol()/bigint_ror() to bigint_shl()/bigint_shr()
  *  [crypto] Eliminate temporary carry space for big integer multiplication
  *  [arm] Support building as a Linux userspace binary for AArch32
  *  [arm] Check PMCCNTR availability before use for profiling
  *  [profile] Standardise return type of profile_timestamp()
  *  [crypto] Use constant-time big integer multiplication
  *  [gve] Allocate all possible event counters
  *  [efi] Remove redundant EFI_BOOT_FILE definitions
  *  [linux] Allow a sysroot to be specified via SYSROOT=...
  *  [efi] Use standard va_args macros instead of VA_START() etc
  *  [test] Add tests for 64-bit logical and arithmetic shifts
  *  [efi] Centralise definition of efi_cpu_nap()
  *  [libc] Centralise architecture-independent portions of setjmp.h
  *  [cloud] Add ability to delete old AMI images
  *  [cloud] Add family and architecture tags to AWS snapshots and images
  *  [ena] Change reported operating system type to "iPXE"
  *  [gdb] Allow CPU architectures to omit support for GDB
  *  [build] Centralise dummy architecture-specific headers
  *  [aqc1xx] Add support for Marvell AQtion Ethernet controller
  *  [etherfabric] Fix use of uninitialised variable in falcon_xaui_link_ok()
  *  [test] Add CMS decryption self-tests
  *  [crypto] Allow cms_decrypt() to be called on unregistered images
  *  [image] Add the "imgdecrypt" command
  *  [crypto] Support decryption of images via CMS envelopes
  *  [image] Split image_strip_suffix() out from image_extract()
  *  [crypto] Add cmsdetach script for detaching encrypted data from CMS messages
  *  [test] Update CMS self-test terminology
  *  [crypto] Allow for extraction of ASN.1 algorithm parameters
  *  [crypto] Hold CMS message as a single ASN.1 object
  *  [crypto] Remove the concept of a public-key algorithm reusable context
  *  [tls] Group client and server state in TLS connection structure
  *  [tls] Group transmit and receive state in TLS connection structure
  *  [gve] Add missing error codes in EUNIQ() list of potential errors
  *  [contrib] Remove obsolete rom-o-matic code
  *  [test] Generalise public-key algorithm tests and use okx()
  *  [crypto] Pass asymmetric keys as ASN.1 cursors
  *  [efi] Allow discovery of PCI bus:dev.fn address ranges
  *  [pci] Separate permission to probe buses from bus:dev.fn range discovery
  *  [crypto] Fix debug name for empty certificate chain validators
  *  [crypto] Generalise cms_signature to cms_message
  *  [crypto] Add OID-identified algorithms for AES ciphers
  *  [crypto] Pass image as parameter to CMS functions
  *  [crypto] Allow passing a NULL certificate store to x509_find() et al
  *  [crypto] Centralise mechanisms for identifying X.509 certificates
  *  [crypto] Extend asn1_enter() to handle partial object cursors
  *  [crypto] Clarify ASN.1 cursor invalidation behaviour
  *  [crypto] Do not return an error when skipping the final ASN.1 object
  *  [cpuid] Allow hypervisor CPUID leaves to be accessed as settings
  *  [cpuid] Allow reading hypervisor CPUID leaves
  *  [smbios] Allow reading an entire SMBIOS data structure as a setting
  *  [smbios] Avoid reading beyond end of constructed SMBIOS setting
  *  [cloud] Add utility to read INT13CON partition in Google Compute Engine
  *  [gve] Increase number of receive buffers to reduce packet loss
  *  [gve] Add driver for Google Virtual Ethernet NIC
  *  [cloud] Add utility for importing images to Google Compute Engine
  *  [ipv6] Expose router address for DHCPv6 leased addresses
  *  [ipv4] Support small subnets with no directed broadcast address
  *  [hci] Remove the generalised widget user interface abstraction
  *  [form] Reimplement the "login" user interface
  *  [form] Add support for dynamically created interactive forms
  *  [dynui] Add concept of a secret user interface item
  *  [dynui] Allow for multiple flags on a user interface item
  *  [dynui] Generalise mechanisms for looking up user interface items
  *  [dynui] Generalise the concept of a menu to a dynamic user interface
  *  [hci] Allow tab key to be used to cycle through UI elements
  *  [hci] Rename "item" command's first parameter from "label" to "name"
  *  [hci] Split out msg() and alert() from settings UI code
  *  [hci] Draw all widgets on the standard screen
  *  [libc] Add stpcpy()
  *  [hci] Provide a general concept of a text widget set
  *  [test] Add test cases for editable strings
  *  [hci] Fix semantics of replace_string() to match code comments
  *  [efi] Veto the Dhcp6Dxe driver on all platforms
  *  [hci] Use dynamically allocated buffers for editable strings
  *  [efi] Do not attempt to download autoexec.ipxe without a valid base URI
  *  [netdevice] Add "linktype" setting
  *  [efi] Restructure handling of autoexec.ipxe script
  *  [cachedhcp] Allow cached DHCPACK to apply to temporary network devices
  *  [efi] Add the ability to create a temporary MNP network device
  *  [efi] Allow for allocating EFI devices from arbitrary handles

-------------------------------------------------------------------
Mon Apr 01 04:48:13 UTC 2024 - william.brown@suse.com

- Remove 1082.patch which has an alternative merged upstream
- Update to version 1.21.1+git20240329.764e34f:
  * [http] Add error table entry for HTTP 404 Not Found error
  * [tftp] Add error table entry for TFTP "file not found" error code
  * [efi] Add error table entry for local filesystem EFI_NOT_FOUND error
  * [efi] Report local file errors during download, rather than on opening
  * [image] Allow opaque URI component to provide image name
  * [build] Fix build failures with random versions of gcc
  * [efi] Extract basic network settings from loaded image device path
  * [efi] Add efi_path_mac() to parse a MAC address from an EFI device path
  * [efi] Add support for driving EFI_MANAGED_NETWORK_PROTOCOL devices
  * [efi] Allow for drivers to be located via child handles
  * [efi] Add helper functions for service binding protocols
  * [efi] Match chainloaded device by uppermost matching handle
  * [efi] Set current working URI from our own device path URI, if present
  * [efi] Add efi_path_uri() to parse a URI from an EFI device path
  * [settings] Expose current working URI and directory URI via settings
  * [efi] Pad transmit buffer length to work around vendor driver bugs
  * [golan] Use ETH_HLEN for inline header size
  * [build] Fix building on older versions of gcc
  * [snp] Allocate additional padding for receive buffers
  * [ucode] Add support for updating x86 microcode
  * [bios] Provide a multiprocessor API for BIOS
  * [librm] Add support for installing a startup IPI handler
  * [efi] Provide a multiprocessor API for EFI
  * [mp] Define an API for multiprocessor functions
  * [efi] Update to current EDK2 headers
  * [ci] Update action versions to silence GitHub warnings
  * [efi] Do not report return status from efi_block_local()
  * [block] Allow SAN boot device to be identified by filesystem label
  * [block] Allow SAN boot device to be identified by an extra filename
  * [block] Allow SAN boot device to be identified by UUID
  * [efi] Add efi_path_guid() utility function
  * [block] Allow for additional SAN boot parameters alongside filename
  * [efi] Allow booting from local disks via the "sanboot" command
  * [block] Allow for iteration over SAN device list in drive number order
  * [efi] Generalise block device boot to support arbitrary EFI handles
  * [efi] Use file system protocol to check for SAN boot filename existence
  * [block] Use drive number as debug message stream ID
  * [efi] Use long forms of device paths in debug messages
  * [parseopt] Add parse_uuid() for parsing UUID command-line arguments
  * [settings] Add parsing for UUID and GUID settings types
  * [uuid] Add uuid_aton() to parse a UUID from a string
  * [efi] Work around broken boot services table manipulation by UEFI shim
  * [eap] Add support for the MS-CHAPv2 authentication method
  * [eap] Allow MD5-Challenge authentication method to be disabled
  * [eap] Add progress debug messages
  * [efi] Ignore new LoongArch PC-relative relocations and relaxations
  * [drivers] Sort PCI_ROM() entries numerically
  * [crypto] Force inlining of trivial wrapper functions
  * [crypto] Add implementation of MS-CHAPv2 authentication
  * [crypto] Allow for multiple cross-signed certificate download attempts
  * [crypto] Add x509_is_self_signed() helper function
  * [crypto] Add x509_truncate() to truncate a certificate chain
  * [list] Add list_for_each_entry_safe_continue()
  * [list] Add list_is_head_entry()
  * [build] Fix build failures with older versions of gcc
  * [libc] Allow build_assert() failures to be ignored via NO_WERROR=1
  * [bnxt] Add support for BCM957608
  * [crypto] Add implementation of the DES cipher
  * [test] Remove dummy initialisation vector for ECB-mode AES tests
  * [crypto] Fix stray references to AES
  * [tls] Tidy up error handling flow in tls_send_plaintext()
  * [efi] Fix hang during ExitBootServices()
  * [tls] Add ECDHE cipher suites
  * [tls] Make key exchange algorithms selectable via build configuration
  * [crypto] Add X25519 OID-identified algorithm and TLS named curve
  * [tls] Add support for Ephemeral Elliptic Curve Diffie-Hellman key exchange
  * [tls] Split out Diffie-Hellman parameter signature verification
  * [tls] Generate key material after sending ClientKeyExchange
  * [tls] Restructure construction of ClientHello message
  * [crypto] Add an abstraction of an elliptic curve
  * [crypto] Check for all-zeros result from X25519 key exchange
  * [bnxt] Add support for additional chip IDs
  * [crypto] Add X25519 key exchange algorithm
  * [loong64] Replace broken big integer arithmetic implementations
  * [crypto] Add bigint_swap() to conditionally swap big integers
  * [crypto] Add bigint_copy() as a convenient wrapper macro
  * [crypto] Allow multiplicand and multiplier to differ in size
  * [libc] Replace linker_assert() with build_assert()
  * [libc] Make static_assert() available via assert.h
  * [build] Fix building with newer binutils
  * [build] Remove unnecessary ".text" directives
  * [eap] Add support for the MD5-Challenge authentication type
  * [eap] Add support for sending an EAP identity
  * [eap] Ignore any received EAP responses
  * [build] Reduce scope of wildcard .gitignore rules
  * [smbios] Support scanning for the 64-bit SMBIOS3 entry point
  * [intel] Add PCI ID for I219-LM (23)
  * [efi] Add potentially missing relocation types
  * [efi] Fix Coverity warning about unintended sign extension
  * [efi] Add relocation types generated by clang
  * [build] Use SOURCE_DATE_EPOCH for FAT serial number if it exists
  * [efi] Allow compiling elf2efi with clang
  * [efi] Avoid modifying PE/COFF debug filename
  * [efi] Extend PE header size to cover space up to first section
  * [efi] Fix dependency list construction in EDK2 header import script
  * [efi] Maximise image base address
  * [efi] Do not assume canonical PE section ordering
  * [efi] Treat 16-bit sections as hidden in hybrid binaries
  * [efi] Place PE debug information in a hidden section
  * [efi] Fix recorded overall size of headers in NT optional header
  * [efi] Write out PE header only after writing sections
  * [efi] Use load memory address as file offset for hybrid binaries
  * [efi] Mark PE images as large address aware
  * [efi] Set NXCOMPAT bit in PE header
  * [efi] Treat writable sections as data sections
  * [efi] Update to current EDK2 headers
  * [cloud] Add utility script to read iPXE output from INT13CON partition
  * [cloud] Add ability to overwrite existing AMI images
  * [eapol] Limit number of EAPoL-Start packets transmitted per attempt
  * [eapol] Delay EAPoL-Start while waiting for EAP to complete
  * [pci] Require discovery of a PCI device when determining usable PCI APIs
  * [pci] Check that ECAM configuration space is within reachable memory
  * [pci] Cache ECAM mapping errors
  * [pci] Handle non-zero starting bus in ECAM allocations
  * [pci] Force completion of ECAM configuration space writes
  * [iphone] Add missing va_start()/va_end() around reused argument list

-------------------------------------------------------------------
Mon Nov 20 12:32:04 UTC 2023 - Bernhard Wiedemann <bwiedemann@suse.com>

- Add 1082.patch to make ipxe.sdsk build reproducible (boo#1062303)

-------------------------------------------------------------------
Mon Nov  6 16:16:13 UTC 2023 - Dominique Leuenberger <dimstar@opensuse.org>

- Fix build with RPM 4.19: unnumbered patches are no longer
  supported.

-------------------------------------------------------------------
Wed Oct 18 16:08:11 UTC 2023 - Michal Suchanek <msuchanek@suse.com>

- Add floppy disk image.
  * use syslinux-mtools for building the image syslinux-mtools.patch

-------------------------------------------------------------------
Wed Oct 18 06:21:54 UTC 2023 - Michal Suchanek <msuchanek@suse.com>

- Update to version 1.21.1+git20231006.ff0f8604:
  * [libc] Use wall clock time as seed for the (non-cryptographic) RNG
  * [eapol] Send EAPoL-Start packets to trigger EAP authentication
  * [eap] Define a supplicant model for EAP and EAPoL
  * [dhcp] Request NTP server option
  * [ntp] Define NTP server setting
  * [efi] Provide read-only access to EFI variables via settings mechanism
  * [crypto] Add support for PKCS#8 private key format
  * [efi] Add support for executing images via a shim
  * [image] Generalise concept of selected image
  * [tls] Handle fragmented handshake records (jsc#PED-5536)
  * [params] Allow for arbitrary HTTP request headers to be specified
  * [rng] Allow entropy source to be selected at runtime
  * [efi] Support the initrd autodetection mechanism in newer Linux kernels
  * [loong64] Add initial support for LoongArch64
  * [efi] Enable NET_PROTO_LLDP by default
  * [dhcp] Ignore DHCPNAK unless originating from the selected DHCP server
  * [xen] Update to current Xen headers
  * [efi] Allow autoexec script to be located alongside iPXE binary
  * [efi] Accept a command line passed to an iPXE image via LoadOptions
  * [efi] Update to current EDK2 headers
  * [golan] Add new PCI ID for NVIDIA BlueField-3 network device
  * [arm] Support building as a Linux userspace binary for AArch64

-------------------------------------------------------------------
Wed Aug 23 21:47:48 UTC 2023 - Héctor Orón Martínez <hector.oron@gmail.com>

- enable HTTPS downloads (jsc#PED-5536)

-------------------------------------------------------------------
Mon Feb  6 17:47:32 UTC 2023 - Egbert Eich <eich@suse.com>

- cross-aarch64-gcc7 is not available for SLE-15 (i586).
  Also, there is no Leap port for i586, so let's disable aarch64
  cross-compile target on i586 (bsc#1207796).

-------------------------------------------------------------------
Mon Jan 23 14:43:38 UTC 2023 - Christian Goll <cgoll@suse.com>

- enable compressed images

-------------------------------------------------------------------
Fri Jan 20 19:42:52 UTC 2023 - msuchanek@suse.com

- Update to version 1.21.1+git20230120.a99e435c:
  * [efi] Do not rely on ProcessorBind.h when building host binaries (bsc#1207310)
  * multiple [ena] [efi] [tls] [intel] [intelxl] enhancements
  * [image] Do not clear current working URI when executing embedded image
  * [console] Fix definition of unreachability for remapped keys
  * [console] Add Swedish "se" keymap
  * [efi] Support keyboard remapping via the EFI console
  * [usb] Support keyboard remapping via the native USB keyboard driver
  * [ecm] Use ACPI-provided system-specific MAC address if present
- Build on all architectures (jsc#PED-1148)

-------------------------------------------------------------------
Thu Jan 19 13:31:56 UTC 2023 - Bernhard Wiedemann <bwiedemann@suse.com>

- Make bootimgs subpackage architecture-specific

-------------------------------------------------------------------
Mon Jun 20 08:35:31 UTC 2022 - Dominique Leuenberger <dimstar@opensuse.org>

- Use the default gcc version in Tumbleweed builds.

-------------------------------------------------------------------
Sun May 22 15:32:17 UTC 2022 - Ferdinand Thiessen <rpm@fthiessen.de>

- Update to version 1.21.1+git20210908.02ec659b:
  * [acpi] Generalise DSDT/SSDT data extraction logic
  * [efi] Record cached ProxyDHCPOFFER and PXEBSACK, if present
  * [efi] Use zero for PCI vendor/device IDs when no applicable ID exists
  * [cloud] Retry DHCP aggressively in AWS EC2
  * [efi] Match signtool expectations for file alignment
  * [libc] Allow for externally-defined LITTLE_ENDIAN and BIG_ENDIAN constants
  * [uri] Make URI schemes case-insensitive
  * [rdc] Add driver for RDC R6040 embedded NIC
  * [realtek] Work around hardware bug on RTL8211B
  * [cloud] Show ifstat output after a failed boot attempt
  * [peerdist] Assume that most recently discovered peer can be reused
- Fixes build on Leap
- Add workaround for building with GCC12 (Factory)

-------------------------------------------------------------------
Sun May 22 15:08:10 UTC 2022 - Ferdinand Thiessen <rpm@fthiessen.de>

- Fix version, base version, starting with 1.20.1+git20210604.065dce8d,
  was 1.21.1 not 1.20.1 as 1.21.1 was released December 2020.
  So current version is: 1.21.1+git20210614.bf4ccd42

-------------------------------------------------------------------
Thu Jun 17 09:12:05 UTC 2021 - Guillaume GARDET <guillaume.gardet@opensuse.org>

- Since last update, syslinux is required to build the ISO but
  it is available only on x86*, so disable ISO build for non-x86*

-------------------------------------------------------------------
Mon Jun 14 15:54:33 UTC 2021 - bwiedemann@suse.com

- Update to version 1.20.1+git20210614.bf4ccd42:
  * [build] Ensure build ID is deterministic (boo#1047218)
  * [efi] Veto the Itautec Ip4ConfigDxe driver
  * [libc] Match standard prototype for putchar()
  * [base64] Include terminating NUL within base64 character array
  * [rndis] Fix size of reserved fields

-------------------------------------------------------------------
Fri Jun 04 16:04:51 UTC 2021 - bwiedemann@suse.com

- use xorrisofs for creating iso
- Update to version 1.20.1+git20210604.065dce8d:
  * [ath5k] Avoid returning uninitialised data on EEPROM read errors
  * [crypto] Add memory output constraints for big-integer inline assembly
  * [build] Use SOURCE_DATE_EPOCH for isohybrid MBR ID if it exists
  * [build] Use SOURCE_DATE_EPOCH for .iso timestamps if it exists
  * [cpio] Split out bzImage initrd CPIO header construction
  * [x509] Use case-insensitive comparison for certificate names
  * [libc] Add strncasecmp()
  * [bnxt] Use hexadecimal values in PCI_ROM entries
  * [intel] Add PCI ID for I219-V and -LM 10 to 15
  * [image] Support archive image formats independently of "imgextract" command
  * [image] Propagate trust flag to extracted archive images
  * [image] Allow single-member archive images to be executed transparently
  * [undi] Read TSC only when profiling
  * [rng] Check for TSC support before using RTC entropy source
  * [prefix] Specify i486 architecture for LZMA decompressor
  * [gzip] Add support for gzip archive images
  * [zlib] Add support for zlib archive images
  * [image] Add "imgextract" command for extracting archive images
  * [image] Provide image_set_len() utility function
  * [cloud] Allow multiple images to be imported simultaneously
  * [cloud] Attempt to include CPUID_SETTINGS only for x86 builds
  * [cloud] Autodetect CPU architecture from AMI disk image
  * [cloud] Use a sortable default AMI name
  * [cloud] Add ability to generate Dokuwiki table of AMI images
  * [settings] Add --timeout option to "read" command
  * [readline] Add an optional timeout to readline_history()
  * [build] Fix genfsimg to build ISO with long filenames
  * [xen] Avoid infinite loop on allocation failure in xenstore_response()
  * [xen] Support scatter-gather to allow for jumbo frames
  * [int13] Do not report INT 13 extension support for emulated floppies
  * [cloud] Enable "poweroff" command in cloud images
  * [netdevice] Ensure driver transmit() and poll() will not be re-entered
  * [pci] Avoid scanning nonexistent buses when using PCIAPI_DIRECT
  * [intel] Add additional PCI device ID to table
  * [dhcp] Handle DHCPNAK by returning to discovery state
  * [linux] Do not assume that stat() works on sysfs files
  * [linux] Validate length of ACPI table read from sysfs
  * [linux] Place -lslirp at end of linker search list
  * [linux] Use fstat() rather than statx()
  * [linux] Use generic sysfs mechanism to read SMBIOS + ACPI tables
  * [linux] Add a generic function for reading files from sysfs
  * [linux] Free cached ACPI tables on shutdown
  * [dns] Reduce debug verbosity for DNS server list
  * [linux] Allow arbitrary settings to be applied to Linux devices
  * [linux] Add missing pci_num_bus() stub
  * [slirp] Add libslirp driver for Linux
  * [linux] Provide ACPI settings via /sys/firmware/acpi/tables
  * [acpi] Allow for platforms that provide ACPI tables individually
  * [acpi] Eliminate redundant acpi_find_rsdt() in acpi_sx()
  * [acpi] Use a fixed colour for debug messages
  * [linux] Use host glibc system call wrappers
  * [linux] Add a prefix to all symbols to avoid future name collisions
  * [bitops] Provide an explicit operand size for bit test instructions
  * [librm] Test for FXSAVE/FXRSTOR instruction support
  * [librm] Add missing __asmcall on init_idt()
  * [prefix] Add a generic raw image prefix
  * [initrd] Allow for zero-length initrd files
  * [cloud] Do not enable serial console on EFI platforms
  * [pxe] Split out platform-independent portions of cachedhcp.c
  * [ath5k] Add missing AR5K_EEPROM_READ in ath5k_eeprom_read_turbo_modes
  * [cloud] Enable IPv6 and HTTPS in cloud boot images
  * [cloud] Add utility for importing images to AWS EC2
  * [cloud] Use PCIAPI_DIRECT for cloud images
  * [ena] Switch to two-phase reset mechanism
  * [ci] Disable redundant scheduled execution of Coverity Scan
  * [ci] Disable Travis CI
  * [ci] Add GitHub action for Coverity Scan
  * [ci] Add GitHub action for build testing
  * [contrib] Update bochsrc.txt to work with current versions
  * [hermon] Add support for ConnectX-3 based cards
  * [autoboot] Avoid closing and immediately reopening network device
  * [hermon] Avoid parsing length field on completion errors
  * [hermon] Make hermon_dump_xxx() functions no-ops on non-debug builds
  * [hermon] Minimise reset time
  * [hermon] Throttle debug output when sensing port type
  * [hermon] Add a debug notice when initialization is complete
  * [hermon] Add support for port management event
  * [hermon] Adjust Ethernet work queue size
  * [hermon] Use reset value suitable for ConnectX-3
  * [hermon] Clean up whitespace in hermon.c
  * [iscsi] Update link to iBFT reference manual
  * [hermon] Limit link poll frequency in DOWN state
  * [hermon] Perform clean MPT unmap on device shutdown
  * [hermon] Use Ethernet MAC as eIPoIB local EMAC
  * [hermon] Increase polling rate for command completions
  * [hermon] Add event queue debug functions
  * [hermon] Increase command timeout from 2 to 10 seconds
  * [hermon] Add assorted debug error messages
  * [hermon] Show "issuing command" messages only at DBGLVL_EXTRA
  * [hermon] Reorganize PCI ROM list and document well-known product names
  * [golan] Backport typo fix in nodnic_prm.h: s/HERMON/NODNIC/
  * [arbel] Clean up whitespace in MT25218_PRM.h header
  * [hermon] Clean up whitespace in MT25408_PRM.h header
  * [image] Implicitly trust first embedded image
  * [infiniband] Require drivers to specify the number of ports
  * [ifmgmt] Make "ifstat" show the link-layer protocol for each netdev
  * [cmdline] Expose "iflinkwait" as a command
  * [image] Provide image_memory()
  * [travis] Update to current default build environment
  * [tftp] Allow for profiling of client and server turnaround times
  * [image] Add the "imgmem" command
  * [image] Provide image_set_data()
  * [ipv6] Defer router discovery timeout while link is blocked
  * [dhcp] Allow for links that remained blocked for up to three minutes
  * [eap] Treat an EAP Request-Identity as indicating a blocked link
  * [eapol] Replace EAPoL code
  * [dhcp] Continue transmitting DHCPDISCOVER while link is blocked
  * [isa] Add missing #include <config/isa.h>
  * [xhci] Avoid false positive Coverity warning
  * [xhci] Show meaningful error messages after command failures
  * [xhci] Fail attempts to issue concurrent commands
  * [smbios] Add support for the 64-bit SMBIOS3 entry point
  * [sfc] Update email addresses
  * [x509] Clarify debug message for an untrusted X.509 issuer
  * [golan] Add new PCI IDs
  * [iphone] Add iPhone tethering driver
  * [crypto] Allow private key to be specified as a TLS connection parameter
  * [tls] Include root of trust within definition of TLS session
  * [x509] Make root of trust a reference-counted structure
  * [x509] Record root of trust used when validating a certificate
  * [ocsp] Remove dummy OCSP certificate root
  * [http] Hide HTTP transport-layer filter implementation details
  * [asn1] Define ASN1_SHORT() for constructing short tagged values
  * [asn1] Rename ASN1_OID_CURSOR to ASN1_CURSOR
  * [asn1] Add constant for UTF-8 string tag
  * [tls] Allow provision of a client certificate chain
  * [tls] Use intf_insert() to add TLS to an interface
  * [interface] Provide intf_insert() to insert a filter interface
  * [interface] Ignore any attempts to plug in the null interface
  * [xhci] Update driver to use DMA API
  * [dma] Provide dma_umalloc() for allocating large DMA-coherent buffers
  * [netdevice] Fix misleading comment on netdev_rx()
  * [netdevice] Do not attempt to unmap a null I/O buffer
  * [dma] Move I/O buffer DMA operations to iobuf.h
  * [dma] Record DMA device as part of DMA mapping if needed
  * [dma] Modify DMA API to simplify calculation of medial addresses
  * [intelxl] Configure DMA mask as 64-bit
  * [intel] Configure DMA mask as 64-bit
  * [intelxl] Update driver to use DMA API
  * [intelxl] Read PCI bus:dev.fn number from PFFUNC_RID register
  * [intelxl] Read MAC address from PRTPM_SA[HL] instead of PRTGL_SA[HL]
  * [intel] Use physical addresses in debug messages
  * [realtek] Use physical addresses in debug messages
  * [intel] Update driver to use DMA API
  * [realtek] Update driver to use DMA API
  * [dma] Define a DMA API to allow for non-flat device address spaces
  * [malloc] Rename malloc_dma() to malloc_phys()
  * [realtek] Reset NIC when closing interface if using legacy mode
  * [infiniband] Allow SRP device to be described using an EFI device path
  * [fcp] Allow Fibre Channel device to be described using an EFI device path
  * [iscsi] Allow iSCSI device to be described using an EFI device path
  * [aoe] Allow AoE device to be described using an EFI device path
  * [http] Allow HTTP connection to be described using an EFI device path
  * [usbblk] Allow USB block device to be described using an EFI device path
  * [interface] Allow for the definition of an unused interface operation
  * [ipv6] Reduce time spent waiting for router discovery
  * [lacp] Ignore (and do not echo) trailing padding on received packets
  * [lacp] Detect and ignore erroneously looped back LACP packets
  * [usbblk] Add support for USB mass storage devices
  * [usb] Move usbio driver to end of USB driver list
  * [usb] Allow endpoints to be refilled to a specified upper limit
  * [usb] Allow device halt to be cleared independently of host controller
  * [ncm] Treat a zero divisor as indicating no alignment requirements
  * [usb] Avoid integer underflow on malformed string descriptors
  * [usb] Show debug message on device removal
  * [usb] Reset control endpoints immediately after failure
  * [pci] Update drivers to use pci_ioremap()
  * [pci] Define pci_ioremap() for mapping PCI bus addresses

-------------------------------------------------------------------
Tue Sep  1 09:55:13 UTC 2020 - Dirk Mueller <dmueller@suse.com>

- update url 

-------------------------------------------------------------------
Thu Aug 20 18:52:31 UTC 2020 - bwiedemann@suse.com

- Update to version 1.20.1+git20200817.ef2c844d:
  * [efi] Attempt NII initialisation both with and without cable detection
  * [efi] Use device path to locate filesystem from which we were loaded
  * [efi] Match EDK2 numbering for USB ports
  * [comboot] Fix stack pointer retrieval after COM32 binary returns
  * [efi] Check the status code from AllocatePool()
  * [cmdline] Add "--timeout" parameter to "ifconf" command
  * [intelx] Added PCI_ROM entry for Intel x553/x557-AT and x553 (SFP+) NICs
  * [intel] Set INTEL_NO_PHY_RST on i218v
  * [intel] Add INTEL_NO_PHY_RST for I218LM
  * [deflate] Fix typo in comment describing length codes
  * [build] Fix a GNUism that FreeBSD's sed(1) cannot deal with
  * [wpa] Fix erroneous debug message in wpa_derive_ptk
  * [libc] Fix memcmp() to return proper values
  * [pcbios] Take alignment into account when checking for available space
  * [pcbios] Fix "out of memory" detection when expanding bottom area
  * [libgcc] Change __divmoddi4 from int64 [unknown] to int64_t
  * [build] Fix default target in sdsk image
  * [dns] Use all configured DNS servers
  * [xfer] Remove address family from definition of a socket opener
  * [sfc] Add PCI ID for Solarflare SFC9120 and Solarflare SFC9140
  * [efi] Claim SNP devices early in efi_download_start()
  * [efi] Ensure NUL byte is at lowest address within stack cookie
  * [efi] Distribute available entropy within stack cookie
  * [libc] Add bit-rotation functions for unsigned long values
  * [efi] Avoid setting direction flag on EFI platforms
  * [libc] Provide an unoptimised generic_memcpy_reverse()
  * [crypto] Avoid temporarily setting direction flag in bigint_is_geq()
  * [usb] Leave port enabled after a failed device registration
  * [axge] Reapply USB device configuration when opening network device
  * [xhci] Increase link state settling delay to 100ms
  * [usb] Avoid unnecessary calls to usb_hub_set_drvdata()
  * [xhci] Set link state to RxDetect after disabling USB3 root hub port
  * [usb] Do not attempt to disable USB3 hub ports
  * [usb] Add missing usb_recycle() for completed hub interrupt transfers
  * [usb] Clear device endpoint halt before resetting host endpoint
  * [axge] Handle non-gigabit link speeds
  * [efi] Raise TPL during driver entry point
  * [efi] Detect and disable seriously broken EFI_RNG_PROTOCOL implementations
  * [build] Disable position-independent code for ARM64 EFI builds
  * [golan] Add explicit type casts for nodnic_queue_pair_type
  * [intel] Avoid spurious compiler warning on GCC 10
  * [build] Be explicit about -fcommon compiler directive
  * [ocsp] Accept SHA1 certID responses even if SHA1 is not enabled
  * [efi] Enable stack protection where possible
  * [parseopt] Treat empty integer strings in user input as invalid
  * [util] Treat empty integer strings as invalid
  * [snp] Retry initialisation if link is reported as down
  * [crypto] Disable MD5 as an OID-identifiable algorithm by default
  * [crypto] Ensure that test code drags in required ASN.1 object identifiers
  * [crypto] Allow algorithms to be included without being OID-identifiable
  * [tls] Default to supporting only TLSv1.1 or above
  * [tls] Allow a minimum TLS protocol version to be specified
  * [efi] Attempt to connect our driver directly if ConnectController fails
  * [uri] Avoid appearing to access final byte of a potentially empty string
  * [efi] Work around UEFI specification bug in LoadImage for SAN boot
  * [efi] Work around UEFI specification bug in LoadImage
  * [png] Fix potential integer overflow
  * [bnxt] Add driver support for Broadcom NetXtreme-E Adapters
  * [efi] Disambiguate errors returned by ConnectController
  * [int13con] Create log partition only when CONSOLE_INT13 is enabled
  * [bios] Define macros for constructing partition table entries
  * [iscsi] Eliminate variable-length stack allocation in URI parsing
  * [iscsi] Eliminate variable-length stack allocations in CHAP handlers
  * [settings] Eliminate variable-length stack allocation
  * [slam] Allow for the possibility of IPv6 multicast addresses
  * [slam] Eliminate variable-length stack allocation
  * [infiniband] Eliminate variable-length stack allocation
  * [tftp] Eliminate unnecessary variable-length stack allocation
  * [travis] Ensure that most recent tag is always available
  * [build] Construct full version number automatically from git revision
  * [snp] Set EFI_SIMPLE_NETWORK_RECEIVE_MULTICAST bit as per UEFI spec
  * [snp] Try promiscuous multicast receive filter if the regular one fails
  * [peerdist] Allow for the use of a hosted cache server
  * [peerdist] Allow PeerDist to be globally enabled or disabled

-------------------------------------------------------------------
Tue Jul 21 13:19:27 UTC 2020 - Guillaume GARDET <guillaume.gardet@opensuse.org>

- Enable build on aarch64

-------------------------------------------------------------------
Fri Oct 25 12:34:08 UTC 2019 - Alberto Planas Dominguez <aplanas@suse.com>

- Update cross compiler to GCC 9
- Change the git address from _service to use HTTPS
- Replace %doc to %license

-------------------------------------------------------------------
Fri Oct 25 12:28:49 UTC 2019 - aplanas@suse.com

- Update to version 1.0.0+git20190929.3fe683eb:
  * [lan78xx] Always enable automatic speed and duplex detection
  * [efi] Do not attempt EFI_USB_IO_PROTOCOL transfers during shutdown
  * [efi] Report failed control transfers as expected by the USB core
  * [golan] Fix address-of-pointer bug for multicast attach/detach
  * [ethernet] Avoid false positive Coverity warning
  * [coverity] Override assumptions about wcrtomb() and hmac_init()
  * [crypto] Profile the various stages of modular multiplication
  * [crypto] Drag in configured digestInfo prefixes for any use of RSA
  * [tls] Add missing call to tls_tx_resume() when restarting negotiation
  * [peerdist] Limit number of concurrent raw block downloads

-------------------------------------------------------------------
Thu Sep 12 11:59:33 UTC 2019 - bwiedemann@suse.com

- Update to version 1.0.0+git20190817.0b3000bb:
  * [golan] Fix address-of-pointer bug for multicast attach/detach
  * [ethernet] Avoid false positive Coverity warning
  * [coverity] Override assumptions about wcrtomb() and hmac_init()
  * [crypto] Profile the various stages of modular multiplication
  * [crypto] Drag in configured digestInfo prefixes for any use of RSA
  * [tls] Add missing call to tls_tx_resume() when restarting negotiation
  * [peerdist] Limit number of concurrent raw block downloads
  * [peerdist] Start block download timers from within opener methods
  * [process] Add PROC_INIT() for initialising static processes
  * [build] Add predefined shortcut for Raspberry Pi builds
  * [build] Workaround compilation error with gcc 9.1
  * [build] Fix "'%s' directive argument is null" error
- Drop obsolete/upstream patches:
  * ipxe-aarch64-inline-asm-const-modifier.patch
  * ipxe-efi-guard-strncpy-with-gcc-warning-ignore-pragma.patch
  * ipxe-efi-recognize-plt32-relocation.patch

-------------------------------------------------------------------
Tue Nov 27 07:44:32 UTC 2018 - eich@suse.com

- Make sure correct cross-gcc version is picked:
  * For Leap15/SLE15: gcc7
  * For oS Factory and TW: gcc8

-------------------------------------------------------------------
Fri Oct 12 15:16:39 UTC 2018 - jjolly@suse.com

- Enable bin-arm64-efi/snp.efi cross-compile build
  This allows to boot an arm box from an x86_64 system.
- Add ipxe-aarch64-inline-asm-const-modifier.patch
  * Fixes aarch64 build error with inline assembly output modifier

-------------------------------------------------------------------
Thu Aug 23 14:55:18 UTC 2018 - jjolly@suse.com

- Add snp-i386.efi and snp-x86_64.efi to package for using EFI's
  network drivers (e.g. used by warewulf)

-------------------------------------------------------------------
Tue Aug 21 13:29:25 UTC 2018 - jjolly@suse.com

- Add ipxe-efi-recognize-plt32-relocation.patch (boo#1105510)

-------------------------------------------------------------------
Mon Jun 18 12:58:11 UTC 2018 - bwiedemann@suse.com

- Add ipxe-efi-guard-strncpy-with-gcc-warning-ignore-pragma.patch (boo#1090355)

-------------------------------------------------------------------
Sun Feb 18 12:38:31 UTC 2018 - jengelh@inai.de

- Trim redundancies. Do mention presence of EFI programs.

-------------------------------------------------------------------
Fri Feb 16 15:30:16 UTC 2018 - dmueller@suse.com

- reduce build requires
- update license

-------------------------------------------------------------------
Fri Feb 16 10:44:22 UTC 2018 - bwiedemann@suse.de

- Drop upstream 0001-arch-i386-Check-for-no-pie-gcc-option-as-well.patch
- Update to version 1.0.0+git20180203.546dd51d:
  * [intel] Work around broken reset mechanism in i219 devices
  * [xhci] Assume an invalid PSI table if any invalid PSI value is observed
  * [ena] Fix spurious uninitialised variable warning on older versions of gcc
  * [netdevice] Make netdev_irq_enabled() independent of netdev_irq_supported()
  * [tg3] Add support for SerDes PHY initialization
  * [skel] Remove MII interface
  * [ena] Add driver for Amazon ENA virtual function NIC
  * [build] Avoid use of "ld --oformat binary"
  * [legal] Add missing FILE_LICENCE declarations
  * [image] Omit URI query string and fragment from download progress messages
  * [http] Report unsuccessful response status lines at DBGVL_LOG
  * [http] Include error messages for 4xx and 5xx response codes
  * [xen] Skip probing of any unsupported device types
  * [intel] Add PCI device ID for X550-T2
  * [http] Add support for NTLM authentication
  * [http] Handle parsing of WWW-Authenticate header within authentication scheme
  * [http] Gracefully handle offers of multiple authentication schemes
  * [ntlm] Add support for NTLM authentication mechanism
  * [crypto] Add MD4 message digest algorithm
  * [crypto] Eliminate repetitions in MD5 round constant table
  * [crypto] Fix endianness typo in comment
  * [efi] Allow for building with older versions of elf.h system header
  * [efi] Accept (and ignore) R_ARM_V4BX relocations
  * [crypto] Fail fast if cross-certificate source is empty
  * [efi] Inhibit our driver Start() method during disconnection attempts
  * [build] Exclude selected directories from Secure Boot builds
  * [efi] Continue to connect remaining handles after connection errors
  * [exanic] Add PCI device ID for another X40 variant
  * [exanic] Power up optical PHYs (if present)
  * [dns] Ensure DNS names are NUL-terminated when used as diagnostic strings
  * [efi] Match behaviour of SnpDxe for truncated received packets
  * [efi] Check buffer length for packets retrieved via our SNP protocol
  * [dns] Report current DNS query as job progress status message
  * [resolv] Use pass-through interfaces for name resolution multiplexer
  * [netdevice] Add "hwaddr" setting
  * [peerdist] Gather and report peer statistics during download
  * [monojob] Display job status message, if present
  * [downloader] Allow underlying downloads to provide detailed job progress
  * [job] Allow jobs to report an arbitrary status message
  * [monojob] Check for job progress only once per timer tick
  * [netdevice] Cancel all pending transmissions on any transmit error
  * [efi] Raise TPL when calling UNDI entry point
  * [linux] Impose receive quota on tap driver
  * [malloc] Avoid false positive warnings from valgrind
  * [romprefix] Avoid unaligned accesses within ROM headers
  * [intel] Add various PCI device IDs
  * [shell] Enable "shell" command even when BANNER_TIMEOUT is zero
  * [hyperv] Do not steal ownership from the Gen 2 UEFI firmware
  * [acpi] Fix spurious uninitialised-variable warning on some gcc versions
  * [acpi] Compute and check checksum for ACPI tables
  * [build] Fix ARM32 EFI builds with current EDK2 headers
  * [build] Fix use of inline assembly on GCC 4.8 ARM64 builds
  * [build] Conditionalise use of -mabi=lp64 for ARM64 builds
  * [efi] Enumerate PCI BARs in same order as SnpDxe
  * [lan78xx] Add driver for Microchip LAN78xx USB Ethernet NICs
  * [smsc75xx] Expose functionality shared with LAN78xx devices
  * [smscusb] Allow for alternative PHY register layouts
  * [smscusb] Move non-inline register access functions to smscusb.c
  * [virtio] Support VIRTIO_NET_F_IOMMU_PLATFORM
  * [smscusb] Add ability to read MAC address from OTP
  * [smsc75xx] Use common SMSC USB device functionality
  * [smsc95xx] Use common SMSC USB device functionality
  * [smscusb] Abstract out common SMSC USB device functionality
  * [intel] Add support for I219-V in 7th Gen Intel NUC
  * [tls] Support RFC5746 secure renegotiation
  * [mucurses] Avoid potential division by zero
  * [usb] Use non-zero language ID to retrieve strings
  * [exanic] Add driver for Exablaze ExaNIC cards
  * [crypto] Expose pem_asn1() for use with non-image data
  * [crypto] Provide asn1_built() to construct a cursor from a builder
  * [crypto] Expose asn1_grow()
  * [crypto] Expose RSA_CTX_SIZE constant
  * [cpuid] Allow input %ecx value to be specified
  * [ecm] Display invalid MAC address strings in debug messages
  * [build] Use -no-pie on newer versions of gcc
  * [intel] Add INTEL_NO_PHY_RST for I219-V
  * [usb] Allow for USB network devices with no interrupt endpoint
  * [hdprefix] Avoid attempts to read beyond the end of the disk
  * [syslog] Handle backspace characters

-------------------------------------------------------------------
Sun May 28 09:49:47 UTC 2017 - mchandras@suse.de

- Update snapshot to ipxe-1.0.0+git20170523.356f6c1b. Some of the changes are:
  * [acpi] Expose ACPI tables via settings mechanism
  * [efi] Provide access to ACPI tables
  * [acpi] Make acpi_find_rsdt() a per-platform method
  * [efi] Prevent EFI code from being linked in to non-EFI builds
  * [block] Provide abstraction to allow system to be quiesced
  * [intel] Do not enable ASDE on i350 backplane NIC
  * [block] Allow use of a non-default EFI SAN boot filename
  * [thunderx] Use ThunderxConfigProtocol to obtain board configuration
  * [linux] Fix building with kernel 4.11 headers
  * [build] Avoid implicit-fallthrough warnings on GCC 7
  * [http] Notify data transfer interface when underlying connection is ready
  * [block] Describe all SAN devices via ACPI tables
  * [block] Add basic multipath support
  * [vxge] Fix use of stale I/O buffer on error path
  * [pcnet32] Eliminate redundant register read
  * [rtl818x] Fix resource leak on error path
  * [sis190] Avoid NULL pointer dereference
  * [w89c840] Avoid potential array overrun
  * [tcp] Use correct length for memset()
  * [usb] Use correct length for memcpy()
  * [ath] Add missing break statements
  * [infiniband] Return status code from ib_create_mi()
  * [infiniband] Return status code from ib_create_cq() and ib_create_qp()
  * [mucurses] Attempt to fix resource leaks
  * [mucurses] Attempt to fix keypress processing logic
  * [mucurses] Attempt to fix test for empty string
  * [802.11] Remove redundant NULL pointer check after dereference
  * [nfs] Fix double free bug on error path
  * [xfer] Ensure va_end() is called on failure path
  * [arbel] Avoid potential integer overflow when calculating memory mappings
  * [hermon] Avoid potential integer overflow when calculating memory mappings
  * [thunderx] Don't disable NIC when exiting from iPXE
  * [thunderx] Fix hardware deinitialization
  * [http] Cleanly shut down potentially looped interfaces
  * [intel] Add INTEL_NO_PHY_RST for I219-LM (2)
  * [int13] Test correct return status from INT 13 calls
  * [int13] Avoid potential division by zero
  * [pic8259] Fix definitions for "read IRR" and "read ISR" commands
  * [cloud] Show CPU vendor and model in example cloud boot scripts
  * [netdevice] Allow MTU to be changed at runtime
  * [virtio] Use host-specified MTU when available
  * [virtio] Use separate RX and TX empty header buffers
  * [virtio] Remove queue size limit in legacy virtio
  * [virtio] Simplify virtqueue shutdown
  * [virtio] Cap queue size to MAX_QUEUE_NUM
- Add patch to enable -no-pie when building i386 binaries. This was only
  triggered recently since the gcc-7.1.1 started using -fpie by default
  * 0001-arch-i386-Check-for-no-pie-gcc-option-as-well.patch

-------------------------------------------------------------------
Thu Sep  1 15:34:40 UTC 2016 - mchandras@suse.de

- Initial commit. We only build and package the iPXE boot images for now

