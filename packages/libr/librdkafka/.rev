<revisionlist>
  <revision rev="1" vrev="1">
    <srcmd5>83faa87970b3d931a644d6861aa608d5</srcmd5>
    <version>0.11.6</version>
    <time>1544095165</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>655553</requestid>
  </revision>
  <revision rev="2" vrev="2">
    <srcmd5>1c5d346aaa448f8cdeada15b036b6a2e</srcmd5>
    <version>0.11.6</version>
    <time>1544539689</time>
    <user>dimstar_suse</user>
    <comment>- Don't BuildRequire lz4 on SLE12
- Do not use %make_build which is not available on SLE12</comment>
    <requestid>656799</requestid>
  </revision>
  <revision rev="3" vrev="3">
    <srcmd5>9f213c360f5eb394f3777aa1cabc152c</srcmd5>
    <version>0.11.6</version>
    <time>1545141425</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>658073</requestid>
  </revision>
  <revision rev="4" vrev="1">
    <srcmd5>f8e7fed56bcb56dd1e3b57b699002504</srcmd5>
    <version>1.1.0</version>
    <time>1567849823</time>
    <user>dimstar_suse</user>
    <comment>- update to 1.1.0:
  * SASL OAUTHBEARER support
  * In-memory SSL certificates (PEM, DER, PKCS#12) support
  * Pluggable broker SSL certificate verification callback
  * ssl.endpoint.identification.algorithm=https (off by default) to validate
    the broker hostname matches the certificate. Requires OpenSSL &gt;= 1.0.2.
  * Improved GSSAPI/Kerberos ticket refresh
  * SSL peer (broker) certificate verification is now enabled by default
    (disable with enable.ssl.certificate.verification=false)
  * %{broker.name} is no longer supported in sasl.kerberos.kinit.cmd since
    kinit refresh is no longer executed per broker, but per client instance.
  * SASL GSSAPI/Kerberos: Don't run kinit refresh for each broker,
    just per client instance.
  * SASL GSSAPI/Kerberos: Changed sasl.kerberos.kinit.cmd to first attempt
    ticket refresh, then acquire.
  * SASL: Proper locking on broker name acquisition.
  * Consumer: max.poll.interval.ms now correctly handles blocking poll calls,
    allowing a longer poll timeout than the max poll interval.
  * configure: Fix libzstd static lib detection
  * rdkafka_performance: Fix for Misleading &quot;All messages delivered!&quot; message
- update to version 1.0.1:
  * Fix consumer stall when broker connection goes down
  * Fix AdminAPI memory leak when broker does not support request
  * Update/fix protocol error response codes
  * Treat ECONNRESET as standard Disconnects
- update to version 1.0.0:
  * This release changes configuration defaults and deprecates a set
    of configuration properties, make sure to read the Upgrade considerations
    section from https://github.com/edenhill/librdkafka/releases/tag/v1.0.0
  * add support for Idempotent Producer, providing exactly-once</comment>
    <requestid>728486</requestid>
  </revision>
  <revision rev="5" vrev="2">
    <srcmd5>154989af2c1881cbcb9e6c73b548207d</srcmd5>
    <version>1.1.0</version>
    <time>1573165285</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>746377</requestid>
  </revision>
  <revision rev="6" vrev="1">
    <srcmd5>7a760818188b097cdd46ce4409a59de4</srcmd5>
    <version>1.3.0</version>
    <time>1585995565</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>790014</requestid>
  </revision>
  <revision rev="7" vrev="1">
    <srcmd5>0f057397ed9d21134e785690eb066b89</srcmd5>
    <version>1.5.0</version>
    <time>1598983470</time>
    <user>dimstar_suse</user>
    <comment>- Update library v1.3.0 -&gt; 1.5.0
 * Improved broker connection error reporting with more useful information and
   hints on the cause of the problem.
 * Consumer: Propagate errors when subscribing to unavailable topics (#1540)
 * Producer: Add `batch.size` producer configuration property (#638)
 * Add `topic.metadata.propagation.max.ms` to allow newly manually created
   topics to be propagated throughout the cluster before reporting them
   as non-existent. This fixes race issues where CreateTopics() is
   quickly followed by produce().
 * Prefer least idle connection for periodic metadata refreshes, et.al.,
   to allow truly idle connections to time out and to avoid load-balancer-killed
   idle connection errors (#2845)
 * Added `rd_kafka_event_debug_contexts()` to get the debug contexts for
   a debug log line (by @wolfchimneyrock).
 * Added Test scenarios which define the cluster configuration.
 * Added MinGW-w64 builds (@ed-alertedh, #2553)
 * `./configure --enable-XYZ` now requires the XYZ check to pass,
   and `--disable-XYZ` disables the feature altogether (@benesch)
 * Added `rd_kafka_produceva()` which takes an array of produce arguments
   for situations where the existing `rd_kafka_producev()` va-arg approach
   can't be used.
 * Added `rd_kafka_message_broker_id()` to see the broker that a message
   was produced or fetched from, or an error was associated with.
 * Added RTT/delay simulation to mock brokers.
 * Subscribing to non-existent and unauthorized topics will now propagate
   errors `RD_KAFKA_RESP_ERR_UNKNOWN_TOPIC_OR_PART` and
   `RD_KAFKA_RESP_ERR_TOPIC_AUTHORIZATION_FAILED` to the application through
   the standard consumer error (the err field in the message object).
 * Consumer will no longer trigger auto creation of topics,
   `allow.auto.create.topics=true` may be used to re-enable the old deprecated</comment>
    <requestid>830730</requestid>
  </revision>
  <revision rev="8" vrev="1">
    <srcmd5>86d76c943dabf596e3ca0f443dfd4d1b</srcmd5>
    <version>1.5.2</version>
    <time>1604609592</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>845629</requestid>
  </revision>
  <revision rev="9" vrev="1">
    <srcmd5>d57b1a7734283f7bff1afff7dd90468f</srcmd5>
    <version>1.5.3</version>
    <time>1608729677</time>
    <user>dimstar_suse</user>
    <comment>- update to 1.5.3:
 * Fix a use-after-free crash when certain coordinator requests were retried.
 * Consumer would not filter out messages for aborted transactions
   if the messages were compressed (#3020).
 * Consumer destroy without prior `close()` could hang in certain
   cgrp states (@gridaphobe, #3127).
 * Fix possible null dereference in `Message::errstr()` (#3140).
 * The `roundrobin` partition assignment strategy could get stuck in an
   endless loop or generate uneven assignments in case the group members
   had asymmetric subscriptions (e.g., c1 subscribes to t1,t2 while c2
   subscribes to t2,t3).  (#3159)</comment>
    <requestid>858094</requestid>
  </revision>
  <revision rev="10" vrev="1">
    <srcmd5>56b64529781699a08cd58229e6baf591</srcmd5>
    <version>1.6.1</version>
    <time>1619552052</time>
    <user>dimstar_suse</user>
    <comment>- update to 1.6.1:
  * Fatal idempotent producer errors are now also fatal to the transactional
   producer. This is a necessary step to maintain data integrity prior to
   librdkafka supporting KIP-360. Applications should check any transactional
   API errors for the is_fatal flag and decommission the transactional producer
   if the flag is set.
  * The consumer error raised by `auto.offset.reset=error` now has error-code
   set to `ERR__AUTO_OFFSET_RESET` to allow an application to differentiate
   between auto offset resets and other consumer errors.
  * Admin API and transactional `send_offsets_to_transaction()` coordinator
   requests, such as TxnOffsetCommitRequest, could in rare cases be sent
   multiple times which could cause a crash.
  * `ssl.ca.location=probe` is now enabled by default on Mac OSX since the
   librdkafka-bundled OpenSSL might not have the same default CA search paths
   as the system or brew installed OpenSSL. Probing scans all known locations.
  * Fatal idempotent producer errors are now also fatal to the transactional
   producer.
  * The transactional producer could crash if the transaction failed while
   `send_offsets_to_transaction()` was called.
  * Group coordinator requests for transactional
   `send_offsets_to_transaction()` calls would leak memory if the
   underlying request was attempted to be sent after the transaction had
   failed.
  * When gradually producing to multiple partitions (resulting in multiple
   underlying AddPartitionsToTxnRequests) sub-sequent partitions could get
   stuck in pending state under certain conditions. These pending partitions
   would not send queued messages to the broker and eventually trigger
   message timeouts, failing the current transaction. This is now fixed.
  * Committing an empty transaction (no messages were produced and no
   offsets were sent) would previously raise a fatal error due to invalid state</comment>
    <requestid>888420</requestid>
  </revision>
  <revision rev="11" vrev="1">
    <srcmd5>1a01c94bc90ad851566fa88bada2118d</srcmd5>
    <version>1.7.0</version>
    <time>1624626067</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>901440</requestid>
  </revision>
  <revision rev="12" vrev="1">
    <srcmd5>3cca3622b9332b96ee1dab3e08c59616</srcmd5>
    <version>1.8.0</version>
    <time>1635717332</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>928127</requestid>
  </revision>
  <revision rev="13" vrev="1">
    <srcmd5>675a8874dfb1c4eea2b1a054db0d35c0</srcmd5>
    <version>1.8.2</version>
    <time>1642633912</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>946807</requestid>
  </revision>
  <revision rev="14" vrev="1">
    <srcmd5>38d87d217a13d57983c2769037f4ee26</srcmd5>
    <version>1.9.2</version>
    <time>1663764098</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>1004569</requestid>
  </revision>
  <revision rev="15" vrev="1">
    <srcmd5>e59063c590224474aceda07c42db9113</srcmd5>
    <version>2.0.2</version>
    <time>1675177719</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>1062038</requestid>
  </revision>
  <revision rev="16" vrev="1">
    <srcmd5>0e2ee30cf8f96db2ab84a85582eb7000</srcmd5>
    <version>2.1.0</version>
    <time>1683111381</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>1083981</requestid>
  </revision>
  <revision rev="17" vrev="1">
    <srcmd5>094cb63e2b53f47a374335c711ff61ec</srcmd5>
    <version>2.1.1</version>
    <time>1684490089</time>
    <user>dimstar_suse</user>
    <comment>- update to 2.1.1:
  * Avoid duplicate messages when a fetch response is received
  * in the middle of an offset validation request
  * Fix segmentation fault when subscribing to a non-existent
    topic and calling `rd_kafka_message_leader_epoch()` on the polled
    `rkmessage`
  * Fix a segmentation fault when fetching from follower and the
    partition lease expires while waiting for the result of a list offsets
    operation
  * Fix documentation for the admin request timeout, incorrectly
    stating -1 for infinite
  * timeout. That timeout can't be infinite.
  * Fix CMake pkg-config cURL require and use
  * pkg-config `Requires.private` field
  * Fixes certain cases where polling would not keep the consumer
  * in the group or make it rejoin it
  * Fix to the C++ set_leader_epoch method of TopicPartitionImpl,
  * that wasn't storing the passed value
  * Duplicate messages can be emitted when a fetch response is
    received in the middle of an offset validation request. Solved by
    avoiding a restart from last application offset when offset validation
    succeeds.
  * When fetching from follower, if the partition lease expires
    after 5 minutes, and a list offsets operation was requested
    to retrieve the earliest or latest offset, it resulted in
    segmentation fault. This was fixed by allowing threads different
    from the main one to call the `rd_kafka_toppar_set_fetch_state`
    function, given they hold the lock on the `rktp`.
  * In v2.1.0, a bug was fixed which caused polling any queue to
    reset the `max.poll.interval.ms`.</comment>
    <requestid>1087789</requestid>
  </revision>
</revisionlist>
