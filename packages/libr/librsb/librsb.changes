-------------------------------------------------------------------
Tue Jun 17 10:41:29 UTC 2025 - Jan Engelhardt <jengelh@inai.de>

- Add cxx.patch

-------------------------------------------------------------------
Mon Feb  6 15:48:31 UTC 2023 - Jan Engelhardt <jengelh@inai.de>

- Update to release 1.3.0.2
  * rsb_coo_sort: fix crash on nr==0 (now will silently accept).
  * Fix a format error on long indices on 32-bit architectures.

-------------------------------------------------------------------
Sat Jul 16 20:13:42 UTC 2022 - Jan Engelhardt <jengelh@inai.de>

- Update to release 1.3.0.1
  * rsb.h: additional input checks in rsb_mtx_rndr().
  * rsb.hpp: additional input checks in the C++ wrappers.
  * No more unaligned memory access with `rsbench
    --read-performance-record` (fix for armhf,sparc64 architectures).

-------------------------------------------------------------------
Thu Apr 21 10:20:35 UTC 2022 - Jan Engelhardt <jengelh@inai.de>

- Update to release 1.3.0.0
  * Considerably improved performance of rsb_spmm()/usmm() via
    new kernels (can be turned off at runtime by setting
    'RSB_WANT_RSBPP=0' in the environment).
  * Added a C++ API (classes RsbMatrix and RsbLib) in new header
    <rsb.hpp>.
  * Environment variable 'RSB_NUM_THREADS' now used by default
    (implicit configure '--enable-rsb-num-threads').
  * Fixed integer overflow situations with limit-large matrices.
  * Improved parallelism of rsb_spmv()/rsb_spmm() a bit (no
    overly strict locking).
  * Improved performance of rsb_spmv()/rsb_spmm() beta-scaling.

-------------------------------------------------------------------
Tue Nov  2 20:24:59 UTC 2021 - Jan Engelhardt <jengelh@inai.de>

- Update to release 1.2.0.10
  * rsb_spmm(...,RSB_FLAG_WANT_ROW_MAJOR_ORDER,...) internals had
    swapped ldB and ldC so having ldB > ldC could lead to a
    crash; with ldC < ldB, to wrong results.
  * rsb_spmm(...,RSB_FLAG_WANT_ROW_MAJOR_ORDER,...) on matrix
    with RSB_FLAG_UNIT_DIAG_IMPLICIT could have computed wrong
    results.
  * rsb_tune_spmm()/rsb_tune_spsm() could have crashed if called
    with order==RSB_FLAG_WANT_ROW_MAJOR_ORDER and auto leading
    dimensions and implicit operands (ldB==0 and Bp==NULL, ldC==0
    and Cp==NULL).
  * rsb_mtx_get_rows_sparse() with: was ignoring
    RSB_TRANSPOSITION_C.

-------------------------------------------------------------------
Thu Dec 24 12:33:02 UTC 2020 - Jan Engelhardt <jengelh@inai.de>

- Update to release 1.2.0.9
  * Fixed: rsb_mtx_rndr(..RSB_MARF_EPS) and
    rsb_file_mtx_rndr(..RSB_MARF_EPS): could crash on
    uniform-values matrix input.
  * Fixed: rsb_spmsp was crashing if result matrix has nnz<=rows
  * Fixed: BLAS_zusaxpy and BLAS_cusaxpy in C were crashing
  * Fixed: rsb_sppsp() was ignoring transB and could crash on
    transA

-------------------------------------------------------------------
Thu Mar  5 16:24:51 UTC 2020 - Jan Engelhardt <jengelh@inai.de>

- Update to release 1.2.0.8
  * bugfix: rsb_spmv/rsb_spmm/BLAS_cusmv/BLAS_zusmv/BLAS_cusmm/
    BLAS_zusmm could compute wrong values in transpose or
    conjugated transpose on very sparse complex hermitian
    matrices.

-------------------------------------------------------------------
Thu Jul 12 05:02:16 UTC 2018 - bwiedemann@suse.com

- Add reproducible.patch and set an explicit memory hierarchy
  to make build reproducible (boo#1100677)

-------------------------------------------------------------------
Tue Dec 26 14:10:41 UTC 2017 - jengelh@inai.de

- Update to new upstream release 1.2.0~rc7
  * bugfix: rsb_spmv/rsb_spmm/BLAS_cusmv/BLAS_zusmv/BLAS_cusmm/
    BLAS_zusmm could compute wrong values on complex hermitian
    matrices if rhs imaginary part non null.
  * bugfix: complex conjugated transpose
    rsb_spsv/rsb_spsm/BLAS_cussv/BLAS_zussv/BLAS_cussm/BLAS_zussm
    could compute wrong values if rhs imaginary part non null.
  * bugfix: rsb_sppsp/rsb_mtx_clone would compute scaled
    conjugate of complex matrices wrong if alpha imaginary part
    non null.
  * might detect a forgotten rsb_lib_init() at first matrix
    allocation and return an error.

-------------------------------------------------------------------
Sat Apr 29 23:53:40 UTC 2017 - jengelh@inai.de

- Update to new upstream release 1.2.0~rc6
  * BLAS_zusget_element & co will behave one-based in Fortran.
  * rsb_sppsp was summing incorrectly certain non-overlapping
    sparse matrices.
  * rsb_file_mtx_save and rsb_file_vec_save's output use
    full-precision.
- Add pun.diff

-------------------------------------------------------------------
Thu Oct 20 23:10:35 UTC 2016 - jengelh@inai.de

- Update to new upstream release 1.2.0~rc5
* Fixed EPS rendering of matrices, e.g.
  `./rsbench --plot-matrix -aRzd -f matrix.mtx >matrix.eps`
- Drop shlib.diff (applied upstream)

-------------------------------------------------------------------
Wed Jun  8 21:11:26 UTC 2016 - jengelh@inai.de

- Update to new upstream release 1.2.0~rc3
* Extension: if parameter flagsA of mtx_set_vals() has
  RSB_FLAG_DUPLICATES_SUM, then values will be summed up into the
  matrix.
* Bugfix: rsb_mtx_get_nrm on symmetric matrices was buggy.
* Bugfix: rsb_spsm potentially wrong in --enable-openmp and
  (nrhs>1). (ussm affected)
* Bugfix: rsb_spsm wrong in --disable-openmp version and
  (nrhs>1). (ussm affected)
* Bugfix: rsb_spsm used to scale only first rhs when (*alphap!=1
  and nrhs>1). (ussm affected)
* Bugfix: rsb_spsm used to solve only first rhs when (y != x).
  (ussm not affected)
* Bugfix: rsb_spmm used to scale only first rhs when (*betap!=1
  and nrhs>1). (usmm not affected)
* Bugfix: rsb_tune_spmm/rsb_tune_spsm returned (false positive)
  error on ( mtxAp != NULL && mtxOpp != NULL ) rather than on (
  mtxAp != NULL && mtxOpp != NULL && *mtxOpp != NULL ).
* Will use memset() on systems with no bzero() (e.g. mingw).

-------------------------------------------------------------------
Sun Jan 17 14:15:30 UTC 2016 - jengelh@inai.de

- Initial package (versoin 1.2.0~rc2) for build.opensuse.org
