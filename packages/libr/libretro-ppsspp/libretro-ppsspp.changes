-------------------------------------------------------------------
Fri Apr 23 10:42:21 UTC 2021 - obs-service-tar-scm@invalid

- Update to version 0~git20210422:
  * Debugger: Show string in status bar for li, etc.
  * Io: Prevent error on bad handle for DevType().
  * Debugger: Prompt with previous search string.
  * Debugger: Mark ELF sections as suballocations.
  * Core: Correct ValidSize outside scratchpad.
  * Replacing the inconvenient prefix string for indentation with indent number.
  * Fix missing hex string at the last row when data size is a multiple of 16 bytes
  * GE Debugger: Keep dump generation deterministic.
  * Buildfixes
  * Update our miniupnp fork to upstream.
  * Reporting: Avoid generated homebrew IDs.
  * Oops
  * Don't even bother checking touch.id == 0 for closing popup windows. It's fine to close with any touch.
  * Remove now-redundant back button
  * Change pointer ID allocation on iOS. Fixes part of #14240
  * UI: Load BG image properly on init.
  * Io: Calculate memory stick size on a thread.
  * Module: Speed up module unload.
  * Core: Init memory on multiple threads.
  * Module: Process relocations on threads.
  * Module: Process relocations using unchecked reads.
  * GE Debugger: Thread dedupe pushbuf lookups.
  * Common: Set a min size on threadpool work chunks.
  * Common: Allow threadpool size up to 16.
  * Umd: Fix thread wakeup.
  * Fix defaults for io threading and vertex cache
  * Remove duplicate from hardcoded settings
  * whitespace nit
  * Reorder core options
  * Further core options and defaults
  * Add defaults and core options
  * SaveState: Use memmove for the copy.
  * SaveState: Use SIMD to copy RAM faster.
  * SaveState: Copy RAM using threads.
  * Fix libretro build
  * jit: Increase the cycle cost of div.s.
  * jit: Increase the cycle cost of VFPU ops.
  * jit: Count delay slot cycles separately.
  * An attempt to detects getifaddrs availability properly
  * Changing warning log to info log on GetIPList
  * Added additional includes for GetIPList to work on Linux/Unix
  * Added warning log for testing purpose on GetIPList function
  * Rtc: Cleanup and simplify date struct handling.
  * Build: Recompress pngs using better zlib.
  * UI: Compress atlas metadata.
  * UI: Compress zim files with zstd.
  * UI: Load/save compressed atlas metadata.
  * UI: Add zstd to ZIM compression handling.
  * GE Debugger: Use zstd for save states.
  * SaveState: Switch to zstd.
  * Build: Add libzstd to build.
  * Enable save encryption to bring libreto in line with standalone configuration defaults.
  * UI: Remove extern global for UI message.
  * GPU: Stop using Off as terminator for postshaders.
  * Reporting: Add more info to libstubend error.
  * Module: Add a missing error return case.
  * Kernel: Define most reported missing kernel funcs.
  * GLES: Always use fragColor0 on GL 3.0+.
  * Reporting: Log more data about sceIoChStat().
  * GPU: Avoid switch on uint.
  * Shaders: Set vert shaders to mediump by default.
  * GLES: Handle GLSL 1.30/1.40 better.
  * Dialog: Reset last status more consistently.
  * Dialog: Lock volatile on thread.
  * Dialog: Use a thread to init dialogs too.
  * Utility: Add a helper for the active dialog.
  * Utility: Update logging to new syntax for dialogs.
  * Utility: Move dialog classes to heap.
  * Debugger: Add APIs to set/list/search mem tags.
  * UI: Show more detailed load error messages.
  * GPU: Preconvert light vecs to Vec3f.
  * Disable spvremapper from glslang by default, we don't use it.
  * UI: Oops, prioritize PIC1, not PIC0.
  * Debugger: Provide memory mapping ranges.
  * Debugger: Return detail for breakpoints in macros.
  * Debugger: Add simple API to control tagging detail.
  * Update glslang_UWP.vcxproj
  * Forgot to return on invalid address, and moving reusable code out of HLE to prevent generating confusing logs
  * Ooops wrong way to do random range
  * minor fix
  * Randomize signal strength between 1%~99% since games like MGS:PW are using signal strength to determine the strength of the recruit
  * Fix stuck issue when scanning AP for Recruit on MGS:PW
  * UI: Don't include symbols in recent games anim.
  * UI: Centralize BG pic choosing a bit.
  * UI: Add BG animation for recent games.
  * UI: Flip Y analog direction based on config.
  * Windows: Normalize left and right analog stick.
  * UI: Log analog movement at a lower treshold.
  * Debugger: Maintain atrac data source info.
  * Debugger: Note atrac/sas reads from memory more.
  * Debugger: Tag savedata load and info.
  * Debugger: Memcheck and tag loading savedata to RAM.
  * Deflt: Correct available input length.
  * Deflt: Trigger memchecks / log source of writes.
  * Deflt: Cleanup and refactor to one common func.
  * Debugger: Note writes from debugger.
  * Dmac: Invalidate source data before copy.
  * Debugger: Include src tag in Memory::Memcpy.
  * Debugger: Include framebuffer in framebuf pack tag.
  * Debugger: Note GPU block transfer src as well.
  * Debugger: Include source tag in memcpys.
  * Debugger: Include filename in file IO memory tags.
  * Debugger: Make memory tags longer.
  * Debugger: Add menu to jump to begin/end of alloc.
  * Fix crashing issue when leaving a multiplayer game room #14337
  * revert filename prefix for reducehashranges
  * Prevent flooding the logs with repeated attempts of Adding/Removing port mapping due to failure in the middle of UPnP initialization, as it needs to be reinitialized.
  * Attempts to reconnect to Adhoc Server only when Creating/Joining/Connecting to a group or Scanning for groups, instead of on 2 seconds interval.
  * Shows PSP error code as hex to be easier to find
  * Show the socket error code when failed to connect to adhoc server
  * Use a function to check for loopback address
  * UI: Fix savedata screen sorting.
  * fix: cleaned up my comment
  * feat: reduceHash configuration
  * Set ent_top/ent_size/stub_top/stub_size of SceModule
  * yet another gradle update
  * Fix Window size issue #14317
  * PPGe: Remove ENTR hack, fix string concat.
  * Savedata: Always write the file list to the SFO.
  * Windows: Avoid segfault if memory except on boot.
  * Core: Limit scan for functions to end of valid RAM.
  * Core: Unbreak ValidSize limits.
  * PPGe: Interpret invalid UTF-8 sequences better.
  * PPGe: Apply overlong handling to wrapped text too.
  * Add missing rule in .gitlab-ci.yml
  * (Libretro/Gitlab) Add osx x64 target
  * Update .gitlab-ci.yml
  * Update lang submodule
  * Add a setting for choosing background animation.
  * Build: Simplify by always including FakeCPUDetect.
  * Build: Remove "fake" vertex decoder jit.
  * Add missing -DWITH_UPNP in a couple more places.
  * Windows: Enable UPNP again after 14304
  * UTF-8 PPGe: Remove overlong encodings. Work around a weird issue in Ratchet & Clank. See issue #14297
  * Fix build with USE_MINIUPNPC=OFF
  * VertexDecoderFake: Fix build
  * CMake: Fix build when ENABLE_SPVREMAPPER=OFF
  * CMake: Don't include X11 headers when compiling for FBDEV
  * Disable range culling in Asphalt 2. See #14299
  * Module: Correctly handle modules with -1 entry.
  * Debugger: Ignore small memory info by default.
  * Fix performance regression from failing to optimize the new mem tracker..
  * GitHub: Add multiple issue templates w/checklists.
  * Fix character's Side Space ltn0.pgf/ltn4.pgf
  * Android: Fix "Load..." to allow all file types. Change backported from PR #14232
  * Fix FlatOut Head On multiplayer.
  * Debugger: Fix save state compat for slab info.
  * Debugger: Add header for strlen.
  * Further std::string removal
  * Remove static assert on struct size, we don't really care that much.
  * Buildfix
  * Remove std::string from memblockinfo
  * Additional indentation fix (forgot to save file)
  * Indentation fixes
  * Android: Add a dependency on the AndroidX appcompat library.
  * Fix Teenage Mutant Ninja Turtles Multiplayer. Alternatively, changing NET_SHUTDOWN_DELAY_US to 501000 usec or more will also works.
  * Warning fix, memleak fix
  * SDL: Fix use after free on shutdown
  * Only do the workaround in #14273 in Vulkan. May help #14280
  * Some homebrew like Triple Triad tries to load flash0:/kd/pspnet*.prx. We better just lie.
  * Couple warning fixes.
  * GLSL vulkan: Specify the precision of function arguments. Works around #14269
  * Work around crash in texture replacement. See #14252
  * PipelineManagerVulkan: Log shader source when pipeline creation fails.
  * Fix bug in vertex shader generator. See #14260.
  * Switch: Workaround several missing toolchain defs.
  * Switch: Disable multi-instance tracking.
  * Allow polygon upscaling in Boku no Natsuyasumi series via IntraVRAMBlockTransferAllowCreateFB hack.
  * Update assets/lang
  * UI: Add search to savedata manager.
  * UI: Fix L/R tab navigation.
  * Build: Remove force include CMake line.
  * GPU: Ignore replacements for framebufs.
  * Build: More consistently avoid _M_ defines.
  * Build: Remove old ARM define.
  * Build: Remove MIPS define.
  * Build: Remove IOS define.
  * Build: Explicitly include ppsspp_config.h.
  * SaveState: Automatically fix duplicate event types.
  * Fix double space again
  * Fix typo
  * Module: Avoid logging bad pointers when no nids.
  * PPGe: Reload atlas on load state if different.
  * Only remove tha CMake line for Apple.
  * iOS: Try a different JIT detection method, thanks Halo-Michael.
  * Time to remove this line in CMakeLists.txt now.
  * Tweak to jit detection based on feedback to #14201
  * Windows: Stop using 1234 default unused paths.
  * UI: Wrap long info items.
  * Core: Handle Disc ID a bit more consistently.
  * Core: Use homebrew disc IDs/titles when available.
  * Removing TCPNoDelay option from Networking Settings and always enable it to improve response time.
  * Replacing the deprecated gethostbyname function with getaddrinfo function to prevent getting deprecated warnings
  * Making sure there are no warnings related to deprecated inet_ntoa function
  * Mpeg: Allow full use of the buffer queue.
  * GPU: Dirty texparams when cropping a self-copy.
  * Windows: Add missing header for menu.
  * GPU: Normalize zero consistently in hw transform.
  * GE Debugger: Correct powered diffuse display.
  * GPU: Normalize 0 to 1 always in software lighting.
  * GPU: Look up replaced filtering options.
  * Replacement: Read in texture filtering overrides.
  * Windows: Setting for standard/debugger shortcuts.
  * Dialog: Use dialog type header more consistently.
  * Comment cleanup, allow file picker as far back as KitKat.
  * Address feedback, remove probably-misleading comment (had already fixed it).
  * Dialog: Respect accessThread priority on shutdown.
  * Screenshot: Provide common params properly.
  * HLE: Correct helper thread arg handling.
  * Dialog: Track type id on dialog class.
  * Savedata: Eat cycles in savedata shutdown start.
  * Fix exit "race", add persistable permissions
  * Android: Implement opening ISOs through a file picker and Storage Access Framework
  * Add a Storage tab to System Information.
  * mipsjit: Correct inheritance/compilation.
  * jit: Avoid using mips identifier directly.
  * SaveState: Fix Snappy build error on older clang.
  * GPU: Revert stencil discard workaround change.
  * GPU: Update SPIRV-Cross to 2021-01-15.
  * Fix Size & Position jpn0.pgf/ltn0.pgf/ltn2.pgf/ltn4.pgf/ltn6.pgf
  * SaveState: Avoid some warnings in Snappy.
  * SaveState: Update to Snappy 453942b.
  * GPU: Use stencil discard workaround w/o depth test.
  * Mpeg: Correct stream buffer wrapping, cleanup.
  * (libretro) Fix static makefile
  * Don't even try the hack on iOS 14.4
  * Add iOS version detection, turn off JIT on bootup if >= 14.3.
  * UI: Require buttons always have text.
  * UI: Expose lists better in descriptions.
  * UI: Omit invisible views from viewgroup describe.
  * UI: Lock only if mutating views.
  * UI: Add text description for all views.
  * UI: Rename Describe() method for logging.
  * UnitTest: call InitVFPUSinCos() to set vfpu_* function pointers
  * CMake: enable testing
  * CMake: add TestShaderGenerators source back to unitTest
  * Mpeg: Set low latency flag for video decode.
  * SaveState: Delay restart handling until end frame.
  * SaveState: Start new events at end properly.
  * glslang: Update to latest glslang.
  * Making sure the port is bound to an interface when using bind with INADDR_ANY. Seems to fix #14130
  * Minor changes.
  * Minor AdhocMatching changes.
  * Making sure src_addr and addrlen args of recvfrom is being set correctly upon use.
  * Shows a warning on Screen when detecting AdhocMatching data coming from an incorrect port, progressing any further may ended with connection issue. Players will need to wait until the port detected correctly before progressing any further (may takes a few more seconds)
  * Shows a warning log when bound port is shifted to negative port (may cause port issue when wrapped to 1024 or lower on android)
  * Hook open season
  * TexCache: Check for videos rendered as slices.
  * Module: Block a few network modules already HLE'd.
  * sceKernelFindModuleByName:Add delay for Fake module
  * Debugger: Keep char *s for memchecks.
  * Mpeg: Assume 29.97 if bad frame rate returned.
  * Mpeg: Prevent sending flush packets to decode.
  * Atrac: Update to latest FFmpeg packet pump.
  * Update the discord-rpc submodule to the latest version.
  * iOS: Undo app ID change.
  * iOS: Fix multitouch tracking.
  * GPU: Rotate screenshot framebuffer per display.
  * Only consider the actual PPGe texture in kernel ram reliable.
  * SDL: Init profiler on SDL/Qt.
  * GPU: Correct more vertex/index endian swaps.
  * HLE: Swap endian in matrix multiply replacement.
  * Global: Correct many endian types and casts.
  * UWP: Disable SDLChecks, which error on deprecated.
  * Windows: Stop ignoring all deprecated warnings.
  * Windows: Run OSK/chat input box asynchronously.
  * Mpeg: Remove request_probe usage in newer FFmpeg.
  * Mpeg: Update videos to latest FFmpeg packet pump.
  * Mpeg: Clarify fallback problems.
  * Mpeg: Correct stream detection in newer FFmpeg.
  * Audiocodec: Update to latest FFmpeg packet pump.
  * Mpeg: Use direct pts value checks in newer FFmpeg.
  * AVI: Update to latest FFmpeg packet pump.
  * AVI: Avoid deprecated ffmpeg context usage.
  * Mpeg: Remove deprecated codec register calls.
  * libretro: Always use CONTINUOUS flipping.
  * TestVertexJit: fmodf() definition requires math.h
  * UnitTest: test that the function pointer for vfpu_sincos() is non-null
  * Fix "Enable chat" in Linux Qt build
  * Windows: Reduce camera state locks.
  * UI: Divert background only on change.
  * UI: Correct tweens repeatedly finishing.
  * UI: Use atomic to check for events.
  * UI: Avoid PathBrowser lock with no remote files.
  * Draw: Auto ref/release bound textures/samplers.
  * Windows: Enable chat when selecting Enable Chat.
  * Io: Allow early cancel of CRC calculation.
  * Reporting: Block for CRC calc on shutdown.
  * UI: Show CRC on game screen if calculated.
  * GPU: Prevent memory fault when no framebuf yet.
  * UI: Add button to show CRC on feedback screen.
  * Dialog: Unlock volatile without Update call.
  * CMake: use vendor GL implementations by setting CMP0072 to NEW
  * GPU: Remove clear framebuf on first use speedhack.
  * UI: Consider chat for visible UI.
  * UI: Make chatButton_ a member of EmuScreen.
  * UI: Avoid audio locks where possible.
  * Turn funcreplacments on in libretro builds. See #12322
  * Debugger: Prevent thread errors on mem alloc info.
  * Debugger: Correct crash with no alloc tag.
  * Debugger: Correct merging fragmented blocks.
  * Debugger: Update status on scroll down.
  * Debugger: Fix memory lookup in mirrors/uncached.
  * Debugger: Show memory tag info in status bar.
  * Debugger: Extend tag background on select too.
  * Debugger: Highlight memory ranges in memory view.
  * Debugger: Reorganize memory view painting.
  * Debugger: Ignore unmarked mem block info in find.
  * Debugger: Add initial UI for mem info type.
  * Debugger: Correct search by empty string.
  * Debugger: Optimize linear marking.
  * Debugger: Track slabs by end, not size.
  * Debugger: Defer memory map calculations.
  * Debugger: Speed up lookup using an index.
  * GPU: Cleanup comment.
  * Debugger: Track ticks of allocation/write/etc.
  * Debugger: Track texture usage too.
  * Debugger: Mark framebuffers as VRAM allocations.
  * Debugger: Notate Memcpys directly as well.
  * Debugger: Notate memset tags directly.
  * Debugger: Track memory allocations and writes.
  * Debugger: Specifically tag relocations.
  * Debugger: Notate more cases of memory clears.
  * Debugger: Log access reason on memory breakpoint.
  * Debugger: Add more metadata for memory usage.
  * Mpeg: Correct incorrect upload size return.
  * Rename the FuncReplacements setting to effectively reset it for everyone.
  * libretro: Always use SKIP_FLIP.
  * Display: Change default unthrottle mode on non-Win.
  * Dialog: Clear volatile memory on unlock.
  * Usb: Implement state waits.
  * Experimenally turn off the debug symbols again - see if this helps the buildbot
  * Debugger: Cleanup swprintf() usage.
  * GPU: Correct some field shadowing.
  * Windows: Prevent some virtual dtor warnings.
  * Global: Cleanup class init order warnings.
  * Windows: Correct some variable init warnings.
  * D3D11: Fail if uniform buffer create fails.
  * Global: Remove some unused variables.
  * Windows: Remove unused file.
  * Headless: Add test paths for CMake on Windows.
  * CMake: Correct headless build on Windows.
  * CMake: Correct build on Windows.
  * Update gradle. Enable automatic debug symbol upload for release builds.
  * libretro: Remove "Unsafe FuncReplacements" option. See #12322
  * Fix many symbols on jpn0.pgf.
  * Windows: Fix some const type conversion warnings.
  * Windows: Make InputDevice destructor virtual.
  * GPU: Fix a type comparison warning.
  * Windows: Use CommonWindows more consistently.
  * Windows: Fix some format warnings.
  * Windows: Add some missing override specifiers.
  * Common: Include unistd.h before ctime on mingw.
  * Common: Fix AVX check on mingw/lower targets.
  * Build: Use ws2_32 and iphlpapi names directly.
  * Windows: Fix improper case or missing includes.
  * Update version to 1.11.2
  * compat.ini: GachiTora requires block transfer
  * Android: Ensure shutdown waits for render.
  * Build: Cache Qt during Actions run.
  * Build: Allow on actions test branch.
  * Debugger: Invalidate when using memory APIs.
  * Don't assert on invalid format in CwCheat.
  * Io: Truncate reads/writes to valid memory.
  * Update lang submodule
  * Add some checks trying to prevent creation of 0 sized textures.
  * GPU: Force reinterpret off without copy image.
  * Revert (partially) "compat.ini: Add Split/Second to [ReinterpretFramebuffers]. See #13957"
  * Some GLSL compilers are very particular about the sign of shift operands..
  * Update version to 1.11.1
  * Slight simplification in LogoScreen
  * Update README.md for 1.11.1
  * Fix lobby issue on The Warriors, probably also fix similar issue on other games too.
  * Update zh_CN and zh_TW
  * Debugger: Option to skip mem hacks in memory dump.
  * Windows recvfrom doesn't support MSG_TRUNC, so we're using dummy buffer with max size as alternative for peeking actual size of the next pending message.
  * Fix frozen (0 FPS) issue on Kao Challengers and Asterix & Obelix XX (probably also fix other games from the same developer with similar issue) https://github.com/hrydgard/ppsspp/issues/14103
  * Assorted paranoid cleanups, inspired by #14082
  * Remove a completely unnecessary check in BackgroundAudio.cpp that caused glitching at 44.1khz.
  * Update lang submodule (it_IT updates)
  * SaveState: Prevent crash on bad cookie marker.
  * Rename the new warmup variable from #14091
  * Only allow sceMpegGetAvcAu warmup for God Eater Series
  * Remove now-redundant check
  * GL: Call CreateDeviceObjects *after* updating render_.
  * Buildfix
  * Cause the correct type of exception. Never ignore EXEC_ADDR exceptions.
  * Handle exec addr errors better - don't let IgnoreBadMemoryAccesses skip dispatcher exceptions.
  * mipsjit: Fix basic compilation.
  * Jit: Fix compilation of FakeJit.
  * Add more games to ReportSmallMemStick
  * Savedata: Show save icons with proper aspect ratio.
  * Savedata: Show corrupted data more clearly.
  * PPGe: Decimate early if kernel alloc fails.
  * PPGe: Decimate text images properly.
  * Update version to 1.11
  * Do the title screen animation by accumulator instead, to avoid a long first frame breaking it.
  * GPU: Force texture invalidation for ZHP minimap.
  * Update lang,pspautotests submodules
  * Run the link script, fixups
  * Run the link script
  * Thread: Log error waiting already waiting thread.
  * Thread: Log error when delaying a waiting thread.
  * Removing hleDelayResult from internal adhoc functions to prevent waking up thread that supposed to be blocked by the outer HLE.
  * Updated some Logs to help finding the location of the call to debug.
  * Sas: Minor clenaup.
  * CoreTiming: Ensure we never idle into the past.
  * PPGe: Clear text allocations on shutdown.
  * PPGe: Fallback to atlas text on alloc fail.
  * Debugger: Populate funcs if disassembly open early.
  * Fix jpn0.pgf characters position.
  * Fix possible race condition issue.
  * Moving hleDelayResult from internal function of SetSocketAlert to prevent waking up HLE-blocked thread
  * Minor renaming
  * We don't really need to allocate a buffer when using MSG_TRUNC on recvfrom
  * Windows: Prevent crash on null symbol map.
  * Core: Reset state properly on CPU init failure.
  * Make a couple of UI animations refresh rate independent
  * UI: Correct developer tools test run.
  * Updated PdpStat to prevent rcv_sb_cc from exceeding the buffer size arg (since we use larger buffer size to prevent micro stutters or disconnection issue due to too many dropped packets with small buffer size). TODO: May need to improve it to be able to calculate the correct size if there are multiple datagram messages
  * Fix possible lock issue during AdhocMatchingStart
  * (.gitlab-ci.yml) Add linux-i686 and windows-i686 targets (+ prevent creation of 'null' file when building Windows libretro cores)
  * More stuff in README.md
  * More from unknown and sum2012
  * List fixed games. Thanks sum2012
  * Address initial feedback by iota97
  * Update README.md for 1.11
  * Updated PdpStat and PtpStat
  * vertexjit: Only save extra regs on x64.
  * Core: Assert debug stats remain positive.
  * vertexjit: Correct saved registers on x64.
  * Audio: Avoid left shift when resampling.
  * Core: Maintain frame dump disc ID in SFO.
  * Loaders: Prevent errors on 0 byte reads.
  * SaveState: Load misaligned wide strings properly.
  * Common: Maintain C++11 support in sign extend.
  * Have the flat shading workaround obey the driver workarounds checkbox
  * Fix minor rendering glitch in PPSSPP's menus on iOS
  * Add checkbox to enable/disable driver bug workarounds.
  * Add a new command in developer tools to list and load framedumps from framedump.ppsspp.org/repro/
  * Framedump test screen. Downloads a list of framedumps.
  * Common: Sign extend w/func not chained casts.
  * Ge: Restore saved context when ending a list.
  * Ge: Improve some logging and memchecks.
  * Mpeg:Only allow firmware >= 6 for warmup
  * Vulkan: Fix image layout issues after compute shader uploads.
  * Io: Consistently use LE values of ISO entries.
  * Only force the log level if it set via an argv
  * jit: Be very clear on sign extension.
  * Core: Correct branch analysis truncation.
  * Vertex cache minihash: Round up the starting address to a multiple of 4.
  * Fix Apple gpu detection
  * Attempt to fix #14022
  * Fix logging flags
  * x64Emitter: Fix unaligned store UBSAN errors
  * jpge.cpp: Remove malloc.h include
  * Update ext/jpge
  * Fix left shift of negative value in MIPSCodeUtils
  * Minimize the Adreno shader compiler bug repro test
  * Fix connection issue on Dynasty Warriors (Shin Sangoku Musou) games when playing with more than 2 players.
  * jit: Make branch shift more obvious.
  * Fix alignment issues in ISOFileSystem
  * Fix Russian characters ltn8~15.pgf
  * CMake: Fix UBSAN link error
  * CMake: Rename USE_ADDRESS_SANITIZER to USE_ASAN
  * CMake: Add USE_UBSAN
  * Try to build fix on non-windows
  * Mpeg:Only allow firmware >= 3 for warmup
  * (.gitlab-ci.yml) Add windows-x64 target
  * FindFFmpeg: Fix a few issues
  * gitlab ci change requested by m4xw
  * Fix Greek characters ltn0~7.pgf
  * Specify MaxScale=2 for the new MMPX texture scaling shader
  * Vulkan: Allow tex shaders to specify a max scale.
  * Vulkan: Add MMPX upscaling texture shader.
  * Remove duplicates from ThreadManForKernel
  * Mp3: Correct logging for init.
  * Updated GameMode initial data sync, in case remote players aren't listening yet when sending initial data (fix Pocket Pool)
  * Mp3: Always keep sample rate from original mp3.
  * Add back XCode TARGETED_DEVICE_FAMILY config line
  * Mp3: Allow decode without pcm pointer.
  * Mp3: Correct error handling for newer sdk versions.
  * GLES: Remove direct khrplatform.h header include.
  * Add header information
  * sceMp3Init:Add layerBits and versionBits information
  * Don't allow ForcedFirstConnect hack when using PtpConnect within PtpOpen to prevent returning result from blocking PtpConnect instead of result of PtpOpen.
  * Reporting: Expose CRC queue methods for other uses.
  * D3D9: Don't allow separate alpha clears.
  * GPU: Respect stencil write mask for 5551 buffers.
  * GE: Better naming of render passes for color reinterpret
  * Umd: Disallow waiting on status that can't occur.
  * Umd: Wake waiting threads on eject/insert.
  * Umd: Delay common wait drive stat funcs.
  * Io: Don't allow async close while async busy.
  * Fix duplicate shader version in the flat shader test
  * OpenGL fragment shader gen: Fix precision inconsistency for v_color0/1.
  * Fix returned error code on PtpSend and PtpRecv when socket is not connected yet.
  * Do PtpConnect internally during PtpOpen, since some games (ie. The Warriors) seems to do PtpSend immediately after PtpOpen without trying to PtpConnect first.
  * Fix Greek characters & Roman numbers & all balance on jpn0.pgf
  * Resample only in 32000Hz
  * Plugins: Enable by default.
  * compat.ini: Add Split/Second to [ReinterpretFramebuffers]. See #13957
  * PPGe: Scale down by worst of window/internal res.
  * build fix
  * Some marks position fixed on jpn0.pgf
  * Fix Russian (Cyrillic alphabet) on jpn0.pgf.
  * Resample all mp3
  * Oops! I misstook uploading jpn0.pgf.
  * PGF Fixed Bold & Italic property and camouflage the Font name.
  * Kernel: Adjust sceKernelGetThreadExitStatus timing.
  * Debugger: Include all press states for convenience.
  * Debugger: Broadcast ctrl input events.
  * Debugger: Add API to trigger buttons.
  * Compat: Enable reinterpret for Kingdom Hearts.
  * Vulkan: Prevent scaling shader leak.
  * Dialog: Simulate volatile memory lock behavior.
  * Dialog: Manage status only through accessors.
  * Power: expose volatile memory lock/unlock funcs.
  * GPU: Fix safe size checks when rect offscreen.
  * Headless: Default to PNG for ppdmp tests.
  * Headless: Simplify executing a ppdmp via headless.
  * Headless: Disable http disk cache.
  * Headless: Allow PNGs and http:// for screenshot.
  * Headless: Read expected file as a FileLoader.
  * Headless: Allow screenshot compare without backend.
  * HLE: Hook Worms text render copy func.
  * GL FB readback: Only use "inout" if we actually want to read from the fb.
  * More GPU test improvements
  * Compat: Note that 3 LEGO games those are require Buffered rendering
  * Add texture to flat shaded test.
  * Adds two new tests to GPU driver test screen: Adreno shader logic test and flat shading
  * CMake fixes and new --ios-xcode ./b.sh command.
  * There's little reason to build at O3, so let's just not. Changing to O2.
  * Vulkan: Delete only created swapchain images.
  * SoftGPU: Fix sprite provoking vertex in fast path.
  * Module: Keep the state for each import.
  * Headless: Allow connecting the web debugger.
  * Compat: Note that Gradius requires block transfer.
  * Remove re-test each month
  * Module: Keep HI16/LO16 in a temp state object.
  * Module: Reverse a single HI16/LO16 pair correctly.
  * Fix Stuck issue on some games (Dissidia 012, Full Auto 2, etc) when Failed to connect to Adhoc Server (faked success)
  * VK: Re-apply the old Adreno driver bug workaround. Fixes #13910.
  * Make sure we don't try to set a negative viewport size.
  * Update Template
  * Enable BlockTransferAllowCreateFB for Gradius Collection
  * PGF Re-Fixed Euro Characters
  * irjit: Update clobber flag on inst swap.
  * irjit: Add disable flag for simplify passes.
  * Android: Add NEON/SSE funcs into Headless/UnitTest.
  * Build: Validate unittest/headless on Android.
  * Android: Fix headless and unittest build.
  * Fix copy/paste typo causing crash getting tempdirs if an env var had no value
  * GPU: Correct shader gen with weights as floats.
  * FixPGF for Euro Characters.(Balance emphasis)
  * UI: Cleanup Windows header in MainScreen.cpp.
  * http: Prevent Windows header leak from HTTPClient.
  * Windows: Handle fullscreen message consistently.
  * irjit: Fix mtv for INF4.
  * irjit: Correct flags for SetCtrlVFPUReg.
  * jit: Fix conditional disable flags.
  * Improve some i18n things
  * Enable using the folder browser on Android to select SD card through a gross hack.
  * Add a file picker (WIP)
  * Use the same logic of game setting for main menu full screen, add other system
  * Manually tighten up the layout a bit in the top right corner
  * Add a fullscreen toggle button to the main screen (Windows-only for now)
  * Try another method for getting SD card storage paths (env vars).
  * Reducing AdhocMatching events delay to prevent matchingEvents from piling up on Lord of Arcana.
  * Send AdhocMatching Data from within HLE whenever possible instead of through matchingEvent Thread.
  * Prevent access violation when running out of userMemory due to piling up AdhocMatching events.
  * Add game ID for russian version of Tron Evolution
  * Add 3 games to ForceMax60FPS
  * Add more error checking in SD storage detection
  * add assets to ubuntu build artifact
  * UI: Prevent self-powerdown check on load new game.
  * Core: Properly stop on abrupt shutdown.
  * Android: Minor cleanup.
  * Remove redundant method from PathBrowser.cpp
  * Fixes for SD card detection on slightly older devices.
  * UI tweaks
  * Use hacky methods to retrieve SD card directory if available.
  * Add home button on all platforms
  * Add some new icons.
  * Fix adding extra new line on checkbox change
  * Save on game start
  * iOS: Change iOS 13 check.
  * Savedata: Reduce some noisy logging.
  * cmake: Silence warning.
  * Adding games to RequireBufferedRendering that cause black screen when not enabled
  * Compat.ini cleanup to add missing IDs and remove unused ones from latest version
  * Add Missing game IDs for Tekken 6
  * Initialize/Deinitialize the shader translation system once globally.
  * Savedata: Prevent garbage bleeding into save icons.
  * Revert "Bleach Soul Carnival. Disable the "First Frame Readback" compat setting."
  * Never pass a null into QueueDeleteImageView (got a report of that).
  * UI: Use "Details" for upgrade outside Win/Android.
  * SaveState: Allow rewind on mobile.
  * Postshader: Improve error reporting.
  * Vulkan: Remove #10097 hack for newer AMD drivers.
  * Bleach Soul Carnival. Disable the "First Frame Readback" compat setting.
  * GPU: Be careful with color write mask precision.
  * GPU: Ignore color write mask if unusable.
  * Windows: Prevent hang on shutdown.
  * D3D11: Avoid crash if debug/info queue unavailable.
  * Build: Include Windows ARM64 in builds too.
  * headless: Fix Windows ARM64 build.
  * Windows: Fix miniupnpc build on ARM64.
  * iOS: Expose iOS 12.1+/13/14 buttons.
  * UWP: Don't try compiling samplerjit.
  * Build: Run software backend for tests.
  * GPU: Remove NULL GPU.
  * Headless: Always use at least software rendering.
  * SoftGPU: Allow rendering with no backend at all.
  * UWP: Allow software renderer.
  * SoftGPU: Update PPGe draw context.
  * Readme script update
  * Psmf: Fix a potential leak on shutdown.
  * GPU: Correct some incorrect deallocations.
  * Common: Correct some formatting type mismatches.
  * http: Ignore signals on recv() too.
  * http: Cleanup excessive logging.
  * Android: Remove old NDK profiler.
  * Common: Fix logging shutdown race condition.
  * Debugger: Fix some type conversion warnings.
  * Windows: Fix some type conversion warnings.
  * Net: Remove static declarations from h file.
  * Build: Remove Travis in favor of GitHub Actions.
  * Build: Reference test as file on failure.
  * Build: Auto skip on documentation only changes.
  * Build: Disable fast fail to see all build errors.
  * Build: Skip SDL2 dependency for mobile platforms.
  * Build: Include PPSSPPSDL on macOS for debugging.
  * Build: Run tests on Linux and macOS.
  * Build: Install specific Android NDK.
  * Build: Install SDL2 dependency.
  * Build: Ensure yml use tabs.
  * Build: Add CMake to GitHub Actions.
  * Build: Enable graphics tests.
  * Build: Explicitly depend on miniupnpc.
  * Build: Add test execution.
  * Build: Add GitHub Actions workflow.
  * Headless: Add specific GitHub Actions logging.
  * Headless: Cleanup TeamCity handling in test.py.
  * Euro characters Fixed in jpn0.pgf.
  * Ipega PG-9118 	modified:   assets/gamecontrollerdb.txt
  * If we are reporting a small memstick size, but data is bigger, lie.
  * Debugger: Correct a type error.
  * SaveState: Make event restoring more obvious.
  * Debugger: Cleanup some syntax.
  * Debugger: Add helper to read strings.
  * Debugger: Add API to read/write chunks of memory.
  * Debugger: Cleanup memory.read/write validation.
  * http: Prevent assert on bad websocket data.
  * Corrects the calculation of the return value when the callback of RingbufferPut returns a negative value.
  * Using MSG_TRUNC along with MSG_PEEK as a precaution of a possible buffer overflow when peeking recv buffer.
  * Revert "Merge pull request #13807 from unknownbrackets/ios-buttons"
  * An attempt to add BlockTransferAllowCreateFB for Naruto Shippuden: Ultimate Ninja Impact
  * Instance: add missing headers more POSIX systems
  * FileSystems: add missing header
  * Linux: ignore missing MAP_NORESERVE on FreeBSD
  * Split the DepthRangeHack compat setting into itself and DisableRangeCulling
  * http: Treat buffer full flush correctly.
  * http: Wait less time for IPv6 if IPv4 succeeds.
  * Fix layout problem on crash screen. Fixes #13808
  * Fixed an issue where sometimes a player unable to join a host on Warriors Orochi 2 (should also fix similar issue on other games that use PDP/UDP on Windows)
  * Close the port immediately when closing a socket.
  * iOS: Expose iOS 12.1+ buttons.
  * Revert "Cleaner exit on Windows. Will hopefully help #13325"
  * Typo
  * Fix Grand Theft Auto - Vice City Stories
  * Mpeg: Add warm up staff
  * Android: Fix text color in dialogs by just inheriting from the DeviceDefault theme.
  * UWP StorageFileLoader: Remove some excessive logging.
  * Temporary workaround for Wipeout Pure lens flare flicker.
  * UWP: Work around another race condition in StorageFileLoader.
  * UWP: Fix dialog rendering (PPGe).
  * UWP: Make the home button say "Home" instead of "Browse...".
  * Forget this one HLE_KERNEL_SYSCALL
  * Add some ThreadManForKernel nis
  * Folder browsing on main screen: Prevent navigating "up" when you can't.
  * UWP: Make the home button say "Home" instead of "Browse...".
  * PathBrowser: Show simplified version of paths under the memstick dir.
  * Fix navigation upwards from a pinned game streaming folder. Fixes #13224.
  * Update ffmpeg submodule to a named (identical) commit, to not confuse some buildbots
  * Postprocessing shader, GL: Fix shader version bug. Fixes #13779
  * UWP buildfix
  * D3D11: Avoid the debug layer hazard tracker after blits.
  * Cleaner exit on Windows. Will hopefully help #13325
  * Misc logging improvements
  * Crash screen: Add a very dangerous and inaccurate "Resume" function.
  * Further improvements to crash screen
  * Hide touch controls on bluescreen
  * Fix bluescreen layout on notched phones
  * Improvements to crash screen.
  * Fix synchronization bug in StorageFileLoader.cpp (wrong mutex)
  * XAudioBackend: Limit the number of queued buffers properly.
  * Reformat and do minor cleanups in UWP/XAudioSoundStream
  * Linux: Properly avoid committing address space for large mmap().
  * Fix PGF a figure.
  * Fixed "jpn0/kr0/ltn0,2,4,6
  * Add stack value in scempeg and scepsmf from jpcsp
  * Add an iOS-only utility in devtools to copy savestates to memstick root.
  * Fix background idle animation on iOS when task switching
  * Apple driver bug workaround. See issue #13451
  * Fix check for Android version in whether to display "ignore camera notch when centering" Fixes #13774
  * GL: Detect Apple GPUs as a category
  * Minor cleanups
  * VK: Restore the ARM Mali Z hack that got lost in the refactor somehow.
  * Some cleanups in GL feature and shader language detection.
  * ARM64 buildfix
  * Minor refactor in sceUtility.cpp, making future changes easier.
  * Android: Enable fullscreen ("Immersive mode") by default.
  * Fix regression in Dream Club Portable. Fixes, for OpenGL, #6497
  * Minor comment.
  * Don't display data info as new data when saving done.
  * Fixes incorrect date of savedata.
  * Turn off vertex range culling in bezier/spline calls.
  * Call g_Config.Save() first thing in MainScreen::OnExit. Workaround for #13286
  * Assorted drive-by code cleanup
  * thin3d: Add a way to query the current render target for debugging.
  * Fix DiRT 2's car reflections.
  * cmake: Enable the install target for non-linux unix systems.
  * Use system time format on savedata aswell
  * Nassau's new fonts. Replaces #13753
  * Change the typo
  * Fix loader
  * Bundle libMoltenVK
  * Another Ghosts'n'Goblins game ID.
  * Specify Target
  * Add more games to RequireBufferedRendering
  * Avoid potential crash without storage permissions.
  * Add games that requires buffered rendering
  * Do not use x86 for other machine
  * cmake: Add a desktop file.
  * cmake: Add an install target.
  * Use the double precision sincos for Hitman RBA 1 too. See #13706
  * Add missing header in Logmanager.h
  * Fix headers in MIPSCPUDetect.
  * sz must be longer than target string
  * Remove superfluous variable from uniform buffer
  * Why not iOS?
  * Safer hack to build on M1.
  * CMakeLists.txt fixes for M1. It sets cpu arch to "arm64", not "aarch64"
  * M1: Correctly detect core count.
  * Cleaner way to flush the instruction cache on Mac ARM64
  * Mark ARM64 Macs as needing WX-exclusive memory protection
  * Fix a crash if JIT space failed to allocate
  * Fix GPU driver test screen
  * Make universal binary version of ffmpeg work. (#13457)
  * D3D11: Fix shader module leak in thin3d.
  * Fixed a PlayStation typo (#13729)
  * Switch to nassau-tk's latest Korean font. See issue #13190
  * Respect stage in BindFramebufferAsColorTexture().
  * Change ltn x font (#13721)
  * Fix Ghosts & Goblins for older backends too.
  * Two more Ghosts & Goblins game IDs for compat.ini
  * Better debug names for BlitFramebuffer operations.
  * Enable color reinterpret for Ultimate Ghosts & Goblins
  * Need to take renderArea into account when merging render passes.
  * Update lang submodule
  * Correctly handle stuffing data of pack header.
  * Build fixes
  * Fixes state.
  * Writes target buffer address in multiple times.
  * Turn off the MacOS and iOS Travis jobs, they seem to have stopped working.
  * Only use double precision sincos in Hitman Reborn Battle Arena 2. See #12900
  * Partially revert "VFPU: Compute sines and cosines in double precision."
  * Try to implement some related funcs.
  * Remember game list scroll
  * Update jpn0.pgf
  * Guess at a fix for #13698 - sceKernelThreadGetExitStatus probably takes some cycles.
  * Clean up.
  * Mpeg:Checks autual available space before putting data.
  * Implements sceUsbCamGetMicDataLength.
  * libretro: Remove VertexShaderGeneratorHLSL from Makefile.common. Fixes #13696
  * Clean up psp_color shader
  * Update jpn0.pgf  (manually merged from commit #13683)
  * Update lang submodule
  * Add developer setting "Show on screen messages". Uncheck to hide them.
  * Translation: Fix issue #13685
  * Translation: Fix issues #13686 and #13687
  * Adreno/OpenGL: Limit shader depal to 6xx series GPUs. Should help #13668.
  * Modified "ltn0/1/2/3/4/5/6/7 .pgf"
  * Makes a distinction between blocking and non blocking modes.
  * Changes the way of reading microphone data.
  * Fix some wrong asserts (we don't use <cassert>)
  * Fix mistake.
  * Better GLSL version handling. Now specify the latest version supported by the device.
  * Updated socket's send buffer size as an attempt to fix PSP2i unable to enter dungeon when using RadminVPN issue #13648
  * Change socket's MSS based on PSP_ADHOC_PTP_MSS
  * Making use TCP_QUICKACK (or it's alternative) along with TCP_NODELAY
  * Fix crash when drag-dropping texture packs. Fixes the main part of #13614 .
  * Fix scale in FramebufferCommon::GetFramebuffer. Fixes #13644
  * Clears didn't always properly set the RenderArea. Should help #13664
  * Corrects the number of added packets returned by sceMpegRingbufferPut, especially if callback is called multiple times.
  * Fix crash in sceusbmic on load old staus then save again
  * Makes video streams amount meet the expectation of sceMpegRegistStream() not only the mpegheader.
  * Reads all packets to ringbuffer.
  * Fix crash on save state. Fixes #13658
  * Fix Star Ocean stencil issue with OpenGL. Fixes #13746
  * OpenGL: Assorted shader-depal bugfixes and regression fixes.
  * Fix check for when to generate packUnorm4x8 replacements
  * OpenGL: Detect Adreno model number
  * Update gamecontrollerdb.txt
  * Expose the "Lower resolution for effects" setting in libretro. Fixes #11099
  * Don't try to texture from depth if not supported by backend. Works around #13621
  * More consistent use of GLSL precision modifiers, now use them in Vulkan too.
  * Fix bug in the new color writemask code, failing to limit it to Outrun properly. Fixes #13650.
  * Outrun on OpenGL: Fix weird purple highlight seen on some devices
  * Fix task switching issue with reinterpret. Fixes #13649
  * Minor cleanup in GL backend, fixes #13647
  * D3D11: Fix writing to SV_Depth. Fixes #13641
  * Linker fix - need to move init_resources along.
  * Mpeg:Revert part of https://github.com/hrydgard/ppsspp/commit/fa59be7e5db1526d07de75f6d7c14b94e98809e6
  * On GLES3, GL_EXT_shader_framebuffer_fetch works a little differently.
  * Remove support for NV_shader_framebuffer_fetch extension, very old and rare.
  * Reorganize the end of the fragment shader generator.
  * Remove ForceGL2 flag. Add comments... hm.
  * Move ShaderTranslation.cpp/h to Common/GPU.
  * Fix crashes on exit (Vulkan). Should help #13223
  * Fix HLSL shader gen issue
  * Temporarily disable GL frame-init error checks, see #13639
  * Get shader color write masking going on all backends.
  * Fix AuCheckStreamDataNeeded function
  * Unrelated warning fixes
  * Fix some comments
  * Fix some comments, rename a function.
  * More work on detangling the concepts and making things make more sense.
  * ShaderBlend and FramebufferRead are separate concepts. Reflect that in naming.
  * Simplify shader blend logic in FragmentShaderGenerator.cpp
  * Address feedback.
  * Add compat flag for reinterpret shader, also disable on platforms that can't support it yet
  * Fix reinterpret shader for D3D11
  * Cleanup reinterpret shader resources in FramebufferManagerCommon::DeviceLost().
  * More work on reinterpret. Get Vulkan running
  * Reinterpret the data when binding a framebuffer with a different 16-bit format.
  * Reinterpret code runs, no idea if it works
  * More shadergen work
  * More reinterpret shader gen and test work.
  * Forgot a line in caa960ee8e
  * Unify FramebufferManager::BindFramebufferAsColorTexture
  * Start unifying BindFramebufferAsColorTexture
  * Reorganize the DeviceLost code a little. FramebufferManagerCommon now sees it.
  * Remove some accidentally added lines
  * GLSL ES compilers can be very picky about uint/int. Fixes #13628 - for real this time hopefully
  * Oops, what happened there..
  * Some GL error logging improvements
  * Fix GLSL version detection bug. Fixes #13631
  * Fix bugs caused by 44ec286ba4
  * Fix off by one
  * Move shader language feature detection to the draw context.
  * Framebuffer: Keep the render scale factor around, no need to recompute it.
  * Partially revert "Remove remnants of an old, no longer applicable readback optimization"
  * Buildfix
  * Remove colorDepth property of framebuffers. They're all 8888.
  * Remove remnants of an old, no longer applicable readback optimization
  * Fix bug in framebuffer naming
  * Inline "OptimizeDownloadRange" to make the code more readable
  * Merge the two ShaderStage enums
  * Show an error on screen if a shader fails to compile.
  * Merge the two ShaderLanguage enums.
  * Move ShaderWriter to Common/GPU, along with some stuff from ShaderCommon.h.
  * Retry the masked memory experiment on iOS. Turns out it was the shader generator bug that broke things.
  * GLSL ES: Extensions must go first. Fixes #13620
  * Disable masked memory on iOS again. The cure was worse than the disease apparently.
  * Partially revert "Clarify some logic, improve framebuffer names"
  * GPU: Correct shader blend equations.
  * Fix Starting multiplayer issue on DBZ Team Tag
  * Reducing the delay on GetPeerInfo
  * Enable masked memory addressing on iOS
  * Fix/workaround ARM64 with the MASKED_PSP_MEMORY build flag.
  * Fix a bad check, causing masked memory to fail on non-32-bit platforms even if desired.
  * Bugfix last commit
  * Apparently only MSVC can handle the ambiguity.
  * Buildfix the rest of the platforms
  * GEDebugger: Use utf-8 internally.
  * ShaderWriter, a replacement for the sprintf WRITE macro.
  * Safety, comments
  * Clarify some logic, improve framebuffer names
  * Fix vertex shader generator bug. Got caught by the new test
  * Move the generic vertex shader generator into GPU/Common and rename it.
  * Delete the HLSL shader generator, switch to the newly generic one.
  * Another hlsl compatibility fix
  * Share the uniform buffer declarations between D3D11 and VK.
  * Fix remaining differences between generated shaders
  * Start working on getting tess to match
  * Fix through mode differences
  * Make the lighting code match
  * Make the hardware skinning code match
  * More HLSL work. Some vertex shaders are starting to pass.
  * Vertex shader merge work
  * Oops, seems I screwed those #version statements up worse.
  * Fix #version statement for GLES 2.0 vertex shaders
  * Fix #version statement in GLES 2 fragment shaders
  * Remove a redundant bit from vertex shader IDs.
  * Fix an old inconsistency between D3D9 and D3D11 projection matrices.
  * Remove inPrefix. HLSL shaders gets slightly longer but probably no biggie.
  * Fix silly issue in vertex shader gen
  * UWP buildfix
  * Move the now-renamed fragment shader generator to GPU/Common.
  * Just some cleanups that get to tag along
  * Fragment shader gen: Remove unnecessary allocations
  * Cleanup
  * Check for a couple additional GL extensions
  * Remove the HLSL fragment shader generator. The GLSL one can now do its job.
  * Switch D3D9 too to the glsl shader generator
  * Switch D3D11 over to use the GLSL fragment shader generator
  * Misc cleanup
  * Minor D3D9 fixes
  * Test parsing of generated OpenGL shaders too (by using glslang).
  * Get D3D9 fragment shader generation to parity
  * HLSL fix
  * More D3D9 fixes.
  * Set up the test for D3D9, start fixing stuff.
  * Evolve the HLSL and GLSL fragment shader generators even closer together.
  * Change fragment shader output to work the same in GLSL and HLSL.
  * Make discard work the same way in the HLSL shader generator.
  * Start adding HLSL support to the GLSL shader generator.
  * wip
  * HLSL: Use #define to switch to glsl-like vector types.
  * Fix loading old savestates.
  * Modified "ltn0/2/4/6 .pgf"
  * When stops and unloads self module, make sure that the thread is properly deleted.
  * Fix significant FPS drops on Hitman Reborn Battle Arena 2
  * Updated Blocking simulation of AdhocSocket (especially PdpRecv)
  * Updated Minimum Timeout workaround settings to use 0 as default (no override)
  * Remove support for D3D11_level_9 (previously only really used for Windows Phone, probably).
  * Blocks current thread to synchronize initial GameMode data. Fixes desync issue when GameMode multiplayer mission is being started.
  * Moving socket creation from AdhocMatchingCreate to AdhocMatchingStart. (Fixes Dissidia 012 unable to see any room issue)
  * Fixed an issue with AdhocMatching where there is a possibility that some data didn't get sent upon AdhocMatchingStop causing Joined players to get timeout. (Fixed Star Wars: The Force Unleashed)
  * Implementing Adhocctl Busy state to prevent getting kicked out from Adhoc Server on games that tries to leave the group multiple times in a row. Also Updated Adhocctl behavior.
  * Updated GameMode API (Fixed Pocket Pool)
  * Prevent memory leaks when clearing AdhocMatching events.
  * Fixed unable to see game room issue on Air Conflicts - Aces Of World War 2, should also fix other games with similar issue (due to invalid group mode)
  * Added delay result to SetSocketAlert for other threads that use the socket to trigger the alert.
  * Socket alerts can be triggered regardless of the nonblocking flag
  * Do not clear socket alert flag after signaled.
  * Prevent Scanning issue after reconnected to AdhocServer, also Updated logging to showing the error code on sceNetAdhocctlScan
  * Updated validity checking of mac address on PdpCreate, PtpListen, and PtpOpen
  * Updated Loggings and return value of PdpSend and PdpRecv
  * Added hleEatMicro (may not be accurate tho) on PdpSend, PdpRecv, and GetPeerInfo.
  * Updated error code on sceNetGetLocalEtherAddr
  * Prevent memory leaks when attempting to play GameMode multiplayer again after loading from SaveState in the middle of GameMode multiplayer.
  * Prevent Port leaks after loading SaveState in the middle of multiplayer resulting to "port in use" error on the next attempt to play multiplayer.
  * Fix checks for fragment test cache in GLES fragment shader generator
  * Modified "ltn1/3/5/7 .pgf"
  * Log the return value.
  * Fixes mistake.
  * IMP sceKernelFindModuleByUID and sceKernelFindModuleByName.
  * SaveState:Don't register the event during Dostate.
  * Modified "ltn1/3/5/7 .pgf"
  * Somehow forgot to delete VertexShaderGeneratorVulkan.cpp
  * Change jpn0 font (#13588)
  * Use splat3(x) liberally (converts to vec3(x) on GLES, vec3(x,x,x) on D3D)
  * Complete the vertex shader merge, deleting the Vulkan-specific vertex shader generator.
  * Additional fixes
  * More tess fixes
  * Initial work on fixing tess
  * Fix additional minor differences
  * Fix more vertex shader differences
  * Bridge more vertex shader differences
  * Time for the vertex shaders. Set up a test, start eliminating differences.
  * [Android] Retrieve isMicStarted from AndroidAudio state
  * [Android] Start recording immediately after asking for permission
  * [Android] Audio record using OpenSL
  * Fixes savesate for usbmic.
  * Revert "Android gradle update"
  * Completes the merge, deleting the Vulkan-specific fragment shader generator.
  * Fix more tiny differences. The fragment shader generators now match!
  * Fix additional differences
  * Fix minute differences between the shader generators found by the new tester
  * Hack up a test comparing Vulkan fragment haders generated by the GL GLSL generator to the ones generated by the Vulkan generator.
  * OpenGL: Share the shader version detection.
  * Cleanup
  * GLES: Read compat params first, emit code later.
  * More splat3
  * Revert "Try my theory about memory mirrors on iOS 14. See #13451"
  * Android gradle update
  * Fix a section of the translatable message
  * SwicthUMD:Only update Switch UMD item of Windows menu instead of entire UI.
  * Try my theory about memory mirrors on iOS 14. See #13451
  * Remove an unmotivated ifdef. Additional cleanup
  * OpenGL: Allow texture wrapping on framebuffers if supported
  * Prepare for more GLSL testing
  * Rename shader generator functions, a bit of moving around and adding an errorString param.
  * Add brute force shader generator tester. Tests D3D11 and Vulkan shaders.
  * Vulkan: remove array indexing for light parameters to match the other backends
  * Rename vk uniforms to match the other backends
  * Update gitlab ci for libretro to use cmake
  * Io: Track initial free space for compat flag.
  * Headless: Define consistent memstick size.
  * Psmf: Cleanup logging.
  * Psmf: Handle older states for delayed state change.
  * Address feedback about recent changes
  * Don't need to connect if AdhocServer IP is the same with this instance localhost IP and having AdhocServer disabled
  * Updated Loggings and return value on PtpSend, PtpFlush, and PtpRecv.
  * Show a warning just in case an abnormal situation occurred.
  * Fix disconnection issue due to timeout on blocking PTP Socket
  * Added Connection Refused error code on PtpConnect
  * Fixed disconnection issue when multiplayer game started on Shaun White Snowboarding, and improved multiplayer performance on games that use GameMode.
  * Updated Adhocctl timings based on the timestamp on JPCSP + prx files
  * DoState.
  * PsmfPlayer:The status will not be changed until the delay result is finished.
  * Io: Account for free space on the host device.
  * Qt: Remove Qt-specific screenshot path.
  * Error handling fixes
  * D3D11: Implement depth texturing. Fixes, for D3D11, #6411.
  * Set up depth buffers to be bound as shader resource views
  * Libretro: set Memory Stick Size config value. fixes #13552.
  * OpenGL: Disable auto invalidation of framebuffers, it has somehow broken
  * retro ci fix
  * oops, wrong filename
  * Removing the workaround that was used to fix Gran Turismo in the past but no longer needed. Since zero mac address is an invalid mac we should return an error.
  * Updated AdhocPollSocket timeout checking.
  * Increasing Adhocctl timeout to 5 seconds (with side effects of longer freezes when detecting disconnected players), to prevent failure to connect to AdhocServer on time due to some unknown reason where sometimes it tooks more than 2 seconds for Adhocctl Init to connect to AdhocServer on localhost (normally only 10 ms), and sometimes it tooks more than 1 seconds for built-in AdhocServer to be ready (normally only 1 ms)
  * Make all the Comp_Cache implementations the same.
  * Add libretro CI.
  * Prevent AdhocServer Pings from spamming Debug Log
  * Fix disconnection issue when joining multiplayer on Capcom Puzzle World
  * 2nd or more instance of PPSSPP should only bind it's own localhost IP for Adhoc Server. Fixes Capcom Classics Collection Remix multiplayer on multiple-instance.
  * More buildfixes
  * Removed unused texel info
  * Added new vertex shader file naturalA.vsh
  * Removed unnecessary vertex coords
  * Replaced shader vertex file for naturalA
  * Added 1 new NID of OpenPSID Service, also added Init & Shutdown function
  * No need to call video_cb if there is no image
  * fixed issue with: [libretro ERROR] [G3D] glewInit() failed

-------------------------------------------------------------------
Thu Oct 15 14:37:00 UTC 2020 - Guillaume GARDET <guillaume.gardet@opensuse.org>

- Use system ffmpeg (fixes aarch64)

-------------------------------------------------------------------
Thu Oct 15 14:32:29 UTC 2020 - guillaume.gardet@opensuse.org

- Update to version 0~git20201015:
  * Libretro: add SYSPROP_DISPLAY_SAFE_INSET* properties. fixes screen frame size.
  * Yet another one
  * Another missing header buildfix
  * Minor cleanups related to #13527
  * Add missing include in URL.h
  * VS 2017 buildfix hack - these parameters are new to Windows.
  * Fix text issue in God Eater Burst. Forgot that games can allocate texture in volatile memory too.
  * Vulkan: fix stack overflow.
  * libkirk: fix buffer overflow.
  * Fix a couple of issues with #13477, found by aliaspider.
  * VK: Whenever safely possible, shrink the render area.
  * Fix OpenGL crash introduced in #13536
  * libretro: Fix screen size problem in Vulkan.
  * Get Vulkan going again with libretro. Rendering is the wrong size and crashes on exit, but it's a start.
  * Libretro/VK: Add a README for debugging, so I don't forget. Minor cleanups.
  * Fix GPU profile display on notched screens
  * compat.ini: Add ID for European version of Car Jack Streets
  * Track and accumulate pipeline flags for render passes.
  * Bugfix
  * VK: Separate layout transitions from renderpasses again.
  * Remove the USE_GENERAL_LAYOUT_FOR* debug defines.
  * VK: Copy depth buffer if we can't blit. Some GPUs can't blit to depth.
  * Workaround for date bug in Car Jack Streets.
  * Fixed timeout issue due to the latest CoreTiming::GetGlobalTimeUsScaled() have a possibility to get smaller number than the previous one.
  * Added some network-related missing error codes.
  * Create a safer variant of BlockTransferAllowCreateFB, enable for FF Type 0
  * Fix additional snappy warnings.
  * Warning fixes.
  * Avoid a division in time_now_d(). Minor optimizations.
  * VFPU: Compute sines and cosines in double precision.
  * Make Qt apply fullscreen change from UI as well
  * Make --windowed available on all platform and make sure to trigger resize
  * Add an option to the in-game dev menu to reset counts on limited logging
  * Change jpn0.pgf for a new one generated by nassau-tk
  * Update gradle, assets/lang
  * Prevent sceNetAdhocctlGetGameModeInfo from spamming Warn/Info Log on Street Supremacy
  * Added socom.cc as an alternative Public Adhoc Server, just because they have statistic web page for players to find out which games are being played and how many players are there.
  * Minor changes.
  * Return early to reduce indentation on AdhocMatching code
  * Updated AdhocPollSocket implementation to fix Bleach Heat the Soul 7, Fate Unlimited Codes, Carnage Heart EXA
  * Prevent getting too many Kernel Errors in the log during a Shutdown cleanups due to kernelObjects already cleared.
  * Prevent Dissidia 012 from opening too many ports when failed to connect continuously.
  * Making the workaround that fix Gundam vs Gundam Next Plus to be optional as it can improve connectivity on other games over high latency networks, and fix GvG Next Plus properly.
  * Updated AdhocSocket struct, and an attempt to reduce stutters by increasing the send buffer a little bit.
  * Fix Falcom games (ie. Ys vs. Sora no Kiseki, Vantage Master Portable)
  * Removing ETIMEDOUT from non-blocking socket's error checks
  * Updated GameMode implementation to fix Bomberman, also improved performance on BattleZone. (+1 squashed commits)
  * Fix NetconfDialog timings to get a better message transitions.
  * Fix Apctl and Adhocctl state change timings to works properly. Which fix the stuck MessageBox on Naruto Shippuden Ultimate Ninja Heroes 3 and .hack//Link properly.
  * Removing the workaround that fix the stuck MessageBox on Naruto Shippuden Ultimate Ninja Heroes 3 and .hack//Link but having a side effect of 0.5 second lag
  * Fix a recent bug in XinputDevice.h
  * Sets the maximum memory stick size to 32GB like a Memory Stick Duo.
  * Savedata:Skips non-directories in LISTALLDELETE mode.
  * Simulates memory stick size to get fixed free space.
  * SDL: Apply patch from issue #13516, fixing issue with Wacom tablets with readonly flags set.
  * SDL: Implement multitouch support
  * Buildfix - remove more Qt-specific code in TextureReplacer
  * Also report a smaller memstick for Street Fighter Alpha 3 MAX (see #10462)
  * Add compat.ini setting to work around memstick size math problem in Harry Potter - Goblet of Fire
  * Fix libretro makefile build
  * Add some recent contributors to the credits list.
  * Delete useless Qt-specific path in TextureReplacer
  * Vulkan: Automatically generate mipmaps for replacement textures.
  * Cap the global thread pool at 16 threads.
  * Remove Timer.cpp/h. Move various collections into Common/Data/Collections.
  * Fix Qt build by simply moving the offending file to the native project. No idea why Qt include paths only work there.
  * Buildfix linux
  * Windows: Remove the native project.
  * Complete the eradication of D3DX9 compiler loader
  * Move text rendering to Common.
  * Move most GPU things to Common.
  * KeyMap fix (libretro)
  * Libretro buildfixes
  * Move fileutil, net, image loaders, ui to Common. (#13506)
  * SaveData:Displays all saves like a PSP for LISTALLDELETE mode.
  * iOS buildfix
  * Mac/ios buildfix
  * Move NativeApp.h to Common/System, split into NativeApp.h and System.h
  * Move Display.cpp/h to Common.
  * Move the profiler to Common
  * Common.h shouldn't include Log.h.
  * Move math and some file and data conversion files out from native to Common.
  * iOS buildfix attempt
  * Move native/util, native/data and native/i18 to Common/Data.
  * Fixed missing cstring include.
  * Move input utilities from native to Common/Input.
  * Savedata:Corrects the performances when the data is broken.
  * Move threading utils from native to Common
  * Savedata:Supports empty file name for save/load/delete.
  * Savedata:Improves the deleting functions.
  * Libretro buildfix
  * Windows: Correct some stdafx.h paths.
  * Adnroid: Add back arm32 files for libpng.
  * Android: Fix include paths.
  * Global: Add back arm files for libpng.
  * Merge ext/native/ext/... directly into ext.
  * ByteSwap.h results in a file name collision on some systems with byteswap.h. Fix this by merging it into BitSet.h.
  * Additional UWP buildfix
  * UWP buildfix
  * retro buildfix
  * Buildfixes
  * Remove some TLS.
  * Remove unnecessary use of thread local storage
  * Remove some color util functions
  * Move buffer.cpp/h from base to Common
  * Buildfixes
  * Finish getting rid of basictypes.h
  * Merge base/basictypes.h into Common/Common.h (mostly).
  * Merge ext/native/stringutil.cpp/h into Common/StringUtils.cpp/h.
  * Remove old define for thread local storage
  * We no longer use TCHAR.
  * Remove our usage of ssize_t
  * Delete more useless math code
  * Delete unused math code
  * Delete more old detritus
  * Delete some unused string functions
  * Very minor optimization (divisions by constants are faster unsigned)
  * Delete unused backtrace.cpp
  * TimeUtil.cpp cleanup
  * Fix issue with duplicate texture dumps.
  * Add PSP color shader
  * SDL: Adjust locale parsing for Ubuntu.
  * Core: Fix memory size check.
  * fix #13471
  * glcore context switching
  * Don't cache time in a variable.
  * Enable BlockTransferAllowCreateFB for Burnout Dominator.
  * Some GPU code cleanup. Disable some unnecessary reporting.
  * More cleanup
  * Cleanup
  * IndexGenerator::AddStrip: Avoid the fallback by writing a few extra indices if necessary.
  * Also optimize IndexGenerator::AddStrip for ARM NEON.
  * Buildfix
  * SSE-optimize IndexGenerator::AddStrip. Shaves about half a percent from GoW.
  * Speed up game start under Windows by not filling the symbol listbox until the disasm window is opened.
  * Windows debugger: Clean out old remains of multi-cpu support
  * Reduce string allocations in Vulkan memory allocator
  * Revert a bad optimization in word wrapper
  * An attempt to improve connection stability.
  * Fixed returned error code on sceNetAdhocctlDelHandler
  * Minor fix to sceNetAdhocctlGetPeerInfo
  * Added more info on some sceNet logs
  * Prevent sceNetGetMallocStat from spamming debug log on some games.
  * Remove some reporting that's normally just the result of garbage-as-display-list-execution.
  * Remove an allocation in the word wrapper.
  * Fix slowdowns due to careless use of auto
  * Mark the PPGe font texture as reliable to avoid hashing it.
  * Minor optimization in wrap_text.cpp
  * Fixed PdpStat and PtpStat info
  * Fixed returned error code of sceNetAdhocctlDisconnect
  * Quick fix for #13459
  * Fix regression where Gran Turismo ended up recreating the framebuffer on every frame in the menu.
  * Update submodule ffmpeg to master
  * Remove unused lastBoundTexture from Vulkan
  * Comment fixes. Minor tweak.
  * Cleanups in/around BlitFramebufferDepth
  * Remove redundant bind on GL texture build. Improve dirtying of texture state.
  * Remove dirtying of TEXTURE_PARAMS from ForgetLastTexture, not its responsibility.
  * Set the texture dirty flags when binding a new framebuffer.
  * Added alerted flags info on AdhocSocket to be used on PollSocket
  * GPU debug stats: Show how many bytes of texture data we hash per frame
  * Simplify NotifyFrameBuffer - only needs one call for both "channels" now.
  * Share GPUS stats formatting code between the backends (easier to add new stats)
  * Have to invalidate "lastBoundTexture" when binding framebuffers as texture.
  * Remove some unnecessary function parameters, improve some comments.
  * Using REPORT_ONCE to report some of GameMode HLE existance.
  * Implementing Adhoc GameMode HLE
  * Minor changes to adhoc timestamps
  * A couple of D3D11 fixes.
  * Fixed crash issue when creating/connecting to a null group name.
  * Minor improvement to gl_debug_log.h
  * Fix bug in GLES texture filter setup
  * The new asserts found something.
  * Unify BlitFramebufferDepth.
  * Make the implementations of CopyFramebufferDepth more similar.
  * Unify some GPU_SUPPORT* bits
  * FPURegCache: The invariant checking is very slow in debug mode. Let's only turn it on when we need it.
  * More asserts
  * Use system date format on savestate as well
  * Buildfix
  * Help the compiler out a little bit in IndexGenerator::AddStrip.
  * Some header include cleanup
  * Add missing asserts after some VK resource creation functions
  * Don't over-invalidate textures when a framebuffer is created or modified.
  * Sneak in a fix for a limited memory leak in Vulkan vertex cache
  * Delete TexCacheEntries that get replaced by a framebuffer
  * Fix bug in new framebuffer code, reducing unnecessary texture invalidations.
  * Check whether there may be more than one save file names by mode.
  * Cache 60 FPS requirement
  * Fix an issue of major performance drops when using accepted PTP Sockets.
  * More moves
  * Also move video filtering override.
  * Move overrides to the end of GetSamplingParams
  * Switch to a returned value and rename these functions.
  * Unify/centralize SetFramebufferSamplingParams. Some include cleanup.
  * Make the signature of all the SetFramebufferSamplingParams the same
  * Workarounds for D3D9's very limited mip level control.
  * TextureCacheGLES: Also share the same sampler calculation for GLES.
  * TextureCacheDX9: Use the already centralized sampler setup code from D3D11/Vulkan.
  * Comment fix
  * Making sure the are no compiler warnings on adhoc code on android
  * Prevent Client side from forever re-trying to connect to Exited Host on Shin Sangoku Musou Multi Raid 2
  * Improve readability of the boolean expression mess in GetSamplingParams
  * User chain support
  * Linux: Use MAP_NORESERVE when finding a memory base pointer. See #13187
  * TextureCacheCommon::UpdateSamplingParams no longer takes a TexCacheEntry
  * Always use a linear filter for video, unless forcing NEAREST filtering.
  * Texfilter: Rewrite some checks in GetSamplingParams to be faster and more understandable.
  * Remove some outdated debugging code (SetDebugTexture)
  * Fix libretro OSX build
  * MemMap: Check for MAP_FAILED in mmap call.
  * Fix GetCurrentTextureDebug
  * Try unknown's workaround for clang code gen bug. See #13187.
  * Further simplify framebuffer matching.
  * SaveState: Update to latest Snappy v1.1.8.
  * x64: Fix stack alignment in vertex decoder, just because.
  * Optimize a couple more single color conversion functions
  * Optimize the DarkStalkers software rendering path a little more.
  * Show how many times we evaluate framebuffers per frame in debug statistics.
  * Re-fix BOF III - accidentally lost the texaddr offset
  * Mostly fix Katamari by boosting fbs from the same frame
  * Decouple framebuffers from texcache entries entirely.
  * Update symbol list of disassembly window when loadexec.
  * Don't read data more than data size of pgd files.
  * Remove fbCache_ from TextureCacheCommon.cpp.
  * Make SetColorUpdated static, reorder some fields
  * Minor cleanups in CaptureDevice
  * Fix Failed to Bind already used port issue on Android (and probably linux too). This should fix Dynasty Warrior Strikeforce and Shin Sangoku Musou Multi Raid 2
  * Avoid getting Fatal signal 6 (SIGABRT) on linux/android when losing connectivity to the Adhoc Server.
  * Allows reusing the same port for PtpListen and PtpOpen. This fixes Shin Sangoku Musou Multi Raid 2, and probably other games with similar issue (ie. Dynasty Warrior Strikeforce)
  * Clients shouldn't try to detects timeout of other clients, because most of the time the client side doesn't have timeout information given, better wait for the host to tells them if a client got disconnected.
  * Sleep a bit longer, especially when PPSSPP paused.
  * Prevent spamming the log too much on some games
  * Fixed sceNetAdhocMatchingGetMembers error return value
  * Add option for the clear-fb-on-first-use speedhack. See #13295
  * Resolve Adhoc Server DNS early and cache it so we don't need to resolve it again later.
  * Stop waiting for connection on Exit to Menu to prevent causing lags.
  * Combining PDP and PTP socket's array into a union array. Fixes Hot Shots Tennis that doesn't works well with socketId > 255
  * softgpu: Correct cull handling for sprites.
  * Headless: Setup logman earlier.
  * GPU: Allow culling in through mode.
  * Plugins: Schedule plugins before game thread.
  * Plugins: Oops, typo.
  * Plugins: Support for loading game-specific plugins.
  * Module: Split out module start to use externally.
  * Simulate blocking PtpFlush
  * Allows blocking socket simulation on multiple threads simultaneously
  * Making use Adhoc SocketAlert Flags to stop/abort blocking sockets
  * Fixed return value when using Automatic Wlan Channel. Fixes Ridge Racer 2 and Warriors Orochi 2
  * Changing default Wlan Channel to 11 on Automatic to be the same with real PSP
  * Prevent sceNetGetMallocStat from spamming Info Logs
  * TexCache: Correct detaching textures.
  * Net: Fix memory corruption on save old state.
  * Net: Correct save state from old loaded state.
  * TexCache: Rename "Invalid" attach to "Inexact".
  * TexCache: Always apply detach matches if found.
  * GE Debugger: Include game ID inside dump file.
  * Debugger: Add formats to breakpoint logging.
  * Fixed SceNetAdhocctlParameter structure
  * Added some more info in Debug Log to help debugging
  * Added another HexData printing with offset and ASCII contents to help dumping some data in the logs
  * Fixed an issue where the 1st line showing 17 bytes of data instead of 16 bytes like the rest of the lines
  * Ignore SIGPIPE error on certain system (ie. Linux)
  * An attempt to implement AdhocSocketAlert
  * Oops forgot to replace these numbers with const on adhoc socket reindexing PR
  * Imp sceKernelFindModuleByName
  * Reindexing PDP and PTP socket using const/var instead of using confusing raw numbers
  * Fix crash issue due to out of bound when indexing PDP socket
  * Add draft sceKernelFindModuleByUID (#13380)
  * Fix Phantasy Star Portable 2 Timeout issue
  * Fix multiplayer on Valhalla Knights 2
  * Fix AdhocMatching P2P Mode. This fix Bleach Heat the Soul 7
  * Fix crash in Digimon Adventures.
  * Minor changes to make sure the output struct/arg have similar value to the one from prx file (based on Kingdom Hearts BBS)
  * Don't allocate PSP's Memory during DoState
  * Fix communication issue with Adhoc Server where ping to the Adhoc Server sometimes getting socket error 10053 and disconnected from Adhoc Server
  * Fix possible stalled thread when PPSSPP closed down
  * An attempt to reduce the lags/stutters during multiplayer caused by improper blocking behavior.
  * Increasing the shutdown delay so that there will be at least one "4=sceUtilityNetconfGetStatus()" after "0=sceUtilityNetconfShutdownStart()" instead of directly to "0=sceUtilityNetconfGetStatus()" (just like what happen when using utility.prx file with KHBBS on JPCSP)
  * An attempt to differentiate adhoc connect, create, and join.
  * Oops we already have local mac stored in context, no longer need to getLocalMac again
  * Fix connection issue on games using AdhocMatching due to sometimes events are removed prematurely before being processed. This fix Gran Turismo where some peers could permanently be in "busy data" state.
  * Fixed possible crash issue due to lingering leftover callback events from previous multiplayer session.
  * Avoid using hleLog during a Shutdown
  * An attempt to sort AdhocMatching Member List in order to make a consistent list on all players (based on Host). Also fixed some disconnection issue on other players when a player is leaving the room on Gran Turismo and Patapon 3.
  * An attempt to make PDP and PTP ID to be unique so they can be polled properly together without getting conflicted ID. This fixes Gran Turismo.
  * An attempt to fix sceNetAdhocPollSocket to works properly. This fixes one of the multiplayer mode on Bleach Heat the Soul 7
  * Making sure the 1st 2-bits on the 1st byte of MAC address' OUI are zero to prevent issue with some games (ie. Gran Turismo)
  * Default to P2P/Parent's MAC address if the target MAC on sceNetAdhocMatchingSendData is 00:00:00:00:00:00 (need to confirm whether this is correct or an error should be returned instead)
  * Ignores the 1st byte of MAC address when comparing, since there might be games (ie. Gran Turismo) that tries to tamper/change the 1st byte during multiplayer upon use.
  * Use  >= 0x03080000 instead of 0x0307FFFF
  * Add a check in sceKernelTerminateThread
  * Look in the mirrors or not depending on whether the texture's address is in the mirrors (detected as a depth texture).
  * When going the other way, there can be multiple textures that need updating.
  * Partially fix Katamari (flicker due to choice of the wrong depth buffer still happening).
  * Reschedule after resuming thread from suspend.
  * Oops, crashfix for late change
  * Add some ONCE-reporting of multiple candidate situations
  * Forgot the if, oops.
  * Shrink the "Cardboard VR Off" button.
  * Test Drive: Allow virtual framebuffer copies. This eliminates the hyper expensive readbacks.
  * Apply the scoring model when creating/updating framebuffers too.
  * Switch framebuffer matching to a scoring model.
  * Extract AttachFramebufferToEntry function
  * GE dump loading: Try to use the correct GameID so compat.ini flags apply.
  * Add a check in sceKernelTerminateDeleteThread
  * Remove wrong assert. Should fix #13354
  * cmake: Remove outdated ARMV7 define.
  * Global: Remove ARM64 define.
  * GPU: Avoid compile error if ARM64=1 specified.
  * TexCache: Try to avoid wrong texcache usage.
  * TexCache: Improve quicktexhash by ~1-4% on NEON.
  * Only clear when initializating kernelMemory and userMemory.
  * Virtual framebuffer copies: Make a more informed guess on appropriate pixel format.
  * Actually clear memory when initializating.
  * Delete an unused buffer, saving 0.5MB of RAM.
  * GPU: Remove ReliableHash aliases.
  * GPU: Hash CLUT using XXH3 with replacements off.
  * irjit: Switch to XXH3.
  * GPU: Switch vertex/lookup hashes to XXH3.
  * GPU: Remove neon xxhash implementation.
  * Vulkan: Type comparison warning fix.
  * unittest: Fix build on Android.
  * Common: Update to latest xxhash.
  * Net: Reduce PortManager log noise.
  * Throw in a minor simplification in depal.
  * Address feedback from #13341.
  * Fix final subpass dependency for depth
  * Correctly update image layout to the final one after a render pass.
  * Log validation errors normally as well as using OutputDebugString.
  * Improve LogSteps further. Break out PreprocessSteps.
  * Naming fix, better names for temp fbos
  * VulkanRenderManager: Improve logging. LogSteps output is much better.
  * Fix longstanding depth/stencil view issue in Vulkan. Cleans up validation.
  * Vulkan: Minor fix for depth/stencil pretransitions. Used DEPTH_ATTACHMENT_OPTIMAL by mistake in barrier.
  * AspectMask fix
  * Vulkan: Silly typo fix in barrier
  * Exception: Don't trust sigaltstack().
  * SavedataParam: Be careful with const char* to string. Might help #13187
  * Update lang submodule
  * http: Avoid logging errors for would block.
  * TexCache: Force recreate texture on detach.
  * Framebuffer manager refactor step 1: Split ApplyFramebuffer into Match and Apply steps.
  * Framebuffer matching: Don't try to match depth buffers with color if the swizzle bits don't indicate it.
  * Debugger: Check for no texture before debug bind.
  * GPU: Properly detect clears.
  * Quick Vulkan crashfix
  * Some minor logging improvements that get to tag along the previous commit
  * More explicit invalidation of any cached state in Thin3D. Fixes #13307
  * UI: Use standard text wrapping for chat messages.
  * UI: Allow text to use native fonts.
  * UI: Split chat lines using Unicode.
  * GPU: Fix some case warnings.
  * Kernel: Avoid two different Heap structs.
  * Avoid using getaddrinfo during initialization as it could blocked the thread if there is no network
  * Audiocodec: Fix warning on older clang.
  * native: Minor header cleanup.
  * Windows: Show instance counter only with peers.
  * Net: Use locking consistently for instance counter.
  * Improve JPEG file detection (mainly for background image use)
  * Small mistake in sceKernelExitDeleteThread
  * Add a check in sceKernelExitDeleteThread
  * GL: Re-enable mipmaps for thin3d textures.
  * Windows: Make the instance counter go by 1, 2, 3.
  * Windows: Auto-enable GL validation (debug messages) in debug builds
  * More work on GL state leaks. Some things really need a redesign.
  * Net: Simplify local IP lookup.
  * Net: Cut down on local IP aliasing.
  * Use ppsspp error name
  * oop
  * Fix sceKernelExitThread
  * Add support for the 8Bitdo SF30/SN30 Pro controllers on SDL. See #13034
  * Log the first 100 block transfers instead of just the first one. Should make it easier to spot interesting things without hacking the log code.
  * Some logging improvements. Show more coordinates for block transfers, etc.
  * Software renderer clipper: Don't clip on the sides. Fixes #4845 and should fix #7124 for the SW renderer.
  * Global: Unbreak build.
  * Buildfix
  * More Log.h cleanup.
  * Move MsgHandler into Log.cpp/h
  * More cleanup of Log.h, move AndroidAssert into MsgHandler.cpp/h.
  * First step of cleaning up Log.h. Plus a few other bits and bobs.
  * Fix undesired re-builds after runnning CMake
  * Buildfixes
  * Address feedback.
  * Switch to PPSSPP's assert functions (don't use the system's)
  * Fix newlines in logging before the manager is initialized.
  * Buildfix
  * Remove time_now() - time_now_d() is the replacement. Absolute time values can't be stored reliably in floats.
  * Android.mk fix
  * Update .editorconfig to match the encoding of the resource files.
  * Move timeutil to Common. (Experiment to see how much work it is to move these).
  * Address feedback
  * UWP buildfix
  * Vulkan: Fix tex upscaling 4444 swizzling.
  * Debugger: Oops, fix comment typos.
  * Finally delete base/logging.cpp/h. Carefully preserve behaviour on Android.
  * Fix build of ZimTool/AtlasTool. Had to break the ugly backwards dependency from LogManager to g_Config.
  * Getting really close to getting rid of base/logging.h now.
  * Even more base/logging.h removal and fixes
  * More base/logging.h cleanup
  * Remove base/logging.h in a whole lot more places.
  * Remove base/logging from a lot more files in native
  * Remove base/logging.h from a whole bunch of files in native
  * Remove base/logging from UI and more
  * Remove most instances of base/logging.h from Common, Core, GPU, more
  * Replace base/logging.h in VulkanContext and parts of native
  * Remove ELOG/ILOG/WLOG from the Android C++ code (mostly)
  * Recategorize some logging, in preparation for what's to come.
  * Fix build with clang-cl
  * Fix SSE detection with clang-cl
  * Fix Windows/CMake build with Visual Studio

-------------------------------------------------------------------
Fri Aug 14 17:19:44 UTC 2020 - i@guoyunhe.me

- Update to version 0~git20200813:
  * Fix menu navigation from axis in linux
  * Shows AdHoc and Access Point Connecting... Dialog
  * Making sure std::min/max are not overridden by windows header's min/max
  * Moving reused adhoc function out of sceNet function to prevent getting extra SCENET log
  * An attempt to simulate a fake PSN authentication on Patapon 3
  * Renaming sceNp* NIDs functions to their proper function names.
  * Really no need to call clear() in the constructor for AudioChannel.
  * Disable the instance counter in libretro builds.
  * Fix some minor issues found by address-sanitizer on Linux
  * UninstallExceptionHandler: Zero-initialize some structs. I've seen some weird crashes on the free() on Android.
  * Minor logging improvements
  * Global: Buildfix for parsers.
  * Global: Move string number parse to text/parsers.
  * Global: Reduce ini_file header complexity.
  * Global: Make stringutil includes more explicit.
  * Move Section out of IniFile so it can be forward declared. Unlocked further improvements to build speed.
  * Can't avoid sstream in ini_file.h, it seems.
  * Buildfix
  * Remove sstream from stringutil.h. See #13267
  * libretro: Buildfix.
  * SaveState: Rename ChunkFile files to Serialize.
  * Global: Remove some unused header code.
  * SaveState: Split out Do types to reduce headers.
  * Audio: Avoid exposing fixed size queue in header.
  * SaveState: Add header to other makefiles.
  * Global: Remove unnecessary includes.
  * UI: Fix an override warning.
  * Audiocodec: Silence a known warning.
  * Global: Cut down on file/string includes.
  * HLE: Fix some missing error logging.
  * SaveState: Split Do() into a separate header.
  * Address feedback
  * Minor: Initialize a struct. Decrease logging in sceMt19937.
  * Remove partial comment
  * Vulkan: Implement depth texturing through depal.
  * Some fixes
  * Vulkan/generic: Initial prep for depth texturing
  * Optimize value conversion in (unused) depth readback.
  * These convenience overloads don't work in 32-bit builds, remove them.
  * Set debug names for more framebuffers and textures
  * Allow passing in an object name tag when creating framebuffers
  * Vulkan: Start adding object names for easier validation debugging
  * (Libretro) Buildfix for Windows
  * Remove double disable function on frame duplication
  * Enable pixel depth rounding for Nayuta no Kiseki. See issue #8744.
  * Logging improvement
  * Remove some unnecessary reporting.
  * Fix issue where after a backend change restart, the new instance was considered secondary.
  * Fix #13251 for D3D11. The remaining issue in #7124 should be fixed.
  * Expand the viewport to cover the scissor region, if it doesn't. Fixes #4845 (bloom in Dante's Inferno).
  * Viewport state conversion: Move the pixel scaling to after the overage clipping.
  * Remove the LARGE_VIEWPORTS separate path. The fewer paths the better, all need to work anyway.
  * Also correct the allocated size.
  * Correct the alignment size when allocate memory at a position.
  * UI sound fix
  * Be a little more aggressive discarding non matching framebuffers when texturing. Enable create framebuffer from copy, fixing #12345
  * Texture from framebuffer: Logging improvements
  * Clarify, but don't yet remove, a perf hack for ES devices. Remove a unused sync parameter from readbacks.
  * Improve logging of unknown syscall imports.
  * Rename FramebufferDX9.cpp/h to FramebufferManagerDX9.cpp/h
  * Rename FramebufferVulkan.cpp/h to FramebufferManagerVulkan.cpp/h
  * Rename FramebufferCommon.cpp/h to FramebufferManagerCommon.cpp/h for consistency
  * Move a line to a better place
  * Expose SYSPROP_SYSTEMVERSION to Libretro Android core. This fixes crashes with targetSdk 29.
  * Fix Android Libretro build issues.
  * Fix texture upscaling and per game setting fix/cleanup
  * Off by default
  * Add a setting. Various tweaks to sound triggering.
  * Add a couple of more sounds. Rename some vars.
  * Hook up a couple more sounds. Unfortunately clickable back buttons now play both back and confirm sounds...
  * Hook up the first UI sound, make it play.
  * Read in WAV files for UI sounds
  * Initial sound effects
  * BackgroundAudio: Switch to a heap allocated buffer.
  * Consolidate BackgroundAudio.cpp into a class
  * libretro buildfix
  * SaveState: On section version failure, log out the name of the bad section.
  * Vulkan debug log: Remove some old exclusions, add a new one (for an old issue)
  * Minor logging improvements
  * Fix error in sceUsbMic savestate handling (need to accept old savestates without the section)
  * Fix crashes issue due to 0 is a valid index to types_, using invalid index like -1 should give a better/clearer stack trace
  * Save&Restore PSP Thread IDs to prevent using the wrong Thread ID after loading from save state, also making sure DoState have default value
  * UI: Simplify on/off for hardware tex scaling.
  * Vulkan: Allow custom texture upscaling shaders.
  * UI: Add setting for texture upload shader.
  * Lowering minVer of AfterAdhocMipsCall section.
  * Rearranged network's After PSPAction creation/registration so that newer one have higher value to prevent network's callbacks triggering the wrong after action after loading from old save state.
  * Update Vulkan headers to the latest, just to keep up.
  * Add some comments and const-correctness, and a pointer type fix, to the "semaphore" crypto stuff.
  * Reorganized Networking UI (#13232)
  * Init parameters in __UsbMicInit to avoid incorrect initial state when you exit to menu from ingame.
  * Patapon 3 Fix (#13231)
  * Imp sceUtilsBufferCopyWithRange and sceUtilsBufferCopyByPollingWithRange (#13206)
  * minor fix
  * BuildFix
  * Also partly implement in sceUsbCam.
  * Flush audio buffer when a transmission is completed.
  * Do state.
  * Use UTF-8 code page to get the device names.
  * Add basic Microphone support on Windows.
  * Fix alpha channel handling in xBRZ texture filter shader
  * Add two Kernel_Library's nids (#13218)
  * Added a fake thread to process Apctl Request Events into Apctl State Changes
  * Fix some lint warnings, and a "toast" on graphics init failure (instead of previous crashes)
  * Android: Reduce asserts during startup.
  * Some renaming and cleanup in the Android audio code
  * Android: Can't call AlertDialog.Builder.setOnDismissListener before JELLYBEAN_MR1
  * GL: Add some paranoid checks. Remove a useless option.
  * Forgetting "return true" fooled the optimizer into crashing. Fixes #13215.
  * oop
  * Add two SysMemForKernel's nids
  * Add two ThreadManForKernel 's nids
  * Remove unnecessary vector from thin3d_gl texture handling.
  * Remove wrong comment
  * Don't trust the messy error checking in EmuScreen with figuring out what to do with zip files.
  * Reduce use of multi-byte char switches.. saw this go wrong when stepping!?!
  * ExceptionHandler uninstall: Don't crash if no exception handler already installed.
  * Add some threadman's nids
  * Added more stub for some unimplemented sceNetApctl* functions
  * Add two ModuleMgrForKernel's nids
  * Debugger: Add memory.read_*, memory write_*
  * Attempt to fix an issue when the 3rd player joined causing problem to other players on Patapon 3 (this may also affects other games that use AdhocMatching)
  * Added more info to AdhocMatching Logs to get a better insight
  * UI: Fix consistency in vsync setting for iOS.
  * Locking before changing peer linked list order, just to be safe.
  * (Libretro Windows) Buildfix
  * Added target/destination IP & port of sceNetAdhocPtpConnect in the log to get better insight
  * Fix some logs text
  * Fix an issue where a player got disconnected when another player tries to join. This should affects games that use AdhocMatching such as Patapon 3
  * Small perf optimization in debug mode (surprisingly expensive to do a vector lookup here).
  * Libretro: Update minimum windows version to Vista. Committed on behalf of twinaphex
  * D3D11 - don't forget to unbind secondary texture when we need to unbind.
  * Just to be safe since SO_MAX_MSG_SIZE may not be available on all platform and forcing the definition to what windows use might be a bad idea.
  * Making mac2str function easier/cleaner/safer to use for logging purpose
  * Do UPnP stuff on it's own thread to prevent causing stutters/lags during multiplayer game due to blocking socket behavior on miniUPnP
  * Provides quick IP fill on Adhoc Server IP address setting to makes player's life easier :)
  * Need to make sure already connected to Adhoc Server before Creating/Joining a group. (Fix GTA VCS failed to join a group and unable to see any room)
  * Reconnect to Adhoc Server when disconnected while still having the AdhocCtl Inited (ie. due to timeout or network failure) so players doesn't need to reset the game to reconnect.
  * Fix issue when loading save state created from previous test version
  * Correct a crash on a missing kernel object.
  * Fix timeout comparison
  * Minor fixes
  * Fix possible crash issue during Networking Cleanup
  * Fixed PortManager fallback Cleanup issue when exiting PPSSPP due to early WSACleanup
  * Added an option to Disable Nagle Algorithm (Enable TCP No Delay)
  * Fixed UPnP port opened by PPSSPP detection, and Updated PortManager to be compliant to general purpose usage
  * Added a UPnP option to use original port for external port instead of using the shifted port by port offset, to be compatible with real PSP or other PSP emulators
  * Further libretro buildfix
  * Making sure there are no warnings on adhoc code when building on android studio
  * Fixed GvG Next Plus, Phantasy Star Portable 2, and some minor changes
  * libretro buildfix?
  * Attempt to fix compilation error on Linux
  * Fix Blinking game room issue on NFS Most Wanted, this will also fix lobby issue on Ridge Racer 2, Naruto Kizuna Drive, etc.
  * Backport Mac/iOS buildfix from a later commit
  * Use the alloc size from real PSP for FONT_OPEN_INTERNAL_STINGY mode. the
  * Added UI to change WLAN Channel.
  * An attempt to fix socket's behavior inconsistencies across platforms.
  * Implement ANR2ME's solution for miniupnpcstring.h
  * Oops
  * Create an Android.mk for miniupnp
  * Windows: Run the upnp string gen script regardless of architecture, and in UWP.
  * Update the gradle version again.
  * Add PortManager.cpp to Android.mk
  * Switch to my miniupnpc fork with a UWP fix
  * UWP: Unify linker options
  * Set up Windows UWP project for miniupnpc.
  * MiniUPNPC: Windows: Try to fix build on VS 2017, add more platforms.
  * Fix UPnP error detection
  * Added UPnP Support
  * Windows: Add command to load up a new identical instance of PPSSPP.
  * Temporary buildfix
  * Warning fixes
  * Backport a macOS buildfix from later
  * Fix Local IP detection on non-Windows system
  * Making sure Adhoc codes doesn't have compilation warnings
  * Enabling KeepAlive on sockets
  * Increasing the extra delays on Adhoc's callbacks just to be on the safe side, also decreasing the default network's timeout to be noticed sooner
  * making sure there are no alignment warnings related to member of packed struct on android
  * Improved multiplayer stability regardless of I/O Timing method
  * Fix i18n type
  * Improved multiplayer compatibility on some games (ie. GTA VCS, Naruto Ultimate Ninja Heroes 3, DBZ Shin Budokai 2, Power Stone Collection, .hack//Link, etc)
  * Another buildfix
  * Buildfix
  * Separate each AdhocMatching callback's buffer, since callback aren't immediately executed thus using shared memory address may corrupt previous data
  * Making sure adhoc callbacks runs on AdhocThread
  * Silence secondary instances.
  * PSP kernel: Improve logging when accessing bad kernel object handles.
  * Make the instance counter global and initialized at startup.
  * Remove some _XBOX stuff
  * Apply a few lines from "Added UPnP support", removing extra WSA calls.
  * Make PPSSPP_ID persistent every reset/changing game thus have persistent localhost IP
  * Excluding Android from multiple-instance feature because i'm too lazy to learn ashmem :D
  * Oops forgot to change this also for multiple-instance to work properly
  * Support multiple instance of localhost Multiplayer on 1 PC
  * Prevent reporting a bad memory access just because Tekken creates a mutex with a null name.
  * sceMpegAvcCsc: added range validity tests.
  * Buildfix
  * Third part of getting rid of PanicAlert
  * Step 2 of removing PanicAlert
  * Step 1 of removing PanicAlert
  * Remove category from _assert_msg_ functions. We don't filter these by category anyway.
  * Fix a bug in crashhandler where we could end up disassembling far too much.
  * EditorConfig: Separate indent style for libretro.
  * Display: Allow unthrottle to skip only flipping.
  * Support full VSync control in SDL OpenGL.
  * Improve some logging, and print the line number from PanicAlerts.
  * Update lang submodule
  * Eliminate an unnecessary global g_Vulkan.
  * Windows/Vulkan: Don't destroy the surface during resize, no need.
  * More buildfixes
  * Buildfix
  * SDL: Avoid destroying the surface on resize.
  * Cleanup log output on swapchain/surface recreation.
  * Buildfix. Checking _POSIX_VERSION is not recommended anyway.
  * Crash: Show disassembly of the instruction causing the crash, and the symbol name.
  * Split the fault handling from MemMap.cpp to MemFault.cpp.
  * Update README following unknows markup way
  * Savedata: Correct AM/PM and time/date settings.
  * Travis: Don't update python3.
  * Fix
  * (Libretro) Buildfix - add missing file x64Analyzer.cpp
  * Windows ARM fix, cleanup
  * Refactor MachineContext.h to reduce ifdefs elsewhere.
  * There's no sigcontext on 64-bit iOS either, apparently.
  * Yet another iOS buildfix attempt
  * Another iOS buildfix attempt
  * Various platform buildfixes
  * Make fastmem memory exceptions report the exceptions to Core correctly.
  * iOS buildfix attempt
  * HandleFault: Add missing nullcheck
  * Try USE_SIGACTION_ON_APPLE on IOS.
  * MachineContext, Linux/Android: Try to support android-x86 (32-bit)
  * Add x64Analyzer to Android.mk. Some minor cleanup
  * More info on crash screen
  * Exceptions: A bit more consistency in callback registeration.
  * Mac/Linux buildfixes
  * Draw a minimal crash dump on the emu screen after a crash (if bIgnoreBadMemAccess is false).
  * ARM/ARM64 instruction analysis, hook up to handler
  * Skip bad reads/writes by the guest executable.
  * Simple exception handler so we can ignore accesses that happen within the PSP memory space.
  * Switch to a fence instead for readbacks. Some sources suggest this is better than idling a queue or device.
  * Readback: Downgrade from vkWaitDeviceIdle to vkWaitQueueIdle. Probably effectively pretty much the same.
  * Osk: Draw shadows on all the letters.
  * MsgDialog: Show better error messages.
  * MsgDialog: Allow text to be wider.
  * MsgDialog: Add scrollbar when message is long.
  * PPGe: Draw nicer drop shadows.
  * PPGe: Handle text shadows more consistently.
  * Vulkan: Buildfix.
  * Vulkan: Make sure textures/samplers are unbound at the end of PresentationCommon::CopyToOutput.
  * Revert "Disable a new compiler warning that doesn't do us much good"
  * (Libretro) Add MSVC 2019 target
  * Change libretro.cpp to confirm to libretro code formatting conventions
  * Disable a new compiler warning that doesn't do us much good
  * (Libretro) Add optimal input read codepath - bitmasks
  * Remove irrelevant comment
  * Move the Vulkan swapchain out-of-date checking to the vkQueuePresentKHR call.
  * GLES: Invalidate framebuffers bound DONT_CARE.
  * Kernel: Check thread switch PC in release.
  * jit: Add some basic checks in armjit/arm64jit.
  * x86jit: Trigger exec exceptions.
  * irjit: Add jump crash checks.
  * UI: Allow non-ascii on crash dump screen.
  * Core: Track exception on bad jumps.
  * Core: Reset exception info on resume/reset.
  * Kernel: Add a bit more thread info on crash.
  * Add custom GLEW - interfaces with libretro get_proc_address - we need this for compatibility with DRM/KMS and Wayland contexts - otherwise we're limited to GLX context
  * Travis: Use the default macOS image.
  * Update v1.10.3 readme link
  * Expose more information on the crash screen (current kernel thread)
  * Address some feedback
  * Draw a minimal crash dump on the emu screen after a caught crash.
  * Formalize "core excpetions" as a concept
  * Some code reformatting/renaming
  * Centralize handling of memory exceptions a bit
  * Split CORE_ERROR into CORE_BOOT_ERROR and CORE_RUNTIME_ERROR
  * Update version for 1.10.3
  * Update lang submodule
  * Update README for 1.10.3
  * Travis: Disable OSX/iOS until we can fix them
  * Touch control layout screen: Make the expanded click zone around the controls symmetrical.
  * Kernel: Add a little paranoia check on chained mipscalls.
  * Fix decimal part
  * Touch control layout: Make dragging a lot less "jumpy"
  * TouchControlLayoutScreen: Reorder functions in the file to make more sense.
  * Refactor TouchControlLayoutScreen - break out the actual editor into a separate view.
  * (Libretro) Makefile build fixes
  * (Libretro) Buildfixes
  * Change wording of camera notch ignore setting
  * Update version for 1.10.2
  * Update README.md for 1.10.2
  * Add some paranoid checks in AfterMatchingMipsCall::run().
  * Add automated script for link on readme
  * Android: Add option to ignore camera notches when sizing the display.
  * Remove unnecessary logging of preview formats
  * Link PR and issues in README
  * Screen: Unlock the inputLock_ mutex slightly earlier in processFinishDialog
  * Revert "Remove the I/O on Thread option - treat it as always on."
  * http: Check cancel flag more often.
  * Sneak in some paranoia in InstallZipScreen.cpp (another one from #13057)
  * Check that we actually got a preview size.
  * CameraHelper: Do a better job of choosing an appropriate preview size.
  * Add a try/catch to Android camera device listing. Might help #13091 and the issue seen in #13057.
  * Change default rendering resolution on Linux to auto
  * Fix radio button in "Window size" menu
  * Update submodule URL
  * Fix reliability of the CMake generated version
  * README.md update
  * Update version to 1.10.1
  * Update README, lang submodule for 1.10.1
  * SaveState: Prevent edge case on old save state.
  * SaveState: Make sure to default init net data.
  * Add some excessive null checks to GameScreen::render(), might fix the crash seen in #13057
  * Disable the "Duplicate frames" feature if frameskip != 0. Works around / Fixes #13068
  * Some paranoid checks in PPGeDraw. Might help the crash seen in #13047.
  * Downloader: Join threads in CancelAll
  * D3D9: Fix a sign mistake generating the projection matrix. Fixes #13063
  * Different handling of Download lifetimes. Might help an issue from #13057 (1.10 crash mysteries)
  * cmake: don't install bundled glslang
  * Qt: unbreak build without SDL
  * TextureDecoder: Fix misuse of NEON on all armv7
  * Update version number to 1.10. This required changing the Android version code pattern, but should be ok.
  * Update lang submodule again
  * Archive changelog for older versions
  * Add https://github.com/hrydgard/ppsspp/issues/11974
  * Update lang submodule
  * Partly clean up SDL resize code, should help #11974
  * Enable Vulkan validation in SDL debug builds
  * Update Lang
  * Minor style
  * Update readme for v1.10
  * Logging improvements and warning fixes.
  * Finish the Linux part of this change
  * Vulkan: Recreate the swapchain if we get too many "out of date" frames.
  * Buildfixes
  * Move the responsibility to register the debugutils callback to the VulkanContext. We only use one anyway.
  * Simplify the validation interface code, bugfixes
  * Vulkan: Remove support for the old VK_EXT_debug_report extension
  * Update lang and pspautotests submodules
  * oop
  * oop
  * Fix by @unknownbrackets
  * oop
  * Add a sceOpenPSID_driver nid
  * Add sysclib_strncmp,sysclib_memmove
  * Reuse some already translated strings
  * ColorConv: Fix typo introduced in #12882, fixing #13014
  * More README updates
  * More README.md updates
  * Don't forget rpi4
  * Incorporate unknownbrackets' suggestions for the README.md update.
  * iota97's suggested README.md items.
  * Android: Fix odd screen centering with insets.
  * Update lang submodule.
  * Update README.md for 1.10.0.
  * Real support Code Geass: Lost Colors chinese patched version
  * Some work in sceKernelPartitionTotalFreeMemSize,sceKernelPartitionMaxFreeMemSize
  * Add Kurok (homebrew with a distinctive GameID to compat.ini ForceMax60FPS. Fixes #13025
  * Add some ThreadManForKernel nids
  * Change to @unknownbrackets logic
  * oop
  * Add sysclib_strstr
  * Vulkan: Correct secondary texture binding in Draw.
  * Draw: Allow 2 textures bound in Vulkan.
  * GPU: Add sampler1 for postshader orig source.
  * Draw: Fix textures and samplers at an offset.
  * Draw: Use uniform locs for GLES, add samplers.
  * GPU: Alternate FBOs for chained postshaders.
  * GPU: Avoid immediate postshader FBO recreate.
  * Link to buildbot builds of PPSSPP
  * Add sceKernelStdout
  * Kill the log as @hrydgard suggest
  * Reduce sysclib_memcpy log level
  * Real support "Hatsune Miku Project Diva Extend" chinese version
  * Fix logging as @unknownbrackets suggest
  * Wrap sceKernelUnloadModule in ModuleMgrForKernel
  * Wrap some SysMemForKernel
  * Forget HLE_KERNEL_SYSCALL flag
  * Wrap sceKernelExitVSHKernel
  * Warp some ThreadManForKernel
  * Fix some bugs and style for #12994
  * rudimentary serch function added for the memory dialog
  * Code style fix
  * Revert "Repeat of the experimental commit, was too fast for the build bot."
  * Repeat of the experimental commit, was too fast for the build bot.
  * Revert "Experimental commit: Bump up scratchpad size so that Android will act like Windows in #10196 (Spider-Man 3)"
  * Experimental commit: Bump up scratchpad size so that Android will act like Windows in #10196 (Spider-Man 3)
  * VFPU interpreter: Improve some error messages, after seeing a bad one in #10196.
  * We need to check for renderpass change and dirty here too. What a mess..
  * Annotate calls to RebindFramebuffer with their cause.
  * Vulkan DrawEngine: Move the renderstep changed check until after the last place where it can change.
  * Disable range culling for MGS:PW and MGS:PO. See #12348
  * Typo fix. Will hopefully help #12992.
  * Have DisplayLayoutScreen implemented insets manually. Gave up refactoring it.
  * Handle insets correctly for the in-game final screen blit.
  * Minor refactor in PresentationCommon (combine loose coordinates to a struct)
  * VulkanQueueRunner: Fix some uninitialized struct members (not sure if it has any effect)
  * Android: Request stable layout and update on focus.
  * GLES: Use debug groups for render steps.
  * GLES: Avoid duplicate state resets.
  * GLES: Delay buffer use in vertex cache.
  * GLES: Fix disabled vertex cache code.
  * GPU: Try a bit harder to determine safe size.
  * Vulkan: Match safe size behavior on all backends.
  * Io: Fix LBN timing for virtual discs.
  * Io: Cleanup access bits for files.
  * Headless: Handle umd mapping with block devices.
  * Io: Open sce_lbn references and whole ISO faster.
  * Io: Account for OpenAsync timing.
  * Io: Fail without fd on bad device in OpenAsync.
  * Io: Improve non-async open timing.
  * Io: Track whether the game is on a UMD or storage.
  * Io: Simulate VFAT bug only when simulating FAT32.
  * Io: Improve timing of sceIoOpen().
  * Io: Cleanup sceIoOpen errors and logging.
  * Support chain
  * Memory reading CWCheat
  * Add postprocessing CWCHEAT
  * Windows: Make init crash warnings more generic.

-------------------------------------------------------------------
Sat May 30 11:55:18 UTC 2020 - i@guoyunhe.me

- Update to version 0~git20200530:
  * oop
  * Remove log as @unknownbrackets suggest
  * add raspberry pi 64 bit build files
  * Thread: Default to kernel threads from kernel.

-------------------------------------------------------------------
Sat May 30 08:09:19 UTC 2020 - i@guoyunhe.me

- Update to version 0~git20200529:
  * Experimentally enable pixel-depth-rounding for Tales of Phantasia, tries to work around an Exynos driver bug.
  * Time to update gradle again (Android Studio 4.0 was released)
  * Fix minor bug in StereoResampler debug display
  * UWP: Fix safe insets.
  * Vulkan: Ensure depth/stencil load match on Mali.
  * Vulkan: Trivially kill more empty steps.
  * Travis: Build UWP also.
  * UWP: Link ChatScreen.
  * UWP: Stub new inputbox system func.
  * UWP: Buildfix for controller vibration.
  * UWP: Add libpng17 include path.
  * UWP: Include TextDrawer in main MSVC project.
  * UWP: Fix TextDrawer with latest changes.
  * GPU: Don't allow step id to decrease at a sync.
  * Vulkan: Correct viewport flag reset on rebind.
  * GE Debugger: Fix alignment in GE dumps.
  * Do a similar thing for D3D (let the backend handle the dirtying).
  * OpenGL/Vulkan: Rework the contract around dynamic state. Removes some ugly dirtying from the GL render manager.
  * UI: Lock around removal from dispatch queue.
  * Remove all those "GLES reset the blend state" comments.
  * GLRenderManager: Removes some redundant dirtying. Preserves blend state (color mask) across clears.
  * Vulkan: After binding a new framebuffer, we always need to dirty the viewport/scissor state.
  * DarkStalkers: Handle the "normal" screen stretch too, not just "wide", to avoid a surprising performance drop.
  * Exclude a couple more commands from re-execution in ReapplyGfxState. See
  * GPU: Don't reapply LoadClut each frame.
  * PPGe: Left align messages in dialogs.
  * Windows: Workaround for custom build step error.
  * Windows: Avoid calling git describe 3 times.
  * SDL: Try to continue if EGL init fails.
  * Windows: Move git-version update to build event.
  * Global: Add more other platforms to MSVC project.
  * Headless: Fix flash0/font path.
  * Debugger: Avoid symbol map if deleted.
  * Debugger: Don't break during startup.
  * Android: Buildfix.
  * GPU: Never set safe size larger than the buffer.
  * [Camera/V4L] Add support for jpeg and multiple buffers
  * Windows: Ask for a specific device on failure.
  * Windows: Avoid WASAPI init for a bad format.
  * Windows: Avoid crash for a mono output format.
  * Ge: Check stack depth based on args struct size.
  * GPU: Ignore viewport for scissor of 481.
  * Vulkan: Label render passes in RenderDoc/etc.
  * Vulkan: Cleanup some duplicate code.
  * Correct an issue where reformat didn't work if no renderpass was active due to the use of clear.
  * Remove a redundant framebuffer bind in CopyDisplayToOutput
  * Add a name tag for all render steps (GL/Vulkan). Helps with debugging and should be cheap enough (a single pointer per "step").
  * Move the check from #12908 into the firmware version check.
  * Vulkan: Avoid stencilAction != depthAction.
  * Vulkan: Check driver version for Adreno 5xx bug.
  * Vulkan: Move Harvest Moon fix to Draw::Bugs.
  * Vulkan: Stencil initialization: Use the adreno path for Mali as well.
  * Fix a case of pointer truncation in Vulkan on 32-bit. Fixes #12932
  * Vulkan crashfix (pNext was uninitialized)
  * Vulkan: Fix leak and remove extra allocator.
  * Vulkan: Create FB compatible pipelines in Draw.
  * Vulkan: Expand logging of render steps a bit.
  * D3D9: Avoid clearing color on stencil upload.
  * GPU: Avoid unnecessary clear on stencil upload.
  * Revert "Experimental commit that effectively reverts the Vulkan part of #12882."
  * Experimental commit that effectively reverts the Vulkan part of #12882.
  * Fix the Windows 32-bit build.
  * Track scissors like we track viewports (bugfix?).
  * Show "debug build" on the splash screen, in debug builds.
  * Vulkan: Switch the framebuffer-rebind-to-clear on reformat to, well, a normal clear instead.
  * Vulkan: Verify scissor as well.
  * Vulkan: Add asserts to catch no viewport render.
  * UI: Take reporting screenshot at frame end.
  * Vulkan validation: Switch to the new Khronos validation layer shipping with recent SDKs.
  * Vulkan: Stop merge at clear/touched read only.
  * Vulkan: Make merge pass a bit easier to read.
  * GLES: Fix invalidation of backbuffer.
  * Vulkan: Generalize dependency tracking.
  * GLES: Add dependency tracking for render passes.
  * GPU: Centralize framebuffer download.
  * Buildfix
  * Remove the Audio Resampling setting (now always on). Having it off is not useful because it'll never sync up perfectly over time.
  * Revert the loop check in StereoResampler, new one could accidentally keep looping when underrun severely (like if emulation stopped).
  * Add more debug info in scePsmfPlayerStart
  * Make the IsValidPBP DISC_ID check a bit more lenient. Fixes an issue where some homebrew would no longer show in the list.
  * Fix homebrew store button to work even after changing grid layouts (it lost its click handler)
  * Fix a crash bug in homebrew store
  * Remove our custom atomics code entirely.
  * Convert atomic code in core and ConsoleListener to use C++ atomics
  * Reduce the SDL audio buffer size, 2048 is a bit excessive. Port the changes to the Qt SDL code.
  * StereoResampler: Make sure the target buffer size is large enough, taking SYSPROP_AUDIO_FRAMES_PER_BUFFER into account.
  * Rename things to make more sense.
  * StereoResampler: Use C++ atomics
  * Add some vaguely interesting stats
  * SDL: If we get an audio device with a different freq than 44100, that's actually OK.
  * arm64jit: Track writable and non-writable pointers.
  * Mp4: Cleanup some parameters.
  * cmake: Fix rpi4 build on newer gcc.
  * GPU: Fix an overflow loading old save states.
  * GLES: Specify buffer type just to be safe.
  * arm64jit: Minor cleanup.
  * GPU: Allow each shader in chain to have settings.
  * UI: Translate shader setting names.
  * GPU: Keep last output size in chained postshaders.
  * GPU: Prevent infinite loops in postshader chains.
  * GPU: Force nearest only for the upscaling filter.
  * GPU: Move calculating render res to presentation.
  * GPU: Allow postshaders to have parents.
  * GPU: Update postshader uniforms for each.
  * GPU: Process all postshader pipelines.
  * GPU: Cleanup a comment, we use shorts now.
  * GPU: Move things around to be per postshader.
  * Simplify how to get the debug stats from StereoResampler
  * Fix comment
  * Qt fix
  * Only show frames per buffer if the number is available through sysinfo
  * Oops, need to pass an (invalid) slot number in headless too.
  * SDL: Show the actually used sample rate in system info.
  * oop
  * Fix "Improved compatibility of sceGeListEnQueue: verify that stackDepth < 256"
  * Display the savestate slot number when saving and loading state through shortcuts.
  * Very minor optimization in PresentationCommon (don't upload the indices every frame).
  * Fix per game setting and pack setting in vec4
  * Use map for settings
  * Post shader setting uniform
  * Thin3D: use 16-bit indices. Fixes #12898.
  * GPU: Oops, don't skip copy if stride different.
  * Fix DarkStalkers after the just-merged refactoring.
  * Draw: Small optimization to callback.
  * Libretro: Add libpng17 to include flags.
  * GPU: Take A off RGB565 conversion funcs.
  * GPU: Use texclamp for postshader/present draw.
  * GPU: Centralize DestroyAllFBOs().
  * GPU: Cleanup presentation flipping a bit.
  * D3D11: Allow pixel shader uniforms in Draw.
  * GPU: Cleanup skip buffer texture draws.
  * GPU: Simplify direct render when skipping buffers.
  * softgpu: Fix postshader on 5551.
  * D3D9: Attempt PS/VS 3.0 if it doesn't work with 2.
  * GPU: Use postshader for direct VRAM draws again.
  * GPU: Use a texture directly for MakePixelTexture.
  * softgpu: Avoid RB swizzle when using a postshader.
  * Vulkan: Allow frag shader UBO reads.
  * Vulkan: Correct missing offsets in Draw.
  * Vulkan: Correct postshader sampler binding.
  * Draw: Actually use the index offset parameter.
  * softgpu: Enable postshader support.
  * GLES: Fix reuse of vertex data buffer.
  * GPU: Cleanup leftover postshader stuff.
  * UI: Allow postshaders on D3D9.
  * GPU: Move post shader handling to new class.
  * D3D9: Enable postprocessing of post shaders.
  * Draw: Enable backwards compat on D3D11 shaders.
  * Draw: Add more uniform types.
  * Draw: Allow specifying a tag on shaders.
  * GPU: Move a bit more to new display approach.
  * softgpu: Allow display rotation.
  * softgpu: Allow configuring Google Cardboard.
  * GPU: Move cardboard/etc. to PresentationCommon.
  * Vulkan: Fix Draw usage of framebuffers.
  * GPU: Split FramebufferCommon into two classes.
  * softgpu: Fix texture overlap.
  * GPU: Handle buffer overhead in postshader uniforms.
  * Android: Oops, fix start with space in filename.
  * Global: Add some defs for MSVC highlighting.
  * Temporarily disable YuGiOh save fix (experiment in issue #7914)
  * Improved compatibility of sceGeListEnQueue: verify that stackDepth < 256
  * D3D11: Better set current texture to null first, otherwise we can run into another issue.
  * Fix a comment
  * D3D11: Fix a bind ordering issue in depal (only a problem with debug layer enabled)
  * ColorConv: Fix a few conversions that missed the lower bits of each component.
  * Vulkan: Don't merge render passes where the second one begins with a clear.
  * Android: Avoid multiple resizes in a row.
  * UI: Add more options to touch test screen.
  * UI: Return to game settings after restart.
  * Windows: Fix GL reinit on backend switch.
  * Android: Move a bit more size handling.
  * Android: Reassert sustained perf when going ingame.
  * Android: Refactor size maintenance to own class.
  * GPU: Minor lighting cleanup in software transform.
  * GPU: Split up software transform into phases.
  * Windows: Add safety checks to WASAPI code.
  * GLES: Add safety handling for offset depal.
  * GPU: Calc framebuf offset with right params.
  * GPU: Avoid a texture offset change in sw transform.
  * GLES: Simplify the framebuf offset detection.
  * Vulkan: Framebuffer manager: Use an allocator for "MakePixelTexture" images.
  * compat.ini: Turn on ForceUMDDelay for Innocent Life. See issue #2830.
  * iOS/macOS : set bundle version
  * iOS : File association
  * compat.ini: Set ForceMax60FPS for Super Monkey Ball Adventures. See #7674.
  * Make PPSSPP visible in OUYA launcher
  * Fix: touchscreen evens on upcomming SDL2 versions which includes the same functionality but inside the library
  * And another mumbo jumbo game (#12857)
  * Enable ForceMax60FPS for games published by MumboJumbo. See issue #12857
  * Vulkan: Discard negative width/height framebuffer blits. Will likely help #12531.
  * Address additional feedback from Unknown, finally
  * Assorted fixes (build and crash)
  * Use PPSSPP's kernel interface to retrieve Heap objects
  * Address Unknown's feedback
  * Change to info log
  * Attempt to make save status
  * Fix crash in sceKernelDeleteHeap
  * Attempt to build fix non-windows
  * remove comment
  * Try to Implement  SysMemForKernel
  * Move SysMemForKernel to sceKernelMemory
  * oop
  * Wrap some SysMemForKernel's nids
  * Update <Share> dialog on Android 10
  * iOS Share PPSSPP
  * Travis: Handle new package versions better.
  * PPGe: Remove half-pixel offset.
  * http: Fix thread join on enable/disable.
  * "Unify" the credits screen. Fixes #12844.
  * Android: Don't cache env in text drawer.
  * Update gradle again
  * GLES: Disable range culling on old Tegras, they seem to misbehave (see issue #12838).
  * update VS projects
  * D3D11: Always use accurate depth.
  * Windows: Send resize when adjusting render mode.
  * Add "Switch UMD" menu point to Linux version
  * Improve code readability
  * Implement PPSSPP specific cheats:
  * Update more Linux version menu points to correspond to Windows ones
  * Remove leftovers
  * Add "Record" menu group to Linux version
  * TextureReplacer: Generate a default value in the ini files for ignoreMipmap.
  * Add "Enable chat" menu point to Linux version
  * Auto rotate over a square
  * Fixes (stage 3)
  * Update TextureReplacer.h
  * Update TextureReplacer.cpp
  * Fixes (stage 2)
  * #8714 Unified resolution scaling for all platforms.
  * Add option to prevent Mipmaps from being dumped
  * Fixes (stage 1)
  * Turn on [ForceMax60FPS] for  "Fat Princess: Fistful of Cake". Benefits loading times etc.
  * Update "File" menu to match Windows version
  * Update "Emulation" menu to match Windows version
  * Update "Debug" menu to match Windows version
  * Update "Options" menu to match Windows version
  * Update "Help" menu to match Windows version
  * UI: Respect insets with on-device debug stats.
  * GE Debugger: Prevent crash when stopping execution.
  * GLES: Update shader uniforms after apply state.
  * Cheats: Fix use in homebrew on start.
  * Cheats: Cleanup global usage.
  * UI: Cleanup old specialized checkbox.
  * UI: Monitor cheat file changes on cheat editor.
  * UI: Update cheat file more safely.
  * UI: Use standard back and checkbox in cheats UI.
  * UI: Prevent changing memstick path in game.
  * Travis: Cache macOS python build as a bottle.
  * Audio: Remove latency setting.
  * GLES: Re-enable non-float depal shader path.
  * Update gradle again
  * x86jit: Force INF * 0 to +NAN.
  * Windows: Prevent applying -1 as inset space.
  * Windows: Ensure we resize after hw transform swap.
  * Headless: Fix compile on Android.
  * UI: Small cleanup in touch control layout editor.
  * UI: General cleanup in layout editor.
  * UI: Prevent drag drift in layout editor.
  * UI: Make display layout editor support 1x PSP.
  * Fix SDK requirements of Atlas and Zim tools.
  * Net: Correct pool allocation.
  * GPU: Track HW tess at start of frame too.
  * GPU: Reset hw transform once per frame.
  * GPU: Move hw transform decision to draw engine.
  * GPU: Update uniforms w/ consistent render mode too.
  * GPU: Use consistent buffered rendering state.
  * Setting the width and height to 0 made the frameskip unusable on lakka/libretro with a XU4 with a MALI GPU T628. The result was that bad flickering happened when in frameskip mode. Once it reached 60fps, no flickering, below that flickering. This change fixes the flickering and calls video_cb with the correct height and width.
  * Travis: build libretro android
  * libretro: Fix Android builds
  * Mouse 4 as back in menu navigation
  * android: include path fix
  * Android: Change the display length for "toast" message to Toast.LENGTH_LONG
  * Touch layout clean up
  * UI: Properly clamp control positioning in edit.
  * [iOS] Notch support
  * Additional rendering fixes for notch
  * Fix landscape/reverse landscape cutout padding issue, see #12779
  * Update the lang submodule
  * Support drawing around notches on Android displays. Fixes #12261
  * Target Android SDK 29.
  * Vulkan: Pick shaders after calling ConvertStateToVulkanKey because it may end up disabling shader blending
  * Fix duplicate translation ID
  * PPGe: Slightly reduce the font size, might help #12764
  * Windows: Show a message when failing over backend.
  * Back to ERROR
  * Remove outdated code that reset the logenabled flags on non-Windows. Fixes #12291
  * Minor log improvement in BlockDevices.cpp
  * Rember cheat scroll position
  * HLE: Oops, make sure we don't deadbeef mips calls.
  * macOS: Fix build
  * SaveState: Correct compat load with OSK changes.
  * PPGe: Fix dialog button positioning.
  * UI: Prevent stretching game icons on detail.
  * Do not apply sensibility of deadzone skip
  * Fix translation things
  * Enable chat input for SDL
  * Skip deadzone option on tilt
  * HLE: Fix some misleading logging.
  * Windows: Fix strange build error.
  * UI: Translate HAT and left analog the same way.
  * Use 2 different button for CW and CCW
  * Core: Add argmask for threadhacks to prevent crash.
  * GPU: Treat negative light exp same as 0.
  * Android: Reassert immersive after input dialog.
  * cmake: Improve building with the system libpng.
  * Osk: Correct UCS2 conversion.
  * Auto rotating analog
  * Camera: Fix missing return warning.
  * Remove some more uint16_t
  * More correctly handle UCS2 encoding.
  * Address feedback
  * Support a few more wstring functions on non-windows platforms, due to the armips assembler.
  * Text input: Clearly use 16-bit chars like the PSP, don't rely on wchar_t.
  * PPGe: Avoid crash with missing metadata.
  * HLE: Make calling mips funcs simpler.
  * GPU: Assume a scissor of 481x273 is a mistake.
  * Io: Apply VFAT hack only to dirs <= 8 chars long.
  * UI: Allow startup without UI assets.
  * UI: Avoid crash when atlas metadata is missing.
  * UI: Avoid cached booleans for simple globals.
  * UI: Disable render dup frames where it can't work.
  * Font: Prevent crash on game exit.
  * Android: Fix dismiss of OSK dialog.
  * Reporting: Log SceIoChstat calls.
  * GPU: Avoid divide by zero in garbage displaylist.
  * GPU: Fix memory corruption with bufw > w.
  * Add more assets directory paths.
  * Correcting return value of some mipscalls without after action.
  * Qt: Correct DPI accounting in font rendering.
  * cmake: Disable discord-rpc for libretro builds.
  * Fix the logic around postEffectRequiresFlip so duplicateFrames doesn't require a post shader.
  * Vpl: Correct allocation order when splitting block.
  * Core: Use full memory for ELF files.
  * Reset the useAllocCallbacks on font init.
  * Buildfix.
  * Display: Update latched fbaddr on immediate update.
  * Fix states.
  * No need to manually decide pending or not for mipscalls.
  * Net: Stub network sign-in dialog.
  * Net: Support NETCONF_CONNECT_APNET_LAST request.
  * NetAdhoc: Match init/term behavior better.
  * Net: Better simulate sceWlanGetEtherAddr timing.
  * Net: Handle memory allocation better.
  * Add option to improve frame pacing through duplicate frames if framerate is below 60hz.
  * UI: Rebind the backbuffer when drawing UI.
  * Switch: Add EGL interface.
  * Kernel: Rename conflicting kernel object names.
  * Font:alloc/free memory for font file and char bitmap.
  * Vulkan: Blacklist on Switch.
  * Core: Add some libnx calls for Switch.
  * Core: Use a lock for i18n categories.
  * PPGe: Clear unused parts of text image buffers.
  * PPGe: Correct double spacing in some save text.
  * libretro makefile fix
  * Camera: Simplify an expression.
  * Core: Quiet some warnings.
  * Android: Delay TextDrawer init in PPGe.
  * PPGe: Show ellipsis for overly long lines.
  * PPGe: Use TextDrawer for save UI if available.
  * PPGe: Make some of the API internal only.
  * PPGe: Support 8-bit text bitmaps from TextDrawer.
  * PPGe: Allow overriding text drawer DPI scale.
  * Qt: Cleanup differences in text hashing.
  * UI: Refactor TextDrawer to provide bitmaps too.
  * UI: Minor cleanups to chat UI code.
  * Fix capitalization of mfreadwrite.h include
  * Windows: Warn if Windows Firewall blocks PPSSPP.
  * http: Show more detailed status when scanning.
  * http: Correct new thread executor.
  * Android: Enable native keyboard for OSK.
  * softgpu: Correct clear/solid rect BR corner.
  * Android: Fix upside-down joystick navigation (due to an old sin).
  * New heuristic for getting rid of unnecessary "antialias-lines".
  * THe proposed Hive Sweeper fix in #11025 looks right, let's just commit it.
  * Possible fix for libretro build issue. (blind commit, untested)
  * Osk: Prevent adding highlighted char past limit.
  * Core: Avoid shadowing a define.
  * Io: Correct some error handling for OpenFile().
  * Android: Avoid translation conflict in translation.
  * UI: Move Camera settings lower in Graphics.
  * Android: Process input prompts more clearly.
  * UI: Make System_InputBox API asynchronous.
  * Vulkan: Track down another one of those minor resource leaks.
  * Module: Reinit gpu only on runtime module load.
  * Android: Reload game config on storage permission.
  * Android: Ensure we forget the shortcut on next run.
  * Update lang submodule
  * UI: Temporary solution to the layout issue: Remove the gear button from the recent screen.
  * Vulkan: Ensure scaling happens in cached RAM.
  * Headless: Prevent crash running graphics tests.
  * Vulkan: Fix minor vulkan resource leak if inflight frames isn't max.
  * UI: Simple joystick navigation. Fixes #10996.
  * Comment fix
  * Also move out the global stuff from view.cpp/h to root.cpp/h
  * UI: Break out the hierarchy functions into ui/root.cpp/h
  * Minor cleanups
  * UI: Ignore invalid PBPs in game browser.
  * u8_clamp clean up
  * Let's wait 5 frames
  * Fix wheel up/down and additional mouse button
  * Android: Fix glslang include path.
  * Force Polar's Puzzles to use accurate UMD timing. Should help #12677
  * Add the glslang include path in another place
  * http: Avoid detach() in webserver code.
  * Core: Bring over some file related Switch changes.
  * Another attempt
  * Fix atlas tool build on linux
  * Also try to fix the legacy Android build.
  * CMake buildfix
  * Update the glslang submodule, fix the build afterwards.
  * Better smoothing and added missing break on MOUSE_WHEEL
  * Fix excessive scroll
  * Warning fix.
  * Attempt to replace 0 frame width with valid frame width.(sceMpegAvcCsc)
  * UI fix
  * GPU: Restart when changing inflight frames setting.
  * Tweaked chatbox a little bit
  * Fix chat color formatting
  * Fix building errors
  * Fix weight
  * Move clear game list to new menu
  * Update lang submodule
  * GPU: Use old frame when presenting a skip.
  * Address some feedback, thanks unknown
  * Fix toggle
  * GPU: Allow choosing number of inflight frames.
  * Squash commit
  * Vulkan: Allow alt speed above 60 with vsync.
  * Rebase on master
  * GPU: Add setting to control inflight frame usage.
  * Warning fixes
  * Vulkan: Support devices that don't properly support 16-bit texture (like MoltenVK).
  * Fix bug in atlas gen.
  * Switch all images to dynamic lookup in the atlas by string ID.
  * Get rid of atlas tables.
  * Update atlas building scripts
  * Modify atlas generator to output binary metadata
  * D3D9: Allow vsync change at runtime.
  * D3D11: Respect vsync setting.
  * Vulkan: Present using FIFO for vsync.
  * GPU: Centralize vsync interval logic.
  * UI: Respect resize flag during graphics init.
  * Debugger: Stop remote server in full shutdown.
  * Remove support for "lowmem" UI atlas. Had to regenerate unfortunately.
  * And 2017 again...
  * Delete unused support for ETC1 texture compression
  * And fix it on 2019...
  * Recreate the VS projects in 2017
  * Code cleanup
  * More VS2017 compat
  * Reformat the atlastool/zimtool source, fix warnings.
  * Atlastool/zimtool: Try not to require VS 2019.
  * Atlastool/zimtool: Make it easy to build these on Windows (prebuilt submodule)
  * Log shader contents to VERBOSE instead of DEBUG.
  * Update gradle again
  * ScanForFunctions: Drastically speed up by only trying to insert the newly found functions into the symbol map.
  * Rename func.
  * Check whether the audio is actually played in psmf player
  * Better align and spacing of UI element
  * Better UI for game version in list view
  * Toggle mute button
  * Go for Abbanon approach
  * Scale font down a bit
  * Improve stability on non-jailbroken devices
  * Add a option for game ID+version as well
  * Show region on game selection screen
  * Kernel: Delay better in sceKernelReferThreadStatus.
  * Rename rapid fire touch control
  * UI: Separate sleep time in frame time graph.
  * UI: Show refresh rate on more platforms.
  * UI: Correct refresh rate display.
  * Add toggle flag to combo button
  * UWP: Update "certificate thumbprint" to one that works
  * Fix linking issue in the UWP build (add camera files to project)
  * Add some reference line
  * Framegraph in devmenu
  * macOS permissions
  * QT Api for Camera (Linux/macOS)
  * Core: Use a shared_ptr for i18n categories.
  * HttpClient/Buffer: Just some tweaks/sanity checks
  * libretro: android: ios: Add stub camera functionality
  * libretro: android: Do not build in the standalone UI
  * Fixes
  * Switch mode only if needed
  * SDL analog mouse input
  * Modify Info.plist automatically
  * NativeApp: add System_GetPropertyFloat all the places
  * Qt/macOS: enable HiDPI ( retina display ) support
  * Remove unused import.
  * Use System_GetPropertyInt(SYSPROP_SYSTEMVERSION to retrieve version.
  * Use ASharedMemory api instead of direct access to /dev/ashmem which is deprecated.
  * compat.ini: Workaround for timing problem in Hot Wheels, see #12604.
  * Rapid fire touch control
  * Add new listeners in addition to those present which are deprecated
  * Core: Future proof CSO support a bit.
  * DX9: Simplify some expressions
  * GPU: Only GL uses a flipped buffer in non-buffered, reflect that in the SW transform code.
  * Apply viewport before SoftwareTransform so flipping can be checked
  * OpenGL: Call ApplyDrawState before SoftwareTransform
  * DrawEngineDX9: Rename lookup table, cleanup
  * Location: add HDOP; change speed to km/h; change altitude from geoid to sea level
  * Do not stop camera if unnecessary
  * Android satellites info
  * Common/Hashmaps.h: add missing <stdint> include
  * Update macOS system name
  * Add camera/location support for iOS
  * Don't shut down camera when exiting games,also re-enumerating devices if
  * Partial workaround for #12588. Cameras are now gone from settings though after playing one game...
  * D3D11: Fix mistake in UI vertex shader for non-textured geometry. Fixes #12587.
  * Add support for iOS ( completely untested )
  * Initial support for vulkan on macOS ( MoltenVK )
  * Revert "Android EGL config: Always require 8888, stencil if version >= ICS"
  * SDL app icon
  * Add camera support for linux (V4L2)
  * Add DEFLATE and MD5 to HLE module blacklist. Replaces #12576, fixes #12570
  * Flush other UI element draw before changing to noTex
  * Fix line rendering in texmode
  * Add another game controller mapping. Fixes #10679
  * Render grid
  * BuildFix2
  * Oops
  * Improve compatibility.
  * BuildFix
  * Loader: If the module range is bad, don't get stuck trying to scan for functions.
  * Update lang submodule
  * Add camera support for windows.
  * Async I/O: Don't delay on close. Fixes #12549 (MGS:PW crash).
  * Warning fix
  * Avoid divison by 0
  * Remove extra newline
  * Snap resize
  * Upload new Gold icon for Windows
  * PRX Decryption: add pauth decryption
  * PRX Decryption: add missing decryption keys
  * PRX Decryption: add support for gzip compressed executables
  * PRX Decryption: add support for type 0/1/2/5/6 decryption
  * Don't check auAddr.
  * Check invalid address in sceMpegAtracDecode.
  * Update submodules assets/lang, ffmpeg
  * Add headbar icon to Qt
  * Qt: don't return dangling pointer
  * Don't use the MAP_32BIT flag on any platform.
  * Mac: MAP_32BIT is no longer supported in Catalina and breaks. We don't need it anymore anyway. Fixes #12495.
  * Windows: Mark PPSSPP as long path aware.
  * Windows: Make TEMP dir detection long path aware.
  * Windows: Allow long path for sys directory.
  * Windows: Support long My Documents paths.
  * Windows: Allow longer paths in browse for folder.
  * Windows: Make memory dump long path friendly.
  * Windows: Allow read only files in load dialog.
  * Windows: Make open/save dialogs long path aware.
  * Windows: Resolve module/full paths for long paths.
  * Io: Correct async priority default on async open.
  * Oops.
  * fix
  * Io: Return a better error code for sceIoCancel.
  * Io: Update async priority more correctly.
  * Change async priority to current thread'priority if priority = -1.
  * minor fix
  * Avoid thread queue out of range by a offset.
  * Move umd replace to loaders.
  * compat.ini: Add Japanese Game ID for DarkStalkers (Vampire Chronicles)
  * SDL: Ignore audio switch events in first second.
  * Io: Allow adjusting default async thread priority.
  * Io: Correct leak on save state.
  * Just return error if current directory not be setted.
  * SoftGPU: Convert from 16-bit if unsupported.
  * Hide "Control" label on top
  * Disabled grid size if snap is disabled
  * Fix
  * Touch controll grid snap
  * Update build.gradle.. again.
  * Don't ignore SCE_KERNEL_ERROR_NOCWD in many cases.
  * IO:Re-grab SCE_KERNEL_ERROR_NOCWD.
  * IO:Add an extra delay to simulate umd delay in file seek whence.
  * vulkan: The GPU profiler could end up writing massive amounts of text, fix some bugs around that.
  * vulkan: ApplyRenderPassMerge; Add copy / blit destinations to touched buffers.
  * Vulkan: Enable renderpass merging for all games (was introduced in 1.9 for GoW games). A number of other games can also benefit.
  * Update lang submodule
  * Do not assert in Discord::Shutdown
  * Update CMakeLists.txt
  * libretro buildfix
  * Update libretro.cpp
  * Remove the I/O on Thread option - treat it as always on.
  * Yet another gradle update
  * Fix vcrs disassembly
  * Oops
  * Isolate most of the softgpu specialization code to RasterizerRectangle.
  * Fix a backwards check
  * Remove unused textureswizzle support (we use shaders instead).  Universally support presenting 5551 format directly.
  * Hack around most of the problems with the save/load dialog. Software stretch gets enabled in non-wide mode, so wallpapers work at a cost of speed.
  * Scissor fix
  * Even more speed.
  * More speed
  * Buildfix
  * Further specialization.
  * More specialization work.
  * DarkStalkers: Fix display on OpenGL ES.
  * DarkStalkers: Fix display in the D3D backends. Still broken in OpenGL.
  * Darkstalkers: Gross hack to avoid the game's own stretch, and present the raw buffer instead for a sharper image.
  * More darkstalkers work
  * Detect sprite drawing (1:1 texture mapping), run a simpler function without the triangle state tracking.
  * SoftGPU: Detect through-mode rectangles from triangle strips
  * Software renderer: Use hardware color conversion on Vulkan in 5551 16-bit mode
  * Start slowly migrating from macros
  * Add a compat.ini flag for software rendering, use it to force on in Darkstalkers
  * Buildfix
  * Also rename the config setting to make sure it starts out off.
  * Cardboard VR: Add an on-screen VR OFF button. Enable Cardboard on iOS.
  * Revert "Remove Google Cardboard support. Fixes #11668"
  * Update lang submodule, adding Croatian, thanks to HilmBrala
  * Text drawing fixes
  * Correct the wrong GL DataFormat enums
  * GL: remove another unused format
  * Reduce GL texture format support to the ES minimum. We have to handle these anyway so let's only have one path.
  * OpenGL dataformat cleanup - pass Draw::DataFormat to the GLRenderManager.
  * Fix the build - there's a Vec3 name collision, fixed it using a namespace.
  * Vulkan+SoftwareRenderer: Fix screen rotation on Android.
  * Io: Consistently use error codes with OpenFile().
  * Io: Return error code for write attempt to UMD.
  * Io: Change async thread priority if running.
  * Io: Destroy async threads on reset.
  * Vulkan: Add checks so we don't try to write NULL objects to a descriptor set.
  * Change Bloom Hack aggressive detection to include GOW games bloom.
  * Use old jit enablement method if clean method fails
  * HLE: Replace Motorstorm pixel read func.
  * Make style more consistent
  * Update ab.cmd
  * group chat options and set enabled ptr
  * Bug fix
  * Quick Chat
  * Add virtual key for opening chat
  * Rebased and fix the update scroll
  * build fix
  * chat screen & chat button position and hide ui on show chat
  * remove pointer and using update() should fix random crash (thanks Uknown)
  * Add translation of "You're in Offline Mode"
  * Build fix for Linux QT
  * Add support OSK for windows
  * Android chat empty after : fix
  * pointer and scroll fix
  * cmake buildfix
  * Windows CTRL + C Hotkey
  * Add New Chat Counter
  * Android Chat Support
  * Oops it still random crashed destructor do the fix well
  * pointer fix random crash & better substring logic
  * Add translation
  * Enable chat box
  * PPSSPP early chat feature rebranched

-------------------------------------------------------------------
Wed Oct 16 16:40:30 UTC 2019 - Yunhe Guo <i@guoyunhe.me>

- Initial version
