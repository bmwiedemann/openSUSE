From 8b738b6e447c170c89ecb8354c2e7c51ba3580d7 Mon Sep 17 00:00:00 2001
From: theGreatWhiteShark <princess.trudildis@posteo.de>
Date: Sat, 23 Dec 2023 20:54:41 +0100
Subject: [PATCH 1/4] tests: add integration tests

to reproduce crash on teardown when using JACK as audio driver.

Test is not done yet. It works properly on non-zero exit codes but not on crashes (which is what we encounter here)
---
 src/tests/README.md          |  4 ++
 tests/README.md              |  6 +++
 tests/jackTearDown/README.md | 18 ++++++++
 tests/jackTearDown/go.mod    |  5 ++
 tests/jackTearDown/go.sum    |  2 +
 tests/jackTearDown/main.go   | 89 ++++++++++++++++++++++++++++++++++++
 6 files changed, 124 insertions(+)
 create mode 100644 src/tests/README.md
 create mode 100644 tests/README.md
 create mode 100644 tests/jackTearDown/README.md
 create mode 100644 tests/jackTearDown/go.mod
 create mode 100644 tests/jackTearDown/go.sum
 create mode 100755 tests/jackTearDown/main.go

diff --git a/src/tests/README.md b/src/tests/README.md
new file mode 100644
index 000000000..6aea42a6d
--- /dev/null
+++ b/src/tests/README.md
@@ -0,0 +1,4 @@
+Unit test of Hydrogen's core library. Not to be confused with our [integration tests](../../tests/).
+
+These tests are executed in our **AppVeyor** build pipeline as well as when calling
+our [build.sh](../build.sh) script with `t` as argument.
diff --git a/tests/README.md b/tests/README.md
new file mode 100644
index 000000000..913e12892
--- /dev/null
+++ b/tests/README.md
@@ -0,0 +1,6 @@
+Integration tests used to check more complex use-cases we can not cover using
+our [unit tests](../src/tests/).
+
+They are not routinely executed without our **AppVeyor** build pipeline or when
+calling our [build.sh](../build.sh) script with `t` as argument. But they are,
+nevertheless, designed to exit with code `0` on success and with `1` on failure.
diff --git a/tests/jackTearDown/README.md b/tests/jackTearDown/README.md
new file mode 100644
index 000000000..2f8548c31
--- /dev/null
+++ b/tests/jackTearDown/README.md
@@ -0,0 +1,18 @@
+Integration test to check whether Hydrogen does properly exit without crashing
+when using the JACK audio driver.
+
+## Requirements
+
+- `hydrogen` - the system-wide installation is used
+- `Go` >= 1.20
+- `JACK`
+
+The code is written and tested on **Linux** Devuan. But since the `OSC` package
+is written in pure `Go` and all other packages used are part of the standard
+library the code _should_ run on **macOS** and **Windows** as well.
+
+## Usage
+
+``` bash
+go run main.go
+```
diff --git a/tests/jackTearDown/go.mod b/tests/jackTearDown/go.mod
new file mode 100644
index 000000000..d080e8ca5
--- /dev/null
+++ b/tests/jackTearDown/go.mod
@@ -0,0 +1,5 @@
+module hydrogen/integrationTests/jackTearDown
+
+go 1.20
+
+require github.com/hypebeast/go-osc v0.0.0-20220308234300-cec5a8a1e5f5
diff --git a/tests/jackTearDown/go.sum b/tests/jackTearDown/go.sum
new file mode 100644
index 000000000..c7934bfa3
--- /dev/null
+++ b/tests/jackTearDown/go.sum
@@ -0,0 +1,2 @@
+github.com/hypebeast/go-osc v0.0.0-20220308234300-cec5a8a1e5f5 h1:fqwINudmUrvGCuw+e3tedZ2UJ0hklSw6t8UPomctKyQ=
+github.com/hypebeast/go-osc v0.0.0-20220308234300-cec5a8a1e5f5/go.mod h1:lqMjoCs0y0GoRRujSPZRBaGb4c5ER6TfkFKSClxkMbY=
diff --git a/tests/jackTearDown/main.go b/tests/jackTearDown/main.go
new file mode 100755
index 000000000..58664eb94
--- /dev/null
+++ b/tests/jackTearDown/main.go
@@ -0,0 +1,89 @@
+package main
+
+import (
+    "fmt"
+    "log"
+    "os/exec"
+    "time"
+
+    "github.com/hypebeast/go-osc/osc"
+)
+
+// How many times the test should be repeated.
+const numberOfTestRuns = 100
+const oscHydrogenPort = 9000
+
+// hydrogenStartupTime gives an upper limit for the time Hydrogen requires to
+// start up in milliseconds.
+const hydrogenStartupTime = 3000
+
+// hydrogenStartupChan is used by startHydrogen() to indicate that Hydrogen was
+// started.
+var hydrogenStartupChan chan bool
+
+// Integration test checking for errors/crashes when closing Hydrogen while
+// using the JACK driver (on Linux).
+func main() {
+    var err error
+
+    _, err = exec.LookPath("hydrogen")
+    if err != nil {
+        log.Fatalf("[hydrogen] executable could not be found: %v", err.Error())
+    }
+
+    oscClient := osc.NewClient("localhost", oscHydrogenPort)
+
+    hydrogenStartupChan = make(chan bool, 1)
+
+    for ii := 0; ii < numberOfTestRuns; ii++ {
+
+        go killHydrogen(oscClient)
+
+        err = startHydrogen()
+
+        if err != nil {
+            log.Fatalf("Hydrogen exited with non-zero code: %v",
+                err.Error())
+        }
+        log.Printf("Instance [%v] terminated without error\n", ii)
+    }
+}
+
+// Start up Hydrogen using the JACK driver and with a configuration that both
+// enables OSC and uses a specific port unlikely used by another Hydrogen
+// instance (in case another one is already running).
+func startHydrogen() error {
+    hydrogenStartupChan <- true
+
+    cmd := exec.Command("hydrogen", "--driver", "jack", "--nosplash")
+    output, err := cmd.Output()
+    if err != nil {
+        return fmt.Errorf("[startHydrogen] Exited with error [%v]:\n%v\n\n",
+            err, string(output))
+    }
+
+    return nil
+}
+
+func killHydrogen(client *osc.Client) {
+    for {
+        select {
+        case <-hydrogenStartupChan:
+            // Give Hydrogen some time to start up properly
+            time.Sleep(hydrogenStartupTime * time.Millisecond)
+
+            // Hydrogen is ready. Let's shut it down.
+            msg := osc.NewMessage("/Hydrogen/QUIT")
+            err := client.Send(msg)
+            if err != nil {
+                log.Fatalf("[killHydrogen] Unable to send OSC message: %v",
+                    err.Error())
+            }
+            return
+
+        default:
+            time.Sleep(100 * time.Millisecond)
+            continue
+        }
+    }
+}

From ad4e536e49f8bdcddf7eff95bb17cf365986d9cc Mon Sep 17 00:00:00 2001
From: theGreatWhiteShark <princess.trudildis@posteo.de>
Date: Tue, 26 Dec 2023 10:18:06 +0100
Subject: [PATCH 2/4] tests: fix integration test

jackTearDown integration test can now handle crashes of Hydrogen and shows - thanks to our crash reporter - the stack trace
---
 tests/jackTearDown/main.go | 14 +++++++++++++-
 1 file changed, 13 insertions(+), 1 deletion(-)

diff --git a/tests/jackTearDown/main.go b/tests/jackTearDown/main.go
index 58664eb94..014273ab1 100755
--- a/tests/jackTearDown/main.go
+++ b/tests/jackTearDown/main.go
@@ -1,6 +1,7 @@
 package main
 
 import (
+    "context"
     "fmt"
     "log"
     "os/exec"
@@ -16,6 +17,10 @@ const oscHydrogenPort = 9000
 // hydrogenStartupTime gives an upper limit for the time Hydrogen requires to
 // start up in milliseconds.
 const hydrogenStartupTime = 3000
+// hydrogenTearDownTime gives an upper limit for the time required for
+// killHydrogen() to send a quit OSC signal, for Hydrogen to receive it and
+// finish its tear down.
+const hydrogenTearDownTime = 5000
 
 // hydrogenStartupChan is used by startHydrogen() to indicate that Hydrogen was
 // started.
@@ -53,9 +58,15 @@ func main() {
 // enables OSC and uses a specific port unlikely used by another Hydrogen
 // instance (in case another one is already running).
 func startHydrogen() error {
+    // Wait a couple of second till the program is killed. This is required
+    // since a crash of Hydrogen (what we want expect in the test) would result
+    // in a zombie process.
+    ctx, _ := context.WithTimeout(context.Background(),
+        (hydrogenTearDownTime + hydrogenStartupTime) * time.Millisecond)
+    cmd := exec.CommandContext(ctx, "hydrogen", "--driver", "jack", "--nosplash")
+
     hydrogenStartupChan <- true
 
-    cmd := exec.Command("hydrogen", "--driver", "jack", "--nosplash")
     output, err := cmd.Output()
     if err != nil {
         return fmt.Errorf("[startHydrogen] Exited with error [%v]:\n%v\n\n",
@@ -79,6 +90,7 @@ func killHydrogen(client *osc.Client) {
                 log.Fatalf("[killHydrogen] Unable to send OSC message: %v",
                     err.Error())
             }
+
             return
 
         default:

From 0dedd80c3ee13a8f0b2d766faa5625b606a54c0b Mon Sep 17 00:00:00 2001
From: theGreatWhiteShark <princess.trudildis@posteo.de>
Date: Thu, 4 Jan 2024 13:18:25 +0100
Subject: [PATCH 3/4] tests/jackTearDown: increase startup time

to prevent false positives occurring in case the OSC QUIT message gets send before Hydrogen has properly started up
---
 tests/jackTearDown/main.go | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/tests/jackTearDown/main.go b/tests/jackTearDown/main.go
index 014273ab1..59214f684 100755
--- a/tests/jackTearDown/main.go
+++ b/tests/jackTearDown/main.go
@@ -16,7 +16,7 @@ const oscHydrogenPort = 9000
 
 // hydrogenStartupTime gives an upper limit for the time Hydrogen requires to
 // start up in milliseconds.
-const hydrogenStartupTime = 3000
+const hydrogenStartupTime = 3700
 // hydrogenTearDownTime gives an upper limit for the time required for
 // killHydrogen() to send a quit OSC signal, for Hydrogen to receive it and
 // finish its tear down.

From e0d94808a732ef9e92efebedec08e09689d2029d Mon Sep 17 00:00:00 2001
From: theGreatWhiteShark <princess.trudildis@posteo.de>
Date: Thu, 4 Jan 2024 13:31:02 +0100
Subject: [PATCH 4/4] AudioEngine: no process while not ready

probably due to some upstream JACK bugs (not sure) Hydrogen does occassionally segfault when stopping the `JackAudioDriver`. Turns out JACK has a number of issues with thread joining. During teardown of the driver we must ensure it does not do any communication, like locking the `AudioEngine` or enqueuing a message in our `Logger`. Otherwise the thread calling `jack_client_close` might segfault.

Now, the callback of the `AudioEngine` checks its state twice. Once without locking (in order to `return` when it is not ready yet/anymore) and another time while locked to properly check the state. It is a little dirty. But I do not see what else we can do from within the Hydrogen code base
---
 src/core/AudioEngine/AudioEngine.cpp | 8 ++++++++
 1 file changed, 8 insertions(+)

diff --git a/src/core/AudioEngine/AudioEngine.cpp b/src/core/AudioEngine/AudioEngine.cpp
index 15aec467a..28de1e352 100644
--- a/src/core/AudioEngine/AudioEngine.cpp
+++ b/src/core/AudioEngine/AudioEngine.cpp
@@ -1313,6 +1313,13 @@ void AudioEngine::clearNoteQueues()
 int AudioEngine::audioEngine_process( uint32_t nframes, void* /*arg*/ )
 {
 	AudioEngine* pAudioEngine = Hydrogen::get_instance()->getAudioEngine();
+	// For the JACK driver it is very important (#1867) to not do anything while
+	// the JACK client is stopped/closed. Otherwise it will segfault on mutex
+	// locking or message logging.
+	if ( ! ( pAudioEngine->getState() == AudioEngine::State::Ready ||
+			 pAudioEngine->getState() == AudioEngine::State::Playing ) ) {
+		return 0;
+	}
 	timeval startTimeval = currentTime2();
 
 	pAudioEngine->clearAudioBuffers( nframes );
@@ -1349,6 +1356,7 @@ int AudioEngine::audioEngine_process( uint32_t nframes, void* /*arg*/ )
 		return 0;
 	}
 
+	// Now that the engine is locked we properly check its state.
 	if ( ! ( pAudioEngine->getState() == AudioEngine::State::Ready ||
 			 pAudioEngine->getState() == AudioEngine::State::Playing ) ) {
 		pAudioEngine->unlock();
