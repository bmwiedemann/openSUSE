diff -up chromium-114.0.5735.35/media/gpu/vaapi/vaapi_video_encode_accelerator.cc.me chromium-114.0.5735.35/media/gpu/vaapi/vaapi_video_encode_accelerator.cc
--- chromium-114.0.5735.35/media/gpu/vaapi/vaapi_video_encode_accelerator.cc.me	2023-05-21 10:05:00.357860329 +0200
+++ chromium-114.0.5735.35/media/gpu/vaapi/vaapi_video_encode_accelerator.cc	2023-05-21 10:18:09.665432735 +0200
@@ -41,7 +41,6 @@
 #include "media/gpu/gpu_video_encode_accelerator_helpers.h"
 #include "media/gpu/h264_dpb.h"
 #include "media/gpu/macros.h"
-#include "media/gpu/vaapi/av1_vaapi_video_encoder_delegate.h"
 #include "media/gpu/vaapi/h264_vaapi_video_encoder_delegate.h"
 #include "media/gpu/vaapi/va_surface.h"
 #include "media/gpu/vaapi/vaapi_common.h"
@@ -200,7 +199,7 @@ bool VaapiVideoEncodeAccelerator::Initia
 
   const VideoCodec codec = VideoCodecProfileToVideoCodec(config.output_profile);
   if (codec != VideoCodec::kH264 && codec != VideoCodec::kVP8 &&
-      codec != VideoCodec::kVP9 && codec != VideoCodec::kAV1) {
+      codec != VideoCodec::kVP9) {
     MEDIA_LOG(ERROR, media_log.get())
         << "Unsupported profile: " << GetProfileName(config.output_profile);
     return false;
@@ -293,7 +292,6 @@ void VaapiVideoEncodeAccelerator::Initia
         break;
       case VideoCodec::kVP8:
       case VideoCodec::kVP9:
-      case VideoCodec::kAV1:
         mode = VaapiWrapper::kEncodeConstantQuantizationParameter;
         break;
       default:
@@ -356,12 +354,6 @@ void VaapiVideoEncodeAccelerator::Initia
             vaapi_wrapper_, error_cb);
       }
       break;
-    case VideoCodec::kAV1:
-      if (!IsConfiguredForTesting()) {
-        encoder_ = std::make_unique<AV1VaapiVideoEncoderDelegate>(
-            vaapi_wrapper_, error_cb);
-      }
-      break;
     default:
       NOTREACHED() << "Unsupported codec type " << GetCodecName(output_codec_);
       return;
@@ -835,10 +827,6 @@ VaapiVideoEncodeAccelerator::CreateEncod
     case VideoCodec::kVP9:
       picture = new VaapiVP9Picture(std::move(reconstructed_surface));
       break;
-    case VideoCodec::kAV1:
-      picture = new VaapiAV1Picture(/*display_va_surface=*/nullptr,
-                                    std::move(reconstructed_surface));
-      break;
     default:
       return nullptr;
   }
diff -up chromium-114.0.5735.35/media/gpu/vaapi/BUILD.gn.revert-av1enc chromium-114.0.5735.35/media/gpu/vaapi/BUILD.gn
--- chromium-114.0.5735.35/media/gpu/vaapi/BUILD.gn.revert-av1enc	2023-05-18 00:37:57.000000000 +0200
+++ chromium-114.0.5735.35/media/gpu/vaapi/BUILD.gn	2023-05-20 13:14:10.756183626 +0200
@@ -38,8 +38,6 @@ source_set("vaapi") {
   sources = [
     "av1_vaapi_video_decoder_delegate.cc",
     "av1_vaapi_video_decoder_delegate.h",
-    "av1_vaapi_video_encoder_delegate.cc",
-    "av1_vaapi_video_encoder_delegate.h",
     "h264_vaapi_video_decoder_delegate.cc",
     "h264_vaapi_video_decoder_delegate.h",
     "h264_vaapi_video_encoder_delegate.cc",
diff -up chromium-119.0.6045.105/media/gpu/vaapi/vaapi_wrapper.cc.me chromium-119.0.6045.105/media/gpu/vaapi/vaapi_wrapper.cc
--- chromium-119.0.6045.105/media/gpu/vaapi/vaapi_wrapper.cc.me	2023-11-02 15:08:30.921325747 +0100
+++ chromium-119.0.6045.105/media/gpu/vaapi/vaapi_wrapper.cc	2023-11-02 15:09:46.123692602 +0100
@@ -3124,6 +3124,7 @@ bool VaapiWrapper::GetSupportedPackedHea
   return true;
 }
 
+#if 0 //disable AV1 due to old libva on epel9
 bool VaapiWrapper::GetMinAV1SegmentSize(VideoCodecProfile profile,
                                         uint32_t& min_seg_size) {
   CHECK(!enforce_sequence_affinity_ ||
@@ -3141,6 +3142,7 @@ bool VaapiWrapper::GetMinAV1SegmentSize(
 
   return true;
 }
+#endif
 
 bool VaapiWrapper::BlitSurface(const VASurface& va_surface_src,
                                const VASurface& va_surface_dest,
diff -up chromium-119.0.6045.105/media/gpu/vaapi/vaapi_wrapper.h.me chromium-119.0.6045.105/media/gpu/vaapi/vaapi_wrapper.h
--- chromium-119.0.6045.105/media/gpu/vaapi/vaapi_wrapper.h.me	2023-11-02 15:09:58.973928395 +0100
+++ chromium-119.0.6045.105/media/gpu/vaapi/vaapi_wrapper.h	2023-11-02 15:10:45.990791114 +0100
@@ -553,9 +553,11 @@ class MEDIA_GPU_EXPORT VaapiWrapper
       bool& packed_pps,
       bool& packed_slice);
 
+#if 0 //disable AV1 due to old libva on epel9
   // Gets the minimum segment block size supported for AV1 encoding.
   [[nodiscard]] bool GetMinAV1SegmentSize(VideoCodecProfile profile,
                                           uint32_t& min_seg_size);
+#endif
 
   // Blits a VASurface |va_surface_src| into another VASurface
   // |va_surface_dest| applying pixel format conversion, cropping
