Index: chromium-120.0.6099.18/third_party/blink/renderer/core/paint/fragment_data_iterator.h
===================================================================
--- chromium-120.0.6099.18.orig/third_party/blink/renderer/core/paint/fragment_data_iterator.h
+++ chromium-120.0.6099.18/third_party/blink/renderer/core/paint/fragment_data_iterator.h
@@ -21,7 +21,7 @@ class FragmentDataIteratorBase {
 
  public:
   explicit FragmentDataIteratorBase(Head& head) : fragment_head_(head) {}
-  explicit FragmentDataIteratorBase(nullptr_t) {}
+  explicit FragmentDataIteratorBase(std::nullptr_t) {}
 
   Data* GetFragmentData() const {
     return !IsDone() ? &fragment_head_.at(idx_) : nullptr;

Index: chromium-120.0.6099.35/base/allocator/partition_allocator/src/partition_alloc/partition_alloc_base/strings/safe_sprintf.h
===================================================================
--- chromium-120.0.6099.35.orig/base/allocator/partition_allocator/src/partition_alloc/partition_alloc_base/strings/safe_sprintf.h
+++ chromium-120.0.6099.35/base/allocator/partition_allocator/src/partition_alloc/partition_alloc_base/strings/safe_sprintf.h
@@ -184,7 +184,7 @@ struct Arg {
   //
   // Warning: don't just do Arg(NULL) here because in some libcs, NULL is an
   // alias for nullptr!
-  Arg(nullptr_t p) : type(INT) {
+  Arg(std::nullptr_t p) : type(INT) {
     integer.i = 0;
     // Internally, SafeSprintf expects to represent nulls as integers whose
     // width is equal to sizeof(NULL), which is not necessarily equal to
