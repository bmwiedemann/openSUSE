<revisionlist>
  <revision rev="1" vrev="1">
    <srcmd5>0812cfbce12d66adb5865805c9976e4d</srcmd5>
    <version>1.8.0</version>
    <time>1510150187</time>
    <user>dimstar_suse</user>
    <comment>- Update to 1.8.0:
  * New Image generation functions: Gradient, Checked, Noise, Cellular...
  * New Mesh generation functions: Cube, Sphere, Cylinder, Torus, Knot...
  * New Shaders and Materials systems to support PBR materials
  * Custom Android APK build pipeline with simple Makefile
  * Complete review of rlgl layer functionality
  * Complete review of raymath functionality
- Remove root-meson.build and src-meson.build: contained in new
  release
- Update package summaries and RPM category.
- BuildRequires:  libglfw-devel &gt;= 3.2
  because glfwSetWindowMonitor etc only come in 3.2
- Add option to meson file to build with gnu99 because:
  * CLOCK_MONOTONIC macro
  * var init in for loops (c99)
- Remove raylig-use-optflags.patch: Using meson for build
- Use meson to build raylib:
  * Takes care of creating proper so versioning
  * Install works (where their makefiles didnt)
- Add root-meson.build
- Add src-meson.build
  Meson files will be in next release, see:
  https://github.com/raysan5/raylib/pull/297
- Move Requires openal-soft-devel to devel package
- Add Requires: openal-soft-devel
  It will be needed when one uses raylib
- Add OpenAL to BuildRequires
- Add raylig-use-optflags.patch: allow passing of optflags
  See: https://github.com/raysan5/raylib/pull/295
- Inital package of raylib version 1.7.0
</comment>
    <requestid>535929</requestid>
  </revision>
  <revision rev="2" vrev="2">
    <srcmd5>5fe1f2da15b73d2480935783c7c7f32b</srcmd5>
    <version>1.8.0</version>
    <time>1510506138</time>
    <user>dimstar_suse</user>
    <comment>Automatic submission by obs-autosubmit</comment>
    <requestid>540482</requestid>
  </revision>
  <revision rev="3" vrev="1">
    <srcmd5>d77bf553e88ddc46a50f0315a3c491e3</srcmd5>
    <version>2.0.0~rc1</version>
    <time>1527582668</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>610473</requestid>
  </revision>
  <revision rev="4" vrev="1">
    <srcmd5>144024ff41494028459e85ceadb4d7bb</srcmd5>
    <version>2.0.0</version>
    <time>1532774532</time>
    <user>dimstar_suse</user>
    <comment>- Update to 2.0.0:
  * Full redesign of audio module to use the mini_al audio library
  * Refactor all #define SUPPORT_* into a single config.h
  * Reviewed raymath.h for better consistency and performance (inlining)
  * New font rendering
  * STB support
  * New functions for CPU image data manipulation
- Remove raylib-2.0.0-api-version.patch: upstreamed
- Remove BuildRequires libglfw-devel:
  Using intern libraries now. They want raylib to be like this.
- Adding BR for libXcursor-devel, libXinerama-devel, libXrandr-devel
  and cmake explicitly now.</comment>
    <requestid>625046</requestid>
  </revision>
  <revision rev="5" vrev="1">
    <srcmd5>ce8837f5b327aea0ba17d67ea4c462b2</srcmd5>
    <version>2.5.0</version>
    <time>1560970947</time>
    <user>dimstar_suse</user>
    <comment>- Update to 2.5.0:
  * New window management and filesystem functions to query monitor
    information, deal with clipboard, check directory files info and
    even launch a URL with default system web browser. Experimental
    High-DPI monitor support has also been added through a compile flag.
  * Redesigned Gamepad mechanism, now generic for all platforms and
    gamepads, no more specific gamepad configurations.
  * Redesigned UWP input system, now raylib supports UWP seamlessly,
    previous implementation required a custom input system implemented
    in user code.
  * rlgl module has been redesigned to support a unique buffer for
    shapes drawing batching, including LINES, TRIANGLES, QUADS in the
    same indexed buffer, also added support for multi-buffering if required.
    Additionally, rlPushMatrix()/rlPopMatrix() functionality has been
    reviewed to behave exactly like OpenGL 1.1, models_rlgl_solar_system
    example has been added to illustrate this behaviour.
  * VR simulator has been reviewed to allow custom configuration of
    Head-Mounted-Device parameters and distortion shader, core_vr_simulator
    has been properly adapted to showcase this new functionality, now
    the VR simulator is a generic configurable stereo rendering system
    that allows any VR device simulation with just a few lines of code
    or even dynamic tweaking of HMD parameters.
  * Support for Unicode text drawing; now raylib processes UTF8
    strings on drawing, supporting Unicode codepoints, allowing rendering
    mostly any existent language (as long as the font with the glyphs is provided).
  * Brand new text management API, with the addition of multiple functions
    to deal with string data
  * Multiple new shapes and textures drawing functions 
  * Experimental cubemap support, to automatically load multiple
    cubemap layouts (LoadTextureCubemap()). (forwarded request 706634 from jubalh)</comment>
    <requestid>706635</requestid>
  </revision>
  <revision rev="6" vrev="1">
    <srcmd5>aa6572cfa9dd8c4c12983b39021d29bf</srcmd5>
    <version>3.0.0</version>
    <time>1588324239</time>
    <user>dimstar_suse</user>
    <comment>- Switch to noexamples tarball as requested in:
  https://github.com/raysan5/raylib/issues/1180
  So we don't ship examples with various licenses that we don't
  install anyways.
- Add raylib-3.0.0-noexamples.patch: dont try to install examples
  Raysan seems to have forgotten that.

- Added missing development header files.

- Update to 3.0.0:
  * All global variables from the multiple raylib modules have
    been moved to a global context state, it has several benefits, first, better
    code readability with more comprehensive variables naming and categorization
    (organized by types, i.e. CORE.Window.display.width,
    CORE.Input.Keyboard.currentKeyState or RLGL.State.modelview). Second, it allows
    better memory management to load global context state dynamically when required
    (not at the moment), making it easy to implement a hot-reloading mechanism if
    desired.
  * All memory allocations on raylib and its dependencies now use
    RL_MALLOC, RL_FREE and similar macros. Now users can easely hook their own
    memory allocations mechanism if desired, having more control over memory
    allocated internally by the library. Additionally, it makes it easier to port
    the library to embedded devices where memory control is critical. For more info
    check raylib issue #1074.
  * All I/O file accesses from raylib are being moved
    to memory data access, now all I/O file access is centralized into just four
    functions: LoadFileData(), SaveFileData(), LoadFileText(), SaveFileText().
    Users can just update those functions to any I/O file system. This change makes
    it easier to integrate raylib with Virtual File Systems or custom I/O file
    implementations.</comment>
    <requestid>799028</requestid>
  </revision>
  <revision rev="7" vrev="1">
    <srcmd5>39337fd78e8603df0f5cb21e772998a2</srcmd5>
    <version>3.5.0</version>
    <time>1609783818</time>
    <user>dimstar_suse</user>
    <comment>- Update to 3.5.0:
  * Platform supported: Raspberry Pi 4 native mode (no X11 windows)
    through DRM subsystem and GBM API. Actually this is a really
    interesting improvement because it opens the door to raylib to
	support other embedded platforms (Odroid, GameShell, NanoPi...).
    Also worth mentioning the un-official homebrew ports of raylib
    for PS4 and PSVita.
  * NEW configuration options exposed: For custom raylib builds,
    config.h now exposes more than 150 flags and defines to build
    raylib with only the desired features, for example, it allows to
    build a minimal raylib library in just some KB removing all
    external data filetypes supported, very useful to generate small
    executables or embedded devices.
  * NEW automatic GIF recording feature: Actually, automatic GIF
    recording (CTRL+F12) for any raylib application has been available
    for some versions but this feature was really slow and low-performant
    using an old gif library with many file-accesses. It has been replaced
    by a high-performant alternative (msf_gif.h) that operates directly
    on memory... and actually works very well! Try it out!
  * NEW RenderBatch system: rlgl module has been redesigned to support
    custom render batches to allow grouping draw calls as desired, previous
    implementation just had one default render batch. This feature has not
    been exposed to raylib API yet but it can be used by advance users dealing
    with rlgl directly. For example, multiple RenderBatch can be created
    for 2D sprites and 3D geometry independently.
  * NEW Framebuffer system: rlgl module now exposes an API for custom Framebuffer
    attachments (including cubemaps!). raylib RenderTexture is a basic
    use-case, just allowing color and depth textures, but this new API allows
    the creation of more advance Framebuffers with multiple attachments,
    like the G-Buffers. GenTexture*() functions have been redesigned to use this new API.</comment>
    <requestid>860228</requestid>
  </revision>
  <revision rev="8" vrev="1">
    <srcmd5>b6cac048e1d5761ecc20bd4f8e584a4c</srcmd5>
    <version>3.7.0</version>
    <time>1621439383</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>894330</requestid>
  </revision>
  <revision rev="9" vrev="1">
    <srcmd5>c71e6080a504726acdd82641e7ca57d5</srcmd5>
    <version>4.0.0</version>
    <time>1646150605</time>
    <user>dimstar_suse</user>
    <comment>- Update to 4.0.0:
  * Naming consistency and coherency: API has been completely
    reviewed to be consistent on naming conventions
  * Event Automation System: This new experimental feature has been
    added for future usage, it allows to record input events and
    re-play them automatically.
  * Custom game-loop control: As requested by some advance users,
    the game-loop control can be exposed
  * For details see: https://github.com/raysan5/raylib/blob/4.0.0/CHANGELOG</comment>
    <requestid>958098</requestid>
  </revision>
  <revision rev="10" vrev="1">
    <srcmd5>d32067a69e370e6903d9ab0e6748f21c</srcmd5>
    <version>4.2.0</version>
    <time>1667499301</time>
    <user>dimstar_suse</user>
    <comment>- Switch -DUSE_EXTERNAL_GLFW to OFF:
  Earlier we build required on our glfw package.
  But with raylib 4.2.0 they started to use features are only
  in the development version.
  They were unhappy that glfw 3.4.0 takes a long time to be
  relased and decided to create a in-tree copy.
  So for raylib 4.2.0 to build we need to use this in-tree version.

- Update to 4.2.0:
  * extra libraries cleanup:
  * examples review
  * rres resource format
  * raygui official gui library
  * new file system API
  * New audio stream processors API
  * For details see https://github.com/raysan5/raylib/releases/tag/4.2.0</comment>
    <requestid>1033063</requestid>
  </revision>
  <revision rev="11" vrev="1">
    <srcmd5>bdfc9df64a628e77ae4fcf4b09f7a205</srcmd5>
    <version>4.5.0</version>
    <time>1684239415</time>
    <user>dimstar_suse</user>
    <comment>- Update to 4.5.0:
  * NEW Improved ANGLE support on Desktop platforms: Support for OpenGL ES 2.0 on Desktop platforms (Windows,
    Linux, macOS) has been reviewed by @wtnbgo GitHub user. Now raylib can be compiled on desktop for OpenGL
    ES 2.0 and linked against ANGLE. This small addition open the door to building raylib for all ANGLE
    supported backends: Direct3D 11, Vulkan and Metal. Please note that this new feature is still experimental
    and requires further testing!
  * NEW Camera module: A brand new implementation from scratch for rcamera module, contributed by @Crydsch
    GitHub user! New camera system is simpler, more flexible, more granular and more extendable. Specific camera
    math transformations (movement/rotation) have been moved to individual functions, exposing them to users if
    required. Global state has been removed from the module and standalone usage has been greatly improved; now
    rcamera.h single-file header-only library can be used externally, independently of raylib. A new
    UpdateCameraPro() function has been added to address input-dependency of UpdateCamera(), now advance users
    have full control over camera inputs and movement/rotation speeds!
  * NEW Support for M3D models and M3D/GLTF animations: 3d models animations support has been a limited aspect of
    raylib for long time, some versions ago IQM animations were supported but raylib 4.5 also adds support for
    the brand new M3D file format, including animations and the long expected support for GLTF animations! The
    new M3D file format is simple, portable, feature complete, extensible and open source. It also provides a
    complete set of tools to export/visualize M3D models from/to Blender! Now raylib supports up to 3 model
    file-formats with animations: IQM, GLTF and M3D.
  * NEW Support QOA audio format (import/export): Just a couple of months ago the new QOA file format was
    published, a very simple, portable and open source quite-ok-audio file format. raylib already supports it,
    added to raudio module and including audio loading from file, loading from memory, streaming from file,
    streaming from memory and exporting to QOA audio format. Because simplicity really matters to raylib!
  * NEW Module for compressed textures loading: rl_gputex, a portable single-file header-only small library to
    load compressed texture file-formats (DDS, PKM, KTX, PVR, ASTC). Provided functionality is not new to raylib
    but it was part of the raylib rtextures module, now it has been moved into a separate self-contained library,
    improving portability. Note that this module is only intended to load compressed data from files, ready to be
    uploaded to GPU, no compression/decompression functionality is provided. This change is a first step towards
    a better modularization of raylib library.
  * Reviewed rlgl module for automatic limits checking: Again, rlgl has been reviewed to simplify usage. Now</comment>
    <requestid>1087397</requestid>
  </revision>
  <revision rev="12" vrev="1">
    <srcmd5>0f6f70812eee62a9b09b29a82fd03694</srcmd5>
    <version>5.0</version>
    <time>1700421358</time>
    <user>anag+factory</user>
    <comment>- Update to 5.0:
  * rcore module platform-spli
  * New platform backend supported: SDL
  * New platform backend supported: Nintendo Switch 
  * New splines drawing and evaluation API
  * Pseudo-random numbers generator: rprand
  * Automation Events System API
  * For details check project changelog</comment>
    <requestid>1127465</requestid>
  </revision>
  <revision rev="13" vrev="1">
    <srcmd5>8941f11afcd89d3b990aeb40b56a561d</srcmd5>
    <version>5.5</version>
    <time>1732741938</time>
    <user>anag+factory</user>
    <comment>- Update to 5.5:
  * NEW raylib pre-configured Windows package: The new raylib portable and
    self-contained Windows package for raylib 5.5, intended for nobel devs that
    start in programming world, comes with one big addition: support for C code
    building for Web platform with one-single-mouse-click! For the last 10
    years, the pre-configured raylib Windows package allowed to edit simple C
    projects on Notepad++ and easely compile Windows executables with an
    automatic script; this new release adds the possibility to compile the same
    C projects for Web platform with a simple mouse click. This new addition
    greatly simplifies C to WebAssembly project building for new users. The
    raylib Windows Installer package can be downloaded for free from raylib on
    itch.io.
  * NEW raylib project creator tool: A brand new tool developed to help raylib
    users to setup new projects in a professional way. raylib project creator
    generates a complete project structure with multiple build systems
    ready-to-use and GitHub CI/CD actions pre-configured. It only requires
    providing some C files and basic project parameters! The tools is free and
    open-source, and it can be used online!.
  * NEW Platform backend supported: RGFW: Thanks to the rcore platform-split
    implemented in raylib 5.0, adding new platforms backends has been greatly
    simplified, new backends can be added using provided template,
    self-contained in a single C module, completely portable. A new platform
    backend has been added: RGFW. RGFW is a new single-file header-only
    portable library (RGFW.h) intended for platform-functionality management
    (windowing and inputs); in this case for desktop platforms (Windows, Linux,
    macOS) but also for Web platform. It adds a new alternative to the already
    existing GLFW and SDL platform backends.
  * NEW Platform backend version supported: SDL3: Previous raylib 5.0 added
    support for SDL2 library, and raylib 5.5 not only improves SDL2
    functionality, with several issues reviewed, but also adds support for the</comment>
    <requestid>1226807</requestid>
  </revision>
</revisionlist>
