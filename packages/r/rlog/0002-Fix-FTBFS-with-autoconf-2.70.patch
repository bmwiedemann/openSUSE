From: Boyuan Yang <byang@debian.org>
Date: Fri, 17 Sep 2021 01:49:12 -0400
Subject: Fix FTBFS with autoconf 2.70

Fix multiple grammar warnings. The fundamental error lies in
test with-valgrind.

Bug-Debian: https://bugs.debian.org/978897
---
 configure.ac | 76 +++++++++++++++++++++++++++++++-----------------------------
 1 file changed, 39 insertions(+), 37 deletions(-)

diff --git a/configure.ac b/configure.ac
index 3cdb527..dfac072 100644
--- a/configure.ac
+++ b/configure.ac
@@ -2,8 +2,8 @@ dnl Process this file with autoconf to produce a configure script.
 
 AC_INIT
 AC_CONFIG_SRCDIR([rlog/rlog.h]) dnl a source file from your sub dir
-AC_CONFIG_AUX_DIR(config)
-AC_CONFIG_MACRO_DIR(config)
+AC_CONFIG_AUX_DIR([config])
+AC_CONFIG_MACRO_DIR([config])
 
 dnl This ksh/zsh feature conflicts with `cd blah ; pwd`
 unset CDPATH
@@ -13,8 +13,6 @@ AC_CANONICAL_TARGET
 dnl Perform program name transformation
 AC_ARG_PROGRAM
 
-AC_LANG(C++)
-
 # Must be updated for public releases..
 # CURRENT : REVISON : AGE
 #
@@ -25,8 +23,8 @@ AC_LANG(C++)
 #
 LIBRLOG_VERSION=5:0:0
 
-AC_SUBST(LIBRLOG_VERSION)
-AC_SUBST(PACKAGE_VERSION)
+AC_SUBST([LIBRLOG_VERSION])
+AC_SUBST([PACKAGE_VERSION])
 
 AM_INIT_AUTOMAKE(rlog, 1.4) dnl searches for some needed programs
 
@@ -35,10 +33,10 @@ unset CDPATH
 dnl make /usr/local the default for the installation
 AC_PREFIX_DEFAULT(/usr/local)
 
-if test "x$prefix" = "xNONE"; then
-  prefix=$ac_default_prefix
-  ac_configure_args="$ac_configure_args --prefix $prefix"
-fi
+AS_IF([test "x$prefix" = "xNONE"],
+ [prefix=$ac_default_prefix;
+  ac_configure_args="$ac_configure_args --prefix $prefix"],
+ [])
 
 dnl without this order in this file, automake will be confused!
 dnl
@@ -68,10 +66,10 @@ AC_ARG_ENABLE(printffp,
 	    [disables printf attribute on function pointers]),
     with_printffp=$enableval,with_printffp="test")
 
-if test "x$with_printffp" = "xtest"; then
-
+AS_IF([test "x$with_printffp" = "xtest"],
+ [
     # check if we can use printf attribute on a function..
-    AC_MSG_CHECKING(if __printf__ attribute can apply to function pointers)
+    AC_MSG_CHECKING([if __printf__ attribute can apply to function pointers])
     AC_COMPILE_IFELSE( [[
 	    void testfunc(const char *format, ...)
 	    { }
@@ -86,26 +84,23 @@ if test "x$with_printffp" = "xtest"; then
 		return 0;
 	    }
 	 ]],
-	with_printffp="yes",
-	with_printffp="no")
-
-    AC_MSG_RESULT($with_printffp)
-fi
+	[with_printffp="yes"],
+	[with_printffp="no"])
+    AC_MSG_RESULT([$with_printffp])
+ ], [])
 
-if test "x$with_printffp" = "xyes"; then
-    HAVE_PRINTF_FP_PROTOTYPE="1"
-else
-    HAVE_PRINTF_FP_PROTOTYPE="0"
-fi
-AC_SUBST(HAVE_PRINTF_FP_PROTOTYPE)
+AS_IF([test "x$with_printffp" = "xyes"],
+ [HAVE_PRINTF_FP_PROTOTYPE="1"],
+ [HAVE_PRINTF_FP_PROTOTYPE="0"])
+AC_SUBST([HAVE_PRINTF_FP_PROTOTYPE])
 
-AC_ARG_ENABLE(vararg,
+AC_ARG_ENABLE([vararg],
     AS_HELP_STRING([--disable-vararg],
-	    [don't use vararg macros even if the compiler supports them]),
-    enable_vararg=$enableval)
+	    [do not use vararg macros even if the compiler supports them]),
+    [enable_vararg=$enableval], [])
 if test "x$enable_vararg" != "xno"; then
     # check if the compiler understands __VA_ARGS__ 
-AC_MSG_CHECKING(if compiler has C99 variadac macro)
+AC_MSG_CHECKING([if compiler has C99 variadac macro])
 AC_COMPILE_IFELSE( [[
 #include <stdio.h>
 
@@ -122,7 +117,7 @@ int main()
 
 
 # check if the compiler understands pre-c99 variadac macros
-AC_MSG_CHECKING(if compiler has pre-C99 variadac macro)
+AC_MSG_CHECKING([if compiler has pre-C99 variadac macro])
 AC_COMPILE_IFELSE( [[
 #include <stdio.h>
 
@@ -162,18 +157,25 @@ AC_ARG_ENABLE(valgrind,
 		   [disables valgrind support code.]),
     with_valgrind=$enableval, with_valgrind="yes" )
 USE_VALGRIND="0"
-if test "x$with_valgrind" = "xyes"; then
-    AC_CHECK_HEADER([valgrind/valgrind.h],
-	AC_CHECK_DECLS([VALGRIND_PRINTF_BACKTRACE],
-	    USE_VALGRIND="1",,[#include <valgrind/valgrind.h>]))
-fi
-AC_SUBST(USE_VALGRIND)
+AS_IF([test "x$with_valgrind" = "xyes"],
+    [AC_CHECK_HEADER(
+      [valgrind/valgrind.h],
+	  [AC_CHECK_DECLS(
+        [VALGRIND_PRINTF_BACKTRACE],
+	    [USE_VALGRIND="1"],
+        [],
+        [[#include <valgrind/valgrind.h>]]
+        )
+      ])
+    ],
+    [])
+AC_SUBST([USE_VALGRIND])
 
 
 # allow documentation build to be disabled manually
-AC_ARG_ENABLE(docs,
+AC_ARG_ENABLE([docs],
     AS_HELP_STRING([--disable-docs],[disable documentation build]),
-    build_docs=$enableval, build_docs="yes")
+    [build_docs=$enableval], [build_docs="yes"])
 
 # check for tools necessary to build documentation
 AC_PATH_PROG(DOXYGEN, doxygen, [no])
