-------------------------------------------------------------------
Wed Sep  6 06:44:11 UTC 2023 - Andrea Manzini <andrea.manzini@suse.com>

- update to 8.5.3
  * Fixed a race condition in GenericRateLimiter that could cause it to stop granting requests

- update to 8.5.2
  * Fix a bug where iterator may return incorrect result for DeleteRange() users if there was an error reading from a file.

- update to 8.5.1
  * Fix a bug where if there is an error reading from offset 0 of a file from L1+ and that the file is not the first file in the sorted run, data can be lost in compaction and read/scan can return incorrect results.

- update to 8.5.0
  * Public API Changes:
      Removed recently added APIs GeneralCache and MakeSharedGeneralCache() as our plan changed to stop exposing a general-purpose cache interface. The old forms of these APIs, Cache and NewLRUCache(), are still available, although general-purpose caching support will be dropped eventually.
  * Behavior Changes
      Option periodic_compaction_seconds no longer supports FIFO compaction: setting it has no effect on FIFO compactions. FIFO compaction users should only set option ttl instead.
      Move prefetching responsibility to page cache for compaction read for non directIO use case
  * Performance Improvements
      In case of direct_io, if buffer passed by callee is already aligned, RandomAccessFileRead::Read will avoid realloacting a new buffer, reducing memcpy and use already passed aligned buffer.
      Small efficiency improvement to HyperClockCache by reducing chance of compiler-generated heap allocations
  * Bug Fixes
      Fix use_after_free bug in async_io MultiReads when underlying FS enabled kFSBuffer. kFSBuffer is when underlying FS pass their own buffer instead of using RocksDB scratch in FSReadRequest. Right now it's an experimental feature.
      Fix a bug in FileTTLBooster that can cause users with a large number of levels (more than 65) to see errors like "runtime error: shift exponent .. is too large.."

- see more on HISTORY.md (https://github.com/facebook/rocksdb/blob/main/HISTORY.md)


-------------------------------------------------------------------
Thu Jul 27 13:10:54 UTC 2023 - Andrea Manzini <andrea.manzini@suse.com>

- update to 8.3.2
  * Bug Fixes:
      Reduced cases of illegally using Env::Default() during static destruction by never destroying the internal PosixEnv itself
- update to 8.3.1
  * Performance Improvements:
      Fixed higher read QPS during DB::Open() reading files created prior to #11406, 
- update to 8.3.0
  * New Features:
      Introduced a new option block_protection_bytes_per_key, which can be used to enable per key-value integrity protection for in-memory blocks in block cache 
      Improve the operational safety of publishing a DB or SST files to many hosts by using different block cache hash seeds on different hosts.
      Introduced a new option CompactionOptionsFIFO::file_temperature_age_thresholds that allows FIFO compaction to compact files to different temperatures based on key age 
      Added a new ticker stat to count how many times RocksDB detected a corruption while verifying a block checksum: BLOCK_CHECKSUM_MISMATCH_COUNT.
      New statistics rocksdb.file.read.db.open.micros that measures read time of block-based SST tables or blob files during db open.
      New statistics tickers for various iterator seek behaviors and relevant filtering, as *_LEVEL_SEEK_*. (#11460)
  * Public API Changes:
      EXPERIMENTAL: Add new API DB::ClipColumnFamily to clip the key in CF to a certain range. It will physically deletes all keys outside the range including tombstones.
      Add MakeSharedCache() construction functions to various cache Options objects, and deprecated the NewWhateverCache() functions with long parameter lists.
      Changed the meaning of various Bloom filter stats (prefix vs. whole key), with iterator-related filtering only being tracked in the new *_LEVEL_SEEK_*. stats. (#11460)
  * Behavior changes:
      For x86, CPU features are no longer detected at runtime nor in build scripts, but in source code using common preprocessor defines. 
      This will likely unlock some small performance improvements on some newer hardware, but could hurt performance of the kCRC32c checksum, 
      which is no longer the default, on some "portable" builds. See PR #11419 for details.
  * Bug Fixes:
      Delete an empty WAL file on DB open if the log number is less than the min log number to keep
      Delete temp OPTIONS file on DB open if there is a failure to write it out or rename it
  * Performance Improvements:
      Improved the I/O efficiency of prefetching SST metadata by recording more information in the DB manifest. 

-------------------------------------------------------------------
Fri Apr 21 12:55:27 UTC 2023 - Andreas Stieger <Andreas.Stieger@gmx.de>

- RocksDB 8.1.1
  * Compaction output file cutting logic now considers range
    tombstone start keys. For example, SST partitioner now may
    receive ParitionRequest for range tombstone start keys.
  * If the async_io ReadOption is specified for MultiGet or
    NewIterator on a platform that doesn't support IO uring, the
    option is ignored and synchronous IO is used.
  * Add support for SecondaryCache with HyperClockCache
  * New statistics and performance counters
  * bug fixes
  * API changes: Changed various functions and features in Cache
    that are mostly relevant to custom implementations or wrappers
- build with shared gflags libs

-------------------------------------------------------------------
Sat Apr 15 13:57:16 UTC 2023 - Andreas Stieger <andreas.stieger@gmx.de>

- add hardware constraints for reliable builds

-------------------------------------------------------------------
Sat Mar 25 07:37:14 UTC 2023 - Andreas Stieger <andreas.stieger@gmx.de>

- Disable usage of jemalloc for gh#jemalloc/jemalloc#1237 to avoid
  "TLS error: cannot allocate memory in static TLS block"

-------------------------------------------------------------------
Wed Mar 22 21:56:01 UTC 2023 - Andreas Stieger <andreas.stieger@gmx.de>

- RocksDB 8.0.0
- add rocksdb-8.0.0-reproducible.patch - make build reproducible
- add rocksdb-8.0.0-shared-liburing.patch - liburing dynamic linking
- add rocksdb-8.0.0-rpath.patch

-------------------------------------------------------------------
Wed Oct 28 21:56:34 UTC 2020 - Adam Mizerski <adam@mizerski.pl>

- update to 6.13.3
  * see packaged HISTORY.md
- refreshed patch gtest.patch

-------------------------------------------------------------------
Sat Feb  2 13:44:05 UTC 2019 - Adam Mizerski <adam@mizerski.pl>

- new package; version 5.17.2
- added patch gtest.patch
