<?xml version="1.0" encoding="UTF-8"?>

<project name="reload4j" default="package" basedir=".">

  <!-- ====================================================================== -->
  <!-- Build environment properties                                           -->
  <!-- ====================================================================== -->

  <property file="build.properties"/>

  <property name="project.groupId" value="ch.qos.reload4j"/>
  <property name="project.artifactId" value="reload4j"/>
  <property name="project.version" value="1.2.19"/>

  <property name="compiler.source" value="1.6"/>
  <property name="compiler.target" value="${compiler.source}"/>

  <property name="build.finalName" value="${project.artifactId}-${project.version}"/>
  <property name="build.dir" value="target"/>
  <property name="build.outputDir" value="${build.dir}/classes"/>
  <property name="build.srcDir" value="src/main/java"/>
  <property name="build.resourceDir" value="src/main/resources"/>
  <property name="build.testOutputDir" value="${build.dir}/test-classes"/>
  <property name="build.testDir" value="src/test/java"/>
  <property name="build.testResourceDir" value="src/test/resources"/>
  <property name="test.reports" value="${build.dir}/test-reports"/>
  <property name="reporting.outputDirectory" value="${build.dir}/site"/>

  <!-- ====================================================================== -->
  <!-- Defining classpaths                                                    -->
  <!-- ====================================================================== -->

  <path id="build.classpath">
    <fileset dir="lib">
      <include name="**/*"/>
    </fileset>
  </path>
  <path id="build.test.classpath">
    <fileset dir="lib">
      <include name="**/*"/>
    </fileset>
  </path>

  <!-- ====================================================================== -->
  <!-- Cleaning up target                                                     -->
  <!-- ====================================================================== -->

  <target name="clean" description="Clean the output directory">
    <delete dir="${build.dir}"/>
  </target>

  <!-- ====================================================================== -->
  <!-- Compilation target                                                     -->
  <!-- ====================================================================== -->

  <target name="compile" description="Compile the code">
    <mkdir dir="${build.outputDir}"/>
    <javac destdir="${build.outputDir}" 
           encoding="UTF-8" 
           nowarn="false" 
           debug="true" 
           optimize="false" 
           deprecation="true" 
           target="${compiler.target}" 
           verbose="false" 
           fork="false" 
           source="${compiler.source}">
      <src>
        <pathelement location="${build.srcDir}"/>
      </src>
      <classpath refid="build.classpath"/>
    </javac>
    <copy todir="${build.outputDir}">
      <fileset dir="${build.resourceDir}"/>
    </copy>
  </target>

  <!-- ====================================================================== -->
  <!-- Test-compilation target                                                -->
  <!-- ====================================================================== -->

  <target name="compile-tests" 
          depends="compile" 
          description="Compile the test code" 
          unless="test.skip">
    <mkdir dir="${build.testOutputDir}"/>
    <javac destdir="${build.testOutputDir}" 
           encoding="UTF-8" 
           nowarn="false" 
           debug="true" 
           optimize="false" 
           deprecation="true" 
           target="${compiler.target}" 
           verbose="false" 
           fork="false" 
           source="${compiler.source}">
      <src>
        <pathelement location="${build.testDir}"/>
      </src>
      <classpath>
        <path refid="build.test.classpath"/>
        <pathelement location="${build.outputDir}"/>
      </classpath>
    </javac>
    <copy todir="${build.testOutputDir}">
      <fileset dir="${build.testResourceDir}"/>
    </copy>
  </target>

  <!-- ====================================================================== -->
  <!-- Run all tests                                                          -->
  <!-- ====================================================================== -->

  <target name="test" 
          depends="compile-tests, junit-missing" 
          unless="junit.skipped" 
          description="Run the test cases">
    <mkdir dir="${test.reports}"/>
    <junit printSummary="yes" haltonerror="true" haltonfailure="true" fork="true" dir=".">
      <sysproperty key="basedir" value="."/>
      <formatter type="xml"/>
      <formatter type="plain" usefile="false"/>
      <classpath>
        <path refid="build.test.classpath"/>
        <pathelement location="${build.outputDir}"/>
        <pathelement location="${build.testOutputDir}"/>
      </classpath>
      <batchtest todir="${test.reports}" unless="test">
        <fileset dir="${build.testDir}">
          <include name="**/Test*.java"/>
          <include name="**/*Test.java"/>
          <include name="**/*TestCase.java"/>
          <exclude name="**/*Abstract*Test.java"/>
          <exclude name="**/*Test*Constants.java"/>
        </fileset>
      </batchtest>
      <batchtest todir="${test.reports}" if="test">
        <fileset dir="${build.testDir}">
          <include name="**/${test}.java"/>
          <exclude name="**/*Abstract*Test.java"/>
          <exclude name="**/*Test*Constants.java"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="test-junit-present">
    <available classname="junit.framework.Test" property="junit.present" classpathref="build.test.classpath"/>
  </target>

  <target name="test-junit-status" 
          depends="test-junit-present">
    <condition property="junit.missing">
      <and>
        <isfalse value="${junit.present}"/>
        <isfalse value="${test.skip}"/>
      </and>
    </condition>
    <condition property="junit.skipped">
      <or>
        <isfalse value="${junit.present}"/>
        <istrue value="${test.skip}"/>
      </or>
    </condition>
  </target>

  <target name="junit-missing" 
          depends="test-junit-status" 
          if="junit.missing">
    <echo>=================================== WARNING ===================================</echo>
    <echo> JUnit is not present in the test classpath or your $ANT_HOME/lib directory. Tests not executed.</echo>
    <echo>===============================================================================</echo>
  </target>

  <!-- ====================================================================== -->
  <!-- Javadoc target                                                         -->
  <!-- ====================================================================== -->

  <target name="javadoc" description="Generates the Javadoc of the application">
    <javadoc sourcepath="${build.srcDir}" 
             packagenames="*" 
             destdir="${reporting.outputDirectory}/apidocs" 
             access="protected" 
             verbose="false" 
             encoding="UTF-8" 
             version="true" 
             use="true" 
             author="true" 
             splitindex="false" 
             nodeprecated="false" 
             nodeprecatedlist="false" 
             notree="false" 
             noindex="false" 
             nohelp="false" 
             nonavbar="false" 
             serialwarn="false" 
             charset="UTF-8" 
             linksource="false" 
             breakiterator="false" 
             source="${compiler.source}">
      <classpath refid="build.classpath"/>
      <header>&lt;![CDATA[&lt;a href=&quot;https://reload4j.qos.ch&quot;&gt;
          &lt;img src=&quot;https://reload4j.qos.ch/images/logos/reload4j.jpg&quot; height=&quot;40&quot;/&gt;&lt;/a&gt;]]&gt;</header>
    </javadoc>
  </target>

  <!-- ====================================================================== -->
  <!-- Package target                                                         -->
  <!-- ====================================================================== -->

  <target name="package" depends="compile,test" description="Package the application">
    <jar jarfile="${build.dir}/${build.finalName}.jar" 
         compress="true" 
         index="false" 
         basedir="${build.outputDir}" 
         excludes="**/package.html">
      <manifest>
        <attribute name="Bundle-Description" value="Reload4j revives EOLed log4j 1.x"/>
        <attribute name="Bundle-DocURL" value="https://reload4j.qos.ch/"/>
        <attribute name="Bundle-License" value="http://www.apache.org/licenses/LICENSE-2.0.txt"/>
        <attribute name="Bundle-ManifestVersion" value="2"/>
        <attribute name="Bundle-Name" value="${project.artifactId}"/>
        <attribute name="Bundle-SymbolicName" value="org.apache.log4j"/>
        <attribute name="Bundle-Vendor" value="QOS.CH Sarl (Switzerland)"/>
        <attribute name="Bundle-Version" value="${project.version}"/>
        <attribute name="Export-Package" value="org.apache.log4j.config;version=&quot;${project.version}&quot;;uses:=&quot;org.apache.log4j&quot;,org.apache.log4j.helpers;version=&quot;${project.version}&quot;;uses:=&quot;org.apache.log4j,org.apache.log4j.spi&quot;,org.apache.log4j.jdbc;version=&quot;${project.version}&quot;;uses:=&quot;org.apache.log4j,org.apache.log4j.spi&quot;,org.apache.log4j.net;version=&quot;${project.version}&quot;;uses:=&quot;javax.jms,javax.mail,javax.naming,org.apache.log4j,org.apache.log4j.helpers,org.apache.log4j.spi,org.apache.log4j.xml,org.w3c.dom&quot;,org.apache.log4j.or.jms;version=&quot;${project.version}&quot;;uses:=&quot;org.apache.log4j.or&quot;,org.apache.log4j.or.sax;version=&quot;${project.version}&quot;;uses:=&quot;org.apache.log4j.or&quot;,org.apache.log4j.or;version=&quot;${project.version}&quot;;uses:=&quot;org.apache.log4j.spi&quot;,org.apache.log4j.pattern;version=&quot;${project.version}&quot;;uses:=&quot;org.apache.log4j,org.apache.log4j.helpers,org.apache.log4j.spi&quot;,org.apache.log4j.rewrite;version=&quot;${project.version}&quot;;uses:=&quot;org.apache.log4j,org.apache.log4j.spi,org.apache.log4j.xml,org.w3c.dom&quot;,org.apache.log4j.spi;version=&quot;${project.version}&quot;;uses:=&quot;org.apache.log4j,org.apache.log4j.or&quot;,org.apache.log4j.varia;version=&quot;${project.version}&quot;;uses:=&quot;org.apache.log4j,org.apache.log4j.spi&quot;,org.apache.log4j.xml;version=&quot;${project.version}&quot;;uses:=&quot;javax.xml.parsers,org.apache.log4j,org.apache.log4j.config,org.apache.log4j.spi,org.w3c.dom,org.xml.sax&quot;,org.apache.log4j;version=&quot;${project.version}&quot;;uses:=&quot;org.apache.log4j.helpers,org.apache.log4j.or,org.apache.log4j.spi&quot;"/>
        <attribute name="Implementation-Title" value="${project.artifactId}"/>
        <attribute name="Implementation-Vendor" value="QOS.CH Sarl (Switzerland)"/>
        <attribute name="Implementation-Version" value="${project.version}"/>
        <attribute name="Import-Package" value="javax.jmdns;resolution:=optional,javax.jms;resolution:=optional,javax.mail.internet;version=&quot;[1.4,2)&quot;;resolution:=optional,javax.mail;version=&quot;[1.4,2)&quot;;resolution:=optional,javax.naming,javax.xml.parsers,org.w3c.dom,org.xml.sax,org.xml.sax.helpers"/>
        <attribute name="Require-Capability" value="osgi.ee;filter:=&quot;(&amp;(osgi.ee=JavaSE)(version=1.6))&quot;"/>
        <attribute name="X-Compile-Source-JDK" value="${compiler.source}"/>
        <attribute name="X-Compile-Target-JDK" value="${compiler.target}"/>
      </manifest>
    </jar>
  </target>

</project>
