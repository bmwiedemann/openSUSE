From d2b7b8a40275c24b271b7d806774fa813a883241 Mon Sep 17 00:00:00 2001
From: Michael Klishin <klishinm@vmware.com>
Date: Fri, 4 Feb 2022 18:59:19 +0300
Subject: [PATCH 2/2] Elixir 1.13 OptionParser no longer supports :atom values

so coerce e.g. node names in our own code.
---
 .../lib/rabbitmq/cli/core/command_modules.ex     |  4 ++--
 .../lib/rabbitmq/cli/core/helpers.ex             | 12 +++++++++++-
 .../rabbitmq_cli/lib/rabbitmq/cli/core/parser.ex | 16 +++++++++-------
 .../rabbitmq/cli/ctl/commands/decode_command.ex  |  7 ++++---
 .../rabbitmq/cli/ctl/commands/encode_command.ex  |  7 ++++---
 5 files changed, 30 insertions(+), 16 deletions(-)

diff --git a/deps/rabbitmq_cli/lib/rabbitmq/cli/core/command_modules.ex b/deps/rabbitmq_cli/lib/rabbitmq/cli/core/command_modules.ex
index 006119cc7a..7343a139cc 100644
--- a/deps/rabbitmq_cli/lib/rabbitmq/cli/core/command_modules.ex
+++ b/deps/rabbitmq_cli/lib/rabbitmq/cli/core/command_modules.ex
@@ -5,7 +5,7 @@
 ## Copyright (c) 2007-2021 VMware, Inc. or its affiliates.  All rights reserved.
 
 defmodule RabbitMQ.CLI.Core.CommandModules do
-  alias RabbitMQ.CLI.Core.Config
+  alias RabbitMQ.CLI.Core.{Config, DataCoercion}
   alias RabbitMQ.CLI.Plugins.Helpers, as: PluginsHelpers
   alias RabbitMQ.CLI.CommandBehaviour
 
@@ -37,7 +37,7 @@ defmodule RabbitMQ.CLI.Core.CommandModules do
 
   def script_scope(opts) do
     scopes = Application.get_env(:rabbitmqctl, :scopes, [])
-    scopes[Config.get_option(:script_name, opts)] || :none
+    scopes[DataCoercion.to_atom(Config.get_option(:script_name, opts))] || :none
   end
 
   def load_commands_core(scope) do
diff --git a/deps/rabbitmq_cli/lib/rabbitmq/cli/core/helpers.ex b/deps/rabbitmq_cli/lib/rabbitmq/cli/core/helpers.ex
index d9834f6cc5..4719af08d0 100644
--- a/deps/rabbitmq_cli/lib/rabbitmq/cli/core/helpers.ex
+++ b/deps/rabbitmq_cli/lib/rabbitmq/cli/core/helpers.ex
@@ -5,7 +5,7 @@
 ## Copyright (c) 2007-2021 VMware, Inc. or its affiliates.  All rights reserved.
 
 defmodule RabbitMQ.CLI.Core.Helpers do
-  alias RabbitMQ.CLI.Core.{Config, NodeName}
+  alias RabbitMQ.CLI.Core.{Config, DataCoercion, NodeName}
   require Record
 
   def get_rabbit_hostname(node_name_type \\ :shortnames) do
@@ -115,6 +115,16 @@ defmodule RabbitMQ.CLI.Core.Helpers do
     )
   end
 
+  def atomize_values(map, keys) do
+    Enum.reduce(map, %{},
+                fn({k, v}, acc) ->
+                  case Enum.member?(keys, k) do
+                    false -> Map.put(acc, k, v)
+                    true  -> Map.put(acc, k, DataCoercion.to_atom(v))
+                  end
+                end)
+  end
+
   def apply_if_exported(mod, fun, args, default) do
     Code.ensure_loaded(mod)
     case function_exported?(mod, fun, length(args)) do
diff --git a/deps/rabbitmq_cli/lib/rabbitmq/cli/core/parser.ex b/deps/rabbitmq_cli/lib/rabbitmq/cli/core/parser.ex
index bd1aa45815..d8e2c8e4b7 100644
--- a/deps/rabbitmq_cli/lib/rabbitmq/cli/core/parser.ex
+++ b/deps/rabbitmq_cli/lib/rabbitmq/cli/core/parser.ex
@@ -6,11 +6,11 @@
 
 defmodule RabbitMQ.CLI.Core.Parser do
   alias RabbitMQ.CLI.{CommandBehaviour, FormatterBehaviour}
-  alias RabbitMQ.CLI.Core.{CommandModules, Config}
+  alias RabbitMQ.CLI.Core.{CommandModules, Config, Helpers}
 
   def default_switches() do
     [
-      node: :atom,
+      node: :string,
       quiet: :boolean,
       silent: :boolean,
       dry_run: :boolean,
@@ -22,18 +22,20 @@ defmodule RabbitMQ.CLI.Core.Parser do
       formatter: :string,
       printer: :string,
       file: :string,
-      script_name: :atom,
+      script_name: :string,
       rabbitmq_home: :string,
       mnesia_dir: :string,
       plugins_dir: :string,
       enabled_plugins_file: :string,
       aliases_file: :string,
-      erlang_cookie: :atom,
+      erlang_cookie: :string,
       help: :boolean,
       print_stacktrace: :boolean
     ]
   end
 
+  @atomized_options [:node, :script_name, :erlang_cookie]
+
   def default_aliases() do
     [
       p: :vhost,
@@ -68,13 +70,13 @@ defmodule RabbitMQ.CLI.Core.Parser do
         {[_alias_command_name | cmd_arguments], cmd_options, cmd_invalid} =
           parse_alias(input, command_name, alias_module, alias_content, options)
 
-        {alias_module, command_name, cmd_arguments, cmd_options, cmd_invalid}
+        {alias_module, command_name, cmd_arguments, Helpers.atomize_values(cmd_options, @atomized_options), cmd_invalid}
 
       command_module when is_atom(command_module) ->
         {[^command_name | cmd_arguments], cmd_options, cmd_invalid} =
           parse_command_specific(input, command_module, options)
 
-        {command_module, command_name, cmd_arguments, cmd_options, cmd_invalid}
+        {command_module, command_name, cmd_arguments, Helpers.atomize_values(cmd_options, @atomized_options), cmd_invalid}
     end
   end
 
@@ -208,7 +210,7 @@ defmodule RabbitMQ.CLI.Core.Parser do
       )
 
     norm_options = normalize_options(options, switches) |> Map.new()
-    {args, norm_options, invalid}
+    {args, Helpers.atomize_values(norm_options, @atomized_options), invalid}
   end
 
   defp build_switches(default, command, formatter) do
diff --git a/deps/rabbitmq_cli/lib/rabbitmq/cli/ctl/commands/decode_command.ex b/deps/rabbitmq_cli/lib/rabbitmq/cli/ctl/commands/decode_command.ex
index 7c8da87d26..001d978c81 100644
--- a/deps/rabbitmq_cli/lib/rabbitmq/cli/ctl/commands/decode_command.ex
+++ b/deps/rabbitmq_cli/lib/rabbitmq/cli/ctl/commands/decode_command.ex
@@ -14,11 +14,12 @@ defmodule RabbitMQ.CLI.Ctl.Commands.DecodeCommand do
 
   def switches() do
     [
-      cipher: :atom,
-      hash: :atom,
+      cipher: :string,
+      hash: :string,
       iterations: :integer
     ]
   end
+  @atomized_keys [:cipher, :hash]
 
   def distribution(_), do: :none
 
@@ -28,7 +29,7 @@ defmodule RabbitMQ.CLI.Ctl.Commands.DecodeCommand do
          hash: :rabbit_pbe.default_hash(),
          iterations: :rabbit_pbe.default_iterations()
        }, opts)
-    {args, with_defaults}
+    {args, Helpers.atomize_values(with_defaults, @atomized_keys)}
   end
 
   def validate(args, _) when length(args) < 2 do
diff --git a/deps/rabbitmq_cli/lib/rabbitmq/cli/ctl/commands/encode_command.ex b/deps/rabbitmq_cli/lib/rabbitmq/cli/ctl/commands/encode_command.ex
index d18f948fce..ae65beae5b 100644
--- a/deps/rabbitmq_cli/lib/rabbitmq/cli/ctl/commands/encode_command.ex
+++ b/deps/rabbitmq_cli/lib/rabbitmq/cli/ctl/commands/encode_command.ex
@@ -12,11 +12,12 @@ defmodule RabbitMQ.CLI.Ctl.Commands.EncodeCommand do
 
   def switches() do
     [
-      cipher: :atom,
-      hash: :atom,
+      cipher: :string,
+      hash: :string,
       iterations: :integer
     ]
   end
+  @atomized_keys [:cipher, :hash]
 
   def distribution(_), do: :none
 
@@ -26,7 +27,7 @@ defmodule RabbitMQ.CLI.Ctl.Commands.EncodeCommand do
          hash: :rabbit_pbe.default_hash(),
          iterations: :rabbit_pbe.default_iterations()
        }, opts)
-    {args, with_defaults}
+    {args, Helpers.atomize_values(with_defaults, @atomized_keys)}
   end
 
   def validate(args, _) when length(args) < 2 do
