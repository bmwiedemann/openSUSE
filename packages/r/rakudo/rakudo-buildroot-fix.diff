commit 55b3ed5626f4b81fe65f69a6d5f23aec6783337a
Author: Stefan Seifert <nine@detonation.org>
Date:   Sun Dec 1 14:51:10 2019 +0100

    Fix relocatability of bundled native libraries
    
    Native libraries (and other resource files) bundled with installed modules are
    supposed to be relocatable, i.e. their path is always relative to the current
    path of the repository. This is especially important for packaging as the
    module will get installed into a temporary build directory using the Staging
    repository. The generated files will be moved to their final location when
    installed.
    
    Serializing the current path of the library as part of the NativeCall site
    would prohibit this relocatability, so block serialization for bundled
    resources during precompilation instead.

diff --git a/lib/NativeCall.pm6 b/lib/NativeCall.pm6
index 2cfffeb54..34c8e07e8 100644
--- a/lib/NativeCall.pm6
+++ b/lib/NativeCall.pm6
@@ -283,6 +283,8 @@ our role Native[Routine $r, $libname where Str|Callable|List|IO::Path|Distributi
             }
             my Mu $arg_info := param_list_for($r.signature, $r);
             my $conv = self.?native_call_convention || '';
+            my $serialize_lib_name = $libname !~~ Distribution::Resource;
+            nqp::bindattr_i($!call, native_callsite, 'serialize_lib_name', 0) unless $serialize_lib_name;
             my $jitted = nqp::buildnativecall(self,
                 nqp::unbox_s($guessed_libname),                           # library name
                 nqp::unbox_s(gen_native_symbol($r, $!name, :$!cpp-name-mangler)), # symbol to call
@@ -295,7 +297,7 @@ our role Native[Routine $r, $libname where Str|Callable|List|IO::Path|Distributi
             $!any-optionals = self!any-optionals;
 
             my $body := $jitted ?? $!jit-optimized-body !! $!optimized-body;
-            if $body {
+            if $body and ($serialize_lib_name or not $*W or not $*W.is_precompilation_mode) {
                 nqp::bindattr(
                     self,
                     Code,
