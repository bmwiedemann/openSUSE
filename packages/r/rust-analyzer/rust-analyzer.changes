-------------------------------------------------------------------
Sat Sep 03 13:58:30 UTC 2022 - Soc Virnyl Estela <socvirnyl.estela@gmail.com>

- Update to version 2022.08.29:
  * Move empty diagnostics workaround back into the server
  * minor: Simplify
  * Update test fixtures
  * Remove u/i128 hashing overloads from NoHashHasher::Hasher impl
  * Make use of NoHash hashing for FileId and CrateId
  * Remove unused UpdatesChannel type
  * style: run tidy tests
  * extract const generic in ArrayType
  * add test
  * Re-export standard semantic token types and mods
  * Resolve doc links on impl blocks
  * Register decorator token type to avoid panic
  * Add a short blurb about VS Code Live Share to the manual
  * Allow leading `|` in more pattern positions
  * ForGoT tO RuN prEttIeRÂ¿
  * Avoid error popup when using in Live Share
  * fix: Fix reference autocompletions using incorrect offsets in macro inputs
  * Use lsp-types DECORATOR token type
  * Remove unused default semantic modifiers
  * Regen docs
  * Add config for macro bang token highlighting, disable by default
  * Change attribute semantic token type to decorator
  * Make doc comment highlight injection configurable
  * Move highlight configuration from protocol into the feature
  * Make operator highlighting configurable, disable it by default
  * Make punctuation highlighting configurable, disable it by default
  * Do not substitute `Self` when in same impl block
  * feat: emit SCIP via rust-analyzer
  * Pop an error notification when flycheck can't be restarted
  * Remove auto-config patching from the VSCode client
  * Replace crossbeam with std's scoped threads
  * internal: remove unnecessary stream writer try_clone in lsp-server
  * Expect the test to panic by catching the unwind
  * fix: formatting
  * remove push_diagnostic methods weren't used in the end
  * make impl and trait inactive diagnostics work
  * fix: Fix panics on GATs involving const generics
  * make diagnostic function public
  * try adding diagnostrics for AssocItems
  * activate assoc item test

-------------------------------------------------------------------
Sun Aug 28 05:17:09 UTC 2022 - Soc Virnyl Estela <socvirnyl.estela@gmail.com>

- Update to version 2022.08.22:
  * Consider bounds on inherent impl in method resolution
  * Switch to ubuntu-20.04 runners
  * Bump notify
  * Bump chalk
  * Bump deps
  * explain how to re-generate the package.json
  * document interaction of checkOnSave.overrideCommand and multiple linked projects
  * Log rustfmt parsing errors as warnings
  * Implement lsp extension for cancelling running flychecks
  * fix: use functional programming
  * feat: Improved inline_call to replace `Self`
  * Introduce and use get_fn_target_info
  * Generate and use TargetInfo::new
  * Cleanup inline
  * inline assoc_fn_target
  * Remove mut out params via assoc_fn_target_info
  * Reorder args with flip_comma
  * Replace tuple with TargetInfo struct
  * extract fn_target_info
  * use fn_name instead of name_ref.text()
  * Rename static_method_target -> assoc_fn_target
  * fix: resolve path `Self` alone in value namespace
  * fix: resolve associated types of bare dyn types
  * feat: Run test mod from anywhere in parent file
  * fix: a bunch of typos
  * fixup! feat: add inline_type_alias_uses assist
  * fix: escape keywords used as names in earlier editions
  * minor: Change tracing event level in apply_change
  * Find IntoFuture::IntoFuture's poll method
  * feat: Generate static method using Self::assoc() syntax
  * chore: remove unused `currentExtensionIsNightly()` in config.ts
  * Revert #12947, trigger workspace switches on all structure changes again
  * Add `.enable` suffix
  * fixup! feat: add inline_type_alias_uses assist
  * Add a setting for keyword hover popups
  * feat: add inline_type_alias_uses assist
  * fix: format literal lookup
  * Fix lowering of empty macro expressions in trailing position
  * Make resolve_name_in_module a bit more lazy
  * Simplify
  * Add an HIR pretty-printer
  * Suggest `.await` when type impls IntoFuture
  * Implement IntoFuture type inference

-------------------------------------------------------------------
Fri Aug 19 23:32:14 UTC 2022 - Soc Virnyl Estela <socvirnyl.estela@gmail.com>

- Update to version 2022.08.15:
  * Remove redundant --pre-release flag from publish
  * Pad empty diagnostic messages in relatedInformation as well
  * Move VSCode diagnostics workaroudn into client code
  * Simplify `GlobalState::handle_event`
  * Do not unconditionally succeed RUSTC_WRAPPER checks when run by build scripts
  * Take into account renamed extension id when launching
  * Upgrade npm lockfile
  * Use Node 16 in CI workflows
  * Fix panic in no_such_field when using tuple fields on record structs
  * Add test for runnables with raw identifiers
  * Make `ModPath` display escaped path
  * Make tests pass
  * Remove `EscapedName`
  * Add `UnescapedName` and make `Name` hold escaped name
  * fix: infer byte string pattern as `&[u8]` when matched against slices
  * Fixes tests
  * Improve insert whitespace in mbe
  * Re-try build script building with --keep-going
  * Remove incomplete 1.64 ABI
  * Recover from missing ellipsis in record literals for path expressions
  * Add some more `cov_mark`s
  * Fix pattern field completions not working for unions
  * Use `--keep-going` cargo flag when building build scripts
  * remove imports that are also in edition 2021's prelude
  * Corrected order of printing op and `=`
  * Parse range patterns in let statement with type annotation
  * [code] make toggleInlayHints understand {off,on}UntilPressed
  * Parse range patterns in struct and slice without trailing comma
  * Import serde derives on converting json to struct
  * Document CLI flag stability
  * minor: align with rustc on escaping characters in macro expansion
  * fix: make `concat!` work with char
  * Fixed up for loops, added fixme with problem
  * Shortened fixup for match, added cases for for
  * Tidy formatted
  * Added fixup for for loops w/ missing parts
  * Added fixup for match statements w/ missing parts
  * Generate rust type from json
  * add debug impl for AnyDiagnostic

-------------------------------------------------------------------
Sun Aug 14 06:15:25 UTC 2022 - Soc Virnyl Estela <socvirnyl.estela@gmail.com>

- Update to version 2022.08.08:
  * Fix test_rainbow_highlighting gate
  * Returns the old value for la_arena::ArenaMap::insert
  * Impl more methods and traits for la_arena::ArenaMap
  * run stable fmt through rustup
  * fix: Fix incorrect token pick rankings
  * Simplify
  * Fix visibilities
  * feat: Handle operators like their trait functions in the IDE
  * Don't switch workspace on vfs file changes from libraries
  * Update bug_report.md
  * Update bug_report.md
  * Don't flycheck while the workspace is being loaded
  * tidy formatting
  * Trigger flycheck on all transitive dependencies as well
  * on hover fallback error, adds ast::type as possible node
  * Add a setting to disable comment continuation in VSCode
  * Use an empty expander for ignored non-attribute proc-macros
  * Impl entry-API for la_arena::ArenaMap
  * Add more constructors for la-arena
  * Use the release branch in xtask promote
  * Support PathPat paths in generate_enum_variant
  * Be more strict about supported Paths in generate_enum_variant
  * Support record fields in generate_enum_variant
  * Support tuple fields in generate_enum_variant
  * convert generate_enum_variant to use add_variant
  * Support adding variants via structural editing
  * Don't run on PRs
  * Upload arm-unknown-linux-gnueabihf build artifact
  * Fix linker env var name
  * Fix target check
  * Set linker
  * Publish extension for 32-bit ARM systems
  * Fix r-a spelling in some places
  * fix: remove whitespaces from doctest names
  * Add syntax fixup for `loop`
  * Add syntax fixup for while loops
  * Don't filter flychecks by package member status
  * Only clear diagnostics of workspaces who have been flychecked
  * feat: Only flycheck workspace that belongs to saved file

-------------------------------------------------------------------
Fri Aug 05 06:35:38 UTC 2022 - Soc Virnyl Estela <socvirnyl.estela@gmail.com>

- Update to version 2022.08.01:
  * Give variables more descriptive names
  * Properly cfg the `max` field of Limit
  * Update xtask promote and release instructions
  * fix: Fix ast-id up when merging raw attributes
  * fix: complete path of existing record expr
  * Be more explicit when filtering built-in completions
  * Only run rainbow highlighting test on 64-bit Unix
  * fix: Order ItemScope::entries results
  * fix: Don't complete marker traits in expression position
  * publish: Use cargo ws rename to rename crates
  * fix: Do completions in path qualifier position
  * fix: Fix pattern completions adding unnecessary braces
  * fix: Calculate completions after type anchors
  * Use large stack on expander thread
  * internal: Assume condition/iterable is missing if there is only a BlockExpr
  * Find original ast node before compute ref match in fn render
  * fix: Honor ref expressions for compute_ref_match completions
  * fix: Fix Semantics::original_ast_node not caching the resulting file
  * Remove FIXME comment for unreachable fallback.
  * fix: Fix server panicking on project loading when proc-macros are disabled
  * Find standalone proc-macro-srv on windows too
  * Allow name querying for derive helpers
  * Record derive helper attributes, resolve them in IDE layer
  * feat: Downmap tokens inside derive helpers
  * fix: Insert spaces when inlining a function defined in a macro.
  * Allow specifying sysroot OR sysroot_src
  * Fix mix up in comments
  * Gate and rename binary, use it if it's in the sysroot
  * Remember the difference between 'sysroot root' and 'sysroot src root', start looking in there for a rust-analyzer-proc-macro-srv binary
  * Name the binary 'proc-macro-srv'
  * Return result directly
  * Add doc comment to pass tidy check
  * Add a proc-macro-srv-cli crate
  * revert nightly rustfmt formatting that accidentally slipped in
  * Replace `debug_assert!` with `stdx::always!`
  * Make macros test order-resistant
  * Sort when iterating through CrateGraph
  * Sort in DefMap::dump, since HashMap iteration order isn't defined
  * hir-def tests: sort results before comparing, since FxHashSet iteration order isn't guaranteed
  * Fix .gitattributes for test_data
  * Small fixups
  * Move cfg attrs up to the mod definitions to disable sourcegen
  * Disable all source-gen tests at compile time
  * Don't run slow tests in Rust CI, only RA CI
  * Better error messages when the proc-macro-server fails to start
  * Spawn a proc-macro-srv instance per workspace

-------------------------------------------------------------------
Thu Jul 28 02:55:24 UTC 2022 - Soc Virnyl Estela <socvirnyl.estela@gmail.com>

- Update to version 2022.07.25:
  * fix: Autocomplete for struct fields includes receiver
  * fix: consider assignee expressions in record fields exhaustiveness check
  * Add info whether it's assignee expr to relevant HIR `Expr` variants
  * Add `ellipsis` to HIR `RecordLit`
  * internal: extract common code for adjusting diagnostic range
  * feat: don't highlight the whole fn on return-type mismatch
  * fix: Don't add braces to 'if' completion in match guard position
  * fix generate_new doc
  * fix: Fix error tooltip message for VSCode status bar item
  * internal: Don't parse files unnecessarily in scope_for_offset
  * Revert 03a62c180e6a7300d0d7b8c4d680b749c101bcbb
  * Use ItemTree for modules in attrs_query
  * fix: Improve syntax highlighting in attributes
  * Add comment about replacing crossbeam with std scoped threads when they land
  * Use std::panic::resume_unwind
  * Move interner methods to Symbol, return SmolStr directly since it's ref-counted
  * Fix raw ident handling (a little)
  * Add test for idents incl. raw idents
  * Stringify literals create client-side properly
  * Add test for literals created client-side
  * Run proc macro expansion in a separate thread (for the thread-local interner)
  * Use a thread-local for the symbol interner (1/2)
  * Move version string to RustcInfo, read '.rustc' section only once
  * Pass tidy checks
  * Assert that sysroot ABI version matches exactly
  * fix: Fix `trait_impls_in_deps_query` being called directly instead of as a query
  * Use ItemTree for crate root attr_query collection
  * internal: Use itemtree for variant and field attribute collection
  * Simplify
  * Simplify
  * Remove AstIdMap from Expander as it is seldom needed
  * implement literal_from_str (poorly)
  * Add literal/ident conversion, tests pass
  * stub missing APIs
  * Fix imports, delete removed interfaces
  * Move token_stream to separate module
  * Add sysroot-abi feature, copy 1.64 ABI fo rnow
  * Add PROC_MACRO_TEST_TOOLCHAIN environment variable
  * Update crates/proc-macro-test/build.rs
  * Update crates/proc-macro-test/build.rs
  * Add proc-macro-srv integration test that clones literals
  * Don't copy the Cargo.lock
  * proc-macro-test build script: wipe before, be more verbose
  * Build proc-macro-test-impl out-of-tree
  * Remove in-rust-tree feature
  * Remove check_merge_commits test altogether
  * Allow merge commits when 'in-rust-tree' feature is enabled
  * Rename proc macro server from 'Rustc' to 'RustAnalyzer'
  * fix: don't replace default members' body
  * internal: Don't eagerly construct `AstIdMap`s
  * Run cargo fmt
  * Fix last few warnings manually
  * Run cargo fix --edition-idioms
  * Enable extra warnings required by rust-lang/rust
  * fix: Fix search for associated trait items being inconsistent
  * Add comments
  * Fix generated `PartialEq::ne`
  * Inverted the match logic to skip comments, attribute macros, and whitespace before the appropriate keywords.
  * Add CARGO_WORKSPACE_DIR env var in `.cargo/config.toml`
  * Upgrade to expect-test@1.4.0
  * Work around Code bug with empty diagnostics
  * Added case for const
  * Cleaned up trailing whitespace for tidy::files_are_tidy
  * Added coverage for trait, mod, impl, and enum cases.
  * Add test case and token finder to address 12790
  * fix: Prevent panic in Remove Unused Parameter assist
  * Add simple support for completion item details
  * Move `convert_to_def_in_trait` into `ide-db`
  * Improve file watcher config
  * Remove macro ABI version from doc comment
  * Find original as node before compute ref match
  * Remove outdated proc macro ABIs
  * chore: change str_ref_to_string to str_ref_to_owned
  * Support the 1.64 nightly proc macro ABI
  * fix: âGenerate constantâ ignores the path prefix of the identifier
  * Fix extract variable assist for subexpression in mutable borrow
  * fix: un-inline `ConstScalarOrPath::from_expr_opt`
  * fix: address suggestions
  * refactor: inline some variables
  * Check for local IDs belong to same definition
  * feat: support negative const generic parameters
  * tests: add hover tests for const generics
  * Improve syntax fixup a bit, handle incomplete `if`
  * try fixing spurious CI failures on windows
  * fix: Improve self param completion applicability
  * internal: Remove allocation in DefCollector::reseed_with_unresolved_attribute
  * Remove deprecate action
  * Update .github/workflows/release.yaml
  * Remove deprecate action
  * fix: Don't show qualified path completions for private items
  * fix: Fix imports being inserted before doc comments in inline modules
  * fix(completion): `super::` completion at crate root and module depth aware
  * Make search for applicable generics more precise
  * fix: Support generics in extract_function assist
  * add tests
  * fix: Set server binary version when distributing
  * fix: Fix VSCode status bar tooltip not showing the error messages
  * Update 1.63 proc macro ABI to match rustc
  * Implement `ignore`  and `index` metavar expression
  * Fix typos
  * Fix obsolete `completion.snippets` config
  * Fix obsolete `enableRangeFormatting` config
  * Fix `rustcSource` -> `rustc_source`
  * Fix obsolete `diagnostics.experimental.enable`
  * Fix obsolete `loadOutDirsFromCheck` configs
  * Fix config keys regarding imports in docs
  * fix: ignore renames for crate root
  * Fix test
  * Add str_ref_to_string fix
  * fix: Fix unresolved proc macro diagnostics pointing to macro expansions
  * internal: Record all macro definitions in ItemScope
  * Fix typo
  * fix: escape receiver texts in format string completion
  * fix: escape ${receiver} when completing with custom snippets
  * WellFormed -> Holds
  * add test for item same name
  * add test for suggest_name
  * restore sth
  * fix test in resolve_proc_macro:  Foo is Owner
  * rename "trait_def" to "def_in_trait"
  * highlight: trait path
  * fix test in qualify_method:  stay in trait path
  * fix some test due to resolve to where trait m impl
  * functions resolve to impl
  * Fix unstable feature use
  * Add two more tests
  * Various cleanups
  * reformat code
  * goto where trait method impl
  * add doc strings to use_trivial_contructor.rs
  * add use_trivial_contructor.rs
  * apply suggestions
  * replace TODO with FIXME
  * fix CI
  * remove dbg
  * cleanup
  * instanciate_empty_structs

-------------------------------------------------------------------
Fri Jul 15 13:57:57 UTC 2022 - Soc Virnyl Estela <socvirnyl.estela@gmail.com>

- Update to version 2022.07.11:
  * Bump transitive npm deps
  * Bump @vscode/test-electron
  * Bump @types/node to 16
  * Bump typescript and tslib
  * Bump prettier
  * Bump @typescript-eslint
  * Bump vsce
  * Bump eslint
  * Bump esbuild
  * Bump d3 and d3-graphviz
  * Bump vscode-languageclient
  * fix: Improve suggested names for extracted variables
  * fix: Extract Function misses locals used in closures
  * Update remaining GitHub URLs
  * Remove unnecessary unsafe from format_args expansion
  * publish workflow: Fix names for existing crates
  * fix default type param value position
  * Use `SmallVec` to slightly shrink `ModPath` size
  * check arg_idx >= n_params only if arg_idx >= n_required_params
  * Handle generic args per arg index Add more test cases for generic args
  * Code: use different schemes for the custom views
  * Show only assoc type args in the correct arg pos
  * Complete associated type only in trait generic arg Fix tidy check does not work for marks in multiline
  * Fix project root assert
  * Remove useless bors.toml
  * internal: Update inert attribute list
  * Add back restartServerOnConfigChange option
  * Improve documentation for buildScripts.overrideCommand / checkOnSave.overrideCommand
  * fix: Extract function from trait impl

-------------------------------------------------------------------
Fri Jul 08 07:02:53 UTC 2022 - Soc Virnyl Estela <socvirnyl.estela@gmail.com>

- Update to version 2022.07.04:
  * Bump the rest of the deps
  * Bump chalk
  * Bump object
  * Bump tracing-subscriber
  * Bump arbitrary and derive_arbitrary
  * Bump cargo_metadata
  * Bump semver
  * Bump indexmap
  * Bump serde_json
  * Bump serde
  * Bump smallvec
  * Bump pulldown-cmark-to-cmark
  * Bump either
  * Bump quote
  * Bump anyhow
  * Bump crossbeam-channel
  * fix: Extract Function produces duplicate fn names
  * fix: report type mismatch on identifier in destructuring assignments
  * fix: infer lhs first on ordinary assignment expressions
  * fix: typos in hir-ty
  * fix: Trigger flyimport completions in item lists again
  * fix: escape for enum variant
  * fix: variants rendering in pattern path
  * Fix case of ignored/broken proc macro
  * Add tests for #12669
  * Fix blocks not considering stmt without semi as tails
  * fix: Fix attribute macros on assoc items being discarded with disabled proc macros
  * Fix Expr::MacroStmts using wrong scopes
  * Update hir-ty test outputs
  * fix: Simplify macro statement expansion handling
  * fix: Fix flycheck sending cancel progress with no running process
  * Add static assertions for some unreachble paths
  * Correct wording
  * Ignore the `bin` artifact for `bench` targets
  * fix: improve whitespace insertion in pretty printer
  * fix: Report proc macro errors in expressions correctly as well
  * fix: Fix completions for locals not working properly inside macro calls
  * fix: deduplicate cfg completions
  * Udate unit tests
  * complete raw identifier with "r#" prefix
  * Correct target_feature completion
  * Reduce intermediate allocations while printing witnesses
  * Try to publish releases to OpenVSX
  * fix: trailing ':' on empty inactive reasons
  * Display witnesses of non-exhaustive match
  * Implement type inference for assignee expressions
  * Generalize some inference functions for patterns
  * Add `Expr::Underscore`

-------------------------------------------------------------------
Fri Jul 01 02:26:58 UTC 2022 - Soc Virnyl Estela <socvirnyl.estela@gmail.com>

- Update to version 2022.06.27:
  * Fix typo in build.rs
  * Improve comments
  * Improve proc macro errors a bit
  * clarify comment and add autolink test case
  * internal: Simplify
  * fix: completes non exhaustive variant within the defining crate
  * internal: Simplify some completions
  * Fix test
  * Reimplement auto-ref completions for fields
  * Refactor a bit
  * Remove pattern rendering hack
  * Only apply `cfg(test)` for local crates
  * fix: Fix auto-ref completions inserting into wrong locations
  * fix: Don't trigger pattern completions when typing a wildcard pattern
  * internal: Lift out IdentContext from CompletionContext
  * internal: Remove `previous_token` field from `CompletionContext`
  * Remove some usages of `Completions::add_resolution`
  * Even more completion context filtering
  * Lift out PathKind variant fields into structs
  * Split remaining completion calls on the context kinds
  * internal: Handle fractional release numbers in changelog naming
  * Send a DidCancel event when restarting flychecks
  * Polish
  * internal: Bring back JodChild into flychecking for cancellation

-------------------------------------------------------------------
Fri Jun 24 05:08:38 UTC 2022 - Soc Virnyl Estela <socvirnyl.estela@gmail.com>

- Update to version 2022.06.20:
  * fix: attribute macros not being properly diagnosed
  * internal: Handle fractional release numbers in changelog naming
  * Consider walking up macro expansions when searching for surrounding entities in completion analysis
  * Move `CompletionContext::impl_def` into corresponding entities
  * Move `CompletionContext::incomplete_let` into `PathKind::Expr`
  * feat: add fold range for multi line match arm list
  * Move `CompletionContext::function_def` into `PathKind::Expr`

-------------------------------------------------------------------
Tue Jun 14 06:39:35 UTC 2022 - Soc Virnyl Estela <socvirnyl.estela@gmail.com>

- Update to version 2022.06.13:
  * fix: Pass the build data to rustc_private crates
  * More precise proc-macro errors
  * internal: Simplify `hir_ty::utils`
  * internal: Remove `Generics::type_iter` in favor of `Generics::iter`
  * fix: Don't respond to cancelled requests when retrying them
  * fix typo in style.md
  * fix: Fix config patching for callable snippets
  * restrict the assist so that it only appears if the cursor is on the loop keyword
  * change 'loop to 'l, as 'loop is not a valid label name
  * make generated test pass and make tidy happy
  * add more tests and some doc
  * Make add_label_to_loop basically work
  * internal: Bump Dependencies
  * internal: Update dashmap and freeze its version
  * feat: append :: after
  * Hide param inlay hint when argument is fn-like macro with similar name
  * Fix a couple of weak warnings found by rust-analyzer itself
  * Add doc comment
  * Rustfmt
  * Add proc macro ABI for rustc 1.63
  * fix: show non-std enum in a fresh use tree completion
  * Remove the unneeded destructuring assignment in `run` in `project-model/src/build_scripts.rs`
  * Add restartServerOnConfigChange setting
  * Restart server automatically on settings changes
  * fix: avoid adding enum parens in use
  * feat: fix inline variable produce mismatched type
  * fix: #12441 False-positive type-mismatch error with generic future
  * Bring the version command output in line with other rust tools

-------------------------------------------------------------------
Wed Jun 08 15:39:26 UTC 2022 - Soc Virnyl Estela <socvirnyl.estela@gmail.com>

- Update to version 2022.06.06:
  * fix: Fix trait impl completions using wrong insert position
  * internal: Keep output channels across restarts
  * fix: Restart the server instead of reloading the window when config changes
  * fix: Cleanup output channels when restarting server
  * minor: Don't log cancelled diagnostics
  * fix: Fix match to if let assist for wildcard pats
  * Increase worker thread stack and name them
  * Only record build script outputs when the output has been changed
  * Remove some of the unnecessary helpfer functions from CompletionContext
  * Simplify
  * Move trait_impl completion analysis into CompletionContext
  * minor: Reduce move-guard trigger range
  * internal: Don't log default build script outputs
  * Deduplicate
  * Remove prev-sibling completion machinery
  * More precise where keyword completions
  * Remove dead code
  * Fix visibility mods not being completed for field defs
  * internal: Move most remaining keyword completions to item list completions
  * Shorten main thread name
  * feat: Support `$$` in macros.
  * Allow merging of multiple selected imports.
  * fix: parsing of `?` opt-out trait bounds
  * minor: Fix rustfmt failing on main_loop.rs
  * fix(diagnostic): Don't remove diagnostic with empty message
  * Sync handlers cannot be cancelled
  * [editors/vscode] cleaer status bar bg color / command  when server status returns to OK
  * fix: Fix completions disappearing when typing two keys in quick succession
  * minor: Remove unused code
  * fix: Fix VSCode config patching incorrectly patching some configs
  * fix: float display impl
  * fix(extract_module): Remove redundancy causing else, and also add import fix loop for names
  * More precise completion filtering
  * Update commit/PR style
  * Use char for trigger character
  * Add implicit static lifetime hints
  * fix: visibility completion
  * fix: add an option to show inlay hint for return type of closures without block
  * fix(ide-db): correct single-file module rename
  * Cleanup auto-import ordering
  * fix(extract_module): import resolution for items of submodules
  * fix(extract_module): nearby imports deletion causing panic
  * mismatch
  * Remove unecessary unwrap
  * Order auto-imports by relevance

-------------------------------------------------------------------
Wed Jun 01 03:50:05 UTC 2022 - Soc Virnyl Estela <socvirnyl.estela@gmail.com>

- Update to version 2022.05.30:
  * fix overflow during tuple struct type inference
  * minor: Freshen up goto feature docs
  * typo: missing comma
  * Fix typo
  * fix: f32 and f64 representation during lowering
  * internal: Remove `Interned` usage from nameres collector
  * take into account excludeDirs when computing linked_projects
  * add failing test

-------------------------------------------------------------------
Tue May 17 16:29:42 UTC 2022 - Soc Virnyl Estela <socvirnyl.estela@gmail.com>

- Update to version 2022.05.17~0:
  * Bump extension version
  * Update test output
  * Fix incorrect config key in client config update
  * Update lsp-extensions hash
  * Allow inlay hint tooltips to trigger hovers
  * Trigger hover requests on closing brace hints
  * Replace some SmolStr usages with String as the conversion happens anyways
  * feat: Implement inlay hint tooltips
  * internal: Cleanup lifetime elision hints

-------------------------------------------------------------------
Wed May 11 03:47:03 UTC 2022 - Soc Virnyl Estela <socvirnyl.estela@gmail.com>

- Update LICENSE in rpm spec

-------------------------------------------------------------------
Wed May 11 03:27:43 UTC 2022 - Soc Virnyl Estela <socvirnyl.estela@gmail.com>

- Initial spec for rust-analyzer
