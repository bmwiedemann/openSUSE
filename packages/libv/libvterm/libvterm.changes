-------------------------------------------------------------------
Mon May 29 20:34:17 UTC 2023 - Dirk Müller <dmueller@suse.com>

- update to 0.3.2:
  * Update the cursor position when its within skipped range 
    of rows at reflow time
  * Ensure the reflow code doesn't attempt to invoke sb_pushline
    callback if not set 

-------------------------------------------------------------------
Fri Jan 20 16:27:01 UTC 2023 - Dirk Müller <dmueller@suse.com>

- update to 0.3.1:
  * vterm-dump specifically emit NUL/CAN/SUB/DEL
  * Optionally emit NUL/CAN/SUB/DEL from parser than
  * Don't bother to emit the unrecognized sequence in DECRQSS
  * erase_internal should only set fg/bg color, resetting others
  * Added vterm_screen_set_default_colors()
  * Delete mk_wcswidth functions as they're unused
  * Also accept DECSGR sequences for superscript/subscript

-------------------------------------------------------------------
Mon Oct  3 16:40:10 UTC 2022 - Matej Cepl <mcepl@suse.com>

- Update to 0.3.0 (unfortunately, upstream doesn't provide
  correct changelog so this is just log of VCS):
  - Pass lineinfos into screen resize callback; make it
    responsible for reshaping them
  - getchar() into unsigned char in vterm-ctrl.c to avoid
    complaints of comparison signedness (LP1894806)
  - Avoid remaining VLA by bounding the combining-char search to
    the max supported chars per cell
  - Avoid putting a potentially-unbounded VLA on the stack as
    temporary working space for character decode, by using the
    tmpbuffer in on_text instead
  - Set a much larger default out/tmpbuffer size (4096bytes),
    because now a size-constrained caller could make them smaller
  - Permit overriding size of outbuffer / tmpbuffer as builder
    params
  - Create struct VTermBuilder and vterm_build()
  - VTermAllocator field can be const in struct VTerm
  - Store INCDIR directly in .pc file rather than indirecting it
    via PREFIX
  - Version bump to v0.2
  - Selection send and recv should use independent partial-state
    storage
  - Also support sending the selection
  - Replace vterm_push_output_sprintf_dcs with a more generic
    _str version that can independently control introduction C1
    vs terminating ST
  - Add a selection callback for query
  - Don't emit any mouse sequences when mouse reporting disabled
  - Remember to reset mouse flags as part of overall
    vterm_state_reset()
  - Add a usage comment at the top of bin/unterm.c
  - Capture unit test for OSC 52
  - Further bugfixes for OSC 52 handling in various split-write
    conditions
  - Bugfix for cornercase where two-byte ST is split across
    buffer writes
  - Initial attack at OSC 52 = selection management, to set the
    clipboard
  - An initial attack at documenting (most of?) the sequences
    from xterm
  - Notation fixes in doc/seqs.txt
  - Provide state fallbacks for APC/PM/SOS
  - Other C0/C1 controls are permitted within SOS strings
  - Recognise APC, PM and SOS in the parser
  - Use 0x99 as a C1 test byte instead of 0x9F because the latter
    is APC which is a string introducer
  - Set _XOPEN_SOURCE 600 unconditionally in vterm-ctrl.c
  - Make libvterm compile on arm64 Macs (from
    https://github.com/neovim/libvterm/pull/6)
  - Ensure that resize shorter does not send the cursor to a
    negative row
  - Remove debugging print on DECRQSS
  - Regenerate fullwidth.inc for latest Unicode
  - A much more efficient find-wide-chars.pl
  - Accept OSC ... ST without an intermediate semicolon after the
    command number
  - Fix printf argument types
    (https://github.com/vim/vim/pull/5456)
  - Partial bugfix for uncleared area after resize (thanks Jörg
    Richter)
  - Recognise SGR 8 for conceal (thanks Jörg Richter)
  - Define a new dedicated 'state fallbacks' struct rather than
    abusing the parser callbacks one
  - New string-handling API that streams in possibly-multiple
    fragments
  - Remember to length-check accesses at cell->chars[] because it
    is not necessarily zero-terminated (LP 1846869)
  - fix memory leak of vt->tmpbuffer (LP 1843449)
  - t/run-test.pl option to abort on first fail
  - Accept convenience formatting in ?screen_chars assertions;
    makes unit tests more readable
  - Include test script line number in t/run-test.pl output
  - Add a short unit test that resize on altscreen at least
    doesn't crash
  - Only enable altscreen during unit tests that need it
  - Better handling of resize to try to avoid the final
    memmove(), and not drag scrollback in unnecessarily
  - Can't lazy-allocate state->lineinfos[BUFIDX_ALTSCREEN]
    because that allocs during byte run
  - Initial hack at tracking 'continuation' marks per line in
    lineinfo
  - Allow run-test.pl to cope with empty assertion results
  - Be sure to clear DWL/DHL status for blank lines caused by
    scroll
  - Pass 'state fields' as a struct into resize callback in case
    of other things it needs to edit
  - Remember to store a state->lineinfo array for both buffers
  - Do all the initialising of VTermState in vterm_state_new()
  - Rename realloc_buffer() to just alloc_buffer() since it
    doesn't need to realloc now
  - Rewrite of resize handling logic to hopefully cope much
    better with reflow

-------------------------------------------------------------------
Mon Mar 30 20:04:17 CEST 2020 - Matej Cepl <mcepl@suse.com>

- All my previous builds were just figments of my imagination,
  and neovim upstream claims one has to use 0.1.3 only. So,
  downgrading.

-------------------------------------------------------------------
Mon Mar 30 19:19:23 CEST 2020 - Matej Cepl <mcepl@suse.com>

- Update to 0.1.3+bzr767:
  - Remove debugging print on DECRQSS
  - Regenerate fullwidth.inc for latest Unicode
  - A much more efficient find-wide-chars.pl
  - Accept OSC ... ST without an intermediate semicolon after the
    command number
  - Fix printf argument types (gh#vim/vim#5456)

-------------------------------------------------------------------
Sat Jan 11 21:25:32 CET 2020 - Matej Cepl <mcepl@suse.com> 

- Update to 0.1.3+bzr762:
  - Merge bugfixes up to v0.1.3
  - Partial bugfix for uncleared area after resize (thanks Jörg
    Richter)
  - Recognise SGR 8 for conceal (thanks Jörg Richter)
  - Define a new dedicated 'state fallbacks' struct rather than
    abusing the parser callbacks one
  - New string-handling API that streams in possibly-multiple
    fragments
  - Remember to length-check accesses at cell->chars[] because it
    is not necessarily zero-terminated (LP 1846869)
  - fix memory leak of vt->tmpbuffer (LP 1843449)

-------------------------------------------------------------------
Wed Sep 18 14:34:55 UTC 2019 - Martin Liška <mliska@suse.cz>

- Make build verbose and respect $optflags.

-------------------------------------------------------------------
Wed Sep 11 23:31:21 CEST 2019 - Matej Cepl <mcepl@suse.com>

- Update to 0~bzr755:
  - 755 t/run-test.pl option to abort on first fail
  - 754 Accept convenience formatting in ?screen_chars assertions; makes unit
    tests more readable
  - 753 Include test script line number in t/run-test.pl output
  - 752 Add a short unit test that resize on altscreen at least doesn't crash
  - 751 Only enable altscreen during unit tests that need it
  - 750 Better handling of resize to try to avoid the final memmove(), and not
    drag scrollback in unnecessarily
  - 749 Can't lazy-allocate state->lineinfos[BUFIDX_ALTSCREEN] because that
    allocs during byte run
  - 748 Initial hack at tracking 'continuation' marks per line in lineinfo
  - 747 Allow run-test.pl to cope with empty assertion results
  - 746 Be sure to clear DWL/DHL status for blank lines caused by scroll
  - 745 Pass 'state fields' as a struct into resize callback in case of other
    things it needs to edit
  - 744 Remember to store a state->lineinfo array for both buffers
  - 743 Do all the initialising of VTermState in vterm_state_new()
  - 742 Rename realloc_buffer() to just alloc_buffer() since it doesn't need to
    realloc now
  - 741 Rewrite of resize handling logic to hopefully cope much better with
    reflow
  - 739 Recognise an __END__ marker in a unit test file
  - 738 Add a version check macro
  - 737 Bump version to 0.1
  - 736 Recognise SGR 4:3 for curly underline
  - 735 Recognise subparameters in SGR 4:x to set off/single/double
  - 734 Define some enum{} constants for pen.underline field values
  - 733 Run unit tests on outfunc instead of buffering logic; truncation test
    is no longer valid now
  - 732 Optional vterm_output_set_callback() to set an output func; will
    eventually replace buffer logic
  - 731 Implement Query SGR by building a tmpbuffer then making a single
    vterm_push_output call
  - 730 More efficient one-line implementation of DCS and ST rendering parts of
    _output_sprintf_dcs
  - 729 Rewrite vterm_push_output_* functions to use a new tmpbuffer on main VT
    object, push all output via _output_bytes()
  - 728 The F1 to F4 keys should send SS3 rather than CSI when unmodified
  - 727 Expose cell colour index as API value (LP1805035)
  - 726 Document REP sequence
  - 725 Rename/number some more state-related tests
  - 724 Renumber the 4x test series up to 6x to make plenty more space for
    state tests
  - 723 Implement REP CSI (LP1805050)
  - 722 Add --executable/-e flag to run-test.pl (LP1805034)
  - 721 Ship src/*.inc files to destdir (thanks jamessan)
  - 720 Add unit test for fullwidth emoji char
  - 719 Initial attempt at better handling of double-width unicode characters
  - 718 Fix implementation of query on bracketed paste mode (thanks jamessan)
  - 717 Need to use 1U << 31 to keep C++ compilers happy (thanks jamessan)
  - 716 Make sure to use CSI_* macros rather than hardcoding (1<<31) in
    unterm.c (thanks jamessan)
  - 715 Add DECSM 1004 to documentation
  - 714 Move 'reportfocus' to keep numerical ordering in vterm-ctrl.c
  - 713 Merge lp:~jamessan/libvterm/focus-events
  - 712 Move strbuffer into the .parser sub-struct
  - 711 Internal rearrangement of string state handling in parser, to better
    fit upcoming new API
  - 710 Now that parser 'text' callback should always make progress, no need to
    use the strbuffer for it
  - 709 Bugfix to account for UTF-8 decoder still consuming initial bytes of
    a partial sequence
  - 708 Improved handling of ESC parsing so it doesn't use the temporary
    strbuffer
  - 707 Found another document about escape sequences
  - 706 An improved CSI parser that does not use the temporary strbuffer but
    instead works entirely incrementally
  - 705 Move parser-related state into its own sub-structure
  - 704 Fix -Wpedant warnings from t/harness.c
  - 703 Compile with -Wpedantic
  - 702 Minor other syntax pedant fixes to bin/*.c files
  - 701 Make all bitfields 'unsigned int'
  - 700 Use an ifdef instead of commented code in parser.c's debugging
  - 699 Ensure that all enums in header files lack a trailing comma, because
    some older C++ compilers won't like that
  - 698 Remeber to 'return 0' at the end of main() in the binaries
  - 697 Avoid the \e escape in string literals in bin/*.c; replace with \x1b
- Removed _service file, bzr on Tumbleweed is too broken to be
  used automatically, rather use upstream tarballs.

-------------------------------------------------------------------
Sun May 28 23:06:43 UTC 2017 - ronisbr@gmail.com

- Run spec-cleaner.
- Fix `libvterm.changes` indentation.

-------------------------------------------------------------------
Sat May 27 09:18:26 UTC 2017 - bwiedemann@suse.com

- Version bump to 0~bzr696.
  Changelog:
    * Add S8C1T control support to vterm-ctrl
    * Implement querying of cursor shape in vterm-ctrl
    * Remember to document ST in doc/seqs.txt
    * Adjust linebreaking of 'break' statements to avoid gcc
      warnings of misleading indentation
    * Implement DECRQSS on SGR when set to RGB8 palette colours
    * Reset the pen between independent tests of DECRQSS on SGR
    * Bugfix for disabling mouse mode
    * Ensure stdin's ICANON mode is restored even if vterm-ctrl
      exits on error
    * Initialise mouse state at VTermState creation rather than as
      a side-effect of DECSM 100{0,2,3} - fixes LP1640917
    * Pull VTermScreenCell.attrs out to its own named type
    * Merge lp:~jamessan/libvterm/reproducibility (#307773,
      boo#1041090)

-------------------------------------------------------------------
Thu Aug 25 15:53:26 UTC 2016 - ronisbr@gmail.com

- Version bump to 0~bzr684.
  Changelog:
    * Avoid "\e" because some C compilers don't like it
    * Don't use wchar_t in unicode.c as it might not be big enough
    * Remember to pass unicode codepoints in uint32_t rather than
      int

-------------------------------------------------------------------
Sat Apr  9 22:18:12 UTC 2016 - ronisbr@gmail.com

- Version bump to 0~bzr681.
  Changelog:
    * Bugfix(?) for SunOS (thanks DominoTree -
      https://github.com/neovim/libvterm/pull/1/files)
    * (Alt-)Ctrl-Space should encode as (\e)\0

-------------------------------------------------------------------
Sat Dec  5 15:20:34 UTC 2015 - jengelh@inai.de

- Move description from main part to shlib part, since this will be
  the one that always gets installed.

-------------------------------------------------------------------
Sat Dec  5 14:49:15 UTC 2015 - ronisbr@gmail.com

- Remove unnecessary dependency from libvterm-tool.

-------------------------------------------------------------------
Sat Dec  5 14:19:14 UTC 2015 - ronisbr@gmail.com

- Remove libtool files.
- Fix groups for libvterm, libvterm0, and libvterm-tools.
- Change package compression from .tar.gz to .tar.xz.
- Change %{soname} to %{sover}.

-------------------------------------------------------------------
Sat Dec  5 13:44:52 UTC 2015 - ronisbr@gmail.com

- Change package name to libvterm.

-------------------------------------------------------------------
Wed Dec  2 17:41:49 UTC 2015 - ronisbr@gmail.com

- Initial version based on home:gmc137:neovim/libvterm.
- Version bump to 0~bzr679.
- Change package version scheme to match openSUSE's guidelines.
- Clean spec file.
- Drop obsolete patch libvterm.optflags.patch.

