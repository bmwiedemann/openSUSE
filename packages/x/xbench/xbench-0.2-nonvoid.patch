--- arcs.c
+++ arcs.c
@@ -51,6 +51,7 @@
 {
 	XFreeGC(dpy, drawWhite);
 	XFreeGC(dpy, drawBlack);
+	return 0;
 }
 
 arcs_bench(dpy, win, len)
@@ -83,4 +84,5 @@
 	printf("%d arcs with %d pixel diameter in %d secs\n",
 				narcs, len, deltaT);
 	printf("rate = %8.2f arcs/sec\n", rate);
+	return 0;
 }
--- bitmapcpy.c
+++ bitmapcpy.c
@@ -79,6 +79,7 @@
 {
 	XFreeGC(dpy, myGC);
 	XFreePixmap(dpy, thePixmap);
+	return 0;
 }
 
 bitmapcopy_bench(dpy, win, len)
@@ -108,4 +109,5 @@
 				ncopy, len, deltaT);
 	printf("rate = %8.2f copies/sec (%d Pixels/sec)\n",
 				rate, (ncopy*len*len)/deltaT);
+	return 0;
 }
--- complex1.c
+++ complex1.c
@@ -43,6 +43,7 @@
 Display *dpy;
 Window win;
 {
+	return 0;
 }
 
 complex1_bench(dpy, win, dummy)
@@ -78,4 +79,5 @@
 	printf("\n");
 	printf("%d runs %d secs\n", nrun, deltaT);
 	printf("rate = %8.2f runs/sec\n", rate);
+	return 0;
 }
--- dline.c
+++ dline.c
@@ -92,6 +92,7 @@
 	XFreeGC(dpy, drawWhite);
 	XFreeGC(dpy, drawBlack);
 	free(segments);
+	return 0;
 }
 
 dline_bench(dpy, win, len)
@@ -118,4 +119,5 @@
 	printf("%d dashed vectors of len. %d in %d secs\n",
 				nline, len, deltaT);
 	printf("rate = %8.2f vectors/sec\n", rate);
+	return 0;
 }
--- dobenches.c
+++ dobenches.c
@@ -27,7 +27,7 @@
 int benchRunning;
 
 static strblank(char *, int);
-static strinsert(char *, char*, int);
+static void strinsert(char *, char*, int);
 static isInList(char *, char **);
 
 void stopBench(int i) {
@@ -169,6 +169,7 @@
 	}
 	printf("==================================================\n");
 	printf("\n");
+	return 0;
 }
 
 #define LINELEN 79
@@ -191,6 +192,7 @@
 	    }
 	}
 	printf("%s\n", lineBuffer);
+	return 0;
 }
 
 static strblank(s, n)
@@ -198,9 +200,10 @@
 {
 	while (n--) *s++ = ' ';
 	*s++ = '\0';
+	return 0;
 }
 
-static strinsert(s1, s2, pos)
+static void strinsert(s1, s2, pos)
 char *s1, *s2;
 {
 	s1 += pos;
--- filledarcs.c
+++ filledarcs.c
@@ -51,6 +51,7 @@
 {
 	XFreeGC(dpy, drawWhite);
 	XFreeGC(dpy, drawBlack);
+	return 0;
 }
 
 filledarcs_bench(dpy, win, len)
@@ -83,4 +84,5 @@
 	printf("%d filled arcs with %d pixel diameter in %d secs\n",
 				narcs, len, deltaT);
 	printf("rate = %8.2f filled arcs/sec\n", rate);
+	return 0;
 }
--- filledpoly.c
+++ filledpoly.c
@@ -69,6 +69,7 @@
 {
 	XFreeGC(dpy, drawWhite);
 	XFreeGC(dpy, drawBlack);
+	return 0;
 }
 
 filledpoly_bench(dpy, win, dummy)
@@ -97,4 +98,5 @@
 	printf("%d filled polygons with %d points (size %d) in %d secs\n",
 				npoly, NPOINT, len, deltaT);
 	printf("rate = %8.2f filled polygons/sec\n", rate);
+	return 0;
 }
--- fillrects.c
+++ fillrects.c
@@ -69,6 +69,7 @@
 	XFreeGC(dpy, drawWhite);
 	XFreeGC(dpy, drawBlack);
 	free(rectangles);
+	return 0;
 }
 
 fillrects_bench(dpy, win, len)
@@ -96,4 +97,5 @@
 				nrects, len, deltaT);
 	printf("rate = %8.2f rectangles/sec (%d Pixels/sec)\n",
 				rate, (nrects*len*len)/deltaT);
+	return 0;
 }
--- hline.c
+++ hline.c
@@ -69,6 +69,7 @@
 	XFreeGC(dpy, drawWhite);
 	XFreeGC(dpy, drawBlack);
 	free(segments);
+	return 0;
 }
 
 hline_bench(dpy, win, len)
@@ -95,4 +96,5 @@
 				nline, len, deltaT);
 	printf("rate = %8.2f vectors/sec (%d Pixels/sec)\n",
 				rate, (nline*len)/deltaT);
+	return 0;
 }
--- imagestr.c
+++ imagestr.c
@@ -74,6 +74,7 @@
 {
 	XFreeFont(dpy, fontinfo);
 	XFreeGC(dpy, myGC);
+	return 0;
 }
 
 imagestring_bench(dpy, win, dummy)
@@ -119,4 +120,5 @@
 	printf("\n");
 	printf("%d chars in %d secs\n", nchars, deltaT);
 	printf("rate = %8.2f chars/sec\n", rate);
+	return 0;
 }
--- invrects.c
+++ invrects.c
@@ -51,6 +51,7 @@
 Window win;
 {
 	XFreeGC(dpy, drawInv);
+	return 0;
 }
 
 invrects_bench(dpy, win, len)
@@ -81,4 +82,5 @@
 				nrects, len, deltaT);
 	printf("rate = %8.2f rectangles/sec (%d Pixels/sec)\n",
 				rate, (nrects*len*len)/deltaT);
+	return 0;
 }
--- line.c
+++ line.c
@@ -89,6 +89,7 @@
 	XFreeGC(dpy, drawWhite);
 	XFreeGC(dpy, drawBlack);
 	free(segments);
+	return 0;
 }
 
 line_bench(dpy, win, len)
@@ -114,4 +115,5 @@
 	printf("%d vectors of len. %d in %d secs\n",
 				nline, len, deltaT);
 	printf("rate = %8.2f vectors/sec\n", rate);
+	return 0;
 }
--- main.c
+++ main.c
@@ -216,4 +216,5 @@
 	    printf("; SYNC");
 	printf("\n");
 	printf("\n");
+	return 0;
 }
--- pixmapcpy.c
+++ pixmapcpy.c
@@ -73,6 +73,7 @@
 {
 	XFreeGC(dpy, myGC);
 	XFreePixmap(dpy, thePixmap);
+	return 0;
 }
 
 pixmapcopy_bench(dpy, win, len)
@@ -102,4 +103,5 @@
 				ncopy, len, deltaT);
 	printf("rate = %8.2f copies/sec (%d Pixels/sec)\n",
 				rate, (ncopy*len*len)/deltaT);
+	return 0;
 }
--- rects.c
+++ rects.c
@@ -69,6 +69,7 @@
 	XFreeGC(dpy, drawWhite);
 	XFreeGC(dpy, drawBlack);
 	free(rectangles);
+	return 0;
 }
 
 rects_bench(dpy, win, len)
@@ -95,4 +96,5 @@
 				nrects, len, deltaT);
 	printf("rate = %8.2f rectangles/sec (%d Pixels/sec)\n",
 				rate, (nrects*4*len)/deltaT);
+	return 0;
 }
--- screencpy.c
+++ screencpy.c
@@ -49,6 +49,7 @@
 Window win;
 {
 	XFreeGC(dpy, myGC);
+	return 0;
 }
 
 screencopy_bench(dpy, win, len)
@@ -80,4 +81,5 @@
 				ncopy, len, deltaT);
 	printf("rate = %8.2f copies/sec (%d Pixels/sec)\n",
 				rate, (ncopy*len*len)/deltaT);
+	return 0;
 }
--- scroll.c
+++ scroll.c
@@ -52,6 +52,7 @@
 Window win;
 {
 	XFreeGC(dpy, myGC);
+	return 0;
 }
 
 scroll_bench(dpy, win, delta)
@@ -80,4 +81,5 @@
 	printf("rate = %8.2f scrolls/sec (%d Pixels/sec)\n",
 				rate,
 				(ncopy*SCROLLWIDTH*SCROLLHEIGHT)/deltaT);
+	return 0;
 }
--- sline.c
+++ sline.c
@@ -67,6 +67,7 @@
 	XFreeGC(dpy, drawWhite);
 	XFreeGC(dpy, drawBlack);
 	free(segments);
+	return 0;
 }
 
 sline_bench(dpy, win, len)
@@ -93,4 +94,5 @@
 				nline, len, deltaT);
 	printf("rate = %8.2f vectors/sec (%d Pixels/sec)\n",
 				rate, (nline*len)/deltaT);
+	return 0;
 }
--- stiprects.c
+++ stiprects.c
@@ -91,6 +91,7 @@
 	XFreeGC(dpy, myGC2);
 	XFreePixmap(dpy, stipple2);
 	free(rectangles);
+	return 0;
 }
 
 stippledrects_bench(dpy, win, len)
@@ -118,4 +119,5 @@
 				nrects, len, deltaT);
 	printf("rate = %8.2f rectangles/sec (%d Pixels/sec)\n",
 				rate, (nrects*len*len)/deltaT);
+	return 0;
 }
--- tiledrects.c
+++ tiledrects.c
@@ -99,6 +99,7 @@
 	XFreeGC(dpy, myGC2);
 	XFreePixmap(dpy, tile2);
 	free(rectangles);
+	return 0;
 }
 
 tiledrects_bench(dpy, win, len)
@@ -126,4 +127,5 @@
 				nrects, len, deltaT);
 	printf("rate = %8.2f rectangles/sec (%d Pixels/sec)\n",
 				rate, (nrects*len*len)/deltaT);
+	return 0;
 }
--- vline.c
+++ vline.c
@@ -67,6 +67,7 @@
 	XFreeGC(dpy, drawWhite);
 	XFreeGC(dpy, drawBlack);
 	free(segments);
+	return 0;
 }
 
 vline_bench(dpy, win, len)
@@ -93,4 +94,5 @@
 				nline, len, deltaT);
 	printf("rate = %8.2f vectors/sec (%d Pixels/sec)\n",
 				rate, (nline*len)/deltaT);
+	return 0;
 }
--- wline.c
+++ wline.c
@@ -94,6 +94,7 @@
 	XFreeGC(dpy, drawWhite);
 	XFreeGC(dpy, drawBlack);
 	free(segments);
+	return 0;
 }
 
 wline_bench(dpy, win, len)
@@ -120,4 +121,5 @@
 	printf("%d wide vectors (linewidth=%d) of len. %d in %d secs\n",
 				nline, LINEWIDTH, len, deltaT);
 	printf("rate = %8.2f vectors/sec\n", rate);
+	return 0;
 }
