diff -up OpenLieroX/include/CGameScript.h~ OpenLieroX/include/CGameScript.h
--- OpenLieroX/include/CGameScript.h~	2010-02-05 19:22:18.000000000 +0100
+++ OpenLieroX/include/CGameScript.h	2016-02-20 19:58:04.701471130 +0100
@@ -40,7 +40,7 @@ static const Version GS_MinLxVersion[] =
 // current most recent version
 #define		GS_VERSION		8
 
-static_assert(GS_VERSION - GS_FIRST_SUPPORTED_VERSION + 1 == sizeof(GS_MinLxVersion)/sizeof(Version), GS_MinLxVersion__sizecheck);
+lierox_static_assert(GS_VERSION - GS_FIRST_SUPPORTED_VERSION + 1 == sizeof(GS_MinLxVersion)/sizeof(Version), GS_MinLxVersion__sizecheck);
 
 // Error codes
 #define		GSE_OK			1
diff -up OpenLieroX/include/EndianSwap.h~ OpenLieroX/include/EndianSwap.h
--- OpenLieroX/include/EndianSwap.h~	2009-10-11 22:53:01.000000000 +0200
+++ OpenLieroX/include/EndianSwap.h	2016-02-20 19:58:38.523633954 +0100
@@ -23,7 +23,7 @@
 
 template <int n>
 void ByteSwap(unsigned char * b) {
-	static_assert(n == 1 || n % 2 == 0, n_must_be_equal);
+	lierox_static_assert(n == 1 || n % 2 == 0, n_must_be_equal);
 	for(int i = 0; i < n/2; ++i) {
 		std::swap(b[i], b[n - i - 1]);
 	}
@@ -57,8 +57,8 @@ void ByteSwap5(T& x) {
 
 template <int size, int nmemb, typename T>
 static size_t fwrite_endian_compat_wrapper(FILE* stream, T d) {
-	static_assert(nmemb == 1, nmemb__equals1);
-	static_assert(size == sizeof(T), size__mismatch);
+	lierox_static_assert(nmemb == 1, nmemb__equals1);
+	lierox_static_assert(size == sizeof(T), size__mismatch);
 	EndianSwap(d);
 	return fwrite(&d, sizeof(T), 1, stream);
 }
@@ -69,8 +69,8 @@ static size_t fwrite_endian_compat_wrapp
 
 template <int size, int nmemb, typename T>
 static size_t fread_compat_wrapper(FILE* stream, T& d) {
-	static_assert(nmemb == 1, nmemb__equals1);
-	static_assert(size == sizeof(T), size__mismatch);
+	lierox_static_assert(nmemb == 1, nmemb__equals1);
+	lierox_static_assert(size == sizeof(T), size__mismatch);
 	return fread(&d, sizeof(T), 1, stream);	
 }
 
diff -up OpenLieroX/include/ProjAction.h~ OpenLieroX/include/ProjAction.h
--- OpenLieroX/include/ProjAction.h~	2010-02-05 19:22:18.000000000 +0100
+++ OpenLieroX/include/ProjAction.h	2016-02-20 19:57:52.051410231 +0100
@@ -125,7 +125,7 @@ enum Proj_TrailType {
 	__TRL_UBOUND = INT_MAX // force enum to be of size int
 };
 
-static_assert(sizeof(Proj_TrailType) == sizeof(int), Proj_TrailType__SizeCheck);
+lierox_static_assert(sizeof(Proj_TrailType) == sizeof(int), Proj_TrailType__SizeCheck);
 
 
 struct Proj_Trail {
@@ -176,7 +176,7 @@ enum Proj_ActionType {
 	__PJ_UBOUND = INT_MAX // force enum to be of size int
 };
 
-static_assert(sizeof(Proj_ActionType) == sizeof(int), Proj_ActionType__SizeCheck);
+lierox_static_assert(sizeof(Proj_ActionType) == sizeof(int), Proj_ActionType__SizeCheck);
 
 
 struct ProjCollisionType;
@@ -379,7 +379,7 @@ struct Proj_Event {
 		__PET_LBOUND = INT_MIN,
 		__PET_UBOUND = INT_MAX
 	} type;
-	static_assert(sizeof(Type) == sizeof(int), Proj_Event_Type__SizeCheck);
+	lierox_static_assert(sizeof(Type) == sizeof(int), Proj_Event_Type__SizeCheck);
 	
 	Proj_Event(Type t = PET_UNSET) : type(t) {}
 	Proj_TimerEvent timer;
diff -up OpenLieroX/include/ProjectileDesc.h~ OpenLieroX/include/ProjectileDesc.h
--- OpenLieroX/include/ProjectileDesc.h~	2010-02-05 19:22:18.000000000 +0100
+++ OpenLieroX/include/ProjectileDesc.h	2016-02-20 19:58:01.892457607 +0100
@@ -60,7 +60,7 @@ enum Proj_AttractiveType  {
 	ATT_QUADRATIC,  // The force fades out using the inverse quadratic function
 };
 
-static_assert(sizeof(Proj_GfxType) == sizeof(int), Proj_Type__SizeCheck);
+lierox_static_assert(sizeof(Proj_GfxType) == sizeof(int), Proj_Type__SizeCheck);
 
 
 // Animation types
@@ -73,7 +73,7 @@ enum Proj_AnimType {
 	__ANI_UBOUND = INT_MAX,
 };
 
-static_assert(sizeof(Proj_AnimType) == sizeof(int), Proj_AnimType__SizeCheck);
+lierox_static_assert(sizeof(Proj_AnimType) == sizeof(int), Proj_AnimType__SizeCheck);
 
 
 
diff -up OpenLieroX/include/StaticAssert.h~ OpenLieroX/include/StaticAssert.h
--- OpenLieroX/include/StaticAssert.h~	2016-02-20 19:58:29.000000000 +0100
+++ OpenLieroX/include/StaticAssert.h	2016-02-20 19:59:35.491908207 +0100
@@ -14,7 +14,7 @@ template <> class static_assert_failure<
 template <> class static_assert_failure<true>  { char foo; };
 template <int s> class static_assert_test{};
 
-#define static_assert(X, desc)  \
+#define lierox_static_assert(X, desc)  \
 	typedef static_assert_test< (int)sizeof(static_assert_failure< (bool)(X) >) > static_assert_typedef_##desc;
 
 #endif
diff -up OpenLieroX/include/WeaponDesc.h~ OpenLieroX/include/WeaponDesc.h
--- OpenLieroX/include/WeaponDesc.h~	2010-02-05 19:22:18.000000000 +0100
+++ OpenLieroX/include/WeaponDesc.h	2016-02-20 19:57:58.701442245 +0100
@@ -34,7 +34,7 @@ enum Wpn_Class {
 	__WCL_UBOUND = INT_MAX,
 };
 
-static_assert(sizeof(Wpn_Class) == sizeof(int), Wpn_Class__SizeCheck);
+lierox_static_assert(sizeof(Wpn_Class) == sizeof(int), Wpn_Class__SizeCheck);
 
 // Weapon types
 enum Wpn_Type {
@@ -46,7 +46,7 @@ enum Wpn_Type {
 	__WPN_UBOUND = INT_MAX
 };
 
-static_assert(sizeof(Wpn_Type) == sizeof(int), Wpn_Type__SizeCheck);
+lierox_static_assert(sizeof(Wpn_Type) == sizeof(int), Wpn_Type__SizeCheck);
 
 
 // Special Weapons
@@ -58,7 +58,7 @@ enum Wpn_Special {
 	__SPC_UBOUND = INT_MAX
 };
 
-static_assert(sizeof(Wpn_Special) == sizeof(int), Wpn_Special__SizeCheck);
+lierox_static_assert(sizeof(Wpn_Special) == sizeof(int), Wpn_Special__SizeCheck);
 
 
 
diff -up OpenLieroX/src/client/DeprecatedGUI/Menu_FloatingOptions.cpp~ OpenLieroX/src/client/DeprecatedGUI/Menu_FloatingOptions.cpp
--- OpenLieroX/src/client/DeprecatedGUI/Menu_FloatingOptions.cpp~	2010-02-05 19:22:18.000000000 +0100
+++ OpenLieroX/src/client/DeprecatedGUI/Menu_FloatingOptions.cpp	2016-02-20 19:58:49.946688946 +0100
@@ -134,7 +134,7 @@ std::string sFloatingOpt_InputNames[] =
 };
 
 static const int sFloatingOpt_InputNames__size = sizeof(sFloatingOpt_InputNames) / sizeof(std::string);
-static_assert( sFloatingOpt_InputNames__size == __SIN_PLY_BOTTOM - 5, inputopts__sizecheck );
+lierox_static_assert( sFloatingOpt_InputNames__size == __SIN_PLY_BOTTOM - 5, inputopts__sizecheck );
 
 
 ///////////////////
diff -up OpenLieroX/src/client/Options.cpp~ OpenLieroX/src/client/Options.cpp
--- OpenLieroX/src/client/Options.cpp~	2010-02-10 02:04:41.000000000 +0100
+++ OpenLieroX/src/client/Options.cpp	2016-02-20 19:58:53.421705676 +0100
@@ -51,11 +51,11 @@ const std::string    ply_def2[] = {"kp 8
 const std::string    gen_keys[] = {"Chat", "ShowScore", "ShowHealth", "ShowSettings",  "TakeScreenshot",  "ViewportManager", "SwitchMode", "ToggleTopBar", "TeamChat",	"IrcChat", "Console"};
 const std::string    gen_def[]  = {"i",    "tab",		"h",		  "space",	       "F12",				"F2",				 "F5",		   "F8",		   "o",			"F4",	"F3"};
 
-static_assert( sizeof(ply_keys) / sizeof(std::string) == __SIN_PLY_BOTTOM, ply_keys__sizecheck );
-static_assert( sizeof(ply_def1) / sizeof(std::string) == __SIN_PLY_BOTTOM, ply_def1__sizecheck );
-static_assert( sizeof(ply_def2) / sizeof(std::string) == __SIN_PLY_BOTTOM, ply_def2__sizecheck );
-static_assert( sizeof(gen_keys) / sizeof(std::string) == __SIN_GENERAL_BOTTOM, gen_keys__sizecheck );
-static_assert( sizeof(gen_def) / sizeof(std::string) == __SIN_GENERAL_BOTTOM, gen_def__sizecheck );
+lierox_static_assert( sizeof(ply_keys) / sizeof(std::string) == __SIN_PLY_BOTTOM, ply_keys__sizecheck );
+lierox_static_assert( sizeof(ply_def1) / sizeof(std::string) == __SIN_PLY_BOTTOM, ply_def1__sizecheck );
+lierox_static_assert( sizeof(ply_def2) / sizeof(std::string) == __SIN_PLY_BOTTOM, ply_def2__sizecheck );
+lierox_static_assert( sizeof(gen_keys) / sizeof(std::string) == __SIN_GENERAL_BOTTOM, gen_keys__sizecheck );
+lierox_static_assert( sizeof(gen_def) / sizeof(std::string) == __SIN_GENERAL_BOTTOM, gen_def__sizecheck );
 
 static const Version defaultMinVersion("OpenLieroX/0.58_rc1");
 
diff -up OpenLieroX/src/common/CScriptableVars.cpp~ OpenLieroX/src/common/CScriptableVars.cpp
--- OpenLieroX/src/common/CScriptableVars.cpp~	2009-10-11 22:53:03.000000000 +0200
+++ OpenLieroX/src/common/CScriptableVars.cpp	2016-02-20 19:58:59.220733593 +0100
@@ -32,7 +32,7 @@ const char * GameInfoGroupDescriptions[]
 {"Race", "Race gamemode settings"},
 };
 
-static_assert( sizeof(GameInfoGroupDescriptions) / (sizeof(char*) * 2) == GIG_Size, GIG_desc__sizecheck );
+lierox_static_assert( sizeof(GameInfoGroupDescriptions) / (sizeof(char*) * 2) == GIG_Size, GIG_desc__sizecheck );
 
 
 std::string AdvancedLevelDescription(AdvancedLevel l) {
diff -up OpenLieroX/src/common/FeatureList.cpp~ OpenLieroX/src/common/FeatureList.cpp
--- OpenLieroX/src/common/FeatureList.cpp~	2010-02-10 02:04:41.000000000 +0100
+++ OpenLieroX/src/common/FeatureList.cpp	2016-02-20 19:58:56.252719304 +0100
@@ -114,7 +114,7 @@ Feature featureArray[] = {
 	Feature::Unset()
 };
 
-static_assert(__FTI_BOTTOM == sizeof(featureArray)/sizeof(Feature) - 1, featureArray__sizecheck);
+lierox_static_assert(__FTI_BOTTOM == sizeof(featureArray)/sizeof(Feature) - 1, featureArray__sizecheck);
 
 
 
diff -up OpenLieroX/src/main.cpp~ OpenLieroX/src/main.cpp
--- OpenLieroX/src/main.cpp~	2010-02-05 19:22:18.000000000 +0100
+++ OpenLieroX/src/main.cpp	2016-02-20 19:58:44.723663802 +0100
@@ -135,12 +135,12 @@ void print_binary_string(const std::stri
 static void DoSystemChecks() {
 	// sadly, these sizeof are directly used in CGameScript.cpp/CMap.cpp
 	// TODO: fix this issue
-	static_assert(sizeof(char) == 1, sizeof_char__equals1);
-	static_assert(sizeof(short) == 2, sizeof_short__equals2);
-	static_assert(sizeof(int) == 4, sizeof_int__equals4);
-	static_assert(sizeof(float) == 4, sizeof_float__equals4);
+	lierox_static_assert(sizeof(char) == 1, sizeof_char__equals1);
+	lierox_static_assert(sizeof(short) == 2, sizeof_short__equals2);
+	lierox_static_assert(sizeof(int) == 4, sizeof_int__equals4);
+	lierox_static_assert(sizeof(float) == 4, sizeof_float__equals4);
 	// sometimes the return value of SendMessage is used as a pointer
-	static_assert(sizeof(DWORD) == sizeof(void*), sizeof_dword__equals_p);
+	lierox_static_assert(sizeof(DWORD) == sizeof(void*), sizeof_dword__equals_p);
 }
 
 
