//%LICENSE////////////////////////////////////////////////////////////////
//
// Licensed to The Open Group (TOG) under one or more contributor license
// agreements.  Refer to the OpenPegasusNOTICE.txt file distributed with
// this work for additional information regarding copyright ownership.
// Each contributor licenses this file to you under the OpenPegasus Open
// Source License; you may not use this file except in compliance with the
// License.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//////////////////////////////////////////////////////////////////////////

// ==================================================================
// PG_ProviderModule
// ==================================================================
        [Version("2.11.0"), Description ( "A ProviderModule contains "
         "one or more Providers. ") ]
class PG_ProviderModule : CIM_LogicalElement {
      [Key, Override("Name"), Description ("A human-readable name that"
       "uniquely identifies the Provider Module. This name is used as "
       "a key by  the PG_Provider ProviderModuleName property and the "
       "PG_ProviderCapabilities ProviderModuleName property.")]
   string Name;

      [Required, Description ("The name of the Provider Module vendor. "
      "Used only for documentation.") ]
   string Vendor;

      [Required, Description ("The Provider Module version.")]
   string Version;

      [Required, Description ("A string defining the provider interface "
      "implemented by the provider module.  It must be one of the values "
      "defined in the valueMap and defines the Pegasus Provider Manager "
      "destination for operation requests in conjunction with the "
      "InterfaceVesion property."),
      valueMap {"C++Default", "CMPI","JMPI"} ]
   string InterfaceType;

      [Required, Description ("A string defining the version of the "
      "provider interface defined in the InterFaceType property. "
      "In conjunction with the InterfaceType property this defines a "
      "Pegasus Provider Manager to which operations are routed.  The "
      "string is of the form xxx.yyy.zzz where:\n"
      "xxx is the major version number \n"
      "yyy is the minor version number \n"
      "zzz is the revision number for the interface. \n"
      "Separate provider managers can exist within the Pegasus environment "
      "for the same InterfaceType and different interface versions.")]
   string InterfaceVersion;

      [Required, Description ("The location string defines the name of "
      "shared library that implements the ProviderModule.  Only the main "
      "part of the name is provided. Pegasus provides the shared library "
      "suffix consistent with each operating system. ")]
   string Location;

      [Description (
        "   Defines the user context in which this provider module must be "
        "invoked.  The possible values are: \n"
        "2 = \"Requestor\", the provider is invoked in the context of the "
        "user requesting an operation. \n"
        "3 = \"Designated User\", the provider is invoked in the context "
        "of the user specified by the DesignatedUserContext property. \n"
        "4 = \"Privileged User\", the provider is invoked with privileged "
        "authority. \n"
        "5 = \"CIM Server\", the provider is invoked in the user context "
        "of the CIM Server itself."),
       ValueMap { "2", "3", "4", "5" },
       Values { "Requestor", "Designated User", "Privileged User",
        "CIM Server" }]
   uint16 UserContext;
      [Description(
        "   A string specifying a user name defining the user context in "
        "which this provider module must be invoked (regardless of which "
        "user requests an operation.)  This value MUST be set to a non NULL "
        "value when UserContext is set to a value of 3 (\"Designated "
        "User\").  For all other values of UserContext, the "
        "DesignatedUserContext MUST be NULL.")]
   string DesignatedUserContext;

      [Description ( 
        "   Indicates the current status(es) of the element. "
        "Various health and operational statuses are "
        "defined. Many of the enumeration's values are self-"
        "explanatory.  However, a few are not and are described "
        "in more detail. \"Stressed\" indicates that the element "
        "is functioning, but needs attention. Examples of "
        "\"Stressed\" states are overload, overheated, etc. "
        "\"Predictive Failure\" indicates that an element is "
        "functioning nominally but predicting a failure in the "
        "near future. \"In Service\" describes an element being "
        "configured, maintained, cleaned, or otherwise administered. "
        "\"No Contact\" indicates that the monitoring system "
        "has knowledge of this element, but has never been able to "
        "establish communications with it. \"Lost Communication\" "
        "indicates that the ManagedSystemElement is known to exist "
        "and has been contacted successfully in the past, but is "
        "currently unreachable. \"Stopped\" indicates that the "
        "element is known to exist, is not operational (e.g., it "
        "is unable to provide service to users), but it has not "
        "failed. It has purposely been made non-operational. \n"
        "  OperationalStatus replaces the Status property on "
        "ManagedSystemElement to provide a consistent approach to "
        "enumerations, to address implementation needs for an "
        "array property, and to provide a migration path from today's "
        "environment to the future. This change was not made earlier "
        "since it required the DEPRECATED qualifier. Due to the "
        "widespread use of the existing Status property in "
        "management applications, it is strongly recommended that "
        "providers/instrumentation provide BOTH the Status and "
        "OperationalStatus properties. As always, Status (since it "
        "is single-valued) provides the primary status of the "
        "element."),
       ValueMap {"0", "1", "2", "3", "4", "5", "6", "7", "8", 
             "9", "10", "11", "12", "13"}, 
       Values {"Unknown", "Other", "OK", "Degraded", "Stressed",
             "Predictive Failure", "Error", "Non-Recoverable Error", 
             "Starting", "Stopping", "Stopped", "In Service", 
             "No Contact", "Lost Communication"}, 
       ModelCorrespondence {
        "CIM_ManagedSystemElement.OtherStatusDescription"} ] 
    uint16 OperationalStatus[];
      [Description (
        "A string describing the status - used when the "
        "OperationalStatus property is set to 1 (\"Other\")."), 
       ModelCorrespondence {
        "CIM_ManagedSystemElement.OperationalStatus"} ]
    string OtherStatusDescription;

      [Description(
        " A string specifying a group name for the provider module."
        " If the specified value is \"CIMServer\",  provider module"
        " is loaded into the CIMServer process. Provider modules"
        " having the same group name other than \"CIMServer\" are"
        " loaded into a single agent process except when overridden"
        " by specific UserContext values. If the value is not specified,"
        " each provider module is loaded into different agent process."
        " Provider modules having different UserContext values but the"
        " same group name are loaded according to the UserContext"
        " information")]
   string ModuleGroupName;

      [Description(
        " Sets the module group name")]
   sint16 setModuleGroupName([IN] string moduleGroupName);

      [Description(
        " Uint16 value indicating the provider module bitness."
        " This option is useful when the CIMServer is compiled"
        " to support different types of (bitness) provider modules. For"
        " example: 64 bit CIMServer supporting the 32 bit provider"
        " modules. \"Default\" indicates both provider module and"
        " CIMServer have same bitness."
        " \"32\" indicates that the provider module is 32/31-bit type."
        " \"64\" indicates that the provider module is 64-bit type."
        " If the specified bitness is different from CIMServer bitness,"
        " the provider module is always loaded into out of process"
        " irrespective of forceProviderProcesses option value."),
      ValueMap {"1", "2", "3", "4"},
      Values {"Default", "32", "64" }]
   uint16 Bitness;

      [Description ("")]
   uint32 start();
      [Description ("")]
   uint32 stop();
};

// ==================================================================
// PG_Provider
// ==================================================================
        [Version("2.2.0"), Description ( "A Provider is an indivisible "
         "unit that functions as an intermediary between the CIM Object "
         "Manager and one or more managed resources. A Provider operates "
         "at the request of the CIM_ObjectManager. ") ]
class PG_Provider : CIM_LogicalElement {
      [Key, Propagated ("PG_ProviderModule.Name"),  
       Description ("The scoping PG_ProviderModule name.") ]
   string ProviderModuleName;
      [Key, Override("Name"), Description ("A human-readable name that"
       "uniquely identifies the provider within the Provider Module.")]
   string Name;
};

// ==================================================================
// PG_Capabilities
// ==================================================================
        [Abstract,
	 Version ("2.6.0"), Description ("PG_Capabilities is an "
	 "abstract superclass which contains key properties for both "
	 "provider and consumer capabilities.")]
class PG_Capabilities : CIM_ManagedElement {
      [Key, Propagated ("PG_Provider.ProviderModuleName"), 
       Description ("The scoping PG_ProviderModule name.") ]
   string ProviderModuleName;
      [Key, Propagated ("PG_Provider.Name"), 
       Description ("The scoping PG_Provider name.") ]
   string ProviderName;
      [Key, Description ("A value that uniquely identifies "
       "this Capabilities instance within the set of Capabilities for "
       "the designated Provider or consumer.") ]
   string CapabilityID;
};


// ==================================================================
// PG_CapabilitiesRegistration
// ==================================================================
        [Abstract,
	 Version ("2.6.0"), Description ("PG_CapabilitiesRegistration is an "
	 "abstract superclass which contains required properties for both "
	 "provider and consumer.")]
class PG_CapabilitiesRegistration : PG_Capabilities {
      [Required, Description (
       "ProviderType enumerates the kind of provider "
       "capabilities defined for the associated Provider. "),
       ArrayType ("Indexed"),
       ValueMap { "2", "3", "4" , "5" , "6" , "7"},
       Values {"Instance", "Association", "Indication" , "Method",
           "IndicationConsumer", "InstanceQuery"}]
    uint16 ProviderType[];
};

// ==================================================================
// PG_ProviderCapabilities
// ==================================================================
        [Version ("2.3.0"), Description ("An instance of "
         "ProviderCapabilities describes a set of PG_Provider "
         "capabilities. ") ]
class PG_ProviderCapabilities : PG_CapabilitiesRegistration {
      [Required, Description (
       "The ClassName describes the class for which the associated "
       "Provider supplies instances, associations or indications "
       "information.")]
   string ClassName;
      [Required, Description ("Namespaces defines the namespaces that are "
       "supported by the Provider for ClassName.")] 
   string Namespaces[];
      [Description (
       "SupportedProperties lists the properties supported "
       "by this provider.  If this array is empty, the provider "
       "MUST support all of the properties defined in the class. "
       "If the provider does not support all of the properties, "
       "the properties supported MUST be included in the array. "
       "The array entry format is <PropertyName>"),
       ModelCorrespondence {"PG_ProviderCapabilities.ClassName"} ]
    string SupportedProperties[];
      [Description (
       "SupportedMethods lists the methods supported by this "
       "provider. If this array is empty, the provider MUST "
       "support all the methods defined in the class. "
       "If the provider does not support all the methods, "
       "the methods supported MUST be included in the array."
       "The array entry format is <MethodName>"),
       ModelCorrespondence {"PG_ProviderCapabilities.ClassName "} ]
    string SupportedMethods [];
};


// ==================================================================
// PG_ConsumerCapabilities
// ==================================================================
        [Version ("2.3.0"), Description ("An instance of "
         "ConsumerCapabilities describes a set of PG_Provider "
         "consumer capabilities. ") ]
class PG_ConsumerCapabilities : PG_CapabilitiesRegistration {
      [Required, Description ("Destinations describes the "
       "destinations for which indications will be delivered to "
       "this consumer. An indication destination corresponds to the "
       "path portion of the destination URL specified in a "
       "CIM_IndicationHandlerCIMXML instance.")] 
   string Destinations[];
};

// ==================================================================
// PG_ProviderCapabilitiesElements
// ==================================================================

[Association, Version("2.4.0"), Description (
      "ProviderCapabilitiesElements is an association describing "
      "the capabilities that are supported by a Provider. ") ]
class PG_ProviderCapabilitiesElements : CIM_Dependency {
      [Key, Override ("Antecedent"), Min(1), Max(1), 
       Description ("The CIM Provider supporting the Capability.") ]
    PG_Provider REF Antecedent;
      [Override ("Dependent"), Weak,
       Description ("The Capability of the CIM_Provider.")]
    PG_CapabilitiesRegistration REF Dependent;
};


// ==================================================================
// PG_ProviderModuleElements
// ==================================================================

[Association, Version("2.0.0"), Description (
      "ProviderModuleElements is an association describing "
      "the Provider that are supported by a ProviderModule. ") ]
class PG_ProviderModuleElements : CIM_Dependency {
      [Override ("Antecedent"), Min(1), Max(1), Key, 
       Description ("The Provider Module containing the Provider.") ]
    PG_ProviderModule REF Antecedent;
      [Override ("Dependent"), Weak,
       Description ("The Provider contained by the Provider Module.")]
    PG_Provider REF Dependent;
};
