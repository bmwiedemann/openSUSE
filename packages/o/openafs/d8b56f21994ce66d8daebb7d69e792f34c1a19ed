commit d8b56f21994ce66d8daebb7d69e792f34c1a19ed
Author: Cheyenne Wills <cwills@sinenomine.net>
Date:   Wed Jun 12 14:24:01 2024 -0600

    afs: avoid empty-body warning
    
    With Linux 6.10 commit:
        "kbuild: turn on -Wextra by default" (f5982cceb3)
    there are additional compiler warnings that can turn
    into build errors when --enable-checking is used.
    
        "error: suggest braces around empty body in an ‘if’
         statement [-Werror=empty-body]"
    
    when there is an empty body, e.g.
        if (foo)
            ;
    
    Most cases are due to the macros afs_PutCell and afs_PutServer which are
    "empty" macros.
    
    Update the afs_PutCell and afs_PutServer macros so they expand to
      do {} while(0)
    
    Add a comment at the definitions for afs_PutCell and afs_PutServer to
    document the reason for keeping them.
    
    Add braces to conditionals that have an empty body.
    
    There are no functional changes with this commit.
    
    Change-Id: I359723eb6a19d1c78449902b4f477da131b0fa18
    Reviewed-on: https://gerrit.openafs.org/15766
    Reviewed-by: Michael Meffie <mmeffie@sinenomine.net>
    Tested-by: BuildBot <buildbot@rampaginggeek.com>
    Reviewed-by: Andrew Deason <adeason@sinenomine.net>

diff --git a/src/afs/afs.h b/src/afs/afs.h
index 4bde047e8..621a8a517 100644
--- a/src/afs/afs.h
+++ b/src/afs/afs.h
@@ -349,7 +349,8 @@ struct cell_alias {
     char *cell;
 };
 
-#define	afs_PutCell(cellp, locktype)
+/* In case someday a counterpart for afs_GetCell is needed */
+#define afs_PutCell(cellp, locktype) do {} while(0)
 
 /* the unixuser flag bit definitions */
 #define	UHasTokens	1	/* are the st and ct fields valid (ever set)? */
@@ -537,7 +538,8 @@ struct server {
     afs_int32 capabilities;
 };
 
-#define	afs_PutServer(servp, locktype)
+/* In case someday a counterpart for afs_GetServer is needed */
+#define afs_PutServer(servp, locktype) do {} while(0)
 
 /* structs for some pioctls  - these are (or should be)
  * also in venus.h
diff --git a/src/afs/afs_cbqueue.c b/src/afs/afs_cbqueue.c
index 2dd633588..11e3aa3f1 100644
--- a/src/afs/afs_cbqueue.c
+++ b/src/afs/afs_cbqueue.c
@@ -139,7 +139,9 @@ afs_DequeueCallback(struct vcache *avc)
     debugvc = avc;
     if (avc->callsort.prev) {
 	QRemove(&(avc->callsort));
-    } else;			/* must have got dequeued in a race */
+    } else {
+	/* must have got dequeued in a race */
+    }
 
     return;
 }				/* afs_DequeueCallback */
