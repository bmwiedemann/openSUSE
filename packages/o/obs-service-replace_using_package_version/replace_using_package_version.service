<service name="replace_using_package_version">
  <summary>Replaces a regex  with the version value of a package</summary>
  <description>This service replaces a given regex with the version value of
a given package. Can be used to align the version of you package or image
to the version of another package.</description>
  <parameter name="file">
    <description>This is the file where the change will be applied</description>
  </parameter>
  <parameter name="regex">
    <description>This is the regular expression used to parse the input file.
It uses python re module syntax</description>
  </parameter>
  <parameter name="package">
    <description>This is the package which version will be used as a replacement
for the regex. If it is not found as a build dependency it will fallback to
look for an *.obsinfo file with the package name (the *obsinfo file is 
generated by the obs_scm service). It fails if no version is found.
</description>
  </parameter>
  <parameter name="parse-version">
    <description>Parses the package version string to match the
major.minor.patch format. Then any found match is used as the replacement
string. It can be set to three different values: major, minor or patch.
If set to major only the first numeric value will be used as the
replacement (e.g. if version is 3.1.3 only 3 will be used). If set to minor
only the first and second numeric values separated by a dot will be used
(e.g. if version is 3.1~git_r125 only 3.1 will be used). If set to patch
it will reach up to the first three numeric values separated with a dots.</description>
  </parameter>
  <parameter name="replacement">
    <description>This parameter is an alternative to the package parameter,
instead to look for a package version it will just use the given string
for the regex replacement. It is mostly used to debug or test the
regex.</description>
  </parameter>
</service>
