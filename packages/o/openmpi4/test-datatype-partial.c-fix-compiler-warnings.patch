commit e74008f6c67c104f1eb59c488e2c22c0302c87e0
Author: Jeff Squyres <jsquyres@cisco.com>
Date:   Fri Nov 18 06:50:24 2022 -0500

    test/datatype/partial.c: fix compiler warnings
    
    There are a bunch of other warnings in tests, but I was recently
    working with a user in this specific test, and the warnings annoyed
    me.  So I fixed them in this test (but not other tests).
    
    Signed-off-by: Jeff Squyres <jsquyres@cisco.com>
    (cherry picked from commit 98abc08a6e2a0a4181a823c1b81a238964710240)

diff --git test/datatype/partial.c test/datatype/partial.c
index c064db7193dd..15ea0cad7800 100644
--- test/datatype/partial.c
+++ test/datatype/partial.c
@@ -5,6 +5,7 @@
  *                         reserved.
  * Copyright (c) 2018      Triad National Security, LLC. All rights
  *                         reserved.
+ * Copyright (c) 2022      Cisco Systems, Inc.  All rights reserved.
  * $COPYRIGHT$
  *
  * Additional copyrights may follow
@@ -52,7 +53,7 @@ static void show_neighborhood(double* ptr, int how_many, bool show_hex)
         printf("\n            : ");
         for( i = -how_many; i < how_many;  i++ ) {
             if( 0 == i ) printf(" <");
-            for( int j = 0; j < sizeof(double); j++ ) {
+            for( size_t j = 0; j < sizeof(double); j++ ) {
                 printf("%02x", cptr[i * sizeof(double)+j]);
             }
             if( 0 == i ) printf("> ");
@@ -71,7 +72,7 @@ static void show_neighborhood(double* ptr, int how_many, bool show_hex)
 
 int main( int argc, char* argv[] )
 {
-    opal_datatype_t* vector;
+    ompi_datatype_t* vector;
     ompi_datatype_t* base;
     uint32_t iov_count;
     size_t max_data, size, length;
@@ -88,13 +89,13 @@ int main( int argc, char* argv[] )
     ompi_datatype_create_vector(TYPE_COUNT, TYPE_BLEN, TYPE_STRIDE, MPI_DOUBLE, &base);
     ompi_datatype_create_contiguous(CONT_COUNT, base, &vector);
 
-    opal_datatype_commit( vector );
+    opal_datatype_commit(&vector->super);
 
     ompi_datatype_dump(vector);
 
-    opal_datatype_type_size(vector, &size);
-    opal_datatype_type_extent(vector, &extent);
-    opal_datatype_type_extent(base, &base_extent);
+    opal_datatype_type_size(&vector->super, &size);
+    opal_datatype_type_extent(&vector->super, &extent);
+    opal_datatype_type_extent(&base->super, &base_extent);
 
     array = (double*)malloc( extent * COUNT );
     packed = (double*)malloc( size * COUNT );
@@ -113,7 +114,7 @@ int main( int argc, char* argv[] )
      * of the buffered operation.
      */
     convertor = opal_convertor_create( opal_local_arch, 0 );
-    opal_convertor_prepare_for_recv( convertor, vector, COUNT, array );
+    opal_convertor_prepare_for_recv(convertor, &vector->super, COUNT, array);
 
     for( length = 0; length < (size * COUNT); ) {
         iov[0].iov_base = bpacked + length;
@@ -124,7 +125,8 @@ int main( int argc, char* argv[] )
         opal_convertor_unpack( convertor, iov, &iov_count, &max_data );
         length += max_data;
 
-        int idx = 0, checked = 0;
+        int idx = 0;
+        size_t checked = 0;
         for( int m = 0; m < COUNT; m++ ) {
             char* mptr = (char*)array + m * extent;
             for( int k = 0; k < CONT_COUNT; k++ ) {
