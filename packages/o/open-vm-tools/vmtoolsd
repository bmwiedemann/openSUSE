#!/bin/sh
#
#     Template SUSE system startup script for vmware-guest service/daemon
#     Copyright (C) 2008-2010  Dominique Leuenberger for openSUSE
#
#     This library is free software; you can redistribute it and/or modify it
#     under the terms of the GNU Lesser General Public License as published by
#     the Free Software Foundation; either version 2.1 of the License, or (at
#     your option) any later version.
#
#     This library is distributed in the hope that it will be useful, but
#     WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#     Lesser General Public License for more details.
#
#     You should have received a copy of the GNU Lesser General Public License
#     along with this program; if not, write to the Free Software Foundation, Inc.,
#     51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA.
#
# /etc/init.d/vmtoolsd
#
### BEGIN INIT INFO
# Provides:          vmtoolsd
# Required-Start:    $syslog $remote_fs
# Should-Start:
# Required-Stop:     $syslog $remote_fs
# Should-Stop:
# Default-Start:     3 5
# Default-Stop:      0 1 2 6
# Short-Description: VMWare Tools Daemon
# Description:       Starts the Tools Daemon for a VMWare Virtual Machine
### END INIT INFO

# Check for missing binaries (stale symlinks should not happen)
# Note: Special treatment of stop for LSB conformance
VMTOOLSD_BIN=/usr/bin/vmtoolsd
VMTOOLSUSER_BIN=/usr/bin/vmware-user
test -x $VMTOOLSD_BIN || { echo "$VMTOOLSD_BIN not installed";
	if [ "$1" = "stop" ]; then exit 0;
	else exit 5; fi; }

# The kernel module for the balloon driver changes its name in different kernel versions
KERNEL_MICRO=$(uname -r | awk -F- '{print $1}' | sed 's,2.6.,,')
case $KERNEL_MICRO in
        27|28|29|30|31|32|33)
                VMBALLOON=vmmemctl
                ;;
        34|35)
                VMBALLOON=vmware_balloon
                ;;
        *)
                VMBALLOON=vmw_balloon
                ;;
esac


. /etc/rc.status

# Reset status of this service
rc_reset

# Return values acc. to LSB for all commands but status:
# 0       - success
# 1       - generic or unspecified error
# 2       - invalid or excess argument(s)
# 3       - unimplemented feature (e.g. "reload")
# 4       - user had insufficient privileges
# 5       - program is not installed
# 6       - program is not configured
# 7       - program is not running
# 8--199  - reserved (8--99 LSB, 100--149 distrib, 150--199 appl)
#
# Note that starting an already running service, stopping
# or restarting a not-running service as well as the restart
# with force-reload (in case signaling is not supported) are
# considered a success.

case "$1" in
    start)
	echo -n "Starting vmtoolsd "
	if [ ! -d /tmp/VMwareDnD ]; then
	    mkdir -m 1777 /tmp/VMwareDnD
	fi
	if [ -x /usr/bin/vmware-vmblock-fuse ]; then
		if [ ! -d /var/run/vmblock-fuse ]; then
			mkdir -m 555 /var/run/vmblock-fuse
		fi
		/usr/bin/vmware-vmblock-fuse \
			-o subtype=vmware-vmblock,default_permissions,allow_other \
			/var/run/vmblock-fuse
	fi
	modprobe $VMBALLOON
	## Start daemon with startproc(8). If this fails
	## the return value is set appropriately by startproc.
	/sbin/startproc $VMTOOLSD_BIN -b /var/run/vmtoolsd.pid

	# Remember status and be verbose
	rc_status -v
	;;
    stop)
	echo -n "Shutting down vmtoolsd "
	## Stop daemon with killproc(8) and if this fails
	## killproc sets the return value according to LSB.

	# We need to inform the User process that we're going down.
	# Otherwise it keeps references on /var/run/vmblock-fuse/* and
	# causes issues when reloading vmblock module.
	if [ -f "$VMTOOLSUSER_BIN" ]; then
		/sbin/killproc -SIGUSR1 $VMTOOLSUSER_BIN
	fi
	/sbin/killproc -TERM $VMTOOLSD_BIN
	/bin/mountpoint -q /var/run/vmblock-fuse && umount /var/run/vmblock-fuse || :
	modprobe -r $VMBALLOON || :

	# Remember status and be verbose
	rc_status -v
	;;
    try-restart|condrestart)
	## Do a restart only if the service was active before.
	## Note: try-restart is now part of LSB (as of 1.9).
	## RH has a similar command named condrestart.
	if test "$1" = "condrestart"; then
		echo "${attn} Use try-restart ${done}(LSB)${attn} rather than condrestart ${warn}(RH)${norm}"
	fi
	$0 status
	if test $? = 0; then
		$0 restart
	else
		rc_reset	# Not running is not a failure.
	fi
	# Remember status and be quiet
	rc_status
	;;
    restart)
	## Stop the service and regardless of whether it was
	## running or not, start it again.
	$0 stop
	$0 start

	# Remember status and be quiet
	rc_status
	;;
    force-reload)
	$0 try-restart
	rc_status
	;;
    reload)
	rc_failed 3
	rc_status -v
	;;
    status)
	echo -n "Checking for service vmware-guestd "
	## Check status with checkproc(8), if process is running
	## checkproc will return with exit status 0.

	# Return value is slightly different for the status command:
	# 0 - service up and running
	# 1 - service dead, but /var/run/  pid  file exists
	# 2 - service dead, but /var/lock/ lock file exists
	# 3 - service not running (unused)
	# 4 - service status unknown :-(
	# 5--199 reserved (5--99 LSB, 100--149 distro, 150--199 appl.)

	# NOTE: checkproc returns LSB compliant status values.
	/sbin/checkproc $VMTOOLSD_BIN
	# NOTE: rc_status knows that we called this init script with
	# "status" option and adapts its messages accordingly.
	rc_status -v
	;;
    *)
	echo "Usage: $0 {start|stop|status|try-restart|restart}"
	exit 1
	;;
esac
rc_exit
