<revisionlist>
  <revision rev="1" vrev="1">
    <srcmd5>12370f99272e85188b081c11b86bba2b</srcmd5>
    <version>1.0.5</version>
    <time>1560970682</time>
    <user>dimstar_suse</user>
    <comment>New package: zxing-cpp, a C++ port of the ZXing (&quot;zebra crossing&quot;) 1D and
2D barcode parsing library.

This is an officially-sanctioned fork of the original C++ port of ZXing
(context: https://github.com/nu-book/zxing-cpp/issues/44)

This is an optional  dependency of the &quot;kitinerary&quot; package, which uses
zxing-cpp toprocess and parse barcodes from PDFs.</comment>
    <requestid>704666</requestid>
  </revision>
  <revision rev="2" vrev="2">
    <srcmd5>937f103d408bacf05e08c9225d0be780</srcmd5>
    <version>1.0.5</version>
    <time>1561049756</time>
    <user>dimstar_suse</user>
    <comment>Automatic submission by obs-autosubmit</comment>
    <requestid>710964</requestid>
  </revision>
  <revision rev="3" vrev="3">
    <srcmd5>7883365d8e8a266994244d7ebc5f6c47</srcmd5>
    <version>1.0.5</version>
    <time>1577136842</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>755234</requestid>
  </revision>
  <revision rev="4" vrev="1">
    <srcmd5>4d535ef2d1cd6d27e7d12eed8b020ff1</srcmd5>
    <version>1.1.0</version>
    <time>1598029218</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>827759</requestid>
  </revision>
  <revision rev="5" vrev="2">
    <srcmd5>dfa7f51f31f3872516a138411b9b6b5f</srcmd5>
    <version>1.1.0</version>
    <time>1600078553</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>833757</requestid>
  </revision>
  <revision rev="6" vrev="3">
    <srcmd5>80aa5d00d72e93f4e880cd0fb6a04511</srcmd5>
    <version>1.1.0</version>
    <time>1603821507</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>844053</requestid>
  </revision>
  <revision rev="7" vrev="4">
    <srcmd5>314e93f345ed0008699058e12b679419</srcmd5>
    <version>1.1.0</version>
    <time>1611068452</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>864028</requestid>
  </revision>
  <revision rev="8" vrev="1">
    <srcmd5>3438b986957324c23151a0e4cda32cd1</srcmd5>
    <version>1.1.1</version>
    <time>1613581717</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>870543</requestid>
  </revision>
  <revision rev="9" vrev="1">
    <srcmd5>f642cb78324b759f20e034f73cad371a</srcmd5>
    <version>1.2.0</version>
    <time>1636218946</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>929674</requestid>
  </revision>
  <revision rev="10" vrev="2">
    <srcmd5>131f21207fa491a4ba402b160a028007</srcmd5>
    <version>1.2.0</version>
    <time>1639685930</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>940520</requestid>
  </revision>
  <revision rev="11" vrev="3">
    <srcmd5>e7b6e8204bccb0dfadcdc1bf5ffe419c</srcmd5>
    <version>1.2.0</version>
    <time>1663764100</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>1004902</requestid>
  </revision>
  <revision rev="12" vrev="1">
    <srcmd5>4ac6480c9e0c707aaa78f46a8fb88511</srcmd5>
    <version>2.0.0</version>
    <time>1675516253</time>
    <user>dimstar_suse</user>
    <comment>- Update to version 2.0.0:
  * Switch to UTF8 based API and remove deprecated UTF16 one
    (Result::text())
  * Remove all API deprecated in 1.4
  * Adding a wrapper for iOS
  * New Aztec detector implementation to support arbitrary rotation
    and position of the symbol
  * Support multi-symbol detection in Aztec detector
  * Replace all Qt originated ECI/CharacterSet conversion code with
    a new implementation
  * Require c++17 to build library and client code
  * New DecodeHints::textMode() and Result::text(TextMode) API to
    specify how bytes are rendered into text
  * HRI (human readable interpretation) is the new default for the
    TextMode (has been for most cases before, but not all)
  * New DecodeHits::tryInvert() feature to test for inverted
    symbols (white on black background)
- Changes from version 1.4.0:
  * Note: this is an intermediary release on the way to 2.0. This
    code is (supposed to be) API compatible (via the ReadBarcode.h
    interface) with v1.3.0 but contains quite a few additional
    deprecations. It still has SO number 1, which is as wrong as it
    was for release v1.3.0 and it is not ABI compatible with 1.3
    either. 2.0 will be basically 1.4 but with all deprecated API
    removed and the final fix for #333.
  * Reader support for Micro QRCode by @corbers
  * Prepared switch from std::wstring based utf16 to std::string
    based utf8 results, use new ZX_USE_UTF8 macro to transition to
    the upcoming 2.0 API
  * Much improved 'binary' data support via new Result::bytes()
    API, see #334 for a detailed background discussion.
  * New Result::contentType() API returning information about the
    type of content (like text vs. binary, etc.)
  * Better standards conformance with respect to ECI handling, see
    Results::bytesECI()
  * Support for proper ECI handling across structured append
    symbols (see MergeStructuredAppendResults())
  * New Result::error() API with improved error handling, see also
    DecodeHints::returnErrors()
  * Removed all internal header files from the installed set, so
    only the ReadBarcode.h based APIs are supported from here on
    out
  * Removed all sample images from the 'source' distribution
    zip/tar balls (much reduced size)
  * Python read_barcode returns None if no symbol was found (might
    break existing code if not checked for None before)
- Changes from version 1.3.0:
  * Multi-barcode reading with the new std::vector&lt;Result&gt;
    ReadBardcodes(...) function. Does not work for Aztec,
    DataMatrix and Maxicode, yet.
  * Multi-resolution scanning that can automatically downscale the
    input to substantially increase the detection rate on high
    resolution scans, see DecodeHints::tryDownscale, currently only
    enabled in the ReadBardcodes function
  * New Result::symbologyIdentifier property
  * Updated and improved android wrapper
- Drop patches fixed upstream:
  * 269.patch
  * 0001-test-update-to-libfmt-v9.0.0.patch
  * cmake-check-system-first.patch
- Bump sover to 3 following upstream changes. (forwarded request 1061067 from iznogood)</comment>
    <requestid>1061072</requestid>
  </revision>
  <revision rev="13" vrev="2">
    <srcmd5>354142c687f155e504703ddab8d3f65d</srcmd5>
    <version>2.0.0</version>
    <time>1682522657</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>1082701</requestid>
  </revision>
  <revision rev="14" vrev="3">
    <srcmd5>9b98fe4bd044df3bc8d3b1dbe94ce385</srcmd5>
    <version>2.0.0</version>
    <time>1691674392</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>1103217</requestid>
  </revision>
  <revision rev="15" vrev="1">
    <srcmd5>e69af3b704e5751c15e83c074543624f</srcmd5>
    <version>2.1.0</version>
    <time>1696963920</time>
    <user>anag+factory</user>
    <comment></comment>
    <requestid>1116429</requestid>
  </revision>
  <revision rev="16" vrev="2">
    <srcmd5>1e566283e05a2c6965ace3931ddbf451</srcmd5>
    <version>2.1.0</version>
    <time>1701462286</time>
    <user>anag+factory</user>
    <comment></comment>
    <requestid>1130018</requestid>
  </revision>
</revisionlist>
