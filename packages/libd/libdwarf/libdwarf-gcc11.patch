From a6d8638c2089c42a6d00e375859b84feea309132 Mon Sep 17 00:00:00 2001
From: David Anderson <davea42@linuxmail.org>
Date: Tue, 15 Jun 2021 16:05:59 -0700
Subject: [PATCH] dwarf_formudata() now returns any constant including
 non-negative signed constant values. Negative signed constant values must be
 accessed via dwarf_formsdata() as always. 	modified:  
 src/lib/libdwarf/libdwarf/dwarf_debug_names.c 	modified:  
 src/lib/libdwarf/libdwarf/dwarf_errmsg_list.h 	modified:  
 src/lib/libdwarf/libdwarf/dwarf_form.c 	modified:   src/lib/libdwarf/dwarf_opaque.h 
 modified:   src/lib/libdwarf/libdwarf/libdwarf.h

---
 src/lib/libdwarf/libdwarf/dwarf_debug_names.c |  2 +-
 src/lib/libdwarf/libdwarf/dwarf_errmsg_list.h |  3 +++
 src/lib/libdwarf/libdwarf/dwarf_form.c        | 21 ++++++++++++++++++---
 src/lib/libdwarf/libdwarf/dwarf_opaque.h      |  1 +
 src/lib/libdwarf/libdwarf/libdwarf.h          |  4 +++-
 5 files changed, 26 insertions(+), 5 deletions(-)

Index: libdwarf-20210528/libdwarf/dwarf_debug_names.c
===================================================================
--- libdwarf-20210528.orig/libdwarf/dwarf_debug_names.c
+++ libdwarf-20210528/libdwarf/dwarf_debug_names.c
@@ -1319,7 +1319,7 @@ int dwarf_debugnames_entrypool_values(Dw
         } else if (_dwarf_allow_formudata(form)) {
             Dwarf_Unsigned val = 0;
             Dwarf_Unsigned bytesread = 0;
-            res = _dwarf_formudata_internal(dbg,form,poolptr,
+            res = _dwarf_formudata_internal(dbg,0,form,poolptr,
                 endpool,&val,&bytesread,error);
             if (res != DW_DLV_OK) {
                 return res;
Index: libdwarf-20210528/libdwarf/dwarf_errmsg_list.h
===================================================================
--- libdwarf-20210528.orig/libdwarf/dwarf_errmsg_list.h
+++ libdwarf-20210528/libdwarf/dwarf_errmsg_list.h
@@ -639,5 +639,8 @@ const char *_dwarf_errmsgs[] = {
     " Corrupt data.",
 "DW_DLE_NEGATIVE_SIZE(482) A size < 0 "
     "(from DW_FORM_implicit_const) is not appropriate",
+"DW_DLE_UDATA_VALUE_NEGATIVE(483) Reading a negative value from "
+    " from dwarf_formudata() is not allowed.",
+    
 };
 #endif /* DWARF_ERRMSG_LIST_H */
Index: libdwarf-20210528/libdwarf/dwarf_form.c
===================================================================
--- libdwarf-20210528.orig/libdwarf/dwarf_form.c
+++ libdwarf-20210528/libdwarf/dwarf_form.c
@@ -39,6 +39,7 @@
 #include "dwarf_die_deliv.h"
 #include "dwarf_str_offsets.h"
 #include "dwarfstring.h"
+#include "libdwarf.h"
 
 #define TRUE 1
 #define FALSE 0
@@ -1241,6 +1243,7 @@ _dwarf_allow_formudata(unsigned form)
 
 int
 _dwarf_formudata_internal(Dwarf_Debug dbg,
+    Dwarf_Attribute attr,
     unsigned form,
     Dwarf_Byte_Ptr data,
     Dwarf_Byte_Ptr section_end,
@@ -1302,12 +1305,25 @@ _dwarf_formudata_internal(Dwarf_Debug db
         *bytes_read = leblen;
         return DW_DLV_OK;
     }
-        /*  IRIX bug 583450. We do not allow reading
-            sdata from a udata
-            value. Caller can retry, calling sdata */
+   /*  IRIX bug 583450. We do not allow reading
+       sdata from a udata
+       value. Caller can retry, calling sdata */
     default:
         break;
     }
+    if (attr) {
+ 
+        int res = 0;
+        Dwarf_Signed s = 0;
+        res = dwarf_formsdata(attr,&s,error);
+        if (res != DW_DLV_OK) {
+            return res;
+        }
+        if (s < 0 ) {
+            _dwarf_error(dbg, error, DW_DLE_UDATA_VALUE_NEGATIVE);
+            return DW_DLV_ERROR;
+        }
+    }
     generate_form_error(dbg,error,form,
         DW_DLE_ATTR_FORM_BAD,
         "DW_DLE_ATTR_FORM_BAD",
@@ -1335,6 +1351,7 @@ dwarf_formudata(Dwarf_Attribute attr,
     form = attr->ar_attribute_form;
 
     res = _dwarf_formudata_internal(dbg,
+        attr,
         form, data, section_end, return_uval,
         &bytes_read, error);
     return res;
Index: libdwarf-20210528/libdwarf/dwarf_opaque.h
===================================================================
--- libdwarf-20210528.orig/libdwarf/dwarf_opaque.h
+++ libdwarf-20210528/libdwarf/dwarf_opaque.h
@@ -1075,6 +1075,7 @@ void _dwarf_create_address_size_dwarf_er
 
 extern Dwarf_Bool _dwarf_allow_formudata(unsigned form);
 extern int _dwarf_formudata_internal(Dwarf_Debug dbg,
+    Dwarf_Attribute attr,
     unsigned form,
     Dwarf_Byte_Ptr data,
     Dwarf_Byte_Ptr section_end,
Index: libdwarf-20210528/libdwarf/libdwarf.h
===================================================================
--- libdwarf-20210528.orig/libdwarf/libdwarf.h.in
+++ libdwarf-20210528/libdwarf/libdwarf.h.in
@@ -1461,9 +1461,11 @@ struct Dwarf_Obj_Access_Interface_s {
 #define DW_DLE_SIGNATURE_MISMATCH              480
 #define DW_DLE_MACRO_VERSION_ERROR             481
 #define DW_DLE_NEGATIVE_SIZE                   482
+#define DW_DLE_NEGATIVE_SIZE                   482
+#define DW_DLE_UDATA_VALUE_NEGATIVE            483
 
     /* LAST MUST EQUAL LAST ERROR NUMBER */
-#define DW_DLE_LAST        482
+#define DW_DLE_LAST        483
 
 #define DW_DLE_LO_USER     0x10000
 
