-------------------------------------------------------------------
Sat Apr 13 20:02:13 UTC 2019 - Jan Engelhardt <jengelh@inai.de>

- Ensure neutrality of descriptions.

-------------------------------------------------------------------
Thu May 17 09:54:54 UTC 2018 - bwiedemann@suse.com

- Add bzr-2.7.0-ssh_hostnames-lp1710979 to avoid code execution
  (boo#1058214, CVE-2017-14176)

-------------------------------------------------------------------
Sat May 12 13:34:22 UTC 2018 - cornelis@solcon.nl

- Add python-2_7_13.patch to fix boo#1020047 (lp#1644003)

-------------------------------------------------------------------
Sun Aug 13 19:42:48 UTC 2017 - tchvatal@suse.com

- Fix bash completion install dir to be in %_datadir bsc#856514
- Cleanup with spec-cleaner and remove sle11 code as pkg builds only
  on newer distros anyway
- Add -fno-strict-aliasing to the cflags

-------------------------------------------------------------------
Wed Dec 14 05:24:51 UTC 2016 - jacobwinski@gmail.com

- Update to version 2.7.0:
  * This a bugfix release over the 2.6 series focusing on test issues
    triggered by various python 2.7 updates.
  * This release marks the start of a new long-term-stable series.

-------------------------------------------------------------------
Fri Apr  3 06:43:54 UTC 2015 - mpluskal@suse.com

- Add gpg signature

-------------------------------------------------------------------
Thu Dec 11 12:16:53 UTC 2014 - olaf@aepfle.de

- Remove timestamp from docs to reduce buildcompare noise:
  bzr-doc-timestamp.patch

-------------------------------------------------------------------
Mon Oct  7 14:17:57 UTC 2013 - tchvatal@suse.com

- Version bump to 2.6.0:
  * This release marks the start of a new long-term-stable series. From here, we
    will only make bugfix releases on the 2.6 series (2.6.1, etc), while 2.7
    will become our new development series.
  * This is a bugfix and polish release over the 2.4 series, with a large number
    of bugs fixed (~170 for the 2.5 series alone). The 2.5 series provides a
    faster smart protocol implementation for many operations, basic support for
    colocated branches. We have started translating bzr with the 2.5 series:
    https://translations.launchpad.net/bzr, more than 20 languages have already
    been registered but these are the early days, contributions welcome.
  * Only a few bugfixes have been included since 2.5b6 so all known fixed bugs
    are included here.

-------------------------------------------------------------------
Mon Dec 10 10:51:32 UTC 2012 - saschpe@suse.de

- Add requires on python-xml

-------------------------------------------------------------------
Fri Dec  7 09:24:48 UTC 2012 - saschpe@suse.de

- Drop superfluous locales to fix SLES build

-------------------------------------------------------------------
Thu Dec  6 13:43:02 UTC 2012 - saschpe@suse.de

- Update to version 2.5.1:
  + Connecting with HTTPS via HTTP now correctly uses the host name of the
    destination rather than the proxy when checking certificates.
  + Fixed merge tool availability checking and invocation to search the
    Windows App Path registry in addition to the PATH.
  + Fixed problem with getting errors about failing to open /dev/tty when using
    Bazaar Explorer to sign commits.
  + Fix UnicodeEncodeError when translated progress task messages contain
    non-ascii text.
  + Make sure configuration options can provide their own help topic.
- Changes from version 2.5.0:
  + The names of colocated branches are used as branch nicks if no nick is
    specified.
  + Show locks in ``bzr info`` on control directories without a
    repository.
  + Disable ssl certificate verification on osx and windows until a native
    access to the the root certificates is provided there.
- Don't install locales into /usr/share/share, /usr/share is enough
- Split out lang sub-package
- Build with Cython to have a superfast bzr binary
- Split out test sub-package

-------------------------------------------------------------------
Fri Dec  9 10:12:22 UTC 2011 - coolo@suse.com

- setup.py says it's GPL-2.0

-------------------------------------------------------------------
Sat Sep 17 21:13:25 UTC 2011 - jengelh@medozas.de

- Remove redundant tags/sections from specfile

-------------------------------------------------------------------
Fri Sep  9 10:56:35 UTC 2011 - jriddell@ubuntu.com

- Update to version 2.4.1
* ``config.LocationMatcher`` properly excludes unrelated sections.
  (Vincent Ladeuil, #829237)
* ``dirstate.fdatasync`` and ``repository.fdatasync`` can now properly be
  disabled. (Vincent Ladeuil, #824513)
* Disable ``os.fsync`` and ``os.fdatasync`` by default when running
  ``bzr selftest``. You can use ``--sync`` to re-enable them.
  (John Arbash Meinel, #837293)
* Fix i18n use when no environment variables are set. (Jelmer Vernooij, #810701)
* Avoid UnicodeDecode error when reporting EINVAL from transports.
  (IWATA Hidetaka, #829237)

-------------------------------------------------------------------
Wed Sep  7 14:07:04 UTC 2011 - jriddell@ubuntu.com

- Update to version 2.4.0
* New command ``verify-signatures`` to check if all commits or specified commits
  have digital signatures from trusted keys.  Requires python-gpgme to be
  installed.
* New option ``--signatures`` for ``bzr log`` to display digital signature
  verification results for each commit.
* Config option acceptable_keys to list which GPG keys are verified as trusted.
* Config option validate_signatures_in_log to always show signatures in 
  ``bzr log``.
* Hooks have been added for config stacks: ``get``, ``set`` and ``remove``
  are called when an option is respectively read, modified or deleted. Also
  added ``load`` and ``save`` hooks for config stores, called when the
  stores are loaded or saved.  (Vincent Ladeuil)
* New hook server_exception in bzrlib.smart.server to catch any
  exception caused while running bzr serve.
  (Jonathan Riddell, #274578)
* New hook set_commit_message in bzrlib.msgeditor to set a commit message
  and revision properties.  (Jonathan Riddell, #274578)
* Support ``-S`` as an alias for ``--short`` for the ``log`` and
  ``missing`` commands. (Martin von Gagern, #38655)
* The text compressor used for 2a repositories now has a tweakable
  parameter that can be set in bazaar.conf.
  ``bzr.groupcompress.max_entries_per_source`` default of 65536.
  When doing compression, we build up an index of locations to match
  against. Setting this higher will result in slightly better compression,
  at a cost of more memory. Note that a value of 65k represents fully
  sampling a 1MB file. So this only has an effect when compressing texts
  larger than N*16 bytes. (John Arbash Meinel, #602614)
* ``bzr commit`` now supports a ``--lossy`` argument that can be used
  to discard any data that can not be natively represented when committing
  to a foreign VCS. (Jelmer Vernooij, #587721)
* Added ``changelog_merge`` plugin for merging changes to ``Changelog`` files
  in GNU format.  See ``bzr help changelog_merge`` for details.
  (Andrew Bennetts)  
* Configuration options can now use references to other options in the same
  file by enclosing them with curly brackets (``{other_opt}``). This makes it
  possible to use, for example,
  ``push_location=lp:~vila/bzr/config-{nickname}`` in ``branch.conf`` when
  using a loom. During the beta period, the default behaviour is to disable
  this feature. It can be activated by declaring ``bzr.config.expand = True``
  in ``bazaar.conf``. (Vincent Ladeuil)
* External merge tools can now be configured in bazaar.conf. See
  ``bzr help configuration`` for more information.  (Gordon Tyler, #489915)
* The ``lp:`` directory service now supports Launchpad's QA staging.
  (Jelmer Vernooij, #667483)
* Add --no-tree option to 'bzr push' and 'bzr init' for creating a
  new or mirrored branch without working trees.
  (Matthew Gordon, #506730
* ``bzr config`` is a new command that displays the configuration options for
  a given directory. It accepts a glob to match against multiple options at
  once. It can also be used to set or delete a configuration option in any
  configuration file. (Vincent Ladeuil)
* New shortcut URL schemes ``ubuntu:`` and ``debianlp:`` access source
  branches on Launchpad.  E.g. ``bzr branch ubuntu:foo`` gives you the source
  branch for project ``foo`` in the current distroseries for Ubuntu while
  ``bzr branch debianlp:lenny/foo`` gives you the source branch (on Launchpad)
  for project ``foo`` in Debian Lenny.
  (Barry Warsaw, #609186)
* Provide a configuration option "default_format" that controls the
  default format for new branches created with ``bzr init``.
  (Neil Martinsen-Burrell, #484101)
* Add ``mainline`` revision specifier, which selects the revision that
  merged a specified revision into the mainline.  (Aaron Bentley)
* Add ``annotate`` revision specifier, which selects the revision that
  introduced a specified line of a file.  (Aaron Bentley)
* Add ``-Dmem_dump`` debug flag, which uses meliae to dump memory to 
  a file upon an out of memory error.
  (Karl Bielefeldt, #551391)
* ``bzr status`` now displays a summary of existing shelves after
  the other status information. This is done using a ``post_status``
  hook.
  (Parth Malwankar, #403687)
* GNU lsh is now a supported lsh client; just set BZR_SSH to 'lsh'.
  Also, bzr will recognize if the 'ssh' comand is a symlink to lsh.
  (Matthew Gordon, #374700)
* The ``pull`` and ``update`` commands now take a ``--show-base``
  option that, in the case of conflicts, shows the base revision text.
  (Rory Yorke,  #202374)
* Added ``pre_status`` and ``post_status`` hooks. This allows plugins
  to register custom handlers which will be invoked before/after the
  standard status output is displayed. (Parth Malwankar)
* ``bzr break-lock --config [location]`` can now break config files
  locks. (Vincent Ladeuil, #525571)
* ``bzrlib.config.LockableConfig`` is a base class for config files that
  needs to be protected against multiple writers. All methods that
  change a configuration variable value must be decorated with
  @needs_write_lock (set_option() for example).
  (Vincent Ladeuil,  #525571)
* The ``lp:`` prefix will now use your known username (from
  ``bzr launchpad-login``) to expand ``~`` to your username.  For example:
  ``bzr launchpad-login user && bzr push lp:~/project/branch`` will now
  push to ``lp:~user/project/branch``.  (John Arbash Meinel)
* New development format ``development8-subtree`` which is similar to the 
  ``2a`` format and adds subtree support. (Jelmer Vernooij)
* Support ``--directory`` option for a number of additional commands:
  conflicts, merge-directive, missing, resolve, shelve, switch,
  unshelve, whoami. (Martin von Gagern, #527878)
* ``bzr commit`` accepts ``-p`` (for "patch") as a shorter name for
  ``--show-diff``.
  (Parth Malwankar, #571467)
* ``bzr ignore`` now supports a ``--default-rules`` option that displays
  the default ignore rules used by bzr. The flag ``--old-default-rules``
  is no longer supported by ``ignore``.
  (Parth Malwankar, #538703)
* ``bzr pack`` now supports a ``--clean-obsolete-packs`` option that
  can save disk space by deleting obsolete pack files created during the
  pack operation.
  (Parth Malwankar, #304320)
* New command line option ``--authors`` to ``bzr log`` allows users to
  select which of the apparent authors and committer should be
  included in the log. Defaults depend on format. (Martin von Gagern, #513322)
* Support ``--directory`` option for a number of additional commands:
  added, annotate, bind, cat, cat-revision, clean-tree, deleted,
  export, ignore, ignored, lookup-revision, ls, modified, nick,
  re-sign, unbind, unknowns.
  (Martin von Gagern, #527878)
* The bash_completion plugin from the bzr-bash-completion project has
  been merged into the tree. It provides a bash-completion command and
  replaces the outdated ``contrib/bash/bzr`` script with a version
  using the plugin. (Martin von Gagern, #560030)
* A new transport based on GIO (the Gnome I/O library) provides access to
  Samba shares, WebDAV using gio+smb and gio+dav. It is also possible to
  use gio for some already existing transport methods as gio+file,
  gio+sftp, gio+ftp. 
  (Mattias Eriksson)
* ``bzr diff`` now supports a --format option, which can be used to 
  select alternative diff formats. (Jelmer Vernooij, #555994)
* Added ``bzr remove-branch`` command that can remove a local or remote 
  branch. (Jelmer Vernooij, #276295)
* ``bzr export`` now takes an optional argument ``--per-file-timestamps``
  to set file mtimes to the last timestamp of the last revision in which
  they were changed rather than the current time. (Jelmer Vernooij)
* If the Apport crash-reporting tool is available, bzr crashes are now
  stored into the ``/var/crash`` apport spool directory, and the user is
  invited to report them to the developers from there, either
  automatically or by running ``apport-bug``.  No information is sent
  without specific permission from the user.  (Martin Pool, #515052)
* Parsing of command lines, for example in ``diff --using``, no longer
  treats backslash as an escape character on Windows.
  (Gordon Tyler, #392428)
* Plugins can be disabled by defining ``BZR_DISABLE_PLUGINS`` as
  a list of plugin names separated by ':' (';' on windows).
  (Vincent Ladeuil, #411413)
* Plugins can be loaded from arbitrary locations by defining
  ``BZR_PLUGINS_AT`` as a list of name@path separated by ':' (';' on
  windows). This takes precedence over ``BZR_PLUGIN_PATH`` for the
  specified plugins. This is targeted at plugin developers for punctual
  needs and *not* intended to replace ``BZR_PLUGIN_PATH``.  
  (Vincent Ladeuil, #82693)
* Tag names can now be determined automatically by ``automatic_tag_name`` 
  hooks on ``Branch`` if they are not specified on the command line.
  (Jelmer Vernooij)
* Tree-shape conflicts can be resolved by providing ``--take-this`` and
  ``--take-other`` to the ``bzr resolve`` command. Just marking the conflict
  as resolved is still accessible via the ``--done`` default action.
  (Vincent Ladeuil)
* Merges can be proposed on Launchpad with the new lp-propose-merge command.
  (Aaron Bentley, Jonathan Lange)
* Add bug information to log output when available.
  (Neil Martinsen-Burrell, Guillermo Gonzalez, #251729)
* Added ``merge_file_content`` hook point to ``Merger``, allowing plugins
  to register custom merge logic, e.g. to provide smarter merging for
  particular files.
* Bazaar now includes the ``news_merge`` plugin.  It is disabled by
  default, to enable it add a ``news_merge_files`` option to your
  configuration.  Consult ``bzr help news_merge`` for more information.
  (Andrew Bennetts)
* ``bzr branch`` now takes a ``--bind`` option. This lets you
  branch and bind all in one command. (Ian Clatworthy)
* ``bzr switch`` now takes a ``--revision`` option, to allow switching to
  a specific revision of a branch. (Daniel Watkins, #183559)
* ``bzr unshelve --preview`` can now be used to show how a patch on the
  shelf would be applied to the working tree.
  (Guilherme Salgado, #308122)
* ``bzr update`` now takes a ``--revision`` argument. This lets you
  change the revision of the working tree to any revision in the
  ancestry of the current or master branch. (Matthieu Moy, Mark Hammond,
  Martin Pool, #45719)
* ``-Dbytes`` can now be used to display the total number of bytes
  transferred for the current command. This information is always logged
  to ``.bzr.log`` for later inspection. (John Arbash Meinel)
* New ignore patterns.  Patterns prefixed with '!' are exceptions to 
  ignore patterns and take precedence over regular ignores.  Such 
  exceptions are used to specify files that should be versioned which 
  would otherwise be ignored.  Patterns prefixed with '!!' act as regular 
  ignore patterns, but have highest precedence, even over the '!' 
  exception patterns. (John Whitley, #428031)
* The ``supress_warnings`` configuration option has been introduced to disable
  various warnings (it currently only supports the ``format_deprecation``
  warning). The new option can be set in any of the following locations:
  ``bazaar.conf``, ``locations.conf`` and/or ``branch.conf``.
  (Ted Gould, Matthew Fuller, Vincent Ladeuil)
* ``bzr commit`` now has a ``--commit-time`` option.
  (Alexander Sack, #459276)
* ``-Dhpss`` now increases logging done when run on the bzr server,
  similarly to how it works on the client. (John Arbash Meinel)
* New option ``bzr unshelve --keep`` applies the changes and leaves them
  on the shelf.  (Martin Pool, Oscar Fuentes, #492091)
* The ``BZR_COLUMNS`` envrionment variable can be set to force bzr to
  respect a given terminal width. This can be useful when output is
  redirected or in obscure cases where the default value is not
  appropriate. Pagers can use it to get a better control of the line
  lengths. 
  (Vincent Ladeuil)
* The new command ``bzr lp-mirror`` will request that Launchpad update its
  mirror of a local branch. This command will only function if launchpadlib
  is installed.
  (Jonathan Lange)
* Users can define a shelve editor to provide shelf functionality at a
  granularity finer than per-patch-hunk. (Aaron Bentley)
* Bazaar can now send mail through Apple OS X Mail.app. 
  (Brian de Alwis)
* ``bzr+ssh`` and ``bzr`` paths can now be relative to home directories
  specified in the URL.  Paths starting with a path segment of ``~`` are
  relative to the home directory of the user running the server, and paths
  starting with ``~user`` are relative to the home directory of the named
  user.
* Extensions can now be compiled if either Cython or Pyrex is available.
  Currently Pyrex is preferred, but that may change in the future.
  (Arkanes)
* Give more control on BZR_PLUGIN_PATH by providing a way to refer to or
  disable the user, site and core plugin directories.
  (Vincent Ladeuil, #412930, #316192, #145612)

-------------------------------------------------------------------
Wed Mar 24 15:37:04 UTC 2010 - lenz@grimmer.com
- Update to version 2.0.5
* Avoid ``malloc(0)`` in ``patiencediff``, which is non-portable.
  (Martin Pool, #331095)
* Concurrent autopacking is more resilient to already-renamed pack files.
  If we find that a file we are about to obsolete is already obsoleted, we
  do not try to rename it, and we leave the file in ``obsolete_packs``.
  The code is also fault tolerant if a file goes missing, assuming that
  another process already removed the file.
  (John Arbash Meinel, Gareth White, #507557)
* Cope with the lockdir ``held/info`` file being empty, which seems to
  happen fairly often if the process is suddenly interrupted while taking
  a lock. (Martin Pool, #185103)
* Give the warning about potentially slow cross-format fetches much
  earlier on in the fetch operation. Don't show this message during
  upgrades, and show the correct format indication for remote
  repositories. (Martin Pool, #456077, #515356, #513157)
* Handle renames correctly when there are files or directories that
  differ only in case. (Chris Jones, Martin Pool, #368931)
* If ``bzr push --create-prefix`` triggers an unexpected ``NoSuchFile``
  error, report that error rather than failing with an unhelpful
  ``UnboundLocalError``. (Andrew Bennetts, #423563)
* Running ``bzr`` command without any arguments now shows bzr
  version number along with rest of the help text.
  (Parth Malwankar, #369501)
* Use osutils.O_NOINHERIT for some files on win32 to avoid PermissionDenied
  errors.  (Inada Naoki, #524560)
- Fixed various rpmlint warnings (hard-linked duplicate files,
  removed shebangs from non-executable scripts)
- Install bzr bash completion functions

-------------------------------------------------------------------
Fri Jan 29 09:12:44 UTC 2010 - lenz@grimmer.com

- Update to version 2.0.4
* bzr annotate on another branch with -r branch:... no longer fails with an
  ObjectNotLocked error. (Andrew Bennetts, #496590)
* bzr export dir now requests all file content as a record stream, rather than
  requsting the file content one file-at-a-time. This can make exporting over the
  network significantly faster (54min => 9min in one case). (John Arbash Meinel,
  #343218)
* bzr serve no longer slowly leaks memory. The compiled
  bzrlib.bencode.Encoder() class was using __del__ to cleanup and free resources,
  and it should have been using __dealloc__. This will likely have an impact on
  any other process that is serving for an extended period of time.
  (John Arbash Meinel, #494406)
* Check for SIGINT (Ctrl-C) and other signals immediately if readdir returns
  EINTR by calling PyErr_CheckSignals. This affected the optional _readdir_pyx
  extension. (Andrew Bennetts, # 495023)
* Concurrent autopacks will no longer lose a newly created pack file. There was
  a race condition, where if the reload happened at the right time, the second
  packer would forget the name of the newly added pack file. (John Arbash Meinel,
  Gareth White, #507566)
* Give a clearer message if the lockdir disappears after being apparently
  successfully taken. (Martin Pool, #498378)
* Give a warning when fetching between repositories (local or remote) with
  sufficiently different formats that the content will need to be serialized (ie
  InterDifferingSerializer or inventory-deltas), so the user has a clue that
  upgrading could make it faster. (Martin Pool, #456077)
* If we fail to open ~/.bzr.log write a clear message to stderr rather than
  using warning(). The log file is opened before logging is set up, and it leads
  to very confusing: ‘no handlers for “bzr”’ messages for users, rather than
  something nicer. (John Arbash Meinel, Barry Warsaw, #503886)
* Refuse to build with any Pyrex 0.9.4 release, as they have known bugs.
  (Martin Pool, John Arbash Meinel, #449372)
* setup.py bdist_rpm now properly finds extra files needed for the build.
  (there is still the distutils bug http://bugs.python.org/issue644744)
  (Joe Julian, #175839)
* The 2a format wasn’t properly restarting autopacks when something changed
  underneath it (like another autopack). Now concurrent autopackers will properly
  succeed. (John Arbash Meinel, #495000)
* TreeTransform can now handle when a delta says that the file id for the tree
  root changes. Rather than trying to rename your working directory, or failing
  early saying that you can’t have multiple tree roots. This also fixes revert,
  update, and pull when the root id changes. (John Arbash Meinel, #494269,
  #504390)
* _update_current_block no longer suppresses exceptions, so ^C at just the
  right time will get propagated, rather than silently failing to move the block
  pointer. (John Arbash Meinel, Gareth White, #495023)

-------------------------------------------------------------------
Thu Dec 31 15:53:03 UTC 2009 - lenz@grimmer.com

- Update to version 2.0.3
* bzr push --use-existing-dir no longer crashes if the directory exists but
  contains an invalid .bzr directory. (Andrew Bennetts, #423563)
* Content filters are now applied correctly after pull, merge and switch.
  (Ian Clatworthy, #385879)
* Fix a potential segfault in the groupcompress hash map handling code. When
  inserting new entries, if the final hash bucket was empty, we could end up
  trying to access if (last_entry+1)->ptr == NULL. (John Arbash Meinel, #490228)
* Improve “Binary files differ” hunk handling. (Aaron Bentley, #436325)

-------------------------------------------------------------------
Mon Dec 14 16:50:15 UTC 2009 - lenz@grimmer.com

- Update to version 2.0.2
* Avoid "NoneType has no attribute st_mode" error when files disappear
  from a directory while it's being read.  (Martin Pool, #446033)
* Content filters are now applied correctly after revert.
  (Ian Clatworthy)
* Diff parsing handles "Binary files differ" hunks.  (Aaron Bentley, #436325)
* Fetching from stacked pre-2a repository via a smart server no longer
  fails intermittently with "second push failed to complete".
  (Andrew Bennetts, #437626)
* Fix typos left after test_selftest refactoring.
  (Vincent Ladeuil, Matt Nordhoff, #461149)
* Fixed ``ObjectNotLocked`` errors during ``bzr log -r NNN somefile``.
  (Andrew Bennetts, #445171)
* PreviewTree file names are not limited by the encoding of the temp
  directory's filesystem. (Aaron Bentley, #436794)
* ``bzr log`` now read-locks branches exactly once, so makes better use of
  data caches.  (Andrew Bennetts)

-------------------------------------------------------------------
Thu Oct 29 09:09:07 UTC 2009 - lenz@grimmer.com

- Update to version 2.0.1
* ``bzr add`` in a tree that has files with ``\r`` or ``\n`` in the
  filename will issue a warning and skip over those files.
  (Robert Collins, #3918)
* bzr will attempt to authenticate with SSH servers that support
  ``keyboard-interactive`` auth but not ``password`` auth when using
  Paramiko.   (Andrew Bennetts, #433846)
* Fixed fetches from a stacked branch on a smart server that were failing
  with some combinations of remote and local formats.
  (Andrew Bennetts, #427736)
* Fixed ``ObjectNotLocked`` errors when doing some log and diff operations
  on branches via a smart server.  (Andrew Bennetts, #389413)
* Handle things like ``bzr add foo`` and ``bzr rm foo`` when the tree is
  at the root of a drive.
  (John Arbash Meinel, Jason Spashett, #322807)
* Hide deprecation warnings for 'final' releases for python2.6.
  (John Arbash Meinel, #440062)
* Improve the time for ``bzr log DIR`` for 2a format repositories.
  (John Arbash Meinel, #374730)
* Make sure that we unlock the tree if we fail to create a TreeTransform
  object when doing a merge, and there is limbo, or pending-deletions
  directory.  (Gary van der Merwe, #427773)
* Occasional IndexError on renamed files have been fixed.
  (Robert Collins, #403322)
* Retrieving file text or mtime from a _PreviewTree has good performance when
  there are many changes.  (Aaron Bentley)
* The CHK index pages now use an unlimited cache size.
  (John Arbash Meinel, #402623)
* When a file kind becomes unversionable after being added, a sensible
  error will be shown instead of a traceback. (Robert Collins, #438569)

-------------------------------------------------------------------
Wed Oct  7 12:24:04 UTC 2009 - lenz@grimmer.com

- Update to version 2.0.0
* 2a repository format is now the default

-------------------------------------------------------------------
Mon Sep  7 11:27:26 UTC 2009 - lenz@grimmer.com

- Update to version 1.18
* bzr merge --interactive applies a user-selected portion of the merge
* bzr reconfigure now takes options --stacked-on URL and --unstacked to
  change stacking of a branch
* Bug fixes - see
  http://doc.bazaar-vcs.org/bzr.1.18/en/release-notes/NEWS.html#bzr-1-18

-------------------------------------------------------------------
Tue Jul 21 00:59:20 CEST 2009 - lenz@grimmer.com

- Update to version 1.17
* greatly reduced memory consumption during commits
* faster ls
* faster annotate
* faster network operations if you're specifying a revision number
* final destruction of those annoying progress bar artifacts.

-------------------------------------------------------------------
Wed Oct 29 17:44:03 CET 2008 - kssingvo@suse.de

- upgrade to version 1.8, which fixes many Python 2.6 issues (bnc#439687,
  bnc#433565, bnc#425644):
  * many bugfixes and improves, see included NEWS file for details
  * file paths fixes in handling the merge algorithm
  * fix in "bzr rm"
  * fix in b-tree indexing code
  * fix in RemoteBranch.get_stacked_on_url rpc
- removed previous patches as they are now in upstream code

-------------------------------------------------------------------
Tue Sep 23 17:17:19 CEST 2008 - kssingvo@suse.de

- fixed issue introduced with switch to python-2.6 (bnc#425644)

-------------------------------------------------------------------
Wed Sep 10 11:31:52 CEST 2008 - kssingvo@suse.de

- upgrade to version 1.6.1:
  * many bugfixes and changes, see included NEWS file for details
  * A couple regressions were found in the 1.6 release.
  * There was a performance issue when using "bzr+ssh" to branch
    large repositories, and some problems with stacking and "rich-root"
    capable repositories.
  * New features like Stacked Branches, improved weave merge, and an
    updated server protocol (now on v3) which will allow for better
    cross version compatibility.
  * Deprecated Knit format repositories, and recommended that users
    upgrade them, there is no continued support reading and writing
    them for the forseeable future, but there will be no tuning them
    for performance as pack repositories have proven to be better at
    scaling.
  * Also bundles TortoiseBzr in the standalone Windows installer.

-------------------------------------------------------------------
Mon Jul  7 19:03:28 CEST 2008 - kssingvo@suse.de

- upgrade to version 1.5:
  * many bugfixes and changes, see included NEWS file for details
  * Diff now handles revision specs like "branch:" and "submit:"
    more efficiently.
  * Pull completes much faster when there is nothing to pull.
  * The set_rh branch hook is now deprecated.
  * Added start_commit hook for mutable trees.
  * status now accepts --no-pending to show the status without
    listing pending merges, which speeds up the command a lot on
    large histories.
  * Reconfigure can convert a branch to be standalone or to use a
    shared repository.
  * The smart protocol now has support for setting branches'
    revision info directly.
  * and many more

-------------------------------------------------------------------
Thu Apr 17 11:23:47 CEST 2008 - kssingvo@suse.de

- upgrade to version 1.3.1:
  * bugfix for crash when fetching revisions from a knit to pack
    repository or vice versa using bzr://

-------------------------------------------------------------------
Wed Mar 26 16:24:21 CET 2008 - kssingvo@suse.de

- upgrade to version 1.3:
  * many bugfixes and changes, see included NEWS file for details
  * list of major changes, new features and improvements:
    - The backup directory created by "upgrade" is now called
      "backup.bzr", not ".bzr.backup"
    - A new repository format 'development' has been added
    - BZR_LOG environment variable controls location of .bzr.log
      trace file.
    - Version number is now shown as "1.2" or "1.2pr2", without
      zeroed or missing final fields
    - "branch" and "checkout" can hard-link working tree files,
      which is faster and saves space.
    - "bzr send" will now also look at the "child_submit_to" setting
      in the submit branch to determine the email address to send to.
    - "push" has a "--revision" option, to specify what revision to
      push up to.
    - Speed up operations that look at the revision graph (such as
      "bzr log").
    - Autopacking no longer holds the full set of inventory lines
      in memory while copying. 
    - Fixed problem connecting to "bzr+https://" servers
    - Redirecting the output from "bzr merge" now works.

-------------------------------------------------------------------
Wed Mar 12 13:43:59 CET 2008 - kssingvo@suse.de

- upgrade to version 1.2:
  * many bugfixes and changes, see included NEWS file for details
  * major changes, new features and improvements:
    - Fetching via bzr+ssh will no longer fill ghosts by default.
    - Formatting of ``bzr plugins`` output is changed to be more
      human- friendly. Full path of plugins locations will be shown
      only with ``--verbose`` command-line option.
    - ``merge --preview`` produces a diff of the changes merge would
      make, but does not actually perform the merge.
    - New smart method ``Repository.get_parent_map`` for getting
      revision parent data.
    - New smart method, ``Repository.stream_revisions_chunked``, for
      fetching revision data that streams revision data via a chunked
      encoding. 
    - The launchpad plugin now handles lp urls of the form
      ``lp://staging/``, ``lp://demo/``, ``lp://dev/`` to use the
      appropriate launchpad instance to do the resolution of the
      branch identities.
    - Creating a new branch no longer tries to read the entire
      revision-history unnecessarily over smart server operations.
    - Fetching between different repository formats with compatible
      models now takes advantage of the smart method to stream
      revisions.
    - The ``--coverage`` option is now global, rather specific to
      ``bzr selftest``.
    - The ``register-branch`` command will now use the public url of
      the branch containing the current directory, if one has been
      set and no explicit branch is provided.
    - Tweak the ``reannotate`` code path to optimize the 2-parent
      case. Speeds up ``bzr annotate`` with a pack repository by
      approx 3:2.

-------------------------------------------------------------------
Wed Jan 16 17:20:15 CET 2008 - kssingvo@suse.de

- upgrade to version 1.1:
  * The syntax ``bzr diff branch1 branch2`` is no longer
    supported. Use ``bzr diff branch1 --new branch2`` instead.
    This change has been made to remove the ambiguity where
    ``branch2`` is in fact a specific file to diff within
    ``branch1``.
  * New option to use custom template-based formats in  ``bzr
    version-info``.
  * diff '--using' allows an external diff tool to be used for
    files.
  * New "lca" merge-type for fast everyday merging that also
    supports criss-cross merges.
  * ``annotate`` now doesn't require a working tree.
  * ``branch`` and ``checkout`` can now use files from a working
    tree to to speed up the process.  For checkout, this requires
    the new --files-from flag.
  * ``bzr diff`` now sorts files in alphabetical order.
  * ``bzr diff`` now works on branches without working trees.
    Tree-less branches can also be compared to each other and to
    working trees using the new diff options ``--old`` and
    ``--new``. Diffing between branches, with or without trees,
    now supports specific file filtering as well.
  * ``bzr pack`` now orders revision texts in topological order,
    with newest at the start of the file, promoting linear reads
    for ``bzr log`` and the like. This partially fixes #154129.
  * Merge directives now fetch prerequisites from the target
    branch if needed.
  * pycurl now handles digest authentication.
  * ``reconfigure`` can now convert from repositories.
  * ``-l`` is now a short form for ``--limit`` in ``log``.
  * ``merge`` now warns when merge directives cause cherrypicks.
  * ``split`` now supported, to enable splitting large trees into
    smaller pieces.
  * Better handle short reads when processing multiple range
    requests.
  * build_tree acceleration uses the correct path when a file has
    been moved.
  * ``commit`` now succeeds when a checkout and its master branch
    share a repository.
  * Fixed error reporting of unsupported timezone format in ``log
    --timezone``.
  * Fixed Unicode encoding error in ``ignored`` when the output is
    redirected to a pipe.
  * Fix traceback when sending large response bodies over the
    smart protocol on Windows
  * Fix ``urlutils.relative_url`` for the case of two ``file:///``
    URLs pointed to different logical drives on Windows.
  * HTTP test servers are now compatible with the http protocol
    version 1.1.
  * _KnitParentsProvider.get_parent_map now handles requests for
    ghosts correctly, instead of erroring or attributing incorrect
    parents to ghosts.
  * ``merge --weave --uncommitted`` now works.
  * pycurl authentication handling was broken and incomplete. Fix
    handling of user:pass embedded in the urls.
  * Files inside non-directories are now handled like other
    conflict types.
  * ``reconfigure`` is able to convert trees into lightweight
    checkouts.
  * Reduce lockdir timeout to 0 when running ``bzr serve``.
  * Test that the old ``version_info_format`` functions still
    work, even though they are deprecated.
  * Transform failures no longer cause ImmortalLimbo errors
  * ``uncommit`` works even when the commit messages of revisions
    to be removed use characters not supported in the terminal
    encoding.
  * When dumb http servers return whole files instead of the
    requested ranges, read the remaining bytes by chunks to avoid
    overflowing network buffers.
  * Minor tweaks made to the bug tracker integration
    documentation.
  * Reference material has now be moved out of the User Guide and
    added to the User Reference. The User Reference has gained 4
    sections as a result: Authenication Settings, Configuration
    Settings, Conflicts and Hooks. All help topics are now dumped
    into text format in the doc/en/user-reference directory for
    those who like browsing that information in their editor.
  * *Using Bazaar with Launchpad* tutorial added.
  * find_* methods available for BzrDirs, Branches and
    WorkingTrees.
  * Help topics can now be loaded from files. 
  * get_parent_map now always provides tuples as its output.
  * Parent Providers should now implement ``get_parent_map``
    returning a dictionary instead of ``get_parents`` returning a
    list. ``get_parents`` is now considered deprecated.
  * Patience Diff now supports arbitrary python objects, as long
    as they support ``hash()``.
  * Modules can now customise their tests by defining a
    ``load_tests`` attribute. ``pydoc
    bzrlib.tests.TestUtil.TestLoader.loadTestsFromModule`` for the
    documentation on this attribute.
  * New helper function ``bzrlib.tests.condition_id_re`` which
    helps filter tests based on a regular expression search on the
    tests id.
  * New helper function ``bzrlib.tests.condition_isinstance``
    which helps filter tests based on class.
  * New helper function
    ``bzrlib.tests.exclude_suite_by_condition`` which generalises
    the ``exclude_suite_by_re`` function.
  * New helper function ``bzrlib.tests.filter_suite_by_condition``
    which generalises the ``filter_suite_by_re`` function.
  * New helper method ``bzrlib.tests.exclude_tests_by_re`` which
    gives a new TestSuite that does not contain tests from the
    input that matched a regular expression.
  * New helper method ``bzrlib.tests.randomize_suite`` which
    returns a randomized copy of the input suite.
  * New helper method ``bzrlib.tests.split_suite_by_re`` which
    splits a test suite into two according to a regular
    expression.
  * Parametrize all http tests for the transport implementations,
    the http protocol versions (1.0 and 1.1) and the
    authentication schemes.
  * The ``exclude_pattern`` and ``random_order`` parameters to the
    function ``bzrlib.tests.filter_suite_by_re`` have been
    deprecated.
  * The method ``bzrlib.tests.sort_suite_by_re`` has been
    deprecated. It is replaced by the new helper methods added in
    this release.
  * More improvements and fixes to the User Guide.
  * Add information on cherrypicking/rebasing to the User Guide.
  * Improve bug tracker integration documentation.
  * Minor edits to ``Bazaar in five minutes`` from David Roberts
    and to the rebasing section of the User Guide from Aaron
    Bentley.
  * If a traceback occurs, users are now asked to report the bug
    through Launchpad (https://bugs.launchpad.net/bzr/), rather
    than by mail to the mailing list.
  * Fix Makefile rules for doc generation.
  * Give more feedback during long http downloads by making readv
    deliver data as it arrives for urllib, and issue more requests
    for pycurl. High latency networks are better handled by
    urllib, the pycurl implementation give more feedback but also
    incur more latency.
  * Implement _make_parents_provider on RemoteRepository, allowing
    generating bundles against branches on a smart server.
  * Improved user guide.
  * The single-page quick reference guide is now available as a
    PDF.
  * readv urllib http implementation is now a real iterator above
    the underlying socket and deliver data as soon as it arrives.
    'get' still wraps its output in a StringIO.
  * Added a --coverage option to selftest.
  * Annotate merge (merge-type=weave) now supports cherrypicking.
  * ``bzr commit`` now doesn't print the revision number twice.
  * New configuration option
    ``bugtracker_<tracker_abbrevation>_url`` to define locations
    of bug trackers that are not directly supported by bzr or a
    plugin. The URL will be treated as a template and ``{id}``
    placeholders will be replaced by specific bug IDs.
  * Support logging single merge revisions with short and line log
    formatters.
  * User Guide enhanced with suggested readability improvements
    from Matt Revell and corrections from John Arbash Meinel.
  * Quick Start Guide renamed to Quick Start Card, moved down in
    the catalog, provided in pdf and png format and updated to
    refer to ``send`` instead of ``bundle``.
  * ``switch`` can now be used on heavyweight checkouts as well as
    lightweight ones. After switching a heavyweight checkout, the
    local branch is a mirror/cache of the new bound branch and
    uncommitted changes in the working tree are merged. As a
    safety check, if there are local commits in a checkout which
    have not been committed to the previously bound branch, then
    ``switch`` fails unless the ``--force`` option is given. This
    option is now also required if the branch a lightweight
    checkout is pointing to has been moved.
  * New -Dhttp debug option reports http connections, requests and
    responses.
  * New -Dmerge debug option, which emits merge plans for
    merge-type=weave.
  * Better error message when running ``bzr cat`` on a
    non-existant branch.
  * Catch OSError 17 (file exists) in final phase of tree
    transform and show filename to user.
  * Catch ShortReadvErrors while using pycurl. Also make readv
    more robust by allowing multiple GET requests to be issued if
    too many ranges are required.
  * Check for missing basis texts when fetching from packs to
    packs.
  * Fall back to showing e-mail in ``log --short/--line`` if the
    committer/author has only e-mail.
  * Deprecate not passing a ``location`` argument to commit
    reporters' ``started`` methods.
  * The default repository format is now ``pack-0.92``.  This
    default is used when creating new repositories with ``init``
    and ``init-repo``, and when branching over bzr+ssh or
    bzr+hpss. 
  * Disable detection of plink.exe as possible ssh vendor. Plink
    vendor still available if user selects it explicitly with
    BZR_SSH environment variable.
  * The pack format is now accessible as "pack-0.92", or
    "pack-0.92-subtree" to enable the subtree functions (for
    example, for bzr-svn).  See
    http://doc.bazaar-vcs.org/latest/developer/packrepo.html
  * New ``authentication.conf`` file holding the password or other
    credentials for remote servers. This can be used for ssh,
    sftp, smtp and other supported transports.
  * New rich-root and rich-root-pack formats, recording the same
    data about tree roots that's recorded for all other
    directories.
  * ``pack-0.92`` repositories can now be reconciled.
  * ``switch`` command added for changing the branch a lightweight
    checkout is associated with and updating the tree to reflect
    the latest content accordingly. This command was previously
    part of the BzrTools plug-in.
  * ``reconfigure`` command can now convert branches, trees, or
    checkouts to lightweight checkouts.
  * Commit updates the state of the working tree via a delta
    rather than supplying entirely new basis trees. For commit of
    a single specified file this reduces the wall clock time for
    commit by roughly a 30%.
  * Commit with many automatically found deleted paths no longer
    performs linear scanning for the children of those paths
    during inventory iteration. This should fix commit performance
    blowing out when many such paths occur during commit.
  * Fetch with pack repositories will no longer read the entire
    history graph.
  * Revert takes out an appropriate lock when reverting to a basis
    tree, and does not read the basis inventory twice.
  * Diff does not require an inventory to be generated on dirstate
    trees.
  * New annotate merge (--merge-type=weave) implementation is fast
    on versionedfiles withough cached annotations, e.g. pack-0.92.
  * ``bzr merge`` now warns when it encounters a criss-cross
    merge.
  * ``bzr send`` now doesn't require the target e-mail address to
    be specified on the command line if an interactive e-mail
    client is used.
  * ``bzr tags`` now prints the revision number for each tag,
    instead of the revision id, unless --show-ids is passed. In
    addition, tags can be sorted chronologically instead of
    lexicographically with --sort=time.
  * Windows standalone version of bzr is able to load system-wide
    plugins from "plugins" subdirectory in installation directory.
    In addition standalone installer write to the registry
    (HKLM\SOFTWARE\Bazaar) useful info about paths and bzr
    version.
  * A progress bar has been added for knitpack -> knitpack
    fetching.
  * Branching from a branch via smart server now preserves the
    repository format.
  * ``commit`` is now able to invoke an external editor in a
    non-ascii directory.
  * Catch connection errors for ftp.
  * ``check`` no longer reports spurious unreferenced text
    versions.
  * Conflicts are now resolved recursively by ``revert``.
  * Detect invalid transport reuse attempts by catching invalid
    URLs.
  * Deleting a file without removing it shows a correct diff, not
    a traceback.
  * Do no use timeout in HttpServer anymore.
  * Don't catch the exceptions related to the http pipeline status
    before retrying an http request or some programming errors may
    be masked.
  * Fix ``bzr rm`` to not delete modified and ignored files.
  * Fix exception when revisionspec contains merge revisons but
    log formatter doesn't support merge revisions.
  * Fix exception when ScopeReplacer is assigned to before any
    members have been retrieved.
  * Fix multiple connections during checkout --lightweight.
  * Fix possible error in insert_data_stream when copying between
    pack repositories over bzr+ssh or bzr+http.
    KnitVersionedFile.get_data_stream now makes sure that
    requested compression parents are sent before any delta hunks
    that depend on them.
  * Fix typo in limiting offsets coalescing for http, leading to
    whole files being downloaded instead of parts.
  * FTP server errors don't error in the error handling code.
  * Give a clearer message when a pull fails because the source
    needs to be reconciled.
  * It is clearer when a plugin cannot be loaded because of its
    name, and a suggestion for an acceptable name is given.
  * Leave port as None in transport objects if user doesn't
    specify a port in urls.
  * Make sure Repository.fetch(self) is properly a no-op for all
    Repository implementations.
  * Mark .bzr directories as "hidden" on Windows.
  * ``merge --uncommitted`` can now operate on a single file.
  * Obsolete packs are now cleaned up by pack and autopack
    operations.
  * Operations pulling data from a smart server where the
    underlying repositories are not both annotated/both
    unannotated will now work.
  * Reconcile now shows progress bars.
  * ``RemoteBranch`` was not initializing
    ``self._revision_id_to_revno_map`` properly.
  * Removing an already-removed file reports the file does not
    exist.
  * Rename on Windows is able to change filename case.
  * Return error instead of a traceback for ``bzr log -r0``.
  * Return error instead of a traceback when bzr is unable to
    create symlink on some platforms (e.g. on Windows).
  * Revert doesn't crash when restoring a single file from a
    deleted directory.
  * Stderr output via logging mechanism now goes through encoded
    wrapper and no more uses utf-8, but terminal encoding instead.
    So all unicode strings now should be readable in non-utf-8
    terminal.
  * The error message when ``move --after`` should be used makes
    how to do so clearer.
  * Unicode-safe output from ``bzr info``. The output will be
    encoded using the terminal encoding and unrepresentable
    characters will be replaced by '?'.
  * Working trees are no longer created when pushing into a local
    no-trees repo.
  * Upgrade util/configobj to version 4.4.0.
  * Wrap medusa ftp test server as an FTPServer feature.
  * ``osutils.backup_file`` is deprecated. Actually it's not used
    in bzrlib during very long time.
  * The return value of
    ``VersionedFile.iter_lines_added_or_present_in_versions`` has
    been changed. Previously it was an iterator of lines, now it
    is an iterator of (line, version_id) tuples. This change has
    been made to aid reconcile and fetch operations.
  * ``bzrlib.repository.get_versioned_file_checker`` is now
    private.
  * The Repository format registry default has been removed; it
    was previously obsoleted by the bzrdir format default, which
    implies a default repository format.
  * Added ``ContainerSerialiser`` and ``ContainerPushParser`` to
    ``bzrlib.pack``.  These classes provide more convenient APIs
    for generating and parsing containers from streams rather than
    from files.
  * New module ``lru_cache`` providing a cache for use by tasks
    that need semi-random access to large amounts of data.
  * InventoryEntry.diff is now deprecated.  Please use
    diff.DiffTree instead.
  * ``bzr`` now returns exit code 4 if an internal error occurred,
    and 3 if a normal error occurred.
  * ``pull``, ``merge`` and ``push`` will no longer silently
    correct some repository index errors that occured as a result
    of the Weave disk format. Instead the ``reconcile`` command
    needs to be run to correct those problems if they exist (and
    it has been able to fix most such problems since bzr 0.8).
    Some new problems have been identified during this release and
    you should run ``bzr check`` once on every repository to see
    if you need to reconcile. If you cannot ``pull`` or ``merge``
    from a remote repository due to mismatched parent errors - a
    symptom of index errors - you should simply take a full copy
    of that remote repository to a clean directory outside any
    local repositories, then run reconcile on it, and finally pull
    from it locally. (And naturally email the repositories owner
    to ask them to upgrade and run reconcile).
  * New ``knitpack-experimental`` repository format. This is
    interoperable with the ``dirstate-tags`` format but uses a
    smarter storage design that greatly speeds up many operations,
    both local and remote. This new format can be used as an
    option to the ``init``, ``init-repository`` and ``upgrade``
    commands. See
    http://doc.bazaar-vcs.org/0.92/developers/knitpack.html for
    further details.
  * For users of bzr-svn (and those testing the prototype subtree
    support) that wish to try packs, a new
    ``knitpack-subtree-experimental`` format has also been added.
    This is interoperable with the ``dirstate-subtrees`` format.
  * New ``reconfigure`` command.
  * New ``revert --forget-merges`` command, which removes the
    record of a pending merge without affecting the working tree
    contents.
  * New ``bzr_remote_path`` configuration variable allows finer
    control of remote bzr locations than BZR_REMOTE_PATH
    environment variable.
  * New ``launchpad-login`` command to tell Bazaar your Launchpad
    user ID.  This can then be used by other functions of the
    Launchpad plugin.
  * Commit in quiet mode is now slightly faster as the information
    to output is no longer calculated.
  * Commit no longer checks for new text keys during insertion
    when the revision id was deterministically unique.
  * Committing a change which is not a merge and does not change
    the number of files in the tree is faster by utilising the
    data about whether files are changed to determine if the tree
    is unchanged rather than recalculating it at the end of the
    commit process.
  * Inventory serialisation no longer double-sha's the content.
  * Knit text reconstruction now avoids making copies of the lines
    list for interim texts when building a single text. The new
    ``apply_delta`` method on ``KnitContent`` aids this by
    allowing modification of the revision id such objects
    represent.
  * Pack indices are now partially parsed for specific key lookup
    using a bisection approach.
  * Partial commits are now approximately 40% faster by walking
    over the unselected current tree more efficiently.
  * XML inventory serialisation takes 20% less time while being
    stricter about the contents.
  * Graph ``heads()`` queries have been fixed to no longer access
    all history unnecessarily.
  * ``bzr+https://`` smart server across https now supported. 
  * Mutt is now a supported mail client; set ``mail_client=mutt``
    in your bazaar.conf and ``send`` will use mutt.
  * New option ``-c``/``--change`` for ``merge`` command for
    cherrypicking changes from one revision.
  * Show encodings, locale and list of plugins in the traceback
    message.
  * Experimental directory formats can now be marked with
    ``experimental = True`` during registration.
  * New *Bazaar in Five Minutes* guide.
  * The hooks reference documentation is now converted to html as
    expected.
  * Connection error reporting for the smart server has been fixed
    to display a user friendly message instead of a traceback.
  * Make sure to use ``O_BINARY`` when opening files to check
    their sha1sum.
  * Fix a problem with Win32 handling of the executable bit.
  * ``bzr+ssh://`` and ``sftp://`` URLs that do not specify ports
    explicitly no longer assume that means port 22.  This allows
    people using OpenSSH to override the default port in their
    ``~/.ssh/config`` if they wish.  This fixes a bug introduced
    in bzr 0.91.
  * Commands reporting exceptions can now be profiled and still
    have their data correctly dumped to a file. For example, a
    ``bzr commit`` with no changes still reports the operation as
    pointless but doing so no longer throws away the profiling
    data if this command is run with ``--lsprof-file
    callgrind.out.ci`` say.
  * Fallback to ftp when paramiko is not installed and sftp can't
    be used for ``tests/commands`` so that the test suite is still
    usable without paramiko.
  * Fix commit ordering in corner case.
  * Fix long standing bug in partial commit when there are renames
    left in tree.
  * Fix selftest semi-random noise during http related tests.
  * Fix typo in ftp.py making the reconnection fail on temporary
    errors.
  * Fix failing test by comparing real paths to cover the case
    where the TMPDIR contains a symbolic link.
  * Fix log against smart server branches that don't support tags.
  * Fix pycurl http implementation by defining error codes from
    pycurl instead of relying on an old curl definition.
  * Fix 'unprintable error' message when displaying BzrCheckError
    and some other exceptions on Python 2.5.
  * Fix ``Inventory.copy()`` and add test for it.
  * Handles default value for ListOption in cmd_commit.
  * HttpServer and FtpServer need to be closed properly or a
    listening socket will remain opened.
  * Monitor the .bzr directory created in the top level test
    directory to detect leaking tests.
  * The basename, not the full path, is now used when checking
    whether the profiling dump file begins with ``callgrind.out``
    or not. This fixes a bug reported by Aaron Bentley on IRC.
  * Trivial fix for invoking command ``reconfigure`` without
    arguments.
  * ``WorkingTree.rename_one`` will now raise an error if
    normalisation of the new path causes bzr to be unable to
    access the file.
  * Correctly detect a NoSuchFile when using a filezilla server.
  * ``bzrlib.index.GraphIndex`` now requires a size parameter to
    the constructor, for enabling bisection searches.
  * ``CommitBuilder.record_entry_contents`` now requires the root
    entry of a tree be supplied to it, previously failing to do so
    would trigger a deprecation warning.
  * ``KnitVersionedFile.add*`` will no longer cache added records
    even when enable_cache() has been called - the caching feature
    is now exclusively for reading existing data.
  * ``ReadOnlyLockError`` is deprecated; ``LockFailed`` is usually
    more appropriate.
  * Removed ``bzrlib.transport.TransportLogger`` - please see the
    new ``trace+`` transport instead.
  * Removed previously deprecated varargs interface to
    ``TestCase.run_bzr`` and deprecated methods
    ``TestCase.capture`` and ``TestCase.run_bzr_captured``.
  * Removed previous deprecated ``basis_knit`` parameter to the
    ``KnitVersionedFile`` constructor.
  * Special purpose method ``TestCase.run_bzr_decode`` is moved to
    the test_non_ascii class that needs it.
  * The class ``bzrlib.repofmt.knitrepo.KnitRepository3`` has been
    folded into ``KnitRepository`` by parameters to the
    constructor.
  * The ``VersionedFile`` interface now allows content checks to
    be bypassed by supplying check_content=False.  This saves
    nearly 30% of the minimum cost to store a version of a file.
  * Tree's with bad state such as files with no length or sha will
    no longer be silently accepted by the repository XML
    serialiser. To serialise inventories without such data, pass
    working=True to write_inventory.
  * ``VersionedFile.fix_parents`` has been removed as a harmful
    API. ``VersionedFile.join`` will no longer accept different
    parents on either side of a join - it will either ignore them,
    or error, depending on the implementation. See notes when
    upgrading for more information.
  * ``bzrlib.transport.Transport.put_file`` now returns the number
    of bytes put by the method call, to allow avoiding
    stat-after-write or housekeeping in callers.
  * ``bzrlib.xml_serializer.Serializer`` is now responsible for
    checking that mandatory attributes are present on
    serialisation and deserialisation. This fixes some holes in
    API usage and allows better separation between physical
    storage and object serialisation.
  * New class ``bzrlib.errors.InternalBzrError`` which is just a
    convenient shorthand for deriving from BzrError and setting
    internal_error = True.
  * New method
    ``bzrlib.mutabletree.update_to_one_parent_via_delta`` for
    moving the state of a parent tree to a new version via a delta
    rather than a complete replacement tree.
  * New method ``bzrlib.osutils.minimum_path_selection`` useful
    for removing duplication from user input, when a user mentions
    both a path and an item contained within that path.
  * New method ``bzrlib.repository.Repository.is_write_locked``
    useful for determining if a repository is write locked.
  * New method on ``bzrlib.tree.Tree`` ``path_content_summary``
    provides a tuple containing the key information about a path
    for commit processing to complete.
  * New method on xml serialisers, write_inventory_to_lines, which
    matches the API used by knits for adding content.
  * New module ``bzrlib.bisect_multi`` with generic
    multiple-bisection-at-once logic, currently only available for
    byte-based lookup (``bisect_multi_bytes``).
  * New helper ``bzrlib.tuned_gzip.bytes_to_gzip`` which takes a
    byte string and returns a gzipped version of the same. This is
    used to avoid a bunch of api friction during adding of knit
    hunks.
  * New parameter on ``bzrlib.transport.Transport.readv``
    ``adjust_for_latency`` which changes readv from returning
    strictly the requested data to inserted return larger ranges
    and in forward read order to reduce the effect of network
    latency.
  * New parameter yield_parents on
    ``Inventory.iter_entries_by_dir`` which causes the parents of
    a selected id to be returned recursively, so all the paths
    from the root down to each element of selected_file_ids are
    returned.
  * Knit joining has been enhanced to support plain to annotated
    conversion and annotated to plain conversion.
  * The CommitBuilder method ``record_entry_contents`` now returns
    summary information about the effect of the commit on the
    repository. This tuple contains an inventory delta item if the
    entry changed from the basis, and a boolean indicating whether
    a new file graph node was recorded.
  * The python path used in the Makefile can now be overridden.
  * New transport implementation ``trace+`` which is useful for
    testing, logging activity taken to its _activity attribute.
  * When running bzr commands within the test suite, internal
    exceptions are not caught and reported in the usual way, but
    rather allowed to propagate up and be visible to the test
    suite.  A new API ``run_bzr_catch_user_errors`` makes this
    behavior available to other users.
  * New method ``TestCase.call_catch_warnings`` for testing
    methods that raises a Python warning.
  * Print a warning instead of aborting the ``python setup.py
    install`` process if building of a C extension is not
    possible.
  * Fix commit ordering in corner case
  * Fix ''bzr info bzr://host/'' and other operations on ''bzr://'
    URLs with an implicit port.  We were incorrectly raising
    PathNotChild due to inconsistent treatment of the ''_port''
    attribute on the Transport object.
  * Make RemoteRepository.sprout cope gracefully with servers that
    don't support the ``Repository.tarball`` request.
  * Replaced incorrect tarball for previous release; a debug
    statement was left in bzrlib/remote.py.
  * The default branch and repository format has changed to
    ``dirstate-tags``, so tag commands are active by default. This
    format is compatible with Bazaar 0.15 and later. This
    incidentally fixes bug #126141.
  * ``--quiet`` or ``-q`` is no longer a global option. If
    present, it must now appear after the command name. Scripts
    doing things like ``bzr -q missing`` need to be rewritten as
    ``bzr missing -q``.
  * New option ``--author`` in ``bzr commit`` to specify the
    author of the change, if it's different from the committer.
    ``bzr log`` and ``bzr annotate`` display the author instead of
    the committer.
  * In addition to global options and command specific options, a
    set of standard options are now supported. Standard options
    are legal for all commands. The initial set of standard
    options are:
    * ``--help`` or ``-h`` - display help message
    * ``--verbose`` or ``-v`` - display additional information
    * ``--quiet``  or ``-q`` - only output warnings and errors.
    Unlike global options, standard options can be used in aliases
    and may have command-specific help.
  * Verbosity level processing has now been unified. If
    ``--verbose`` or ``-v`` is specified on the command line
    multiple times, the verbosity level is made positive the first
    time then increased. If ``--quiet`` or ``-q`` is specified on
    the command line multiple times, the verbosity level is made
    negative the first time then decreased. To get the default
    verbosity level of zero, either specify none of the above ,
    ``--no-verbose`` or ``--no-quiet``. Note that most commands
    currently ignore the magnitude of the verbosity level but do
    respect *quiet vs normal vs verbose* when generating output.
  * ``Branch.hooks`` now supports ``pre_commit`` hook. The hook's
    signature is documented in BranchHooks constructor.
  * New ``Repository.stream_knit_data_for_revisions`` request
    added to the network protocol for greatly reduced roundtrips
    when retrieving a set of revisions.
  * ``bzr plugins`` now lists the version number for each plugin
    in square brackets after the path.
  * Pushing, pulling and branching branches with subtree
    references was not copying the subtree weave, preventing the
    file graph from being accessed and causing errors in commits
    in clones.
  * Suppress warning "integer argument expected, got float" from
    Paramiko, which sometimes caused false test failures.
  * Fix bug in bundle 4 that could cause attempts to write data to
    wrong versionedfile.
  * Diffs generated using "diff -p" no longer break the patch
    parser.
  * get_transport treats an empty possible_transports list the
    same as a non- empty one.
  * patch verification for merge directives is reactivated, and
    works with CRLF and CR files.
  * Accept ..\ as a path in revision specifiers. This fixes for
    example "-r branch:..\other-branch" on Windows.
  * ``BZR_PLUGIN_PATH`` may now contain trailing slashes.
  * man page no longer lists hidden options
  * ``uncommit --help`` now explains the -r option adequately.
  * Error messages are now better formatted with parameters (such
    as filenames) quoted when necessary. This avoids confusion
    when directory names ending in a '.' at the end of messages
    were confused with a full stop that may or not have been
    there.
  * Fix ``status FILE -r X..Y``.
  * If a particular command is an alias, ``help`` will show the
    alias instead of claiming there is no help for said alias.
  * TreeTransform-based operations, like pull, merge, revert, and
    branch, now roll back if they encounter an error.
  * ``bzr commit`` now exits cleanly if a character unsupported by
    the current encoding is used in the commit message.
  * bzr send uses default values for ranges when only half of an
    elipsis is specified ("-r..5" or "-r5..").
  * Avoid trouble when Windows ssh calls itself 'plink' but no
    plink binary is present.
  * ``bzr remove`` should remove clean subtrees.  Now it will
    remove (without needing ``--force``) subtrees that contain no
    files with text changes or modified files.  With ``--force``
    it removes the subtree regardless of text changes or unknown
    files. Directories with renames in or out (but not changed
    otherwise) will now be removed without needing ``--force``.
    Unknown ignored files will be deleted without needing
    ``--force``.
  * When two plugins conflict, the source of both the losing and
    now the winning definition is shown.
  * When committing to a branch, the location being committed to
    is displayed.
  * ``bzr --version`` takes care about encoding of stdout,
    especially when output is redirected.
  * Prompt for an ftp password if none is provided.
  * Reuse bound branch associated transport to avoid multiple
    connections.
  * Overwrite conflicting tags by ``push`` and ``pull`` if the
    ``--overwrite`` option is specified.
  * In checkouts, tags are copied into the master branch when
    created, changed or deleted, and are copied into the checkout
    when it is updated.
  * Print a warning instead of aborting the ``python setup.py
    install`` process if building of a C extension is not
    possible.
  * Add the option "--show-diff" to the commit command in order to
    display the diff during the commit log creation.
  * ``pull`` and ``merge`` are much faster at installing bundle
    format 4.
  * ``pull -v`` no longer includes deltas, making it much faster.
  * ``send`` now sends the directive as an attachment by default.
  * Documentation updates
  * Help on debug flags is now included in ``help
    global-options``.
  * Parameters passed on the command line are checked to ensure
    they are supported by the encoding in use.
  * The compression used within the bzr repository has changed
    from zlib level 9 to the zlib default level. This improves
    commit performance with only a small increase in space used
    (and in some cases a reduction in space).
  * Initial commit no longer SHAs files twice and now reuses the
    path rather than looking it up again, making it faster.
  * New option ``-c``/``--change`` for ``diff`` and ``status`` to
    show changes in one revision.
  * If versioned files match a given ignore pattern, a warning is
    now given.
  * ``bzr status`` now has -S as a short name for --short and -V
    as a short name for --versioned. These have been added to
    assist users migrating from Subversion: ``bzr status -SV`` is
    now like ``svn status -q``.
  * Added C implementation of  ``PatienceSequenceMatcher``, which
    is about 10x faster than the Python version. This speeds up
    commands that need file diffing, such as ``bzr commit`` or
    ``bzr diff``.
  * HACKING has been extended with a large section on core
    developer tasks.
  * Add ``branches`` and ``standalone-trees`` as online help
    topics and include them as Concepts within the User Reference.
  * ``check`` can detect versionedfile parent references that are
    inconsistent with revision and inventory info, and
    ``reconcile`` can fix them.  These faulty references were
    generated by 0.8-era releases, so repositories which were
    manipulated by old bzrs should be checked, and possibly
    reconciled ASAP.
  * ``Branch.append_revision`` is removed altogether; please use
    ``Branch.set_last_revision_info`` instead.
  * CommitBuilder now advertises itself as requiring the root
    entry to be supplied. This only affects foreign repository
    implementations which reuse CommitBuilder directly and have
    changed record_entry_contents to require that the root not be
    supplied. This should be precisely zero plugins affected.
  * The ``add_lines`` methods on ``VersionedFile`` implementations
    has changed its return value to include the sha1 and length of
    the inserted text. This allows the avoidance of double-sha1
    calculations during commit.
  * ``Transport.should_cache`` has been removed.  It was not
    called in the previous release.
  * Tests may now raise TestNotApplicable to indicate they
    shouldn't be run in a particular scenario.
  * New function multiply_tests_from_modules to give a simpler
    interface to test parameterization.
  * ``Transport.should_cache`` has been removed.  It was not
    called in the previous release.
  * NULL_REVISION is returned to indicate the null revision, not
    None.
  * Use UTF-8 encoded StringIO for log tests to avoid failures on
    non-ASCII committer names.
  * ``bzrlib.plugin.all_plugins`` has been deprecated in favour of
    ``bzrlib.plugin.plugins()`` which returns PlugIn objects that
    provide useful functionality for determining the path of a
    plugin, its tests, and its version information.
  * Add the option user_encoding to the function
    'show_diff_trees()' in order to move the user encoding at the
    UI level.
  * Add the function make_commit_message_template_encoded() and
    the function edit_commit_message_encoded() which handle
    encoded strings. This is done in order to mix the commit
    messages (which is a unicode string), and the diff which is a
    raw string.
  * CommitBuilder now defaults to using add_lines_with_ghosts,
    reducing overhead on non-weave repositories which don't
    require all parents to be present.
  * Deprecated method ``find_previous_heads`` on
    ``bzrlib.inventory.InventoryEntry``. This has been superseded
    by the use of ``parent_candidates`` and a separate heads check
    via the repository API.
  * New trace function ``mutter_callsite`` will print out a subset
    of the stack to the log, which can be useful for gathering
    debug details.
  * ``bzrlib.pack.ContainerWriter`` now tracks how many records
    have been added via a public attribute records_written.
  * New method
    ``bzrlib.transport.Transport.get_recommended_page_size``. This
    provides a hint to users of transports as to the reasonable
    minimum data to read. In principle this can take latency and
    bandwidth into account on a per-connection basis, but for now
    it just has hard coded values based on the url. (e.g. http://
    has a large page size, file:// has a small one.)
  * New method on ``bzrlib.transport.Transport``
    ``open_write_stream`` allows incremental addition of data to a
    file without requiring that all the data be buffered in
    memory.
  * New methods on ``bzrlib.knit.KnitVersionedFile``:
    ``get_data_stream(versions)``, ``insert_data_stream(stream)``
    and ``get_format_signature()``.  These provide some
    infrastructure for efficiently streaming the knit data for a
    set of versions over the smart protocol.
  * Knits with no annotation cache still produce correct
    annotations.
  * Three new methods have been added to ``bzrlib.trace``:
    ``set_verbosity_level``, ``get_verbosity_level`` and
    ``is_verbose``. ``set_verbosity_level`` expects a numeric
    value: negative for quiet, zero for normal, positive for
    verbose. The size of the number can be used to determine just
    how quiet or verbose the application should be. The existing
    ``be_quiet`` and ``is_quiet`` routines have been integrated
    into this new scheme.
  * Options can now be delcared with a ``custom_callback``
    parameter. If set, this routine is called after the option is
    processed. This feature is now used by the standard options
    ``verbose`` and ``quiet`` so that setting one implicitly
    resets the other.
  * Rather than declaring a new option from scratch in order to
    provide custom help, a centrally registered option can be
    decorated using the new ``bzrlib.Option.custom_help`` routine.
    In particular, this routine is useful when declaring better
    help for the ``verbose`` and ``quiet`` standard options as the
    base definition of these is now more complex than before
    thanks to their use of a custom callback.
  * Tree._iter_changes(specific_file=[]) now iterates through no
    files, instead of iterating through all files.  None is used
    to iterate through all files.
  * WorkingTree.revert() now accepts None to revert all files.
    The use of [] to revert all files is deprecated.
  * Documentation is now organized into multiple directories with
    a level added for different languages or locales. Added the
    Mini Tutorial and Quick Start Summary (en) documents from the
    Wiki, improving the content and readability of the former.
    Formatted NEWS as Release Notes complete with a Table of
    Conents, one heading per release. Moved the Developer Guide
    into the main document catalog and provided a link from the
    developer document catalog back to the main one.
  * The static convenience method ``BzrDir.create_repository`` is
    deprecated.  Callers should instead create a ``BzrDir``
    instance and call ``create_repository`` on that.
  * ``bzr init`` should connect to the remote location one time
    only.  We have been connecting several times because we forget
    to pass around the Transport object. This modifies
    ``BzrDir.create_branch_convenience``, so that we can give it
    the Transport we already have.
  * Get rid of sftp connection cache (get rid of the FTP one too).
  * bzr branch {local|remote} remote don't try to create a working
    tree anymore.
  * All identified multiple connections for a single bzr command
    have been fixed. See bzrlib/tests/commands directory.
  * ``bzr rm`` now does not insist on ``--force`` to delete files
    that have been renamed but not otherwise modified.
  * ``bzr selftest --bench`` no longer emits deprecation warnings
  * ``bzr status`` now honours FILE parameters for conflict lists
  * ``bzr checkout`` now honours -r when reconstituting a working
    tree. It also honours -r 0.
  * ``bzr add *`` no more fails on Windows if working tree
    contains non-ascii file names.
  * allow ``easy_install bzr`` runs without fatal errors. 
  * Graph._filter_candidate_lca does not raise KeyError if a
    candidate is eliminated just before it would normally be
    examined.
  * SMTP connection failures produce a nice message, not a
    traceback.
  * Don't show "dots" progress indicators when run
    non-interactively, such as from cron.
  * ``info`` now formats locations more nicely and lists "submit"
    and "public" branches
  * New ``pack`` command that will trigger database compression
    within the repository
  * Implement ``_KnitIndex._load_data`` in a pyrex extension. The
    pyrex version is approximately 2-3x faster at parsing a
    ``.kndx`` file. Which yields a measurable improvement for
    commands which have to read from the repository, such as a 1s
    => 0.75s improvement in ``bzr diff`` when there are changes to
    be shown.
  * Merge is now faster.  Depending on the scenario, it can be
    more than 2x faster.
  * Give a clearer warning, and allow ``python setup.py install``
    to succeed even if pyrex is not available.
  * ``DirState._read_dirblocks`` now has an optional Pyrex
    implementation. This improves the speed of any command that
    has to read the entire DirState. (``diff``, ``status``, etc,
    improve by about 10%).
  * ``bisect_dirblocks`` has also been improved, which helps all
    ``_get_entry`` type calls (whenever we are searching for a
    particular entry in the in-memory DirState).
  * ``bzr pull`` and ``bzr push`` no longer do a complete walk of
    the branch revision history for ui display unless -v is
    supplied.
  * ``bzr log -rA..B`` output shifted to the left margin if the
    log only contains merge revisions.
  * The ``plugins`` command is now public with improved help.
  * New bundle and merge directive formats are faster to generate,
    and
  * Annotate merge now works when there are local changes.
  * Commit now only shows the progress in terms of directories
    instead of entries.
  * Fix ``KnitRepository.get_revision_graph`` to not request the
    graph 2 times. This makes ``get_revision_graph`` 2x faster.
  * Fix ``VersionedFile.get_graph()`` to avoid using
    ``set.difference_update(other)``, which has bad scaling when
    ``other`` is large. This improves
    ``VF.get_graph([version_id])`` for a 12.5k graph from 2.9s
    down to 200ms.
  * The ``--lsprof-file`` option now generates output for
    KCacheGrind if the file starts with ``callgrind.out``. This
    matches the default file filtering done by KCacheGrind's Open
    Dialog.
  * Fix ``bzr update`` to avoid an unnecessary
    ``branch.get_master_branch`` call, which avoids 1 extra
    connection to the remote server.
  * Log errors from the smart server in the trace file, to make
    debugging test failures (and live failures!) easier.
  * The HTML version of the man page has been superceded by a more
    comprehensive manual called the Bazaar User Reference. This
    manual is completed generated from the online help topics. As
    part of this change, limited reStructuredText is now
    explicitly supported in help topics and command help with
    'unnatural' markup being removed prior to display by the
    online help or inclusion in the man page.
  * HTML documentation now use files extension ``*.html``
  * The cache of ignore definitions is now cleared in
    WorkingTree.unlock() so that changes to .bzrignore aren't
    missed.
  * ``bzr selftest --strict`` fails if there are any missing
    features or expected test failures.
  * Link to registration survey added to README.
  * Windows standalone installer show link to registration survey
    when installation finished.
  * Deprecated dictionary ``bzrlib.option.SHORT_OPTIONS`` removed.
    Options are now required to provide a help string and it must
    comply with the style guide by being one or more sentences
    with an initial capital and final period.
  * KnitIndex.get_parents now returns tuples.
  * Ancient unused ``Repository.text_store`` attribute has been
    removed.
  * The ``bzrlib.pack`` interface has changed to use tuples of
    bytestrings rather than just bytestrings, making it easier to
    represent multiple element names. As this interface was not
    used by any internal facilities since it was introduced in
    0.18 no API compatibility is being preserved. The serialised
    form of these packs is identical with 0.18 when a single
    element tuple is in use.
  * merge now uses ``iter_changes`` to calculate changes, which
    makes room for future performance increases.  It is also more
    consistent with other operations that perform comparisons, and
    reduces reliance on Tree.inventory.
  * Refactoring of transport classes connected to a remote server.
    ConnectedTransport is a new class that serves as a basis for
    all transports needing to connect to a remote server.
    transport.split_url have been deprecated, use the static
    method on the object instead. URL tests have been refactored
    too.
  * Better connection sharing for ConnectedTransport objects.
    transport.get_transport() now accepts a 'possible_transports'
    parameter. If a newly requested transport can share a
    connection with one of the list, it will.
  * Most functions now accept ``bzrlib.revision.NULL_REVISION`` to
    indicate the null revision, and consider using ``None`` for
    this purpose deprecated.
  * New ``index`` module with abstract index functionality. This
    will be used during the planned changes in the repository
    layer. Currently the index layer provides a graph aware
    immutable index, a builder for the same index type to allow
    creating them, and finally a composer for such indices to
    allow the use of many indices in a single query. The index
    performance is not optimised, however the API is stable to
    allow development on top of the index.
  * ``bzrlib.dirstate.cmp_by_dirs`` can be used to compare two
    paths by their directory sections. This is equivalent to
    comparing ``path.split('/')``, only without having to split
    the paths. This has a Pyrex implementation available.
  * New transport decorator 'unlistable+' which disables the
    list_dir functionality for testing.
  * Deprecated ``change_entry`` in transform.py.
  * RevisionTree.get_weave is now deprecated.  Tree.plan_merge is
    now used for performing annotate-merge.
  * New EmailMessage class to create email messages.
  * Unused functions on the private interface KnitIndex have been
    removed.
  * New ``knit.KnitGraphIndex`` which provides a ``KnitIndex``
    layered on top of a ``index.GraphIndex``.
  * New ``knit.KnitVersionedFile.iter_parents`` method that allows
    querying the parents of many knit nodes at once, reducing
    round trips to the underlying index.
  * Graph now has an is_ancestor method, various bits use it.
  * The ``-Dhpss`` flag now includes timing information. As well
    as logging when a new connection is opened.
  * ``bzrlib.pack.ContainerWriter`` now returns an offset, length
    tuple to callers when inserting data, allowing generation of
    readv style access during pack creation, without needing a
    separate pass across the output pack to gather such details.
  * ``bzrlib.pack.make_readv_reader`` allows readv based access to
    pack files that are stored on a transport.
  * New ``Repository.has_same_location`` method that reports if
    two repository objects refer to the same repository (although
    with some risk of false negatives).
  * InterTree.compare now passes require_versioned on correctly.
  * New methods on Repository - ``start_write_group``,
    ``commit_write_group``, ``abort_write_group`` and
    ``is_in_write_group`` - which provide a clean hook point for
    transactional Repositories - ones where all the data for a
    fetch or commit needs to be made atomically available in one
    step. This allows the write lock to remain while making a
    series of data insertions (e.g. data conversion).
  * In ``bzrlib.knit`` the internal interface has been altered to
    use 3-tuples (index, pos, length) rather than two-tuples (pos,
    length) to describe where data in a knit is, allowing knits to
    be split into many files.
  * ``bzrlib.knit._KnitData`` split into cache management and
    physical access with two access classes - ``_PackAccess`` and
    ``_KnitAccess`` defined. The former provides access into a
    .pack file, and the latter provides the current production
    repository form of .knit files.
  * Remove selftest ``--clean-output``, ``--numbered-dirs`` and
    ``--keep-output`` options, which are obsolete now that tests
    are done within directories in $TMPDIR.
  * The SSH_AUTH_SOCK environment variable is now reset to avoid
    interaction with any running ssh agents.
  * run_bzr_subprocess handles parameters the same way as run_bzr:
    either a string or a list of strings should be passed as the
    first parameter.  Varargs-style parameters are deprecated.



-------------------------------------------------------------------
Mon Jul 30 11:23:07 CEST 2007 - kssingvo@suse.de

- upgrade to version 0.18:
  * Fix 'bzr add' crash under Win32
  * Do not suppress pipe errors, etc. in non-display commands
  * Display a useful error message when the user requests to
    annotate a file that is not present in the specified revision.
  * Commands that use status flags now have a reference to 'help
    status-flags'.
  * Work around python-2.4.1 inhability to correctly parse the
    authentication header.
  * Use exact encoding for merge directives.
  * Fix tempfile permissions error in smart server tar bundling
    under Windows.
  * Fix detection of directory entries in the inventory.
  * Fix handling of http code 400: Bad Request When issuing too
    many ranges.
  * Issue a CONNECT request when connecting to an https server via
    a proxy to enable SSL tunneling.
  * Fix ``bzr log -r`` to support selecting merge revisions, both
    individually and as part of revision ranges.
  * Don't leave cruft behind when failing to acquire a lockdir.
  * Don't use the '-f' strace option during tests.
  * Warn when setting ``push_location`` to a value that will be
    masked by locations.conf.
  * Fix commit ordering in corner case
  *  Make annotate behave in a non-ASCII world
  * The --lsprof-file option now dumps a text rendering of the
    profiling information if the filename ends in ".txt". It will
    also convert the profiling information to a format suitable for
    KCacheGrind if the output filename ends in ".callgrind". Fixes
    to the lsprofcalltree conversion process by Jean Paul Calderone
    and Itamar were also merged. See
    http://ddaa.net/blog/python/lsprof-calltree.
  * ``info`` now defaults to non-verbose mode, displaying only
    paths and abbreviated format info.  ``info -v`` displays all
    the information formerly displayed by ``info``.
  * ``bzr missing`` now has better option names ``--this`` and
    ``--other``.
  * The internal ``weave-list`` command has become
    ``versionedfile-list``, and now lists knits as well as weaves.
  * Automatic merge base selection uses a faster algorithm that
    chooses better bases in criss-cross merge situations
  * Progress reporting in ``commit`` has been improved. The various
    logical stages are now reported on as follows, namely:
    + Collecting changes [Entry x/y] - Stage n/m 
    + Saving data locally - Stage n/m 
    + Uploading data to master branch - Stage n/m 
    + Updating the working tree - Stage n/m 
    + Running post commit hooks - Stage n/m
    number of stages is adjusted accordingly.
    Each hook that is run after commit is listed with a name (as
    hooks can be slow it is useful feedback).
  * Various operations that are now faster due to avoiding
    unnecessary topological sorts.
  * Make merge directives robust against broken bundles.
  * The lsprof filename note is emitted via trace.note(), not
    standard
  * ``bzrlib`` now exports explicit API compatibility information
    to assist library users and plugins. See the ``bzrlib.api``
    module for details.
  * Remove unnecessary lock probes when acquiring a lockdir.
  * ``bzr --version`` now shows the location of the bzr log file,
    which is especially useful on Windows.
  * -D now supports hooks to get debug tracing of hooks (though its
    currently minimal in nature).
  * Long log format reports deltas on merge revisions. 
  * Make initial push over ftp more resilient.
  * Print a summary of changes for update just like pull does.
  * Add a -Dhpss option to trace smart protocol requests and
    responses.
  * Relocate TestCaseWithRepository to be more central.
  * ``bzrlib.add.smart_add_tree`` will no longer perform glob
    expansion on win32. Callers of the function should do this and
    use the new ``MutableTree.smart_add`` method instead.
  * ``bzrlib.add.glob_expand_for_win32`` is now
    ``bzrlib.win32utils.glob_expand``.
  * ``bzrlib.add.FastPath`` is now private and moved to
    ``bzrlib.mutabletree._FastPath``.
  * ``LockDir.wait`` removed.
  * The ``SmartServer`` hooks API has changed for the
    ``server_started`` and ``server_stopped`` hooks. The first
    parameter is now an iterable of backing URLs rather than a
    single URL. This is to reflect that many URLs may map to the
    external URL of the server. E.g. the server interally may have
    a chrooted URL but also the local file:// URL will be at the
    same location.
  * New SMTPConnection class to unify email handling.
  * Fix documentation of BzrError.
  * Make BzrBadParameter an internal error.
  * Remove use of 'assert False' to raise an exception
    unconditionally.
  * Give a cleaner error when failing to decode knit index entry.
  * TreeConfig would mistakenly search the top level when asked for
    options from a section. It now respects the section argument
    and only searches the specified section.
  * Improve ``make api-docs`` output.
  * Use os.lstat rather than os.stat for osutils.make_readonly and
    osutils.make_writeable. This makes the difftools plugin more
    robust when dangling symlinks are found.
  * New ``-Dlock`` option to log (to ~/.bzr.log) information on
    when lockdirs are taken or released.
  * ``bzrlib`` Hooks are now nameable using ``Hooks.name_hook``.
    This allows a nicer UI when hooks are running as the current
    hook can be displayed.
  * ``Transport.get`` has had its interface made more clear for
    ease of use. Retrieval of a directory must now fail with either
    'PathError' at open time, or raise 'ReadError' on a read.
  * New method ``_maybe_expand_globs`` on the ``Command`` class for
    dealing with unexpanded glob lists - e.g. on the win32
    platform. This was moved from
    ``bzrlib.add._prepare_file_list``.
  * ``bzrlib.add.smart_add`` and ``bzrlib.add.smart_add_tree`` are
    now deprecated in favour of ``MutableTree.smart_add``.
  * New method ``external_url`` on Transport for obtaining the url
    to hand to external processes.
  * Teach windows installers to build pyrex/C extensions.
  * Removed the ``--keep-output`` option from selftest and clean up
    test directories as they're used.  This reduces the IO load
    from running the test suite and cuts the time by about half.
  * Add scenarios as a public attribute on the TestAdapter classes
    to allow modification of the generated scenarios before
    adaption and easier testing.
  * New testing support class ``TestScenarioApplier`` which
    multiplies out a single teste by a list of supplied scenarios.
  * Setting ``repository_to_test_repository`` on a
    repository_implementations test will cause it to be called
    during repository creation, allowing the testing of repository
    classes which are not based around the Format concept. For
    example a repository adapter can be tested in this manner, by
    altering the repository scenarios to include a scenario that
    sets this attribute during the test parameterisation in
    ``bzrlib.tests.repository.repository_implementations``.
  * Clean up many of the APIs for blackbox testing of Bazaar.  The
    standard interface is now self.run_bzr.  The command to run can
    be passed as either a list of parameters, a string containing
    the command line, or (deprecated) varargs parameters.
  * The base TestCase now isolates tests from -D parameters by
    clearing ``debug.debug_flags`` and restores it afterwards.
  * Add a relpath parameter to get_transport methods in test
    framework to avoid useless cloning.


-------------------------------------------------------------------
Wed Jul  4 19:49:09 CEST 2007 - kssingvo@suse.de

- upgrade to version 0.17:
  * Faster status, diff, commit, branch and checkout operations
  * numerous bug fixes
  * better documentation.
  * Fix crash of commit due to wrong lookup of filesystem encoding.
  * Revert logging just to stderr in commit as broke unicode
    filenames.
  * There are two new help topics, working-trees and repositories
    that attempt to explain these concepts
  * Added ``bzr log --limit`` to report a limited number of
    revisions.
  * Revert does not try to preserve file contents that were
    originally produced by reverting to a historical revision.
  * ``bzr log --short`` now includes ``[merge]`` for revisions
    which have more than one parent. This is a small improvement to
    help understanding what changes have occurred
  * TreeTransform avoids many renames when contructing large trees,
    improving speed. 3.25x speedups have been observed for
    construction of kernel-sized-trees, and checkouts are 1.28x
    faster.
  * Commit on large trees is now faster. In my environment, a
    commit of a small change to the Mozilla tree (55k files) has
    dropped from 66 seconds to 32 seconds. For a small tree of 600
    files, commit of a small change is 33% faster.
  * Clean up the ``WorkingTree4._iter_changes()`` internal loops as
    well as ``DirState.update_entry()``. This optimizes the core
    logic for ``bzr diff`` and ``bzr status`` significantly
    improving the speed of both.
  * The tutorial has been improved.
  * Better error message for selected file commit of merges.
  * Updated bash completion.
  * ``bzr push`` should only connect to the remote location one
    time. We have been connecting 3 times because we forget to pass
    around the Transport object. This adds
    ``BzrDir.clone_on_transport()``, so that we can pass in the
    Transport that we already have.
  * ``DirState.set_state_from_inventory()`` needs to properly order
    based on split paths, not just string paths.
  * Let TestUIFactoy encode the password prompt with its own
    stdout.
  * pycurl should take use the range header that takes the range
    hint into account.
  * WorkingTree4.get_file_sha1 no longer raises an exception when
    invoked on a missing file.
  * WorkingTree.remove works correctly with tree references, and
    when pwd is not the tree root.
  * Merge no longer fails when a file is renamed in one tree and
    deleted in the other.
  * ``revision-info`` now accepts dotted revnos, doesn't require a
    tree, and defaults to the last revision
  * Tests no longer fail when BZR_REMOTE_PATH is set in the
    environment.
  * ``bzr branch -r revid:foo`` can be used to branch any revision
    in your repository. (Previously Branch6 only supported
    revisions in your mainline).
  * 'branch lp:projname' now creates ./projname as expected.
  * Rework of LogFormatter API to provide beginning/end of log
    hooks and to encapsulate the details of the revision to be
    logged in a LogRevision object. In long log formats, merge
    revision ids are only shown when --show-ids is specified, and
    are labelled "revision-id:", as per mainline revisions, instead
    of "merged:".
  * New ``BranchBuilder`` API which allows the construction of
    particular histories quickly. Useful for testing and
    potentially other applications too.
- removed HACKING from %doc: no longer existend

-------------------------------------------------------------------
Thu May 10 14:28:03 CEST 2007 - kssingvo@suse.de

- upgrade to version 0.16:
  * Handle when you have 2 directories with similar names, but one
    has a hyphen. (``'abc'`` versus ``'abc-2'``). The
    WT4._iter_changes iterator was using direct comparison and
    ``'abc/a'`` sorts after ``'abc-2'``, but ``('abc', 'a')`` sorts
    before ``('abc-2',)``.
  * Handle when someone renames a file on disk without telling bzr.
    Previously we would report the first file as missing, but not
    show the new unknown file.
  * Avoid error when running hooks after pulling into or pushing
    from a branch bound to a smartserver branch.
  * Handle the case when you delete a file, and then rename another
    file on top of it. Also handle the case of ``bzr rm --keep
    foo``. ``bzr status`` should show the removed file and an
    unknown file in its place.
  * Bundles properly read and write revision properties that have
    an empty value. And when the value is not ASCII.
  * Fix the bzr commit message to be in text mode.
  * Also handle when you rename a file and create a file where it
    used to be.
  * ``WorkingTree4._iter_changes`` should not descend into
    unversioned directories.
  * ``bzr remove`` and ``bzr rm`` will now remove the working file,
    if it could be recovered again. This has been done for
    consistency with svn and the unix rm command. The old
    ``remove`` behaviour has been retained in the new option ``bzr
    remove --keep``, which will just stop versioning the file, but
    not delete it. ``bzr remove --force`` have been added which
    will always delete the files. ``bzr remove`` is also more
    verbose.
  * Merge directives can now be supplied as input to `merge` and
    `pull`, like bundles can.
  * Sending the SIGQUIT signal to bzr, which can be done on Unix by
    pressing Control-Backslash, drops bzr into a debugger. Type
    ``'c'`` to continue.  This can be disabled by setting the
    environment variable ``BZR_SIGQUIT_PDB=0``.
  * selftest now supports --list-only to list tests instead of
    running them.
  * selftest now supports --exclude PATTERN (or -x PATTERN) to
    exclude tests with names that match that regular expression.
  * selftest now supports --randomize SEED to run tests in a random
    order. SEED is typically the value 'now' meaning 'use the
    current time'.
  * New option ``--fixes`` to commit, which stores bug fixing
    annotations as revision properties. Built-in support for
    Launchpad, Debian, Trac and Bugzilla bug trackers.
  * New API, ``bzrlib.bugtracker.tracker_registry``, for adding
    support for other bug trackers to ``fixes``.
  * ``selftest`` has new short options ``-f`` and ``-1``.
  * ``bzrlib.tsort.MergeSorter`` optimizations. Change the inner
    loop into using local variables instead of going through
    ``self._var``. Improves the time to ``merge_sort`` a 10k
    revision graph by approximately 40% (~700->400ms).
  * ``make docs`` now creates a man page at ``man1/bzr.1`` fixing
    bug 107388.
  * ``bzr help`` now provides cross references to other help topics
    using the _see_also facility on command classes. Likewise the
    bzr_man documentation, and the bzr.1 man page also include this
    information.
  * Tags are now included in logs, that use the long log formatter. 
  * ``bzr help`` provides a clearer message when a help topic
    cannot be found.
  * ``bzr help`` now accepts optional prefixes for command help.
    The help for all commands can now be found at ``bzr help
    commands/COMMANDNAME`` as well as ``bzr help COMMANDNAME``
    (which only works for commands where the name is not the same
    as a more general help topic). 
  * ``bzr help PLUGINNAME`` will now return the module docstring
    from the plugin PLUGINNAME.
  * New help topic ``urlspec`` which lists the availables
    transports.
  * doc/server.txt updated to document the default bzr:// port and
    also update the blurb about the hpss' current status.
  * ``bzr serve`` now listens on interface 0.0.0.0 by default,
    making it serve out to the local LAN (and anyone in the world
    that can reach the machine running ``bzr serve``.
  * A new smart server protocol version has been added.  It
    prefixes requests and responses with an explicit version
    identifier so that future protocol revisions can be dealt with
    gracefully.
  * The bzr protocol version 2 indicates success or failure in
    every response without depending on particular commands
    encoding that consistently, allowing future client refactorings
    to be much more robust about error handling.
  * The smart protocol over HTTP client has been changed to always
    post to the same ``.bzr/smart`` URL under the original location
    when it can.  This allows HTTP servers to only have to pass
    URLs ending in .bzr/smart to the smart server handler, and not
    arbitrary ``.bzr/*/smart`` URLs.
  * digest authentication is now supported for proxies and HTTP by
    the urllib based http implementation. Tested against Apache
    2.0.55 and Squid 2.6.5. Basic and digest authentication are
    handled coherently for HTTP and proxy: if the user is provided
    in the url (bzr command line for HTTP, proxy environment
    variables for proxies), the password is prompted for (only
    once). If the password is provided, it is taken into account.
    Once the first authentication is successful, all further
    authentication roundtrips are avoided by preventively setting
    the right authentication header(s).
  * bzrlib API compatability with 0.8 has been dropped, cleaning up
    some code paths.
  * Change the format of chroot urls so that they can be safely
    manipulated by generic url utilities without causing the
    resulting urls to have escaped the chroot. A side effect of
    this is that creating a chroot requires an explicit action
    using a ChrootServer.
  * Deprecate ``Branch.get_root_id()`` because branches don't have
    root ids, rather than fixing bug #96847.
  * ``WorkingTree.apply_inventory_delta`` provides a better
    alternative to ``WorkingTree._write_inventory``.
  * Convenience method ``TestCase.expectFailure`` ensures that
    known failures do not silently pass.
  * ``Transport.local_abspath`` now raises ``NotLocalUrl`` rather
    than ``TransportNotPossible``.
  * New SmartServer hooks facility. There are two initial hooks
    documented in ``bzrlib.transport.smart.SmartServerHooks``. The
    two initial hooks allow plugins to execute code upon server
    startup and shutdown.
  * SmartServer in standalone mode will now close its listening
    socket when it stops, rather than waiting for garbage
    collection. This primarily fixes test suite hangs when a test
    tries to connect to a shutdown server. It may also help improve
    behaviour when dealing with a server running on a specific port
    (rather than dynamically assigned ports).
  * Move most SmartServer code into a new package, bzrlib/smart.
    bzrlib/transport/remote.py contains just the Transport classes
    that used to be in bzrlib/transport/smart.py.
  * urllib http implementation avoid roundtrips associated with 401
    (and 407) errors once the authentication succeeds.
  * urlib http now supports querying the user for a proxy password
    if needed. Realm is shown in the prompt for both HTTP and proxy
    authentication when the user is required to type a password. 
  * Renamed SmartTransport (and subclasses like SmartTCPTransport)
    to RemoteTransport (and subclasses to RemoteTCPTransport, etc).
    This is more consistent with its new home in
    ``bzrlib/transport/remote.py``, and because it's not really a
    "smart" transport, just one that does file operations via
    remote procedure calls.
  * The ``lock_write`` method of ``LockableFiles``, ``Repository``
    and ``Branch`` now accept a ``token`` keyword argument, so that
    separate instances of those objects can share a lock if it has
    the right token. (Andrew Bennetts, Robert Collins)
  * New method ``get_branch_reference`` on ``BzrDir`` allows the
    detection of branch references - which the smart server
    component needs.
  * The Repository API ``make_working_trees`` is now permitted to
    return False when ``set_make_working_trees`` is not implemented
    - previously an unimplemented ``set_make_working_trees``
    implied the result True from ``make_working_trees``. This has
    been changed to accomodate the smart server, where it does not
    make sense (at this point) to ever make working trees by
    default.
  * Command objects can now declare related help topics by having
    _see_also set to a list of related topic.
  * ``bzrlib.help`` now delegates to the Command class for Command
    specific help.
  * New class ``TransportListRegistry``, derived from the Registry
    class, which simplifies tracking the available Transports.
  * New function ``Branch.get_revision_id_to_revno_map`` which will
    return a dictionary mapping revision ids to dotted revnos.
    Since dotted revnos are defined in the context of the branch
    tip, it makes sense to generate them from a ``Branch`` object.
  * Fix the 'Unprintable error' message display to use the repr of
    the exception that prevented printing the error because the str
    value for it is often not useful in debugging (e.g.
    KeyError('foo') has a str() of 'foo' but a repr of
    'KeyError('foo')' which is much more useful.
  * ``urlutils.normalize_url`` now unescapes unreserved characters,
    such as "~".
  * Remove ``--verbose`` from ``bzr bundle``. It didn't work
    anyway. (Robert Widhopf-Fenk, #98591)
  * Remove ``--basis`` from the checkout/branch commands - it
    didn't work properly and is no longer beneficial.
  * Don't produce encoding error when adding duplicate files.
  * Fix ``bzr log <file>`` so it only logs the revisions that
    changed the file, and does it faster.
  * Fix ``InterDirstateTre._iter_changes`` to handle when we come
    across an empty versioned directory, which now has files in it.
  * Teach ``common_ancestor`` to shortcut when the tip of one
    branch is inside the ancestry of the other. Saves a lot of
    graph processing (with an ancestry of 16k revisions, ``bzr
    merge ../already-merged`` changes from 2m10s to 13s).
  * Fix ``show_diff_trees`` to handle the case when a file is
    modified, and the containing directory is renamed. (The file
    path is different in this versus base, but it isn't marked as a
    rename).
  * FTP now works even when the FTP server does not support atomic
    rename.
  * Correct handling in bundles and merge directives of timezones
    with that are not an integer number of hours offset from UTC.
    Always represent the epoch time in UTC to avoid problems with
    formatting earlier times on win32.
  * Typo in the help for ``register-branch`` fixed.
  * "dirstate" and "dirstate-tags" formats now produce branches
    compatible with old versions of bzr.
  * Handle moving a directory when children have been added,
    removed, and renamed.
  * Don't preventively use basic authentication for proxy before
    receiving a 407 error. Otherwise people willing to use other
    authentication schemes may expose their password in the clear
    (or nearly). This add one roundtrip in case basic
    authentication should be used, but plug the security hole.
  * Handle http and proxy digest authentication.
  * Added ``bzrlib.strace.strace`` which will strace a single
    callable and return a StraceResult object which contains just
    the syscalls involved in running it.
  * New test method ``reduceLockdirTimeout`` to drop the default
    (ui-centric) default time down to one suitable for tests.
  * Add new ``vfs_transport_factory`` attribute on tests which
    provides the common vfs backing for both the readonly and
    readwrite transports. This allows the RemoteObject tests to
    back onto local disk or memory, and use the existing
    ``transport_server`` attribute all tests know about to be the
    smart server transport. This in turn allows tests to
    differentiate between 'transport to access the branch', and
    'transport which is a VFS' - which matters in Remote* tests.
  * The ``make_branch_and_tree`` method for tests will now create a
    lightweight checkout for the tree if the
    ``vfs_transport_factory`` is not a LocalURLServer.
  * Branch implementation tests have been audited to ensure that
    all urls passed to Branch APIs use proper urls, except when
    local-disk paths are intended. This is so that tests correctly
    access the test transport which is often not equivalent to
    local disk in Remote* tests. As part of this many tests were
    adjusted to remove dependencies on local disk access.
  * Mark bzrlib.tests and bzrlib.tests.TestUtil as providing
    assertFOO helper functions by adding a ``__unittest`` global
    attribute.
  * Refactored proxy and authentication handling to simplify the
    implementation of new auth schemes for both http and proxy. 
- made necessary adapations in specfile


-------------------------------------------------------------------
Wed Apr  4 12:14:57 CEST 2007 - kssingvo@suse.de

- upgrade to version 0.15:
    * Handle incompatible repositories as a user issue when fetching.
    * Don't give a recommendation to upgrade when branching or 
      checking out a branch that contains an old-format working tree.
    * A warning is now displayed when opening working trees in older 
      formats, to encourage people to upgrade to WorkingTreeFormat4.
    * HTTP redirections are now taken into account when a branch (or a
      bundle) is accessed for the first time. A message is issued at each
      redirection to inform the user. In the past, http redirections were
      silently followed for each request which significantly degraded the
      performances. The http redirections are not followed anymore by
      default, instead a RedirectRequested exception is raised. For bzrlib
      users needing to follow http redirections anyway,
      bzrlib.transport.do_catching_redirections provide an easy transition
      path.
    * Added ``ReadLock.temporary_write_lock()`` to allow upgrading an OS read
      lock to an OS write lock. Linux can do this without unlocking, Win32
      needs to unlock in between.
    * New parameter ``recommend_upgrade`` to BzrDir.open_workingtree 
      to silence (when false) warnings about opening old formats.
    * Fix minor performance regression with bzr-0.15 on pre-dirstate
      trees. (We were reading the working inventory too many times).
    * Take smtp_server from user config into account.
    * Restore Unicode filename handling for versioned and unversioned files.
    * Don't fail during ``bzr commit`` if a file is marked removed, and
      the containing directory is auto-removed.
    * ``bzr status FILENAME`` failed on Windows because of an uncommon
      errno. (``ERROR_DIRECTORY == 267 != ENOTDIR``).
    * ``bzr checkout source`` should create a local branch in the same
      format as source.
    * ``bzr commit`` with a kind change was failing to update the
      last-changed-revision for directories.  The
      InventoryDirectory._unchanged only looked at the parent_id and name,
      ignoring the fact that the kind could have changed, too.
    * ``bzr mv dir/subdir other`` was incorrectly updating files inside
      the directory. So that there was a chance it would break commit,
      etc.
    * Correctly handles mutiple permanent http redirections.
    * New ``merge-directive`` command to generate machine- and human-readable
      merge requests.
    * New ``submit:`` revision specifier makes it easy to diff against the
      common ancestor with the submit location
    * Added support for Putty's SSH implementation.
    * Added ``bzr status --versioned`` to report only versioned files, 
      not unknowns.
    * Merge now autodetects the correct line-ending style for its conflict
      markers.
    * Refactored SSH vendor registration into SSHVendorManager class.
    * New ``--numbered-dirs`` option to ``bzr selftest`` to use
      numbered dirs for TestCaseInTempDir. This is default behavior
      on Windows. Anyone can force named dirs on Windows
      with ``--no-numbered-dirs``.
    * Fix ``RevisionSpec_revid`` to handle the Unicode strings passed in
      from the command line.
    * Fix ``TreeTransform._iter_changes`` when both the source and
      destination are missing.
    * Fix commit of merges with symlinks in dirstate trees.
    * Switch the ``bzr init-repo`` default from --no-trees to --trees. 
    * The default disk format has changed. Please run 'bzr upgrade' in your
      working trees to upgrade. This new default is compatible for network
      operations, but not for local operations. That is, if you have two
      versions of bzr installed locally, after upgrading you can only use the
      bzr 0.15 version. This new default does not enable tags or nested-trees
      as they are incompatible with bzr versions before 0.15 over the network.
    * For users of bzrlib: Two major changes have been made to the working tree
      api in bzrlib. The first is that many methods and attributes, including
      the inventory attribute, are no longer valid for use until one of
      lock_read/lock_write/lock_tree_write has been called, and become invalid
      again after unlock is called. This has been done to improve performance
      and correctness as part of the dirstate development.
    * For users of bzrlib: The attribute 'tree.inventory' should be considered
      readonly. Previously it was possible to directly alter this attribute, or
      its contents, and have the tree notice this. This has been made
      unsupported - it may work in some tree formats, but in the newer dirstate
      format such actions will have no effect and will be ignored, or even
      cause assertions. All operations possible can still be carried out by a
      combination of the tree API, and the bzrlib.transform API.
    * Support for OS Windows 98. Also .bzr.log on any windows system
      saved in My Documents folder.
    * ``bzr mv`` enhanced to support already moved files.
      In the past the mv command would have failed if the source file doesn't
      exist. In this situation ``bzr mv`` would now detect that the file has
      already moved and update the repository accordingly, if the target file
      does exist.
    * A new option ``--after`` has been added so that if two files already
      exist, you could notify Bazaar that you have moved a (versioned) file
      and replaced it with another. Thus in this case ``bzr move --after``
      will only update the Bazaar identifier.
    * ``ls`` now works on treeless branches and remote branches.
    * ``bzr help global-options`` describes the global options.
    * ``bzr pull --overwrite`` will now correctly overwrite checkouts.
    * Files are now allowed to change kind (e.g. from file to symlink).
      Supported by ``commit``, ``revert`` and ``status``
    * ``inventory`` and ``unknowns`` hidden in favour of ``ls``
    * ``bzr help checkouts`` descibes what checkouts are and some possible
      uses of them.
    * A new ``-d`` option to push, pull and merge overrides the default 
      directory.
    * Branch format 6: smaller, and potentially faster than format 5.  Supports
      "append_history_only" mode, where the log view and revnos do not change,
      except by being added to.  Stores policy settings in
      ".bzr/branch/branch.conf".
    * append_only branches:  Format 6 branches may be configured so that log
      view and revnos are always consistent.  Either create the branch using
      "bzr init --append-revisions-only" or edit the config file as descriped
      in docs/configuration.txt.
    * rebind: Format 6 branches retain the last-used bind location, so if you
      "bzr unbind", you can "bzr bind" to bind to the previously-selected
      bind location.
    * Builtin tags support, created and deleted by the ``tag`` command and
      stored in the branch.  Tags can be accessed with the revisionspec
      ``-rtag:``, and listed with ``bzr tags``.  Tags are not versioned 
      at present. Tags require a network incompatible upgrade. To perform this
      upgrade, run ``bzr upgrade --dirstate-tags`` in your branch and
      repositories.
    * The bzr:// transport now has a well-known port number, 4155, which it will
      use by default.
    * Bazaar now looks for user-installed plugins before looking for site-wide
      plugins.
    * ``bzr resolve`` now detects and marks resolved text conflicts.
    * Internally revision ids and file ids are now passed around as utf-8
      bytestrings, rather than treating them as Unicode strings. This has
      performance benefits for Knits, since we no longer need to decode the
      revision id for each line of content, nor for each entry in the index.
      This will also help with the future dirstate format.
    * Reserved ids (any revision-id ending in a colon) are rejected by
      versionedfiles, repositories, branches, and working trees
    * Minor performance improvement by not creating a ProgressBar for
      every KnitIndex we create. (about 90ms for a bzr.dev tree)
    * New easier to use Branch hooks facility. There are five initial hooks,
      all documented in bzrlib.branch.BranchHooks.__init__ - 'set_rh',
      'post_push', 'post_pull', 'post_commit', 'post_uncommit'. These hooks
      fire after the matching operation on a branch has taken place, and were
      originally added for the branchrss plugin.
    * New method ``Branch.push()`` which should be used when pushing from a
      branch as it makes performance and policy decisions to match the UI
      level command ``push``.
    * Add a new method ``Tree.revision_tree`` which allows access to cached
      trees for arbitrary revisions. This allows the in development dirstate
      tree format to provide access to the callers to cached copies of 
      inventory data which are cheaper to access than inventories from the
      repository.
    * New Branch.last_revision_info method, this is being done to allow
      optimization of requests for both the number of revisions and the last
      revision of a branch with smartservers and potentially future branch
      formats.
    * Allow 'import bzrlib.plugins.NAME' to work when the plugin NAME has not
      yet been loaded by load_plugins(). This allows plugins to depend on each
      other for code reuse without requiring users to perform file-renaming
      gymnastics.
    * New Repository method 'gather_stats' for statistic data collection.
      This is expected to grow to cover a number of related uses mainly
      related to bzr info.
    * Log formatters are now managed with a registry.
      ``log.register_formatter`` continues to work, but callers accessing
      the FORMATTERS dictionary directly will not.
    * Allow a start message to be passed to the ``edit_commit_message``
      function.  This will be placed in the message offered to the user
      for editing above the separator. It allows a template commit message
      to be used more easily.
    * ``GPGStrategy.sign()`` will now raise ``BzrBadParameterUnicode`` if
      you pass a Unicode string rather than an 8-bit string. Callers need
      to be updated to encode first.
    * Branch.push, pull, merge now return Result objects with information
      about what happened, rather than a scattering of various methods.  These
      are also passed to the post hooks.
    * File formats and architecture is in place for managing a forest of trees
      in bzr, and splitting up existing trees into smaller subtrees, and
      finally joining trees to make a larger tree. This is the first iteration
      of this support, and the user-facing aspects still require substantial
      work.  If you wish to experiment with it, use ``bzr upgrade
      --dirstate-with-subtree`` in your working trees and repositories.
      You can use the hidden commands ``split`` and ``join`` and to create
      and manipulate nested trees, but please consider using the nested-trees
      branch, which contains substantial UI improvements, instead.
      http://code.aaronbentley.com/bzr/bzrrepo/nested-trees/
    * ``bzr annotate`` now uses dotted revnos from the viewpoint of the
      branch, rather than the last changed revision of the file.
    * Lock operations no longer hang if they encounter a permission problem.
    * ``bzr push`` can resume a push that was canceled before it finished.
      Also, it can push even if the target directory exists if you supply
      the ``--use-existing-dir`` flag.
    * Fix http proxy authentication when user and an optional
      password appears in the ``*_proxy`` vars.
    * ``bzr log branch/file`` works for local treeless branches
    * Fix problem with UNC paths on Windows 98.
    * Searching location of CA bundle for PyCurl in env variable
      (CURL_CA_BUNDLE), and on win32 along the PATH.
    * ``bzr init`` works with unicode argument LOCATION.
    * Raise DependencyNotPresent if pycurl do not support https.
    * Invalid proxy env variables should not cause a traceback.
    * Ignore patterns normalised to use '/' path separator.
    * bzr rocks. It sure does! Fix case.
    * Fix bzrtools shelve command for removed lines beginning with "--"
    * New ``--first`` option to ``bzr selftest`` to run specified tests
      before the rest of the suite. 
    * ``bzr help global-options`` describes the global options.
    * Skip documentation generation tests if the tools to do so are not
      available. Fixes running selftest for installled copies of bzr. 
    * Fix the code that discovers whether bzr is being run from it's
      working tree to handle the case when it isn't but the directory
      it is in is below a repository.
    * New connection: ``bzr+http://`` which supports tunnelling the smart
      protocol over an HTTP connection. If writing is enabled on the bzr
      server, then you can write over the http connection.
    * Aliases now support quotation marks, so they can contain whitespace
    * PyCurlTransport now use a single curl object. By specifying explicitly
      the 'Range' header, we avoid the need to use two different curl objects
      (and two connections to the same server).
    * ``bzr commit`` does not prompt for a message until it is very likely to
      succeed.
    * ``bzr conflicts`` now takes --text to list pathnames of text conflicts
    * Fix ``iter_lines_added_or_present_in_versions`` to use a set instead
      of a list while checking if a revision id was requested. Takes 10s
      off of the ``fileids_affected_by_revision_ids`` time, which is 10s
      of the ``bzr branch`` time. Also improve ``fileids_...`` time by
      filtering lines with a regex rather than multiple ``str.find()``
      calls. (saves another 300ms)
    * Policy can be set for each configuration key. This allows keys to be
      inherited properly across configuration entries. For example, this
      should enable you to do::
        [/home/user/project]
        push_location = sftp://host/srv/project/
        push_location:policy = appendpath
      And then a branch like ``/home/user/project/mybranch`` should get an
      automatic push location of ``sftp://host/srv/project/mybranch``.
    * Added ``bzr status --short`` to make status report svn style flags
      for each file.  For example::
        $ bzr status --short
        A  foo
        A  bar
        D  baz
        ?  wooley
    * 'bzr selftest --clean-output' allows easily clean temporary tests 
      directories without running tests.
    * ``bzr help hidden-commands`` lists all hidden commands.
    * ``bzr merge`` now has an option ``--pull`` to fall back to pull if
      local is fully merged into remote.
    * ``bzr help formats`` describes available directory formats.
    * A few tweaks directly to ``fileids_affected_by_revision_ids`` to
      help speed up processing, as well allowing to extract unannotated
      lines. Between the two ``fileids_affected_by_revision_ids`` is
      improved by approx 10%.
    * Change Revision serialization to only write out millisecond
      resolution. Rather than expecting floating point serialization to
      preserve more resolution than we need.
    * Test suite ends cleanly on Windows.
    * When 'encoding_type' attribute of class Command is equal to 'exact', 
      force sys.stdout to be a binary stream on Windows, and therefore
      keep exact line-endings (without LF -> CRLF conversion).
    * Single-letter short options are no longer globally declared.
    * Before using detected user/terminal encoding bzr should check
      that Python has corresponding codec.
    * Formats for end-user selection are provided via a FormatRegistry
    * ``bzr missing --verbose`` was showing adds/removals in the wrong
      direction.
    * ``bzr annotate`` now defaults to showing dotted revnos for merged
      revisions. It cuts them off at a depth of 12 characters, but you can
      supply ``--long`` to see the full number. You can also use
      ``--show-ids`` to display the original revision ids, rather than
      revision numbers and committer names.
    * bzr now supports Win32 UNC path (e.g. \\HOST\path). 
    * Win32-specific: output of cat, bundle and diff commands don't mangle
      line-endings
    * Replace broken fnmatch based ignore pattern matching with custom pattern
      matcher.
    * pycurl and urllib can detect short reads at different places. Update
      the test suite to test more cases. Also detect http error code 416
      which was raised for that specific bug. Also enhance the urllib
      robustness by detecting invalid ranges (and pycurl's one by detecting
      short reads during the initial GET).
    * The urllib connection sharing interacts badly with urllib2
      proxy setting (the connections didn't go thru the proxy
      anymore). Defining a proper ProxyHandler solves the
      problem.
    * Use urlutils to generate relative URLs, not osutils 
    * ``bzr status`` in a readonly directory should work without giving
      lots of errors.
    * Mention the revisionspec topic for the revision option help.
    * Allow plugins import from zip archives.

-------------------------------------------------------------------
Wed Jan 24 21:21:04 CET 2007 - aj@suse.de

- Remove obsolete require on python-elementtree.

-------------------------------------------------------------------
Wed Jan 10 08:41:56 CET 2007 - cthiel@suse.de

- require python-xml

-------------------------------------------------------------------
Tue Jan  9 14:41:48 CET 2007 - cthiel@suse.de

- Upgrade to Version 0.13:
  o IMPROVEMENTS:
    * New command ``bzr remove-tree`` allows the removal of the working
      tree from a branch.
    * urllib uses shared keep-alive connections, so http 
      operations are substantially faster.
    * ``bzr export`` allows an optional branch parameter, to export a bzr
      tree from some other url. For example:
      ``bzr export bzr.tar.gz http://bazaar-vcs.org/bzr/bzr.dev``
    * Added ``bzr help topics`` to the bzr help system. This gives a
      location for general information, outside of a specific command.
      This includes updates for ``bzr help revisionspec`` the first topic
      included.
    * WSGI-compatible HTTP smart server.  See ``doc/http_smart_server.txt``.
    * Knit files will now cache full texts only when the size of the
      deltas is as large as the size of the fulltext. (Or after 200
      deltas, whichever comes first). This has the most benefit on large
      files with small changes, such as the inventory for a large project.
      (eg For a project with 2500 files, and 7500 revisions, it changes
      the size of inventory.knit from 11MB to 5.4MB)
  o INTERNALS:
    * New -D option given before the command line turns on debugging output
      for particular areas.  -Derror shows tracebacks on all errors.
    * Clean up ``bzr selftest --benchmark bundle`` to correct an import,
      and remove benchmarks that take longer than 10min to run.
    * Use ``time.time()`` instead of ``time.clock()`` to decide on
      progress throttling. Because ``time.clock()`` is actually CPU time,
      so over a high-latency connection, too many updates get throttled.
    * ``MemoryTransport.list_dir()`` would strip the first character for
      files or directories in root directory.
    * New ``ChrootTransportDecorator``, accessible via the ``chroot+`` url
      prefix.  It disallows any access to locations above a set URL.

-------------------------------------------------------------------
Mon Oct 23 14:54:40 CEST 2006 - kssingvo@suse.de

- Upgrade to Version 0.11:
  * Smart server transport test failures on windows fixed.
  * Test suite hangs on windows fixed.
  * Commit performance regression fixed.
  * Knit files now wait to create their contents until the first
    data is added.
  * When an entire subtree has been deleted, commit will now report
    that just the top of the subtree has been deleted, rather than
    reporting all the individual items.
  * Commit performs one less XML parse.
  * ``bzr checkout`` now operates on readonly branches as well as
    readwrite branches.
  * ``bzr bind`` no longer synchronises history with the master
    branch.
  * ``bzrlib.lazy_import.lazy_import`` function to create on-demand
    objects.
  * Support bzr:// and bzr+ssh:// urls to work with the new
    RPC-based transport which will be used with the upcoming
    high-performance smart server.
  * New command ``bzr version-info`` which can be used to get a
    summary of the current state of the tree.
  * 'bzr inventory [FILE...]' allows restricting the file list to a
    specific set of files.
  * Don't abort when annotating empty files
  * Add ``Stanza.to_unicode()`` which can be passed to another
    Stanza when nesting stanzas.
  * Transform._set_mode() needs to stat the right file.
  * Raise WeaveFormatError rather than StopIteration when trying to
    read an empty Weave file.
  * Don't access e.code for generic URLErrors, only HTTPErrors have
    .code.
  * Handle boundary="" lines properly to allow access through a
    Squid proxy.
  * revert now removes newly-added directories
  * ``bzr upgrade sftp://`` shouldn't fail to upgrade v6 branches
    if there isn't a working tree.
  * Give nicer error messages when a user supplies an invalid
    --revision parameter.
  * Handle when LANG is not recognized by python.
  * Don't use preexec_fn on win32, as it is not supported by
    subprocess.
  * Skip specific tests when the dependencies aren't met.
  * Fallback to Paramiko properly, if no ``ssh`` executable exists
    on the system.
  * ``Branch.bind(other_branch)`` no longer takes a write lock on
    the other branch, and will not push or pull between the two
    branches.
  * When creating a tarball or zipfile export, export unicode names
    as utf-8 paths.
  * When committing, only files that exist in working tree or basis
    tree may be specified
  * Fixes to run on Python 2.5
  * TestCaseInTempDir now creates a separate directory for HOME,
    rather than having HOME set to the same location as the working
    directory.
  * run_bzr_subprocess() can take an optional 'env_changes={}'
    parameter, which will update os.environ inside the spawned
    child.
  * Refactor SFTP vendors to allow easier re-use when ssh is used.
  * Transport.list_dir() and Transport.iter_files_recursive()
    should always return urlescaped paths.
  * New utility function symbol_versioning.deprecation_string.
  * New TestCase helper applyDeprecated.
  * Transport.append and Transport.put have been deprecated in
    favor of .append_bytes, .append_file, .put_bytes, and
    .put_file.
  * WorkingTree has a new api ``unversion`` which allow the
    unversioning of entries by their file id.
  * WorkingTree.pending_merges is deprecated.
  * WorkingTree has a new lock_tree_write method which locks the
    branch for read rather than write.
  * All WorkingTree methods which write to the tree, but not to the
    branch have been converted to use ``needs_tree_write_lock``
    rather than ``needs_write_lock``.
  * Special case importing the standard library 'copy' module.
  * WorkingTree has a new parent class MutableTree which represents
    the specialisations of Tree which are able to be altered.
  * New methods mkdir and put_file_bytes_non_atomic on MutableTree
    that mutate the tree and its contents.
  * Transport behaviour at the root of the URL is now defined and
    tested.
  * 'merge' now takes --uncommitted, to apply uncommitted changes
    from a tree.
  * 'bzr add --file-ids-from' can be used to specify another path
    to use for creating file ids, rather than generating all new
    ones.
  * ``bzr selftest --benchmark`` now allows a ``--cache-dir``
    parameter.
  * Inverse forms are provided for all boolean options.
  * Serialize out Inventories directly, rather than using
    ElementTree.
  * Help diffutils 2.8.4 get along with binary tests
  * Change LockDir so that if the lock directory doesn't exist when
    lock_write() is called, an attempt will be made to create it.
  * ``bzr uncommit`` preserves pending merges.
  * Active FTP transport now works as intended.
  * Really fix mutter() so that it won't ever raise a UnicodeError.
  * Change Command handle to allow Unicode command and options.
  * Handle TZ=UTC properly when reading/writing revisions.
  * Use GPG_TTY to allow gpg --cl to work with gpg-agent in a
    pipeline.
  * External diff does the right thing for binaries even in foreign
    languages.
  * Testament handles more cases when content is unicode.
  * The bzr selftest was failing on installed versions due to a bug
    in a new test helper.
  * ``bzrlib.cache_utf8`` contains ``encode()`` and ``decode()``
    functions which can be used to cache the conversion between
    utf8 and Unicode.
  * ``setup.py`` now searches the filesystem to find all packages
    which need to be installed.

-------------------------------------------------------------------
Sat Sep 23 16:45:52 CEST 2006 - aj@suse.de

- Fix build with python 2.5.

-------------------------------------------------------------------
Thu Aug 17 17:43:56 CEST 2006 - kssingvo@suse.de

- fixed typo in Requires:
- removed rm BUILD_ROOT in %install
- removed version from python directory in %files

-------------------------------------------------------------------
Thu Aug 17 15:06:30 CEST 2006 - kssingvo@suse.de

- initial version: 0.9

