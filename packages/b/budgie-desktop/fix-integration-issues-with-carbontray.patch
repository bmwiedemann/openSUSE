From 9e119a0fec06554f9ef90a19f47e309372a33ad5 Mon Sep 17 00:00:00 2001
From: Campbell Jones <git@serebit.com>
Date: Mon, 13 Jul 2020 16:19:23 -0400
Subject: [PATCH 1/2] Fix integration issues with carbontray

---
 src/applets/tray/TrayApplet.vala    | 152 +++++++++++++++++++---------
 src/applets/tray/carbontray/child.c |   2 +-
 src/applets/tray/carbontray/tray.c  |  22 +++-
 3 files changed, 123 insertions(+), 53 deletions(-)

diff --git a/src/applets/tray/TrayApplet.vala b/src/applets/tray/TrayApplet.vala
index 22fd6c3d..410d9cea 100644
--- a/src/applets/tray/TrayApplet.vala
+++ b/src/applets/tray/TrayApplet.vala
@@ -28,12 +28,60 @@ public class TraySettings : Gtk.Grid {
     }
 }
 
+private class TrayErrorIcon {
+    public Budgie.PopoverManager manager;
+    public Budgie.Popover popover;
+    private Gtk.EventBox parent;
+
+    public TrayErrorIcon(Gtk.EventBox parent, string text) {
+        this.parent = parent;
+
+        parent.add(new Gtk.Image.from_icon_name("gtk-dialog-error", Gtk.IconSize.LARGE_TOOLBAR));
+
+        popover = new Budgie.Popover(parent);
+        popover.border_width = 8;
+
+        Gtk.Label label = new Gtk.Label(text);
+        label.show();
+        popover.add(label);
+        popover.hide();
+
+        parent.button_press_event.connect(on_button_press);
+    }
+
+    ~TrayErrorIcon() {
+        parent.button_press_event.disconnect(on_button_press);
+    }
+
+    public void register(Budgie.PopoverManager newManager) {
+        manager = newManager;
+        manager.register_popover(parent, popover);
+    }
+
+    private bool on_button_press(Gdk.EventButton event) {
+        if (event.button != 1) {
+            return Gdk.EVENT_PROPAGATE;
+        }
+        if (popover.get_visible()) {
+            popover.hide();
+        } else {
+            manager.show_popover(parent);
+        }
+        return Gdk.EVENT_STOP;
+    }
+}
+
 public class TrayApplet : Budgie.Applet {
     public string uuid { public set; public get; }
     private Carbon.Tray tray;
     private Gtk.EventBox box;
     private Settings? settings;
     private Gtk.Orientation orient;
+    private Gdk.X11.Screen screen;
+
+    // this property prevents the registration of more than one carbontray instance
+    private static string activeUuid = null;
+    private TrayErrorIcon errorIcon;
 
     public TrayApplet(string uuid) {
         Object(uuid: uuid);
@@ -41,66 +89,61 @@ public class TrayApplet : Budgie.Applet {
         box = new Gtk.EventBox();
         add(box);
 
-        hexpand = false;
-        vexpand = false;
-        box.vexpand = false;
-        box.hexpand = false;
-
         settings_schema = "com.solus-project.tray";
         settings_prefix = "/com/solus-project/budgie-panel/instance/tray";
 
         settings = get_applet_settings(uuid);
-        settings.changed.connect(on_settings_change);
-
-        maybe_integrate_tray();
-    }
-
-    public override bool supports_settings() {
-        return true;
-    }
-
-    public override Gtk.Widget? get_settings_ui() {
-        return new TraySettings(get_applet_settings(uuid));
+        settings.changed.connect((key) => {
+            if (key == "spacing" && tray != null) {
+                tray.set_spacing(settings.get_int(key));
+            }
+        });
+
+        if (activeUuid == null) {
+            activeUuid = uuid;
+            screen = (Gdk.X11.Screen) get_screen();
+
+            screen.monitors_changed.connect(reintegrate_tray);
+            parent_set.connect((old_parent) => {
+                reintegrate_tray();
+            });
+
+            maybe_integrate_tray();
+        } else {
+            // there's already an active tray, create an informative icon with a popover
+            errorIcon = new TrayErrorIcon(box, _("Only one instance of the System Tray can be active at a time."));
+            show_all();
+        }
     }
 
-    void on_settings_change(string key) {
-        if (key != "spacing") {
-            return;
-        }
-        tray.set_spacing(settings.get_int(key));
+    ~TrayApplet() {
+        if (activeUuid == uuid) activeUuid = null;
     }
 
-    public override void panel_position_changed(Budgie.PanelPosition position) {
-        if (position == Budgie.PanelPosition.LEFT || position == Budgie.PanelPosition.RIGHT) {
-            orient = Gtk.Orientation.VERTICAL;
-        } else {
-            orient = Gtk.Orientation.HORIZONTAL;
+    private void reintegrate_tray() {
+        if (tray != null) {
+            tray.remove_from_container(box);
+            tray.dispose();
+            tray = null;
         }
 
-        if (tray == null) {
-            return;
+        if (activeUuid == null || activeUuid == uuid) {
+            maybe_integrate_tray();
         }
-
-        tray.unregister();
-        tray.remove_from_container(box);
-        tray = null;
-        maybe_integrate_tray();
     }
 
-    protected void maybe_integrate_tray() {
-        if (tray != null) {
-            return;
-        }
-
+    private void maybe_integrate_tray() {
         tray = new Carbon.Tray(orient, 24, settings.get_int("spacing"));
 
         if (tray == null) {
-            var label = new Gtk.Label("Tray unavailable");
-            box.add(label);
-            label.show_all();
+            activeUuid = null;
+            errorIcon = new TrayErrorIcon(box, _("The System Tray failed to initialize."));
+            show_all();
             return;
         }
 
+        activeUuid = uuid;
+
         switch (orient) {
         case Gtk.Orientation.HORIZONTAL:
             halign = Gtk.Align.START;
@@ -118,14 +161,29 @@ public class TrayApplet : Budgie.Applet {
 
         tray.add_to_container(box);
         show_all();
-        tray.register((Gdk.X11.Screen) get_screen());
+        tray.register(screen);
+    }
 
-        var win = get_toplevel();
-        if (win == null) {
-            return;
+    public override void panel_position_changed(Budgie.PanelPosition position) {
+        if (position == Budgie.PanelPosition.LEFT || position == Budgie.PanelPosition.RIGHT) {
+            orient = Gtk.Orientation.VERTICAL;
+        } else {
+            orient = Gtk.Orientation.HORIZONTAL;
         }
-        win.queue_draw();
-        queue_resize();
+
+        reintegrate_tray();
+    }
+
+    public override void update_popovers(Budgie.PopoverManager? manager) {
+        if (errorIcon != null) errorIcon.register(manager);
+    }
+
+    public override bool supports_settings() {
+        return true;
+    }
+
+    public override Gtk.Widget? get_settings_ui() {
+        return new TraySettings(get_applet_settings(uuid));
     }
 }
 
diff --git a/src/applets/tray/carbontray/child.c b/src/applets/tray/carbontray/child.c
index ccd22699..f615d489 100644
--- a/src/applets/tray/carbontray/child.c
+++ b/src/applets/tray/carbontray/child.c
@@ -54,7 +54,7 @@ CarbonChild* carbon_child_new(int size, GdkScreen *screen, Window iconWindow) {
 	int error = gdk_x11_display_error_trap_pop(display);
 
 	if (result == 0) {
-		g_warning("Failed to get icon window attributes");
+		g_info("Failed to populate icon window attributes for tray icon");
 		return NULL;
 	}
 
diff --git a/src/applets/tray/carbontray/tray.c b/src/applets/tray/carbontray/tray.c
index 60092fa3..feabd9e5 100644
--- a/src/applets/tray/carbontray/tray.c
+++ b/src/applets/tray/carbontray/tray.c
@@ -33,6 +33,7 @@ static unsigned int message_sent_signal;
 
 static void carbon_tray_init(CarbonTray*);
 static void carbon_tray_class_init(CarbonTrayClass*);
+static void carbon_tray_dispose(GObject*);
 static void carbon_tray_finalize(GObject*);
 static int carbon_tray_draw(GtkWidget*, cairo_t*);
 
@@ -143,6 +144,10 @@ bool carbon_tray_register(CarbonTray *tray, GdkScreen *screen) {
 }
 
 void carbon_tray_unregister(CarbonTray *tray) {
+	if (GTK_IS_WIDGET(tray->invisible) == FALSE) {
+		return;
+	}
+
 	GtkWidget *invisible = tray->invisible;
 	GdkDisplay *display = gtk_widget_get_display(invisible);
 	GdkWindow *owner = gdk_selection_owner_get_for_display(display, tray->selectionAtom);
@@ -178,6 +183,7 @@ static void carbon_tray_init(CarbonTray* self) {
 
 static void carbon_tray_class_init(CarbonTrayClass *klass) {
 	GObjectClass *gobjectClass = G_OBJECT_CLASS(klass);
+	gobjectClass->dispose = carbon_tray_dispose;
 	gobjectClass->finalize = carbon_tray_finalize;
 
 	g_signal_new("message-sent", G_OBJECT_CLASS_TYPE(klass), G_SIGNAL_RUN_LAST,
@@ -190,6 +196,10 @@ static void carbon_tray_class_init(CarbonTrayClass *klass) {
 		  G_TYPE_LONG);
 }
 
+static void carbon_tray_dispose(GObject *object) {
+	carbon_tray_unregister(CARBON_TRAY(object));
+}
+
 static void carbon_tray_finalize(GObject *object) {
 	CarbonTray *tray = CARBON_TRAY(object);
 
@@ -217,11 +227,15 @@ static GdkFilterReturn window_filter(GdkXEvent *xev, GdkEvent *event, void *user
 	// event goes unused
 	(void) event;
 
-	XEvent *xevent =(XEvent*) xev;
-	CarbonTray *tray =(CarbonTray*) userData;
+	XEvent *xevent = (XEvent*) xev;
+	CarbonTray *tray = (CarbonTray*) userData;
+
+	if (GTK_IS_WIDGET(tray->invisible) == FALSE) {
+		return GDK_FILTER_CONTINUE;
+	}
 
 	if (xevent->type == ClientMessage) {
-		XClientMessageEvent *xclient =(XClientMessageEvent*) xevent;
+		XClientMessageEvent *xclient = (XClientMessageEvent*) xevent;
 
 		if (xclient->message_type == tray->opcodeAtom) {
 			switch(xclient->data.l[1]) {
@@ -256,9 +270,7 @@ static void handle_dock_request(CarbonTray *tray, XClientMessageEvent *xevent) {
 
 	/* create the socket */
 	CarbonChild *child = carbon_child_new(tray->iconSize, gtk_widget_get_screen(tray->invisible), window);
-
 	if (child == NULL) {
-		g_warning("Failed to resolve system tray icon.");
 		return;
 	}
 

From 8687912ad1ea9b6514b996255f5ce7a2dbfcac0e Mon Sep 17 00:00:00 2001
From: Campbell Jones <git@serebit.com>
Date: Tue, 14 Jul 2020 13:15:49 -0400
Subject: [PATCH 2/2] Improve conciseness, and add CSS classes to system tray

---
 src/applets/tray/TrayApplet.vala | 10 +++++-----
 1 file changed, 5 insertions(+), 5 deletions(-)

diff --git a/src/applets/tray/TrayApplet.vala b/src/applets/tray/TrayApplet.vala
index 410d9cea..8b8a1f68 100644
--- a/src/applets/tray/TrayApplet.vala
+++ b/src/applets/tray/TrayApplet.vala
@@ -39,7 +39,7 @@ private class TrayErrorIcon {
         parent.add(new Gtk.Image.from_icon_name("gtk-dialog-error", Gtk.IconSize.LARGE_TOOLBAR));
 
         popover = new Budgie.Popover(parent);
-        popover.border_width = 8;
+        popover.get_style_context().add_class("system-tray-popover");
 
         Gtk.Label label = new Gtk.Label(text);
         label.show();
@@ -86,6 +86,8 @@ public class TrayApplet : Budgie.Applet {
     public TrayApplet(string uuid) {
         Object(uuid: uuid);
 
+        get_style_context().add_class("system-tray-applet");
+
         box = new Gtk.EventBox();
         add(box);
 
@@ -93,10 +95,8 @@ public class TrayApplet : Budgie.Applet {
         settings_prefix = "/com/solus-project/budgie-panel/instance/tray";
 
         settings = get_applet_settings(uuid);
-        settings.changed.connect((key) => {
-            if (key == "spacing" && tray != null) {
-                tray.set_spacing(settings.get_int(key));
-            }
+        settings.changed["spacing"].connect((key) => {
+            if (tray != null) tray.set_spacing(settings.get_int("spacing"));
         });
 
         if (activeUuid == null) {
