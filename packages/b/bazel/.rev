<revisionlist>
  <revision rev="1" vrev="1">
    <srcmd5>b264234749dedbae3247ae8b7d4caa0a</srcmd5>
    <version>0.18.0</version>
    <time>1542123342</time>
    <user>dimstar_suse</user>
    <comment>- Ensure neutrality of description and summary
- Stop overriding _disable_source_fetch
- Remove unnecessary comments
- Update to version 0.18.0:
  * Include also ext jars in the bootclasspath jar.
  * Fix toolchain_java9 on --host_javabase= after
  * Release notes: fix markdown
  * Fix NestHost length computation
  * Don't rethrow any remote cache failures on either download or
    upload, only warn. Added more tests.
  * Fix broken IdlClassTest on Bazel's CI.
  * Fix the Xcode version detection which got broken by the
    upgrade to Xcode 10.0.
  * Temporarily restore processing of workspace-wide
    tools/bazel.rc file.
  * New bazelrc file list.
  * .bazelignore is now fully functional.
  * The startup flag --host_javabase has been renamed to
    --server_javabase to avoid confusion with the build flag
    --host_javabase.
  * The Android resource processing pipeline now supports
    persistence via worker processes. Enable it with
    --persistent_android_resource_processor. A 50% increase was
    observed in build speed for clean local builds and up to 150%
    increase in build speed for incremental local builds.
  * In-memory package //tools/defaults has been removed
    (controlled by --incompatible_disable_tools_defaults_package
    flag).
  * Late bound option defaults (typical example was the --compiler
    flag, when it was not specified, itâ€™s value was computed using
    the CROSSTOOL) are removed (controlled by
    --incompatible_disable_late_bound_option_defaults flag).
  * Depsets are no longer accepted in user_compile_flags and
    user_link_flags in the C++ toolchain API (controlled by
    --incompatible_disable_depset_in_cc_user_flags flag) affects
    C++ users.
  * CROSSTOOL is no longer consulted when selecting C++ toolchain
    (controlled by
    --incompatible_disable_cc_toolchain_label_from_crosstool_proto
    flag).
  * C++ specific Make variables are no longer passed from the
    CppConfiguration, but from the C++ toolchain (controlled by
    --incompatible_disable_cc_configuration_make_variables flag).
  * Skylark api accessing C++ toolchain in ctx.fragments.cpp is
    removed (controlled by
    --incompatible_disable_legacy_cpp_toolchain_skylark_api flag).
  * cc_binary link action no longer hardcodes -static-libgcc for
    toolchains that support embedded runtimes (guarded by
    --experimental_dont_emit_static_libgcc temporarily). Proper
    deprecation using --incompatible flags will follow.
  * Future versions of Bazel will require a locally installed JDK
    for Java development. Previously Bazel would fall back to using
    the embedded --server_javabase if no JDK as available. Pass
    --incompatible_never_use_embedded_jdk_for_javabase to disable
    the legacy behaviour.
  * --javacopt= no longer affects compilations of tools that are
    executed during the build; use --host_javacopt= to change
    javac flags in the host configuration.
  * objc_library now supports the module_name attribute.
  * Support fileset expansion in ctx.actions.args(). Controlled by
--incompatible_expand_directories.
  * --windows_exe_launcher is deprecated, this flag will be removed
soon. Please make sure you are not using it.
  * Bazel now supports the symlink runfiles tree on Windows with
    --experimental_enable_runfiles flag.
  * A new experimental option --experimental_ui_deduplicate has
    been added. It causes the UI to attempt to deduplicate
    messages from actions to keep the console output cleaner.
  * Add --modify_execution_info, a flag to customize action
    execution info.
  * Add ExecutionInfo to aquery output for ExecutionInfoSpecifier
    actions.
  * When computing --instrumentation_filter, end filter patterns
    with &quot;[/:]&quot; to match non-top-level packages exactly and treat
    top-level targets consistently.
  * Added the bazel info server_log command, which obtains the
    main Bazel server log file path. This can help debug Bazel
    issues.
  * aapt shrink resources now properly respect filter
    configurations.
- Update to version 0.17.2:
  * Update checker framework dataflow and javacutil versions
  * Stop using --release in versioned java_toolchains
  * make_deb: Add new empty line in the end of conffiles file
  * Properly mark configuration files in the Debian package.
  * Add flag --incompatible_symlinked_sandbox_expands_tree_
    artifacts_in_runfiles_tree.
  * Update protobuf to 3.6.1 -- add new files
  * Update protobuf to 3.6.1 -- update references
  * Update protobuf to 3.6.1 -- remove 3.6.0 sources
  * Fix protobuf in the WORKSPACE
  * Revert &quot;Update to JDK 10 javac&quot;
  * Fix tests on JDK 9 and 10
  * Fix more tests on JDK 9 and 10
  * Add ubuntu1804_nojava, ubuntu1804_java9, ubuntu1804_java10 to
    postsubmit.
  * Disable Android shell tests on the &quot;nojava&quot; platform.
  * Update bazel_toolchains to latest release.
  * Windows: fix writing java.log
  * Fix toolchain_java9 on --host_javabase=
  * Include also ext jars in the bootclasspath jar.
  * Do not fail the build when gcov is not installed
  * Ignore unrecognized VM options in desugar.sh, such as the JVM
    9 flags to silence warnings.
  * In the future, Bazel will expand tree artifacts in runfiles,
    too,which causes the sandbox to link each file individually
    into the sandbox directory, instead of symlinking the entire
    directory. In this release, the behavior is not enabled by
    default yet. Please try it out via --incompatible_symlinked_
    sandbox_expands_tree_artifacts_in_runfiles_tree and let us know
    if it causes issues. If everything looks good, this behavior
    will become the default in a following release.
- Update to version 0.15.0:
  + Bazel now always runs binaries in with &quot;bazel run&quot; in
    interactive mode. The &quot;--nodirect_run&quot; command line option is
    now a no-op.
  + &quot;bazel run --noas_test&quot; is not supported anymore.
  + Indentation on the first line of a file was previously ignored,
    this is now fixed.
  + New features:
    * C++,runfiles: to access data-dependencies (runfiles) in C++
      programs, use the runfiles library built into Bazel.
  + Bazel now allows almost all 7-bit ASCII characters in labels.
  + Remove vestigial java_plugin.data attribute
  + Bazel supports including select Java 8 APIs into Android apps
    targeting pre-Nougat Android devices with
    --experimental_desugar_java8_libs
  + Flag --incompatible_disable_glob_tracking is removed.
  + SkyQuery's rbuildfiles now returns targets corresponding to
    broken packages.
  + Introduce build support for providing cache prefetch hints.
  + Update the skylark DefaultInfo documentation to spell out
    runfiles, data_runfiles and default_runfiles.
  + An internal action for symlinking runfiles will use Command
    instead of a Spawns. This should have no functional chages; the
    only user visible consequence should be that the internal
    action is no longer be included in statistics when calculating
    processes count.
  + --batch is deprecated
  + Execution strategies line no longer handles differently the
    case where all processes have the same strategy.
  + The --experimental_remote_spawn_cache flag is now enabled by
    default, and remote caching no longer needs --*_strategy=remote
    flags (it will fail if they are specified).
  + android_binary.aapt_version='aapt2' now supports en_XA and
    ar_XB.
  + With --incompatible_no_support_tools_in_action_inputs enabled,
    Skylark action inputs are no longer scanned for tools. Move any
    such inputs to the newly introduced 'tools' attribute.
- Changes from version 0.14.1:
   + Critical fixes for:
     * Sometime hangs before running any actions,
       (gh#bazelbuild/bazel/#5336).
     * Has no way to unset --disk_cache flag (interferes with
       remote build testing), (gh#bazelbuild/bazel/#5308).
- Changes from version 0.14.0:
  + Add --incompatible_disallow_legacy_javainfo flag.
  + Added flag --incompatible_disallow_old_style_args_add to help
    migrate from args.add() to args.add_all() / args.add_joined()
    where appropriate.
  + New features:
    * Bash,runfiles: use the new platform-independent library in
      @bazel_tools//tools/bash/runfiles to access runfiles
      (data-dependencies).
    * TemplateVariableInfo can now be constructed from Skylark.
    * The java_host_runtime_alias rule is now implemented in Java.
  + Introduce fdo_profile rule that allows architecture-sensitive
    specification of fdo profiles.
  + canonicalize-flags no longer reorders the flags
  + CppRules: optional_compiler_flag was removed from CROSSTOOL,
    use features instead.
  + Labels of the form ////foo are disallowed.
  + The / operator is deprecated in favor of // (floor integer
    division). Try the --incompatible_disallow_slash_operator flag
    to ensure your code is forward-compatible.
  + Flip default value of --experimental_shortened_obj_file_path to
    true, Bazel now generates short object file path by default.
  + Exposed &quot;mnemonic&quot; and &quot;env&quot; fields on skylark &quot;Action&quot;
    objects.
  + Removed flag --incompatible_disallow_toplevel_if_statement.
  + Remove vestigial 'deps' and 'data' attributes from
    proto_lang_toolchain
  + Args objects (ctx.actions.args()) have new methods add_all()
    and add_joined() for building command lines using depsets.
  + FileType is deprecated and will be removed soon.
  + Try the --incompatible_disallow_filetype flag to ensure your
    code is forward-compatible.
  + Introduce absolute_path_profile attribute that allows
    fdo_profile to accept absolute paths.
  + Support two-arg overloads for ctx.actions.args (eg.
    args.add(&quot;--foo&quot;, val))
  + Introduce 'tools' attribute to ctx.actions.run.
  + Fixed error message for proguard_apply_dictionary.
  + &quot;bazel run&quot; now lets one run interactive binaries.
  + Repository rules are no longer restricted to return None.
  + Add --high_priority_workers flag.
  + CppRules: Feature configuration can be created from Skylark
    Adds new-style JavaInfo provider constructor.
  + Make java_common.compile now uses java_toolchain javacopts by
    default; explicitly retrieving them using
    java_common.default_javac_opts is unnecessary.
  + CppRules: C++ command lines and env variables for C++ actions
    can be retrieved from feature configuration.
  + Skylark rule definitions may advertise providers that targets
    of the rule must propagate.
  + Bazel now supports running actions inside Docker containers.
    To use this feature, run &quot;bazel build --spawn_strategy=docker
    --experimental_docker_image=myimage:latest&quot;.
  + Fixing start/end lib expansion for linking. There were many
    cases where archive files were still being used with toolchains
    that support start/end lib. This change consolidates the places
    that make that decision so they can be more consistent.
  + Add support for reporting an error if
    android_test.binary_under_test contains incompatible versions
    of deps.
  + We replaced the --experimental_local_disk_cache and
    --experimental_local_disk_cache_path flags into a single
    --disk_cache flag. Additionally, Bazel now tries to create the
    disk cache directory if it doesn't exist.
  + Save Blaze memory by not storing LinkerInput objects in
    LinkCommandLine.
  + In the JavaInfo created by java_common.create_provider now
    includes both direct and transitive arguments in
    transitive_compile_time_jars and transitive_runtime_jars
  + Allow --worker_max_instances to take MnemonicName=value to
    specify max for each worker.
  + Allow java_toolchain.header_compiler to be an arbitrary
    executable.
- Changes from version 0.13.1:
  + Sort entries by segment when building a parent node to prevent
    unordered directory structures.
- Add attributions and license to package.
- FIXME, don't build bash-completion as it breaks build, plus
  it's not installed andyway.
- Update to 0.13.0
- Update to 0.11.0
- Do not strip  the binary
- Fix compilation issue
  [+0001-fix-no-return-compilation-error.patch+]
 - Inital Package 0.8.1
</comment>
    <requestid>642625</requestid>
  </revision>
  <revision rev="2" vrev="1">
    <srcmd5>87aae28098da8e9bdab1155b6eadc92a</srcmd5>
    <version>0.19.0</version>
    <time>1542203011</time>
    <user>dimstar_suse</user>
    <comment>- Update to version 0.19.0:
  * The --incompatible_expand_directories flag automatically
    expands directories in command lines. See the design document.
  * The --loading_phase_threads flag now defaults to auto instead
    of 200, which at the moment corresponds to the number of CPUs.
  * Fixed missing debug symbols when building native code with
    --compilation_mode=dbg that target Android ARM architectures
    by adding the -g flag.
  * Added --incompatible_disable_legacy_flags_cc_toolchain_api to
    deprecate legacy cc_toolchain Starlark API for legacy CROSSTOOL
    fields. Tracking issue is #6434. See the instructions for
    migration.
  * Runfiles in cc_test: the C++ runfiles library
    (@bazel_tools//tools/cpp/runfiles) can now create Runfiles
    objects for tests. See //tools/cpp/runfiles/runfiles_src.h in
    the Bazel source tree for documentation.
  * :cc_binary link action no longer hardcodes -static-libgcc for
    toolchains that support embedded runtimes (guarded by
    --experimental_dont_emit_static_libgcc temporarily).
  * The flag --experimental_enable_cc_configuration_make_variables
    is removed, use
    --incompatible_disable_cc_configuration_make_variables instead.
  * Bazel now requires a JDK to be installed as it no longer falls
    back to the internal JDK if the --javabase flag is not set.
    Instead, Bazel now searches for a JDK within the JAVA_HOME and
    PATH environment variables. If Bazel cannot find a JDK, it will
    not be able to run Java builds.
  * LcovMerger was renamed to CoverageOutputGenerator.
  * A new coverage method for C++ rules that uses gcc with the
    --experimental_cc_coverage flag. The flag will use gcov
    instead of lcov to collect coverage information. This new
    implementation fixes some of the C++ coverage correctness
    issues ( respecting --instrumentation_filter and
    --instrument_test_targets flags ).
  * Faster clean and incremental times when invoking bazel coverage
    (small overhead compared to test runtimes instead of 2x test
    runtime), but more measurements need to be done.
  * Add --apple_compiler and --apple_grte_top options. These
    provide the equivalent of --compiler / --grte_top for the
    toolchain configured in --apple_crosstool_top.
  * There is now a same_pkg_direct_rdeps query function. See the
    query documentation for more details.
  * Propagating remote errors to the user even if
    --verbose_failures=false is set.
  * Add number of configured targets to analysis phase status
    output.
  * Bazel now checks stderr instead of stdout to decide if it is
    outputting to a terminal. --isatty is deprecated, use
    --is_stderr_atty instead.
- enabled aarch64 build and disabled armv7l build as this one fails
  due to java memory errors</comment>
    <requestid>648812</requestid>
  </revision>
  <revision rev="3" vrev="1">
    <srcmd5>40a954e4a343c05b4d190175eed419b8</srcmd5>
    <version>0.19.2</version>
    <time>1543311893</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>652046</requestid>
  </revision>
  <revision rev="4" vrev="1">
    <srcmd5>2bd79cd5a8a96f84083befa44225d13f</srcmd5>
    <version>0.22.0</version>
    <time>1550574019</time>
    <user>maxlin_factory</user>
    <comment></comment>
    <requestid>676935</requestid>
  </revision>
  <revision rev="5" vrev="2">
    <srcmd5>9e9218116dc36998f2bfa2279d85be01</srcmd5>
    <version>0.22.0</version>
    <time>1553084397</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>686369</requestid>
  </revision>
  <revision rev="6" vrev="1">
    <srcmd5>72e75f5749344ca380f06e8c8c7cbc1c</srcmd5>
    <version>0.24.1</version>
    <time>1554977884</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>693016</requestid>
  </revision>
  <revision rev="7" vrev="1">
    <srcmd5>b34cecd58dd90eaff30510bd14c6865f</srcmd5>
    <version>0.26</version>
    <time>1560971132</time>
    <user>dimstar_suse</user>
    <comment>This is the attempt to make Bazel package a multiversion package.

Bazel releases new versions with backwards incompatible changes quite fast. That's really painful for Envoy and Tensorflow - main projects which are built by Bazel and we package in openSUSE. Some updates of Bazel break lots of packages.

In order to prevent that, I would like to provide multiple versions of Bazel in openSUSE. I'm going to submit few more Bazel versions (0.26.x, 0.24.x, 0.23.x etc.) and then make a request to the main Bazel package.

If this SR looks good to you, please accept it together with:
- bazel
- bazel0.24
- bazel0.25
- bazel0.26</comment>
    <requestid>708252</requestid>
  </revision>
  <revision rev="8" vrev="1">
    <srcmd5>47fa5d837cb4b179ea73ba93f3b184b8</srcmd5>
    <version>0.29</version>
    <time>1575373324</time>
    <user>dimstar_suse</user>
    <comment>- Switch bazel to default version 0.29. (forwarded request 752927 from mrostecki)</comment>
    <requestid>752929</requestid>
  </revision>
  <revision rev="9" vrev="1">
    <srcmd5>3f703acea1f7f912603f760bf784994d</srcmd5>
    <version>1.2</version>
    <time>1579557056</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>758583</requestid>
  </revision>
  <revision rev="10" vrev="1">
    <srcmd5>8000fa23be1725f774e29ab4096a4cf9</srcmd5>
    <version>2.0</version>
    <time>1580842612</time>
    <user>dimstar_suse</user>
    <comment>- Switch bazel to default version 2.0. (forwarded request 767997 from mrostecki)</comment>
    <requestid>767998</requestid>
  </revision>
</revisionlist>
