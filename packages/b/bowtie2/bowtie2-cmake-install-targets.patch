ff --git a/CMakeLists.txt b/CMakeLists.txt
index 09870962..d2703545 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -23,6 +23,8 @@ set(NO_SPINLOCK ${NO_SPINLOCK})
 set(USE_SRA ${USE_SRA})
 set(WITH_THREAD_PROFILING ${WITH_THREAD_PROFILING})
 set(NO_POPCNT_CAPABILITY ${NO_POPCNT_CAPABILITY})
+set(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")
+set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)
 set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -m64 -g3 -Wall -msse2")
 set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -O0")
 set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O3 -funroll-loops")
@@ -30,7 +32,6 @@ set(INSTALL_DIR "${CMAKE_INSTALL_PREFIX}/bin" CACHE PATH "Installation directory
 
 set(CMAKE_EXPORT_COMPILE_COMMANDS on)
 
-
 if (MINGW)
   option(BOWTIE_MM "Memory mapped files not supported on Windows" OFF)
   option(BOWTIE_SHARED_MEM "Shared memory not supported on Windows" OFF)
@@ -50,6 +51,12 @@ set(BOWTIE2_BIN_LIST
   bowtie2-inspect-l
   )
 
+set(BOWTIE2_WRAPPER_SCRIPTS
+  bowtie2
+  bowtie2-build
+  bowtie2-inspect
+  )
+
 set(SHARED_CPPS
   ccnt_lut.cpp
   ref_read.cpp
@@ -204,9 +211,8 @@ if (NO_TBB)
   set(SHARED_CPPS ${SHARED_CPPS} tinythread.cpp)
 else()
   find_library(TBB_LIB_PATH tbb)
-
   if (TBB_LIB_PATH)
-    find_path(TBB_INCLUDE_PATH tbb)
+    find_path(TBB_INCLUDE_PATH tbb/tbb.h)
     link_libraries(${TBB_LIB_PATH})
     find_library(TBBMALLOC_PROXY_LIB_PATH tbbmalloc_proxy)
     if (NOT TBBMALLOC_PROXY_LIB_PATH)
@@ -244,6 +250,7 @@ else()
     set(TBB_SOURCE_DIR ${SOURCE_DIR})
     set(TBB_RELEASE_DIR ${TBB_SOURCE_DIR}/build/${TBB_VER}_release)
     include_directories(${TBB_SOURCE_DIR}/include)
+    find_path(TBB_INCLUDE_PATH PATHS ${TBB_SOURCE_DIR}/include NAMES tbb/tbb.h)
 
     link_directories(${TBB_RELEASE_DIR})
     add_library(tbb SHARED IMPORTED)
@@ -286,6 +293,29 @@ add_executable(bowtie2-inspect-l ${INSPECT_CPPS} ${SHARED_CPPS})
 
 set_target_properties(bowtie2-align-l bowtie2-build-l bowtie2-inspect-l PROPERTIES COMPILE_FLAGS "-DBOWTIE2_64BIT_INDEX")
 set_target_properties(bowtie2-inspect-s bowtie2-inspect-l PROPERTIES COMPILE_FLAGS "-DBOWTIE_INSPECT_MAIN")
-set_target_properties(${BOWTIE2_BIN_LIST} PROPERTIES DEBUG_POSTFIX -debug)
+# set_target_properties(${BOWTIE2_BIN_LIST} PROPERTIES DEBUG_POSTFIX -debug)
+
+install(TARGETS ${BOWTIE2_BIN_LIST} DESTINATION bin)
+install(FILES ${BOWTIE2_WRAPPER_SCRIPTS}
+  PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE
+  DESTINATION bin)
+if (LIBTBB)
+  install(FILES ${LIBTBB} DESTINATION lib)
+  install(DIRECTORY ${TBB_INCLUDE_PATH} DESTINATION include)
+endif()
+if (LIBTBBMALLOC)
+  install(FILES ${LIBTBBMALLOC} DESTINATION lib)
+endif()
+if (LIBTBBMALLOC_PROXY)
+  install(FILES ${LIBTBBMALLOC_PROXY} DESTINATION lib)
+endif()
 
-add_test(NAME simple-align COMMAND ${PROJECT_SOURCE_DIR}/bowtie2 -x example/index/lambda_virus example/reads/longreads.fq)
+add_test(NAME simple-align
+  WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
+  COMMAND bowtie2 -x example/index/lambda_virus example/reads/longreads.fq -u 10)
+add_test(NAME simple-build
+  WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
+  COMMAND bowtie2-build-s -c GGGCGGCGACCTCGCGGGTTTTCGCTA out)
+add_test(NAME simple-inspect
+  WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
+  COMMAND bowtie2-inspect-s out && rm out*)
