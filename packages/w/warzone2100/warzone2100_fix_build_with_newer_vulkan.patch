diff -Nur warzone2100-orig/lib/ivis_opengl/gfx_api_vk.cpp warzone2100/lib/ivis_opengl/gfx_api_vk.cpp
--- warzone2100-orig/lib/ivis_opengl/gfx_api_vk.cpp	2023-04-16 19:42:55.000000000 +0200
+++ warzone2100/lib/ivis_opengl/gfx_api_vk.cpp	2023-09-03 20:14:58.425366514 +0200
@@ -59,6 +59,12 @@
 #pragma GCC diagnostic ignored "-Wdeprecated-copy" // Ignore warnings caused by vulkan.hpp 148
 #endif
 
+#if VK_HEADER_VERSION >= 260
+# define WZ_THROW_VK_RESULT_EXCEPTION(result, message) vk::detail::throwResultException(result, message)
+#else
+# define WZ_THROW_VK_RESULT_EXCEPTION(result, message) vk::throwResultException(result, message)
+#endif
+
 const uint32_t minSupportedVulkanVersion = VK_API_VERSION_1_0;
 #if defined(DEBUG)
 // For debug builds, limit to the minimum that should be supported by this backend (which is Vulkan 1.0, see above)
@@ -521,7 +527,7 @@
 	if (result != vk::Result::eSuccess)
 	{
 		// Failed to allocate memory!
-		vk::throwResultException( result, "vmaCreateBuffer" );
+		WZ_THROW_VK_RESULT_EXCEPTION( result, "vmaCreateBuffer" );
 	}
 
 	if (autoMap)
@@ -1540,7 +1546,7 @@
 			object = std::move(result.value);
 			break;
 		default:
-			vk::throwResultException(result.result, "createGraphicsPipeline");
+			WZ_THROW_VK_RESULT_EXCEPTION(result.result, "createGraphicsPipeline");
 	}
 }
 
@@ -1604,7 +1610,7 @@
 	if (result != vk::Result::eSuccess)
 	{
 		// Failed to allocate memory!
-		vk::throwResultException( result, "vmaCreateBuffer" );
+		WZ_THROW_VK_RESULT_EXCEPTION( result, "vmaCreateBuffer" );
 	}
 
 	buffer_size = size;
@@ -1737,7 +1743,7 @@
 	if (result != vk::Result::eSuccess)
 	{
 		// Failed to allocate memory!
-		vk::throwResultException( result, "vmaCreateImage" );
+		WZ_THROW_VK_RESULT_EXCEPTION( result, "vmaCreateImage" );
 	}
 
 	if (root.debugUtilsExtEnabled)
