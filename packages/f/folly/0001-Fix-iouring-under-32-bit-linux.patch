From 53c4521c9a7770bf6774858805ddd2830f74f7d3 Mon Sep 17 00:00:00 2001
From: Orvid <709247+Orvid@users.noreply.github.com>
Date: Mon, 29 Aug 2022 12:51:28 -0700
Subject: [PATCH] Fix iouring under 32-bit linux

Summary:
The workaround for a different bug was explicitly restricting this code to 64-bit systems, but supporting them is trivial as long as we require UserData to be initialized from a pointer, which is fine since that was the only way it was being used.
Fixes: https://github.com/facebook/folly/issues/1850

Differential Revision: D39109122

fbshipit-source-id: ef8bb16d4d80454f980c48d6b1443589f180c9c0
---
 folly/experimental/io/IoUringBackend.h | 9 +--------
 1 file changed, 1 insertion(+), 8 deletions(-)

diff --git a/folly/experimental/io/IoUringBackend.h b/folly/experimental/io/IoUringBackend.h
index 36d8ec087..9f034b134 100644
--- a/folly/experimental/io/IoUringBackend.h
+++ b/folly/experimental/io/IoUringBackend.h
@@ -381,17 +381,10 @@ class IoUringBackend : public EventBaseBackendBase {
   };
 
   struct UserData {
-    uint64_t value;
-    explicit UserData(uint64_t i) noexcept : value{i} {}
-    template <
-        typename T = int,
-        std::enable_if_t<sizeof(void*) == sizeof(uint64_t), T> = 0>
+    uintptr_t value;
     explicit UserData(void* p) noexcept
         : value{reinterpret_cast<uintptr_t>(p)} {}
     /* implicit */ operator uint64_t() const noexcept { return value; }
-    template <
-        typename T = int,
-        std::enable_if_t<sizeof(void*) == sizeof(uint64_t), T> = 0>
     /* implicit */ operator void*() const noexcept {
       return reinterpret_cast<void*>(value);
     }
-- 
2.37.2

