<revisionlist>
  <revision rev="1" vrev="1">
    <srcmd5>e125937433f188233fb8ef710f5d75a4</srcmd5>
    <version>5.2.1</version>
    <time>1544632085</time>
    <user>dimstar_suse</user>
    <comment>- Do without em dashes in summaries.
- Added baselibs.conf as source
- initial package for version 5.2.1
</comment>
    <requestid>655907</requestid>
  </revision>
  <revision rev="2" vrev="1">
    <srcmd5>2eab47cf0d4d67e0814a6a7fc69df3a2</srcmd5>
    <version>5.3.0</version>
    <time>1547540244</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>665283</requestid>
  </revision>
  <revision rev="3" vrev="2">
    <srcmd5>cdadcfa72a86cc3391d2c5304793f680</srcmd5>
    <version>5.3.0</version>
    <time>1553611538</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>688601</requestid>
  </revision>
  <revision rev="4" vrev="1">
    <srcmd5>5e33cdb2d5884eadf7533319438b143a</srcmd5>
    <version>6.0.0</version>
    <time>1576061989</time>
    <user>dimstar_suse</user>
    <comment>update to 6.0.0</comment>
    <requestid>753962</requestid>
  </revision>
  <revision rev="5" vrev="1">
    <srcmd5>2519f310c2f737b5babde3823bf349d5</srcmd5>
    <version>6.1.2</version>
    <time>1577136981</time>
    <user>dimstar_suse</user>
    <comment>- Update to version 6.1.2
  * Fixed ABI compatibility with libfmt.so.6.0.0 (#1471).
  * Fixed handling types convertible to std::string_view (#1451).
    Thanks @denizevrenci (Deniz Evrenci).
  * Made CUDA test an opt-in enabled via the FMT_CUDA_TEST CMake
    option.
  * Fixed sign conversion warnings (#1440). Thanks @0x8000-0000
    (Florin Iucha).
- Update to version 6.1.1
  * Added a missing decimal point in exponent notation with
    trailing zeros.
  * Removed deprecated format_arg_store::TYPES.
- Update to version 6.1.0
  * {fmt} now formats IEEE 754 ``float`` and ``double`` using
    the shortest decimal representation with correct rounding by
    default:
    .. code:: c++
       #include &lt;cmath&gt;
       #include &lt;fmt/core.h&gt;
       int main() {
         fmt::print(&quot;{}&quot;, M_PI);
       }
    prints ``3.141592653589793``.
  * Made the fast binary to decimal floating-point formatter the
    default, simplified it and improved performance. {fmt} is now
    15 times faster than libc++'s ``std::ostringstream``, 11
    times faster than ``printf`` and 10% faster than
    double-conversion on `dtoa-benchmark
    (https://github.com/fmtlib/dtoa-benchmark)
    ==================  =========  =======
    Function            Time (ns)  Speedup
    ==================  =========  =======
    ostringstream        1,346.30    1.00x
    ostrstream           1,195.74    1.13x
    sprintf                995.08    1.35x
    doubleconv              99.10   13.59x
    fmt                     88.34   15.24x
    ==================  =========  =======
  * {fmt} no longer converts ``float`` arguments to ``double``.
    In particular this improves the default (shortest)
    representation of floats and makes
    ``fmt::format`` consistent with ``std::format`` specs
    (#1336, #1353, #1360, #1361)
    .. code:: c++
       fmt::print(&quot;{}&quot;, 0.1f);
    prints ``0.1`` instead of ``0.10000000149011612``.
  * Made floating-point formatting output consistent with
    ``printf``/iostreams (#1376, #1417)
  * Added support for 128-bit integers (#1287)
    .. code:: c++
       fmt::print(&quot;{}&quot;, std::numeric_limits&lt;__int128_t&gt;::max());
    prints ``170141183460469231731687303715884105727``.
  * The overload of ``print`` that takes ``text_style`` is now
    atomic, i.e. the output from different threads doesn't
    interleave (#1351)
  * Made compile time in the header-only mode ~20% faster by
    reducing the number of template instantiations. ``wchar_t``
    overload of ``vprint`` was moved from
    ``fmt/core.h`` to ``fmt/format.h``.
  * Added an overload of ``fmt::join`` that works with tuples
    (#1322, #1330)
    .. code:: c++
       #include &lt;tuple&gt;
       #include &lt;fmt/ranges.h&gt;
       int main() {
         std::tuple&lt;char, int, float&gt; t{'a', 1, 2.0f};
         fmt::print(&quot;{}&quot;, t);
       }
    prints ``('a', 1, 2.0)``.
  * Changed formatting of octal zero with prefix from &quot;0o0&quot; to
    &quot;0&quot;:
    .. code:: c++
       fmt::print(&quot;{:#o}&quot;, 0);
    prints ``0``.
  * The locale is now passed to ostream insertion (``&lt;&lt;``)
    operators (#1406)
    .. code:: c++
       #include &lt;fmt/locale.h&gt;
       #include &lt;fmt/ostream.h&gt;
       struct S {
         double value;
       };
       std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, S s) {
         return os &lt;&lt; s.value;
       }
       int main() {
         auto s = fmt::format(std::locale(&quot;fr_FR.UTF-8&quot;), &quot;{}&quot;, S{0.42});
         // s == &quot;0,42&quot;
       }
  * Locale-specific number formatting now uses grouping (#1393,
    #1394)
  * Fixed handling of types with deleted implicit rvalue
    conversion to ``const char**`` (#1421)
    .. code:: c++
       struct mystring {
         operator const char*() const&amp;;
         operator const char*() &amp;;
         operator const char*() const&amp;&amp; = delete;
         operator const char*() &amp;&amp; = delete;
       };
       mystring str;
       fmt::print(&quot;{}&quot;, str); // now compiles
  * Enums are now mapped to correct underlying types instead of
    ``int`` (#1286)
  * Enum classes are no longer implicitly converted to ``int``
    (#1424)
  * Added ``basic_format_parse_context`` for consistency with
    C++20 ``std::format`` and deprecated ``basic_parse_context``.
  * Fixed handling of UTF-8 in precision (#1389, #1390)
  * Added a CUDA test (#1285, #1317)
  * Improved documentation (#1276, #1291, #1296, #1315, #1332,
    #1337, #1395, #1418)
  * Various code improvements (#1358, #1407)
  * Fixed compile-time format string checks for user-defined
    types (#1292)
  * Worked around a false positive in
    ``unsigned-integer-overflow`` sanitizer (#1377)
  * Fixed various warnings and compilation issues (#1273, #1278,
    #1280, #1281, #1288, #1290, #1301, #1305, #1306, #1309,
    #1312, #1313, #1316, #1319, #1320, #1326, #1328, #1344,
    #1345, #1347, #1349, #1354, #1362, #1366, #1364, #1370,
    #1371, #1385, #1388, #1397, #1414, #1416, #1422, #1427,
    #1431, #1433)
- Dropped fmt-bigendian_1.patch, fmt-bigendian_2.patch,
  fmt-bigendian_3.patch and fmt-bigendian_4.patch (merged
  upstream)
</comment>
    <requestid>756026</requestid>
  </revision>
  <revision rev="6" vrev="1">
    <srcmd5>0465e2016b3fc7c6aa7f9a607a704674</srcmd5>
    <version>6.2.0</version>
    <time>1586466860</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>791804</requestid>
  </revision>
  <revision rev="7" vrev="2">
    <srcmd5>039e10cd004870b4cdb719f8354cb0c0</srcmd5>
    <version>6.2.0</version>
    <time>1587324915</time>
    <user>dimstar_suse</user>
    <comment>- Apply 7d01859ef16e6b65bc023ad8bebfedecb088bf81.patch
  to fix kodi compilation and probably others:
  https://github.com/fmtlib/fmt/issues/1620
</comment>
    <requestid>793945</requestid>
  </revision>
  <revision rev="8" vrev="1">
    <srcmd5>8297897a56b187bd1aafa06c22ce3685</srcmd5>
    <version>6.2.1</version>
    <time>1589491478</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>802985</requestid>
  </revision>
  <revision rev="9" vrev="2">
    <srcmd5>43ec9e59f4b9f6d9262e9fc1855ea9f6</srcmd5>
    <version>6.2.1</version>
    <time>1593096425</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>816648</requestid>
  </revision>
  <revision rev="10" vrev="1">
    <srcmd5>bdf3cb8c1174e0f727f6a3acc3abd69e</srcmd5>
    <version>7.0.1</version>
    <time>1594894044</time>
    <user>dimstar_suse</user>
    <comment>- Update to version 7.0.1
  * Updated the inline version namespace name.
  * Worked around a gcc bug in mangling of alias templates
  * Fixed minor issues with the documentation.
- Update to version 7.0.0
  * Reduced the library size.
  * Added a simpler and more efficient format string compilation
    API. The old fmt::compile API is now deprecated.
  * Optimized integer formatting: format_to with format string
    compilation and a stack-allocated buffer is now faster than
    to_chars on both libc++ and libstdc++.
  * Optimized handling of small format strings.
  * Applied extern templates to improve compile times when using
    the core API and fmt/format.h. It is still recommended to use
    fmt/core.h instead of fmt/format.h but the compile time
    difference is now smaller.
  * Named arguments are now stored on stack (no dynamic memory
    allocations) and the compiled code is more compact and
    efficient.
  * Implemented compile-time checks for dynamic width and
     precision.
  * Added sentinel support to fmt::join.
  * Added support for named args, clear and reserve to
    dynamic_format_arg_store.
  * Added support for the 'c' format specifier to integral types
    for compatibility with std::format.
  * Replaced the 'n' format specifier with 'L' for compatibility
    with std::format. The 'n' specifier can be enabled via the
    FMT_DEPRECATED_N_SPECIFIER macro.
  * The '=' format specifier is now disabled by default for
    compatibility with std::format. It can be enabled via the
    FMT_DEPRECATED_NUMERIC_ALIGN macro.
  * Removed the following deprecated APIs:
    + FMT_STRING_ALIAS and fmt macros - replaced by
      FMT_STRING
    + fmt::basic_string_view::char_type - replaced by
      fmt::basic_string_view::value_type
    + convert_to_int
    + format_arg_store::types
    + *parse_context - replaced by *format_parse_context
    + FMT_DEPRECATED_INCLUDE_OS
    + FMT_DEPRECATED_PERCENT - incompatible with
      std::format
    + *writer - replaced by compiled format API
  * Renamed the internal namespace to detail. The former is
    still provided as an alias if the FMT_USE_INTERNAL macro is
    defined.
  * Improved compatibility between fmt::printf with the standard
    specs.
  * Fixed handling of operator&lt;&lt; overloads that use copyfmt.
  * Added the FMT_OS CMake option to control inclusion of
    OS-specific APIs in the fmt target. This can be useful for
    embedded platforms.
  * Replaced FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION with the
    FMT_FUZZ macro to prevent interferring with fuzzing of
    projects using {fmt}.
  * Fixed compatibility with emscripten.
  * Improved documentation.
  * Implemented various build configuration fixes and
    improvements.
  * Fixed various warnings and compilation issues.
- Drop fmt-6.2.1-fix_pkgconfig_paths.patch
- Bump sover to 7
</comment>
    <requestid>819280</requestid>
  </revision>
  <revision rev="11" vrev="1">
    <srcmd5>5395fbafd1b0542dc28600b61a96d802</srcmd5>
    <version>7.0.2</version>
    <time>1596364133</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>823446</requestid>
  </revision>
  <revision rev="12" vrev="1">
    <srcmd5>5377c75e26e4b850a9c143b8816e5275</srcmd5>
    <version>7.0.3</version>
    <time>1597222520</time>
    <user>dimstar_suse</user>
    <comment></comment>
    <requestid>824910</requestid>
  </revision>
</revisionlist>
