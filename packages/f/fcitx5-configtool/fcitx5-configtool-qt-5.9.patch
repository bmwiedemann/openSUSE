Index: fcitx5-configtool-5.0.3/src/kcm/CMakeLists.txt
===================================================================
--- fcitx5-configtool-5.0.3.orig/src/kcm/CMakeLists.txt
+++ fcitx5-configtool-5.0.3/src/kcm/CMakeLists.txt
@@ -3,6 +3,8 @@ add_library(kcm_fcitx5 MODULE
     qtkeytrans.cpp
 )
 
+if (Qt5Widgets_VERSION VERSION_LESS 5.10.0)
+else()
 target_link_libraries(kcm_fcitx5
   KF5::CoreAddons
   KF5::I18n
@@ -10,6 +12,7 @@ target_link_libraries(kcm_fcitx5
   XKBCommon::XKBCommon
   configlib
 )
+endif()
 
 file(GLOB_RECURSE inFiles RELATIVE "${CMAKE_CURRENT_SOURCE_DIR}"
     "${CMAKE_CURRENT_SOURCE_DIR}/package/*")
Index: fcitx5-configtool-5.0.3/src/kcm/main.cpp
===================================================================
--- fcitx5-configtool-5.0.3.orig/src/kcm/main.cpp
+++ fcitx5-configtool-5.0.3/src/kcm/main.cpp
@@ -163,10 +163,16 @@ void configOptionToVariant(QVariantList
             decomposeDBusVariant(option.defaultValue().variant());
         map["isSection"] = false;
         QVariantMap propertiesMap;
+#if (QT_VERSION < QT_VERSION_CHECK(5,10,0))
+        for (QVariantMap::const_iterator it = option.properties().begin(); it != option.properties().end(); ++it) {
+            propertiesMap[it.key()] = decomposeDBusVariant(it.value());
+      }
+#else
         for (auto p : fcitx::MakeIterRange(option.properties().keyValueBegin(),
                                            option.properties().keyValueEnd())) {
             propertiesMap[p.first] = decomposeDBusVariant(p.second);
         }
+#endif
         map["properties"] = propertiesMap;
         options.append(map);
     }
Index: fcitx5-configtool-5.0.3/src/lib/configlib/addonmodel.h
===================================================================
--- fcitx5-configtool-5.0.3.orig/src/lib/configlib/addonmodel.h
+++ fcitx5-configtool-5.0.3/src/lib/configlib/addonmodel.h
@@ -8,6 +8,10 @@
 #define _CONFIGLIB_ADDONMODEL_H_
 
 #include "model.h"
+#include <QtGlobal>
+#if (QT_VERSION < QT_VERSION_CHECK(5,10,0))
+#include "KF5/KItemModels/krecursivefilterproxymodel.h"
+#endif
 
 namespace fcitx {
 namespace kcm {
@@ -119,16 +123,27 @@ private:
     QMap<QString, QStringList> reverseOptionalDependencies_;
 };
 
+#if (QT_VERSION < QT_VERSION_CHECK(5,10,0))
+class AddonProxyModel : public KRecursiveFilterProxyModel {
+#else
 class AddonProxyModel : public QSortFilterProxyModel {
+#endif
     Q_OBJECT
     Q_PROPERTY(QString filterText READ filterText WRITE setFilterText);
 
 public:
+#if (QT_VERSION < QT_VERSION_CHECK(5,10,0))
+    explicit AddonProxyModel(QObject *parent) : KRecursiveFilterProxyModel(parent) {
+        setDynamicSortFilter(true);
+        sort(0);
+    }
+#else
     explicit AddonProxyModel(QObject *parent) : QSortFilterProxyModel(parent) {
         setDynamicSortFilter(true);
         setRecursiveFilteringEnabled(true);
         sort(0);
     }
+#endif
 
     // Forward role names.
     QHash<int, QByteArray> roleNames() const override {
Index: fcitx5-configtool-5.0.3/src/lib/configwidgetslib/CMakeLists.txt
===================================================================
--- fcitx5-configtool-5.0.3.orig/src/lib/configwidgetslib/CMakeLists.txt
+++ fcitx5-configtool-5.0.3/src/lib/configwidgetslib/CMakeLists.txt
@@ -19,4 +19,8 @@ set_target_properties(configwidgetslib P
     AUTOUIC_OPTIONS "-tr=fcitx::tr2fcitx;--include=fcitxqti18nhelper.h"
 )
 target_include_directories(configwidgetslib INTERFACE ${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_BINARY_DIR})
+if (Qt5Widgets_VERSION VERSION_LESS 5.10.0)
+target_link_libraries(configwidgetslib Qt5::Core Qt5::Widgets Qt5::X11Extras KF5::WidgetsAddons KF5::ItemViews KF5::ItemModels Fcitx5::Utils Fcitx5Qt5::DBusAddons Fcitx5Qt5::WidgetsAddons configlib layoutlib)
+else()
 target_link_libraries(configwidgetslib Qt5::Core Qt5::Widgets Qt5::X11Extras KF5::WidgetsAddons KF5::ItemViews Fcitx5::Utils Fcitx5Qt5::DBusAddons Fcitx5Qt5::WidgetsAddons configlib layoutlib)
+endif()
Index: fcitx5-configtool-5.0.3/src/lib/configwidgetslib/addonselector.cpp
===================================================================
--- fcitx5-configtool-5.0.3.orig/src/lib/configwidgetslib/addonselector.cpp
+++ fcitx5-configtool-5.0.3/src/lib/configwidgetslib/addonselector.cpp
@@ -20,6 +20,8 @@
 #include <QPushButton>
 #include <QToolButton>
 #include <QVBoxLayout>
+#include <QtGlobal>
+#include <QTimer>
 #include <fcitx-utils/i18n.h>
 #include <fcitxqtcontrollerproxy.h>
 #include <fcitxqtdbustypes.h>
@@ -283,9 +285,15 @@ AddonSelector::AddonSelector(QWidget *pa
                 if (!enabled) {
                     if (!reverseDependencies_.value(addon).empty() ||
                         !reverseOptionalDependencies_.value(addon).empty()) {
+#if (QT_VERSION < QT_VERSION_CHECK(5,10,0))
+                        QTimer::singleShot(0, this, [this, addon](){
+                          warnAddonDisable(addon);
+                        });
+#else
                         QMetaObject::invokeMethod(
                             this, [this, addon]() { warnAddonDisable(addon); },
                             Qt::QueuedConnection);
+#endif
                     }
                 }
                 Q_EMIT changed();
Index: fcitx5-configtool-5.0.3/src/migrator/app/CMakeLists.txt
===================================================================
--- fcitx5-configtool-5.0.3.orig/src/migrator/app/CMakeLists.txt
+++ fcitx5-configtool-5.0.3/src/migrator/app/CMakeLists.txt
@@ -3,7 +3,11 @@ set_target_properties(fcitx5-migrator PR
     AUTOMOC TRUE
     AUTOUIC TRUE
     AUTOUIC_OPTIONS "-tr=fcitx::tr2fcitx;--include=fcitxqti18nhelper.h")
+if (Qt5Widgets_VERSION VERSION_LESS 5.10.0)
+target_link_libraries(fcitx5-migrator pinyinmigrator skkmigrator rimemigrator kkcmigrator globalconfigmigrator tablemigrator Qt5::Widgets KF5::WidgetsAddons configlib KF5::ItemModels Fcitx5Migrator Fcitx5Qt5::WidgetsAddons Fcitx5Qt5::DBusAddons)
+else()
 target_link_libraries(fcitx5-migrator pinyinmigrator skkmigrator rimemigrator kkcmigrator globalconfigmigrator tablemigrator Qt5::Widgets KF5::WidgetsAddons configlib Fcitx5Migrator Fcitx5Qt5::WidgetsAddons Fcitx5Qt5::DBusAddons)
+endif()
 install(TARGETS fcitx5-migrator DESTINATION ${CMAKE_INSTALL_BINDIR})
 
 fcitx5_translate_desktop_file(org.fcitx.fcitx5-migrator.desktop.in
Index: fcitx5-configtool-5.0.3/src/migrator/app/taskpage.cpp
===================================================================
--- fcitx5-configtool-5.0.3.orig/src/migrator/app/taskpage.cpp
+++ fcitx5-configtool-5.0.3/src/migrator/app/taskpage.cpp
@@ -12,6 +12,7 @@
 #include "processrunner.h"
 #include <algorithm>
 #include <fcitx-utils/i18n.h>
+#include <QtGlobal>
 
 namespace fcitx {
 
@@ -22,9 +23,11 @@ public:
 
     QVariant data(const QModelIndex &index,
                   int role = Qt::DisplayRole) const override {
+#if (QT_VERSION >= QT_VERSION_CHECK(5,11,0))
         if (!checkIndex(index)) {
             return QVariant();
         }
+#endif
         switch (role) {
         case Qt::DisplayRole:
             return migrators_[index.row()]->name();
@@ -41,7 +44,11 @@ public:
 
     bool setData(const QModelIndex &index, const QVariant &value,
                  int role) override {
+#if (QT_VERSION >= QT_VERSION_CHECK(5,11,0))
         if (role != Qt::CheckStateRole || !checkIndex(index)) {
+#else
+	if (role != Qt::CheckStateRole) {
+#endif
             return false;
         }
 
@@ -61,9 +68,11 @@ public:
 
     Qt::ItemFlags flags(const QModelIndex &index) const override {
         Qt::ItemFlags flags = QAbstractListModel::flags(index);
+#if (QT_VERSION >= QT_VERSION_CHECK(5,11,0))
         if (!checkIndex(index)) {
             return flags;
         }
+#endif
 
         flags.setFlag(Qt::ItemIsUserCheckable,
                       migratorStatesCache_[index.row()]);
Index: fcitx5-configtool-5.0.3/src/migrator/lib/callbackrunner.cpp
===================================================================
--- fcitx5-configtool-5.0.3.orig/src/migrator/lib/callbackrunner.cpp
+++ fcitx5-configtool-5.0.3/src/migrator/lib/callbackrunner.cpp
@@ -7,6 +7,8 @@
 #include "callbackrunner.h"
 #include <QFutureWatcher>
 #include <QtConcurrent>
+#include <QtGlobal>
+#include <QTimer>
 
 namespace fcitx {
 
@@ -33,9 +35,15 @@ void CallbackRunner::cleanUp() {
 }
 
 void CallbackRunner::sendMessage(const QString &icon, const QString &message) {
+#if (QT_VERSION < QT_VERSION_CHECK(5,10,0))
+    QTimer::singleShot(0, this, [this, icon, message](){
+	this->message(icon, message);
+    });
+#else
     QMetaObject::invokeMethod(
         this, [this, icon, message]() { this->message(icon, message); },
         Qt::QueuedConnection);
+#endif
 }
 
 void CallbackRunner::emitFinished(bool result) {
Index: fcitx5-configtool-5.0.3/src/migrator/lib/configmigrator.cpp
===================================================================
--- fcitx5-configtool-5.0.3.orig/src/migrator/lib/configmigrator.cpp
+++ fcitx5-configtool-5.0.3/src/migrator/lib/configmigrator.cpp
@@ -7,6 +7,7 @@
 #include "configmigrator.h"
 #include <fcitx-config/rawconfig.h>
 #include <fcitx-utils/i18n.h>
+#include <QtGlobal>
 
 namespace fcitx {
 
@@ -22,11 +23,18 @@ void decomposeDBusVariant(RawConfig &con
     } else {
         map = v.toMap();
     }
+
+#if (QT_VERSION < QT_VERSION_CHECK(5,10,0))
+    for (QVariantMap::const_iterator it = map.constBegin(); it != map.constEnd(); ++it) {
+	decomposeDBusVariant(*config.get(it.key().toStdString(), true), it.value());
+    }
+#else
     for (const auto &item :
          MakeIterRange(map.constKeyValueBegin(), map.constKeyValueEnd())) {
         decomposeDBusVariant(*config.get(item.first.toStdString(), true),
                              item.second);
     }
+#endif
 }
 
 QVariant rawConfigToVariant(const RawConfig &config) {
