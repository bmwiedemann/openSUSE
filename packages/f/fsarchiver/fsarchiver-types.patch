Index: fsarchiver-0.6.17/src/fs_btrfs.h
===================================================================
--- fsarchiver-0.6.17.orig/src/fs_btrfs.h
+++ fsarchiver-0.6.17/src/fs_btrfs.h
@@ -79,37 +79,37 @@ static inline u64 btrfs_sb_offset(int mi
 struct btrfs_dev_item 
 {
     /* the internal btrfs device id */
-    __le64 devid;
+    uint64_t devid;
 
     /* size of the device */
-    __le64 total_bytes;
+    uint64_t total_bytes;
 
     /* bytes used */
-    __le64 bytes_used;
+    uint64_t bytes_used;
 
     /* optimal io alignment for this device */
-    __le32 io_align;
+    uint32_t io_align;
 
     /* optimal io width for this device */
-    __le32 io_width;
+    uint32_t io_width;
 
     /* minimal io size for this device */
-    __le32 sector_size;
+    uint32_t sector_size;
 
     /* type and info about this device */
-    __le64 type;
+    uint64_t type;
 
     /* expected generation for this device */
-    __le64 generation;
+    uint64_t generation;
 
     /*
      * starting byte of this partition on the device,
      * to allowr for stripe alignment in the future
      */
-    __le64 start_offset;
+    uint64_t start_offset;
 
     /* grouping information for allocation decisions */
-    __le32 dev_group;
+    uint32_t dev_group;
 
     /* seek speed 0-100 where 100 is fastest */
     u8 seek_speed;
@@ -133,32 +133,32 @@ struct btrfs_super_block
     u8 csum[BTRFS_CSUM_SIZE];
     /* the first 4 fields must match struct btrfs_header */
     u8 fsid[BTRFS_FSID_SIZE];    /* FS specific uuid */
-    __le64 bytenr; /* this block number */
-    __le64 flags;
+    uint64_t bytenr; /* this block number */
+    uint64_t flags;
 
     /* allowed to be different from the btrfs_header from here own down */
-    __le64 magic;
-    __le64 generation;
-    __le64 root;
-    __le64 chunk_root;
-    __le64 log_root;
+    uint64_t magic;
+    uint64_t generation;
+    uint64_t root;
+    uint64_t chunk_root;
+    uint64_t log_root;
 
     /* this will help find the new super based on the log root */
-    __le64 log_root_transid;
-    __le64 total_bytes;
-    __le64 bytes_used;
-    __le64 root_dir_objectid;
-    __le64 num_devices;
-    __le32 sectorsize;
-    __le32 nodesize;
-    __le32 leafsize;
-    __le32 stripesize;
-    __le32 sys_chunk_array_size;
-    __le64 chunk_root_generation;
-    __le64 compat_flags;
-    __le64 compat_ro_flags;
-    __le64 incompat_flags;
-    __le16 csum_type;
+    uint64_t log_root_transid;
+    uint64_t total_bytes;
+    uint64_t bytes_used;
+    uint64_t root_dir_objectid;
+    uint64_t num_devices;
+    uint32_t sectorsize;
+    uint32_t nodesize;
+    uint32_t leafsize;
+    uint32_t stripesize;
+    uint32_t sys_chunk_array_size;
+    uint64_t chunk_root_generation;
+    uint64_t compat_flags;
+    uint64_t compat_ro_flags;
+    uint64_t incompat_flags;
+    uint16_t csum_type;
     u8 root_level;
     u8 chunk_root_level;
     u8 log_root_level;
@@ -167,7 +167,7 @@ struct btrfs_super_block
     char label[BTRFS_LABEL_SIZE];
 
     /* future expansion */
-    __le64 reserved[32];
+    uint64_t reserved[32];
     u8 sys_chunk_array[BTRFS_SYSTEM_CHUNK_ARRAY_SIZE];
 } __attribute__ ((__packed__));
