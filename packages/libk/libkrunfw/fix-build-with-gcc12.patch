Fix the build with gcc11 and gcc12

Update the kernel to the latest stable one of the 5.10
series, which builds fine with our GCC version.

This is being addressed upstream by:
https://github.com/containers/libkrunfw/pull/9

Let's, however, fix the package build now, until upstream
picks it up.

diff --git a/Makefile b/Makefile
index b8a9970..bccea71 100644
--- a/Makefile
+++ b/Makefile
@@ -1,4 +1,4 @@
-KERNEL_VERSION = linux-5.10.10
+KERNEL_VERSION = linux-5.10.116
 KERNEL_REMOTE = https://cdn.kernel.org/pub/linux/kernel/v5.x/$(KERNEL_VERSION).tar.xz
 KERNEL_TARBALL = tarballs/$(KERNEL_VERSION).tar.xz
 KERNEL_SOURCES = $(KERNEL_VERSION)
diff --git a/config-libkrunfw_x86_64 b/config-libkrunfw_x86_64
index b2706c0..d80572c 100644
--- a/config-libkrunfw_x86_64
+++ b/config-libkrunfw_x86_64
@@ -1,16 +1,17 @@
 #
 # Automatically generated file; DO NOT EDIT.
-# Linux/x86 5.10.10 Kernel Configuration
+# Linux/x86 5.10.116 Kernel Configuration
 #
-CONFIG_CC_VERSION_TEXT="gcc (GCC) 10.2.1 20200723 (Red Hat 10.2.1-1)"
+CONFIG_CC_VERSION_TEXT="gcc (SUSE Linux) 12.1.0"
 CONFIG_CC_IS_GCC=y
-CONFIG_GCC_VERSION=100201
-CONFIG_LD_VERSION=234000000
+CONFIG_GCC_VERSION=120100
+CONFIG_LD_VERSION=202442110000
 CONFIG_CLANG_VERSION=0
 CONFIG_LLD_VERSION=0
 CONFIG_CC_CAN_LINK=y
 CONFIG_CC_CAN_LINK_STATIC=y
 CONFIG_CC_HAS_ASM_GOTO=y
+CONFIG_CC_HAS_ASM_GOTO_OUTPUT=y
 CONFIG_CC_HAS_ASM_INLINE=y
 CONFIG_IRQ_WORK=y
 CONFIG_BUILDTIME_TABLE_SORT=y
@@ -221,6 +222,7 @@ CONFIG_KALLSYMS_ABSOLUTE_PERCPU=y
 CONFIG_KALLSYMS_BASE_RELATIVE=y
 CONFIG_BPF_SYSCALL=y
 CONFIG_ARCH_WANT_DEFAULT_BPF_JIT=y
+# CONFIG_BPF_UNPRIV_DEFAULT_OFF is not set
 # CONFIG_BPF_PRELOAD is not set
 CONFIG_USERFAULTFD=y
 CONFIG_ARCH_HAS_MEMBARRIER_SYNC_CORE=y
@@ -352,7 +354,6 @@ CONFIG_X86_16BIT=y
 CONFIG_X86_ESPFIX64=y
 CONFIG_X86_VSYSCALL_EMULATION=y
 # CONFIG_X86_IOPL_IOPERM is not set
-# CONFIG_I8K is not set
 # CONFIG_MICROCODE is not set
 CONFIG_X86_MSR=y
 CONFIG_X86_CPUID=y
@@ -968,6 +969,7 @@ CONFIG_VIRTIO_BLK=y
 # NVME Support
 #
 # CONFIG_NVME_FC is not set
+# CONFIG_NVME_TCP is not set
 # end of NVME Support
 
 #
@@ -1061,7 +1063,6 @@ CONFIG_VIRTIO_NET=y
 # CONFIG_NETDEVSIM is not set
 CONFIG_NET_FAILOVER=y
 # CONFIG_ISDN is not set
-# CONFIG_NVM is not set
 
 #
 # Input device support
@@ -1297,7 +1298,6 @@ CONFIG_DMADEVICES=y
 #
 # CONFIG_ALTERA_MSGDMA is not set
 # CONFIG_INTEL_IDMA64 is not set
-# CONFIG_XILINX_ZYNQMP_DPDMA is not set
 # CONFIG_QCOM_HIDMA_MGMT is not set
 # CONFIG_QCOM_HIDMA is not set
 # CONFIG_DW_DMAC is not set
@@ -1316,6 +1316,7 @@ CONFIG_SYNC_FILE=y
 
 # CONFIG_AUXDISPLAY is not set
 # CONFIG_UIO is not set
+# CONFIG_VFIO is not set
 CONFIG_VIRT_DRIVERS=y
 CONFIG_VIRTIO=y
 CONFIG_VIRTIO_MENU=y
@@ -1667,7 +1668,11 @@ CONFIG_LSM="lockdown,yama,loadpin,safesetid,integrity,bpf"
 #
 # Memory initialization
 #
+CONFIG_CC_HAS_AUTO_VAR_INIT_PATTERN=y
+CONFIG_CC_HAS_AUTO_VAR_INIT_ZERO=y
 CONFIG_INIT_STACK_NONE=y
+# CONFIG_INIT_STACK_ALL_PATTERN is not set
+# CONFIG_INIT_STACK_ALL_ZERO is not set
 # CONFIG_INIT_ON_ALLOC_DEFAULT_ON is not set
 # CONFIG_INIT_ON_FREE_DEFAULT_ON is not set
 # end of Memory initialization
@@ -1993,6 +1998,8 @@ CONFIG_HAVE_ARCH_KGDB=y
 CONFIG_ARCH_HAS_UBSAN_SANITIZE_ALL=y
 # CONFIG_UBSAN is not set
 CONFIG_HAVE_ARCH_KCSAN=y
+CONFIG_HAVE_KCSAN_COMPILER=y
+# CONFIG_KCSAN is not set
 # end of Generic Kernel Debugging Instruments
 
 CONFIG_DEBUG_KERNEL=y
diff --git a/patches/0001-krunfw-Don-t-panic-when-init-dies.patch b/patches/0001-krunfw-Don-t-panic-when-init-dies.patch
index c69ce10..afd5f4f 100644
--- a/patches/0001-krunfw-Don-t-panic-when-init-dies.patch
+++ b/patches/0001-krunfw-Don-t-panic-when-init-dies.patch
@@ -1,7 +1,7 @@
-From 52afd1c42c1caef91b829bd8cc6b2d9291171b7e Mon Sep 17 00:00:00 2001
+From 9aef9c9df33082bde75edf71c508a03748e3069b Mon Sep 17 00:00:00 2001
 From: Sergio Lopez <slp@redhat.com>
-Date: Wed, 11 Nov 2020 06:56:06 +0100
-Subject: [PATCH 1/9] krunfw: Don't panic when init dies
+Date: Mon, 16 May 2022 15:47:50 +0200
+Subject: [PATCH 1/4] krunfw: Don't panic when init dies
 
 In libkrun, the isolated process runs as PID 1. When it exits,
 trigger an orderly reboot instead of panic'ing.
@@ -16,18 +16,18 @@ Signed-off-by: Sergio Lopez <slp@redhat.com>
  2 files changed, 7 insertions(+)
 
 diff --git a/kernel/exit.c b/kernel/exit.c
-index 727150f28103..92626583efb8 100644
+index d13d67fc5f4e..77531a843c1b 100644
 --- a/kernel/exit.c
 +++ b/kernel/exit.c
-@@ -63,6 +63,7 @@
- #include <linux/random.h>
+@@ -64,6 +64,7 @@
  #include <linux/rcuwait.h>
  #include <linux/compat.h>
+ #include <linux/io_uring.h>
 +#include <linux/reboot.h>
  
  #include <linux/uaccess.h>
  #include <asm/unistd.h>
-@@ -771,8 +772,12 @@ void __noreturn do_exit(long code)
+@@ -777,8 +778,12 @@ void __noreturn do_exit(long code)
  		 * immediately to get a useable coredump.
  		 */
  		if (unlikely(is_global_init(tsk)))
@@ -41,7 +41,7 @@ index 727150f28103..92626583efb8 100644
  #ifdef CONFIG_POSIX_TIMERS
  		hrtimer_cancel(&tsk->signal->real_timer);
 diff --git a/kernel/reboot.c b/kernel/reboot.c
-index 491f1347bf43..d421395b12ca 100644
+index af6f23d8bea1..176b9e529116 100644
 --- a/kernel/reboot.c
 +++ b/kernel/reboot.c
 @@ -246,10 +246,12 @@ void kernel_restart(char *cmd)
@@ -58,5 +58,5 @@ index 491f1347bf43..d421395b12ca 100644
  	machine_restart(cmd);
  }
 -- 
-2.28.0
+2.36.0
 
diff --git a/patches/0002-krunfw-Ignore-run_cmd-on-orderly-reboot.patch b/patches/0002-krunfw-Ignore-run_cmd-on-orderly-reboot.patch
index b1316f5..f60d4bb 100644
--- a/patches/0002-krunfw-Ignore-run_cmd-on-orderly-reboot.patch
+++ b/patches/0002-krunfw-Ignore-run_cmd-on-orderly-reboot.patch
@@ -1,7 +1,7 @@
-From 4afd751c82003841175b03417f7983d7510824be Mon Sep 17 00:00:00 2001
+From a26e00fba74f4b5df76db2ba065ab2b5ede4472e Mon Sep 17 00:00:00 2001
 From: Sergio Lopez <slp@redhat.com>
-Date: Wed, 11 Nov 2020 06:59:26 +0100
-Subject: [PATCH 7/9] krunfw: Ignore run_cmd on orderly reboot
+Date: Mon, 16 May 2022 16:04:27 +0200
+Subject: [PATCH 2/4] krunfw: Ignore run_cmd on orderly reboot
 
 We don't really support restarting the conventional way, so ignore
 "run_cmd" so we can fall back to an emergency sync and reboot.
@@ -12,7 +12,7 @@ Signed-off-by: Sergio Lopez <slp@redhat.com>
  1 file changed, 4 insertions(+)
 
 diff --git a/kernel/reboot.c b/kernel/reboot.c
-index d421395b12ca..1602b568a8ee 100644
+index 176b9e529116..ae015f3b75e6 100644
 --- a/kernel/reboot.c
 +++ b/kernel/reboot.c
 @@ -445,7 +445,11 @@ static int __orderly_reboot(void)
@@ -28,5 +28,5 @@ index d421395b12ca..1602b568a8ee 100644
  	if (ret) {
  		pr_warn("Failed to start orderly reboot: forcing the issue\n");
 -- 
-2.28.0
+2.36.0
 
diff --git a/patches/0003-Implement-TSI-WIP.patch b/patches/0003-Implement-TSI-WIP.patch
index 4d1481f..a65def8 100644
--- a/patches/0003-Implement-TSI-WIP.patch
+++ b/patches/0003-Implement-TSI-WIP.patch
@@ -1,7 +1,7 @@
-From aeb8125893ca1c22f5f56730cc72061211db8d2e Mon Sep 17 00:00:00 2001
+From 0c84a14fee4eacf228443bdc80ba47e80dfce6da Mon Sep 17 00:00:00 2001
 From: Sergio Lopez <slp@redhat.com>
-Date: Wed, 27 Jan 2021 09:31:12 +0100
-Subject: [PATCH] Implement TSI (WIP)
+Date: Mon, 16 May 2022 16:16:30 +0200
+Subject: [PATCH 3/4] Implement TSI (WIP)
 
 ---
  include/linux/socket.h                  |   4 +-
@@ -23,7 +23,7 @@ Subject: [PATCH] Implement TSI (WIP)
  create mode 100644 net/tsi/af_tsi.c
 
 diff --git a/include/linux/socket.h b/include/linux/socket.h
-index e9cb30d8c..d6fde599d 100644
+index 9aa530d497da..81780c27db71 100644
 --- a/include/linux/socket.h
 +++ b/include/linux/socket.h
 @@ -223,8 +223,9 @@ struct ucred {
@@ -46,7 +46,7 @@ index e9cb30d8c..d6fde599d 100644
  
  /* Maximum queue length specifiable by listen.  */
 diff --git a/include/linux/virtio_vsock.h b/include/linux/virtio_vsock.h
-index dc636b727..6a7e34227 100644
+index dc636b727179..6a7e3422783d 100644
 --- a/include/linux/virtio_vsock.h
 +++ b/include/linux/virtio_vsock.h
 @@ -62,6 +62,17 @@ struct virtio_vsock_pkt_info {
@@ -80,7 +80,7 @@ index dc636b727..6a7e34227 100644
 +
  #endif /* _LINUX_VIRTIO_VSOCK_H */
 diff --git a/include/net/af_vsock.h b/include/net/af_vsock.h
-index b1c717286..edf88902b 100644
+index 4d8589244dc7..27b5a8bb0b83 100644
 --- a/include/net/af_vsock.h
 +++ b/include/net/af_vsock.h
 @@ -30,6 +30,10 @@ struct vsock_sock {
@@ -108,7 +108,7 @@ index b1c717286..edf88902b 100644
  };
  
  /**** CORE ****/
-@@ -214,4 +225,10 @@ int vsock_add_tap(struct vsock_tap *vt);
+@@ -215,4 +226,10 @@ int vsock_add_tap(struct vsock_tap *vt);
  int vsock_remove_tap(struct vsock_tap *vt);
  void vsock_deliver_tap(struct sk_buff *build_skb(void *opaque), void *opaque);
  
@@ -120,7 +120,7 @@ index b1c717286..edf88902b 100644
 +
  #endif /* __AF_VSOCK_H__ */
 diff --git a/include/uapi/linux/virtio_vsock.h b/include/uapi/linux/virtio_vsock.h
-index 1d57ed3d8..17efe190c 100644
+index 1d57ed3d84d2..17efe190cb50 100644
 --- a/include/uapi/linux/virtio_vsock.h
 +++ b/include/uapi/linux/virtio_vsock.h
 @@ -83,6 +83,17 @@ enum virtio_vsock_op {
@@ -142,7 +142,7 @@ index 1d57ed3d8..17efe190c 100644
  
  /* VIRTIO_VSOCK_OP_SHUTDOWN flags values */
 diff --git a/net/Kconfig b/net/Kconfig
-index d6567162c..fb66994fc 100644
+index d6567162c1cf..fb66994fc953 100644
 --- a/net/Kconfig
 +++ b/net/Kconfig
 @@ -244,6 +244,7 @@ source "net/switchdev/Kconfig"
@@ -154,7 +154,7 @@ index d6567162c..fb66994fc 100644
  config RPS
  	bool
 diff --git a/net/Makefile b/net/Makefile
-index 5744bf199..ab53bca31 100644
+index 5744bf1997fd..ab53bca3163f 100644
 --- a/net/Makefile
 +++ b/net/Makefile
 @@ -88,3 +88,4 @@ obj-$(CONFIG_QRTR)		+= qrtr/
@@ -163,10 +163,10 @@ index 5744bf199..ab53bca31 100644
  obj-$(CONFIG_MPTCP)		+= mptcp/
 +obj-$(CONFIG_TSI)		+= tsi/
 diff --git a/net/socket.c b/net/socket.c
-index 6e6cccc21..58577bdbc 100644
+index d52c265ad449..665c87630c6d 100644
 --- a/net/socket.c
 +++ b/net/socket.c
-@@ -1408,6 +1408,11 @@ int __sock_create(struct net *net, int family, int type, int protocol,
+@@ -1397,6 +1397,11 @@ int __sock_create(struct net *net, int family, int type, int protocol,
  		request_module("net-pf-%d", family);
  #endif
  
@@ -180,7 +180,7 @@ index 6e6cccc21..58577bdbc 100644
  	err = -EAFNOSUPPORT;
 diff --git a/net/tsi/Kconfig b/net/tsi/Kconfig
 new file mode 100644
-index 000000000..0f52ac6c9
+index 000000000000..0f52ac6c9fa1
 --- /dev/null
 +++ b/net/tsi/Kconfig
 @@ -0,0 +1,7 @@
@@ -193,7 +193,7 @@ index 000000000..0f52ac6c9
 +	  TSI (Transparent Socket Impersonation).
 diff --git a/net/tsi/Makefile b/net/tsi/Makefile
 new file mode 100644
-index 000000000..8b3cf7411
+index 000000000000..8b3cf74116a5
 --- /dev/null
 +++ b/net/tsi/Makefile
 @@ -0,0 +1,4 @@
@@ -203,7 +203,7 @@ index 000000000..8b3cf7411
 +tsi-y := af_tsi.o
 diff --git a/net/tsi/af_tsi.c b/net/tsi/af_tsi.c
 new file mode 100644
-index 000000000..2ad83e99c
+index 000000000000..2ad83e99c6be
 --- /dev/null
 +++ b/net/tsi/af_tsi.c
 @@ -0,0 +1,565 @@
@@ -773,7 +773,7 @@ index 000000000..2ad83e99c
 +MODULE_VERSION("0.0.1");
 +MODULE_LICENSE("GPL v2");
 diff --git a/net/vmw_vsock/af_vsock.c b/net/vmw_vsock/af_vsock.c
-index d10916ab4..7c580634c 100644
+index c59806253a65..9fa23a16f03f 100644
 --- a/net/vmw_vsock/af_vsock.c
 +++ b/net/vmw_vsock/af_vsock.c
 @@ -107,6 +107,8 @@
@@ -785,7 +785,7 @@ index d10916ab4..7c580634c 100644
  #include <net/sock.h>
  #include <net/af_vsock.h>
  
-@@ -766,6 +768,10 @@ static void __vsock_release(struct sock *sk, int level)
+@@ -772,6 +774,10 @@ static void __vsock_release(struct sock *sk, int level)
  		 */
  		lock_sock_nested(sk, level);
  
@@ -796,7 +796,7 @@ index d10916ab4..7c580634c 100644
  		if (vsk->transport)
  			vsk->transport->release(vsk);
  		else if (sk->sk_type == SOCK_STREAM)
-@@ -860,6 +866,31 @@ vsock_bind(struct socket *sock, struct sockaddr *addr, int addr_len)
+@@ -866,6 +872,31 @@ vsock_bind(struct socket *sock, struct sockaddr *addr, int addr_len)
  	return err;
  }
  
@@ -828,7 +828,7 @@ index d10916ab4..7c580634c 100644
  static int vsock_getname(struct socket *sock,
  			 struct sockaddr *addr, int peer)
  {
-@@ -874,6 +905,11 @@ static int vsock_getname(struct socket *sock,
+@@ -880,6 +911,11 @@ static int vsock_getname(struct socket *sock,
  
  	lock_sock(sk);
  
@@ -840,7 +840,7 @@ index d10916ab4..7c580634c 100644
  	if (peer) {
  		if (sock->state != SS_CONNECTED) {
  			err = -ENOTCONN;
-@@ -1999,6 +2035,165 @@ static const struct proto_ops vsock_stream_ops = {
+@@ -2014,6 +2050,165 @@ static const struct proto_ops vsock_stream_ops = {
  	.sendpage = sock_no_sendpage,
  };
  
@@ -1007,10 +1007,10 @@ index d10916ab4..7c580634c 100644
  			int protocol, int kern)
  {
 diff --git a/net/vmw_vsock/virtio_transport.c b/net/vmw_vsock/virtio_transport.c
-index 2700a63ab..9e547390a 100644
+index e131121533ad..bb1fa73dd54f 100644
 --- a/net/vmw_vsock/virtio_transport.c
 +++ b/net/vmw_vsock/virtio_transport.c
-@@ -443,6 +443,11 @@ static void virtio_vsock_rx_done(struct virtqueue *vq)
+@@ -448,6 +448,11 @@ static void virtio_vsock_rx_done(struct virtqueue *vq)
  	queue_work(virtio_vsock_workqueue, &vsock->rx_work);
  }
  
@@ -1022,7 +1022,7 @@ index 2700a63ab..9e547390a 100644
  static struct virtio_transport virtio_transport = {
  	.transport = {
  		.module                   = THIS_MODULE,
-@@ -480,11 +485,49 @@ static struct virtio_transport virtio_transport = {
+@@ -485,11 +490,49 @@ static struct virtio_transport virtio_transport = {
  		.notify_send_pre_enqueue  = virtio_transport_notify_send_pre_enqueue,
  		.notify_send_post_enqueue = virtio_transport_notify_send_post_enqueue,
  		.notify_buffer_size       = virtio_transport_notify_buffer_size,
@@ -1073,7 +1073,7 @@ index 2700a63ab..9e547390a 100644
  {
  	struct virtio_vsock *vsock =
 diff --git a/net/vmw_vsock/virtio_transport_common.c b/net/vmw_vsock/virtio_transport_common.c
-index 5956939ee..b14f841cc 100644
+index d6d3a05c008a..0e320553b6b7 100644
 --- a/net/vmw_vsock/virtio_transport_common.c
 +++ b/net/vmw_vsock/virtio_transport_common.c
 @@ -92,6 +92,50 @@ virtio_transport_alloc_pkt(struct virtio_vsock_pkt_info *info,
@@ -1253,7 +1253,7 @@ index 5956939ee..b14f841cc 100644
  static int virtio_transport_reset(struct vsock_sock *vsk,
  				  struct virtio_vsock_pkt *pkt)
  {
-@@ -856,8 +1005,21 @@ virtio_transport_recv_connecting(struct sock *sk,
+@@ -866,8 +1015,21 @@ virtio_transport_recv_connecting(struct sock *sk,
  	int err;
  	int skerr;
  
@@ -1275,7 +1275,7 @@ index 5956939ee..b14f841cc 100644
  		sk->sk_state = TCP_ESTABLISHED;
  		sk->sk_socket->state = SS_CONNECTED;
  		vsock_insert_connected(vsk);
-@@ -1034,7 +1196,8 @@ virtio_transport_recv_listen(struct sock *sk, struct virtio_vsock_pkt *pkt,
+@@ -1044,7 +1206,8 @@ virtio_transport_recv_listen(struct sock *sk, struct virtio_vsock_pkt *pkt,
  	struct sock *child;
  	int ret;
  
@@ -1285,7 +1285,7 @@ index 5956939ee..b14f841cc 100644
  		virtio_transport_reset_no_sock(t, pkt);
  		return -EINVAL;
  	}
-@@ -1073,6 +1236,17 @@ virtio_transport_recv_listen(struct sock *sk, struct virtio_vsock_pkt *pkt,
+@@ -1083,6 +1246,17 @@ virtio_transport_recv_listen(struct sock *sk, struct virtio_vsock_pkt *pkt,
  		return ret;
  	}
  
@@ -1303,7 +1303,7 @@ index 5956939ee..b14f841cc 100644
  	if (virtio_transport_space_update(child, pkt))
  		child->sk_write_space(child);
  
-@@ -1097,6 +1271,8 @@ void virtio_transport_recv_pkt(struct virtio_transport *t,
+@@ -1107,6 +1281,8 @@ void virtio_transport_recv_pkt(struct virtio_transport *t,
  	struct sock *sk;
  	bool space_available;
  
@@ -1313,5 +1313,5 @@ index 5956939ee..b14f841cc 100644
  			le32_to_cpu(pkt->hdr.src_port));
  	vsock_addr_init(&dst, le64_to_cpu(pkt->hdr.dst_cid),
 -- 
-2.26.2
+2.36.0
 
diff --git a/patches/0004-x86-entry-build-thunk_-BITS-only-if-CONFIG_PREEMPTION-y.patch b/patches/0004-x86-entry-build-thunk_-BITS-only-if-CONFIG_PREEMPTION-y.patch
index bbefbd9..510b439 100644
--- a/patches/0004-x86-entry-build-thunk_-BITS-only-if-CONFIG_PREEMPTION-y.patch
+++ b/patches/0004-x86-entry-build-thunk_-BITS-only-if-CONFIG_PREEMPTION-y.patch
@@ -61,7 +61,7 @@ index f1f96d4d8cd6..5997ec0b4b17 100644
 -#endif
  
 diff --git a/arch/x86/entry/thunk_64.S b/arch/x86/entry/thunk_64.S
-index ccd32877a3c4..c7cf79be7231 100644
+index c9a9fbf1655f..20ae90fa3f6b 100644
 --- a/arch/x86/entry/thunk_64.S
 +++ b/arch/x86/entry/thunk_64.S
 @@ -36,14 +36,11 @@ SYM_FUNC_END(\name)
@@ -76,13 +76,13 @@ index ccd32877a3c4..c7cf79be7231 100644
 -#endif
  
 -#ifdef CONFIG_PREEMPTION
- SYM_CODE_START_LOCAL_NOALIGN(.L_restore)
+ SYM_CODE_START_LOCAL_NOALIGN(__thunk_restore)
  	popq %r11
  	popq %r10
-@@ -58,4 +55,3 @@ SYM_CODE_START_LOCAL_NOALIGN(.L_restore)
+@@ -58,4 +55,3 @@ SYM_CODE_START_LOCAL_NOALIGN(__thunk_restore)
  	ret
- 	_ASM_NOKPROBE(.L_restore)
- SYM_CODE_END(.L_restore)
+ 	_ASM_NOKPROBE(__thunk_restore)
+ SYM_CODE_END(__thunk_restore)
 -#endif
 diff --git a/arch/x86/um/Makefile b/arch/x86/um/Makefile
 index 77f70b969d14..3113800da63a 100644
@@ -98,3 +98,6 @@ index 77f70b969d14..3113800da63a 100644
  
  endif
  
+-- 
+2.36.1
+
