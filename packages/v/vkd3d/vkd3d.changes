-------------------------------------------------------------------
Sat Sep 23 14:01:50 UTC 2023 - Tobias Klausmann <tobias.klausmann@freenet.de>

- Update to version 1.9:
  - libvkd3d
    Copying between depth/stencil and colour formats in
    ID3D12GraphicsCommandList::CopyResource() is supported.
    The ID3D12Fence1 interface is supported.
  - libvkd3d-shader
    vkd3d_shader_scan() supports retrieving descriptor information for d3dbc'
    shaders. This is one of the requirements for eventual SPIR-V generation
    from d3dbc' sources.
    New features for the HLSL source type:
    Support for the following intrinsic functions: clip(), ddx_coarse(),
    ddy_coarse(), ddx_fine(), ddy_fine(), tex1D(), tex2D(), texCUBE(), and
    tex3D()
    Constant folding support for more expression types. In particular:
    comparison operators, floating-point min(), max(), logical and' and or',
    dot products, square roots and logarithms
    Support for multi-sample texture object declarations without explicit
    sample counts in shader model 4.1 and later shaders.
    Support for using constant expressions as sample counts in multi-sample
    texture object declarations.
    Support for variable initialisers using variables declared earlier in the
    same declaration list. E.g., `float a = 1, b = a, c = b + 1;'.
    The GetDimensions() texture object method is implemented.
    Matrix swizzles are implemented.
    Parser support for if-statement attributes like [branch]' and [flatten]'.
    Support for the `inline' function modifier.
    Previously, vkd3d_shader_compile() would in some cases return VKD3D_OK
    despite compilation failing when targeting legacy Direct3D bytecode. These
    cases have been fixed.
    Various HLSL preprocessor fixes for edge cases related to stringification.
    SPIR-V target support for the `linear noperspective centroid' input
    interpolation mode.
    New interfaces:
    The vkd3d_shader_scan_signature_info structure extends the
    vkd3d_shader_compile_info structure, and can be used to retrieve
    descriptions of dxbc-tpf' and d3dbc' shader inputs and outputs.
    vkd3d_shader_free_scan_signature_info() is used to free
    vkd3d_shader_scan_signature_info structures.
    The VKD3D_SHADER_COMPILE_OPTION_PACK_MATRIX_ORDER compile option can be
    used to specify the default matrix packing order for HLSL sources.
    The vkd3d_shader_varying_map_info structure extends the
    vkd3d_shader_compile_info structure, and can be used to specify a mapping
    between the outputs of a shader stage and the inputs of the next shader
    stage.
    vkd3d_shader_build_varying_map() is used to build a mapping between the
    outputs of a shader stage and the inputs of the next shader stage.
    The VKD3D_SHADER_DESCRIPTOR_INFO_FLAG_RAW_BUFFER flag returned as part of
    the vkd3d_shader_descriptor_info structure indicates the descriptor refers
    to a byte-addressed (`raw') buffer resource.
  - vkd3d-compiler
    The `--matrix-storage-order' option can used to specify the default matrix
    storage order for HLSL sources.
  - vkd3d-dxbc
    vkd3d-dxbc is a new utility that can be used to inspect the contents of DXBC
    blobs.

-------------------------------------------------------------------
Sun Aug  6 14:53:19 UTC 2023 - Tobias Klausmann <tobias.klausmann@freenet.de>

- Update to version 1.8:
  - Performance improvements have been made to the code that handles descriptor
    updates. In some applications the improvement can be quite significant.
  - Host-visible descriptor heaps are persistently mapped on creation. Some
    applications access resource data from the CPU after calling Unmap(), and
    that's supposed to work in practice.
  - 1-dimensional texture unordered-access views and shader resource views are
    implemented.
  - Shader resource view, unordered access view, and constant buffer view root
    descriptors with NULL GPU addresses are supported.
  - Direct3D 12 descriptor heap destruction is delayed until all contained
    resources are destroyed.
  - libvkd3d-shader
    - New features for the HLSL source type:
      - Support for the ternary conditional operator "?:".
      - Support for "discard" statements.
      - Support for the "packoffset" keyword.
      - Support for semantics on array types.
      - Support for RWBuffer loads and stores.
      - Register allocation for arrays and structures of resources and samplers
        is implemented.
      - Support for the SV_IsFrontFace pixel shader system-value semantics.
      - Support for using constant expressions as array sizes and indices.
      - Support for dynamic selection of vector components.
      - Support for the following intrinsic functions: D3DCOLORtoUBYTE4(),
        any(), asfloat(), ddx(), ddy(), fmod(), log(), log2(), log10(), sign()
        and trunc().
      - The SampleBias(), SampleCmp(), SampleCmpLevelZero(), and SampleGrad()
        texture object methods are implemented.
      - Support for the case-insensitive variants of the "vector" and "matrix"
        data types.
      - Parser support for the "unroll" loop attribute. A warning is output for
        "unroll" without iteration count, and an error is output when an
        iteration count is specified. Actual unrolling is not implemented yet.
      - Parser support for RWStructuredBuffer resources.
      - Parser support for SamplerComparisonState objects. Note that outputting
        compiled effects is not supported yet, but parsing these allows shaders
        containing SamplerComparisonState state objects to be compiled.
    - More improvements to HLSL support for the Direct3D shader model 1/2/3
      profiles.
    - The section alignment of DXBC blobs produced by
      vkd3d_shader_serialize_dxbc() matches those produced by d3dcompiler more
      closely.
    - The "main" function for shaders produced by the SPIR-V target is always
      terminated, even when the source was a TPF shader without explicit "ret"
      instruction.
    - Relative addressing of shader input registers is supported by SPIR-V
     targets.

-------------------------------------------------------------------
Wed May 17 17:06:32 UTC 2023 - Tobias Klausmann <tobias.klausmann@freenet.de>

- Update to version 1.7.1:
  - Release 1.7 has a bug that causes an internal mutex in its command queue
    implementation to be unlocked too early under certain usage patterns. This
    is known to further cause internal inconsistencies that manifest as program
    deadlocks for some programs. In release 1.7.1 the mutex is correctly kept
    locked until required.
  - Symbol D3D12CreateDevice is mistakenly not exported in release 1.7,
    breaking library clients that need it. The symbol is exported again in
    release 1.7.1.

-------------------------------------------------------------------
Sat Apr  1 16:27:43 UTC 2023 - Tobias Klausmann <tobias.klausmann@freenet.de>

- Update to version 1.7:
  - Support for many more HLSL features and intrinsics.
  - Much improved support for the Direct3D shader model 1/2/3 HLSL profiles.
  - Public vkd3d-shader API for parsing and serialising DXBC blobs.
  - Miscellaneous bug fixes.

-------------------------------------------------------------------
Mon Dec 12 21:52:23 UTC 2022 - Tobias Klausmann <tobias.klausmann@freenet.de>

- Update to version 1.6:
  - Initial support for HLSL compute shaders.
  - More support for HLSL features and intrinsics.
  - Miscellaneous bug fixes.

-------------------------------------------------------------------
Thu Oct 27 16:51:39 UTC 2022 - Tobias Klausmann <tobias.klausmann@freenet.de>

- Update to version 1.5:
  - Support for various HLSL features and intrinsics.
  - Typed unordered access view loads of multicomponent formats.
  - Miscellaneous bug fixes.
- Packaging changes:
  - Disable test until they are fixed

-------------------------------------------------------------------
Thu Jun 23 07:00:31 UTC 2022 - Marcus Meissner <meissner@suse.com>

- updated to 1.4
  - Many improvements to the HLSL compiler.
  - A new descriptor heap implementation using the VK_EXT_descriptor_indexing
    extension.
  - A new fence implementation using the VK_KHR_timeline_semaphore extension.
- updated to 1.3
  - Initial HLSL compilation support.
  - Shader model 5.1 descriptor array support.
  - Support for disassembling Direct3D shaders.

-------------------------------------------------------------------
Thu Sep 24 06:29:15 UTC 2020 - Marcus Meissner <meissner@suse.com>

- added also shader library to baselibs.conf (bsc#1176894)

-------------------------------------------------------------------
Tue Sep 22 10:05:34 UTC 2020 - Marcus Meissner <meissner@suse.com>

- updated to 1.2
  - Availability of libvkd3d-shader as a public library.
  - Support for tessellation shaders.
  - Version 1.1 root signatures.
  - Stream output support.
- added gpg signature and keyring.

-------------------------------------------------------------------
Sat May 30 16:03:34 UTC 2020 - Marcus Meissner <meissner@suse.com>

- updated baselibs requires to allow better wine 32bit dependencies (bsc#1172310)

-------------------------------------------------------------------
Sun Oct  7 15:40:27 UTC 2018 - meissner@suse.com

- updated to 1.1
  - Initial support for placed resources.
  - MoltenVK support.
  - Support for geometry shaders.

-------------------------------------------------------------------
Sun Jul 29 10:19:37 UTC 2018 - jengelh@inai.de

- Fix RPM groups. Drop redundant ldconfig requires (they are
  implicit).

-------------------------------------------------------------------
Sun Jun 17 10:06:49 UTC 2018 - meissner@suse.com

- ininital vkd3d library, Direct3D 12 to Vulkan translation library
