Index: VirtualBox-7.0.4/Config.kmk
===================================================================
--- VirtualBox-7.0.4.orig/Config.kmk
+++ VirtualBox-7.0.4/Config.kmk
@@ -3102,15 +3102,17 @@ else
  # The reason for this hack is that the windows kmk_ash cannot deal with $((1+1)).
  # Some versions of gcc (e.g. openSUSE11) return only major.minor on `gcc -dumpversion`.
  # gcc-5 of openSUSE42.1 only returns the major version on `gcc -dumpversion`!
- VBOX_GCC_VERSION = $(shell ($(1) -dumpfullversion 2>/dev/null || $(1) -dumpversion) | \
+ #
+ # Check to make sure that the compiler has either  -dumpfullversion or -dumpversion. gcc-10 has neither
+ RC = $(shell ($(1) -dumpfullversion 2>/dev/null || $(1) -dumpversion 2>/dev/null) ; echo $$?)
+ ifneq ($(RC),0)
+    # dump version commands not available - hardcode 10.2.1 for the moment
+    VBOX_GCC_VERSION = 100201
+ else
+    VBOX_GCC_VERSION = $(shell ($(1) -dumpfullversion 2>/dev/null || $(1) -dumpversion 2>/dev/null) | \
     $(SED_EXT) 's|\([0-9][0-9]*\)\.\{0,1\}\([0-9]\{0,\}\)\.\{0,1\}\([0-9]\{0,\}\).*|$$(expr 10000 * \1 + 100 * $$(firstword \2 0) + $$(firstword \3 0))|' )
- ifeq ($(KBUILD_TARGET), darwin)
-  VBOX_CLANG_VERSION = $(shell $(1) --version | \
-    $(SED_EXT) -n 's|.*version \([0-9][0-9]*\)\.\{0,1\}\([0-9]\{0,\}\)\.\{0,1\}\([0-9]\{0,\}\).*|$$(expr 10000 * \1 + 100 * $$(firstword \2 0) + $$(firstword \3 0))|p' )
  endif
 endif
-
-# YASM macros
 ifndef DONT_USE_YASM
  include $(KBUILD_PATH)/tools/YASM.kmk
  if1of ($(KBUILD_HOST), win os2)
Index: VirtualBox-7.0.4/src/VBox/Debugger/DBGCDumpImage.cpp
===================================================================
--- VirtualBox-7.0.4.orig/src/VBox/Debugger/DBGCDumpImage.cpp
+++ VirtualBox-7.0.4/src/VBox/Debugger/DBGCDumpImage.cpp
@@ -478,7 +478,7 @@ static const char *dbgcMachoCpuType(int3
 {
     switch (iType)
     {
-        case CPU_TYPE_ANY:          return "CPU_TYPE_ANY";
+        default:		    return "CPU_TYPE_ANY";
         case CPU_TYPE_VAX:          return "VAX";
         case CPU_TYPE_MC680x0:      return "MC680x0";
         case CPU_TYPE_X86:          return "X86";
