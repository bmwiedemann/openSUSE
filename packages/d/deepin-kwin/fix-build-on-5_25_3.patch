From a329eeaf48d46620cc645fd9693532c6a3dd5057 Mon Sep 17 00:00:00 2001
From: justforlxz <justforlxz@gmail.com>
Date: Fri, 12 Aug 2022 10:12:58 +0800
Subject: [PATCH] fix

Change-Id: I3bcb24b4b2a06d0d9ae146764c3b848562f08a6f
---
 CMakeLists.txt                                |  22 ++-
 configures/CMakeLists.txt                     |  14 +-
 configures/kwin_no_scale.in                   |  27 ++--
 configures/{kwinrc => kwinrc.in}              |   2 +-
 plugins/kdecoration/CMakeLists.txt            |   1 +
 plugins/kdecoration/chameleon.cpp             |   2 +
 plugins/kdecoration/chameleon.h               |   6 +
 plugins/kdecoration/chameleonbutton.cpp       |   5 +
 plugins/kdecoration/chameleonconfig.cpp       |  22 ++-
 plugins/kdecoration/chameleonconfig.h         |  19 ++-
 plugins/kwineffects/CMakeLists.txt            |   6 +-
 .../{cornermask.frag.140 => cornermask.frag}  |   0
 ...rnermask.frag.110 => cornermask_core.frag} |   0
 .../{fullmask.frag.140 => fullmask.frag}      |   0
 .../{fullmask.frag.110 => fullmask_core.frag} |   0
 plugins/kwineffects/scissor-window/glsl.qrc   |  14 +-
 plugins/kwineffects/scissor-window/main.cpp   |  26 ++--
 .../scissor-window/scissor-window.json        |  19 ++-
 .../scissor-window/scissorwindow.cpp          | 133 +++++++++++-------
 .../scissor-window/scissorwindow.h            |   6 +-
 plugins/platforms/lib/kwinutils.cpp           |  74 +++++++++-
 plugins/platforms/plugin/libkwinpreload.cpp   |  35 +++++
 plugins/platforms/plugin/libkwinpreload.h     |  11 +-
 23 files changed, 330 insertions(+), 114 deletions(-)
 mode change 100755 => 100644 configures/kwin_no_scale.in
 rename configures/{kwinrc => kwinrc.in} (98%)
 rename plugins/kwineffects/scissor-window/{cornermask.frag.140 => cornermask.frag} (100%)
 rename plugins/kwineffects/scissor-window/{cornermask.frag.110 => cornermask_core.frag} (100%)
 rename plugins/kwineffects/scissor-window/{fullmask.frag.140 => fullmask.frag} (100%)
 rename plugins/kwineffects/scissor-window/{fullmask.frag.110 => fullmask_core.frag} (100%)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 7130fe0e79..70df987179 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -20,6 +20,19 @@ option(USE_SCRIPTS "use scripts" ON)
 option(USE_DEEPIN_WM_DBUS "use deepin-wm dbus service" ON)
 option(USE_TABBOX "use deepin style tabbox" ON)
 option(USE_WINDOW_TOOL "support wayland and x11" ON)
+option(USE_DEEPIN_WAYLAND "use deepin wayland" ON)
+option(ENABLE_BUILTIN_SCISSOR_WINDOW "enable deepin built-in scissor window plugin" ON)
+option(ENABLE_BUILTIN_BLUR "enable deepin built-in blur plugin" ON)
+option(ENABLE_BUILTIN_MULTITASKING "enable deepin built-in multitasking plugin" ON)
+option(ENABLE_BUILTIN_BLACK_SCREEN "enable deepin built-in black screen plugin" ON)
+
+if(ENABLE_BUILTIN_BLUR)
+     add_definitions(-DENABLE_BUILTIN_BLUR)
+endif(ENABLE_BUILTIN_BLUR)
+
+if (USE_DEEPIN_WAYLAND)
+    add_definitions(-DUSE_DEEPIN_WAYLAND)
+endif(USE_DEEPIN_WAYLAND)
 
 #when "KWIN_VERSION > KWIN_VERSION_CHECK(5, 18, 90, 0)"
 find_path(
@@ -53,7 +66,10 @@ endmacro()
 
 query_qmake("QT_INSTALL_PLUGINS" QT_INSTALL_PLUGINS)
 
-set(PLUGIN_INSTALL_PATH ${QT_INSTALL_PLUGINS}/platforms)
+if(NOT DEFINED PLUGIN_INSTALL_PATH)
+    set(PLUGIN_INSTALL_PATH ${QT_INSTALL_PLUGINS}/platforms)
+endif()
+
 # Find includes in corresponding build directories
 set(CMAKE_INCLUDE_CURRENT_DIR ON)
 # Instruct CMake to run moc automatically when needed
@@ -97,8 +113,6 @@ if (KWIN_VERSION)
     )
 endif()
 
-add_subdirectory(configures)
-
 if (USE_PLUGINS)
   add_subdirectory(plugins)
 endif()
@@ -122,3 +136,5 @@ endif()
 if (USE_WINDOW_TOOL)
   add_subdirectory(windowtool)
 endif()
+
+add_subdirectory(configures)
diff --git a/configures/CMakeLists.txt b/configures/CMakeLists.txt
index 3b2301b364..4a617d3b83 100644
--- a/configures/CMakeLists.txt
+++ b/configures/CMakeLists.txt
@@ -1,9 +1,17 @@
 option(USE_KWIN_NO_SCALE "use deepin LD_PRELOAD kwin_no_scale" ON)
 
+if(ENABLE_BUILTIN_BLUR)
+     set(ENABLE_BUILTIN_BLUR_STRING "false")
+ else()
+     set(ENABLE_BUILTIN_BLUR_STRING "true")
+ endif()
+
+configure_file(kwinrc.in kwinrc)
+
 install(
     FILES
     kglobalshortcutsrc
-    kwinrc
+    ${CMAKE_CURRENT_BINARY_DIR}/kwinrc
     kwinrulesrc
     klaunchrc
     kdeglobals
@@ -13,5 +21,7 @@ install(
 
 if (USE_KWIN_NO_SCALE)
     configure_file(kwin_no_scale.in kwin_no_scale)
-    install_files("/bin" FILES ${CMAKE_CURRENT_BINARY_DIR}/kwin_no_scale)
+    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/kwin_no_scale
+            DESTINATION bin
+            PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
 endif()
diff --git a/configures/kwin_no_scale.in b/configures/kwin_no_scale.in
old mode 100755
new mode 100644
index d34aba1f73..8b4a5b18a9
--- a/configures/kwin_no_scale.in
+++ b/configures/kwin_no_scale.in
@@ -1,20 +1,19 @@
-#!/bin/sh
-
-KWIN_VERSION=`kwin_x11 --version 2>/dev/null`
-DDE_KWIN_SUPPORTED_VERSION='kwin 5.21.5'
-if [ "$KWIN_VERSION" \> "$DDE_KWIN_SUPPORTED_VERSION" ]; then
-    kwin_x11 $@
-    exit 0
-fi
+#!/bin/bash
 
 if [ -n "$HOME" ];then
     cp -n /etc/xdg/kglobalshortcutsrc $HOME/.config/kglobalshortcutsrc
 fi
 
-EXECUTE_PATH=$(cd `dirname $0`; pwd)
+ARGS=$@
+
+function runDeepinKWin() {
+    local EXECUTE_PATH=$1
+    export LD_PRELOAD=${PLUGIN_INSTALL_PATH}/libdde-kwin-xcb.so:$LD_PRELOAD
+    export QT_SCALE_FACTOR=1
+    #":"后的"appFilePath=..."会传递给QPlatformIntegration::create调用
+    # appFilePath 的值会覆盖 QCoreApplication::applicationPath，以确保kwin崩溃自动重启时也是启动的kwin_no_scale脚本
+    kwin_x11 -platform dde-kwin-xcb:appFilePath=$EXECUTE_PATH/kwin_no_scale $ARGS
+    return $?
+}
 
-export "LD_PRELOAD=${PLUGIN_INSTALL_PATH}/libdde-kwin-xcb.so:$LD_PRELOAD"
-export QT_SCALE_FACTOR=1
-#":"后的"appFilePath=..."会传递给QPlatformIntegration::create调用
-# appFilePath 的值会覆盖 QCoreApplication::applicationPath，以确保kwin崩溃自动重启时也是启动的kwin_no_scale脚本
-kwin_x11 -platform dde-kwin-xcb:appFilePath=$EXECUTE_PATH/kwin_no_scale $@
+runDeepinKWin "$(cd `dirname $0`; pwd)" || kwin_x11 $ARGS
diff --git a/configures/kwinrc b/configures/kwinrc.in
similarity index 98%
rename from configures/kwinrc
rename to configures/kwinrc.in
index 91e05ee763..a19ab3fdd0 100644
--- a/configures/kwinrc
+++ b/configures/kwinrc.in
@@ -1,6 +1,6 @@
 [Plugins]
 #默认使用com.deepin.blur
-blurEnabled=false
+blurEnabled=@ENABLE_BUILTIN_BLUR_STRING@
 enforcedecoEnabled=false
 minimizeallEnabled=true
 kwin4_effect_dialogparentEnabled=false
diff --git a/plugins/kdecoration/CMakeLists.txt b/plugins/kdecoration/CMakeLists.txt
index 0a34ea25d4..60196cf371 100644
--- a/plugins/kdecoration/CMakeLists.txt
+++ b/plugins/kdecoration/CMakeLists.txt
@@ -5,6 +5,7 @@ add_definitions(-DTARGET_NAME=\\"${TARGET_NAME}\\")
 find_package(Qt5 CONFIG REQUIRED COMPONENTS Core)
 find_package(KF5CoreAddons REQUIRED)
 find_package(Qt5DBus REQUIRED)
+find_package(X11 REQUIRED)
 find_package(KF5Config REQUIRED)
 find_package(KF5WindowSystem REQUIRED)
 find_package(KDecoration2 REQUIRED)
diff --git a/plugins/kdecoration/chameleon.cpp b/plugins/kdecoration/chameleon.cpp
index 6896edbde3..289b9c3cc0 100644
--- a/plugins/kdecoration/chameleon.cpp
+++ b/plugins/kdecoration/chameleon.cpp
@@ -80,6 +80,7 @@ void Chameleon::init()
     updateTheme();
 
     if (!QX11Info::isPlatformX11() && m_client) {
+#ifdef USE_DEEPIN_WAYLAND
         m_ddeShellSurface = static_cast<KWayland::Server::DDEShellSurfaceInterface*>(KWinUtils::getDDEShellSurface(m_client));
         if (m_ddeShellSurface) {
             connect(m_ddeShellSurface, &KWayland::Server::DDEShellSurfaceInterface::noTitleBarPropertyRequested, this,
@@ -102,6 +103,7 @@ void Chameleon::init()
                 }
             );
         }
+#endif
     }
 
     connect(global_config, &ChameleonConfig::themeChanged, this, &Chameleon::updateTheme);
diff --git a/plugins/kdecoration/chameleon.h b/plugins/kdecoration/chameleon.h
index 6bfde0b168..e9c0986328 100644
--- a/plugins/kdecoration/chameleon.h
+++ b/plugins/kdecoration/chameleon.h
@@ -33,7 +33,11 @@
 #include <QSettings>
 #include <QScreen>
 #include <QPainterPath>
+#include <QFont>
+
+#ifdef USE_DEEPIN_WAYLAND
 #include <KWayland/Server/ddeshell_interface.h>
+#endif
 
 class Settings;
 class ChameleonWindowTheme;
@@ -124,7 +128,9 @@ private Q_SLOTS:
 
     QPointer<KWin::EffectWindow> m_effect;
     QFont m_font;
+#ifdef USE_DEEPIN_WAYLAND
     KWayland::Server::DDEShellSurfaceInterface * m_ddeShellSurface = nullptr;
+#endif
 };
 
 #endif // CHAMELEON_H
diff --git a/plugins/kdecoration/chameleonbutton.cpp b/plugins/kdecoration/chameleonbutton.cpp
index 9c18da9d51..aca33df5f3 100644
--- a/plugins/kdecoration/chameleonbutton.cpp
+++ b/plugins/kdecoration/chameleonbutton.cpp
@@ -222,8 +222,13 @@ void ChameleonButton::mousePressEvent(QMouseEvent *event)
                 if (decoration) {
                     effect = decoration->effect();
                     if (m_pSplitMenu && effect) {
+#if !defined(KWIN_VERSION) || KWIN_VERSION < KWIN_VERSION_CHECK(5, 23, 4, 0)
                         qreal x = effect->geometry().x();
                         qreal y = effect->geometry().y();
+#else
+                        qreal x = effect->clientGeometry().x();
+                        qreal y = effect->clientGeometry().y();
+#endif
                         QPoint p(x + geometry().x(), y + geometry().height());
                         m_pSplitMenu->setShowSt(true);
                         m_pSplitMenu->stopTime();
diff --git a/plugins/kdecoration/chameleonconfig.cpp b/plugins/kdecoration/chameleonconfig.cpp
index 79270c776b..830b5d960f 100644
--- a/plugins/kdecoration/chameleonconfig.cpp
+++ b/plugins/kdecoration/chameleonconfig.cpp
@@ -24,10 +24,6 @@
 #include "chameleon.h"
 #include "chameleonwindowtheme.h"
 
-#ifndef DISBLE_DDE_KWIN_XCB
-#include "kwinutils.h"
-#endif
-
 #include <kwineffects.h>
 
 #include <KConfig>
@@ -147,7 +143,11 @@ void ChameleonConfig::onConfigChanged()
 }
 
 #define D_KWIN_DEBUG_APP_START_TIME "D_KWIN_DEBUG_APP_START_TIME"
-void ChameleonConfig::onClientAdded(KWin::Client *client)
+#if KWIN_VERSION_MAJ <= 5 && KWIN_VERSION_MIN < 25 && KWIN_VERSION_MIN < 4
+void ChameleonConfig::onClientAdded(KWin::AbstractClient *client)
+#else
+void ChameleonConfig::onClientAdded(KWin::Window *client)
+#endif
 {
     QObject *c = reinterpret_cast<QObject*>(client);
 
@@ -911,7 +911,11 @@ void ChameleonConfig::init()
 {
 #ifndef DISBLE_DDE_KWIN_XCB
     connect(KWinUtils::workspace(), SIGNAL(configChanged()), this, SLOT(onConfigChanged()));
-    connect(KWinUtils::workspace(), SIGNAL(clientAdded(KWin::Client*)), this, SLOT(onClientAdded(KWin::Client*)));
+#if KWIN_VERSION_MAJ <= 5 && KWIN_VERSION_MIN < 25 && KWIN_VERSION_MIN < 4
+    connect(KWinUtils::workspace(), SIGNAL(windowAdded(KWin::AbstractClient*)), this, SLOT(onClientAdded(KWin::AbstractClient*)));
+#else
+    connect(KWinUtils::workspace(), SIGNAL(windowAdded(KWin::Window*)), this, SLOT(onClientAdded(KWin::Window*)));
+#endif
     connect(KWinUtils::workspace(), SIGNAL(unmanagedAdded(KWin::Unmanaged*)), this, SLOT(onUnmanagedAdded(KWin::Unmanaged*)));
     connect(KWinUtils::compositor(), SIGNAL(compositingToggled(bool)), this, SLOT(onCompositingToggled(bool)));
     connect(KWinUtils::instance(), &KWinUtils::windowPropertyChanged, this, &ChameleonConfig::onWindowPropertyChanged);
@@ -1231,7 +1235,11 @@ void ChameleonConfig::buildKWinX11Shadow(QObject *window)
         effect = window->findChild<KWin::EffectWindow*>(QString(), Qt::FindDirectChildrenOnly);
 
         if (effect) {
-            QRect shape_rect = effect->shape().boundingRect();
+#if !defined(KWIN_VERSION) || KWIN_VERSION < KWIN_VERSION_CHECK(5, 23, 4, 0)
+            QRect shape_rect = effect->geometry();
+#else
+            QRect shape_rect = effect->clientGeometry();
+#endif
             const QRect window_rect(QPoint(0, 0), window->property("size").toSize());
 
             // 减去窗口的shape区域
diff --git a/plugins/kdecoration/chameleonconfig.h b/plugins/kdecoration/chameleonconfig.h
index b9408267e7..e5b5a75964 100644
--- a/plugins/kdecoration/chameleonconfig.h
+++ b/plugins/kdecoration/chameleonconfig.h
@@ -23,6 +23,10 @@
 
 #include <QObject>
 
+#ifndef DISBLE_DDE_KWIN_XCB
+#include "kwinutils.h"
+#endif
+
 #include <kwineffects.h>
 
 // 标记窗口当前是否正在使用变色龙窗口标题栏主题
@@ -38,7 +42,12 @@
 #define _NET_WM_WINDOW_TYPE "_NET_WM_WINDOW_TYPE"
 
 namespace KWin {
-class Client;
+#if KWIN_VERSION_MAJ <= 5 && KWIN_VERSION_MIN < 25 && KWIN_VERSION_MIN < 4
+class AbstractClient;
+#else
+class Window;
+#endif
+
 class Unmanaged;
 class EffectWindow;
 class Toplevel;
@@ -54,7 +63,7 @@ class ChameleonConfig : public QObject
 
 public:
     enum EffectDataRole {
-        BaseRole = KWin::DataRole::LanczosCacheRole + 100,
+        BaseRole = KWin::DataRole::WindowBackgroundContrastRole + 100,
         WindowRadiusRole = BaseRole + 1,
         WindowClipPathRole = BaseRole + 2,
         WindowMaskTextureRole = BaseRole + 3
@@ -93,7 +102,11 @@ public slots:
 
 private slots:
     void onConfigChanged();
-    void onClientAdded(KWin::Client *client);
+#if KWIN_VERSION_MAJ <= 5 && KWIN_VERSION_MIN < 25 && KWIN_VERSION_MIN < 4
+    void onClientAdded(KWin::AbstractClient *client);
+#else
+    void onClientAdded(KWin::Window *client);
+#endif
     // 针对X11BypassWindowManagerHint类型的窗口需要做一些特殊处理
     void onUnmanagedAdded(KWin::Unmanaged *client);
     void onCompositingToggled(bool active);
diff --git a/plugins/kwineffects/CMakeLists.txt b/plugins/kwineffects/CMakeLists.txt
index 96d95c98d8..5a60368960 100644
--- a/plugins/kwineffects/CMakeLists.txt
+++ b/plugins/kwineffects/CMakeLists.txt
@@ -1,14 +1,10 @@
 find_package(Qt5 CONFIG REQUIRED COMPONENTS Core Gui)
+find_package(X11 REQUIRED)
 find_package(KF5CoreAddons REQUIRED)
 find_package(KF5WindowSystem REQUIRED)
 
 set(INSTALL_PATH "${QT_INSTALL_PLUGINS}/kwin/effects/plugins")
 
-option(ENABLE_BUILTIN_SCISSOR_WINDOW "enable deepin built-in scissor window plugin" ON)
-option(ENABLE_BUILTIN_BLUR "enable deepin built-in blur plugin" ON)
-option(ENABLE_BUILTIN_MULTITASKING "enable deepin built-in multitasking plugin" ON)
-option(ENABLE_BUILTIN_BLACK_SCREEN "enable deepin built-in black screen plugin" ON)
-
 if (ENABLE_BUILTIN_SCISSOR_WINDOW)
     add_subdirectory(scissor-window)
 endif()
diff --git a/plugins/kwineffects/scissor-window/cornermask.frag.140 b/plugins/kwineffects/scissor-window/cornermask.frag
similarity index 100%
rename from plugins/kwineffects/scissor-window/cornermask.frag.140
rename to plugins/kwineffects/scissor-window/cornermask.frag
diff --git a/plugins/kwineffects/scissor-window/cornermask.frag.110 b/plugins/kwineffects/scissor-window/cornermask_core.frag
similarity index 100%
rename from plugins/kwineffects/scissor-window/cornermask.frag.110
rename to plugins/kwineffects/scissor-window/cornermask_core.frag
diff --git a/plugins/kwineffects/scissor-window/fullmask.frag.140 b/plugins/kwineffects/scissor-window/fullmask.frag
similarity index 100%
rename from plugins/kwineffects/scissor-window/fullmask.frag.140
rename to plugins/kwineffects/scissor-window/fullmask.frag
diff --git a/plugins/kwineffects/scissor-window/fullmask.frag.110 b/plugins/kwineffects/scissor-window/fullmask_core.frag
similarity index 100%
rename from plugins/kwineffects/scissor-window/fullmask.frag.110
rename to plugins/kwineffects/scissor-window/fullmask_core.frag
diff --git a/plugins/kwineffects/scissor-window/glsl.qrc b/plugins/kwineffects/scissor-window/glsl.qrc
index 8b2ecb6f3e..2e6bc448d4 100644
--- a/plugins/kwineffects/scissor-window/glsl.qrc
+++ b/plugins/kwineffects/scissor-window/glsl.qrc
@@ -1,10 +1,16 @@
 <RCC>
+    <qresource prefix="/">
+        <file>cornermask_core.frag</file>
+        <file>fullmask_core.frag</file>
+        <file>cornermask.frag</file>
+        <file>fullmask.frag</file>
+    </qresource>
     <qresource prefix="/effect-shaders-1.10">
-        <file alias="corner-mask.frag">cornermask.frag.110</file>
-        <file alias="full-mask.frag">fullmask.frag.110</file>
+        <file alias="cornermask.frag">cornermask_core.frag</file>
+        <file alias="fullmask.frag">fullmask_core.frag</file>
     </qresource>
     <qresource prefix="/effect-shaders-1.40">
-        <file alias="corner-mask.frag">cornermask.frag.140</file>
-        <file alias="full-mask.frag">fullmask.frag.140</file>
+        <file alias="cornermask.frag">cornermask.frag</file>
+        <file alias="fullmask.frag">fullmask.frag</file>
     </qresource>
 </RCC>
diff --git a/plugins/kwineffects/scissor-window/main.cpp b/plugins/kwineffects/scissor-window/main.cpp
index 73544556c2..8d9659e19c 100644
--- a/plugins/kwineffects/scissor-window/main.cpp
+++ b/plugins/kwineffects/scissor-window/main.cpp
@@ -23,19 +23,27 @@
 class ScissorWindowPluginFactory : public KWin::EffectPluginFactory
 {
     Q_OBJECT
-    Q_INTERFACES(KPluginFactory)
+#if KWIN_VERSION_MAJ <= 5 && KWIN_VERSION_MIN < 23
     Q_PLUGIN_METADATA(IID KPluginFactory_iid FILE "scissor-window.json")
-
+#else
+    Q_PLUGIN_METADATA(IID EffectPluginFactory_iid FILE "scissor-window.json")
+#endif
+    Q_INTERFACES(KPluginFactory)
 public:
-    explicit ScissorWindowPluginFactory();
-    ~ScissorWindowPluginFactory();
+    explicit ScissorWindowPluginFactory() {}
+    ~ScissorWindowPluginFactory() {}
 
-    KWin::Effect *createEffect() const {
-        return ScissorWindow::supported() ? new ScissorWindow() : nullptr;
+    bool isSupported() const override {
+        return ScissorWindow::supported();
     }
-};
 
-K_PLUGIN_FACTORY_DEFINITION(ScissorWindowPluginFactory, registerPlugin<ScissorWindow>();)
-K_EXPORT_PLUGIN_VERSION(KWIN_EFFECT_API_VERSION)
+    bool enabledByDefault() const override {
+        return true;
+    }
+
+    KWin::Effect *createEffect() const override {
+        return new ScissorWindow;
+    }
+};
 
 #include "main.moc"
diff --git a/plugins/kwineffects/scissor-window/scissor-window.json b/plugins/kwineffects/scissor-window/scissor-window.json
index e2ebdc65d9..56522ecd1f 100644
--- a/plugins/kwineffects/scissor-window/scissor-window.json
+++ b/plugins/kwineffects/scissor-window/scissor-window.json
@@ -4,6 +4,10 @@
             {
                 "Email": "zccrs@live.com",
                 "Name": "zccrs"
+            },
+            {
+                "Email": "lxz@mkacg.com",
+                "Name": "justforlxz"
             }
         ],
         "Description": "Allow clip of window content",
@@ -15,8 +19,15 @@
         "ServiceTypes": [
             "KWin/Effect"
         ],
-        "org.kde.kwin.effect": {
-            "exclusiveGroup": "appearance"
-        }
-    }
+        "Category": "Appearance",
+        "License": "GPL",
+        "Version": "1.0"
+    },
+    "org.kde.kwin.effect": {
+        "exclusiveGroup": "appearance",
+        "enabledByDefaultMethod": true
+    },
+    "X-KDE-Ordering": "5",
+    "X-Plasma-API": "",
+    "X-Plasma-MainScript": ""
 }
diff --git a/plugins/kwineffects/scissor-window/scissorwindow.cpp b/plugins/kwineffects/scissor-window/scissorwindow.cpp
index 0069a9f61d..ea3641f80f 100644
--- a/plugins/kwineffects/scissor-window/scissorwindow.cpp
+++ b/plugins/kwineffects/scissor-window/scissorwindow.cpp
@@ -19,10 +19,6 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 #include "scissorwindow.h"
-#ifndef DISBLE_DDE_KWIN_XCB
-#include "kwinutils.h"
-#endif
-
 #include <kwinglutils.h>
 #include <kwinglplatform.h>
 #include <kwingltexture.h>
@@ -32,6 +28,7 @@
 #include <QExplicitlySharedDataPointer>
 #include <QSignalBlocker>
 #include <QPainterPath>
+#include <QScopedPointer>
 
 Q_DECLARE_METATYPE(QPainterPath)
 
@@ -185,7 +182,7 @@ Q_DECLARE_METATYPE(MaskCache::TextureData)
 
 bool ScissorWindow::supported()
 {
-    bool supported = KWin::effects->isOpenGLCompositing() && KWin::GLRenderTarget::supported() && KWin::GLRenderTarget::blitSupported();
+    bool supported = KWin::effects->isOpenGLCompositing() && KWin::GLFramebuffer::supported() && KWin::GLFramebuffer::blitSupported();
 
     return supported;
 }
@@ -194,16 +191,24 @@ ScissorWindow::ScissorWindow(QObject *, const QVariantList &)
     : Effect()
 {
     // 构建用于窗口圆角特效的着色器
-    m_shader = KWin::ShaderManager::instance()->generateShaderFromResources(KWin::ShaderTrait::MapTexture, QString(), "corner-mask.frag");
+#if KWIN_VERSION_MAJ <= 5 && KWIN_VERSION_MIN < 23
+    m_shader = KWin::ShaderManager::instance()->generateShaderFromResources(KWin::ShaderTrait::MapTexture, QString(), ":/cornermask.frag");
+#else
+    m_shader = KWin::ShaderManager::instance()->generateShaderFromFile(KWin::ShaderTrait::MapTexture, QString(), ":/cornermask.frag");
+#endif
     // 构建用于自定义窗口形状的着色器
-    m_fullMaskShader = KWin::ShaderManager::instance()->generateShaderFromResources(KWin::ShaderTrait::MapTexture, QString(), "full-mask.frag");
+#if KWIN_VERSION_MAJ <= 5 && KWIN_VERSION_MIN < 23
+    m_fullMaskShader = KWin::ShaderManager::instance()->generateShaderFromResources(KWin::ShaderTrait::MapTexture, QString(), ":/fullmask.frag");
+#else
+    m_fullMaskShader = KWin::ShaderManager::instance()->generateShaderFromFile(KWin::ShaderTrait::MapTexture, QString(), ":/fullmask.frag");
+#endif
 
     if (!m_shader->isValid()) {
-        // qWarning() << Q_FUNC_INFO << "Invalid fragment shader of corner mask";
+        qWarning() << Q_FUNC_INFO << "Invalid fragment shader of corner mask";
     }
 
     if (!m_fullMaskShader->isValid()) {
-        // qWarning() << Q_FUNC_INFO << "Invalid fragment shader of full mask";
+        qWarning() << Q_FUNC_INFO << "Invalid fragment shader of full mask";
     }
 }
 
@@ -217,8 +222,12 @@ void ScissorWindow::drawWindow(KWin::EffectWindow *w, int mask, QRegion region,
 #endif
     // 工作区特效会使用PAINT_WINDOW_LANCZOS绘制，此时不支持多次调用Effect::drawWindow，
     // 否则只会显示第一次调用绘制的内容, 因此在这种模式下禁用掉窗口裁剪特效
-    if (!w->isPaintingEnabled() || (mask & PAINT_WINDOW_LANCZOS)) {
-        return Effect::drawWindow(w, mask, region, data);
+    // if (!w->isPaintingEnabled()) {
+        // return Effect::drawWindow(w, mask, region, data);
+    // }
+
+    if (KWin::effects->hasActiveFullScreenEffect() || w->isFullScreen()) {
+         return Effect::drawWindow(w, mask, region, data);
     }
 
     MaskCache::TextureData mask_texture = MaskCache::instance()->getTextureByWindow(w);
@@ -230,7 +239,11 @@ void ScissorWindow::drawWindow(KWin::EffectWindow *w, int mask, QRegion region,
     QRegion corner_region;
 
     if (!mask_texture->customMask) {
+#if KWIN_VERSION_MAJ <= 5 && KWIN_VERSION_MIN < 23
         const QRect window_rect = w->geometry();
+#else
+        const QRect window_rect = w->frameGeometry();
+#endif
         QRect corner_rect(window_rect.topLeft(), mask_texture->size);
 
         // top left
@@ -257,6 +270,7 @@ void ScissorWindow::drawWindow(KWin::EffectWindow *w, int mask, QRegion region,
         }
     }
 
+#if !defined(KWIN_VERSION) || KWIN_VERSION < KWIN_VERSION_CHECK(5, 23, 4, 0)
     KWin::WindowQuadList decoration_quad_list;
     KWin::WindowQuadList content_quad_list;
 
@@ -273,7 +287,49 @@ void ScissorWindow::drawWindow(KWin::EffectWindow *w, int mask, QRegion region,
             break;
         }
     }
+#endif
 
+#ifndef DISBLE_DDE_KWIN_XCB
+     class SetWindowDepth {
+     public:
+         SetWindowDepth(KWin::EffectWindow *w, int depth)
+             : m_window(w)
+         {
+             // 此时正在进行窗口绘制，会有大量的调用，应当避免窗口发射hasAlphaChanged信号
+             QSignalBlocker(w->parent());
+             KWinUtils::setClientDepth(w->parent(), depth);
+         }
+
+         ~SetWindowDepth() {
+             bool ok = false;
+             int depth = m_window->data(WindowDepthRole).toInt(&ok);
+             QObject *client = m_window->parent();
+
+             if (!ok) {
+                 depth = KWinUtils::getWindowDepth(client);
+                 // 保存以便下次使用
+                 m_window->setData(WindowDepthRole, depth);
+             }
+
+             // 此时正在进行窗口绘制，会有大量的调用，应当避免窗口发射hasAlphaChanged信号
+             QSignalBlocker blocker(client);
+             Q_UNUSED(blocker)
+             KWinUtils::setClientDepth(client, depth);
+         }
+
+     private:
+         KWin::EffectWindow *m_window;
+     };
+
+     // 要想窗口裁剪生效，必须要保证窗口材质绘制时开启了alpha通道混合
+     QScopedPointer<SetWindowDepth> setDepth;
+     if (!w->hasAlpha()) {
+         QScopedPointer<SetWindowDepth> alpha(new SetWindowDepth(w, 32));
+         setDepth.swap(alpha);
+     }
+ #endif
+
+#if !defined(KWIN_VERSION) || KWIN_VERSION < KWIN_VERSION_CHECK(5, 23, 4, 0)
     if (!mask_texture->customMask) {
         // 此时只允许绘制窗口边框和阴影
         // 针对设置了自定义裁剪的窗口，则不绘制标题栏和阴影
@@ -287,13 +343,16 @@ void ScissorWindow::drawWindow(KWin::EffectWindow *w, int mask, QRegion region,
             Effect::drawWindow(w, mask, region, data);
         }
     }
+#endif
 
     if (!corner_region.isEmpty()) {
         QRegion new_region = region - corner_region;
 
         // 先绘制未处于mask区域的窗口材质
         if (!new_region.isEmpty()) {
+#if !defined(KWIN_VERSION) || KWIN_VERSION < KWIN_VERSION_CHECK(5, 23, 4, 0)
             data.quads = content_quad_list;
+#endif
             Effect::drawWindow(w, mask, new_region, data);
         }
 
@@ -301,6 +360,9 @@ void ScissorWindow::drawWindow(KWin::EffectWindow *w, int mask, QRegion region,
         region = region - new_region;
     }
 
+    glEnable(GL_BLEND);
+    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
+
     // 将mask材质绑定到第二个材质
     glActiveTexture(GL_TEXTURE1);
     mask_texture->bind();
@@ -326,52 +388,13 @@ void ScissorWindow::drawWindow(KWin::EffectWindow *w, int mask, QRegion region,
 
     // 此时只允许绘制窗口内容
     auto old_shader = data.shader;
+#if !defined(KWIN_VERSION) || KWIN_VERSION < KWIN_VERSION_CHECK(5, 23, 4, 0)
+    data.quads = content_quad_list;
     data.quads = content_quad_list;
+#endif
     data.shader = shader;
 
-#ifndef DISBLE_DDE_KWIN_XCB
-    class SetWindowDepth {
-    public:
-        SetWindowDepth(KWin::EffectWindow *w, int depth)
-            : m_window(w)
-        {
-            // 此时正在进行窗口绘制，会有大量的调用，应当避免窗口发射hasAlphaChanged信号
-            QSignalBlocker blocker(w->parent());
-            Q_UNUSED(blocker)
-            KWinUtils::setClientDepth(w->parent(), depth);
-        }
-
-        ~SetWindowDepth() {
-            bool ok = false;
-            int depth = m_window->data(WindowDepthRole).toInt(&ok);
-            QObject *client = m_window->parent();
-
-            if (!ok) {
-                depth = KWinUtils::getWindowDepth(client);
-                // 保存以便下次使用
-                m_window->setData(WindowDepthRole, depth);
-            }
-
-            // 此时正在进行窗口绘制，会有大量的调用，应当避免窗口发射hasAlphaChanged信号
-            QSignalBlocker blocker(client);
-            Q_UNUSED(blocker)
-            KWinUtils::setClientDepth(client, depth);
-        }
-
-    private:
-        KWin::EffectWindow *m_window;
-    };
-
-    // 要想窗口裁剪生效，必须要保证窗口材质绘制时开启了alpha通道混合
-    if (!w->hasAlpha()) {
-        SetWindowDepth set_depth(w, 32);
-        Q_UNUSED(set_depth)
-        Effect::drawWindow(w, mask, region, data);
-    } else
-#endif
-    {
-        Effect::drawWindow(w, mask, region, data);
-    }
+    Effect::drawWindow(w, mask, region, data);
 
     data.shader = old_shader;
 
@@ -380,4 +403,6 @@ void ScissorWindow::drawWindow(KWin::EffectWindow *w, int mask, QRegion region,
     glActiveTexture(GL_TEXTURE1);
     mask_texture->unbind();
     glActiveTexture(GL_TEXTURE0);
+
+    glDisable(GL_BLEND);
 }
diff --git a/plugins/kwineffects/scissor-window/scissorwindow.h b/plugins/kwineffects/scissor-window/scissorwindow.h
index 6e12a1adc4..2a1893ffdb 100644
--- a/plugins/kwineffects/scissor-window/scissorwindow.h
+++ b/plugins/kwineffects/scissor-window/scissorwindow.h
@@ -23,12 +23,16 @@
 
 #include <kwineffects.h>
 
+#ifndef DISBLE_DDE_KWIN_XCB
+#include "kwinutils.h"
+#endif
+
 class ScissorWindow : public KWin::Effect
 {
     Q_OBJECT
 public:
     enum DataRole {
-        BaseRole = KWin::DataRole::LanczosCacheRole + 100,
+        BaseRole = KWin::DataRole::WindowBackgroundContrastRole + 100,
         WindowRadiusRole = BaseRole + 1,
         WindowClipPathRole = BaseRole + 2,
         WindowMaskTextureRole = BaseRole + 3,
diff --git a/plugins/platforms/lib/kwinutils.cpp b/plugins/platforms/lib/kwinutils.cpp
index 8a19cc90c4..47f9fa8850 100644
--- a/plugins/platforms/lib/kwinutils.cpp
+++ b/plugins/platforms/lib/kwinutils.cpp
@@ -87,9 +87,15 @@ class Workspace : public QObject {
 public Q_SLOTS:
     void slotWindowMove();
     void slotWindowMaximize();
-    bool compositing() const;
+#if !defined(KWIN_VERSION) || KWIN_VERSION < KWIN_VERSION_CHECK(5, 23, 4, 0)
+     // remove by c61085dc2e28cb7d737c9b049499b4433916b194
+     // change to Compositor::compositing()
+     bool compositing() const;
+ #endif
+#if !defined(KWIN_VERSION) || KWIN_VERSION < KWIN_VERSION_CHECK(5, 25, 4, 0)
     void slotTouchPadTomoveWindow(int x, int y);
     void slotEndTouchPadToMoveWindow();
+#endif
 
 #if !defined(KWIN_VERSION) || KWIN_VERSION < KWIN_VERSION_CHECK(5, 10, 95, 0)
     // kwin < 5.10.95
@@ -139,16 +145,30 @@ class Compositor : public QObject
 public:
     enum SuspendReason { NoReasonSuspend = 0, UserSuspend = 1<<0, BlockRuleSuspend = 1<<1, ScriptSuspend = 1<<2, AllReasonSuspend = 0xff };
     static Compositor *s_compositor;
+    bool isActive();
 };
 
 // 光标管理
+#if defined(KWIN_VERSION) && KWIN_VERSION >= KWIN_VERSION_CHECK(5, 23, 4, 0)
+class Cursors : public QObject
+{
+public:
+    static Cursors *s_self;
+};
+#else
 class Cursor : public QObject
 {
 public:
     static Cursor *s_self;
 };
+#endif
 
+#if !defined(KWIN_VERSION) || KWIN_VERSION < KWIN_VERSION_CHECK(5, 25, 4, 0)
 class AbstractClient : public QObject {};
+#else
+class Window : public QObject {};
+#endif
+
 class Options {
 public:
     enum WindowOperation {};
@@ -311,7 +331,7 @@ class KWinInterface
         clientMaximize = (ClientMaximize)KWinUtils::resolve("_ZN4KWin14AbstractClient8maximizeENS_12MaximizeModeE");
         activateClient = (ActivateClient)KWinUtils::resolve("_ZN4KWin9Workspace14activateClientEPNS_14AbstractClientEb");
         clientUpdateCursor = (ClientUpdateCursor)KWinUtils::resolve("_ZN4KWin14AbstractClient12updateCursorEv");
-        clientSetDepth = (ClientSetDepth)KWinUtils::resolve("_ZN4KWin8Toplevel8setDepthEi");
+        clientSetDepth = (ClientSetDepth)KWinUtils::resolve("_ZN4KWin6Window8setDepthEi");
         clientCheckNoBorder = (ClientCheckNoBorder)KWinUtils::resolve("_ZN4KWin6Client13checkNoBorderEv");
         quickTileWindow = (QuickTileWindow)KWinUtils::resolve("_ZN4KWin9Workspace15quickTileWindowE6QFlagsINS_13QuickTileFlagEE");
         x11CursorGetCursor = (X11CursorGetCursor)KWinUtils::resolve("_ZN4KWin6Cursor9x11CursorEN2Qt11CursorShapeE");
@@ -619,7 +639,11 @@ QObject *KWinUtils::tabBox()
 
 QObject *KWinUtils::cursor()
 {
+#if defined(KWIN_VERSION) && KWIN_VERSION >= KWIN_VERSION_CHECK(5, 23, 4, 0)
+    return KWin::Cursors::s_self;
+#else
     return KWin::Cursor::s_self;
+#endif
 }
 
 QObject *KWinUtils::virtualDesktop()
@@ -649,8 +673,13 @@ QObjectList KWinUtils::clientList()
         return {};
     }
 
-    QList<KWin::Client*> clients;
-    bool ok = QMetaObject::invokeMethod(jsWorkspaceWrapper, "clientList", Q_RETURN_ARG(QList<KWin::Client*>, clients));
+#if !defined(KWIN_VERSION) || KWIN_VERSION < KWIN_VERSION_CHECK(5, 25, 4, 0)
+    QList<KWin::AbstractClient*> clients;
+    bool ok = QMetaObject::invokeMethod(jsWorkspaceWrapper, "clientList", Q_RETURN_ARG(QList<KWin::AbstractClient*>, clients));
+#else
+    QList<KWin::Window*> clients;
+    bool ok = QMetaObject::invokeMethod(jsWorkspaceWrapper, "clientList", Q_RETURN_ARG(QList<KWin::Window*>, clients));
+#endif
 
     if (!ok) {
         return {};
@@ -658,9 +687,15 @@ QObjectList KWinUtils::clientList()
 
     QObjectList list;
 
-    for (KWin::Client *c : clients) {
+#if !defined(KWIN_VERSION) || KWIN_VERSION < KWIN_VERSION_CHECK(5, 25, 4, 0)
+    for (KWin::AbstractClient *c : clients) {
+        list << c;
+    }
+#else
+    for (KWin::Window *c : clients) {
         list << c;
     }
+#endif
 
     return list;
 }
@@ -1073,12 +1108,19 @@ void KWinUtils::removeWindowPropertyMonitor(quint32 property_atom)
 
 bool KWinUtils::isCompositing()
 {
+  #if defined(KWIN_VERSION) && KWIN_VERSION >= KWIN_VERSION_CHECK(5, 23, 4, 0)
+     if (KWin::Compositor::s_compositor) {
+         return KWin::Compositor::s_compositor->isActive();
+     }
+ #else
     KWin::Workspace *ws = static_cast<KWin::Workspace *>(workspace());
     if (ws) {
         return ws->compositing();
     } else {
         return compositorIsActive();
     }
+#endif
+    return compositorIsActive();
 }
 
 bool KWinUtils::buildNativeSettings(QObject *baseObject, quint32 windowID)
@@ -1125,7 +1167,9 @@ void KWinUtils::TouchPadToMoveWindow(int x, int y)
 {
     KWin::Workspace *ws = static_cast<KWin::Workspace *>(workspace());
     if (ws) {
+#if !defined(KWIN_VERSION) || KWIN_VERSION < KWIN_VERSION_CHECK(5, 25, 4, 0)
         ws->slotTouchPadTomoveWindow(x,y);
+#endif
     }
 }
 
@@ -1133,7 +1177,9 @@ void KWinUtils::EndTouchPadToMoveWindow()
 {
     KWin::Workspace *ws = static_cast<KWin::Workspace *>(workspace());
     if (ws) {
+#if !defined(KWIN_VERSION) || KWIN_VERSION < KWIN_VERSION_CHECK(5, 25, 4, 0)
         ws->slotEndTouchPadToMoveWindow();
+#endif
     }
 }
 
@@ -1407,16 +1453,28 @@ void KWinUtils::Window::performWindowOperation(QObject *window, const QString &o
     if (!window || !interface->optionsWindowOperation)
         return;
 
+#if !defined(KWIN_VERSION) || KWIN_VERSION < KWIN_VERSION_CHECK(5, 25, 4, 0)
     KWin::AbstractClient *c = dynamic_cast<KWin::AbstractClient*>(window);
     KWin::Options::WindowOperation op = interface->optionsWindowOperation(opName, restricted);
     QMetaObject::invokeMethod(workspace(), "performWindowOperation", Q_ARG(KWin::AbstractClient*, c), Q_ARG(KWin::Options::WindowOperation, op));
+#else
+    KWin::Window *c = dynamic_cast<KWin::Window*>(window);
+    KWin::Options::WindowOperation op = interface->optionsWindowOperation(opName, restricted);
+    QMetaObject::invokeMethod(workspace(), "performWindowOperation", Q_ARG(KWin::Window*, c), Q_ARG(KWin::Options::WindowOperation, op));
+#endif
 }
 
 void KWinUtils::Window::setQuikTileMode(QObject *window, int m, bool isShowReview)
 {
+#if !defined(KWIN_VERSION) || KWIN_VERSION < KWIN_VERSION_CHECK(5, 25, 4, 0)
     KWin::AbstractClient *c = dynamic_cast<KWin::AbstractClient*>(window);
 
     QMetaObject::invokeMethod(workspace(), "slotSetClientSplit", Q_ARG(KWin::AbstractClient*, c), Q_ARG(int, m), Q_ARG(bool, isShowReview));
+#else
+    KWin::Window *c = dynamic_cast<KWin::Window*>(window);
+
+    QMetaObject::invokeMethod(workspace(), "slotSetClientSplit", Q_ARG(KWin::Window*, c), Q_ARG(int, m), Q_ARG(bool, isShowReview));
+#endif
 }
 
 QObject *KWinUtils::getDDEShellSurface(QObject * shellClient)
@@ -1425,9 +1483,13 @@ QObject *KWinUtils::getDDEShellSurface(QObject * shellClient)
         return nullptr;
     }
 
-    KWin::AbstractClient *c = dynamic_cast<KWin::AbstractClient*>(shellClient);
+    KWin::Window *c = dynamic_cast<KWin::Window*>(shellClient);
     QObject * dss = nullptr;
+#if !defined(KWIN_VERSION) || KWIN_VERSION < KWIN_VERSION_CHECK(5, 25, 4, 0)
     QMetaObject::invokeMethod(workspace(), "slotGetDdeShellSurface", Q_ARG(KWin::AbstractClient*, c), Q_ARG(QObject *& , dss));
+#else
+    QMetaObject::invokeMethod(workspace(), "slotGetDdeShellSurface", Q_ARG(KWin::Window*, c), Q_ARG(QObject *& , dss));
+#endif
     return dss;
 }
 
diff --git a/plugins/platforms/plugin/libkwinpreload.cpp b/plugins/platforms/plugin/libkwinpreload.cpp
index 55b509e4b6..7cc66b9cee 100644
--- a/plugins/platforms/plugin/libkwinpreload.cpp
+++ b/plugins/platforms/plugin/libkwinpreload.cpp
@@ -53,7 +53,11 @@ struct MenuItem {
     bool checked;
 };
 
+#if !defined(KWIN_VERSION) || KWIN_VERSION < KWIN_VERSION_CHECK(5, 25, 4, 0)
 static QList<MenuItem> getMenuItemInfos(AbstractClient *cl)
+#else
+static QList<MenuItem> getMenuItemInfos(Window *cl)
+#endif
 {
     QList<MenuItem> menu_items {
         {"minimize", qApp->translate("WindowMenu", "Minimize"),
@@ -85,12 +89,20 @@ class Q_DECL_HIDDEN MenuSlot : public QObject
 {
     Q_OBJECT
 public:
+#if !defined(KWIN_VERSION) || KWIN_VERSION < KWIN_VERSION_CHECK(5, 25, 4, 0)
     MenuSlot(KWin::AbstractClient *cl, QObject *parent = nullptr)
+#else
+    MenuSlot(KWin::Window *cl, QObject *parent = nullptr)
+#endif
         : QObject(parent)
         , m_client(cl)
     {}
 
+#if !defined(KWIN_VERSION) || KWIN_VERSION < KWIN_VERSION_CHECK(5, 25, 4, 0)
     static void onMenuItemInvoked(const QString &id, bool checked, AbstractClient *cl)
+#else
+    static void onMenuItemInvoked(const QString &id, bool checked, Window *cl)
+#endif
     {
         if (id == "minimize") {
             KWinUtils::Window::setWindowMinimize(cl, true);
@@ -124,12 +136,20 @@ public slots:
     }
 
 private:
+#if !defined(KWIN_VERSION) || KWIN_VERSION < KWIN_VERSION_CHECK(5, 25, 4, 0)
     AbstractClient *m_client;
+#else
+    Window *m_client;
+#endif
 };
 
 #ifndef WAYLAND_PLATFORM
 #ifdef USE_DBUS_MENU
+#if !defined(KWIN_VERSION) || KWIN_VERSION < KWIN_VERSION_CHECK(5, 25, 4, 0)
 void Workspace::showWindowMenu(const QRect &pos, AbstractClient *cl)
+#else
+
+#endif
 {
     if (KWinUtils::Window::isDesktop(_menuClient) ||
             KWinUtils::Window::isDock(_menuClient) ||
@@ -182,7 +202,12 @@ void Workspace::showWindowMenu(const QRect &pos, AbstractClient *cl)
 }
 #else
 static QPointer<QMenu> _globalWindowMenu;
+
+#if !defined(KWIN_VERSION) || KWIN_VERSION < KWIN_VERSION_CHECK(5, 25, 4, 0)
 static AbstractClient *_menuClient = nullptr;
+#else
+static Window *_menuClient = nullptr;
+#endif
 
 bool UserActionsMenu::isShown() const
 {
@@ -203,7 +228,11 @@ bool UserActionsMenu::hasClient()
     return !_menuClient && isShown();
 }
 
+#if !defined(KWIN_VERSION) || KWIN_VERSION < KWIN_VERSION_CHECK(5, 25, 4, 0)
 bool UserActionsMenu::isMenuClient(const AbstractClient *c) const
+#else
+bool UserActionsMenu::isMenuClient(const Window *c) const
+#endif
 {
     if (!c || !_menuClient)
         return false;
@@ -218,7 +247,11 @@ void UserActionsMenu::handleClick(const QPoint& pos)
     }
 }
 
+#if !defined(KWIN_VERSION) || KWIN_VERSION < KWIN_VERSION_CHECK(5, 25, 4, 0)
 void UserActionsMenu::show(const QRect &pos, const QWeakPointer<AbstractClient> &cl)
+#else
+void UserActionsMenu::show(const QRect &pos, const QWeakPointer<Window> &cl)
+#endif
 {
     qDebug() << "------------- menu show ";
     _menuClient = cl.data();
@@ -279,9 +312,11 @@ void RuleBook::save()
 
 namespace BuiltInEffects {
 bool supported(BuiltInEffect effect) {
+#ifdef ENABLE_BUILTIN_BLUR
     if (effect == BuiltInEffect::Blur) {
         return false;
     }
+#endif
 
     typedef bool (*ClientBuiltInEffect)(KWin::BuiltInEffect);
     ClientBuiltInEffect clientBuildInEffect = (ClientBuiltInEffect)QLibrary::resolve("kwin", qApp->applicationVersion(), "_ZN4KWin14BuiltInEffects9supportedENS_13BuiltInEffectE");
diff --git a/plugins/platforms/plugin/libkwinpreload.h b/plugins/platforms/plugin/libkwinpreload.h
index 8f2562b845..1d35d88ac4 100644
--- a/plugins/platforms/plugin/libkwinpreload.h
+++ b/plugins/platforms/plugin/libkwinpreload.h
@@ -30,7 +30,12 @@ namespace KWin {
 // 覆盖libkwin.so中的符号
 // 使用DBUS菜单时，覆盖了Workspace::showWindowMenu，此函数的原本逻辑中将会调用 UserActionsMenu::show
 // 由于kwin中对UserActionsMenu对象有多处调用，因此，不使用DBUS菜单时，应该覆盖 UserActionsMenu 的函数来处理菜单显示
+#if !defined(KWIN_VERSION) || KWIN_VERSION < KWIN_VERSION_CHECK(5, 25, 4, 0)
 class AbstractClient : public QObject {};
+#else
+class Window : public QObject {};
+#endif
+
 #ifndef WAYLAND_PLATFORM
 #ifdef USE_DBUS_MENU
 class Q_DECL_EXPORT Workspace {
@@ -42,9 +47,13 @@ class Q_DECL_EXPORT UserActionsMenu : public QObject {
     void handleClick(const QPoint& pos);
     void grabInput();
     bool hasClient();
+#if !defined(KWIN_VERSION) || KWIN_VERSION < KWIN_VERSION_CHECK(5, 25, 4, 0)
     bool isMenuClient(const AbstractClient *c) const;
-
     void show(const QRect& pos, const QWeakPointer<AbstractClient> &cl);
+#else
+    bool isMenuClient(const Window *c) const;
+    void show(const QRect& pos, const QWeakPointer<Window> &cl);
+#endif
     void close();
 };
 
