Index: doxygen-1.8.18/vhdlparser/VhdlParser.cc
===================================================================
--- doxygen-1.8.18.orig/vhdlparser/VhdlParser.cc	2020-07-10 09:16:16.163910205 +0200
+++ doxygen-1.8.18/vhdlparser/VhdlParser.cc	2020-07-10 09:21:27.033679741 +0200
@@ -56,6 +56,7 @@ return tok->image.c_str();
       errorHandler->handleParseError(token, getToken(1), __FUNCTION__, this), hasError = true;
     }
 assert(false);
+return QCString();
 }
 
 
@@ -68,6 +69,7 @@ QCString VhdlParser::access_type_definit
     }
 str=tok->image.c_str(); return str+str1;
 assert(false);
+return QCString();
 }
 
 
@@ -111,6 +113,7 @@ return str;
       }
     }
 assert(false);
+return QCString();
 }
 
 
@@ -120,6 +123,7 @@ QCString VhdlParser::actual_parameter_pa
     }
 return s;
 assert(false);
+return QCString();
 }
 
 
@@ -167,6 +171,7 @@ s+="(";s+=s1+")";return s;
       }
     }
 assert(false);
+return QCString();
 }
 
 
@@ -205,6 +210,7 @@ return "&";
       errorHandler->handleParseError(token, getToken(1), __FUNCTION__, this), hasError = true;
     }
 assert(false);
+return QCString();
 }
 
 
@@ -243,6 +249,7 @@ s+=","+s1;
     }
 return "("+s+")";
 assert(false);
+return QCString();
 }
 
 
@@ -310,6 +317,7 @@ outlineParser()->addVhdlType(s2.data(),o
 
  return s2+" "+s+";";
 assert(false);
+return QCString();
 }
 
 
@@ -349,6 +357,7 @@ return s;
       errorHandler->handleParseError(token, getToken(1), __FUNCTION__, this), hasError = true;
     }
 assert(false);
+return QCString();
 }
 
 
@@ -552,6 +561,7 @@ return s;
       }
     }
 assert(false);
+return QCString();
 }
 
 
@@ -599,6 +609,7 @@ s.prepend("assert ");
    if(t1) s2.prepend(" report ");
     return s+s1+s2;
 assert(false);
+return QCString();
 }
 
 
@@ -629,6 +640,7 @@ QCString VhdlParser::assertion_statement
 if(t) s+=":";
     return s+s1+";";
 assert(false);
+return QCString();
 }
 
 
@@ -650,6 +662,7 @@ QCString VhdlParser::association_element
     }
 return s+" => "+s1;
 assert(false);
+return QCString();
 }
 
 
@@ -682,6 +695,7 @@ s+=","+s1;
     }
 return s;
 assert(false);
+return QCString();
 }
 
 
@@ -704,6 +718,7 @@ QCString VhdlParser::attribute_declarati
 outlineParser()->addVhdlType(s.data(),outlineParser()->getLine(ATTRIBUTE_T),Entry::VARIABLE_SEC,VhdlDocGen::ATTRIBUTE,0,s1.data(),Public);
     return " attribute "+s+":"+s1+";";
 assert(false);
+return QCString();
 }
 
 
@@ -734,6 +749,7 @@ return tok->image.c_str();
       errorHandler->handleParseError(token, getToken(1), __FUNCTION__, this), hasError = true;
     }
 assert(false);
+return QCString();
 }
 
 
@@ -794,6 +810,7 @@ s+=s1;
     }
 return s;
 assert(false);
+return QCString();
 }
 
 
@@ -823,6 +840,7 @@ QCString t= s1+" is "+s2;
    outlineParser()->addVhdlType(s.data(),outlineParser()->getLine(ATTRIBUTE_T),Entry::VARIABLE_SEC,VhdlDocGen::ATTRIBUTE,0,t.data(),Public);
    return " attribute "+s+" of "+s1+ " is "+s2+";";
 assert(false);
+return QCString();
 }
 
 
@@ -832,6 +850,7 @@ QCString VhdlParser::base() {Token *tok=
     }
 return tok->image.c_str();
 assert(false);
+return QCString();
 }
 
 
@@ -841,6 +860,7 @@ QCString VhdlParser::base_specifier() {T
     }
 return tok->image.c_str();
 assert(false);
+return QCString();
 }
 
 
@@ -850,6 +870,7 @@ QCString VhdlParser::base_unit_declarati
     }
 return s;
 assert(false);
+return QCString();
 }
 
 
@@ -859,6 +880,7 @@ QCString VhdlParser::based_integer() {To
     }
 return tok->image.c_str();
 assert(false);
+return QCString();
 }
 
 
@@ -868,6 +890,7 @@ QCString VhdlParser::based_literal() {To
     }
 return tok->image.c_str();
 assert(false);
+return QCString();
 }
 
 
@@ -877,6 +900,7 @@ QCString VhdlParser::basic_identifier()
     }
 return tok->image.c_str();
 assert(false);
+return QCString();
 }
 
 
@@ -932,6 +956,7 @@ QCString VhdlParser::bit_string_literal(
     }
 return tok->image.c_str();
 assert(false);
+return QCString();
 }
 
 
@@ -941,6 +966,7 @@ QCString VhdlParser::bit_value() {Token
     }
 return tok->image.c_str();
 assert(false);
+return QCString();
 }
 
 
@@ -1472,6 +1498,7 @@ QCString VhdlParser::character_literal()
     }
 return tok->image.c_str();
 assert(false);
+return QCString();
 }
 
 
@@ -1525,6 +1552,7 @@ return " others ";
       }
     }
 assert(false);
+return QCString();
 }
 
 
@@ -1557,6 +1585,7 @@ s+="|";s+=s1;
     }
 return s;
 assert(false);
+return QCString();
 }
 
 
@@ -1776,6 +1805,7 @@ return s+"#";
       errorHandler->handleParseError(token, getToken(1), __FUNCTION__, this), hasError = true;
     }
 assert(false);
+return QCString();
 }
 
 
@@ -1962,6 +1992,7 @@ QCString VhdlParser::condition() {QCStri
     }
 return s;
 assert(false);
+return QCString();
 }
 
 
@@ -1974,6 +2005,7 @@ QCString VhdlParser::condition_clause()
     }
 return " until "+s;
 assert(false);
+return QCString();
 }
 
 
@@ -2234,6 +2266,7 @@ if(t)
      it.prepend("constant ");
      return it;
 assert(false);
+return QCString();
 }
 
 
@@ -2252,6 +2285,7 @@ QCString VhdlParser::constraint_array_de
     }
 return s+" "+s1;
 assert(false);
+return QCString();
 }
 
 
@@ -2292,6 +2326,7 @@ return s;
       errorHandler->handleParseError(token, getToken(1), __FUNCTION__, this), hasError = true;
     }
 assert(false);
+return QCString();
 }
 
 
@@ -2339,6 +2374,7 @@ QCString VhdlParser::decimal_literal() {
     }
 return tok->image.c_str();
 assert(false);
+return QCString();
 }
 
 
@@ -2388,6 +2424,7 @@ return s+" inertial ";
       errorHandler->handleParseError(token, getToken(1), __FUNCTION__, this), hasError = true;
     }
 assert(false);
+return QCString();
 }
 
 
@@ -2479,6 +2516,7 @@ return s;
       errorHandler->handleParseError(token, getToken(1), __FUNCTION__, this), hasError = true;
     }
 assert(false);
+return QCString();
 }
 
 
@@ -2508,6 +2546,7 @@ return tok->image.c_str();
       errorHandler->handleParseError(token, getToken(1), __FUNCTION__, this), hasError = true;
     }
 assert(false);
+return QCString();
 }
 
 
@@ -2563,6 +2602,7 @@ return s;
       errorHandler->handleParseError(token, getToken(1), __FUNCTION__, this), hasError = true;
     }
 assert(false);
+return QCString();
 }
 
 
@@ -2586,6 +2626,7 @@ if(!s.isEmpty())
  return s+"=>"+s1;
 return s1;
 assert(false);
+return QCString();
 }
 
 
@@ -2613,6 +2654,7 @@ QCString name;
    s2=rec_name+":"+s1;
    return s2;
 assert(false);
+return QCString();
 }
 
 
@@ -2679,6 +2721,7 @@ return tok->image.c_str();
       errorHandler->handleParseError(token, getToken(1), __FUNCTION__, this), hasError = true;
     }
 assert(false);
+return QCString();
 }
 
 
@@ -2843,6 +2886,7 @@ return "file";
       errorHandler->handleParseError(token, getToken(1), __FUNCTION__, this), hasError = true;
     }
 assert(false);
+return QCString();
 }
 
 
@@ -2868,6 +2912,7 @@ s+="<>";
     }
 return s;
 assert(false);
+return QCString();
 }
 
 
@@ -2905,6 +2950,7 @@ s2+=",";s2+=s;
     }
 return s1+s2;
 assert(false);
+return QCString();
 }
 
 
@@ -3169,6 +3215,7 @@ QCString VhdlParser::entity_designator()
     }
 return s+s1;
 assert(false);
+return QCString();
 }
 
 
@@ -3272,6 +3319,7 @@ return "all";
       errorHandler->handleParseError(token, getToken(1), __FUNCTION__, this), hasError = true;
     }
 assert(false);
+return QCString();
 }
 
 
@@ -3287,6 +3335,7 @@ QCString VhdlParser::entity_specificatio
     }
 return s+":"+s1;
 assert(false);
+return QCString();
 }
 
 
@@ -3376,6 +3425,7 @@ return s;
       errorHandler->handleParseError(token, getToken(1), __FUNCTION__, this), hasError = true;
     }
 assert(false);
+return QCString();
 }
 
 
@@ -3406,6 +3456,7 @@ return s;
       errorHandler->handleParseError(token, getToken(1), __FUNCTION__, this), hasError = true;
     }
 assert(false);
+return QCString();
 }
 
 
@@ -3444,6 +3495,7 @@ s+=",";s+=s1;
     }
 return "("+s+")";
 assert(false);
+return QCString();
 }
 
 
@@ -3508,6 +3560,7 @@ m_sharedState->lab.resize(0);
 
   return s+s1+s2+";";
 assert(false);
+return QCString();
 }
 
 
@@ -3545,6 +3598,7 @@ s+=s1;s+=s2;
     }
 return s;
 assert(false);
+return QCString();
 }
 
 
@@ -3610,6 +3664,7 @@ return "or" ;
       errorHandler->handleParseError(token, getToken(1), __FUNCTION__, this), hasError = true;
     }
 assert(false);
+return QCString();
 }
 
 
@@ -3619,6 +3674,7 @@ QCString VhdlParser::extended_identifier
     }
 return t->image.c_str();
 assert(false);
+return QCString();
 }
 
 
@@ -3722,6 +3778,7 @@ return s;
       errorHandler->handleParseError(token, getToken(1), __FUNCTION__, this), hasError = true;
     }
 assert(false);
+return QCString();
 }
 
 
@@ -3759,6 +3816,7 @@ QCString t1=s2+" "+s3;
    outlineParser()->addVhdlType(s.data(),outlineParser()->getLine(),Entry::VARIABLE_SEC,VhdlDocGen::VFILE,0,t1.data(),Public);
    return " file "+s+":"+s2+" "+s3+";";
 assert(false);
+return QCString();
 }
 
 
@@ -3768,6 +3826,7 @@ QCString VhdlParser::file_logical_name()
     }
 return s;
 assert(false);
+return QCString();
 }
 
 
@@ -3810,6 +3869,7 @@ QCString VhdlParser::file_open_informati
     }
 s2="open "+s+" is "+s1;  return s2;
 assert(false);
+return QCString();
 }
 
 
@@ -3825,6 +3885,7 @@ QCString VhdlParser::file_type_definitio
     }
 s1=" file of "+s; return s1;
 assert(false);
+return QCString();
 }
 
 
@@ -3834,6 +3895,7 @@ QCString VhdlParser::floating_type_defin
     }
 return s;
 assert(false);
+return QCString();
 }
 
 
@@ -3866,6 +3928,7 @@ return tok->image.c_str();
       errorHandler->handleParseError(token, getToken(1), __FUNCTION__, this), hasError = true;
     }
 assert(false);
+return QCString();
 }
 
 
@@ -3875,6 +3938,7 @@ QCString VhdlParser::formal_parameter_li
     }
 return s;
 assert(false);
+return QCString();
 }
 
 
@@ -3906,6 +3970,7 @@ s+"("+s1+")";
     }
 return s;
 assert(false);
+return QCString();
 }
 
 
@@ -3947,6 +4012,7 @@ if (s2.contains("#")) {
     tmpEntry.reset();
     return "type "+s+" is "+s2+";";
 assert(false);
+return QCString();
 }
 
 
@@ -3965,6 +4031,7 @@ QCString VhdlParser::function_call() {QC
     }
 return s+"("+s1+")";
 assert(false);
+return QCString();
 }
 
 
@@ -4089,6 +4156,7 @@ QCString VhdlParser::generic_list() {QCS
     }
 return s;
 assert(false);
+return QCString();
 }
 
 
@@ -4140,6 +4208,7 @@ return s;
       errorHandler->handleParseError(token, getToken(1), __FUNCTION__, this), hasError = true;
     }
 assert(false);
+return QCString();
 }
 
 
@@ -4174,6 +4243,7 @@ s2+=",";s2+=s1;
     }
 return s+s2;
 assert(false);
+return QCString();
 }
 
 
@@ -4204,6 +4274,7 @@ QCString VhdlParser::group_declaration()
     }
 return "group "+s+":"+s1+"("+s2+");";
 assert(false);
+return QCString();
 }
 
 
@@ -4231,6 +4302,7 @@ QCString VhdlParser::group_template_decl
     }
 return "group "+s+ "is ("+s1+");";
 assert(false);
+return QCString();
 }
 
 
@@ -4273,6 +4345,7 @@ return tok->image.c_str();
       errorHandler->handleParseError(token, getToken(1), __FUNCTION__, this), hasError = true;
     }
 assert(false);
+return QCString();
 }
 
 
@@ -4305,6 +4378,7 @@ str+=",";str+=str1;
     }
 return str;
 assert(false);
+return QCString();
 }
 
 
@@ -4431,6 +4505,7 @@ QCString VhdlParser::incomplete_type_dec
     }
 return "type "+s+";";
 assert(false);
+return QCString();
 }
 
 
@@ -4472,6 +4547,7 @@ s+=",";s+=s1;
     }
 return s+")";
 assert(false);
+return QCString();
 }
 
 
@@ -4523,6 +4599,7 @@ return s;
       }
     }
 assert(false);
+return QCString();
 }
 
 
@@ -4538,6 +4615,7 @@ QCString VhdlParser::index_subtype_defin
     }
 return s+" range <> ";
 assert(false);
+return QCString();
 }
 
 
@@ -4634,6 +4712,7 @@ s1="configuration ";return s;
       errorHandler->handleParseError(token, getToken(1), __FUNCTION__, this), hasError = true;
     }
 assert(false);
+return QCString();
 }
 
 
@@ -4675,6 +4754,7 @@ return tok->image.c_str();
       errorHandler->handleParseError(token, getToken(1), __FUNCTION__, this), hasError = true;
     }
 assert(false);
+return QCString();
 }
 
 
@@ -4684,6 +4764,7 @@ QCString VhdlParser::integer() {Token *t
     }
 return t->image.c_str();
 assert(false);
+return QCString();
 }
 
 
@@ -4693,6 +4774,7 @@ QCString VhdlParser::integer_type_defini
     }
 return s;
 assert(false);
+return QCString();
 }
 
 
@@ -4760,6 +4842,7 @@ if (m_sharedState->parse_sec==GEN_SEC)
       }
     }
 assert(false);
+return QCString();
 }
 
 
@@ -4769,6 +4852,7 @@ QCString VhdlParser::interface_element()
     }
 return s;
 assert(false);
+return QCString();
 }
 
 
@@ -4788,6 +4872,7 @@ QCString VhdlParser::interface_file_decl
 outlineParser()->addVhdlType(s.data(),outlineParser()->getLine(),Entry::VARIABLE_SEC,VhdlDocGen::VFILE,0,s1.data(),Public);
     return " file "+s+":"+s1;
 assert(false);
+return QCString();
 }
 
 
@@ -4820,6 +4905,7 @@ s2+=";";s2+=s1;
     }
 return s+s2;
 assert(false);
+return QCString();
 }
 
 
@@ -4952,6 +5038,7 @@ if(tok)
       } // if component
       return it;
 assert(false);
+return QCString();
 }
 
 
@@ -4993,6 +5080,7 @@ QCString q=m_sharedState->lab+" for "+s;
       errorHandler->handleParseError(token, getToken(1), __FUNCTION__, this), hasError = true;
     }
 assert(false);
+return QCString();
 }
 
 
@@ -5002,6 +5090,7 @@ QCString VhdlParser::label() {QCString s
     }
 return s;
 assert(false);
+return QCString();
 }
 
 
@@ -5024,6 +5113,7 @@ if ( m_sharedState->parse_sec==0 && Conf
                    QCString s1="library "+s;
                    return s1;
 assert(false);
+return QCString();
 }
 
 
@@ -5054,6 +5144,7 @@ return s;
       }
     }
 assert(false);
+return QCString();
 }
 
 
@@ -5106,6 +5197,7 @@ return "null";
       }
     }
 assert(false);
+return QCString();
 }
 
 
@@ -5115,6 +5207,7 @@ QCString VhdlParser::logical_operator()
     }
 return s;
 assert(false);
+return QCString();
 }
 
 
@@ -5192,6 +5285,7 @@ QCString q = s+" loop "+s2+" end loop" +
          FlowChart::addFlowChart(FlowChart::END_LOOP,endLoop.data(),0);
         return q;
 assert(false);
+return QCString();
 }
 
 
@@ -5230,6 +5324,7 @@ return "not";
       errorHandler->handleParseError(token, getToken(1), __FUNCTION__, this), hasError = true;
     }
 assert(false);
+return QCString();
 }
 
 
@@ -5286,6 +5381,7 @@ return "linkage";
       errorHandler->handleParseError(token, getToken(1), __FUNCTION__, this), hasError = true;
     }
 assert(false);
+return QCString();
 }
 
 
@@ -5333,6 +5429,7 @@ return tok->image.c_str();
       errorHandler->handleParseError(token, getToken(1), __FUNCTION__, this), hasError = true;
     }
 assert(false);
+return QCString();
 }
 
 
@@ -5410,6 +5507,7 @@ return s;
     }
     }
 assert(false);
+return QCString();
 }
 
 
@@ -5435,6 +5533,7 @@ s+=s1;
     }
 return s;
 assert(false);
+return QCString();
 }
 
 
@@ -5525,6 +5624,7 @@ s+=")";return s;
     }
     }
 assert(false);
+return QCString();
 }
 
 
@@ -5574,6 +5674,7 @@ s+="(";s+=s1;s+=")";
     }
 return s;
 assert(false);
+return QCString();
 }
 
 
@@ -5618,6 +5719,7 @@ s+=",";s+=s1;
     }
 return s+")";
 assert(false);
+return QCString();
 }
 
 
@@ -5681,6 +5783,7 @@ if(t) s+=":";
   if(t1) s2.prepend("when ");
   return s+s1+s2+";";
 assert(false);
+return QCString();
 }
 
 
@@ -5713,6 +5816,7 @@ s+=":";
     }
 return s+="null";
 assert(false);
+return QCString();
 }
 
 
@@ -5744,6 +5848,7 @@ return s;
       }
     }
 assert(false);
+return QCString();
 }
 
 
@@ -5812,6 +5917,7 @@ return "type";
       errorHandler->handleParseError(token, getToken(1), __FUNCTION__, this), hasError = true;
     }
 assert(false);
+return QCString();
 }
 
 
@@ -5821,6 +5927,7 @@ QCString VhdlParser::operator_symbol() {
     }
 return tok->image.c_str();
 assert(false);
+return QCString();
 }
 
 
@@ -6344,6 +6451,7 @@ QCString VhdlParser::parameter_specifica
     }
 return s+" in "+s1;
 assert(false);
+return QCString();
 }
 
 
@@ -6362,6 +6470,7 @@ QCString VhdlParser::physical_literal()
     }
 s+=" ";s+=s1;s.prepend(" "); return s;
 assert(false);
+return QCString();
 }
 
 
@@ -6420,6 +6529,7 @@ outlineParser()->addVhdlType(s.data(),t-
     }
 return s;
 assert(false);
+return QCString();
 }
 
 
@@ -6449,6 +6559,7 @@ QCString VhdlParser::port_list() {QCStri
     }
 return s;
 assert(false);
+return QCString();
 }
 
 
@@ -6545,6 +6656,7 @@ return s;
       }
     }
 assert(false);
+return QCString();
 }
 
 
@@ -6624,6 +6736,7 @@ s1.prepend("("); s1.append(")");
     }
 return s+s1;
 assert(false);
+return QCString();
 }
 
 
@@ -6651,6 +6764,7 @@ s+=":";
     }
 return s+s1+";";
 assert(false);
+return QCString();
 }
 
 
@@ -6782,6 +6896,7 @@ return s;
       }
     }
 assert(false);
+return QCString();
 }
 
 
@@ -6821,6 +6936,7 @@ s+=s1;
     }
 return s;
 assert(false);
+return QCString();
 }
 
 
@@ -7065,6 +7181,7 @@ s+="(";s+=s1;s+=")";
     }
 return s;
 assert(false);
+return QCString();
 }
 
 
@@ -7094,6 +7211,7 @@ return s;
       errorHandler->handleParseError(token, getToken(1), __FUNCTION__, this), hasError = true;
     }
 assert(false);
+return QCString();
 }
 
 
@@ -7106,6 +7224,7 @@ QCString VhdlParser::range_constraint()
     }
 return " range "+s;
 assert(false);
+return QCString();
 }
 
 
@@ -7191,6 +7310,7 @@ QCString VhdlParser::relation() {QCStrin
     }
 return s+s1+s2;
 assert(false);
+return QCString();
 }
 
 
@@ -7310,6 +7430,7 @@ return  "?/=";
       errorHandler->handleParseError(token, getToken(1), __FUNCTION__, this), hasError = true;
     }
 assert(false);
+return QCString();
 }
 
 
@@ -7361,6 +7482,7 @@ if(t) s.append(":");
         if(t1) s2.prepend(" severity ");
         return s+s1+s2+";";
 assert(false);
+return QCString();
 }
 
 
@@ -7428,6 +7550,7 @@ s+=":";
     }
 return s+" return "+s1+";";
 assert(false);
+return QCString();
 }
 
 
@@ -7470,6 +7593,7 @@ return s+" "+s1;
       }
     }
 assert(false);
+return QCString();
 }
 
 
@@ -7511,6 +7635,7 @@ QCString VhdlParser::secondary_unit_decl
 outlineParser()->addVhdlType(s.data(),t1->beginLine,Entry::VARIABLE_SEC,VhdlDocGen::UNITS,0,s1.data(),Public);
    return s+"="+s1;
 assert(false);
+return QCString();
 }
 
 
@@ -7526,6 +7651,7 @@ QCString VhdlParser::selected_name() {QC
     }
 return s+"."+s1;
 assert(false);
+return QCString();
 }
 
 
@@ -7606,6 +7732,7 @@ QCString VhdlParser::sensitivity_clause(
 s.prepend(" on ");
   return s;
 assert(false);
+return QCString();
 }
 
 
@@ -7638,6 +7765,7 @@ s+=",";s+=s1;
     }
 return s;
 assert(false);
+return QCString();
 }
 
 
@@ -7660,6 +7788,7 @@ s+=s1;
     }
 return s;
 assert(false);
+return QCString();
 }
 
 
@@ -7768,6 +7897,7 @@ FlowChart::addFlowChart(FlowChart::TEXT_
       }
     }
 assert(false);
+return QCString();
 }
 
 
@@ -7798,6 +7928,7 @@ QCString VhdlParser::shift_expression()
     }
 return s+s1+s2;
 assert(false);
+return QCString();
 }
 
 
@@ -7863,6 +7994,7 @@ return "ror";
       errorHandler->handleParseError(token, getToken(1), __FUNCTION__, this), hasError = true;
     }
 assert(false);
+return QCString();
 }
 
 
@@ -7892,6 +8024,7 @@ return "-";
       errorHandler->handleParseError(token, getToken(1), __FUNCTION__, this), hasError = true;
     }
 assert(false);
+return QCString();
 }
 
 
@@ -7971,6 +8104,7 @@ return s+s1+"<="+s2+s3+";";
       }
     }
 assert(false);
+return QCString();
 }
 
 
@@ -8060,6 +8194,7 @@ return "bus";
       errorHandler->handleParseError(token, getToken(1), __FUNCTION__, this), hasError = true;
     }
 assert(false);
+return QCString();
 }
 
 
@@ -8121,6 +8256,7 @@ return "all";
       errorHandler->handleParseError(token, getToken(1), __FUNCTION__, this), hasError = true;
     }
 assert(false);
+return QCString();
 }
 
 
@@ -8191,6 +8327,7 @@ s+="return ";s+=s1;
     }
 s1="["+s+"]";return s1;
 assert(false);
+return QCString();
 }
 
 
@@ -8236,6 +8373,7 @@ s+=s1;s+=s2;
     }
 return s;
 assert(false);
+return QCString();
 }
 
 
@@ -8261,6 +8399,7 @@ QCString VhdlParser::slice_name() {QCStr
     }
 return s+"("+s1+")";
 assert(false);
+return QCString();
 }
 
 
@@ -8270,6 +8409,7 @@ QCString VhdlParser::string_literal() {T
     }
 return tok->image.c_str();
 assert(false);
+return QCString();
 }
 
 
@@ -8525,6 +8665,7 @@ return s;
       }
     }
 assert(false);
+return QCString();
 }
 
 
@@ -8565,6 +8706,7 @@ s+=s1;
     }
 return s;
 assert(false);
+return QCString();
 }
 
 
@@ -8810,6 +8952,7 @@ QCString VhdlParser::subtype_declaration
 outlineParser()->addVhdlType(s.data(),outlineParser()->getLine(),Entry::VARIABLE_SEC,VhdlDocGen::SUBTYPE,0,s1.data(),Public);
   return " subtype "+s+" is "+s1+";";
 assert(false);
+return QCString();
 }
 
 
@@ -8825,6 +8968,7 @@ QCString VhdlParser::reslution_indicatio
     }
 return "("+s+")";
 assert(false);
+return QCString();
 }
 
 
@@ -8869,6 +9013,7 @@ QCString VhdlParser::subtype_indication(
     }
 return s+" "+s1+" "+s2;
 assert(false);
+return QCString();
 }
 
 
@@ -8916,6 +9061,7 @@ return " all ";
       }
     }
 assert(false);
+return QCString();
 }
 
 
@@ -8948,6 +9094,7 @@ return s;
       errorHandler->handleParseError(token, getToken(1), __FUNCTION__, this), hasError = true;
     }
 assert(false);
+return QCString();
 }
 
 
@@ -8976,6 +9123,7 @@ s+=s1;s+=s2;
     }
 return s;
 assert(false);
+return QCString();
 }
 
 
@@ -8988,6 +9136,7 @@ QCString VhdlParser::timeout_clause() {Q
     }
 return " for "+s;
 assert(false);
+return QCString();
 }
 
 
@@ -9006,6 +9155,7 @@ QCString VhdlParser::type_conversion() {
     }
 return s+"("+s1+")";
 assert(false);
+return QCString();
 }
 
 
@@ -9035,6 +9185,7 @@ return s;
       }
     }
 assert(false);
+return QCString();
 }
 
 
@@ -9107,6 +9258,7 @@ return "";
       }
     }
 assert(false);
+return QCString();
 }
 
 
@@ -9116,6 +9268,7 @@ QCString VhdlParser::type_mark() {QCStri
     }
 return s;
 assert(false);
+return QCString();
 }
 
 
@@ -9163,6 +9316,7 @@ s3+=",";s3+=s1;
     }
 return "array("+s+s3+") of "+s2;
 assert(false);
+return QCString();
 }
 
 
@@ -9212,6 +9366,7 @@ QCStringList ql1=QCStringList::split(","
                    s1="use "+s;
                    return s1;
 assert(false);
+return QCString();
 }
 
 
@@ -9269,6 +9424,7 @@ return "";
       errorHandler->handleParseError(token, getToken(1), __FUNCTION__, this), hasError = true;
     }
 assert(false);
+return QCString();
 }
 
 
@@ -9339,6 +9495,7 @@ int spec;
   outlineParser()->addVhdlType(s.data(),outlineParser()->getLine(),Entry::VARIABLE_SEC,spec,0,it.data(),Public);
   return val;
 assert(false);
+return QCString();
 }
 
 
@@ -9408,6 +9565,7 @@ QCString VhdlParser::wait_statement() {Q
 if(t) s.append(":");
   return s+" wait "+s1+s2+s3+";";
 assert(false);
+return QCString();
 }
 
 
@@ -9482,6 +9640,7 @@ return " unaffected ";
       errorHandler->handleParseError(token, getToken(1), __FUNCTION__, this), hasError = true;
     }
 assert(false);
+return QCString();
 }
 
 
@@ -9510,6 +9669,7 @@ s1.prepend(" after ");
     }
 return s+s1;
 assert(false);
+return QCString();
 }
 
 
@@ -9548,6 +9708,7 @@ QCString VhdlParser::protected_type_body
     }
 return "";
 assert(false);
+return QCString();
 }
 
 
@@ -9721,6 +9882,7 @@ outlineParser()->error_skipto(END_T);
     }
 return "";
 assert(false);
+return QCString();
 }
 
 
@@ -9819,6 +9981,7 @@ s+=".";s+=s1;
     }
 return "context "+s ;
 assert(false);
+return QCString();
 }
 
 
@@ -9927,6 +10090,7 @@ return s;
       errorHandler->handleParseError(token, getToken(1), __FUNCTION__, this), hasError = true;
     }
 assert(false);
+return QCString();
 }
 
 
@@ -10002,6 +10166,7 @@ QCString VhdlParser::interface_package_d
 m_sharedState->current->name=s;
                             return "package "+s+" is new "+s1;
 assert(false);
+return QCString();
 }
 
 
@@ -10044,6 +10209,7 @@ QCString q= " is new "+s1+s2;
       outlineParser()->addVhdlType(s.data(),outlineParser()->getLine(FUNCTION_T),Entry::VARIABLE_SEC,VhdlDocGen::INSTANTIATION,"function ",q.data(),Public);
     return q;
 assert(false);
+return QCString();
 }
 
 
@@ -10388,6 +10554,7 @@ QCString t="<<"+s;
                          QCString t1=s1+":"+s2+">>";
                          return   s+s1;
 assert(false);
+return QCString();
 }
 
 
@@ -10426,6 +10593,7 @@ return t->image.data();
       errorHandler->handleParseError(token, getToken(1), __FUNCTION__, this), hasError = true;
     }
 assert(false);
+return QCString();
 }
 
 
@@ -10464,6 +10632,7 @@ return s;
       errorHandler->handleParseError(token, getToken(1), __FUNCTION__, this), hasError = true;
     }
 assert(false);
+return QCString();
 }
 
 
@@ -10502,6 +10671,7 @@ return "."+s;
       }
     }
 assert(false);
+return QCString();
 }
 
 
@@ -10523,6 +10693,7 @@ QCString VhdlParser::relative_pathname()
     }
 return s+s1+s2;
 assert(false);
+return QCString();
 }
 
 
@@ -10552,6 +10723,7 @@ s+="^.";
     }
 return s;
 assert(false);
+return QCString();
 }
 
 
@@ -10583,6 +10755,7 @@ if(!s1.isEmpty())
 
     return s;
 assert(false);
+return QCString();
 }
 
 
@@ -10619,6 +10792,7 @@ s2+=s1;s2+=".";
     }
 return s+s2;
 assert(false);
+return QCString();
 }
 
 
@@ -10631,6 +10805,7 @@ QCString VhdlParser::package_path_name()
     }
 return "@"+s;
 assert(false);
+return QCString();
 }
 
 
@@ -11194,6 +11369,7 @@ return s;
       errorHandler->handleParseError(token, getToken(1), __FUNCTION__, this), hasError = true;
     }
 assert(false);
+return QCString();
 }
 
 
@@ -11210,6 +11386,7 @@ QCString VhdlParser::iproc() {QCString s
 m_sharedState->current->name=s;
     return "procedure "+s+s1;
 assert(false);
+return QCString();
 }
 
 
@@ -11311,6 +11488,7 @@ QCString q;
    }
    m_sharedState->currP=0;return "";
 assert(false);
+return QCString();
 }
 
 
@@ -11357,6 +11535,7 @@ if(tok)
     m_sharedState->param_sec=0;
     return s+"("+s1+")";
 assert(false);
+return QCString();
 }
 
 
