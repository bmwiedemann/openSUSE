-------------------------------------------------------------------
Fri Oct  3 13:38:35 UTC 2025 - Filippo Bonazzi <filippo.bonazzi@suse.com>

- Remove hhdate dependency
  - Add remove_hhdate_dependency.patch: replace date library usage with
    C++20 std::chrono
- Add %check section and run tests
  - Add test dependencies gtest and gmock

-------------------------------------------------------------------
Thu Oct  2 17:25:56 UTC 2025 - Mia Herkt <mia@0x0.st>

- Remove libboost_system-devel from BuildRequires
- Add folly-remove-boost_system-dependency.patch
  Fixes build with Boost >=1.89.0
  gh#mhx/dwarfs#288
  gh#facebook/folly#2489

-------------------------------------------------------------------
Tue Sep  2 22:55:02 UTC 2025 - Mia Herkt <mia@0x0.st>

- Update to version 0.13.0:
Bugfixes:
  * Made section index discovery more robust.
    gh#mhx/dwarfs#264
  * A recent kernel change (https://lkml.org/lkml/2025/5/5/2868)
    caused the tools_test to fail on Linux 6.14 and later.
    This has been fixed by accepting both EPERM and ENOSYS as
    valid error codes for link() calls.
Features:
  * Support for big-endian architectures.
    This is still experimental, even though all unit tests pass
    with QEMU, and the benchmark suite runs fine on real hardware.
    This currently requires forked versions of folly and fsst.
    The changes are small and the pull requests will hopefully be
    merged upstream soon.
  * Experimental support for 32-bit architectures.
    While DwarFS should mostly "just work" on 32-bit when using
    small images (a few hundred megabytes), the limited address
    space is a problem for the extensive use of memory-mapped
    files inside DwarFS. There will be changes to limit the use of
    mmap in the future (mainly due to other issues), which should
    help 32-bit compatibility as a side-effect.
    gh#mhx/dwarfs#268.
  * The category metadata for categorized blocks is now stored in
    the metadata block by default. This allows re-compressing the
    blocks with a metadata-dependent algorithm (e.g. FLAC) even if
    they were previously compressed using a metadata-independent
    algorithm.
    This can be disabled using the --no-category-metadata option.
    See the mkdwarfs man page for more details.
  * The --no-category-names and --no-category-metadata options can
    be used to reduce the size of the metadata. However, this will
    make it impossible to use metadata-dependent compression
    algorithms (e.g. FLAC), or even select category-specific
    compression, when recompressing the image.
  * Metadata rebuilding is now supported in mkdwarfs using the
    --rebuild-metadata option. Previously, the metadata could only
    be recompressed, but it was impossible to change it. With the
    new option, it is now possible to change metadata packing and
    apply operations like --set-owner, --set-group, --set-time,
    --time-resolution, --chmod, or --no-create-timestamp.
    Note that these are potentially lossy operations that may be
    irreversible. By default, the history of metadata rebuilds is
    tracked in the metadata itself, but this can be disabled using
    --no-metadata-version-history.
  * In addition to metadata rebuilding, it is now also possible to
    change the block size of an existing image using the
    --change-block-size option. This implies --rebuild-metadata
    and --recompress=all. This can be useful for tuning the
    performance of an existing image without having to re-create
    it from scratch.
  * mkdwarfs now shows its current memory usage while running.
    Note that -L/--memory-limit still only limits the memory used
    for the block queue, not the overall memory usage. Fixing this
    is on the roadmap, there's no need to file an issue.
  * dwarfsextract has new options to control the output format:
    --format-options and --format-filters. There is also
    --format=auto to automatically "guess" the format and filters
    based on the output file name.
  * dwarfsck has a new frozen_details detail level that will show
    the frozen_analysis content ordered by memory location instead
    of memory usage and also shows the address range of each
    section.

-------------------------------------------------------------------
Sun Aug 24 12:05:51 UTC 2025 - Jan Engelhardt <jengelh@inai.de>

- Replace wrong BuildRequires pkgconfig(clzma) -> pkgconfig(liblzma);
  build only succeeded previously by accident.

-------------------------------------------------------------------
Sat Jun 21 12:19:45 UTC 2025 - Mia Herkt <mia@0x0.st>

- Update to version 0.12.4:
Bugfixes
  * Segfault on bad_compression_ratio_error. When recompressing a
    filesystem where some blocks cannot be compressed using the
    selected algorithm because of a bad_compression_ratio_error,
    the resulting block was left empty.
  * Add history unless --no-history is given when rewriting a file
    system image.
  * Allow dumping frozen_layout w/o frozen_analysis in dwarfsck.
  * Logging timestamps should show local time.
Features
  * More complete breakdown of metadata in dwarfsck.
  * Add schema_raw_dump flag to dwarfsck --detail.
Build
  * Update folly/fbthrift/fsst.

-------------------------------------------------------------------
Mon Apr 21 19:50:12 UTC 2025 - Mia Herkt <mia@0x0.st>

- Update to version 0.12.3:
Bugfixes
  * Automatic image offset detection (for images using a custom
    header) did not work correctly if the header contained a
    string that would be identified as the start of a v1 section
    header (these were only used before dwarfs-0.3.0).
    If there was either "DWARFS\x02\x00" or "DWARFS\x02\x01" in
    the header, offset detection would fail. The check has been
    modified to peek further into the data and ensure this really
    is a v1 section header, and also checking if the next section
    header position can be derived from the length field.
    It is still possible to construct a file system image where
    offset detection will ultimately fail, but it is much less
    likely with the change.
- Changes in version 0.12.2:
Bugfixes
  *The dwarfs-0.12.0 release introduced a performance regression
   where FLAC compression took more than twice as long as in the
   previous releases. This has been fixed. FLAC decompression was
   unaffected.

-------------------------------------------------------------------
Sun Apr 13 19:46:34 UTC 2025 - Mia Herkt <mia@0x0.st>

- Update to version 0.12.1: 
Features
  * Added --memory-limit=auto to mkdwarfs to use a more reasonable
    (hopefully) default for the block queue. The old default of
    1 GiB was quite arbitrary and definitely not suitable for
    low-end systems. The new auto default will determine the limit
    based on the number of workers (which in turn is based on the
    number of CPUs), the block size, and the amount of physical
    memory of the system.
  * Replaced vector_byte_buffer with malloc_byte_buffer, which is
    internally based around a simple buffer that doesn't incur the
    cost of initializing each element like std::vector. Especially
    for large blocks which are known to be overwritten immediately,
    this can save a few CPU cycles.
- Changes in version 0.12.0:
  * New Licensing Conditions: Instead of being all GPL-3.0 like all
    the previous releases, this release changes the license of a
    large fraction of the DwarFS code to MIT. All tools and
    libraries that only read DwarFS images are now MIT-licensed.
    Everything else (e.g. mkdwarfs) is still GPL-3.0 for the time
    being.

Bugfixes
  * Changes for compatibility with Boost.Process v2.

Features
  * Re-licensed all libraries required for reading DwarFS images
    under the MIT license. The source of all tools that just read
    DwarFS images (i.e. everything except for mkdwarfs) are also
    under the MIT license now. Everything else is still GPL-3.0.
    gh#mhx/dwarfs#255
  * New hotness categorizer in mkdwarfs that allows a list of "hot"
    files to be stored in distinct file system blocks.
  * New explicit ordering mode in mkdwarfs that allows files to be
    ordered accoring to the order in a given list file.
  * dwarfs now shows the version of the FUSE library used.
  * New dwarfs options preload_all and preload_category to populate
    the block cache immediately after mounting.
  * New dwarfs option analysis_file that can be used for profiling
    and as input to mkdwarfs new hotness categorizer and explicit
    ordering mode.
  * New dwarfs option block_allocator that allows the user to
    switch from a malloc-based block allocator to an mmap-based
    one. This can help with returning memory back to the system if
    the blocks are evicted from the cache.

-------------------------------------------------------------------
Fri Apr  4 07:31:03 UTC 2025 - Jan Engelhardt <jengelh@inai.de>

- Use SRPM base name for devel subpackage

-------------------------------------------------------------------
Tue Apr  1 03:25:25 UTC 2025 - Mia Herkt <mia@0x0.st>

- Initial package, version 0.11.3
