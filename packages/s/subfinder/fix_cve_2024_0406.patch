From 82ca88a2eb24d418c30bf960ef071b0bbec04631 Mon Sep 17 00:00:00 2001
From: Alex Goodman <wagoodman@users.noreply.github.com>
Date: Wed, 31 Jan 2024 10:41:03 -0500
Subject: [PATCH] Fix tar path traversal through symlinks (#1)

* fix tar path traversal through symlinks

Signed-off-by: Alex Goodman <wagoodman@users.noreply.github.com>

* address absolute symlink destinations

Signed-off-by: Alex Goodman <wagoodman@users.noreply.github.com>

* Removed patch for tar_test.go which doesn't exist in vendor dir
  ~ dheidler

---------

Signed-off-by: Alex Goodman <wagoodman@users.noreply.github.com>
---
 tar.go      | 18 +++++++++++
 tar_test.go | 89 ++++++++++++++++++++++++++++++++++++++++++++++++++++-
 2 files changed, 106 insertions(+), 1 deletion(-)

diff --git a/tar.go b/tar.go
index be898665..d5820114 100644
--- a/tar.go
+++ b/tar.go
@@ -238,6 +238,24 @@ func (t *Tar) untarNext(destination string) error {
 		return fmt.Errorf("checking path traversal attempt: %v", errPath)
 	}
 
+	switch header.Typeflag {
+	case tar.TypeSymlink, tar.TypeLink:
+		// this covers cases when the link is an absolute path to a file outside the destination folder
+		if filepath.IsAbs(header.Linkname) {
+			errPath := &IllegalPathError{AbsolutePath: "", Filename: header.Linkname}
+			return fmt.Errorf("absolute path for symlink destination not allowed: %w", errPath)
+		}
+
+		// though we've already checked the name for possible path traversals, it is possible
+		// to write content though a symlink to a path outside of the destination folder
+		// with multiple header entries. We should consider any symlink or hardlink that points
+		// to outside of the destination folder to be a possible path traversal attack.
+		errPath = t.CheckPath(destination, header.Linkname)
+		if errPath != nil {
+			return fmt.Errorf("checking path traversal attempt in symlink: %w", errPath)
+		}
+	}
+
 	if t.StripComponents > 0 {
 		if strings.Count(header.Name, "/") < t.StripComponents {
 			return nil // skip path with fewer components
