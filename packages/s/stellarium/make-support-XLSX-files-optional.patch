From b7829948d0645bb6c69a1f8ca6c8fd56ac99a02c Mon Sep 17 00:00:00 2001
From: "Alexander V. Wolf" <alex.v.wolf@gmail.com>
Date: Sun, 9 Oct 2022 11:54:13 +0700
Subject: [PATCH] Optional support XLSX files (#2723)

---
 CMakeLists.txt                                |  54 +-
 plugins/Satellites/src/CMakeLists.txt         |   4 +-
 .../Satellites/src/gui/SatellitesDialog.cpp   |  27 +-
 src/CMakeLists.txt                            |   5 +-
 src/gui/AstroCalcDialog.cpp                   | 944 +++---------------
 src/gui/AstroCalcDialog.hpp                   |   2 +
 6 files changed, 197 insertions(+), 839 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 3d113baf722..dda249cd32c 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -413,6 +413,12 @@ SET(ENABLE_GPS 1 CACHE BOOL "Define whether GPS queries should be supported.")
 # Activate support for ShowMySky atmosphere
 SET(ENABLE_SHOWMYSKY 1 CACHE BOOL "Define whether to support ShowMySky atmosphere model")
 
+# Activate support for XLSX (Excel) files
+SET(ENABLE_XLSX 1 CACHE BOOL "Define whether to support XLSX (Excel) files")
+IF(ENABLE_XLSX)
+     ADD_DEFINITIONS(-DENABLE_XLSX)
+ENDIF()
+
 # SPOUT allows relaying the Stellarium OpenGL framebuffer as DirectX texture in other programs.
 # It exists on Windows only. Syphon is a similar system for MacOS, this might be added by a Mac developer.
 IF(WIN32)
@@ -792,29 +798,31 @@ ELSE()
      MESSAGE(STATUS "Using system-provided zlib at ${ZLIB_LIBRARIES}")
 ENDIF()
 
-# TODO: switch to something like vcpkg or conan, and plain find_package,
-# without the fallback of cmake downloading the dep itself.
-# But some libraries are not available there yet.
-CPMFindPackage(NAME QXlsx
-    URL https://github.com/QtExcel/QXlsx/archive/refs/tags/v1.4.4.zip
-    URL_HASH SHA256=3efbd6f63a1ffd521c535dce7b5a5a7e9ebd23db51e6ae8e3e2eb89796e57675
-    DOWNLOAD_ONLY yes
-    EXCLUDE_FROM_ALL ON
-    SOURCE_SUBDIR QXlsx)
-if(QXlsx_ADDED)
-    # Can't use embedded CMakeLists.txt due to
-    # https://github.com/QtExcel/QXlsx/issues/134
-    file(GLOB_RECURSE QXLSX_FILES
-        ${QXlsx_SOURCE_DIR}/QXlsx/source/*.cpp
-        ${QXlsx_SOURCE_DIR}/QXlsx/header/*.h)
-    add_library(QXlsx STATIC EXCLUDE_FROM_ALL ${QXLSX_FILES})
-    target_link_libraries(QXlsx PUBLIC
-        Qt${QT_VERSION_MAJOR}::Core
-        Qt${QT_VERSION_MAJOR}::Gui
-        Qt${QT_VERSION_MAJOR}::GuiPrivate)
-    target_include_directories(QXlsx PUBLIC ${QXlsx_SOURCE_DIR}/QXlsx/header)
-    add_library(QXlsx::QXlsx ALIAS QXlsx)
-endif()
+IF(ENABLE_XLSX)
+     # TODO: switch to something like vcpkg or conan, and plain find_package,
+     # without the fallback of cmake downloading the dep itself.
+     # But some libraries are not available there yet.
+     CPMFindPackage(NAME QXlsx
+	 URL https://github.com/QtExcel/QXlsx/archive/refs/tags/v1.4.4.zip
+	 URL_HASH SHA256=3efbd6f63a1ffd521c535dce7b5a5a7e9ebd23db51e6ae8e3e2eb89796e57675
+	 DOWNLOAD_ONLY yes
+	 EXCLUDE_FROM_ALL ON
+	 SOURCE_SUBDIR QXlsx)
+     if(QXlsx_ADDED)
+	 # Can't use embedded CMakeLists.txt due to
+	 # https://github.com/QtExcel/QXlsx/issues/134
+	 file(GLOB_RECURSE QXLSX_FILES
+	     ${QXlsx_SOURCE_DIR}/QXlsx/source/*.cpp
+	     ${QXlsx_SOURCE_DIR}/QXlsx/header/*.h)
+	 add_library(QXlsx STATIC EXCLUDE_FROM_ALL ${QXLSX_FILES})
+	 target_link_libraries(QXlsx PUBLIC
+	     Qt${QT_VERSION_MAJOR}::Core
+	     Qt${QT_VERSION_MAJOR}::Gui
+	     Qt${QT_VERSION_MAJOR}::GuiPrivate)
+	 target_include_directories(QXlsx PUBLIC ${QXlsx_SOURCE_DIR}/QXlsx/header)
+	 add_library(QXlsx::QXlsx ALIAS QXlsx)
+     endif()
+ENDIF()
 
 ########### Set some global variables ###########
 IF(UNIX AND NOT WIN32)
diff --git a/plugins/Satellites/src/CMakeLists.txt b/plugins/Satellites/src/CMakeLists.txt
index 45206fe66aa..d5ab143661c 100644
--- a/plugins/Satellites/src/CMakeLists.txt
+++ b/plugins/Satellites/src/CMakeLists.txt
@@ -62,11 +62,11 @@ ELSE()
 ENDIF()
 
 IF(ENABLE_TESTING)
-    ADD_SUBDIRECTORY(test)
+     ADD_SUBDIRECTORY(test)
 ENDIF(ENABLE_TESTING)
 
 ADD_LIBRARY(Satellites-static STATIC ${Satellites_SRCS} ${Satellites_RES_CXX} ${SatellitesDialog_UIS_H})
-TARGET_LINK_LIBRARIES(Satellites-static QXlsx Qt${QT_VERSION_MAJOR}::Core
+TARGET_LINK_LIBRARIES(Satellites-static Qt${QT_VERSION_MAJOR}::Core
     Qt${QT_VERSION_MAJOR}::Network Qt${QT_VERSION_MAJOR}::Widgets
     Qt${QT_VERSION_MAJOR}::GuiPrivate)
 # The library target "Satellites-static" has a default OUTPUT_NAME of "Satellites-static", so change it.
diff --git a/plugins/Satellites/src/gui/SatellitesDialog.cpp b/plugins/Satellites/src/gui/SatellitesDialog.cpp
index 519f41c7487..3b0559e3a01 100644
--- a/plugins/Satellites/src/gui/SatellitesDialog.cpp
+++ b/plugins/Satellites/src/gui/SatellitesDialog.cpp
@@ -1576,16 +1576,21 @@ void SatellitesDialog::selectCurrentIridiumFlare(const QModelIndex &modelIndex)
 
 void SatellitesDialog::savePredictedIridiumFlares()
 {
-	QString filter = q_("Microsoft Excel Open XML Spreadsheet");
-	filter.append(" (*.xlsx);;");
-	filter.append(q_("CSV (Comma delimited)"));
-	filter.append(" (*.csv)");
-	QString defaultFilter("(*.xlsx)");
-	QString filePath = QFileDialog::getSaveFileName(Q_NULLPTR,
-							q_("Save predicted Iridium flares as..."),
-							QDir::homePath() + "/iridium_flares.xlsx",
-							filter,
-							&defaultFilter);
+	QString csv  = QString("%1 (*.csv)").arg(q_("CSV (Comma delimited)"));
+	QSrting xlsx = QString("%1 (*.xlsx)").arg(q_("Microsoft Excel Open XML Spreadsheet"));
+	QString filter, defaultExtension;
+
+	#ifdef ENABLE_XLSX
+	filter = QString("%1;;%2") .arg(xlsx, csv);
+	defaultExtension = "xlsx";
+	#else
+	filter = csv;
+	defaultExtension = "csv";
+	#endif
+
+	QString defaultFilter = QString("(*.%1)").arg(defaultExtension);
+	QString dir = QString("%1/iridium_flares.%2").arg(QDir::homePath(), defaultExtension);
+	QString filePath = QFileDialog::getSaveFileName(Q_NULLPTR, q_("Save predicted Iridium flares as..."), dir, filter, &defaultFilter);
 
 	int count = ui->iridiumFlaresTreeWidget->topLevelItemCount();
 	int columns = iridiumFlaresHeader.size();
@@ -1624,6 +1629,7 @@ void SatellitesDialog::savePredictedIridiumFlares()
 	}
 	else
 	{
+		#ifdef ENABLE_XLSX
 		int *width;
 		width = new int[columns];
 		QString sData;
@@ -1672,6 +1678,7 @@ void SatellitesDialog::savePredictedIridiumFlares()
 
 		delete[] width;
 		xlsx.saveAs(filePath);
+		#endif
 	}
 }
 #endif
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 34e8ae07029..ed77e778481 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -500,10 +500,13 @@ IF(ENABLE_SPOUT AND SPOUT_LIBRARY_DLL)
      CONFIGURE_FILE(${SPOUT_LIBRARY_DLL} ${CMAKE_CURRENT_BINARY_DIR} COPYONLY)
 ENDIF()
 
-SET(STELMAIN_DEPS ${ZLIB_LIBRARIES} glues_stel QXlsx::QXlsx ${STELLARIUM_STATIC_PLUGINS_LIBRARIES} ${STELLARIUM_QT_LIBRARIES} ${SPOUT_LIBRARY})
+SET(STELMAIN_DEPS ${ZLIB_LIBRARIES} glues_stel ${STELLARIUM_STATIC_PLUGINS_LIBRARIES} ${STELLARIUM_QT_LIBRARIES} ${SPOUT_LIBRARY})
 IF(ENABLE_LIBGPS)
      SET(STELMAIN_DEPS ${STELMAIN_DEPS} ${GPS_LIBRARY})
 ENDIF()
+IF(ENABLE_XLSX)
+     SET(STELMAIN_DEPS ${STELMAIN_DEPS} QXlsx::QXlsx)
+ENDIF()
 
 IF(HAIKU)
      SET(STELMAIN_DEPS ${STELMAIN_DEPS} network)
diff --git a/src/gui/AstroCalcDialog.cpp b/src/gui/AstroCalcDialog.cpp
index 9b8ea503ac5..8947810c15a 100644
--- a/src/gui/AstroCalcDialog.cpp
+++ b/src/gui/AstroCalcDialog.cpp
@@ -72,9 +72,11 @@ using namespace QtCharts;
 #include "AstroCalcCustomStepsDialog.hpp"
 #include "ui_astroCalcDialog.h"
 
+#ifdef ENABLE_XLSX
 #include <xlsxdocument.h>
 #include <xlsxcellrange.h>
 using namespace QXlsx;
+#endif
 
 QVector<Ephemeris> AstroCalcDialog::EphemerisList;
 int AstroCalcDialog::DisplayedPositionIndex = -1;
@@ -1415,81 +1417,11 @@ QPair<QString, QString> AstroCalcDialog::getStringCoordinates(const Vec3d &coord
 
 void AstroCalcDialog::saveCelestialPositions()
 {
-	QString filter = q_("Microsoft Excel Open XML Spreadsheet");
-	filter.append(" (*.xlsx);;");
-	filter.append(q_("CSV (Comma delimited)"));
-	filter.append(" (*.csv)");
-	QString defaultFilter("(*.xlsx)");
-	QString filePath = QFileDialog::getSaveFileName(Q_NULLPTR,
-							q_("Save celestial positions of objects as..."),
-							QDir::homePath() + "/positions.xlsx",
-							filter,
-							&defaultFilter);
-
-	if (defaultFilter.contains(".csv", Qt::CaseInsensitive))
-		saveTableAsCSV(filePath, ui->celestialPositionsTreeWidget, positionsHeader);
+	QPair<QString, QString> fileData = askTableFilePath(q_("Save celestial positions of objects as..."), "positions");
+	if (fileData.second.contains(".csv", Qt::CaseInsensitive))
+		saveTableAsCSV(fileData.first, ui->celestialPositionsTreeWidget, positionsHeader);
 	else
-	{
-		int count = ui->celestialPositionsTreeWidget->topLevelItemCount();
-		int columns = positionsHeader.size();
-		int *width = new int[static_cast<unsigned int>(columns)];
-		QString sData;
-
-		QXlsx::Document xlsx;
-		xlsx.setDocumentProperty("title", q_("Celestial positions of objects"));
-		xlsx.setDocumentProperty("creator", StelUtils::getApplicationName());
-		xlsx.addSheet(ui->celestialCategoryComboBox->currentData(Qt::DisplayRole).toString(), AbstractSheet::ST_WorkSheet);
-
-		QXlsx::Format header;
-		header.setHorizontalAlignment(QXlsx::Format::AlignHCenter);
-		header.setPatternBackgroundColor(Qt::yellow);
-		header.setBorderStyle(QXlsx::Format::BorderThin);
-		header.setBorderColor(Qt::black);
-		header.setFontBold(true);
-		for (int i = 0; i < columns; i++)
-		{
-			// Row 1: Names of columns
-			sData = positionsHeader.at(i).trimmed();
-			xlsx.write(1, i + 1, sData, header);
-			width[i] = sData.size();
-		}
-
-		QXlsx::Format data;
-		data.setHorizontalAlignment(QXlsx::Format::AlignRight);
-		for (int i = 0; i < count; i++)
-		{
-			for (int j = 0; j < columns; j++)
-			{
-				// Row 2 and next: the data
-				sData = ui->celestialPositionsTreeWidget->topLevelItem(i)->text(j).trimmed();
-				xlsx.write(i + 2, j + 1, sData, data);
-				int w = sData.size();
-				if (w > width[j])
-				{
-					width[j] = w;
-				}
-			}
-		}
-
-		for (int i = 0; i < columns; i++)
-		{
-			xlsx.setColumnWidth(i+1, width[i]+2);
-		}
-
-		delete[] width;
-
-		// Add the date and time info for celestial positions
-		xlsx.write(count + 2, 1, ui->celestialPositionsTimeLabel->text());
-		QXlsx::CellRange range = CellRange(count+2, 1, count+2, columns);
-		QXlsx::Format extraData;
-		extraData.setBorderStyle(QXlsx::Format::BorderThin);
-		extraData.setBorderColor(Qt::black);
-		extraData.setPatternBackgroundColor(Qt::yellow);
-		extraData.setHorizontalAlignment(QXlsx::Format::AlignHCenter);
-		xlsx.mergeCells(range, extraData);
-
-		xlsx.saveAs(filePath);
-	}
+		saveTableAsXLSX(fileData.first, ui->celestialPositionsTreeWidget, positionsHeader, q_("Celestial positions of objects"), ui->celestialCategoryComboBox->currentData(Qt::DisplayRole).toString(), ui->celestialPositionsTimeLabel->text());
 }
 
 void AstroCalcDialog::selectCurrentCelestialPosition(const QModelIndex& modelIndex)
@@ -1720,81 +1652,11 @@ void AstroCalcDialog::drawHECGraph(QString selectedObject)
 
 void AstroCalcDialog::saveHECPositions()
 {
-	QString filter = q_("Microsoft Excel Open XML Spreadsheet");
-	filter.append(" (*.xlsx);;");
-	filter.append(q_("CSV (Comma delimited)"));
-	filter.append(" (*.csv)");
-	QString defaultFilter("(*.xlsx)");
-	QString filePath = QFileDialog::getSaveFileName(Q_NULLPTR,
-							q_("Save celestial positions of objects as..."),
-							QDir::homePath() + "/positions.xlsx",
-							filter,
-							&defaultFilter);
-
-	if (defaultFilter.contains(".csv", Qt::CaseInsensitive))
-		saveTableAsCSV(filePath, ui->hecPositionsTreeWidget, hecPositionsHeader);
+	QPair<QString, QString> fileData = askTableFilePath(q_("Save celestial positions of objects as..."), "positions");
+	if (fileData.second.contains(".csv", Qt::CaseInsensitive))
+		saveTableAsCSV(fileData.first, ui->hecPositionsTreeWidget, hecPositionsHeader);
 	else
-	{
-		int count = ui->hecPositionsTreeWidget->topLevelItemCount();
-		int columns = hecPositionsHeader.size();
-		int *width = new int[static_cast<unsigned int>(columns)];
-		QString sData;
-
-		QXlsx::Document xlsx;
-		xlsx.setDocumentProperty("title", q_("Heliocentric ecliptic positions of the major planets"));
-		xlsx.setDocumentProperty("creator", StelUtils::getApplicationName());
-		xlsx.addSheet(q_("Major planets"), AbstractSheet::ST_WorkSheet);
-
-		QXlsx::Format header;
-		header.setHorizontalAlignment(QXlsx::Format::AlignHCenter);
-		header.setPatternBackgroundColor(Qt::yellow);
-		header.setBorderStyle(QXlsx::Format::BorderThin);
-		header.setBorderColor(Qt::black);
-		header.setFontBold(true);
-		for (int i = 0; i < columns; i++)
-		{
-			// Row 1: Names of columns
-			sData = hecPositionsHeader.at(i).trimmed();
-			xlsx.write(1, i + 1, sData, header);
-			width[i] = sData.size();
-		}
-
-		QXlsx::Format data;
-		data.setHorizontalAlignment(QXlsx::Format::AlignRight);
-		for (int i = 0; i < count; i++)
-		{
-			for (int j = 0; j < columns; j++)
-			{
-				// Row 2 and next: the data
-				sData = ui->hecPositionsTreeWidget->topLevelItem(i)->text(j).trimmed();
-				xlsx.write(i + 2, j + 1, sData, data);
-				int w = sData.size();
-				if (w > width[j])
-				{
-					width[j] = w;
-				}
-			}
-		}
-
-		for (int i = 0; i < columns; i++)
-		{
-			xlsx.setColumnWidth(i+1, width[i]+2);
-		}
-
-		delete[] width;
-
-		// Add the date and time info for celestial positions
-		xlsx.write(count + 2, 1, ui->hecPositionsTimeLabel->text());
-		QXlsx::CellRange range = CellRange(count+2, 1, count+2, columns);
-		QXlsx::Format extraData;
-		extraData.setBorderStyle(QXlsx::Format::BorderThin);
-		extraData.setBorderColor(Qt::black);
-		extraData.setPatternBackgroundColor(Qt::yellow);
-		extraData.setHorizontalAlignment(QXlsx::Format::AlignHCenter);
-		xlsx.mergeCells(range, extraData);
-
-		xlsx.saveAs(filePath);
-	}
+		saveTableAsXLSX(fileData.first, ui->hecPositionsTreeWidget, hecPositionsHeader, q_("Heliocentric ecliptic positions of the major planets"), q_("Major planets"), ui->hecPositionsTimeLabel->text());
 }
 
 void AstroCalcDialog::selectCurrentHECPosition(const QModelIndex& modelIndex)
@@ -2177,70 +2039,11 @@ double AstroCalcDialog::getCustomTimeStep()
 
 void AstroCalcDialog::saveEphemeris()
 {
-	QString filter = q_("Microsoft Excel Open XML Spreadsheet");
-	filter.append(" (*.xlsx);;");
-	filter.append(q_("CSV (Comma delimited)"));
-	filter.append(" (*.csv)");
-	QString defaultFilter("(*.xlsx)");
-	QString filePath = QFileDialog::getSaveFileName(Q_NULLPTR,
-							q_("Save calculated ephemeris as..."),
-							QDir::homePath() + "/ephemeris.xlsx",
-							filter,
-							&defaultFilter);
-
-	if (defaultFilter.contains(".csv", Qt::CaseInsensitive))
-		saveTableAsCSV(filePath, ui->ephemerisTreeWidget, ephemerisHeader);
+	QPair<QString, QString> fileData = askTableFilePath(q_("Save calculated ephemeris as..."), "ephemeris");
+	if (fileData.second.contains(".csv", Qt::CaseInsensitive))
+		saveTableAsCSV(fileData.first, ui->ephemerisTreeWidget, ephemerisHeader);
 	else
-	{
-		int count = ui->ephemerisTreeWidget->topLevelItemCount();
-		int columns = ephemerisHeader.size();
-		int *width = new int[static_cast<unsigned int>(columns)];
-		QString sData;
-
-		QXlsx::Document xlsx;
-		xlsx.setDocumentProperty("title", q_("Ephemeris"));
-		xlsx.setDocumentProperty("creator", StelUtils::getApplicationName());
-		xlsx.addSheet(ui->celestialBodyComboBox->currentData(Qt::DisplayRole).toString(), AbstractSheet::ST_WorkSheet);
-
-		QXlsx::Format header;
-		header.setHorizontalAlignment(QXlsx::Format::AlignHCenter);
-		header.setPatternBackgroundColor(Qt::yellow);
-		header.setBorderStyle(QXlsx::Format::BorderThin);
-		header.setBorderColor(Qt::black);
-		header.setFontBold(true);
-		for (int i = 0; i < columns; i++)
-		{
-			// Row 1: Names of columns
-			sData = ephemerisHeader.at(i).trimmed();
-			xlsx.write(1, i + 1, sData, header);
-			width[i] = sData.size();
-		}
-
-		QXlsx::Format data;
-		data.setHorizontalAlignment(QXlsx::Format::AlignRight);
-		for (int i = 0; i < count; i++)
-		{
-			for (int j = 0; j < columns; j++)
-			{
-				// Row 2 and next: the data
-				sData = ui->ephemerisTreeWidget->topLevelItem(i)->text(j).trimmed();
-				xlsx.write(i + 2, j + 1, sData, data);
-				int w = sData.size();
-				if (w > width[j])
-				{
-					width[j] = w;
-				}
-			}
-		}
-
-		for (int i = 0; i < columns; i++)
-		{
-			xlsx.setColumnWidth(i+1, width[i]+2);
-		}
-
-		delete[] width;
-		xlsx.saveAs(filePath);
-	}
+		saveTableAsXLSX(fileData.first, ui->ephemerisTreeWidget, ephemerisHeader, q_("Ephemeris"), ui->celestialBodyComboBox->currentData(Qt::DisplayRole).toString());
 }
 
 void AstroCalcDialog::cleanupEphemeris()
@@ -2467,70 +2270,11 @@ void AstroCalcDialog::setRTSCelestialBodyName()
 
 void AstroCalcDialog::saveRTS()
 {
-	QString filter = q_("Microsoft Excel Open XML Spreadsheet");
-	filter.append(" (*.xlsx);;");
-	filter.append(q_("CSV (Comma delimited)"));
-	filter.append(" (*.csv)");
-	QString defaultFilter("(*.xlsx)");
-	QString filePath = QFileDialog::getSaveFileName(Q_NULLPTR,
-							q_("Save calculated data as..."),
-							QDir::homePath() + "/RTS.xlsx",
-							filter,
-							&defaultFilter);
-
-	if (defaultFilter.contains(".csv", Qt::CaseInsensitive))
-		saveTableAsCSV(filePath, ui->rtsTreeWidget, rtsHeader);
+	QPair<QString, QString> fileData = askTableFilePath(q_("Save calculated data as..."), "RTS");
+	if (fileData.second.contains(".csv", Qt::CaseInsensitive))
+		saveTableAsCSV(fileData.first, ui->rtsTreeWidget, rtsHeader);
 	else
-	{
-		int count = ui->rtsTreeWidget->topLevelItemCount();
-		int columns = rtsHeader.size();
-		int *width = new int[static_cast<unsigned int>(columns)];
-		QString sData;
-
-		QXlsx::Document xlsx;
-		xlsx.setDocumentProperty("title", q_("Risings, Transits, and Settings"));
-		xlsx.setDocumentProperty("creator", StelUtils::getApplicationName());
-		xlsx.addSheet(ui->rtsCelestialBodyNameLabel->text(), AbstractSheet::ST_WorkSheet);
-
-		QXlsx::Format header;
-		header.setHorizontalAlignment(QXlsx::Format::AlignHCenter);
-		header.setPatternBackgroundColor(Qt::yellow);
-		header.setBorderStyle(QXlsx::Format::BorderThin);
-		header.setBorderColor(Qt::black);
-		header.setFontBold(true);
-		for (int i = 0; i < columns; i++)
-		{
-			// Row 1: Names of columns
-			sData = rtsHeader.at(i).trimmed();
-			xlsx.write(1, i + 1, sData, header);
-			width[i] = sData.size();
-		}
-
-		QXlsx::Format data;
-		data.setHorizontalAlignment(QXlsx::Format::AlignRight);
-		for (int i = 0; i < count; i++)
-		{
-			for (int j = 0; j < columns; j++)
-			{
-				// Row 2 and next: the data
-				sData = ui->rtsTreeWidget->topLevelItem(i)->text(j).trimmed();
-				xlsx.write(i + 2, j + 1, sData, data);
-				int w = sData.size();
-				if (w > width[j])
-				{
-					width[j] = w;
-				}
-			}
-		}
-
-		for (int i = 0; i < columns; i++)
-		{
-			xlsx.setColumnWidth(i+1, width[i]+2);
-		}
-
-		delete[] width;
-		xlsx.saveAs(filePath);
-	}
+		saveTableAsXLSX(fileData.first, ui->rtsTreeWidget, rtsHeader, q_("Risings, Transits, and Settings"), ui->rtsCelestialBodyNameLabel->text());
 }
 
 void AstroCalcDialog::setLunarEclipseHeaderNames()
@@ -3170,142 +2914,20 @@ void AstroCalcDialog::selectCurrentLunarEclipseContact(const QModelIndex& modelI
 
 void AstroCalcDialog::saveLunarEclipses()
 {
-	QString filter = q_("Microsoft Excel Open XML Spreadsheet");
-	filter.append(" (*.xlsx);;");
-	filter.append(q_("CSV (Comma delimited)"));
-	filter.append(" (*.csv)");
-	QString defaultFilter("(*.xlsx)");
-	QString filePath = QFileDialog::getSaveFileName(Q_NULLPTR,
-							q_("Save calculated lunar eclipses as..."),
-							QDir::homePath() + "/lunareclipses.xlsx",
-							filter,
-							&defaultFilter);
-
-	if (defaultFilter.contains(".csv", Qt::CaseInsensitive))
-		saveTableAsCSV(filePath, ui->lunareclipseTreeWidget, lunareclipseHeader);
+	QPair<QString, QString> fileData = askTableFilePath(q_("Save calculated lunar eclipses as..."), "lunareclipses");
+	if (fileData.second.contains(".csv", Qt::CaseInsensitive))
+		saveTableAsCSV(fileData.first, ui->lunareclipseTreeWidget, lunareclipseHeader);
 	else
-	{
-		int count = ui->lunareclipseTreeWidget->topLevelItemCount();
-		int columns = lunareclipseHeader.size();
-		int *width = new int[static_cast<unsigned int>(columns)];
-		QString sData;
-
-		QXlsx::Document xlsx;
-		xlsx.setDocumentProperty("title", q_("Lunar Eclipses"));
-		xlsx.setDocumentProperty("creator", StelUtils::getApplicationName());
-		xlsx.addSheet("Lunar Eclipses", AbstractSheet::ST_WorkSheet);
-
-		QXlsx::Format header;
-		header.setHorizontalAlignment(QXlsx::Format::AlignHCenter);
-		header.setPatternBackgroundColor(Qt::yellow);
-		header.setBorderStyle(QXlsx::Format::BorderThin);
-		header.setBorderColor(Qt::black);
-		header.setFontBold(true);
-		for (int i = 0; i < columns; i++)
-		{
-			// Row 1: Names of columns
-			sData = lunareclipseHeader.at(i).trimmed();
-			xlsx.write(1, i + 1, sData, header);
-			width[i] = sData.size();
-		}
-
-		QXlsx::Format data;
-		data.setHorizontalAlignment(QXlsx::Format::AlignRight);
-		for (int i = 0; i < count; i++)
-		{
-			for (int j = 0; j < columns; j++)
-			{
-				// Row 2 and next: the data
-				sData = ui->lunareclipseTreeWidget->topLevelItem(i)->text(j).trimmed();
-				xlsx.write(i + 2, j + 1, sData, data);
-				int w = sData.size();
-				if (w > width[j])
-				{
-					width[j] = w;
-				}
-			}
-		}
-
-		xlsx.write(count+3, 1, q_("Note: Local circumstances for eclipses during thousands of years in the past and future are not reliable due to uncertainty in ΔT which is caused by fluctuations in Earth's rotation."));
-
-		for (int i = 0; i < columns; i++)
-		{
-			xlsx.setColumnWidth(i+1, width[i]+2);
-		}
-
-		delete[] width;
-		xlsx.saveAs(filePath);
-	}
+		saveTableAsXLSX(fileData.first, ui->lunareclipseTreeWidget, lunareclipseHeader, q_("Lunar Eclipses"), q_("Lunar Eclipses"), q_("Note: Local circumstances for eclipses during thousands of years in the past and future are not reliable due to uncertainty in ΔT which is caused by fluctuations in Earth's rotation."));
 }
 
 void AstroCalcDialog::saveLunarEclipseCircumstances()
 {
-	QString filter = q_("Microsoft Excel Open XML Spreadsheet");
-	filter.append(" (*.xlsx);;");
-	filter.append(q_("CSV (Comma delimited)"));
-	filter.append(" (*.csv)");
-	QString defaultFilter("(*.xlsx)");
-	QString filePath = QFileDialog::getSaveFileName(Q_NULLPTR,
-							q_("Save lunar eclipse circumstances as..."),
-							QDir::homePath() + "/lunareclipse-circumstances.xlsx",
-							filter,
-							&defaultFilter);
-
-	if (defaultFilter.contains(".csv", Qt::CaseInsensitive))
-		saveTableAsCSV(filePath, ui->lunareclipsecontactsTreeWidget, lunareclipsecontactsHeader);
+	QPair<QString, QString> fileData = askTableFilePath(q_("Save lunar eclipse circumstances as..."), "lunareclipse-circumstances");
+	if (fileData.second.contains(".csv", Qt::CaseInsensitive))
+		saveTableAsCSV(fileData.first, ui->lunareclipsecontactsTreeWidget, lunareclipsecontactsHeader);
 	else
-	{
-		int count = ui->lunareclipsecontactsTreeWidget->topLevelItemCount();
-		int columns = lunareclipsecontactsHeader.size();
-		int *width = new int[static_cast<unsigned int>(columns)];
-		QString sData;
-
-		QXlsx::Document xlsx;
-		xlsx.setDocumentProperty("title", q_("Circumstances of Lunar Eclipse"));
-		xlsx.setDocumentProperty("creator", StelUtils::getApplicationName());
-		xlsx.addSheet("Circumstances of Lunar Eclipse", AbstractSheet::ST_WorkSheet);
-
-		QXlsx::Format header;
-		header.setHorizontalAlignment(QXlsx::Format::AlignHCenter);
-		header.setPatternBackgroundColor(Qt::yellow);
-		header.setBorderStyle(QXlsx::Format::BorderThin);
-		header.setBorderColor(Qt::black);
-		header.setFontBold(true);
-		for (int i = 0; i < columns; i++)
-		{
-			// Row 1: Names of columns
-			sData = lunareclipsecontactsHeader.at(i).trimmed();
-			xlsx.write(1, i + 1, sData, header);
-			width[i] = sData.size();
-		}
-
-		QXlsx::Format data;
-		data.setHorizontalAlignment(QXlsx::Format::AlignRight);
-		for (int i = 0; i < count; i++)
-		{
-			for (int j = 0; j < columns; j++)
-			{
-				// Row 2 and next: the data
-				sData = ui->lunareclipsecontactsTreeWidget->topLevelItem(i)->text(j).trimmed();
-				xlsx.write(i + 2, j + 1, sData, data);
-				int w = sData.size();
-				if (w > width[j])
-				{
-					width[j] = w;
-				}
-			}
-		}
-
-		xlsx.write(count+3, 1, q_("Note: Local circumstances for eclipses during thousands of years in the past and future are not reliable due to uncertainty in ΔT which is caused by fluctuations in Earth's rotation."));
-
-		for (int i = 0; i < columns; i++)
-		{
-			xlsx.setColumnWidth(i+1, width[i]+2);
-		}
-
-		delete[] width;
-		xlsx.saveAs(filePath);
-	}
+		saveTableAsXLSX(fileData.first, ui->lunareclipsecontactsTreeWidget, lunareclipsecontactsHeader, q_("Circumstances of Lunar Eclipse"), q_("Circumstances of Lunar Eclipse"), q_("Note: Local circumstances for eclipses during thousands of years in the past and future are not reliable due to uncertainty in ΔT which is caused by fluctuations in Earth's rotation."));
 }
 
 void AstroCalcDialog::setSolarEclipseHeaderNames()
@@ -4322,142 +3944,20 @@ void AstroCalcDialog::selectCurrentSolarEclipseContact(const QModelIndex& modelI
 
 void AstroCalcDialog::saveSolarEclipses()
 {
-	QString filter = q_("Microsoft Excel Open XML Spreadsheet");
-	filter.append(" (*.xlsx);;");
-	filter.append(q_("CSV (Comma delimited)"));
-	filter.append(" (*.csv)");
-	QString defaultFilter("(*.xlsx)");
-	QString filePath = QFileDialog::getSaveFileName(Q_NULLPTR,
-							q_("Save calculated solar eclipses as..."),
-							QDir::homePath() + "/solareclipses.xlsx",
-							filter,
-							&defaultFilter);
-
-	if (defaultFilter.contains(".csv", Qt::CaseInsensitive))
-		saveTableAsCSV(filePath, ui->solareclipseTreeWidget, solareclipseHeader);
+	QPair<QString, QString> fileData = askTableFilePath(q_("Save calculated solar eclipses as..."), "solareclipses");
+	if (fileData.second.contains(".csv", Qt::CaseInsensitive))
+		saveTableAsCSV(fileData.first, ui->solareclipseTreeWidget, solareclipseHeader);
 	else
-	{
-		int count = ui->solareclipseTreeWidget->topLevelItemCount();
-		int columns = solareclipseHeader.size();
-		int *width = new int[static_cast<unsigned int>(columns)];
-		QString sData;
-
-		QXlsx::Document xlsx;
-		xlsx.setDocumentProperty("title", q_("Solar Eclipses"));
-		xlsx.setDocumentProperty("creator", StelUtils::getApplicationName());
-		xlsx.addSheet("Solar Eclipses", AbstractSheet::ST_WorkSheet);
-
-		QXlsx::Format header;
-		header.setHorizontalAlignment(QXlsx::Format::AlignHCenter);
-		header.setPatternBackgroundColor(Qt::yellow);
-		header.setBorderStyle(QXlsx::Format::BorderThin);
-		header.setBorderColor(Qt::black);
-		header.setFontBold(true);
-		for (int i = 0; i < columns; i++)
-		{
-			// Row 1: Names of columns
-			sData = solareclipseHeader.at(i).trimmed();
-			xlsx.write(1, i + 1, sData, header);
-			width[i] = sData.size();
-		}
-
-		QXlsx::Format data;
-		data.setHorizontalAlignment(QXlsx::Format::AlignRight);
-		for (int i = 0; i < count; i++)
-		{
-			for (int j = 0; j < columns; j++)
-			{
-				// Row 2 and next: the data
-				sData = ui->solareclipseTreeWidget->topLevelItem(i)->text(j).trimmed();
-				xlsx.write(i + 2, j + 1, sData, data);
-				int w = sData.size();
-				if (w > width[j])
-				{
-					width[j] = w;
-				}
-			}
-		}
-
-		xlsx.write(count+3, 1, q_("Note: Path of eclipses during thousands of years in the past and future are not reliable due to uncertainty in ΔT which is caused by fluctuations in Earth's rotation."));
-
-		for (int i = 0; i < columns; i++)
-		{
-			xlsx.setColumnWidth(i+1, width[i]+2);
-		}
-
-		delete[] width;
-		xlsx.saveAs(filePath);
-	}
+		saveTableAsXLSX(fileData.first, ui->solareclipseTreeWidget, solareclipseHeader, q_("Solar Eclipses"), q_("Solar Eclipses"), q_("Note: Path of eclipses during thousands of years in the past and future are not reliable due to uncertainty in ΔT which is caused by fluctuations in Earth's rotation."));
 }
 
 void AstroCalcDialog::saveSolarEclipseCircumstances()
 {
-	QString filter = q_("Microsoft Excel Open XML Spreadsheet");
-	filter.append(" (*.xlsx);;");
-	filter.append(q_("CSV (Comma delimited)"));
-	filter.append(" (*.csv)");
-	QString defaultFilter("(*.xlsx)");
-	QString filePath = QFileDialog::getSaveFileName(Q_NULLPTR,
-							q_("Save solar eclipse circumstances as..."),
-							QDir::homePath() + "/solareclipse-circumstances.xlsx",
-							filter,
-							&defaultFilter);
-
-	if (defaultFilter.contains(".csv", Qt::CaseInsensitive))
-		saveTableAsCSV(filePath, ui->solareclipsecontactsTreeWidget, solareclipsecontactsHeader);
+	QPair<QString, QString> fileData = askTableFilePath(q_("Save solar eclipse circumstances as..."), "solareclipse-circumstances");
+	if (fileData.second.contains(".csv", Qt::CaseInsensitive))
+		saveTableAsCSV(fileData.first, ui->solareclipsecontactsTreeWidget, solareclipsecontactsHeader);
 	else
-	{
-		int count = ui->solareclipsecontactsTreeWidget->topLevelItemCount();
-		int columns = solareclipsecontactsHeader.size();
-		int *width = new int[static_cast<unsigned int>(columns)];
-		QString sData;
-
-		QXlsx::Document xlsx;
-		xlsx.setDocumentProperty("title", q_("Circumstances of Solar Eclipse"));
-		xlsx.setDocumentProperty("creator", StelUtils::getApplicationName());
-		xlsx.addSheet("Circumstances of Solar Eclipse", AbstractSheet::ST_WorkSheet);
-
-		QXlsx::Format header;
-		header.setHorizontalAlignment(QXlsx::Format::AlignHCenter);
-		header.setPatternBackgroundColor(Qt::yellow);
-		header.setBorderStyle(QXlsx::Format::BorderThin);
-		header.setBorderColor(Qt::black);
-		header.setFontBold(true);
-		for (int i = 0; i < columns; i++)
-		{
-			// Row 1: Names of columns
-			sData = solareclipsecontactsHeader.at(i).trimmed();
-			xlsx.write(1, i + 1, sData, header);
-			width[i] = sData.size();
-		}
-
-		QXlsx::Format data;
-		data.setHorizontalAlignment(QXlsx::Format::AlignRight);
-		for (int i = 0; i < count; i++)
-		{
-			for (int j = 0; j < columns; j++)
-			{
-				// Row 2 and next: the data
-				sData = ui->solareclipsecontactsTreeWidget->topLevelItem(i)->text(j).trimmed();
-				xlsx.write(i + 2, j + 1, sData, data);
-				int w = sData.size();
-				if (w > width[j])
-				{
-					width[j] = w;
-				}
-			}
-		}
-
-		xlsx.write(count+3, 1, q_("Note: Path of eclipses during thousands of years in the past and future are not reliable due to uncertainty in ΔT which is caused by fluctuations in Earth's rotation."));
-		
-		for (int i = 0; i < columns-1; i++)
-		{
-			xlsx.setColumnWidth(i+1, width[i]+2);
-		}
-
-		delete[] width;
-		xlsx.saveAs(filePath);
-	}
+		saveTableAsXLSX(fileData.first, ui->solareclipsecontactsTreeWidget, solareclipsecontactsHeader, q_("Circumstances of Solar Eclipse"), q_("Circumstances of Solar Eclipse"), q_("Note: Path of eclipses during thousands of years in the past and future are not reliable due to uncertainty in ΔT which is caused by fluctuations in Earth's rotation."));
 }
 
 void AstroCalcDialog::selectCurrentSolarEclipseDate(const QModelIndex& modelIndex)
@@ -5496,72 +4996,11 @@ void AstroCalcDialog::selectCurrentSolarEclipseLocal(const QModelIndex& modelInd
 
 void AstroCalcDialog::saveSolarEclipsesLocal()
 {
-	QString filter = q_("Microsoft Excel Open XML Spreadsheet");
-	filter.append(" (*.xlsx);;");
-	filter.append(q_("CSV (Comma delimited)"));
-	filter.append(" (*.csv)");
-	QString defaultFilter("(*.xlsx)");
-	QString filePath = QFileDialog::getSaveFileName(Q_NULLPTR,
-							q_("Save calculated solar eclipses as..."),
-							QDir::homePath() + "/solareclipses-local.xlsx",
-							filter,
-							&defaultFilter);
-
-	if (defaultFilter.contains(".csv", Qt::CaseInsensitive))
-		saveTableAsCSV(filePath, ui->solareclipselocalTreeWidget, solareclipselocalHeader);
+	QPair<QString, QString> fileData = askTableFilePath(q_("Save calculated solar eclipses as..."), "solareclipses-local");
+	if (fileData.second.contains(".csv", Qt::CaseInsensitive))
+		saveTableAsCSV(fileData.first, ui->solareclipselocalTreeWidget, solareclipselocalHeader);
 	else
-	{
-		int count = ui->solareclipselocalTreeWidget->topLevelItemCount();
-		int columns = solareclipselocalHeader.size();
-		int *width = new int[static_cast<unsigned int>(columns)];
-		QString sData;
-
-		QXlsx::Document xlsx;
-		xlsx.setDocumentProperty("title", q_("Solar Eclipses"));
-		xlsx.setDocumentProperty("creator", StelUtils::getApplicationName());
-		xlsx.addSheet("Solar Eclipses", AbstractSheet::ST_WorkSheet);
-
-		QXlsx::Format header;
-		header.setHorizontalAlignment(QXlsx::Format::AlignHCenter);
-		header.setPatternBackgroundColor(Qt::yellow);
-		header.setBorderStyle(QXlsx::Format::BorderThin);
-		header.setBorderColor(Qt::black);
-		header.setFontBold(true);
-		for (int i = 0; i < columns; i++)
-		{
-			// Row 1: Names of columns
-			sData = solareclipselocalHeader.at(i).trimmed();
-			xlsx.write(1, i + 1, sData, header);
-			width[i] = sData.size();
-		}
-
-		QXlsx::Format data;
-		data.setHorizontalAlignment(QXlsx::Format::AlignRight);
-		for (int i = 0; i < count; i++)
-		{
-			for (int j = 0; j < columns; j++)
-			{
-				// Row 2 and next: the data
-				sData = ui->solareclipselocalTreeWidget->topLevelItem(i)->text(j).trimmed();
-				xlsx.write(i + 2, j + 1, sData, data);
-				int w = sData.size();
-				if (w > width[j])
-				{
-					width[j] = w;
-				}
-			}
-		}
-
-		xlsx.write(count+3, 1, q_("Note: Local circumstances for eclipses during thousands of years in the past and future are not reliable due to uncertainty in ΔT which is caused by fluctuations in Earth's rotation."));
-
-		for (int i = 0; i < columns; i++)
-		{
-			xlsx.setColumnWidth(i+1, width[i]+2);
-		}
-
-		delete[] width;
-		xlsx.saveAs(filePath);
-	}
+		saveTableAsXLSX(fileData.first, ui->solareclipselocalTreeWidget, solareclipselocalHeader, q_("Solar Eclipses"), q_("Solar Eclipses"), q_("Note: Local circumstances for eclipses during thousands of years in the past and future are not reliable due to uncertainty in ΔT which is caused by fluctuations in Earth's rotation."));
 }
 
 void AstroCalcDialog::setTransitHeaderNames()
@@ -6251,72 +5690,11 @@ void AstroCalcDialog::selectCurrentTransit(const QModelIndex& modelIndex)
 
 void AstroCalcDialog::saveTransits()
 {
-	QString filter = q_("Microsoft Excel Open XML Spreadsheet");
-	filter.append(" (*.xlsx);;");
-	filter.append(q_("CSV (Comma delimited)"));
-	filter.append(" (*.csv)");
-	QString defaultFilter("(*.xlsx)");
-	QString filePath = QFileDialog::getSaveFileName(Q_NULLPTR,
-							q_("Save calculated transits as..."),
-							QDir::homePath() + "/transits.xlsx",
-							filter,
-							&defaultFilter);
-
-	if (defaultFilter.contains(".csv", Qt::CaseInsensitive))
-		saveTableAsCSV(filePath, ui->transitTreeWidget, transitHeader);
+	QPair<QString, QString> fileData = askTableFilePath(q_("Save calculated transits as..."), "transits");
+	if (fileData.second.contains(".csv", Qt::CaseInsensitive))
+		saveTableAsCSV(fileData.first, ui->transitTreeWidget, transitHeader);
 	else
-	{
-		int count = ui->transitTreeWidget->topLevelItemCount();
-		int columns = transitHeader.size();
-		int *width = new int[static_cast<unsigned int>(columns)];
-		QString sData;
-
-		QXlsx::Document xlsx;
-		xlsx.setDocumentProperty("title", q_("Transits across the Sun"));
-		xlsx.setDocumentProperty("creator", StelUtils::getApplicationName());
-		xlsx.addSheet("Transits across the Sun", AbstractSheet::ST_WorkSheet);
-
-		QXlsx::Format header;
-		header.setHorizontalAlignment(QXlsx::Format::AlignHCenter);
-		header.setPatternBackgroundColor(Qt::yellow);
-		header.setBorderStyle(QXlsx::Format::BorderThin);
-		header.setBorderColor(Qt::black);
-		header.setFontBold(true);
-		for (int i = 0; i < columns; i++)
-		{
-			// Row 1: Names of columns
-			sData = transitHeader.at(i).trimmed();
-			xlsx.write(1, i + 1, sData, header);
-			width[i] = sData.size();
-		}
-
-		QXlsx::Format data;
-		data.setHorizontalAlignment(QXlsx::Format::AlignRight);
-		for (int i = 0; i < count; i++)
-		{
-			for (int j = 0; j < columns; j++)
-			{
-				// Row 2 and next: the data
-				sData = ui->transitTreeWidget->topLevelItem(i)->text(j).trimmed();
-				xlsx.write(i + 2, j + 1, sData, data);
-				int w = sData.size();
-				if (w > width[j])
-				{
-					width[j] = w;
-				}
-			}
-		}
-
-		xlsx.write(count+3, 1, q_("Notes: Time in parentheses means the contact is invisible at current location. Transit times during thousands of years in the past and future are not reliable due to uncertainty in ΔT which is caused by fluctuations in Earth's rotation."));
-
-		for (int i = 0; i < columns; i++)
-		{
-			xlsx.setColumnWidth(i+1, width[i]+2);
-		}
-
-		delete[] width;
-		xlsx.saveAs(filePath);
-	}
+		saveTableAsXLSX(fileData.first, ui->transitTreeWidget, transitHeader, q_("Transits across the Sun"), q_("Transits across the Sun"), q_("Notes: Time in parentheses means the contact is invisible at current location. Transit times during thousands of years in the past and future are not reliable due to uncertainty in ΔT which is caused by fluctuations in Earth's rotation."));
 }
 
 void AstroCalcDialog::populateCelestialBodyList()
@@ -7607,73 +6985,11 @@ void AstroCalcDialog::enablePhenomenaButtons(bool enable)
 
 void AstroCalcDialog::savePhenomena()
 {
-	QString filter = q_("Microsoft Excel Open XML Spreadsheet");
-	filter.append(" (*.xlsx);;");
-	filter.append(q_("CSV (Comma delimited)"));
-	filter.append(" (*.csv)");
-	QString defaultFilter("(*.xlsx)");
-	QString filePath = QFileDialog::getSaveFileName(Q_NULLPTR,
-							q_("Save calculated phenomena as..."),
-							QDir::homePath() + "/phenomena.xlsx",
-							filter,
-							&defaultFilter);
-
-	if (defaultFilter.contains(".csv", Qt::CaseInsensitive))
-		saveTableAsCSV(filePath, ui->phenomenaTreeWidget, phenomenaHeader);
+	QPair<QString, QString> fileData = askTableFilePath(q_("Save calculated phenomena as..."), "phenomena");
+	if (fileData.second.contains(".csv", Qt::CaseInsensitive))
+		saveTableAsCSV(fileData.first, ui->phenomenaTreeWidget, phenomenaHeader);
 	else
-	{
-		int count = ui->phenomenaTreeWidget->topLevelItemCount();
-		int columns = phenomenaHeader.size();
-
-		int *width;
-		width = new int[columns];
-		QString sData;
-		int w;
-
-		QXlsx::Document xlsx;
-		xlsx.setDocumentProperty("title", q_("Phenomena"));
-		xlsx.setDocumentProperty("creator", StelUtils::getApplicationName());
-		xlsx.addSheet(q_("Phenomena"), AbstractSheet::ST_WorkSheet);
-
-		QXlsx::Format header;
-		header.setHorizontalAlignment(QXlsx::Format::AlignHCenter);
-		header.setPatternBackgroundColor(Qt::yellow);
-		header.setBorderStyle(QXlsx::Format::BorderThin);
-		header.setBorderColor(Qt::black);
-		header.setFontBold(true);
-		for (int i = 0; i < columns; i++)
-		{
-			// Row 1: Names of columns
-			sData = phenomenaHeader.at(i).trimmed();
-			xlsx.write(1, i + 1, sData, header);
-			width[i] = sData.size();
-		}
-
-		QXlsx::Format data;
-		data.setHorizontalAlignment(QXlsx::Format::AlignRight);
-		for (int i = 0; i < count; i++)
-		{
-			for (int j = 0; j < columns; j++)
-			{
-				// Row 2 and next: the data
-				sData = ui->phenomenaTreeWidget->topLevelItem(i)->text(j).trimmed();
-				xlsx.write(i + 2, j + 1, sData, data);
-				w = sData.size();
-				if (w > width[j])
-				{
-					width[j] = w;
-				}
-			}
-		}
-
-		for (int i = 0; i < columns; i++)
-		{
-			xlsx.setColumnWidth(i+1, width[i]+2);
-		}
-
-		delete[] width;
-		xlsx.saveAs(filePath);
-	}
+		saveTableAsXLSX(fileData.first, ui->phenomenaTreeWidget, phenomenaHeader, q_("Phenomena"), q_("Phenomena"));
 }
 
 void AstroCalcDialog::fillPhenomenaTableVis(QString phenomenType, double JD, QString firstObjectName, float firstObjectMagnitude,
@@ -9868,80 +9184,13 @@ void AstroCalcDialog::selectWutObject(const QModelIndex &index)
 
 void AstroCalcDialog::saveWutObjects()
 {
-	QString filter = q_("Microsoft Excel Open XML Spreadsheet");
-	filter.append(" (*.xlsx);;");
-	filter.append(q_("CSV (Comma delimited)"));
-	filter.append(" (*.csv)");
-	// filter.append(q_("JSON (Stellarium bookmarks)"));
-	// filter.append(" (*.json)");
-	QString defaultFilter("(*.xlsx)");
-	QString filePath = QFileDialog::getSaveFileName(Q_NULLPTR,
-							q_("Save list of objects as..."),
-							QDir::homePath() + "/wut-objects.xlsx",
-							filter,
-							&defaultFilter);
-
-	if (defaultFilter.contains(".csv", Qt::CaseInsensitive))
-		saveTableAsCSV(filePath, ui->wutMatchingObjectsTreeWidget, wutHeader);
-	else if (defaultFilter.contains(".json", Qt::CaseInsensitive))
-		saveTableAsBookmarks(filePath, ui->wutMatchingObjectsTreeWidget);
+	QPair<QString, QString> fileData = askTableFilePath(q_("Save list of objects as..."), "wut-objects");
+	if (fileData.second.contains(".csv", Qt::CaseInsensitive))
+		saveTableAsCSV(fileData.first, ui->wutMatchingObjectsTreeWidget, wutHeader);
+	else if (fileData.second.contains(".json", Qt::CaseInsensitive))
+		saveTableAsBookmarks(fileData.first, ui->wutMatchingObjectsTreeWidget);
 	else
-	{
-		int count = ui->wutMatchingObjectsTreeWidget->topLevelItemCount();
-		int columns = wutHeader.size();
-
-		int *width;
-		width = new int[static_cast<unsigned int>(columns)];
-		QString sData;
-		int w;
-
-		QXlsx::Document xlsx;
-		xlsx.setDocumentProperty("title", q_("What's Up Tonight"));
-		xlsx.setDocumentProperty("creator", StelUtils::getApplicationName());
-		if (ui->wutCategoryListWidget->currentRow()>0) // Fixed crash when category of objects is not selected
-			xlsx.addSheet(ui->wutCategoryListWidget->currentItem()->text(), AbstractSheet::ST_WorkSheet);
-
-		QXlsx::Format header;
-		header.setHorizontalAlignment(QXlsx::Format::AlignHCenter);
-		header.setPatternBackgroundColor(Qt::yellow);
-		header.setBorderStyle(QXlsx::Format::BorderThin);
-		header.setBorderColor(Qt::black);
-		header.setFontBold(true);
-		for (int i = 0; i < columns; i++)
-		{
-			// Row 1: Names of columns
-			sData = wutHeader.at(i).trimmed();
-			xlsx.write(1, i + 1, sData, header);
-			width[i] = sData.size();
-		}
-
-		QXlsx::Format data;
-		data.setHorizontalAlignment(QXlsx::Format::AlignRight);
-		QXlsx::Format left;
-		left.setHorizontalAlignment(QXlsx::Format::AlignLeft);
-		for (int i = 0; i < count; i++)
-		{
-			for (int j = 0; j < columns; j++)
-			{
-				// Row 2 and next: the data
-				sData = ui->wutMatchingObjectsTreeWidget->topLevelItem(i)->text(j).trimmed();
-				xlsx.write(i + 2, j + 1, sData, j==0 ? left : data);
-				w = sData.size();
-				if (w > width[j])
-				{
-					width[j] = w;
-				}
-			}
-		}
-
-		for (int i = 0; i < columns; i++)
-		{
-			xlsx.setColumnWidth(i+1, width[i]+2);
-		}
-
-		delete[] width;
-		xlsx.saveAs(filePath);
-	}
+		saveTableAsXLSX(fileData.first, ui->wutMatchingObjectsTreeWidget, wutHeader, q_("What's Up Tonight"), ui->wutCategoryListWidget->currentItem()->text());
 }
 
 void AstroCalcDialog::saveFirstCelestialBody(int index)
@@ -10300,6 +9549,95 @@ void AstroCalcDialog::saveTableAsCSV(const QString &fileName, QTreeWidget* tWidg
 	table.close();
 }
 
+void AstroCalcDialog::saveTableAsXLSX(const QString& fileName, QTreeWidget* tWidget, QStringList& headers, const QString &title, const QString &sheetName, const QString &note)
+{
+#ifdef ENABLE_XLSX
+	int count = tWidget->topLevelItemCount();
+	int columns = headers.size();
+	int *width = new int[static_cast<unsigned int>(columns)];
+	QString sData;
+
+	QXlsx::Document xlsx;
+	xlsx.setDocumentProperty("title", title);
+	xlsx.setDocumentProperty("creator", StelUtils::getApplicationName());
+	xlsx.addSheet(sheetName, AbstractSheet::ST_WorkSheet);
+
+	QXlsx::Format header;
+	header.setHorizontalAlignment(QXlsx::Format::AlignHCenter);
+	header.setPatternBackgroundColor(Qt::yellow);
+	header.setBorderStyle(QXlsx::Format::BorderThin);
+	header.setBorderColor(Qt::black);
+	header.setFontBold(true);
+	for (int i = 0; i < columns; i++)
+	{
+		// Row 1: Names of columns
+		sData = headers.at(i).trimmed();
+		xlsx.write(1, i + 1, sData, header);
+		width[i] = sData.size();
+	}
+
+	QXlsx::Format data;
+	data.setHorizontalAlignment(QXlsx::Format::AlignRight);
+	for (int i = 0; i < count; i++)
+	{
+		for (int j = 0; j < columns; j++)
+		{
+			// Row 2 and next: the data
+			sData = tWidget->topLevelItem(i)->text(j).trimmed();
+			xlsx.write(i + 2, j + 1, sData, data);
+			int w = sData.size();
+			if (w > width[j])
+			{
+				width[j] = w;
+			}
+		}
+	}
+
+	for (int i = 0; i < columns; i++)
+	{
+		xlsx.setColumnWidth(i+1, width[i]+2);
+	}
+
+	delete[] width;
+
+	if (!note.isEmpty())
+	{
+		// Add the important note
+		xlsx.write(count + 2, 1, note);
+		QXlsx::CellRange range = CellRange(count+2, 1, count+2, columns);
+		QXlsx::Format extraData;
+		extraData.setBorderStyle(QXlsx::Format::BorderThin);
+		extraData.setBorderColor(Qt::black);
+		extraData.setPatternBackgroundColor(Qt::yellow);
+		extraData.setHorizontalAlignment(QXlsx::Format::AlignLeft);
+		xlsx.mergeCells(range, extraData);
+	}
+
+	xlsx.saveAs(fileName);
+#endif
+}
+
+QPair<QString, QString> AstroCalcDialog::askTableFilePath(const QString &caption, const QString& fileName)
+{
+	QString csv  = QString("%1 (*.csv)").arg(q_("CSV (Comma delimited)"));
+	QString xlsx = QString("%1 (*.xlsx)").arg(q_("Microsoft Excel Open XML Spreadsheet"));
+	QString filter, defaultExtension;
+
+	#ifdef ENABLE_XLSX
+	defaultExtension = "xlsx";
+	filter = QString("%1;;%2").arg(xlsx, csv);
+	#else
+	defaultExtension = "csv";
+	filter = csv;
+	#endif
+
+	QString dir  = QString("%1/%2.%3").arg(QDir::homePath(), fileName, defaultExtension);
+	QString defaultFilter = QString("(*.%1)").arg(defaultExtension);
+	QString filePath = QFileDialog::getSaveFileName(Q_NULLPTR, caption, dir, filter, &defaultFilter);
+
+	return QPair<QString, QString>(filePath, defaultFilter);
+}
+
 void AstroCalcDialog::saveTableAsBookmarks(const QString &fileName, QTreeWidget* tWidget)
 {
 	const int count = tWidget->topLevelItemCount();
diff --git a/src/gui/AstroCalcDialog.hpp b/src/gui/AstroCalcDialog.hpp
index 03615239a49..c67a24d095a 100644
--- a/src/gui/AstroCalcDialog.hpp
+++ b/src/gui/AstroCalcDialog.hpp
@@ -467,7 +467,9 @@ private slots:
 	QList<HECPosition> hecObjects;
 
 	void saveTableAsCSV(const QString& fileName, QTreeWidget* tWidget, QStringList& headers);
+	void saveTableAsXLSX(const QString& fileName, QTreeWidget* tWidget, QStringList& headers, const QString& title, const QString& sheetName, const QString &note = "");
 	void saveTableAsBookmarks(const QString& fileName, QTreeWidget* tWidget);
+	QPair<QString, QString> askTableFilePath(const QString& caption, const QString& fileName);
 
 	void populateToolTips();
 	//! Get the list of selected dwarf and minor planets
