From 3966d0fc28bbbb904da9025660a55bc0c8ff2d62 Mon Sep 17 00:00:00 2001
From: "Alexander V. Wolf" <alex.v.wolf@gmail.com>
Date: Tue, 28 Sep 2021 17:08:11 +0700
Subject: [PATCH] Update BUILDIND.md file (fix #1927)

---
 BUILDING.md | 28 ++++++++++++++--------------
 1 file changed, 14 insertions(+), 14 deletions(-)

diff --git a/BUILDING.md b/BUILDING.md
index 077f15531ed..5b8ab62f271 100644
--- a/BUILDING.md
+++ b/BUILDING.md
@@ -41,7 +41,7 @@ your distribution. Here's a list.
 
 - A C++ compiler able to compile C++11 code ([GCC](https://gcc.gnu.org/) 4.8.1 or later, Clang 3.3 or later, MSVC 2015 or later)
 - [CMake](http://www.cmake.org/) 2.8.12 or later - buildsystem used by many open source projects
-- [Qt Framework](http://www.qt.io/) 5.7.0 or later
+- [Qt Framework](http://www.qt.io/) 5.9.0 or later
 - [OpenGL](https://www.opengl.org/) - graphics library
 - [Zlib](http://www.zlib.net) - compression library
 
@@ -79,19 +79,19 @@ sudo yum install cmake gcc graphviz doxygen gettext git \
 
 Stellarium tracks the recent Qt releases fairly closely and as such many Linux distribution repositories do not contain an up-to-date enough version for building Stellarium. In the case of Ubuntu, the ''backports'' repository is often good enough, but there may be a need to install it "outside" your package manager. Here's how.
 
-The Qt development team provides binary installers. If you want to build Qt yourself from source, this is fine but it will take a ''long'' time. We recommend the following procedure for manually installing the latest Qt (required: 5.7 or above at the moment):
+The Qt development team provides binary installers. If you want to build Qt yourself from source, this is fine but it will take a ''long'' time. We recommend the following procedure for manually installing the latest Qt (required: 5.9 or above at the moment):
 - Download the Linux/X11 package from [Qt Company](http://www.qt.io/download-open-source/). Choose 32/64 bit as appropriate.
 - Install it to `/opt/Qt5`
 - When you want to build Stellarium, execute these commands to set up the environment so that the new Qt is used (for 64-bit package):
 ```
-export QTDIR=/opt/Qt5/5.12.2/gcc_64
+export QTDIR=/opt/Qt5/5.12.11/gcc_64
 export PATH=$QTDIR/bin:$PATH
 export LD_LIBRARY_PATH=$QTDIR/lib:$LD_LIBRARY_PATH
 ```
 - After installation, you should write a script which sets `LD_LIBRARY_PATH` and then calls Stellarium:
 ```
 #!/bin/sh
-export QTDIR=/opt/Qt5/5.12.2/gcc_64
+export QTDIR=/opt/Qt5/5.12.11/gcc_64
 export LD_LIBRARY_PATH=$QTDIR/lib:$LD_LIBRARY_PATH
 ./stellarium
 ```
@@ -135,20 +135,20 @@ $ brew install qt
 export PATH=/usr/local/opt/qt/bin:$PATH
 ```
 
-You may using the distribution from the Qt Company to install the [latest stable version](https://www.qt.io/download-qt-installer) of Qt. In this case adding Qt to your PATH environment variable will to adding to your `.bash_profile` file the following line (for example we installed Qt 5.12.2):
+You may using the distribution from the Qt Company to install the [latest stable version](https://www.qt.io/download-qt-installer) of Qt. In this case adding Qt to your PATH environment variable will to adding to your `.bash_profile` file the following line (for example we installed Qt 5.12.11):
 ```
 export PATH=~/Qt/5.12/clang_64/bin:$PATH
 ```
 
 #### Windows
 
-- Install the [Microsoft Visual Studio Community 2017](https://visualstudio.microsoft.com/thank-you-downloading-visual-studio/?sku=Community&rel=15) or [Microsoft Visual Studio Community 2019](https://visualstudio.microsoft.com/downloads/) (or "better" - e.g. Professional) from Microsoft Website. Qt5.15 requires MSVC2019.
+- Install the [Microsoft Visual Studio Community 2017](https://visualstudio.microsoft.com/thank-you-downloading-visual-studio/?sku=Community&rel=15) or [Microsoft Visual Studio Community 2019](https://visualstudio.microsoft.com/downloads/) (or "better" - e.g. Professional) from Microsoft Website. Qt 5.15 requires MSVC2019.
 - To get the source code of Stellarium you need to install some git environment. [Git for Windows](https://git-scm.com/download/win) seems ok, or the Git Bash and Git GUI, whatever seems suitable for you. But it is not necessary.
-- Get the [latest version of Qt from Qt Company](http://www.qt.io/download-open-source/). We recommend to use Qt 5.9 or later.  You must select Qt Script and msvc2017/msvc2019 among so many checkboxes.
+- Get the [latest version of Qt from Qt Company](http://www.qt.io/download-open-source/). We recommend to use Qt 5.12 or later.  You must select Qt Script and msvc2017/msvc2019 among so many checkboxes.
 
 After installing all required libraries and tools you should configure the build environment.
 
-Add `C:\Qt\Qt5.15.2` to your `PATH` variable - you should add string `C:\Qt\Qt5.15.2\msvc2019;C:\Qt\Qt5.15.2\msvc2019\bin` for 32-bit or `C:\Qt\Qt5.15.2\msvc2019_64;C:\Qt\Qt5.15.2\msvc2019_64\bin` for 64-bit to `PATH` variable.
+Add `C:\Qt\Qt5.15.11` to your `PATH` variable - you should add string `C:\Qt\Qt5.15.11\msvc2019;C:\Qt\Qt5.15.11\msvc2019\bin` for 32-bit or `C:\Qt\Qt5.15.11\msvc2019_64;C:\Qt\Qt5.15.11\msvc2019_64\bin` for 64-bit to `PATH` variable.
 (Replace the version numbers of Qt and the version of Visual Studio (2017/2019) with the version that you have installed)
 
 **Known limitations with Qt 5.15.x:**
@@ -159,9 +159,9 @@ Add `C:\Qt\Qt5.15.2` to your `PATH` variable - you should add string `C:\Qt\Qt5.
 
 #### Windows (static)
 
-You can build a static version using MSVC-static kit (for example we installed Qt 5.15.2 with MSVC2019):
+You can build a static version using MSVC-static kit (for example we installed Qt 5.15.11 with MSVC2019):
 
-To prepare a static kit, prepare src package of Qt 5.15.2, and configure compilation tool (Python, Ruby, Perl and Visual Studio 2019). Enter src folder:
+To prepare a static kit, prepare src package of Qt 5.15.11, and configure compilation tool (Python, Ruby, Perl and Visual Studio 2019). Enter src folder:
 
 ```
 configure.bat -static -prefix "D:\Qt\msvc2019_static" -confirm-license -opensource  -debug-and-release -platform win32-msvc  -nomake examples -nomake tests  -plugin-sql-sqlite -plugin-sql-odbc -qt-zlib -qt-libpng -qt-libjpeg -opengl desktop -mp
@@ -169,7 +169,7 @@ nmake
 nmake install
 ```
 
-When finishing compilation, configure kit in Qt Creator. Clone Kit "Desktop Qt5.15.2 MSVC" to "Desktop Qt5.15.2 MSVC(static)". Then configure CMake Generator with NMake Makefiles JOM + Extra generator: CodeBlocks.
+When finishing compilation, configure kit in Qt Creator. Clone Kit "Desktop Qt 5.15.11 MSVC" to "Desktop Qt 5.15.11 MSVC (static)". Then configure CMake Generator with NMake Makefiles JOM + Extra generator: CodeBlocks.
 
 Finally, just open CMakeLists.txt in Qt Creator and build it with MSVC-static kit.
 
@@ -189,9 +189,9 @@ https://github.com/Stellarium/stellarium/releases
 Do this command in a terminal (if you prefer, you might use arK or some other graphical archive tool): 
 
 ```
-$ tar zxf stellarium-0.20.2.tar.gz
+$ tar zxf stellarium-0.21.2.tar.gz
 ```
-You should now have a directory `stellarium-0.20.2` with the source code in it.
+You should now have a directory `stellarium-0.21.2` with the source code in it.
 
 
 ### Clone project from GitHub
@@ -221,7 +221,7 @@ You can [download](https://github.com/Stellarium/stellarium/archive/master.zip)
 
 #### Windows specifics
 
-On Windows save the file (`master.zip` or `stellarium-0.20.2.tar.gz`) to the `C:/Devel` directory as example. You will need 
+On Windows save the file (`master.zip` or `stellarium-0.21.2.tar.gz`) to the `C:/Devel` directory as example. You will need 
 a decompression program installed in Windows, for example [7-Zip](http://www.7-zip.org/). 
 The root of the source tree will be `C:/Devel/stellarium` for simplicity.
 
