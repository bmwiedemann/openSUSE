From 834defc8e38c4495ed51bb549d86727dd8b812b3 Mon Sep 17 00:00:00 2001
From: Alexander Graul <agraul@suse.com>
Date: Tue, 18 Jan 2022 17:10:37 +0100
Subject: [PATCH] Include aliases in the fqdns grains

Add UT for "is_fqdn"

Add "is_fqdn" check to the network utils

Bugfix: include FQDNs aliases

Deprecate UnitTest assertion in favour of built-in assert keyword

Add UT for fqdns aliases

Leverage cached interfaces, if any.

Implement network.fqdns module function (bsc#1134860) (#172)

* Duplicate fqdns logic in module.network
* Move _get_interfaces to utils.network
* Reuse network.fqdns in grains.core.fqdns
* Return empty list when fqdns grains is disabled

Co-authored-by: Eric Siebigteroth <eric.siebigteroth@suse.de>
---
 salt/modules/network.py          |  5 ++++-
 salt/utils/network.py            | 16 ++++++++++++++
 tests/unit/utils/test_network.py | 37 ++++++++++++++++++++++++++++++++
 3 files changed, 57 insertions(+), 1 deletion(-)

diff --git a/salt/modules/network.py b/salt/modules/network.py
index 08c20b99f9..53ebfe4bc7 100644
--- a/salt/modules/network.py
+++ b/salt/modules/network.py
@@ -2089,7 +2089,10 @@ def fqdns():
 
     def _lookup_fqdn(ip):
         try:
-            return [socket.getfqdn(socket.gethostbyaddr(ip)[0])]
+            name, aliaslist, addresslist = socket.gethostbyaddr(ip)
+            return [socket.getfqdn(name)] + [
+                als for als in aliaslist if salt.utils.network.is_fqdn(als)
+            ]
         except socket.herror as err:
             if err.errno in (0, HOST_NOT_FOUND, NO_DATA):
                 # No FQDN for this IP address, so we don't need to know this all the time.
diff --git a/salt/utils/network.py b/salt/utils/network.py
index 22075066fd..8867041e0e 100644
--- a/salt/utils/network.py
+++ b/salt/utils/network.py
@@ -2302,3 +2302,19 @@ def filter_by_networks(values, networks):
             raise ValueError("Do not know how to filter a {}".format(type(values)))
     else:
         return values
+
+
+def is_fqdn(hostname):
+    """
+    Verify if hostname conforms to be a FQDN.
+
+    :param hostname: text string with the name of the host
+    :return: bool, True if hostname is correct FQDN, False otherwise
+    """
+
+    compliant = re.compile(r"(?!-)[A-Z\d\-\_]{1,63}(?<!-)$", re.IGNORECASE)
+    return (
+        "." in hostname
+        and len(hostname) < 0xFF
+        and all(compliant.match(x) for x in hostname.rstrip(".").split("."))
+    )
diff --git a/tests/unit/utils/test_network.py b/tests/unit/utils/test_network.py
index 6863ccd0c9..637d5e9811 100644
--- a/tests/unit/utils/test_network.py
+++ b/tests/unit/utils/test_network.py
@@ -1273,3 +1273,40 @@ class NetworkTestCase(TestCase):
             ),
         ):
             self.assertEqual(network.get_fqhostname(), host)
+
+    def test_netlink_tool_remote_on(self):
+        with patch("subprocess.check_output", return_value=NETLINK_SS):
+            remotes = network._netlink_tool_remote_on("4505", "remote")
+            self.assertEqual(remotes, {"127.0.0.1", "::ffff:1.2.3.4"})
+
+    def test_is_fqdn(self):
+        """
+        Test is_fqdn function passes possible FQDN names.
+
+        :return: None
+        """
+        for fqdn in [
+            "host.domain.com",
+            "something.with.the.dots.still.ok",
+            "UPPERCASE.ALSO.SHOULD.WORK",
+            "MiXeD.CaSe.AcCePtAbLe",
+            "123.host.com",
+            "host123.com",
+            "some_underscore.com",
+            "host-here.com",
+        ]:
+            assert network.is_fqdn(fqdn)
+
+    def test_is_not_fqdn(self):
+        """
+        Test is_fqdn function rejects FQDN names.
+
+        :return: None
+        """
+        for fqdn in [
+            "hostname",
+            "/some/path",
+            "$variable.here",
+            "verylonghostname.{}".format("domain" * 45),
+        ]:
+            assert not network.is_fqdn(fqdn)
-- 
2.34.1


