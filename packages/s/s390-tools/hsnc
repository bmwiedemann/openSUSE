#! /bin/sh
# Copyright (c) 2003 SUSE LINUX AG Nuernberg, Germany.
#
# Please send feedback to http://www.suse.de/feedback/
#
# /etc/init.d/hsnc
#
#   and symbolic its link
#
# /usr/sbin/ip_watcher.pl
# /usr/sbin/xcec-bridge
# /usr/sbin/start_hsnc.sh
# /use/sbin/rchsnc
#
# System startup script for the HiperSockets Network Concentrator
#
# /etc/hsnc.conf should contain the following lines:
#
# operating_mode=[unicast|full|no]
#   unicast means, only unicast forwarded between the hsint's and osaint's.
#       this is the default mode
#   full means, unicast, multicast and broadcast are forwarded, if supported
#       by the hardware
#
# hsi_int="<interface> [<interface> [...]]"
#   described all the HiperSockets interfaces involved in the HSN
#
# osa_int="<interface>"
#   describes the OSA interface connecting to other LANs
#


START_HSNC_BIN=/usr/sbin/start_hsnc.sh
IP_WATCHER_BIN=/usr/sbin/ip_watcher.pl
XCEC_BRIDGE_BIN=/usr/sbin/xcec-bridge

HSNC_CONFIG_FILE=/etc/sysconfig/hsnc
HSNC_CLEANUP_FILE=/var/run/hsnc.cleanup

test -x $START_HSNC_BIN || exit 5
test -x $IP_WATCHER_BIN || exit 5
test -x $XCEC_BRIDGE_BIN || exit 5

# Return values acc. to LSB for all commands but status:
# 0 - success
# 1 - generic or unspecified error
# 2 - invalid or excess argument(s)
# 3 - unimplemented feature (e.g. "reload")
# 4 - insufficient privilege
# 5 - program is not installed
# 6 - program is not configured
# 7 - program is not running
# 
# Note that starting an already running service, stopping
# or restarting a not-running service as well as the restart
# with force-reload (in case signalling is not supported) are
# considered a success.

#call with cleanup or not
read_config_file() {
	if [ "$1" == "cleanup" ]; then
		file=$HSNC_CLEANUP_FILE
	else
		file=$HSNC_CONFIG_FILE
	fi

	if [ -s $file ]; then
		source $file
	else
		echo -ne "\nCannot read $file: empty or nonexistant! "
		# Means not configured:
		exit 3
	fi
}

#call with cleanup or not
set_osa_mode() {
# for full mode, we set up the osa as multicast router. otherwise, no
# special setup is required for the osa.
	if [ "$operating_mode" == "full" ]; then
		if [ "$1" == "cleanup" ]; then
			echo no_router > /sys/class/net/$osa_int/device/route4
		else
			echo multicast_router > /sys/class/net/$osa_int/device/route4
		fi
	fi
}

#call with cleanup or not
set_hsi_mode() {
# set all the involved HiperSockets interfaces as primary_connector. For
# special HA setups, some more tweaking is needed, but then a handcarved
# solution should be used anyway.
	for i in $hsi_int ; do
		if [ "$1" == "cleanup" ]; then
			echo no_router > /sys/class/net/$i/device/route4
		else
			echo primary_connector > /sys/class/net/$i/device/route4
		fi
	done
}

do_start_hsnc() {
	set_osa_mode
	set_hsi_mode
	if  [ "$operating_mode" == "full" ]; then
		$IP_WATCHER_BIN --check
	else
		$IP_WATCHER_BIN --check $osa_int
	fi
	CODE=$?
	if [ $CODE != 0 ]; then
		return $CODE
	else
		cp $HSNC_CONFIG_FILE $HSNC_CLEANUP_FILE
		#
		# To match the LSB spec, startproc returns 0,
		# even if the program it already running.
		#
		if [ "$operating_mode" == "full" ]; then
			startproc $START_HSNC_BIN
		else
			startproc $START_HSNC_BIN $osa_int
		fi
		return $?
	fi
}

service="HiperSockets Network concentrator"
case "$1" in
    start)
	if checkproc $START_HSNC_BIN; then
		# Starting an already running service is success:
		echo -n "(already running)"
	else
		if read_config_file; then
			do_start_hsnc
			RETVAL=$?
			exit $RETVAL
		fi
	fi

	;;
    stop)
	echo -n "Shutting down $service "

	# kill ip_watcher, start_hsnc, which started it needs cleans up
	# then:
	killproc -TERM $IP_WATCHER_BIN
	if [ -f $HSNC_CLEANUP_FILE ]; then
		read_config_file cleanup
		# remove all connector settings(not yet implemented):
		set_osa_mode cleanup
		set_hsi_mode cleanup

		# remove the file in /var/run
		rm -f $HSNC_CLEANUP_FILE
	else
		echo -n "- no cleanup file found "
	fi

	;;
    status)
	echo -n "Checking $service "
	## Check status with checkproc(8), if process is running
	## checkproc will return with exit status 0.

	# Status has a slightly different for the status command:
	# 0 - service running
	# 1 - service dead, but /var/run/  pid  file exists
	# 2 - service dead, but /var/lock/ lock file exists
	# 3 - service not running

	# NOTE: checkproc returns LSB compliant status values.
	checkproc $START_HSNC_BIN
	;;
    *)
	exit 1
	;;
esac

