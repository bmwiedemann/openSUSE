Subject: [PATCH] [FEAT VS1804] zipl: refactor all EBCDIC code into separate files
From: Marc Hartmayer <mhartmay@linux.ibm.com>

Summary:     genprotimg: Introduce new tool for the creation of PV images
Description: genprotimg takes a kernel, host-key documents, optionally an
             initrd, optionally a file with the kernel command line, and it
             generates a single, loadable image file. The image consists of a
             concatenation of a plain text boot loader, the encrypted
             components for kernel, initrd, and cmdline, and the
             integrity-protected PV header, containing metadata necessary for
             running the guest in PV mode. It's possible to use this image file
             as a kernel for zIPL or for a direct kernel boot using QEMU.
Upstream-ID: a37170b8bec07a0ffc3270a4c78124e1117f0337
Problem-ID:  VS1804

Upstream-Description:

             zipl: refactor all EBCDIC code into separate files

             This allows the reuse of the code later in sclp.c. While at it, also
             declare @source parameter of `ebcdic_to_ascii` function as `const` and
             rename all `ebc_` function name prefixes into `ebcdic_`. Move
             conversion tables to separate file so it only gets linked into loaders
             that need it.

             Reviewed-by: Philipp Rudo <prudo@linux.ibm.com>
             Reviewed-by: Stefan Haberland <sth@linux.ibm.com>
             Signed-off-by: Marc Hartmayer <mhartmay@linux.ibm.com>
             Signed-off-by: Jan Höppner <hoeppner@linux.ibm.com>


Signed-off-by: Marc Hartmayer <mhartmay@linux.ibm.com>
---
 zipl/boot/Makefile      |   16 ++--
 zipl/boot/ebcdic.c      |   30 ++++++++
 zipl/boot/ebcdic.h      |   45 ++++++++++++
 zipl/boot/ebcdic_conv.c |  167 ++++++++++++++++++++++++++++++++++++++++++++++++
 zipl/boot/ebcdic_conv.h |   21 ++++++
 zipl/boot/libc.c        |   19 -----
 zipl/boot/libc.h        |   25 -------
 zipl/boot/menu.c        |    9 +-
 zipl/boot/stage3.c      |  156 --------------------------------------------
 9 files changed, 280 insertions(+), 208 deletions(-)

--- a/zipl/boot/Makefile
+++ b/zipl/boot/Makefile
@@ -28,22 +28,22 @@ all: data.o data.h tape0.bin stage3.bin
 
 eckd2dump_sv.exec: \
 	head.o stage2dump.o cio.o eckd2dump.o eckd2dump_sv.o \
-	libc.o sclp.o entry.o
+	libc.o ebcdic.o sclp.o entry.o
 eckd2dump_mv.exec: \
 	head.o stage2dump.o cio.o eckd2dump.o eckd2dump_mv.o \
-	libc.o sclp.o entry.o
+	libc.o ebcdic.o sclp.o entry.o
 fba2dump.exec: \
 	head.o stage2dump.o cio.o fba2dump.o \
-	libc.o sclp.o entry.o
+	libc.o ebcdic.o sclp.o entry.o
 tape2dump.exec: \
 	head.o stage2dump.o cio.o tape2dump.o \
-	libc.o sclp.o entry.o
-eckd2.exec: head.o stage2.o cio.o eckd2.o libc.o menu.o sclp.o \
+	libc.o ebcdic.o sclp.o entry.o
+eckd2.exec: head.o stage2.o cio.o eckd2.o libc.o ebcdic.o menu.o sclp.o \
 	    kdump2.o kdump.o entry.o
-fba2.exec: head.o stage2.o cio.o fba2.o libc.o menu.o sclp.o \
+fba2.exec: head.o stage2.o cio.o fba2.o libc.o ebcdic.o menu.o sclp.o \
 	   kdump2.o kdump.o entry.o
-stage3.exec: head.o stage3.o kdump3.o libc.o sclp.o sclp_stage3.o \
-	     kdump.o entry.o stage3.lds
+stage3.exec: head.o stage3.o kdump3.o libc.o ebcdic.o ebcdic_conv.o sclp.o \
+	     sclp_stage3.o kdump.o entry.o stage3.lds
 
 %.exec:	%.o
 	STAGE=$$( \
--- /dev/null
+++ b/zipl/boot/ebcdic.c
@@ -0,0 +1,30 @@
+/*
+ * EBCDIC specific functions
+ *
+ * Copyright IBM Corp. 2013, 2020
+ *
+ * s390-tools is free software; you can redistribute it and/or modify
+ * it under the terms of the MIT license. See LICENSE for details.
+ *
+ */
+
+#include "ebcdic.h"
+
+
+/*
+ * Convert ebcdic string to number with given base
+ */
+unsigned long ebcdic_strtoul(char *nptr, char **endptr, int base)
+{
+	unsigned long val = 0;
+
+	while (ebcdic_isdigit(*nptr)) {
+		if (val != 0)
+			val *= base;
+		val += *nptr - 0xf0;
+		nptr++;
+	}
+	if (endptr)
+		*endptr = (char *)nptr;
+	return val;
+}
--- /dev/null
+++ b/zipl/boot/ebcdic.h
@@ -0,0 +1,45 @@
+/*
+ * EBCDIC specific functions
+ *
+ * Copyright IBM Corp. 2013, 2020
+ *
+ * s390-tools is free software; you can redistribute it and/or modify
+ * it under the terms of the MIT license. See LICENSE for details.
+ *
+ */
+
+#ifndef EBCDIC_H
+#define EBCDIC_H
+
+#include "lib/zt_common.h"
+
+
+#ifndef __ASSEMBLER__
+
+unsigned long ebcdic_strtoul(char *, char **, int);
+
+static __always_inline int ecbdic_isspace(char c)
+{
+	return (c == 0x40) || (c == 0x05) || (c == 0x15) || (c == 0x25) ||
+		(c == 0x0b) || (c == 0x0c) || (c == 0x0d);
+}
+
+static __always_inline int ebcdic_isdigit(char c)
+{
+	return (c >= 0xf0) && (c <= 0xf9);
+}
+
+static __always_inline int ebcdic_isupper(char c)
+{
+	return (c >= 0xC1 && c <= 0xC9) || (c >= 0xD1 && c <= 0xD9) ||
+		(c >= 0xE2 && c <= 0xE9);
+}
+
+static __always_inline char ebcdic_tolower(char c)
+{
+	if (ebcdic_isupper(c))
+		c -= 0x40;
+	return c;
+}
+#endif /* __ASSEMBLER__ */
+#endif /* EBCDIC_H */
--- /dev/null
+++ b/zipl/boot/ebcdic_conv.c
@@ -0,0 +1,167 @@
+/*
+ * EBCDIC conversion functions
+ *
+ * Copyright IBM Corp. 2013, 2020
+ *
+ * s390-tools is free software; you can redistribute it and/or modify
+ * it under the terms of the MIT license. See LICENSE for details.
+ *
+ */
+
+#include "ebcdic_conv.h"
+#include "libc.h"
+#include "boot/s390.h"
+
+
+static unsigned char ebcdic_037[256] = {
+/* 0x00  NUL   SOH   STX   ETX  *SEL    HT  *RNL   DEL */
+	0x00, 0x01, 0x02, 0x03, 0x07, 0x09, 0x07, 0x7F,
+/* 0x08  -GE  -SPS  -RPT    VT    FF    CR    SO    SI */
+	0x07, 0x07, 0x07, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
+/* 0x10  DLE   DC1   DC2   DC3  -RES   -NL    BS  -POC
+				-ENP  ->LF             */
+	0x10, 0x11, 0x12, 0x13, 0x07, 0x0A, 0x08, 0x07,
+/* 0x18  CAN    EM  -UBS  -CU1  -IFS  -IGS  -IRS  -ITB
+						  -IUS */
+	0x18, 0x19, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
+/* 0x20  -DS  -SOS    FS  -WUS  -BYP    LF   ETB   ESC
+				-INP                   */
+	0x07, 0x07, 0x1C, 0x07, 0x07, 0x0A, 0x17, 0x1B,
+/* 0x28  -SA  -SFE   -SM  -CSP  -MFA   ENQ   ACK   BEL
+		     -SW                               */
+	0x07, 0x07, 0x07, 0x07, 0x07, 0x05, 0x06, 0x07,
+/* 0x30 ----  ----   SYN   -IR   -PP  -TRN  -NBS   EOT */
+	0x07, 0x07, 0x16, 0x07, 0x07, 0x07, 0x07, 0x04,
+/* 0x38 -SBS   -IT  -RFF  -CU3   DC4   NAK  ----   SUB */
+	0x07, 0x07, 0x07, 0x07, 0x14, 0x15, 0x07, 0x1A,
+/* 0x40   SP   RSP           ä              ----       */
+	0x20, 0xFF, 0x83, 0x84, 0x85, 0xA0, 0x07, 0x86,
+/* 0x48                      .     <     (     +     | */
+	0x87, 0xA4, 0x9B, 0x2E, 0x3C, 0x28, 0x2B, 0x7C,
+/* 0x50    &                                      ---- */
+	0x26, 0x82, 0x88, 0x89, 0x8A, 0xA1, 0x8C, 0x07,
+/* 0x58          ß     !     $     *     )     ;       */
+	0x8D, 0xE1, 0x21, 0x24, 0x2A, 0x29, 0x3B, 0xAA,
+/* 0x60    -     /  ----     Ä  ----  ----  ----       */
+	0x2D, 0x2F, 0x07, 0x8E, 0x07, 0x07, 0x07, 0x8F,
+/* 0x68             ----     ,     %     _     >     ? */
+	0x80, 0xA5, 0x07, 0x2C, 0x25, 0x5F, 0x3E, 0x3F,
+/* 0x70  ---        ----  ----  ----  ----  ----  ---- */
+	0x07, 0x90, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
+/* 0x78    *     `     :     #     @     '     =     " */
+	0x70, 0x60, 0x3A, 0x23, 0x40, 0x27, 0x3D, 0x22,
+/* 0x80    *     a     b     c     d     e     f     g */
+	0x07, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
+/* 0x88    h     i              ----  ----  ----       */
+	0x68, 0x69, 0xAE, 0xAF, 0x07, 0x07, 0x07, 0xF1,
+/* 0x90    °     j     k     l     m     n     o     p */
+	0xF8, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70,
+/* 0x98    q     r                    ----        ---- */
+	0x71, 0x72, 0xA6, 0xA7, 0x91, 0x07, 0x92, 0x07,
+/* 0xA0          ~     s     t     u     v     w     x */
+	0xE6, 0x7E, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78,
+/* 0xA8    y     z              ----  ----  ----  ---- */
+	0x79, 0x7A, 0xAD, 0xAB, 0x07, 0x07, 0x07, 0x07,
+/* 0xB0    ^                    ----     §  ----       */
+	0x5E, 0x9C, 0x9D, 0xFA, 0x07, 0x07, 0x07, 0xAC,
+/* 0xB8       ----     [     ]  ----  ----  ----  ---- */
+	0xAB, 0x07, 0x5B, 0x5D, 0x07, 0x07, 0x07, 0x07,
+/* 0xC0    {     A     B     C     D     E     F     G */
+	0x7B, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
+/* 0xC8    H     I  ----           ö              ---- */
+	0x48, 0x49, 0x07, 0x93, 0x94, 0x95, 0xA2, 0x07,
+/* 0xD0    }     J     K     L     M     N     O     P */
+	0x7D, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50,
+/* 0xD8    Q     R  ----           ü                   */
+	0x51, 0x52, 0x07, 0x96, 0x81, 0x97, 0xA3, 0x98,
+/* 0xE0    \           S     T     U     V     W     X */
+	0x5C, 0xF6, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58,
+/* 0xE8    Y     Z        ----     Ö  ----  ----  ---- */
+	0x59, 0x5A, 0xFD, 0x07, 0x99, 0x07, 0x07, 0x07,
+/* 0xF0    0     1     2     3     4     5     6     7 */
+	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
+/* 0xF8    8     9  ----  ----     Ü  ----  ----  ---- */
+	0x38, 0x39, 0x07, 0x07, 0x9A, 0x07, 0x07, 0x07
+};
+
+static unsigned char ebcdic_500[256] = {
+/* 0x00  NUL   SOH   STX   ETX  *SEL    HT  *RNL   DEL */
+	0x00, 0x01, 0x02, 0x03, 0x07, 0x09, 0x07, 0x7F,
+/* 0x08  -GE  -SPS  -RPT    VT    FF    CR    SO    SI */
+	0x07, 0x07, 0x07, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
+/* 0x10  DLE   DC1   DC2   DC3  -RES   -NL    BS  -POC
+				-ENP  ->LF             */
+	0x10, 0x11, 0x12, 0x13, 0x07, 0x0A, 0x08, 0x07,
+/* 0x18  CAN    EM  -UBS  -CU1  -IFS  -IGS  -IRS  -ITB
+						  -IUS */
+	0x18, 0x19, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
+/* 0x20  -DS  -SOS    FS  -WUS  -BYP    LF   ETB   ESC
+				-INP                   */
+	0x07, 0x07, 0x1C, 0x07, 0x07, 0x0A, 0x17, 0x1B,
+/* 0x28  -SA  -SFE   -SM  -CSP  -MFA   ENQ   ACK   BEL
+		     -SW                               */
+	0x07, 0x07, 0x07, 0x07, 0x07, 0x05, 0x06, 0x07,
+/* 0x30 ----  ----   SYN   -IR   -PP  -TRN  -NBS   EOT */
+	0x07, 0x07, 0x16, 0x07, 0x07, 0x07, 0x07, 0x04,
+/* 0x38 -SBS   -IT  -RFF  -CU3   DC4   NAK  ----   SUB */
+	0x07, 0x07, 0x07, 0x07, 0x14, 0x15, 0x07, 0x1A,
+/* 0x40   SP   RSP           ä              ----       */
+	0x20, 0xFF, 0x83, 0x84, 0x85, 0xA0, 0x07, 0x86,
+/* 0x48                      .     <     (     +     | */
+	0x87, 0xA4, 0x9B, 0x2E, 0x3C, 0x28, 0x2B, 0x7C,
+/* 0x50    &                                      ---- */
+	0x26, 0x82, 0x88, 0x89, 0x8A, 0xA1, 0x8C, 0x07,
+/* 0x58          ß     !     $     *     )     ;       */
+	0x8D, 0xE1, 0x21, 0x24, 0x2A, 0x29, 0x3B, 0xAA,
+/* 0x60    -     /  ----     Ä  ----  ----  ----       */
+	0x2D, 0x2F, 0x07, 0x8E, 0x07, 0x07, 0x07, 0x8F,
+/* 0x68             ----     ,     %     _     >     ? */
+	0x80, 0xA5, 0x07, 0x2C, 0x25, 0x5F, 0x3E, 0x3F,
+/* 0x70  ---        ----  ----  ----  ----  ----  ---- */
+	0x07, 0x90, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
+/* 0x78    *     `     :     #     @     '     =     " */
+	0x70, 0x60, 0x3A, 0x23, 0x40, 0x27, 0x3D, 0x22,
+/* 0x80    *     a     b     c     d     e     f     g */
+	0x07, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
+/* 0x88    h     i              ----  ----  ----       */
+	0x68, 0x69, 0xAE, 0xAF, 0x07, 0x07, 0x07, 0xF1,
+/* 0x90    °     j     k     l     m     n     o     p */
+	0xF8, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70,
+/* 0x98    q     r                    ----        ---- */
+	0x71, 0x72, 0xA6, 0xA7, 0x91, 0x07, 0x92, 0x07,
+/* 0xA0          ~     s     t     u     v     w     x */
+	0xE6, 0x7E, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78,
+/* 0xA8    y     z              ----  ----  ----  ---- */
+	0x79, 0x7A, 0xAD, 0xAB, 0x07, 0x07, 0x07, 0x07,
+/* 0xB0    ^                    ----     §  ----       */
+	0x5E, 0x9C, 0x9D, 0xFA, 0x07, 0x07, 0x07, 0xAC,
+/* 0xB8       ----     [     ]  ----  ----  ----  ---- */
+	0xAB, 0x07, 0x5B, 0x5D, 0x07, 0x07, 0x07, 0x07,
+/* 0xC0    {     A     B     C     D     E     F     G */
+	0x7B, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
+/* 0xC8    H     I  ----           ö              ---- */
+	0x48, 0x49, 0x07, 0x93, 0x94, 0x95, 0xA2, 0x07,
+/* 0xD0    }     J     K     L     M     N     O     P */
+	0x7D, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50,
+/* 0xD8    Q     R  ----           ü                   */
+	0x51, 0x52, 0x07, 0x96, 0x81, 0x97, 0xA3, 0x98,
+/* 0xE0    \           S     T     U     V     W     X */
+	0x5C, 0xF6, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58,
+/* 0xE8    Y     Z        ----     Ö  ----  ----  ---- */
+	0x59, 0x5A, 0xFD, 0x07, 0x99, 0x07, 0x07, 0x07,
+/* 0xF0    0     1     2     3     4     5     6     7 */
+	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
+/* 0xF8    8     9  ----  ----     Ü  ----  ----  ---- */
+	0x38, 0x39, 0x07, 0x07, 0x9A, 0x07, 0x07, 0x07
+};
+
+void ebcdic_to_ascii(unsigned char *target, const unsigned char *source,
+		     unsigned int l)
+{
+	unsigned char *ebc;
+	unsigned int i;
+
+	ebc = is_zvm() ? ebcdic_037 : ebcdic_500;
+	for (i = 0; i < l; i++)
+		target[i] = ebc[source[i]];
+}
--- /dev/null
+++ b/zipl/boot/ebcdic_conv.h
@@ -0,0 +1,21 @@
+/*
+ * EBCDIC conversion functions
+ *
+ * Copyright IBM Corp. 2013, 2020
+ *
+ * s390-tools is free software; you can redistribute it and/or modify
+ * it under the terms of the MIT license. See LICENSE for details.
+ *
+ */
+
+#ifndef EBCDIC_CONV_H
+#define EBCDIC_CONV_H
+
+
+#ifndef __ASSEMBLER__
+
+void ebcdic_to_ascii(unsigned char *target, const unsigned char *source,
+		     unsigned int l);
+
+#endif /* __ASSEMBLER__ */
+#endif /* EBCDIC_CONV_H */
--- a/zipl/boot/libc.c
+++ b/zipl/boot/libc.c
@@ -18,6 +18,7 @@
 
 #include "error.h"
 #include "sclp.h"
+#include "ebcdic.h"
 
 extern char __heap_start[];
 extern char __heap_stop[];
@@ -129,24 +130,6 @@ int strncmp(const char *s1, const char *
 	return 0;
 }
 
-/*
- * Convert ebcdic string to number with given base
- */
-unsigned long ebcstrtoul(char *nptr, char **endptr, int base)
-{
-	unsigned long val = 0;
-
-	while (ebc_isdigit(*nptr)) {
-		if (val != 0)
-			val *= base;
-		val += *nptr - 0xf0;
-		nptr++;
-	}
-	if (endptr)
-		*endptr = (char *) nptr;
-	return val;
-}
-
 static int skip_atoi(const char **c)
 {
 	int i = 0;
--- a/zipl/boot/libc.h
+++ b/zipl/boot/libc.h
@@ -51,7 +51,6 @@ void *memmove(void *, const void *, unsi
 void *memset(void *, int c, unsigned long);
 char *strcat(char *, const char *);
 int strncmp(const char *, const char *, unsigned long);
-unsigned long ebcstrtoul(char *, char **, int);
 int strlen(const char *);
 char *strcpy(char *, const char *);
 unsigned long get_zeroed_page(void);
@@ -80,28 +79,4 @@ static inline int isspace(char c)
 	return (c == 32) || (c >= 9 && c <= 13);
 }
 
-static inline int ebc_isspace(char c)
-{
-	return (c == 0x40) || (c == 0x05) || (c == 0x15) || (c == 0x25) ||
-		(c == 0x0b) || (c == 0x0c) || (c == 0x0d);
-}
-
-static inline int ebc_isdigit(char c)
-{
-	return (c >= 0xf0) && (c <= 0xf9);
-}
-
-static inline int ebc_isupper(char c)
-{
-	return (c >= 0xC1 && c <= 0xC9) || (c >= 0xD1 && c <= 0xD9) ||
-		(c >= 0xE2 && c <= 0xE9);
-}
-
-static inline  char ebc_tolower(char c)
-{
-	if (ebc_isupper(c))
-		c -= 0x40;
-	return c;
-}
-
 #endif /* LIBC_H */
--- a/zipl/boot/menu.c
+++ b/zipl/boot/menu.c
@@ -12,6 +12,7 @@
 #include "libc.h"
 #include "menu.h"
 #include "sclp.h"
+#include "ebcdic.h"
 
 static const char *msg_econfig = "Error: undefined configuration\n";
 
@@ -55,8 +56,8 @@ static int menu_read(void)
 		/* input under zVM needs to be converted to lower case */
 		if (is_zvm())
 			for (i = 0; i < count; i++)
-				temp_area[i] = ebc_tolower(temp_area[i]);
-		value = ebcstrtoul((char *)temp_area, &endptr, 10);
+				temp_area[i] = ebcdic_tolower(temp_area[i]);
+		value = ebcdic_strtoul((char *)temp_area, &endptr, 10);
 
 		if ((endptr != temp_area) && (value < BOOT_MENU_ENTRIES - 1) &&
 		    (__stage2_params.config[value] != 0)) {
@@ -112,7 +113,7 @@ static int menu_param(unsigned long *val
 	int i;
 
 	if (!sclp_param(loadparm))
-		*value = ebcstrtoul(loadparm, &endptr, 10);
+		*value = ebcdic_strtoul(loadparm, &endptr, 10);
 
 	/* got number, done */
 	if (endptr != loadparm)
@@ -121,7 +122,7 @@ static int menu_param(unsigned long *val
 	/* no number, check for keyword */
 	i = 0;
 	/* skip leading whitespaces */
-	while ((i < PARAM_SIZE) && ebc_isspace(loadparm[i]))
+	while ((i < PARAM_SIZE) && ecbdic_isspace(loadparm[i]))
 		i++;
 
 	if (!strncmp(&loadparm[i], "PROMPT", 6)) {
--- a/zipl/boot/stage3.c
+++ b/zipl/boot/stage3.c
@@ -12,9 +12,12 @@
 #include "libc.h"
 #include "boot/sigp.h"
 #include "boot/s390.h"
+#include "boot/sigp.h"
 #include "stage3.h"
 #include "error.h"
 #include "zipl.h"
+#include "ebcdic.h"
+#include "ebcdic_conv.h"
 
 #define for_each_rb_entry(entry, rb) \
 	for (entry = rb->entries; \
@@ -24,159 +27,6 @@
 static const char *msg_sipl_inval = "Secure boot failure: invalid load address";
 static const char *msg_sipl_unverified = "Secure boot failure: unverified load address";
 
-static unsigned char ebc_037[256] = {
-/* 0x00  NUL   SOH   STX   ETX  *SEL    HT  *RNL   DEL */
-	0x00, 0x01, 0x02, 0x03, 0x07, 0x09, 0x07, 0x7F,
-/* 0x08  -GE  -SPS  -RPT    VT    FF    CR    SO    SI */
-	0x07, 0x07, 0x07, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
-/* 0x10  DLE   DC1   DC2   DC3  -RES   -NL    BS  -POC
-                                -ENP  ->LF             */
-	0x10, 0x11, 0x12, 0x13, 0x07, 0x0A, 0x08, 0x07,
-/* 0x18  CAN    EM  -UBS  -CU1  -IFS  -IGS  -IRS  -ITB
-                                                  -IUS */
-	0x18, 0x19, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
-/* 0x20  -DS  -SOS    FS  -WUS  -BYP    LF   ETB   ESC
-                                -INP                   */
-	0x07, 0x07, 0x1C, 0x07, 0x07, 0x0A, 0x17, 0x1B,
-/* 0x28  -SA  -SFE   -SM  -CSP  -MFA   ENQ   ACK   BEL
-                     -SW                               */
-	0x07, 0x07, 0x07, 0x07, 0x07, 0x05, 0x06, 0x07,
-/* 0x30 ----  ----   SYN   -IR   -PP  -TRN  -NBS   EOT */
-	0x07, 0x07, 0x16, 0x07, 0x07, 0x07, 0x07, 0x04,
-/* 0x38 -SBS   -IT  -RFF  -CU3   DC4   NAK  ----   SUB */
-	0x07, 0x07, 0x07, 0x07, 0x14, 0x15, 0x07, 0x1A,
-/* 0x40   SP   RSP           ä              ----       */
-	0x20, 0xFF, 0x83, 0x84, 0x85, 0xA0, 0x07, 0x86,
-/* 0x48                      .     <     (     +     | */
-	0x87, 0xA4, 0x9B, 0x2E, 0x3C, 0x28, 0x2B, 0x7C,
-/* 0x50    &                                      ---- */
-	0x26, 0x82, 0x88, 0x89, 0x8A, 0xA1, 0x8C, 0x07,
-/* 0x58          ß     !     $     *     )     ;       */
-	0x8D, 0xE1, 0x21, 0x24, 0x2A, 0x29, 0x3B, 0xAA,
-/* 0x60    -     /  ----     Ä  ----  ----  ----       */
-	0x2D, 0x2F, 0x07, 0x8E, 0x07, 0x07, 0x07, 0x8F,
-/* 0x68             ----     ,     %     _     >     ? */
-	0x80, 0xA5, 0x07, 0x2C, 0x25, 0x5F, 0x3E, 0x3F,
-/* 0x70  ---        ----  ----  ----  ----  ----  ---- */
-	0x07, 0x90, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
-/* 0x78    *     `     :     #     @     '     =     " */
-	0x70, 0x60, 0x3A, 0x23, 0x40, 0x27, 0x3D, 0x22,
-/* 0x80    *     a     b     c     d     e     f     g */
-	0x07, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
-/* 0x88    h     i              ----  ----  ----       */
-	0x68, 0x69, 0xAE, 0xAF, 0x07, 0x07, 0x07, 0xF1,
-/* 0x90    °     j     k     l     m     n     o     p */
-	0xF8, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70,
-/* 0x98    q     r                    ----        ---- */
-	0x71, 0x72, 0xA6, 0xA7, 0x91, 0x07, 0x92, 0x07,
-/* 0xA0          ~     s     t     u     v     w     x */
-	0xE6, 0x7E, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78,
-/* 0xA8    y     z              ----  ----  ----  ---- */
-	0x79, 0x7A, 0xAD, 0xAB, 0x07, 0x07, 0x07, 0x07,
-/* 0xB0    ^                    ----     §  ----       */
-	0x5E, 0x9C, 0x9D, 0xFA, 0x07, 0x07, 0x07, 0xAC,
-/* 0xB8       ----     [     ]  ----  ----  ----  ---- */
-	0xAB, 0x07, 0x5B, 0x5D, 0x07, 0x07, 0x07, 0x07,
-/* 0xC0    {     A     B     C     D     E     F     G */
-	0x7B, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
-/* 0xC8    H     I  ----           ö              ---- */
-	0x48, 0x49, 0x07, 0x93, 0x94, 0x95, 0xA2, 0x07,
-/* 0xD0    }     J     K     L     M     N     O     P */
-	0x7D, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50,
-/* 0xD8    Q     R  ----           ü                   */
-	0x51, 0x52, 0x07, 0x96, 0x81, 0x97, 0xA3, 0x98,
-/* 0xE0    \           S     T     U     V     W     X */
-	0x5C, 0xF6, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58,
-/* 0xE8    Y     Z        ----     Ö  ----  ----  ---- */
-	0x59, 0x5A, 0xFD, 0x07, 0x99, 0x07, 0x07, 0x07,
-/* 0xF0    0     1     2     3     4     5     6     7 */
-	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
-/* 0xF8    8     9  ----  ----     Ü  ----  ----  ---- */
-	0x38, 0x39, 0x07, 0x07, 0x9A, 0x07, 0x07, 0x07
-};
-
-static unsigned char ebc_500[256] = {
-/* 0x00  NUL   SOH   STX   ETX  *SEL    HT  *RNL   DEL */
-	0x00, 0x01, 0x02, 0x03, 0x07, 0x09, 0x07, 0x7F,
-/* 0x08  -GE  -SPS  -RPT    VT    FF    CR    SO    SI */
-	0x07, 0x07, 0x07, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
-/* 0x10  DLE   DC1   DC2   DC3  -RES   -NL    BS  -POC
-                                -ENP  ->LF             */
-	0x10, 0x11, 0x12, 0x13, 0x07, 0x0A, 0x08, 0x07,
-/* 0x18  CAN    EM  -UBS  -CU1  -IFS  -IGS  -IRS  -ITB
-                                                  -IUS */
-	0x18, 0x19, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
-/* 0x20  -DS  -SOS    FS  -WUS  -BYP    LF   ETB   ESC
-                                -INP                   */
-	0x07, 0x07, 0x1C, 0x07, 0x07, 0x0A, 0x17, 0x1B,
-/* 0x28  -SA  -SFE   -SM  -CSP  -MFA   ENQ   ACK   BEL
-                     -SW                               */
-	0x07, 0x07, 0x07, 0x07, 0x07, 0x05, 0x06, 0x07,
-/* 0x30 ----  ----   SYN   -IR   -PP  -TRN  -NBS   EOT */
-	0x07, 0x07, 0x16, 0x07, 0x07, 0x07, 0x07, 0x04,
-/* 0x38 -SBS   -IT  -RFF  -CU3   DC4   NAK  ----   SUB */
-	0x07, 0x07, 0x07, 0x07, 0x14, 0x15, 0x07, 0x1A,
-/* 0x40   SP   RSP           ä              ----       */
-	0x20, 0xFF, 0x83, 0x84, 0x85, 0xA0, 0x07, 0x86,
-/* 0x48                      .     <     (     +     | */
-	0x87, 0xA4, 0x9B, 0x2E, 0x3C, 0x28, 0x2B, 0x7C,
-/* 0x50    &                                      ---- */
-	0x26, 0x82, 0x88, 0x89, 0x8A, 0xA1, 0x8C, 0x07,
-/* 0x58          ß     !     $     *     )     ;       */
-	0x8D, 0xE1, 0x21, 0x24, 0x2A, 0x29, 0x3B, 0xAA,
-/* 0x60    -     /  ----     Ä  ----  ----  ----       */
-	0x2D, 0x2F, 0x07, 0x8E, 0x07, 0x07, 0x07, 0x8F,
-/* 0x68             ----     ,     %     _     >     ? */
-	0x80, 0xA5, 0x07, 0x2C, 0x25, 0x5F, 0x3E, 0x3F,
-/* 0x70  ---        ----  ----  ----  ----  ----  ---- */
-	0x07, 0x90, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
-/* 0x78    *     `     :     #     @     '     =     " */
-	0x70, 0x60, 0x3A, 0x23, 0x40, 0x27, 0x3D, 0x22,
-/* 0x80    *     a     b     c     d     e     f     g */
-	0x07, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
-/* 0x88    h     i              ----  ----  ----       */
-	0x68, 0x69, 0xAE, 0xAF, 0x07, 0x07, 0x07, 0xF1,
-/* 0x90    °     j     k     l     m     n     o     p */
-	0xF8, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70,
-/* 0x98    q     r                    ----        ---- */
-	0x71, 0x72, 0xA6, 0xA7, 0x91, 0x07, 0x92, 0x07,
-/* 0xA0          ~     s     t     u     v     w     x */
-	0xE6, 0x7E, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78,
-/* 0xA8    y     z              ----  ----  ----  ---- */
-	0x79, 0x7A, 0xAD, 0xAB, 0x07, 0x07, 0x07, 0x07,
-/* 0xB0    ^                    ----     §  ----       */
-	0x5E, 0x9C, 0x9D, 0xFA, 0x07, 0x07, 0x07, 0xAC,
-/* 0xB8       ----     [     ]  ----  ----  ----  ---- */
-	0xAB, 0x07, 0x5B, 0x5D, 0x07, 0x07, 0x07, 0x07,
-/* 0xC0    {     A     B     C     D     E     F     G */
-	0x7B, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
-/* 0xC8    H     I  ----           ö              ---- */
-	0x48, 0x49, 0x07, 0x93, 0x94, 0x95, 0xA2, 0x07,
-/* 0xD0    }     J     K     L     M     N     O     P */
-	0x7D, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50,
-/* 0xD8    Q     R  ----           ü                   */
-	0x51, 0x52, 0x07, 0x96, 0x81, 0x97, 0xA3, 0x98,
-/* 0xE0    \           S     T     U     V     W     X */
-	0x5C, 0xF6, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58,
-/* 0xE8    Y     Z        ----     Ö  ----  ----  ---- */
-	0x59, 0x5A, 0xFD, 0x07, 0x99, 0x07, 0x07, 0x07,
-/* 0xF0    0     1     2     3     4     5     6     7 */
-	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
-/* 0xF8    8     9  ----  ----     Ü  ----  ----  ---- */
-	0x38, 0x39, 0x07, 0x07, 0x9A, 0x07, 0x07, 0x07
-};
-
-static void ebcdic_to_ascii(unsigned char *target, unsigned char *source,
-		     unsigned int l)
-{
-	unsigned char *ebc;
-	unsigned int i;
-
-	ebc = is_zvm() ? ebc_037 : ebc_500;
-	for (i = 0; i < l; i++)
-			target[i] = ebc[source[i]];
-}
-
 static inline void __noreturn start_kernel(void)
 {
 	struct psw_t *psw = &S390_lowcore.program_new_psw;
