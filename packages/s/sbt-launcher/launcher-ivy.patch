--- launcher-1.1.2/launcher-implementation/src/main/scala/xsbt/boot/ParallelResolveEngine.scala	2022-03-19 17:35:29.562544280 +0100
+++ launcher-1.1.2/launcher-implementation/src/main/scala/xsbt/boot/ParallelResolveEngine.scala	2022-03-19 17:46:58.730677371 +0100
@@ -34,7 +34,7 @@
 
   override def downloadArtifacts(
     report: ResolveReport,
-    artifactFilter: Filter,
+    artifactFilter: Filter[Artifact],
     options: DownloadOptions
   ): Unit = {
     import scala.collection.JavaConverters._
@@ -85,7 +85,7 @@
    */
   private def downloadNodeArtifacts(
     dependency: IvyNode,
-    artifactFilter: Filter,
+    artifactFilter: Filter[Artifact],
     options: DownloadOptions
   ): DownloadResult = {
 
--- launcher-1.1.2/launcher-implementation/src/main/scala/xsbt/boot/ParallelRetrieveEngine.scala	2022-03-19 17:35:29.562544280 +0100
+++ launcher-1.1.2/launcher-implementation/src/main/scala/xsbt/boot/ParallelRetrieveEngine.scala	2022-03-19 17:45:59.218320985 +0100
@@ -167,7 +167,7 @@
       if (options.isMakeSymlinks()) {
         var symlinkCreated = false
         try {
-          FileUtil.symlink(archive, destFile, null, true)
+          FileUtil.symlink(archive, destFile, true)
           symlinkCreated = true
         } catch {
           case ioe: IOException =>
--- launcher-1.1.2/launcher-implementation/src/main/scala/xsbt/boot/Update.scala	2022-03-19 17:35:29.562544280 +0100
+++ launcher-1.1.2/launcher-implementation/src/main/scala/xsbt/boot/Update.scala	2022-03-19 18:04:13.840880157 +0100
@@ -187,7 +187,7 @@
   private def excludeRule(organization: String, name: String): ExcludeRule =
     {
       val artifact = new ArtifactId(ModuleId.newInstance(organization, name), "*", "*", "*")
-      val rule = new DefaultExcludeRule(artifact, ExactPatternMatcher.INSTANCE, java.util.Collections.emptyMap[AnyRef, AnyRef])
+      val rule = new DefaultExcludeRule(artifact, ExactPatternMatcher.INSTANCE, java.util.Collections.emptyMap[String, String])
       rule.addConfiguration(DefaultIvyConfiguration)
       rule
     }
@@ -233,8 +233,8 @@
         problem.printStackTrace(logWriter)
     }
   }
-  private final class ArtifactFilter(f: IArtifact => Boolean) extends Filter {
-    def accept(o: Any) = o match { case a: IArtifact => f(a); case _ => false }
+  private final class ArtifactFilter(f: IArtifact => Boolean) extends Filter[IArtifact] {
+    def accept(o: IArtifact) = o match { case a: IArtifact => f(a); case _ => false }
   }
   /** Retrieves resolved dependencies using the given target to determine the location to retrieve to. */
   private def retrieve(eventManager: EventManager, module: ModuleDescriptor, target: UpdateTarget, autoScalaVersion: Option[String]): Unit = {
