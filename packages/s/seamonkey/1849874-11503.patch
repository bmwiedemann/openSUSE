# HG changeset patch
# User Henri Sivonen <hsivonen@hsivonen.fi>
# Date 1694422376 0
# Node ID 710f69d44491d9ae501814400df35983128c5800
# Parent  8fb1c7ee4209bab5edeeb74ea89807ca36473e36
Bug 1849874 - Update from packed_simd_2 to packed_simd. (ESR version) a=pascalc

Differential Revision: https://phabricator.services.mozilla.com/D187876

diff --git a/.cargo/config.in b/.cargo/config.in
--- a/.cargo/config.in
+++ b/.cargo/config.in
@@ -5,14 +5,14 @@ replace-with = 'vendored-sources'
 [source."https://github.com/servo/serde"]
 git = "https://github.com/servo/serde"
 branch = "deserialize_from_enums5"
 replace-with = "vendored-sources"
 
 [source."https://github.com/hsivonen/packed_simd"]
 git = "https://github.com/hsivonen/packed_simd"
 replace-with = "vendored-sources"
-rev = "412f9a0aa556611de021bde89dee8fefe6e0fbbd"
+rev = "e588ceb568878e1a3156ea9ce551d5b63ef0cdc4"
 
 [source.vendored-sources]
 directory = '@top_srcdir@/third_party/rust'
 
 @WIN64_CARGO_LINKER_CONFIG@
diff --git a/Cargo.lock b/Cargo.lock
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -527,22 +527,22 @@ version = "0.1.0"
 dependencies = [
  "encoding_rs",
  "nserror",
  "nsstring",
 ]
 
 [[package]]
 name = "encoding_rs"
-version = "0.8.32"
+version = "0.8.33"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "071a31f4ee85403370b58aca746f01041ede6f0da2730960ad001edc2b71b394"
+checksum = "7268b386296a025e474d5140678f75d6de9493ae55a5d709eeb9dd08149945e1"
 dependencies = [
  "cfg-if 1.0.0",
- "packed_simd_2",
+ "packed_simd",
 ]
 
 [[package]]
 name = "env_logger"
 version = "0.4.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "3ddf21e73e016298f5cb37d6ef8e8da8e39f91f9ec8b0df44b7deb16a9f8cd5b"
 dependencies = [
@@ -1163,21 +1163,22 @@ name = "owning_ref"
 version = "0.3.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "cdf84f41639e037b484f93433aa3897863b561ed65c6e59c7073d7c561710f37"
 dependencies = [
  "stable_deref_trait",
 ]
 
 [[package]]
-name = "packed_simd_2"
-version = "0.3.8"
-source = "git+https://github.com/hsivonen/packed_simd?rev=412f9a0aa556611de021bde89dee8fefe6e0fbbd#412f9a0aa556611de021bde89dee8fefe6e0fbbd"
+name = "packed_simd"
+version = "0.3.9"
+source = "git+https://github.com/hsivonen/packed_simd?rev=e588ceb568878e1a3156ea9ce551d5b63ef0cdc4#e588ceb568878e1a3156ea9ce551d5b63ef0cdc4"
 dependencies = [
  "cfg-if 1.0.0",
+ "num-traits",
 ]
 
 [[package]]
 name = "parking_lot"
 version = "0.4.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "37f364e2ce5efa24c7d0b6646d5bb61145551a0112f107ffd7499f1a3e322fbd"
 dependencies = [
diff --git a/Cargo.toml b/Cargo.toml
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -48,9 +48,9 @@ opt-level = 2
 rpath = false
 debug-assertions = false
 panic = "abort"
 codegen-units = 1
 
 [patch.crates-io]
 libudev-sys = { path = "dom/webauthn/libudev-sys" }
 serde_derive = { git = "https://github.com/servo/serde", branch = "deserialize_from_enums5" }
-packed_simd = { package = "packed_simd_2", git = "https://github.com/hsivonen/packed_simd", rev="412f9a0aa556611de021bde89dee8fefe6e0fbbd" }
+packed_simd = { git = "https://github.com/hsivonen/packed_simd", rev = "e588ceb568878e1a3156ea9ce551d5b63ef0cdc4" }
diff --git a/config/makefiles/rust.mk b/config/makefiles/rust.mk
--- a/config/makefiles/rust.mk
+++ b/config/makefiles/rust.mk
@@ -61,17 +61,17 @@ endif
 endif
 endif
 
 ifndef RUSTC_BOOTSTRAP
 ifeq (,$(filter 1.47.% 1.48.% 1.49.%,$(RUSTC_VERSION)))
 # RUSTC_BOOTSTRAP := gkrust_shared,qcms for later
 RUSTC_BOOTSTRAP := gkrust_shared
 ifdef MOZ_RUST_SIMD
-RUSTC_BOOTSTRAP := $(RUSTC_BOOTSTRAP),encoding_rs,packed_simd_2
+RUSTC_BOOTSTRAP := $(RUSTC_BOOTSTRAP),encoding_rs,packed_simd
 endif
 export RUSTC_BOOTSTRAP
 endif
 endif
 
 ifdef CARGO_INCREMENTAL
 export CARGO_INCREMENTAL
 endif
diff --git a/third_party/rust/encoding_rs/.cargo-checksum.json b/third_party/rust/encoding_rs/.cargo-checksum.json
--- a/third_party/rust/encoding_rs/.cargo-checksum.json
+++ b/third_party/rust/encoding_rs/.cargo-checksum.json
@@ -1,1 +1,1 @@
-{"files":{"CONTRIBUTING.md":"ca1901f3e8532fb4cec894fd3664f0eaa898c0c4b961d1b992d1ed54eacf362a","COPYRIGHT":"11789f45bb180841cd362a5eee6789c68ddb573a11105e30768c308a6add0190","Cargo.toml":"ea1bdb0b73a66e4a6b25d8fdda6b64cadea8e99ac89f9739eeada6801d5e9010","Ideas.md":"b7452893f500163868d8de52c09addaf91e1632454ed02e892c467ed7ec39dbd","LICENSE-APACHE":"cfc7749b96f63bd31c3c42b5c471bf756814053e847c10f3eb003417bc523d30","LICENSE-MIT":"3fa4ca83dcc9237839b1bdeb2e6d16bdfb5ec0c5ce42b24694d8bbf0dcbef72c","LICENSE-WHATWG":"838118388fe5c2e7f1dbbaeed13e1c7f3ebf88be91319c7c1d77c18e987d1a50","README.md":"8781ee38bba8ab4e752b2d63d7674d8ce4a557af896221434dd057a1198a9ed4","ci/miri.sh":"43cb8d82f49e3bfe2d2274b6ccd6f0714a4188ccef0cecc040829883cfdbee25","doc/Big5.txt":"f73a2edc5cb6c2d140ba6e07f4542e1c4a234950378acde1df93480f0ca0be0b","doc/EUC-JP.txt":"ee2818b907d0137f40a9ab9fd525fc700a44dbdddb6cf0c157a656566bae4bf1","doc/EUC-KR.txt":"71d9e2ccf3b124e8bdfb433c8cf2773fd878077038d0cec3c7237a50f4a78a30","doc/GBK.txt":"c1b522b5a799884e5001da661f42c5a8f4d0acb9ef1d74b206f22b5f65365606","doc/IBM866.txt":"a5a433e804d0f83af785015179fbc1d9b0eaf1f7960efcd04093e136b51fbd0e","doc/ISO-2022-JP.txt":"af86684f5a8f0e2868d7b2c292860140c3d2e5527530ca091f1b28198e8e2fe6","doc/ISO-8859-10.txt":"6d3949ad7c81ca176895101ed81a1db7df1060d64e262880b94bd31bb344ab4d","doc/ISO-8859-13.txt":"3951dd89cf93f7729148091683cf8511f4529388b7dc8dcd0d62eaed55be93fa","doc/ISO-8859-14.txt":"3d330784a0374fd255a38b47949675cc7168c800530534b0a01cac6edc623adc","doc/ISO-8859-15.txt":"24b1084aab5127a85aab99153f86e24694d0a3615f53b5ce23683f97cf66c47a","doc/ISO-8859-16.txt":"ce0272559b92ba76d7a7e476f6424ae4a5cc72e75b183611b08392e44add4d25","doc/ISO-8859-2.txt":"18ceff88c13d1b5ba455a3919b1e3de489045c4c3d2dd7e8527c125c75d54aad","doc/ISO-8859-3.txt":"21798404c68f4f5db59223362f24999da96968c0628427321fccce7d2849a130","doc/ISO-8859-4.txt":"d27f6520c6c5bfbcc19176b71d081cdb3bccde1622bb3e420d5680e812632d53","doc/ISO-8859-5.txt":"a10ec8d6ea7a78ad15da7275f6cb1a3365118527e28f9af6d0d5830501303f3a","doc/ISO-8859-6.txt":"ccda8a2efc96115336bdd77776637b9712425e44fbcf745353b9057fbef144e7","doc/ISO-8859-7.txt":"17900fa1f27a445958f0a77d7d9056be375a6bd7ee4492aa680c7c1500bab85e","doc/ISO-8859-8-I.txt":"8357555646d54265a9b9ffa3e68b08d132312f1561c60108ff9b8b1167b6ecf2","doc/ISO-8859-8.txt":"72cd6f3afb7b4a9c16a66a362473315770b7755d72c86c870e52fc3eba86c8af","doc/KOI8-R.txt":"839cf19a38da994488004ed7814b1f6151640156a9a2af02bf2efca745fb5966","doc/KOI8-U.txt":"0cc76624ed1f024183e2298b7e019957da2c70c8ca06e0fc4e6f353f50a5054f","doc/Shift_JIS.txt":"34c49141818cb9ddbcf59cc858f78a79be8ad148d563f26415108ae1f148443f","doc/UTF-16BE.txt":"e2e280d8acbaa6d2a6b3569d60e17500a285f2baa0df3363dd85537cd5a1ef8f","doc/UTF-16LE.txt":"70bdc170e3fc5298ba68f10125fb5eeb8b077036cc96bb4416c4de396f6d76c1","doc/UTF-8.txt":"ea7bae742e613010ced002cf4b601a737d2203fad65e115611451bc4428f548a","doc/gb18030.txt":"dc71378a8f07a2d8659f69ee81fb8791fef56ba86f124b429978285237bb4a7b","doc/macintosh.txt":"57491e53866711b4672d9b9ff35380b9dac9e0d8e3d6c20bdd6140603687c023","doc/replacement.txt":"4b6c3bbd7999d9d4108a281594bd02d13607e334a95465afff8c2c08d395f0e4","doc/windows-1250.txt":"61296bb6a21cdab602300d32ecfba434cb82de5ac3bc88d58710d2f125e28d39","doc/windows-1251.txt":"7deea1c61dea1485c8ff02db2c7d578db7a9aab63ab1cfd02ec04b515864689e","doc/windows-1252.txt":"933ef3bdddfce5ee132b9f1a1aa8b47423d2587bbe475b19028d0a6d38e180b6","doc/windows-1253.txt":"1a38748b88e99071a5c7b3d5456ead4caedeabab50d50d658be105bc113714de","doc/windows-1254.txt":"f8372f86c6f8d642563cd6ddc025260553292a39423df1683a98670bd7bf2b47","doc/windows-1255.txt":"4e5852494730054e2da258a74e1b9d780abbcdd8ce22ebc218ca2efe9e90493d","doc/windows-1256.txt":"c0879c5172abedead302a406e8f60d9cd9598694a0ffa4fd288ffe4fef7b8ea1","doc/windows-1257.txt":"c28a0c9f964fcb2b46d21f537c402446501a2800670481d6abf9fd9e9018d523","doc/windows-1258.txt":"5019ae4d61805c79aacbf17c93793342dbb098d65a1837783bc3e2c6d6a23602","doc/windows-874.txt":"4ef0e4501c5feba8b17aee1818602ed44b36ca8475db771ce2fc16d392cabecc","doc/x-mac-cyrillic.txt":"58be154d8a888ca3d484b83b44f749823ef339ab27f14d90ca9a856f5050a8bd","doc/x-user-defined.txt":"f9cd07c4321bf5cfb0be4bdddd251072999b04a6cf7a6f5bc63709a84e2c1ffc","generate-encoding-data.py":"be989dd25c6b946e3e8745fdc8e8a80fcf24b3be99ad0b4b78153ba3f6ab6310","rustfmt.toml":"85c1a3b4382fd89e991cbb81b70fb52780472edc064c963943cdaaa56e0a2030","src/ascii.rs":"c44c002641adb5ebc4368707a8cc0a076d2f33e6a5c27b1b69988eb515f5653d","src/big5.rs":"ec6e2913011a38e9a3e825a1731f139a7ca1d5b264fefae51a3cc1a68a57cef9","src/data.rs":"8a617cc57032092d65850eb27e00de687c80aea3299e839a1f58b42d0b35abf3","src/euc_jp.rs":"32047f5b540188c4cb19c07165f846b9786a09f18e315ed3e9bda1293dae52aa","src/euc_kr.rs":"9b25afc72d9378700eecfac58d55ad1c5946d6cd0ccde2c29c08200ef2de6bb9","src/gb18030.rs":"808587168d73f0c80f8520f0ca9b161866ed2efeb17a05e85fdf3b8efe7ba28a","src/handles.rs":"cc83dc0754751d67f5688a65c5e0191cba02f6bacce81a0813a243cba55eef7a","src/iso_2022_jp.rs":"9bb485e82574f4b7d4b2364f0ff276acb6a0bc111758420a3b0ec5e04c196652","src/lib.rs":"1dc07b818e45846b16ddcaf0de46c8862dd7df8099123ec38b95c3f8ad9c91ec","src/macros.rs":"200997f8870de8bfd8cdc475e92115df42108c0df661e49d3d1cbc32056e1d99","src/mem.rs":"0bf34103e0ad1b842a13a082dee2b920b05cf4fb0f145c9ee7f608f4cb4a544f","src/replacement.rs":"7660b34a53f8c1ca2bdfa0e51e843ec28326950952ad8bc96569feb93ac62308","src/shift_jis.rs":"6951ae67e36b1a12fa3a30734957f444d8b1b4ae0e2bde52060b29bd0f16d9d9","src/simd_funcs.rs":"2612aba86e1d201096d7e47a859bc3444f85934cc82d8adc6d39a4304d9eecfc","src/single_byte.rs":"3c9e9c1f946ae622c725ba9421240c1faa9a05e95fa10dd4642a25cb276a1edc","src/test_data/big5_in.txt":"4c5a8691f8dc717311889c63894026d2fb62725a86c4208ca274a9cc8d42a503","src/test_data/big5_in_ref.txt":"99d399e17750cf9c7cf30bb253dbfe35b81c4fcbdead93cfa48b1429213473c7","src/test_data/big5_out.txt":"6193ca97c297aa20e09396038d18e938bb7ea331c26f0f2454097296723a0b13","src/test_data/big5_out_ref.txt":"36567691f557df144f6cc520015a87038dfa156f296fcf103b56ae9a718be1fc","src/test_data/euc_kr_in.txt":"c86a7224f3215fa0d04e685622a752fdc72763e8ae076230c7fd62de57ec4074","src/test_data/euc_kr_in_ref.txt":"1f419f4ca47d708b54c73c461545a022ae2e20498fdbf8005a483d752a204883","src/test_data/euc_kr_out.txt":"e7f32e026f70be1e1b58e0047baf7d3d2c520269c4f9b9992e158b4decb0a1a3","src/test_data/euc_kr_out_ref.txt":"c9907857980b20b8e9e3b584482ed6567a2be6185d72237b6322f0404944924e","src/test_data/gb18030_in.txt":"ab7231b2d3e9afacdbd7d7f3b9e5361a7ff9f7e1cfdb4f3bd905b9362b309e53","src/test_data/gb18030_in_ref.txt":"dc5069421adca2043c55f5012b55a76fdff651d22e6e699fd0978f8d5706815c","src/test_data/gb18030_out.txt":"f0208d527f5ca63de7d9a0323be8d5cf12d8a104b2943d92c2701f0c3364dac1","src/test_data/gb18030_out_ref.txt":"6819fe47627e4ea01027003fc514b9f21a1322e732d7f1fb92cc6c5455bc6c07","src/test_data/iso_2022_jp_in.txt":"cd24bbdcb1834e25db54646fbf4c41560a13dc7540f6be3dba4f5d97d44513af","src/test_data/iso_2022_jp_in_ref.txt":"3dc4e6a5e06471942d086b16c9440945e78415f6f3f47e43717e4bc2eac2cdf5","src/test_data/iso_2022_jp_out.txt":"9b6f015329dda6c3f9ee5ce6dbd6fa9c89acc21283e886836c78b8d833480c21","src/test_data/iso_2022_jp_out_ref.txt":"78cb260093a20116ad9a42f43b05d1848c5ab100b6b9a850749809e943884b35","src/test_data/jis0208_in.txt":"6df3030553ffb0a6615bb33dc8ea9dca6d9623a9028e2ffec754ce3c3da824cc","src/test_data/jis0208_in_ref.txt":"3dc4e6a5e06471942d086b16c9440945e78415f6f3f47e43717e4bc2eac2cdf5","src/test_data/jis0208_out.txt":"4ec24477e1675ce750733bdc3c5add1cd27b6bd4ce1f09289564646e9654e857","src/test_data/jis0208_out_ref.txt":"c3e1cef5032b2b1d93a406f31ff940c4e2dfe8859b8b17ca2761fee7a75a0e48","src/test_data/jis0212_in.txt":"c011f0dd72bd7c8cd922df9374ef8d2769a77190514c77f6c62b415852eeb9fe","src/test_data/jis0212_in_ref.txt":"7d9458b3d2f73e7092a7f505c08ce1d233dde18aa679fbcf9889256239cc9e06","src/test_data/shift_jis_in.txt":"02e389ccef0dd2122e63f503899402cb7f797912c2444cc80ab93131116c5524","src/test_data/shift_jis_in_ref.txt":"512f985950ca902e643c88682dba9708b7c38d3c5ec2925168ab00ac94ab19f9","src/test_data/shift_jis_out.txt":"5fbc44da7bf639bf6cfe0fa1fd3eba7102b88f81919c9ea991302712f69426fb","src/test_data/shift_jis_out_ref.txt":"466322c6fed8286c64582731755290c2296508efdd258826e6279686649b481f","src/test_labels_names.rs":"23a2e11b02b3b8d15fb5613a625e3edb2c61e70e3c581abfd638719a4088200d","src/testing.rs":"f59e671e95a98a56f6b573e8c6be4d71e670bf52f7e20eb1605d990aafa1894e","src/utf_16.rs":"c071a147fad38d750c2c247e141b76b929a48007b99f26b2922b9caecdaf2f25","src/utf_8.rs":"7b7d887b347f1aefa03246b028a36a72758a4ce76c28f3b45c19467851aa7839","src/variant.rs":"1fab5363588a1554a7169de8731ea9cded7ac63ea35caabdd1c27a8dde68c27b","src/x_user_defined.rs":"c9c010730dfb9f141d4fed19350c08a21af240913a54bb64f5ca89ff93b6b7d1"},"package":"071a31f4ee85403370b58aca746f01041ede6f0da2730960ad001edc2b71b394"}
\ No newline at end of file
+{"files":{"CONTRIBUTING.md":"ca1901f3e8532fb4cec894fd3664f0eaa898c0c4b961d1b992d1ed54eacf362a","COPYRIGHT":"11789f45bb180841cd362a5eee6789c68ddb573a11105e30768c308a6add0190","Cargo.toml":"42fa83322aa9fd6723b77d35d0cacb92cbb6e7f573ce11c55f5225292866f8f4","Ideas.md":"b7452893f500163868d8de52c09addaf91e1632454ed02e892c467ed7ec39dbd","LICENSE-APACHE":"cfc7749b96f63bd31c3c42b5c471bf756814053e847c10f3eb003417bc523d30","LICENSE-MIT":"3fa4ca83dcc9237839b1bdeb2e6d16bdfb5ec0c5ce42b24694d8bbf0dcbef72c","LICENSE-WHATWG":"838118388fe5c2e7f1dbbaeed13e1c7f3ebf88be91319c7c1d77c18e987d1a50","README.md":"d938e8ab0b9ab67e74a1a4f48f23fdce956d0ad3a3f6147ae7612a92763c88d5","ci/miri.sh":"43cb8d82f49e3bfe2d2274b6ccd6f0714a4188ccef0cecc040829883cfdbee25","doc/Big5.txt":"f73a2edc5cb6c2d140ba6e07f4542e1c4a234950378acde1df93480f0ca0be0b","doc/EUC-JP.txt":"ee2818b907d0137f40a9ab9fd525fc700a44dbdddb6cf0c157a656566bae4bf1","doc/EUC-KR.txt":"71d9e2ccf3b124e8bdfb433c8cf2773fd878077038d0cec3c7237a50f4a78a30","doc/GBK.txt":"c1b522b5a799884e5001da661f42c5a8f4d0acb9ef1d74b206f22b5f65365606","doc/IBM866.txt":"a5a433e804d0f83af785015179fbc1d9b0eaf1f7960efcd04093e136b51fbd0e","doc/ISO-2022-JP.txt":"af86684f5a8f0e2868d7b2c292860140c3d2e5527530ca091f1b28198e8e2fe6","doc/ISO-8859-10.txt":"6d3949ad7c81ca176895101ed81a1db7df1060d64e262880b94bd31bb344ab4d","doc/ISO-8859-13.txt":"3951dd89cf93f7729148091683cf8511f4529388b7dc8dcd0d62eaed55be93fa","doc/ISO-8859-14.txt":"3d330784a0374fd255a38b47949675cc7168c800530534b0a01cac6edc623adc","doc/ISO-8859-15.txt":"24b1084aab5127a85aab99153f86e24694d0a3615f53b5ce23683f97cf66c47a","doc/ISO-8859-16.txt":"ce0272559b92ba76d7a7e476f6424ae4a5cc72e75b183611b08392e44add4d25","doc/ISO-8859-2.txt":"18ceff88c13d1b5ba455a3919b1e3de489045c4c3d2dd7e8527c125c75d54aad","doc/ISO-8859-3.txt":"21798404c68f4f5db59223362f24999da96968c0628427321fccce7d2849a130","doc/ISO-8859-4.txt":"d27f6520c6c5bfbcc19176b71d081cdb3bccde1622bb3e420d5680e812632d53","doc/ISO-8859-5.txt":"a10ec8d6ea7a78ad15da7275f6cb1a3365118527e28f9af6d0d5830501303f3a","doc/ISO-8859-6.txt":"ccda8a2efc96115336bdd77776637b9712425e44fbcf745353b9057fbef144e7","doc/ISO-8859-7.txt":"17900fa1f27a445958f0a77d7d9056be375a6bd7ee4492aa680c7c1500bab85e","doc/ISO-8859-8-I.txt":"8357555646d54265a9b9ffa3e68b08d132312f1561c60108ff9b8b1167b6ecf2","doc/ISO-8859-8.txt":"72cd6f3afb7b4a9c16a66a362473315770b7755d72c86c870e52fc3eba86c8af","doc/KOI8-R.txt":"839cf19a38da994488004ed7814b1f6151640156a9a2af02bf2efca745fb5966","doc/KOI8-U.txt":"0cc76624ed1f024183e2298b7e019957da2c70c8ca06e0fc4e6f353f50a5054f","doc/Shift_JIS.txt":"34c49141818cb9ddbcf59cc858f78a79be8ad148d563f26415108ae1f148443f","doc/UTF-16BE.txt":"e2e280d8acbaa6d2a6b3569d60e17500a285f2baa0df3363dd85537cd5a1ef8f","doc/UTF-16LE.txt":"70bdc170e3fc5298ba68f10125fb5eeb8b077036cc96bb4416c4de396f6d76c1","doc/UTF-8.txt":"ea7bae742e613010ced002cf4b601a737d2203fad65e115611451bc4428f548a","doc/gb18030.txt":"dc71378a8f07a2d8659f69ee81fb8791fef56ba86f124b429978285237bb4a7b","doc/macintosh.txt":"57491e53866711b4672d9b9ff35380b9dac9e0d8e3d6c20bdd6140603687c023","doc/replacement.txt":"4b6c3bbd7999d9d4108a281594bd02d13607e334a95465afff8c2c08d395f0e4","doc/windows-1250.txt":"61296bb6a21cdab602300d32ecfba434cb82de5ac3bc88d58710d2f125e28d39","doc/windows-1251.txt":"7deea1c61dea1485c8ff02db2c7d578db7a9aab63ab1cfd02ec04b515864689e","doc/windows-1252.txt":"933ef3bdddfce5ee132b9f1a1aa8b47423d2587bbe475b19028d0a6d38e180b6","doc/windows-1253.txt":"1a38748b88e99071a5c7b3d5456ead4caedeabab50d50d658be105bc113714de","doc/windows-1254.txt":"f8372f86c6f8d642563cd6ddc025260553292a39423df1683a98670bd7bf2b47","doc/windows-1255.txt":"4e5852494730054e2da258a74e1b9d780abbcdd8ce22ebc218ca2efe9e90493d","doc/windows-1256.txt":"c0879c5172abedead302a406e8f60d9cd9598694a0ffa4fd288ffe4fef7b8ea1","doc/windows-1257.txt":"c28a0c9f964fcb2b46d21f537c402446501a2800670481d6abf9fd9e9018d523","doc/windows-1258.txt":"5019ae4d61805c79aacbf17c93793342dbb098d65a1837783bc3e2c6d6a23602","doc/windows-874.txt":"4ef0e4501c5feba8b17aee1818602ed44b36ca8475db771ce2fc16d392cabecc","doc/x-mac-cyrillic.txt":"58be154d8a888ca3d484b83b44f749823ef339ab27f14d90ca9a856f5050a8bd","doc/x-user-defined.txt":"f9cd07c4321bf5cfb0be4bdddd251072999b04a6cf7a6f5bc63709a84e2c1ffc","generate-encoding-data.py":"be989dd25c6b946e3e8745fdc8e8a80fcf24b3be99ad0b4b78153ba3f6ab6310","rustfmt.toml":"85c1a3b4382fd89e991cbb81b70fb52780472edc064c963943cdaaa56e0a2030","src/ascii.rs":"c44c002641adb5ebc4368707a8cc0a076d2f33e6a5c27b1b69988eb515f5653d","src/big5.rs":"ec6e2913011a38e9a3e825a1731f139a7ca1d5b264fefae51a3cc1a68a57cef9","src/data.rs":"8a617cc57032092d65850eb27e00de687c80aea3299e839a1f58b42d0b35abf3","src/euc_jp.rs":"32047f5b540188c4cb19c07165f846b9786a09f18e315ed3e9bda1293dae52aa","src/euc_kr.rs":"9b25afc72d9378700eecfac58d55ad1c5946d6cd0ccde2c29c08200ef2de6bb9","src/gb18030.rs":"808587168d73f0c80f8520f0ca9b161866ed2efeb17a05e85fdf3b8efe7ba28a","src/handles.rs":"cc83dc0754751d67f5688a65c5e0191cba02f6bacce81a0813a243cba55eef7a","src/iso_2022_jp.rs":"9bb485e82574f4b7d4b2364f0ff276acb6a0bc111758420a3b0ec5e04c196652","src/lib.rs":"1dc07b818e45846b16ddcaf0de46c8862dd7df8099123ec38b95c3f8ad9c91ec","src/macros.rs":"200997f8870de8bfd8cdc475e92115df42108c0df661e49d3d1cbc32056e1d99","src/mem.rs":"0bf34103e0ad1b842a13a082dee2b920b05cf4fb0f145c9ee7f608f4cb4a544f","src/replacement.rs":"7660b34a53f8c1ca2bdfa0e51e843ec28326950952ad8bc96569feb93ac62308","src/shift_jis.rs":"6951ae67e36b1a12fa3a30734957f444d8b1b4ae0e2bde52060b29bd0f16d9d9","src/simd_funcs.rs":"2612aba86e1d201096d7e47a859bc3444f85934cc82d8adc6d39a4304d9eecfc","src/single_byte.rs":"3c9e9c1f946ae622c725ba9421240c1faa9a05e95fa10dd4642a25cb276a1edc","src/test_data/big5_in.txt":"4c5a8691f8dc717311889c63894026d2fb62725a86c4208ca274a9cc8d42a503","src/test_data/big5_in_ref.txt":"99d399e17750cf9c7cf30bb253dbfe35b81c4fcbdead93cfa48b1429213473c7","src/test_data/big5_out.txt":"6193ca97c297aa20e09396038d18e938bb7ea331c26f0f2454097296723a0b13","src/test_data/big5_out_ref.txt":"36567691f557df144f6cc520015a87038dfa156f296fcf103b56ae9a718be1fc","src/test_data/euc_kr_in.txt":"c86a7224f3215fa0d04e685622a752fdc72763e8ae076230c7fd62de57ec4074","src/test_data/euc_kr_in_ref.txt":"1f419f4ca47d708b54c73c461545a022ae2e20498fdbf8005a483d752a204883","src/test_data/euc_kr_out.txt":"e7f32e026f70be1e1b58e0047baf7d3d2c520269c4f9b9992e158b4decb0a1a3","src/test_data/euc_kr_out_ref.txt":"c9907857980b20b8e9e3b584482ed6567a2be6185d72237b6322f0404944924e","src/test_data/gb18030_in.txt":"ab7231b2d3e9afacdbd7d7f3b9e5361a7ff9f7e1cfdb4f3bd905b9362b309e53","src/test_data/gb18030_in_ref.txt":"dc5069421adca2043c55f5012b55a76fdff651d22e6e699fd0978f8d5706815c","src/test_data/gb18030_out.txt":"f0208d527f5ca63de7d9a0323be8d5cf12d8a104b2943d92c2701f0c3364dac1","src/test_data/gb18030_out_ref.txt":"6819fe47627e4ea01027003fc514b9f21a1322e732d7f1fb92cc6c5455bc6c07","src/test_data/iso_2022_jp_in.txt":"cd24bbdcb1834e25db54646fbf4c41560a13dc7540f6be3dba4f5d97d44513af","src/test_data/iso_2022_jp_in_ref.txt":"3dc4e6a5e06471942d086b16c9440945e78415f6f3f47e43717e4bc2eac2cdf5","src/test_data/iso_2022_jp_out.txt":"9b6f015329dda6c3f9ee5ce6dbd6fa9c89acc21283e886836c78b8d833480c21","src/test_data/iso_2022_jp_out_ref.txt":"78cb260093a20116ad9a42f43b05d1848c5ab100b6b9a850749809e943884b35","src/test_data/jis0208_in.txt":"6df3030553ffb0a6615bb33dc8ea9dca6d9623a9028e2ffec754ce3c3da824cc","src/test_data/jis0208_in_ref.txt":"3dc4e6a5e06471942d086b16c9440945e78415f6f3f47e43717e4bc2eac2cdf5","src/test_data/jis0208_out.txt":"4ec24477e1675ce750733bdc3c5add1cd27b6bd4ce1f09289564646e9654e857","src/test_data/jis0208_out_ref.txt":"c3e1cef5032b2b1d93a406f31ff940c4e2dfe8859b8b17ca2761fee7a75a0e48","src/test_data/jis0212_in.txt":"c011f0dd72bd7c8cd922df9374ef8d2769a77190514c77f6c62b415852eeb9fe","src/test_data/jis0212_in_ref.txt":"7d9458b3d2f73e7092a7f505c08ce1d233dde18aa679fbcf9889256239cc9e06","src/test_data/shift_jis_in.txt":"02e389ccef0dd2122e63f503899402cb7f797912c2444cc80ab93131116c5524","src/test_data/shift_jis_in_ref.txt":"512f985950ca902e643c88682dba9708b7c38d3c5ec2925168ab00ac94ab19f9","src/test_data/shift_jis_out.txt":"5fbc44da7bf639bf6cfe0fa1fd3eba7102b88f81919c9ea991302712f69426fb","src/test_data/shift_jis_out_ref.txt":"466322c6fed8286c64582731755290c2296508efdd258826e6279686649b481f","src/test_labels_names.rs":"23a2e11b02b3b8d15fb5613a625e3edb2c61e70e3c581abfd638719a4088200d","src/testing.rs":"f59e671e95a98a56f6b573e8c6be4d71e670bf52f7e20eb1605d990aafa1894e","src/utf_16.rs":"c071a147fad38d750c2c247e141b76b929a48007b99f26b2922b9caecdaf2f25","src/utf_8.rs":"7b7d887b347f1aefa03246b028a36a72758a4ce76c28f3b45c19467851aa7839","src/variant.rs":"1fab5363588a1554a7169de8731ea9cded7ac63ea35caabdd1c27a8dde68c27b","src/x_user_defined.rs":"c9c010730dfb9f141d4fed19350c08a21af240913a54bb64f5ca89ff93b6b7d1"},"package":"7268b386296a025e474d5140678f75d6de9493ae55a5d709eeb9dd08149945e1"}
\ No newline at end of file
diff --git a/third_party/rust/encoding_rs/Cargo.toml b/third_party/rust/encoding_rs/Cargo.toml
--- a/third_party/rust/encoding_rs/Cargo.toml
+++ b/third_party/rust/encoding_rs/Cargo.toml
@@ -7,17 +7,17 @@
 #
 # If you are reading this file be aware that the original Cargo.toml
 # will likely look very different (and much more reasonable).
 # See Cargo.toml.orig for the original contents.
 
 [package]
 edition = "2018"
 name = "encoding_rs"
-version = "0.8.32"
+version = "0.8.33"
 authors = ["Henri Sivonen <hsivonen@hsivonen.fi>"]
 description = "A Gecko-oriented implementation of the Encoding Standard"
 homepage = "https://docs.rs/encoding_rs/"
 documentation = "https://docs.rs/encoding_rs/"
 readme = "README.md"
 keywords = [
     "encoding",
     "web",
@@ -35,19 +35,18 @@ repository = "https://github.com/hsivone
 
 [profile.release]
 lto = true
 
 [dependencies.cfg-if]
 version = "1.0"
 
 [dependencies.packed_simd]
-version = "0.3.4"
+version = "0.3.9"
 optional = true
-package = "packed_simd_2"
 
 [dependencies.serde]
 version = "1.0"
 optional = true
 
 [dev-dependencies.bincode]
 version = "1.0"
 
diff --git a/third_party/rust/encoding_rs/README.md b/third_party/rust/encoding_rs/README.md
--- a/third_party/rust/encoding_rs/README.md
+++ b/third_party/rust/encoding_rs/README.md
@@ -162,17 +162,17 @@ wrappers.
 * [C++](https://github.com/hsivonen/recode_cpp)
 
 ## Optional features
 
 There are currently these optional cargo features:
 
 ### `simd-accel`
 
-Enables SIMD acceleration using the nightly-dependent `packed_simd_2` crate.
+Enables SIMD acceleration using the nightly-dependent `packed_simd` crate.
 
 This is an opt-in feature, because enabling this feature _opts out_ of Rust's
 guarantees of future compilers compiling old code (aka. "stability story").
 
 Currently, this has not been tested to be an improvement except for these
 targets:
 
 * x86_64
@@ -183,17 +183,17 @@ targets:
 If you use nightly Rust, you use targets whose first component is one of the
 above, and you are prepared _to have to revise your configuration when updating
 Rust_, you should enable this feature. Otherwise, please _do not_ enable this
 feature.
 
 _Note!_ If you are compiling for a target that does not have 128-bit SIMD
 enabled as part of the target definition and you are enabling 128-bit SIMD
 using `-C target_feature`, you need to enable the `core_arch` Cargo feature
-for `packed_simd_2` to compile a crates.io snapshot of `core_arch` instead of
+for `packed_simd` to compile a crates.io snapshot of `core_arch` instead of
 using the standard-library copy of `core::arch`, because the `core::arch`
 module of the pre-compiled standard library has been compiled with the
 assumption that the CPU doesn't have 128-bit SIMD. At present this applies
 mainly to 32-bit ARM targets whose first component does not include the
 substring `neon`.
 
 The encoding_rs side of things has not been properly set up for POWER,
 PowerPC, MIPS, etc., SIMD at this time, so even if you were to follow
@@ -445,16 +445,20 @@ To regenerate the generated code:
       adapted to Rust in rust-encoding.~
 - [x] Add actually fast CJK encode options.
 - [ ] ~Investigate [Bob Steagall's lookup table acceleration for UTF-8](https://github.com/BobSteagall/CppNow2018/blob/master/FastConversionFromUTF-8/Fast%20Conversion%20From%20UTF-8%20with%20C%2B%2B%2C%20DFAs%2C%20and%20SSE%20Intrinsics%20-%20Bob%20Steagall%20-%20C%2B%2BNow%202018.pdf).~
 - [x] Provide a build mode that works without `alloc` (with lesser API surface).
 - [ ] Migrate to `std::simd` once it is stable and declare 1.0.
 
 ## Release Notes
 
+### 0.8.33
+
+* Use `packed_simd` instead of `packed_simd_2` again now that updates are back under the `packed_simd` name. Only affects the `simd-accel` optional nightly feature.
+
 ### 0.8.32
 
 * Removed `build.rs`. (This removal should resolve false positives reported by some antivirus products. This may break some build configurations that have opted out of Rust's guarantees against future build breakage.)
 * Internal change to what API is used for reinterpreting the lane configuration of SIMD vectors.
 * Documentation improvements.
 
 ### 0.8.31
 
diff --git a/third_party/rust/packed_simd_2/.appveyor.yml b/third_party/rust/packed_simd/.appveyor.yml
rename from third_party/rust/packed_simd_2/.appveyor.yml
rename to third_party/rust/packed_simd/.appveyor.yml
diff --git a/third_party/rust/packed_simd/.cargo-checksum.json b/third_party/rust/packed_simd/.cargo-checksum.json
new file mode 100644
--- /dev/null
+++ b/third_party/rust/packed_simd/.cargo-checksum.json
@@ -0,0 +1,1 @@
+{"files":{"Cargo.toml":"ae219b55eab1f8cd8c3497d7327ea0e5426dba23d2446f7981ca799ad80b6a52","LICENSE-APACHE":"a60eea817514531668d7e00765731449fe14d059d3249e0bc93b36de45f759f2","LICENSE-MIT":"6485b8ed310d3f0340bf1ad1f47645069ce4069dcc6bb46c7d5c6faf41de1fdb","README.md":"c4ac7027a9ab7d7858aa8957d7454dbfcdbb81e605b6a171f05310cc3cad3762","bors.toml":"dee881dc69b9b7834e4eba5d95c3ed5a416d4628815a167d6a22d4cb4fb064b8","build.rs":"019ed29c43989782d8eec3a961654cfc172d7a7898da4eca8f654700af7e1988","ci/all.sh":"2ae6b2445b4db83833e40b37efd0016c6b9879ee988b9b3ef94db5439a3e1606","ci/android-install-ndk.sh":"bdcf93ba9043ac1184e2c504a3d40c47c6c1601d882e0f0a27a8eb56fbabcb5f","ci/android-install-sdk.sh":"3490432022c5c8f5a115c084f7a9aca1626f96c0c87ffb62019228c4346b47e4","ci/android-sysimage.sh":"ebf4e5daa1f0fe1b2092b79f0f3f161c4c4275cb744e52352c4d81ab451e4c5a","ci/benchmark.sh":"b61d19ef6b90deba8fb79dee74c8b062d94844676293da346da87bb78a9a49a4","ci/deploy_and_run_on_ios_simulator.rs":"ec8ecf82d92072676aa47f0d1a3d021b60a7ae3531153ef12d2ff4541fc294dc","ci/docker/aarch64-linux-android/Dockerfile":"ace2e7d33c87bc0f6d3962a4a3408c04557646f7f51ab99cfbf574906796b016","ci/docker/aarch64-unknown-linux-gnu/Dockerfile":"da88c0d50f16dc08448c7fdf1fa5ed2cbe576acf9e7dd85b5b818621b2a8c702","ci/docker/arm-unknown-linux-gnueabi/Dockerfile":"bb5f8ae890707c128652290ffc544447643bf12037ddd73c6ad6989f848cb380","ci/docker/arm-unknown-linux-gnueabihf/Dockerfile":"1afaefcbc05b740859acd4e067bc92439be6bcbe8f2e9678474fb434bcd398d9","ci/docker/armv7-linux-androideabi/Dockerfile":"370e55d3330a413a3ccf677b3afb3e0ef9018a5fab263faa97ae8ac017fc2286","ci/docker/armv7-unknown-linux-gnueabihf/Dockerfile":"8282ea707a94109beed47a57574755e2d58401735904a03f85fb64c578c53b4f","ci/docker/i586-unknown-linux-gnu/Dockerfile":"49792922269f371bd29da4727e9085101b27be67a6b97755d0196c63317f7abb","ci/docker/i686-unknown-linux-gnu/Dockerfile":"49792922269f371bd29da4727e9085101b27be67a6b97755d0196c63317f7abb","ci/docker/mips-unknown-linux-gnu/Dockerfile":"b2ebc25797612c4f8395fe9d407725156044955bfbcf442036b7f55b43a5f9da","ci/docker/mips64-unknown-linux-gnuabi64/Dockerfile":"b0c1692ac65bc56dd30494b1993d8e929c48cc9c4b92029b7c7592af6d4f9220","ci/docker/mips64el-unknown-linux-gnuabi64/Dockerfile":"4e9249c179300138141d0b2b7401b11897f64aed69f541f078c1db4594df2827","ci/docker/mipsel-unknown-linux-musl/Dockerfile":"3164c52b0dcbb01afa78292b15b5c43503ccf0491cf6eb801ec2bf22ae274e52","ci/docker/powerpc-unknown-linux-gnu/Dockerfile":"ae8274309928620a5dd232a46264e05399bb746288ebee3843a71c4162208cc3","ci/docker/powerpc64-unknown-linux-gnu/Dockerfile":"ba5fbc4bf3bb91cd50b407248da31225681efc8f2be7618f4a0ab1219b389508","ci/docker/powerpc64le-unknown-linux-gnu/Dockerfile":"53f97f8b9b5aca7534b9bf9ea48f35175052cd2a560a107e01ad270731c032fc","ci/docker/s390x-unknown-linux-gnu/Dockerfile":"89f5421cf06d817ae94092987e914472ef384ad2d1fff2735be3d8786ba11214","ci/docker/sparc64-unknown-linux-gnu/Dockerfile":"83eba19576486f9d10d7c037d669d72b31a65565a479f30b22aab36aaa2ff8dc","ci/docker/thumbv7neon-linux-androideabi/Dockerfile":"c2decd5591bd7a09378901bef629cd944acf052eb55e4f35b79eb9cb4d62246a","ci/docker/thumbv7neon-unknown-linux-gnueabihf/Dockerfile":"51955a8bf3c4d440f47382af6f5426ebff94ab01a04da36175babda9a057740f","ci/docker/wasm32-unknown-unknown/Dockerfile":"b982b421c70db476900df5b60e19ef8815e6c7dae22687225002780cab7b0a76","ci/docker/x86_64-linux-android/Dockerfile":"a17ebdb186ce2dd6b62100b5a439e05a1ab9adab113e2508843e121aaea52992","ci/docker/x86_64-unknown-linux-gnu-emulated/Dockerfile":"44b6203d9290bfdc53d81219f0937e1110847a23dd982ec8c4de388354f01536","ci/docker/x86_64-unknown-linux-gnu/Dockerfile":"7f4e3ca5fa288ea70edb4d1f75309708cd30b192e2e4444e61c4d5b3b58f89cf","ci/dox.sh":"434e9611c52e389312d2b03564adf09429f10cc76fe66a8644adb104903b87b7","ci/linux-s390x.sh":"d6b732d7795b4ba131326aff893bca6228a7d2eb0e9402f135705413dbbe0dce","ci/linux-sparc64.sh":"c92966838b1ab7ad3b7a344833ee726aba6b647cf5952e56f0ad1ba420b13325","ci/lld-shim.rs":"3d7f71ec23a49e2b67f694a0168786f9a954dda15f5a138815d966643fd3fcc3","ci/max_line_width.sh":"0a1518bba4c9ecaa55694cb2e9930d0e19c265baabf73143f17f9cf285aaa5bb","ci/run-docker.sh":"92e036390ad9b0d16f109579df1b5ced2e72e9afea40c7d011400ebd3a2a90de","ci/run.sh":"9afabc961e0ee83b87201f3fd554c19e5b0c36f3a95d013595e276c9882dd0a4","ci/run_examples.sh":"d1a23c6c35374a0678ba5114b9b8fefd8be0a79e774872a8bf0898d1baca18d0","ci/runtest-android.rs":"145a8e9799a5223975061fe7e586ade5669ee4877a7d7a4cf6b4ab48e8e36c7c","ci/setup_benchmarks.sh":"fae3960023f6f3d1388cd2ad22fdbab4b075f1f29dd4292d7994a20783beb6cf","ci/test-runner-linux":"c8aa6025cff5306f4f31d0c61dc5f9d4dd5a1d189ab613ef8d4c367c694d9ccd","contributing.md":"2d2629310ad4d464c482bdbb5819f0d6ce223c576aeef2cdce6a1f6857085ea5","perf-guide/book.toml":"115a98284126c6b180178b44713314cc494f08a71662ee2ce15cf67f17a51064","perf-guide/src/SUMMARY.md":"3e03bffc991fdc2050f3d51842d72d9d21ea6abab56a3baf3b2d5973a78b89e1","perf-guide/src/ascii.css":"29afb08833b2fe2250f0412e1fa1161a2432a0820a14953c87124407417c741a","perf-guide/src/bound_checks.md":"5e4991ff58a183ef0cd9fdc1feb4cd12d083b44bdf87393bbb0927808ef3ce7d","perf-guide/src/float-math/approx.md":"8c09032fa2d795a0c5db1775826c850d28eb2627846d0965c60ee72de63735ad","perf-guide/src/float-math/fma.md":"311076ba4b741d604a82e74b83a8d7e8c318fcbd7f64c4392d1cf5af95c60243","perf-guide/src/float-math/fp.md":"04153e775ab6e4f0d7837bcc515230d327b04edfa34c84ce9c9e10ebaeef2be8","perf-guide/src/float-math/svml.md":"0798873b8eedaeda5fed62dc91645b57c20775a02d3cd74d8bd06958f1516506","perf-guide/src/introduction.md":"9f5a19e9e6751f25d2daad39891a0cc600974527ec4c8305843f9618910671bd","perf-guide/src/prof/linux.md":"447731eb5de7d69166728fdbc5ecb0c0c9db678ea493b45a592d67dd002184c0","perf-guide/src/prof/mca.md":"f56d54f3d20e7aa4d32052186e8237b03d65971eb5d112802b442570ff11d344","perf-guide/src/prof/profiling.md":"8a650c0fd6ede0964789bb6577557eeef1d8226a896788602ce61528e260e43c","perf-guide/src/target-feature/attribute.md":"615f88dca0a707b6c416fa605435dd6e1fb5361cc639429cbf68cd87624bd78b","perf-guide/src/target-feature/features.md":"17077760ff24c006b606dd21889c53d87228f4311f3ba3a574f9afdeacd86165","perf-guide/src/target-feature/inlining.md":"7ed1d7068d8173a00d84c16cfe5871cd68b9f04f8d0cca2d01ebc84957ebf2f6","perf-guide/src/target-feature/practice.md":"c4b371842e0086df178488fec97f20def8f0c62ee588bcd25fd948b9b1fa227e","perf-guide/src/target-feature/runtime.md":"835425f5ee597fb3e51d36e725a81ebee29f4561231d19563cd4da81dbb1cfcb","perf-guide/src/target-feature/rustflags.md":"01197acf6f0adec8db32b8591811f69cecb6555a2b05dc5d5ec27d0e3f7b065e","perf-guide/src/vert-hor-ops.md":"c6211c0ee91e60552ec592d89d9d957eedc21dee3cbd89e1ad6765ea06a27471","rust-toolchain":"58bea07cb6d97f9cfcd5c8f98b1feca0fb81cce5b0bf29a8e70ed2641956e9a6","rustfmt.toml":"d99a43f3f8ef9e425cf01c333fba9f0051f888f5d87ab4e8f63c2f7d0fe6620f","src/api.rs":"45508c6c0241519fc01a7f00c9105554c24c312c4e46900ef9c75139ea438305","src/api/bit_manip.rs":"27f3097fc0a11e3c4107049d9779e680dcd67407a066704008a6b9c4fd529e05","src/api/bitmask.rs":"058ebc38a2e0363f07a441d3e9a4775aaec57ccb170a0e5d5efa5dc4743ab07b","src/api/cast.rs":"03b94a3d316ac7b7be7068810044911e965e889a0ace7bae762749ca74a92747","src/api/cast/macros.rs":"b0a14d0c83ad2ebb7a275180f6d9e3f2bc312ba57a7d3d6c39fad4e0f20f9408","src/api/cast/v128.rs":"edd0994efac4379dff26e178423a52dbb3ffeb38b1fc97cae975d744c00b4fb6","src/api/cast/v16.rs":"96bd98c2d21b0663abe6c0ab33005b1fa693f3db7ee6795351391343863484da","src/api/cast/v256.rs":"8c31fe91f5e78ef737dfba6979cc1240210cb094a89d284fe459bf8a991ca24b","src/api/cast/v32.rs":"a99a79dd84d2a5e6adf9db98705675915bd03fd1287d489c7fe38e84d7e4a086","src/api/cast/v512.rs":"c0dd526f41ed7b8a71c3743d91267554ec0a0c75834ccc2e3ecb0ef3004af642","src/api/cast/v64.rs":"6572fdba2a1241a6cd666d3f0cce3306cd2cb7e5e236172e59d5d4351c8a88af","src/api/cmp.rs":"357c3a2a09c6d4611c32dd7fa95be2fae933d513e229026ec9b44451a77b884e","src/api/cmp/eq.rs":"60f70f355bae4cb5b17db53204cacc3890f70670611c17df638d4c04f7cc8075","src/api/cmp/ord.rs":"589f7234761c294fa5df8f525bc4acd5a47cdb602207d524a0d4e19804cd9695","src/api/cmp/partial_eq.rs":"902ccb8aa01fd5738b30ba0b712669c21d4801958907e03bad23432c7dba0198","src/api/cmp/partial_ord.rs":"9db0c37d7434cdfc62d8d66912e972fa3d8c115ab2af051a6f45e414bd3e4f1c","src/api/cmp/vertical.rs":"de3d62f38eba817299aa16f1e1939954c9a447e316509397465c2830852ba053","src/api/default.rs":"67bf21c134127d12a7028c8b88a57f0ceee8ccbd74976da8ca74eb9f16a174d5","src/api/fmt.rs":"67fb804bb86b6cd77cf8cd492b5733ce437071b66fe3297278b8a6552c325dda","src/api/fmt/binary.rs":"02b2b287f7404f8a983813cf70c87108c8da3835578b63ab303116885f609413","src/api/fmt/debug.rs":"56e1c3bdc092747344fffaafff9da7163ee7827857f6fb7cb1c9923eca4f6fa0","src/api/fmt/lower_hex.rs":"558fd592f7f485712fb051509cecc7174a21e6bf62e5ce64766e75afc97bb8e1","src/api/fmt/octal.rs":"3b2e70877a4f368c7704f8e254236c014c365c74d93371c1feb5f030e6c66422","src/api/fmt/upper_hex.rs":"2a442f666bc80e22d41f903f881238fe114dd49344c3ed69849250e853cafc5d","src/api/from.rs":"2e599d8329cb05eaf06224cc441355c4b7b51254fc19256619333be8c149d444","src/api/from/from_array.rs":"5d2cc700568376bf6ee1fe5e406da3bc2d488ff155644bf73d06a1349b73fc53","src/api/from/from_vector.rs":"9764371aa9e6005aace74dea14f59e5611a095b7cf42707940924749282c52f0","src/api/hash.rs":"5076ece87969592c876486f5b1ea8affbeaec379d1a14a30859e0aa5592019de","src/api/into_bits.rs":"8f8011627250e23e66b5c0ca641afb079d8232674bb1354140b536bdbea63e55","src/api/into_bits/arch_specific.rs":"e7445021f3908326bfee758835e5fc5ad56aa1baa77fc1c58abe4350c66c670a","src/api/into_bits/macros.rs":"bb4fe99be2af6a21d805efab44c8e4e61a7b2adb42a65504a0cf26d13efdadcd","src/api/into_bits/v128.rs":"145a44922b09a5ca5b62d88a461d327d399a997a15db4b11d7b17e554a9fa4c0","src/api/into_bits/v16.rs":"f4f4f61ba88aa51b158ec56ca3dce234349aea0daf2b3029a14ab5125d1e41e5","src/api/into_bits/v256.rs":"8cea9c5d9809f11323cb7cdc53b83df593fd17caf926251e412ae9777bed547f","src/api/into_bits/v32.rs":"905ba683d342fa32f4202b80bb46530807bd0a5b588f6c2e8c9f475223c47775","src/api/into_bits/v512.rs":"e25afa1fbf088a5d58e7d75d197b6cd4c56637ea28542ba18e46a451f29d04e7","src/api/into_bits/v64.rs":"d6238022ccff7b92e55b3f6017fc269acb6f36330a6d7e8fb389853a0f1b6478","src/api/math.rs":"8b2a2fc651917a850539f993aa0b9e5bf4da67b11685285b8de8cdca311719ec","src/api/math/float.rs":"969a75cdb3743c5ac7cde653d1a7f659ac65f2a5afb004c9928a7b34b79c3e39","src/api/math/float/abs.rs":"5b6b2701e2e11135b7ce58a05052ea8120e10e4702c95d046b9d21b827b26bf8","src/api/math/float/consts.rs":"6302c9261da4291d144d5bb53493cdd073498feb40955fb6860ea3c4d06c978a","src/api/math/float/cos.rs":"4c2dd7173728ef189314f1576c9486e03be21b7da98843b2f9011282a7979e31","src/api/math/float/exp.rs":"7c6d5f1e304f498a01cfa23b92380c815d7da0ad94eae3483783bc377d287eef","src/api/math/float/ln.rs":"54c7583f3df793b39ff57534fade27b41bb992439e5dc178252f5ca3190a3e54","src/api/math/float/mul_add.rs":"62cac77660d20159276d4c9ef066eb90c81cbddb808e8e157182c607625ad2eb","src/api/math/float/mul_adde.rs":"bae056ee9f3a70df39ec3c3b2f6437c65303888a7b843ef1a5bcf1f5aca0e602","src/api/math/float/powf.rs":"9ddb938984b36d39d82a82f862f80df8f7fb013f1d222d45698d41d88472f568","src/api/math/float/recpre.rs":"589225794ff1dbf31158dff660e6d4509ecc8befbb57c633900dea5ac0b840d6","src/api/math/float/rsqrte.rs":"a32abdcc318d7ccc8448231f54d75b884b7cbeb03a7d595713ab6243036f4dbf","src/api/math/float/sin.rs":"cbd3622b7df74f19691743001c8cf747a201f8977ad90542fee915f37dcd1e49","src/api/math/float/sqrt.rs":"0c66d5d63fb08e4d99c6b82a8828e41173aff1ac9fa1a2764a11fac217ccf2ac","src/api/math/float/sqrte.rs":"731e1c9f321b662accdd27dacb3aac2e8043b7aecb2f2161dde733bd9f025362","src/api/math/float/tanh.rs":"e57940434cc05981b086f0f3b92d32caceb38d67b90aebce5d3ed8e07c80538f","src/api/minimal.rs":"1f22bcc528555444e76de569ec0ae2029b9ae9d04805efeafa93369c8098036b","src/api/minimal/iuf.rs":"819cff26d3e196f807645bcc1d79eb27d9f175edb89910f2274d52a1e913cd11","src/api/minimal/mask.rs":"0cae10ae1fc65f5070e686c0c79bfba27b86b33d6c399367bd4848fb367dcec4","src/api/minimal/ptr.rs":"f74d7a4925d7209faebc26ea8315259cb2c08ec65789a70869e595649a9bc39a","src/api/ops.rs":"3e273b277a0f3019d42c3c59ca94a5afd4885d5ae6d2182e5089bbeec9de42ee","src/api/ops/scalar_arithmetic.rs":"d2d5ad897a59dd0787544f927e0e7ca4072c3e58b0f4a2324083312b0d5a21d7","src/api/ops/scalar_bitwise.rs":"482204e459ca6be79568e1c9f70adbe2d2151412ddf122fb2161be8ebb51c40c","src/api/ops/scalar_mask_bitwise.rs":"c250f52042e37b22d57256c80d4604104cfd2fbe2a2e127c676267270ca5d350","src/api/ops/scalar_shifts.rs":"c4773d435c3f9da4454327e6fbb2b5b41a1c0ebb1cca7372e69dc7a344a1b6e4","src/api/ops/vector_arithmetic.rs":"ddca15d09ddeef502c2ed66117a62300ca65d87e959e8b622d767bdf1c307910","src/api/ops/vector_bitwise.rs":"b3968f7005b649edcc22a54e2379b14d5ee19045f2e784029805781ae043b5ee","src/api/ops/vector_float_min_max.rs":"76bf8cb607e2c442923c1da1061a6b80d742d607408033c2a3761161114cf2a0","src/api/ops/vector_int_min_max.rs":"a378789c6ff9b32a51fbd0a97ffd36ed102cd1fe6a067d2b02017c1df342def6","src/api/ops/vector_mask_bitwise.rs":"5052d18517d765415d40327e6e8e55a312daaca0a5e2aec959bfa54b1675f9c8","src/api/ops/vector_neg.rs":"5c62f6b0221983cdbd23cd0a3af3672e6ba1255f0dfe8b19aae6fbd6503e231b","src/api/ops/vector_rotates.rs":"6c3f761d9d551f6365a8a95539ceace4b1a02e0b12d144f34ed68db94e88cff4","src/api/ops/vector_shifts.rs":"e510be14127c0ffd58a2573a39701da3557d66bedec09837ac8bbd44d579da00","src/api/ptr.rs":"8a793251bed6130dcfb2f1519ceaa18b751bbb15875928d0fb6deb5a5e07523a","src/api/ptr/gather_scatter.rs":"3d614f9d5b4ca201a9f7e46af4405e1d2c28ecee1620297c23b52e37b92cc0ea","src/api/reductions.rs":"ae5baca81352ecd44526d6c30c0a1feeda475ec73ddd3c3ec6b14e944e5448ee","src/api/reductions/bitwise.rs":"8bf910ae226188bd15fc7e125f058cd2566b6186fcd0cd8fd020f352c39ce139","src/api/reductions/float_arithmetic.rs":"47a5679896db2cbb56c31372fe42143da015b6beae7db5d2f3a0309ddf427ae1","src/api/reductions/integer_arithmetic.rs":"c2df3cf7493cca4174f2c65aea422a3d20d8a23af03f8d57cef72c19fee8f20d","src/api/reductions/mask.rs":"db83327a950e33a317f37fd33ca4e20c347fb415975ec024f3e23da8509425af","src/api/reductions/min_max.rs":"6af8c9aa45c69961b1b6fc205395f4767d4421869fb105fb3d563c5605fc13cd","src/api/select.rs":"6b07e7e8026df561f7307221a896f0fbb272536f41b9109040ac094c24c69331","src/api/shuffle.rs":"be7faff9b59654926df12897b2f98a4baa7d6acf2af1aaf93d388ba6e96f83ec","src/api/shuffle1_dyn.rs":"bfea5a91905b31444e9ef7ca6eddb7a9606b7e22d3f71bb842eb2795a0346620","src/api/slice.rs":"ee87484e8af329547b9a5d4f2a69e8bed6ea10bbd96270d706083843d4eea2ac","src/api/slice/from_slice.rs":"3735363000737104a8fc5f394ad8c31ec14e885952bd57647dd2a84001aee0a6","src/api/slice/write_to_slice.rs":"79d09c64d00724783c77c42e4583eeec97b18db94cf2ae146b564c3f85cfefd6","src/api/swap_bytes.rs":"05b4262eaade2f63e6cd3b780c19a03aecd2459d4cc4360051fc088887179a6e","src/codegen.rs":"db4f232fb9f5728db310b87dc8c4733be48afacab1053798c06106bef9a42b05","src/codegen/bit_manip.rs":"525ea6ff7ad1e043b6f6136992166f1803ed5563b7f6fc292c1c40257d20e264","src/codegen/llvm.rs":"12e748b4928c3be6cc12b4165c3041a3d0efccf6195338ecd3d88b8fdb0bbcc7","src/codegen/math.rs":"dfcf02ad34e2fdfe22c3f1cc2822001cc895e65031b4d06e585e5047839febb7","src/codegen/math/float.rs":"b2f31f479c5c70a6ff9ad33872c1e65506f72882b77a2e3f9e71c42e92af9355","src/codegen/math/float/abs.rs":"d5aaadcf540bdb9b4264dca6471a255fd7bf509e763bef0239c0144a68466fea","src/codegen/math/float/cos.rs":"17f28d2900c852dca221fa9c92a9cd5fe7fd2df8d427bbc60216c749b2be013d","src/codegen/math/float/cos_pi.rs":"dbaf9f443f9846a491d4ec52210a7b5835dd593b03366e3135b05c37d70f9d6c","src/codegen/math/float/exp.rs":"d300058a4bcc7ae7976f216f81902cd73a9e603ad63880dff3bbc866c27a9f37","src/codegen/math/float/ln.rs":"c851e211e43f8256093ba75b03ae0c307c9962ee66d94f09b4dd80068190cbdf","src/codegen/math/float/macros.rs":"fc9924869ed85e4795983af228cacf23158f4f35919adce16c920ad4a3f0a009","src/codegen/math/float/mul_add.rs":"041a5b69d5991d93ef795351b17560c10faf80b78fd26ad7df42a239b32cf9de","src/codegen/math/float/mul_adde.rs":"d71d5f0f3333b62a7439b823cb7adf5340ea1555ce820fb4a3f4cb922f73f5f5","src/codegen/math/float/powf.rs":"9742c3877f1a5509ca5c9492a40884b6579ba6dd11c26b7112e63f70666b395d","src/codegen/math/float/sin.rs":"0e9868d35531566509f3a01d85d5253045eb4afa8525d8407dcc1f5f33c56036","src/codegen/math/float/sin_cos_pi.rs":"8e6b6142d7dd240cdb36669722e82ab9810a2261e86e659f7d97a942ad8b1258","src/codegen/math/float/sin_pi.rs":"bb6d39db8f921e03a301fc5206ac1a61a97def8a2cb83b87ccf189f3fc48d548","src/codegen/math/float/sqrt.rs":"e6ebb0c5f428efad1f672b9a8fe4e58534dbf1ea5a8fe092ce5ce76b52fe89cb","src/codegen/math/float/sqrte.rs":"23acfaea38d0e081a6d9021c1094e813d0cfd12c58c1eca9662aade5e625d51c","src/codegen/math/float/tanh.rs":"816fd107f134920fb1a21cd792029d4b89306f6cf16d6f030cc1136823b033e7","src/codegen/pointer_sized_int.rs":"6ca13c214b6cf7e0929dbe18e96a16fc0bb7d8799608df29c4c8115490f99e01","src/codegen/reductions.rs":"8eb18ebac76985d2aa30262a2edd8cb004230b511a765d657525f677a585c12c","src/codegen/reductions/mask.rs":"e67f35a1f4d156a4894a2d6ea5a935b4d898cf70eefb2715f5c1cc165e776c11","src/codegen/reductions/mask/aarch64.rs":"84b101c17cad1ede4eb6d38cada0ac7da239dba8cea3badd3829b967e558431f","src/codegen/reductions/mask/arm.rs":"aaa07129bd078ae7e677cf8b8e67ec9f30536606a0c7ed1baaa18fd1793bb218","src/codegen/reductions/mask/fallback.rs":"3eb9319d2c7cf19216b607b8459612c4e027b643cf11b036937d36896bf76786","src/codegen/reductions/mask/fallback_impl.rs":"76547f396e55ef403327c77c314cf8db8c7a5c9b9819bfb925abeacf130249e5","src/codegen/reductions/mask/x86.rs":"36dcd8af4ab99730a078ed113d3955f74eb1a2876e2e6d9f224e0ff462c216d1","src/codegen/reductions/mask/x86/avx.rs":"3a40868b38c86e35aefb96d7578de6322efe89d8135e0366359b54ddd06f861a","src/codegen/reductions/mask/x86/avx2.rs":"677aed3f056285285daa3adff8bc65e739630b4424defa6d9665e160f027507e","src/codegen/reductions/mask/x86/sse.rs":"8522f6ed03f6c32dd577d4298df477c08aeaaa38563706f29096e1911ed731f2","src/codegen/reductions/mask/x86/sse2.rs":"54ec56e49b0c6841eccb719e4f310d65fe767c04136b2ec20bd8b9d7d9897b9e","src/codegen/shuffle.rs":"1ec2930f4e1acc43ac30b518af298d466a79e9e75734a51c380b7810efd1a27f","src/codegen/shuffle1_dyn.rs":"3f13ca1597378758d05106bf5ff3715eee531f3cb6d88f48b9182bd6c9386b51","src/codegen/swap_bytes.rs":"c67c86e91ca3fc77539e0efcea081a3c62548cccf503963ae408f2e86f4e6a21","src/codegen/v128.rs":"94226b31ec403d18d9d2fe06713f147c9c79e9b5f9105089088266313f843185","src/codegen/v16.rs":"ddec4ffb66b6f7aaffb9a1780c5ddba82557abd74f45073d335047e04cf74924","src/codegen/v256.rs":"6b63917f0444118d6b1595bff2045e59b97c4d24012bd575f69f1f0efc5a0241","src/codegen/v32.rs":"3477b3c5540aed86e61e2f5807dd31db947413cec9181c587d93ed6ec74f0eba","src/codegen/v512.rs":"5854f99d3aabc4cd42b28a20d9ce447756dc2ba024a409a69b6a8ae1f1842fc5","src/codegen/v64.rs":"e9e89caebfe63d10c0cbca61e4dfdba3b7e02ee0989170f80beed23237ddd950","src/codegen/vPtr.rs":"f0753b405cdc865bdf8e82c6505f299ea1f96136239ebbaf7f9ce93d310764b8","src/codegen/vSize.rs":"c89f5fdeb28ac4c8272ed1816fce03d9d95308cc32bb2533bd8b20cd5ac102ac","src/lib.rs":"05048c6a85ec65cf902d9dd8f757a3f76392b703a6794ea71f0d41500a89f78f","src/masks.rs":"70fc0abe4c2907ce2a491c574e1cfb9f3423385da2e1a923a48c9c13f8ba6ed8","src/sealed.rs":"ae7fdeaf5d84cd7710ed730ca72ca7eaba93df6cb0acb183e5c0a7327acf197f","src/testing.rs":"896669c08d8c801448a4d2fadc9d633eda0fbe879d229997e2a182e31278e469","src/testing/macros.rs":"403bbc5ecb7c786fe36156df302d0c07a8122408dbb15f7474d7682224ba1106","src/testing/utils.rs":"41912a92266dfe884647fc035e4242fd746100df8e839808ae0397af3759a3c8","src/v128.rs":"16cf9a8e7156b899ee9b9cd3f2dba9d13ec63289bea8c3ee9ae2e43ad9510288","src/v16.rs":"cb6465cf1e00bf530183af1819b9fe3d7eec978f8765d5e85d9b58a39a4b4045","src/v256.rs":"fe235017da18c7f3c361831c60e3173ad304d8ea1e95d64ebebc79da2d708511","src/v32.rs":"145d347855bac59b2de6508f9e594654e6c330423af9edc0e2ac8f4d1abdf45e","src/v512.rs":"f372f277f3e62eb5c945bb1c460333fdb17b6974fcc876633788ff53bded9599","src/v64.rs":"0b8079881b71575e3414be0b7f8f7eaba65281ba6732f2b2f61f73e95b6f48f7","src/vPtr.rs":"8b3e433d487180bb4304ff71245ecad90f0010f43e139a72027b672abe58facc","src/vSize.rs":"eda5aa020706cbf94d15bada41a0c2a35fc8f3f37cb7c2cd6f34d201399a495e","tests/endianness.rs":"5147f86d224c4c540b772033da2f994cad9bc9c035f38ec21e23bc4e55f8a759"},"package":"1f9f08af0c877571712e2e3e686ad79efad9657dbf0f7c3c8ba943ff6c38932d"}
\ No newline at end of file
diff --git a/third_party/rust/packed_simd/.github/workflows/benchmarks.yml b/third_party/rust/packed_simd/.github/workflows/benchmarks.yml
new file mode 100644
--- /dev/null
+++ b/third_party/rust/packed_simd/.github/workflows/benchmarks.yml
@@ -0,0 +1,31 @@
+name: benchmarks
+
+on:
+  push:
+    branches:
+      - master
+  pull_request:
+  workflow_dispatch:
+
+jobs:
+  x86_64-unknown-linux-gnu:
+    uses: ./.github/workflows/run-ci-script.yml
+    with:
+      target: x86_64-unknown-linux-gnu
+      setup_script: ci/setup_benchmarks.sh
+      script: ci/benchmark.sh
+      norun: 1
+      verify: 1
+      # FIXME: figure out how to add downloaded ispc to PATH
+      # features: ispc
+  x86_64-apple-darwin:
+    uses: ./.github/workflows/run-ci-script.yml
+    with:
+      target: x86_64-apple-darwin
+      runner: macos-latest
+      setup_script: ci/setup_benchmarks.sh
+      script: ci/benchmark.sh
+      norun: 1
+      verify: 1
+      # FIXME: figure out how to add downloaded ispc to PATH
+      # features: ispc
diff --git a/third_party/rust/packed_simd/.github/workflows/ci.yml b/third_party/rust/packed_simd/.github/workflows/ci.yml
new file mode 100644
--- /dev/null
+++ b/third_party/rust/packed_simd/.github/workflows/ci.yml
@@ -0,0 +1,218 @@
+name: ci
+
+# trigger for all PRs and changes to master
+on:
+  push:
+    branches:
+      - master
+  pull_request:
+
+jobs:
+  rustfmt:
+    uses: ./.github/workflows/run-ci-script.yml
+    with:
+      script: ci/all.sh check_fmt || true
+  x86_64-unknown-linux-android:
+    uses: ./.github/workflows/run-ci-script.yml
+    strategy:
+      fail-fast: true
+    with:
+      target: x86_64-linux-android
+  armv7-linux-androideabi:
+    uses: ./.github/workflows/run-ci-script.yml
+    strategy:
+      fail-fast: true
+    with:
+      target: armv7-linux-androideabi
+  aarch64-unknown-linux-android-NEON:
+    uses: ./.github/workflows/run-ci-script.yml
+    strategy:
+      fail-fast: true
+    with:
+      target: aarch64-linux-android
+      rustflags: -Ctarget-feature=+neon
+  thumbv7neon-linux-androideabi:
+    uses: ./.github/workflows/run-ci-script.yml
+    strategy:
+      fail-fast: false
+    with:
+      target: thumbv7neon-linux-androideabi
+  i586-unknown-linux-gnu:
+    uses: ./.github/workflows/run-ci-script.yml
+    strategy:
+      fail-fast: false
+    with:
+      target: i586-unknown-linux-gnu
+      rustflags: -Crelocation-model=static
+  i586-unknown-linux-gnu-SSE:
+    uses: ./.github/workflows/run-ci-script.yml
+    strategy:
+      fail-fast: false
+    with:
+      target: i586-unknown-linux-gnu
+      rustflags: -Crelocation-model=static -Ctarget-feature=+sse
+  i586-unknown-linux-gnu-SSE2:
+    uses: ./.github/workflows/run-ci-script.yml
+    strategy:
+      fail-fast: false
+    with:
+      target: i586-unknown-linux-gnu
+      rustflags: -Crelocation-model=static -Ctarget-feature=+sse2
+  i686-unknown-linux-gnu:
+    uses: ./.github/workflows/run-ci-script.yml
+    strategy:
+      fail-fast: false
+    with:
+      target: i686-unknown-linux-gnu
+      rustflags: -Crelocation-model=static
+  i686-unknown-linux-gnu-SSE4_2:
+    uses: ./.github/workflows/run-ci-script.yml
+    strategy:
+      fail-fast: false
+    with:
+      target: i686-unknown-linux-gnu
+      rustflags: -Crelocation-model=static -Ctarget-feature=+sse4.2
+  i686-unknown-linux-gnu-AVX2:
+    uses: ./.github/workflows/run-ci-script.yml
+    strategy:
+      fail-fast: false
+    with:
+      target: i686-unknown-linux-gnu
+      rustflags: -Crelocation-model=static -Ctarget-feature=+avx2
+  x86_64-unknown-linux-gnu:
+    uses: ./.github/workflows/run-ci-script.yml
+    strategy:
+      fail-fast: true
+    with:
+      target: x86_64-unknown-linux-gnu
+  x86_64-unknown-linux-gnu-SSE4_2:
+    uses: ./.github/workflows/run-ci-script.yml
+    strategy:
+      fail-fast: true
+    with:
+      target: x86_64-unknown-linux-gnu
+      rustflags: -Ctarget-feature=+sse4.2
+  x86_64-unknown-linux-gnu-AVX2:
+    uses: ./.github/workflows/run-ci-script.yml
+    strategy:
+      fail-fast: true
+    with:
+      target: x86_64-unknown-linux-gnu
+      rustflags: -Ctarget-feature=+avx2
+  arm-unknown-linux-gnueabihf:
+    uses: ./.github/workflows/run-ci-script.yml
+    strategy:
+      fail-fast: true
+    with:
+      target: arm-unknown-linux-gnueabihf
+  armv7-unknown-linux-gnueabihf:
+    uses: ./.github/workflows/run-ci-script.yml
+    strategy:
+      fail-fast: true
+    with:
+      target: armv7-unknown-linux-gnueabihf
+  armv7-unknown-linux-gnueabihf-NEON:
+    uses: ./.github/workflows/run-ci-script.yml
+    strategy:
+      fail-fast: true
+    with:
+      target: armv7-unknown-linux-gnueabihf
+      rustflags: -Ctarget-feature=+neon
+  thumbv7neon-unknown-linux-gnueabihf:
+    uses: ./.github/workflows/run-ci-script.yml
+    strategy:
+      fail-fast: false
+    with:
+      target: thumbv7neon-unknown-linux-gnueabihf
+  aarch64-unknown-linux-gnu-NEON:
+    uses: ./.github/workflows/run-ci-script.yml
+    strategy:
+      fail-fast: true
+    with:
+      target: aarch64-unknown-linux-gnu
+      rustflags: -Ctarget-feature=+neon
+  powerpc-unknown-linux-gnu:
+    uses: ./.github/workflows/run-ci-script.yml
+    strategy:
+      fail-fast: false
+    with:
+      target: powerpc-unknown-linux-gnu
+  powerpc64-unknown-linux-gnu:
+    uses: ./.github/workflows/run-ci-script.yml
+    strategy:
+      fail-fast: false
+    with:
+      target: powerpc64-unknown-linux-gnu
+  powerpc64le-unknown-linux-gnu:
+    uses: ./.github/workflows/run-ci-script.yml
+    strategy:
+      fail-fast: true
+    with:
+      target: powerpc64le-unknown-linux-gnu
+  powerpc64le-unknown-linux-gnu-ALTIVEC:
+    uses: ./.github/workflows/run-ci-script.yml
+    strategy:
+      fail-fast: true
+    with:
+      target: powerpc64le-unknown-linux-gnu
+      rustflags: -Ctarget-feature=+altivec
+  powerpc64le-unknown-linux-gnu-VSX:
+    uses: ./.github/workflows/run-ci-script.yml
+    strategy:
+      fail-fast: true
+    with:
+      target: powerpc64le-unknown-linux-gnu
+      rustflags: -Ctarget-feature=+vsx
+  s390x-unknown-linux-gnu:
+    uses: ./.github/workflows/run-ci-script.yml
+    strategy:
+      fail-fast: false
+    with:
+      target: s390x-unknown-linux-gnu
+  sparc64-unknown-linux-gnu:
+    uses: ./.github/workflows/run-ci-script.yml
+    strategy:
+      fail-fast: false
+    with:
+      target: sparc64-unknown-linux-gnu
+  wasm32-unknown-unknown:
+    uses: ./.github/workflows/run-ci-script.yml
+    strategy:
+      fail-fast: false
+    with:
+      target: wasm32-unknown-unknown
+  x86_64-apple-darwin-SSE4_2:
+    uses: ./.github/workflows/run-ci-script.yml
+    strategy:
+      fail-fast: true
+    with:
+      runner: macos-latest
+      script: ci/run.sh
+      target: x86_64-apple-darwin
+      rustflags: -Ctarget-feature=+sse4.2
+  x86_64-apple-darwin-AVX:
+    uses: ./.github/workflows/run-ci-script.yml
+    strategy:
+      fail-fast: true
+    with:
+      runner: macos-latest
+      script: ci/run.sh
+      target: x86_64-apple-darwin
+      rustflags: -Ctarget-feature=+avx
+  x86_64-apple-ios:
+    uses: ./.github/workflows/run-ci-script.yml
+    strategy:
+      fail-fast: true
+    with:
+      runner: macos-latest
+      script: ci/run.sh
+      target: x86_64-apple-ios
+  aarch64-apple-ios:
+    uses: ./.github/workflows/run-ci-script.yml
+    strategy:
+      fail-fast: true
+    with:
+      runner: macos-latest
+      script: ci/run.sh
+      target: aarch64-apple-ios
+      rustflags: -Ctarget-feature=+neon
diff --git a/third_party/rust/packed_simd/.github/workflows/docs.yml b/third_party/rust/packed_simd/.github/workflows/docs.yml
new file mode 100644
--- /dev/null
+++ b/third_party/rust/packed_simd/.github/workflows/docs.yml
@@ -0,0 +1,13 @@
+name: docs
+
+on:
+  push:
+    branches:
+      - master
+
+jobs:
+  docs:
+    uses: ./.github/workflows/run-ci-script.yml
+    with:
+      setup_script: cargo install mdbook
+      script: ci/dox.sh
diff --git a/third_party/rust/packed_simd/.github/workflows/run-ci-script.yml b/third_party/rust/packed_simd/.github/workflows/run-ci-script.yml
new file mode 100644
--- /dev/null
+++ b/third_party/rust/packed_simd/.github/workflows/run-ci-script.yml
@@ -0,0 +1,86 @@
+name: run-ci-script
+
+on:
+  workflow_call:
+    inputs:
+      runner:
+        required: false
+        type: string
+        default: ubuntu-latest
+      target:
+        required: false
+        type: string
+        default: ''
+      rustflags:
+        required: false
+        type: string
+        default: ''
+      script:
+        required: false
+        type: string
+        default: ci/run-docker.sh
+      setup_script:
+        required: false
+        type: string
+      norun:
+        required: false
+        type: string
+        default: ''
+      verify:
+        required: false
+        type: string
+        default: ''
+      features:
+        required: false
+        type: string
+        default: ''
+
+jobs:
+  run-ci-script:
+    runs-on: ${{ inputs.runner }}
+    steps:
+      - name: Checkout
+        uses: actions/checkout@v2
+      - name: Init Rustup Cache
+        uses: actions/cache@v2
+        with:
+          path: |
+            ~/.rustup/toolchains
+          key: ${{ runner.os }}-cargo-${{ hashFiles('**/rust-toolchain') }}
+      - name: Install Toolchain
+        uses: dtolnay/rust-toolchain@nightly
+        with:
+          # FIXME: change to nightly once https://github.com/rust-lang/packed_simd/pull/350 is merged
+          # needs to be kept in sync with the toolchain files
+          targets: ${{ inputs.target }}
+          components: rustfmt
+      - name: Generate Lockfile
+        run: cargo generate-lockfile
+      - name: Init Cargo Cache
+        uses: actions/cache@v2
+        with:
+          path: |
+            ~/.cargo/bin/
+            ~/.cargo/registry/index/
+            ~/.cargo/registry/cache/
+            ~/.cargo/git/db/
+            target/
+          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
+      - name: Setup
+        if: ${{ inputs.setup_script != '' }}
+        run: ${{ inputs.setup_script }}
+        env:
+          TARGET: ${{ inputs.target }}
+          RUSTFLAGS: ${{ inputs.rustflags }}
+          NORUN: ${{ inputs.norun }}
+          VERIFY: ${{ inputs.verify }}
+          FEATURES: ${{ inputs.features }}
+      - name: Run CI Script
+        timeout-minutes: 30
+        run: ${{ inputs.script }}
+        env:
+          TARGET: ${{ inputs.target }}
+          RUSTFLAGS: ${{ inputs.rustflags }}
+          NORUN: ${{ inputs.norun }}
+          VERIFY: ${{ inputs.verify }}
+          FEATURES: ${{ inputs.features }}
diff --git a/third_party/rust/packed_simd_2/.travis.yml b/third_party/rust/packed_simd/.travis.yml
rename from third_party/rust/packed_simd_2/.travis.yml
rename to third_party/rust/packed_simd/.travis.yml
diff --git a/third_party/rust/packed_simd/Cargo.toml b/third_party/rust/packed_simd/Cargo.toml
new file mode 100644
--- /dev/null
+++ b/third_party/rust/packed_simd/Cargo.toml
@@ -0,0 +1,83 @@
+# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#
+# When uploading crates to the registry Cargo will automatically
+# "normalize" Cargo.toml files for maximal compatibility
+# with all versions of Cargo and also rewrite `path` dependencies
+# to registry (e.g., crates.io) dependencies.
+#
+# If you are reading this file be aware that the original Cargo.toml
+# will likely look very different (and much more reasonable).
+# See Cargo.toml.orig for the original contents.
+
+[package]
+edition = "2018"
+name = "packed_simd"
+version = "0.3.9"
+build = "build.rs"
+description = "Portable Packed SIMD vectors"
+homepage = "https://github.com/rust-lang/packed_simd"
+documentation = "https://docs.rs/crate/packed_simd/"
+readme = "README.md"
+keywords = [
+    "simd",
+    "vector",
+    "portability",
+]
+categories = [
+    "hardware-support",
+    "concurrency",
+    "no-std",
+    "data-structures",
+]
+license = "MIT OR Apache-2.0"
+repository = "https://github.com/rust-lang/packed_simd"
+
+[package.metadata.docs.rs]
+features = ["into_bits"]
+rustdoc-args = [
+    "--cfg",
+    "doc_cfg",
+]
+
+[dependencies.cfg-if]
+version = "1.0.0"
+
+[dependencies.core_arch]
+version = "0.1.5"
+optional = true
+
+[dependencies.num-traits]
+version = "0.2.14"
+features = ["libm"]
+default-features = false
+
+[dev-dependencies.arrayvec]
+version = "^0.5"
+default-features = false
+
+[dev-dependencies.paste]
+version = "^1"
+
+[features]
+default = []
+into_bits = []
+libcore_neon = []
+
+[target."cfg(target_arch = \"x86_64\")".dependencies.sleef-sys]
+version = "0.1.2"
+optional = true
+
+[target.wasm32-unknown-unknown.dev-dependencies.wasm-bindgen]
+version = "=0.2.87"
+
+[target.wasm32-unknown-unknown.dev-dependencies.wasm-bindgen-test]
+version = "=0.3.37"
+
+[badges.is-it-maintained-issue-resolution]
+repository = "rust-lang/packed_simd"
+
+[badges.is-it-maintained-open-issues]
+repository = "rust-lang/packed_simd"
+
+[badges.maintenance]
+status = "experimental"
diff --git a/third_party/rust/packed_simd_2/LICENSE-APACHE b/third_party/rust/packed_simd/LICENSE-APACHE
rename from third_party/rust/packed_simd_2/LICENSE-APACHE
rename to third_party/rust/packed_simd/LICENSE-APACHE
diff --git a/third_party/rust/packed_simd_2/LICENSE-MIT b/third_party/rust/packed_simd/LICENSE-MIT
rename from third_party/rust/packed_simd_2/LICENSE-MIT
rename to third_party/rust/packed_simd/LICENSE-MIT
diff --git a/third_party/rust/packed_simd_2/README.md b/third_party/rust/packed_simd/README.md
rename from third_party/rust/packed_simd_2/README.md
rename to third_party/rust/packed_simd/README.md
--- a/third_party/rust/packed_simd_2/README.md
+++ b/third_party/rust/packed_simd/README.md
@@ -1,29 +1,16 @@
-# The Crates.io Version Can No Longer Be Updated!
-
-The original maintainer is out of contact, and the new maintainers (the Portable SIMD Project Group) do not have the appropriate crates.io permissions to issue updates.
-
-We are aware that the version available on crates.io is currently broken, and will not build.
-
-If you need to continue to use the crate, we have published a "next version" under an alternative name.
-
-Adjust your `[dependencies]` section of `Cargo.toml` to be the following:
-```toml
-packed_simd = { version = "0.3.8", package = "packed_simd_2" }
-```
-
 # `Simd<[T; N]>`
 
 ## Implementation of [Rust RFC #2366: `std::simd`][rfc2366]
 
-[![Travis-CI Status]][travis] <!-- [![Appveyor Status]][appveyor] --> [![Latest Version]][crates.io] [![docs]][master_docs]
+[![Latest Version]][crates.io] [![docs]][master_docs]
 
 **WARNING**: this crate only supports the most recent nightly Rust toolchain
-and will be superseded by [stdsimd](https://github.com/rust-lang/stdsimd).
+and will be superseded by [`#![feature(portable_simd)]`](https://github.com/rust-lang/portable-simd).
 
 ## Documentation
 
 * [API docs (`master` branch)][master_docs]
 * [Performance guide][perf_guide]
 * [API docs (`docs.rs`)][docs.rs]
 * [RFC2366 `std::simd`][rfc2366]: - contains motivation, design rationale,
   discussion, etc.
@@ -79,40 +66,35 @@ The following table describes the suppor
 the library compiles without issues for a given target, while `run` shows
 whether the test suite passes for a given target.
 
 | **Linux**                             | **build** | **run** |
 |---------------------------------------|-----------|---------|
 | `i586-unknown-linux-gnu`              | ✓         | ✗       |
 | `i686-unknown-linux-gnu`              | ✓         | ✗       |
 | `x86_64-unknown-linux-gnu`            | ✓         | ✓       |
-| `arm-unknown-linux-gnueabi`           | ✗         | ✗       |
 | `arm-unknown-linux-gnueabihf`         | ✓         | ✓       |
 | `armv7-unknown-linux-gnueabi`         | ✓         | ✓       |
 | `aarch64-unknown-linux-gnu`           | ✓         | ✓       |
-| `mips-unknown-linux-gnu`              | ✓         | ✗       |
-| `mipsel-unknown-linux-musl`           | ✓         | ✗       |
-| `mips64-unknown-linux-gnuabi64`       | ✓         | ✗       |
-| `mips64el-unknown-linux-gnuabi64`     | ✓         | ✗       |
-| `powerpc-unknown-linux-gnu`           | ✗         | ✗       |
-| `powerpc64-unknown-linux-gnu`         | ✗         | ✗       |
+| `powerpc-unknown-linux-gnu`           | ✓         | ✗       |
+| `powerpc64-unknown-linux-gnu`         | ✓         | ✗       |
 | `powerpc64le-unknown-linux-gnu`       | ✓         | ✓       |
-| `s390x-unknown-linux-gnu`             | ✗         | ✗       |
+| `s390x-unknown-linux-gnu`             | ✓         | ✗       |
 | `sparc64-unknown-linux-gnu`           | ✓         | ✗       |
 | `thumbv7neon-unknown-linux-gnueabihf` | ✓         | ✓       |
 | **MacOSX**                            | **build** | **run** |
 | `x86_64-apple-darwin`                 | ✓         | ✓       |
 | **Android**                           | **build** | **run** |
 | `x86_64-linux-android`                | ✓         | ✓       |
-| `arm-linux-androideabi`               | ✓         | ✓       |
-| `aarch64-linux-android`               | ✓         | ✓       |
-| `thumbv7neon-linux-androideabi`       | ✗         | ✗       |
+| `armv7-linux-androideabi`             | ✓         | ✗       |
+| `aarch64-linux-android`               | ✓         | ✗       |
+| `thumbv7neon-linux-androideabi`       | ✓         | ✗       |
 | **iOS**                               | **build** | **run** |
-| `x86_64-apple-ios`                    | ✓         | ✗       |
-| `aarch64-apple-ios`                   | ✓         | ✗       |
+| `x86_64-apple-ios`                    | ✗         | ✗       |
+| `aarch64-apple-ios`                   | ✗         | ✗       |
 
 
 ## Machine code verification
 
 The
 [`verify/`](https://github.com/rust-lang-nursery/packed_simd/tree/master/verify)
 crate tests disassembles the portable packed vector APIs at run-time and
 compares the generated machine code against the desired one to make sure that
@@ -141,21 +123,21 @@ must adhere to Rust's [Code of Conduct].
 Unless you explicitly state otherwise, any contribution intentionally submitted
 for inclusion in `packed_simd` by you, as defined in the Apache-2.0 license, shall be
 dual licensed as above, without any additional terms or conditions.
 
 [travis]: https://travis-ci.com/rust-lang/packed_simd
 [Travis-CI Status]: https://travis-ci.com/rust-lang/packed_simd.svg?branch=master
 [appveyor]: https://ci.appveyor.com/project/gnzlbg/packed-simd
 [Appveyor Status]: https://ci.appveyor.com/api/projects/status/hd7v9dvr442hgdix?svg=true
-[Latest Version]: https://img.shields.io/crates/v/packed_simd_2.svg
-[crates.io]: https://crates.io/crates/packed_simd_2
-[docs]: https://docs.rs/packed_simd_2/badge.svg
-[docs.rs]: https://docs.rs/packed_simd_2
-[master_docs]: https://rust-lang-nursery.github.io/packed_simd/packed_simd_2/
+[Latest Version]: https://img.shields.io/crates/v/packed_simd.svg
+[crates.io]: https://crates.io/crates/packed_simd
+[docs]: https://docs.rs/packed_simd/badge.svg
+[docs.rs]: https://docs.rs/packed_simd
+[master_docs]: https://rust-lang-nursery.github.io/packed_simd/packed_simd/
 [perf_guide]: https://rust-lang-nursery.github.io/packed_simd/perf-guide/
 [rfc2366]: https://github.com/rust-lang/rfcs/pull/2366
 [ISPC]: https://ispc.github.io/
 [rayon]: https://crates.io/crates/rayon
 [boost_license]: https://www.boost.org/LICENSE_1_0.txt
 [SLEEF]: https://sleef.org/
 [sleef_sys]: https://crates.io/crates/sleef-sys
 [contributing instructions]: contributing.md
diff --git a/third_party/rust/packed_simd_2/bors.toml b/third_party/rust/packed_simd/bors.toml
rename from third_party/rust/packed_simd_2/bors.toml
rename to third_party/rust/packed_simd/bors.toml
diff --git a/third_party/rust/packed_simd_2/build.rs b/third_party/rust/packed_simd/build.rs
rename from third_party/rust/packed_simd_2/build.rs
rename to third_party/rust/packed_simd/build.rs
diff --git a/third_party/rust/packed_simd_2/ci/all.sh b/third_party/rust/packed_simd/ci/all.sh
rename from third_party/rust/packed_simd_2/ci/all.sh
rename to third_party/rust/packed_simd/ci/all.sh
diff --git a/third_party/rust/packed_simd/ci/android-install-ndk.sh b/third_party/rust/packed_simd/ci/android-install-ndk.sh
new file mode 100644
--- /dev/null
+++ b/third_party/rust/packed_simd/ci/android-install-ndk.sh
@@ -0,0 +1,21 @@
+#!/usr/bin/env sh
+# Copyright 2016 The Rust Project Developers. See the COPYRIGHT
+# file at the top-level directory of this distribution and at
+# http://rust-lang.org/COPYRIGHT.
+#
+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or
+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license
+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your
+# option. This file may not be copied, modified, or distributed
+# except according to those terms.
+
+set -ex
+
+ANDROID_NDK_URL=https://dl.google.com/android/repository
+ANDROID_NDK_ARCHIVE=android-ndk-r25b-linux.zip
+
+curl -fO "$ANDROID_NDK_URL/$ANDROID_NDK_ARCHIVE"
+unzip -q $ANDROID_NDK_ARCHIVE
+rm $ANDROID_NDK_ARCHIVE
+mv android-ndk-* ndk
+rm -rf android-ndk-*
diff --git a/third_party/rust/packed_simd_2/ci/android-install-sdk.sh b/third_party/rust/packed_simd/ci/android-install-sdk.sh
rename from third_party/rust/packed_simd_2/ci/android-install-sdk.sh
rename to third_party/rust/packed_simd/ci/android-install-sdk.sh
diff --git a/third_party/rust/packed_simd_2/ci/android-sysimage.sh b/third_party/rust/packed_simd/ci/android-sysimage.sh
rename from third_party/rust/packed_simd_2/ci/android-sysimage.sh
rename to third_party/rust/packed_simd/ci/android-sysimage.sh
diff --git a/third_party/rust/packed_simd_2/ci/benchmark.sh b/third_party/rust/packed_simd/ci/benchmark.sh
rename from third_party/rust/packed_simd_2/ci/benchmark.sh
rename to third_party/rust/packed_simd/ci/benchmark.sh
diff --git a/third_party/rust/packed_simd_2/ci/deploy_and_run_on_ios_simulator.rs b/third_party/rust/packed_simd/ci/deploy_and_run_on_ios_simulator.rs
rename from third_party/rust/packed_simd_2/ci/deploy_and_run_on_ios_simulator.rs
rename to third_party/rust/packed_simd/ci/deploy_and_run_on_ios_simulator.rs
diff --git a/third_party/rust/packed_simd_2/ci/docker/aarch64-linux-android/Dockerfile b/third_party/rust/packed_simd/ci/docker/aarch64-linux-android/Dockerfile
rename from third_party/rust/packed_simd_2/ci/docker/aarch64-linux-android/Dockerfile
rename to third_party/rust/packed_simd/ci/docker/aarch64-linux-android/Dockerfile
diff --git a/third_party/rust/packed_simd_2/ci/docker/aarch64-unknown-linux-gnu/Dockerfile b/third_party/rust/packed_simd/ci/docker/aarch64-unknown-linux-gnu/Dockerfile
rename from third_party/rust/packed_simd_2/ci/docker/aarch64-unknown-linux-gnu/Dockerfile
rename to third_party/rust/packed_simd/ci/docker/aarch64-unknown-linux-gnu/Dockerfile
diff --git a/third_party/rust/packed_simd_2/ci/docker/arm-unknown-linux-gnueabi/Dockerfile b/third_party/rust/packed_simd/ci/docker/arm-unknown-linux-gnueabi/Dockerfile
rename from third_party/rust/packed_simd_2/ci/docker/arm-unknown-linux-gnueabi/Dockerfile
rename to third_party/rust/packed_simd/ci/docker/arm-unknown-linux-gnueabi/Dockerfile
diff --git a/third_party/rust/packed_simd_2/ci/docker/arm-unknown-linux-gnueabihf/Dockerfile b/third_party/rust/packed_simd/ci/docker/arm-unknown-linux-gnueabihf/Dockerfile
rename from third_party/rust/packed_simd_2/ci/docker/arm-unknown-linux-gnueabihf/Dockerfile
rename to third_party/rust/packed_simd/ci/docker/arm-unknown-linux-gnueabihf/Dockerfile
diff --git a/third_party/rust/packed_simd_2/ci/docker/arm-linux-androideabi/Dockerfile b/third_party/rust/packed_simd/ci/docker/armv7-linux-androideabi/Dockerfile
rename from third_party/rust/packed_simd_2/ci/docker/arm-linux-androideabi/Dockerfile
rename to third_party/rust/packed_simd/ci/docker/armv7-linux-androideabi/Dockerfile
diff --git a/third_party/rust/packed_simd_2/ci/docker/armv7-unknown-linux-gnueabihf/Dockerfile b/third_party/rust/packed_simd/ci/docker/armv7-unknown-linux-gnueabihf/Dockerfile
rename from third_party/rust/packed_simd_2/ci/docker/armv7-unknown-linux-gnueabihf/Dockerfile
rename to third_party/rust/packed_simd/ci/docker/armv7-unknown-linux-gnueabihf/Dockerfile
diff --git a/third_party/rust/packed_simd_2/ci/docker/i586-unknown-linux-gnu/Dockerfile b/third_party/rust/packed_simd/ci/docker/i586-unknown-linux-gnu/Dockerfile
rename from third_party/rust/packed_simd_2/ci/docker/i586-unknown-linux-gnu/Dockerfile
rename to third_party/rust/packed_simd/ci/docker/i586-unknown-linux-gnu/Dockerfile
diff --git a/third_party/rust/packed_simd_2/ci/docker/i686-unknown-linux-gnu/Dockerfile b/third_party/rust/packed_simd/ci/docker/i686-unknown-linux-gnu/Dockerfile
rename from third_party/rust/packed_simd_2/ci/docker/i686-unknown-linux-gnu/Dockerfile
rename to third_party/rust/packed_simd/ci/docker/i686-unknown-linux-gnu/Dockerfile
diff --git a/third_party/rust/packed_simd_2/ci/docker/mips-unknown-linux-gnu/Dockerfile b/third_party/rust/packed_simd/ci/docker/mips-unknown-linux-gnu/Dockerfile
rename from third_party/rust/packed_simd_2/ci/docker/mips-unknown-linux-gnu/Dockerfile
rename to third_party/rust/packed_simd/ci/docker/mips-unknown-linux-gnu/Dockerfile
diff --git a/third_party/rust/packed_simd_2/ci/docker/mips64-unknown-linux-gnuabi64/Dockerfile b/third_party/rust/packed_simd/ci/docker/mips64-unknown-linux-gnuabi64/Dockerfile
rename from third_party/rust/packed_simd_2/ci/docker/mips64-unknown-linux-gnuabi64/Dockerfile
rename to third_party/rust/packed_simd/ci/docker/mips64-unknown-linux-gnuabi64/Dockerfile
diff --git a/third_party/rust/packed_simd_2/ci/docker/mips64el-unknown-linux-gnuabi64/Dockerfile b/third_party/rust/packed_simd/ci/docker/mips64el-unknown-linux-gnuabi64/Dockerfile
rename from third_party/rust/packed_simd_2/ci/docker/mips64el-unknown-linux-gnuabi64/Dockerfile
rename to third_party/rust/packed_simd/ci/docker/mips64el-unknown-linux-gnuabi64/Dockerfile
diff --git a/third_party/rust/packed_simd_2/ci/docker/mipsel-unknown-linux-musl/Dockerfile b/third_party/rust/packed_simd/ci/docker/mipsel-unknown-linux-musl/Dockerfile
rename from third_party/rust/packed_simd_2/ci/docker/mipsel-unknown-linux-musl/Dockerfile
rename to third_party/rust/packed_simd/ci/docker/mipsel-unknown-linux-musl/Dockerfile
diff --git a/third_party/rust/packed_simd_2/ci/docker/powerpc-unknown-linux-gnu/Dockerfile b/third_party/rust/packed_simd/ci/docker/powerpc-unknown-linux-gnu/Dockerfile
rename from third_party/rust/packed_simd_2/ci/docker/powerpc-unknown-linux-gnu/Dockerfile
rename to third_party/rust/packed_simd/ci/docker/powerpc-unknown-linux-gnu/Dockerfile
--- a/third_party/rust/packed_simd_2/ci/docker/powerpc-unknown-linux-gnu/Dockerfile
+++ b/third_party/rust/packed_simd/ci/docker/powerpc-unknown-linux-gnu/Dockerfile
@@ -1,9 +1,9 @@
-FROM ubuntu:18.04
+FROM ubuntu:22.04
 
 RUN apt-get update && apt-get install -y --no-install-recommends \
         gcc libc6-dev qemu-user ca-certificates \
         gcc-powerpc-linux-gnu libc6-dev-powerpc-cross \
         qemu-system-ppc \
         make \
         file
 
diff --git a/third_party/rust/packed_simd_2/ci/docker/powerpc64-unknown-linux-gnu/Dockerfile b/third_party/rust/packed_simd/ci/docker/powerpc64-unknown-linux-gnu/Dockerfile
rename from third_party/rust/packed_simd_2/ci/docker/powerpc64-unknown-linux-gnu/Dockerfile
rename to third_party/rust/packed_simd/ci/docker/powerpc64-unknown-linux-gnu/Dockerfile
--- a/third_party/rust/packed_simd_2/ci/docker/powerpc64-unknown-linux-gnu/Dockerfile
+++ b/third_party/rust/packed_simd/ci/docker/powerpc64-unknown-linux-gnu/Dockerfile
@@ -1,9 +1,9 @@
-FROM ubuntu:18.04
+FROM ubuntu:22.04
 
 RUN apt-get update && apt-get install -y --no-install-recommends \
     gcc \
     ca-certificates \
     libc6-dev \
     gcc-powerpc64-linux-gnu \
     libc6-dev-ppc64-cross \
     qemu-user  \
diff --git a/third_party/rust/packed_simd_2/ci/docker/powerpc64le-unknown-linux-gnu/Dockerfile b/third_party/rust/packed_simd/ci/docker/powerpc64le-unknown-linux-gnu/Dockerfile
rename from third_party/rust/packed_simd_2/ci/docker/powerpc64le-unknown-linux-gnu/Dockerfile
rename to third_party/rust/packed_simd/ci/docker/powerpc64le-unknown-linux-gnu/Dockerfile
--- a/third_party/rust/packed_simd_2/ci/docker/powerpc64le-unknown-linux-gnu/Dockerfile
+++ b/third_party/rust/packed_simd/ci/docker/powerpc64le-unknown-linux-gnu/Dockerfile
@@ -1,9 +1,9 @@
-FROM ubuntu:18.04
+FROM ubuntu:22.04
 
 RUN apt-get update && apt-get install -y --no-install-recommends \
         gcc libc6-dev qemu-user ca-certificates \
         gcc-powerpc64le-linux-gnu libc6-dev-ppc64el-cross \
         qemu-system-ppc file make
 
 ENV CARGO_TARGET_POWERPC64LE_UNKNOWN_LINUX_GNU_LINKER=powerpc64le-linux-gnu-gcc \
     CARGO_TARGET_POWERPC64LE_UNKNOWN_LINUX_GNU_RUNNER="qemu-ppc64le -L /usr/powerpc64le-linux-gnu" \
diff --git a/third_party/rust/packed_simd_2/ci/docker/s390x-unknown-linux-gnu/Dockerfile b/third_party/rust/packed_simd/ci/docker/s390x-unknown-linux-gnu/Dockerfile
rename from third_party/rust/packed_simd_2/ci/docker/s390x-unknown-linux-gnu/Dockerfile
rename to third_party/rust/packed_simd/ci/docker/s390x-unknown-linux-gnu/Dockerfile
--- a/third_party/rust/packed_simd_2/ci/docker/s390x-unknown-linux-gnu/Dockerfile
+++ b/third_party/rust/packed_simd/ci/docker/s390x-unknown-linux-gnu/Dockerfile
@@ -1,9 +1,9 @@
-FROM ubuntu:18.10
+FROM ubuntu:22.04
 
 RUN apt-get update && \
     apt-get install -y --no-install-recommends \
     ca-certificates \
     curl \
     cmake \
     gcc \
     libc6-dev \
@@ -12,9 +12,9 @@ RUN apt-get update && \
     qemu-user \
     make \
     file
 
 ENV CARGO_TARGET_S390X_UNKNOWN_LINUX_GNU_LINKER=s390x-linux-gnu-gcc \
     CARGO_TARGET_S390X_UNKNOWN_LINUX_GNU_RUNNER="qemu-s390x -L /usr/s390x-linux-gnu" \
     CC_s390x_unknown_linux_gnu=s390x-linux-gnu-gcc \
     CXX_s390x_unknown_linux_gnu=s390x-linux-gnu-g++ \
-    OBJDUMP=s390x-linux-gnu-objdump
\ No newline at end of file
+    OBJDUMP=s390x-linux-gnu-objdump
diff --git a/third_party/rust/packed_simd_2/ci/docker/sparc64-unknown-linux-gnu/Dockerfile b/third_party/rust/packed_simd/ci/docker/sparc64-unknown-linux-gnu/Dockerfile
rename from third_party/rust/packed_simd_2/ci/docker/sparc64-unknown-linux-gnu/Dockerfile
rename to third_party/rust/packed_simd/ci/docker/sparc64-unknown-linux-gnu/Dockerfile
--- a/third_party/rust/packed_simd_2/ci/docker/sparc64-unknown-linux-gnu/Dockerfile
+++ b/third_party/rust/packed_simd/ci/docker/sparc64-unknown-linux-gnu/Dockerfile
@@ -1,18 +1,18 @@
-FROM debian:stretch
+FROM debian:bookworm
 
 RUN apt-get update && apt-get install -y --no-install-recommends \
         curl ca-certificates \
         gcc libc6-dev \
         gcc-sparc64-linux-gnu libc6-dev-sparc64-cross \
         qemu-system-sparc64 openbios-sparc seabios ipxe-qemu \
         p7zip-full cpio
 
 COPY linux-sparc64.sh /
 RUN bash /linux-sparc64.sh
 
 COPY test-runner-linux /
 
 ENV CARGO_TARGET_SPARC64_UNKNOWN_LINUX_GNU_LINKER=sparc64-linux-gnu-gcc \
     CARGO_TARGET_SPARC64_UNKNOWN_LINUX_GNU_RUNNER="/test-runner-linux sparc64" \
     CC_sparc64_unknown_linux_gnu=sparc64-linux-gnu-gcc \
-    PATH=$PATH:/rust/bin
\ No newline at end of file
+    PATH=$PATH:/rust/bin
diff --git a/third_party/rust/packed_simd_2/ci/docker/thumbv7neon-linux-androideabi/Dockerfile b/third_party/rust/packed_simd/ci/docker/thumbv7neon-linux-androideabi/Dockerfile
rename from third_party/rust/packed_simd_2/ci/docker/thumbv7neon-linux-androideabi/Dockerfile
rename to third_party/rust/packed_simd/ci/docker/thumbv7neon-linux-androideabi/Dockerfile
diff --git a/third_party/rust/packed_simd_2/ci/docker/thumbv7neon-unknown-linux-gnueabihf/Dockerfile b/third_party/rust/packed_simd/ci/docker/thumbv7neon-unknown-linux-gnueabihf/Dockerfile
rename from third_party/rust/packed_simd_2/ci/docker/thumbv7neon-unknown-linux-gnueabihf/Dockerfile
rename to third_party/rust/packed_simd/ci/docker/thumbv7neon-unknown-linux-gnueabihf/Dockerfile
diff --git a/third_party/rust/packed_simd_2/ci/docker/wasm32-unknown-unknown/Dockerfile b/third_party/rust/packed_simd/ci/docker/wasm32-unknown-unknown/Dockerfile
rename from third_party/rust/packed_simd_2/ci/docker/wasm32-unknown-unknown/Dockerfile
rename to third_party/rust/packed_simd/ci/docker/wasm32-unknown-unknown/Dockerfile
--- a/third_party/rust/packed_simd_2/ci/docker/wasm32-unknown-unknown/Dockerfile
+++ b/third_party/rust/packed_simd/ci/docker/wasm32-unknown-unknown/Dockerfile
@@ -1,31 +1,32 @@
-FROM ubuntu:18.04
+FROM ubuntu:22.04
 
 RUN apt-get update -y && apt-get install -y --no-install-recommends \
   ca-certificates \
   clang \
   cmake \
   curl \
   git \
   libc6-dev \
   make \
-  python \
+  ninja-build \
+  python-is-python3 \
   xz-utils
 
 # Install `wasm2wat`
 RUN git clone --recursive https://github.com/WebAssembly/wabt
 RUN make -C wabt -j$(nproc)
 ENV PATH=$PATH:/wabt/bin
 
 # Install `wasm-bindgen-test-runner`
-RUN curl -L https://github.com/rustwasm/wasm-bindgen/releases/download/0.2.73/wasm-bindgen-0.2.73-x86_64-unknown-linux-musl.tar.gz \
+RUN curl -L https://github.com/rustwasm/wasm-bindgen/releases/download/0.2.87/wasm-bindgen-0.2.87-x86_64-unknown-linux-musl.tar.gz \
   | tar xzf -
 # Keep in sync with the version on Cargo.toml.
-ENV PATH=$PATH:/wasm-bindgen-0.2.73-x86_64-unknown-linux-musl
+ENV PATH=$PATH:/wasm-bindgen-0.2.87-x86_64-unknown-linux-musl
 ENV CARGO_TARGET_WASM32_UNKNOWN_UNKNOWN_RUNNER=wasm-bindgen-test-runner
 
 # Install `node`
 RUN curl https://nodejs.org/dist/v14.16.0/node-v14.16.0-linux-x64.tar.xz | tar xJf -
 ENV PATH=$PATH:/node-v14.16.0-linux-x64/bin
 
 # We use a shim linker that removes `--strip-debug` when passed to LLD. While
 # this typically results in invalid debug information in release mode it doesn't
diff --git a/third_party/rust/packed_simd_2/ci/docker/x86_64-linux-android/Dockerfile b/third_party/rust/packed_simd/ci/docker/x86_64-linux-android/Dockerfile
rename from third_party/rust/packed_simd_2/ci/docker/x86_64-linux-android/Dockerfile
rename to third_party/rust/packed_simd/ci/docker/x86_64-linux-android/Dockerfile
--- a/third_party/rust/packed_simd_2/ci/docker/x86_64-linux-android/Dockerfile
+++ b/third_party/rust/packed_simd/ci/docker/x86_64-linux-android/Dockerfile
@@ -1,29 +1,31 @@
-FROM ubuntu:16.04
+FROM ubuntu:20.04
 
 RUN apt-get update && \
     apt-get install -y --no-install-recommends \
   ca-certificates \
   curl \
   gcc \
   libc-dev \
   python \
   unzip \
   file \
   make
 
 WORKDIR /android/
 ENV ANDROID_ARCH=x86_64
 COPY android-install-ndk.sh /android/
-RUN sh /android/android-install-ndk.sh $ANDROID_ARCH
+RUN sh /android/android-install-ndk.sh
+
+ENV STDARCH_ASSERT_INSTR_LIMIT=30
 
 # We do not run x86_64-linux-android tests on an android emulator.
 # See ci/android-sysimage.sh for informations about how tests are run.
 COPY android-sysimage.sh /android/
 RUN bash /android/android-sysimage.sh x86_64 x86_64-24_r07.zip
 
-ENV PATH=$PATH:/rust/bin:/android/ndk-$ANDROID_ARCH/bin \
-    CARGO_TARGET_X86_64_LINUX_ANDROID_LINKER=x86_64-linux-android-gcc \
-    CC_x86_64_linux_android=x86_64-linux-android-gcc \
-    CXX_x86_64_linux_android=x86_64-linux-android-g++ \
-    OBJDUMP=x86_64-linux-android-objdump \
+ENV PATH=$PATH:/rust/bin:/android/ndk/toolchains/llvm/prebuilt/linux-x86_64/bin \
+    CARGO_TARGET_X86_64_LINUX_ANDROID_LINKER=x86_64-linux-android21-clang \
+    CC_x86_64_linux_android=x86_64-linux-android21-clang \
+    CXX_x86_64_linux_android=x86_64-linux-android21-clang++ \
+    OBJDUMP=llvm-objdump \
     HOME=/tmp
diff --git a/third_party/rust/packed_simd_2/ci/docker/x86_64-unknown-linux-gnu-emulated/Dockerfile b/third_party/rust/packed_simd/ci/docker/x86_64-unknown-linux-gnu-emulated/Dockerfile
rename from third_party/rust/packed_simd_2/ci/docker/x86_64-unknown-linux-gnu-emulated/Dockerfile
rename to third_party/rust/packed_simd/ci/docker/x86_64-unknown-linux-gnu-emulated/Dockerfile
diff --git a/third_party/rust/packed_simd_2/ci/docker/x86_64-unknown-linux-gnu/Dockerfile b/third_party/rust/packed_simd/ci/docker/x86_64-unknown-linux-gnu/Dockerfile
rename from third_party/rust/packed_simd_2/ci/docker/x86_64-unknown-linux-gnu/Dockerfile
rename to third_party/rust/packed_simd/ci/docker/x86_64-unknown-linux-gnu/Dockerfile
diff --git a/third_party/rust/packed_simd_2/ci/dox.sh b/third_party/rust/packed_simd/ci/dox.sh
rename from third_party/rust/packed_simd_2/ci/dox.sh
rename to third_party/rust/packed_simd/ci/dox.sh
diff --git a/third_party/rust/packed_simd_2/ci/linux-s390x.sh b/third_party/rust/packed_simd/ci/linux-s390x.sh
rename from third_party/rust/packed_simd_2/ci/linux-s390x.sh
rename to third_party/rust/packed_simd/ci/linux-s390x.sh
diff --git a/third_party/rust/packed_simd_2/ci/linux-sparc64.sh b/third_party/rust/packed_simd/ci/linux-sparc64.sh
rename from third_party/rust/packed_simd_2/ci/linux-sparc64.sh
rename to third_party/rust/packed_simd/ci/linux-sparc64.sh
diff --git a/third_party/rust/packed_simd_2/ci/lld-shim.rs b/third_party/rust/packed_simd/ci/lld-shim.rs
rename from third_party/rust/packed_simd_2/ci/lld-shim.rs
rename to third_party/rust/packed_simd/ci/lld-shim.rs
diff --git a/third_party/rust/packed_simd_2/ci/max_line_width.sh b/third_party/rust/packed_simd/ci/max_line_width.sh
rename from third_party/rust/packed_simd_2/ci/max_line_width.sh
rename to third_party/rust/packed_simd/ci/max_line_width.sh
diff --git a/third_party/rust/packed_simd_2/ci/run-docker.sh b/third_party/rust/packed_simd/ci/run-docker.sh
rename from third_party/rust/packed_simd_2/ci/run-docker.sh
rename to third_party/rust/packed_simd/ci/run-docker.sh
diff --git a/third_party/rust/packed_simd_2/ci/run.sh b/third_party/rust/packed_simd/ci/run.sh
rename from third_party/rust/packed_simd_2/ci/run.sh
rename to third_party/rust/packed_simd/ci/run.sh
--- a/third_party/rust/packed_simd_2/ci/run.sh
+++ b/third_party/rust/packed_simd/ci/run.sh
@@ -90,9 +90,10 @@ if [[ "${NOVERIFY}" != "1" ]]; then
     cp -r verify/verify target/verify
     export STDSIMD_ASSERT_INSTR_LIMIT=30
     if [[ "${TARGET}" == "i586-unknown-linux-gnu" ]]; then
         export STDSIMD_ASSERT_INSTR_LIMIT=50
     fi
     cargo_test --release --manifest-path=target/verify/Cargo.toml
 fi
 
-. ci/run_examples.sh
+# FIXME: Figure out which examples take too long to run and ignore or adjust those
+#. ci/run_examples.sh
diff --git a/third_party/rust/packed_simd_2/ci/run_examples.sh b/third_party/rust/packed_simd/ci/run_examples.sh
rename from third_party/rust/packed_simd_2/ci/run_examples.sh
rename to third_party/rust/packed_simd/ci/run_examples.sh
diff --git a/third_party/rust/packed_simd_2/ci/runtest-android.rs b/third_party/rust/packed_simd/ci/runtest-android.rs
rename from third_party/rust/packed_simd_2/ci/runtest-android.rs
rename to third_party/rust/packed_simd/ci/runtest-android.rs
diff --git a/third_party/rust/packed_simd_2/ci/setup_benchmarks.sh b/third_party/rust/packed_simd/ci/setup_benchmarks.sh
rename from third_party/rust/packed_simd_2/ci/setup_benchmarks.sh
rename to third_party/rust/packed_simd/ci/setup_benchmarks.sh
diff --git a/third_party/rust/packed_simd_2/ci/test-runner-linux b/third_party/rust/packed_simd/ci/test-runner-linux
rename from third_party/rust/packed_simd_2/ci/test-runner-linux
rename to third_party/rust/packed_simd/ci/test-runner-linux
diff --git a/third_party/rust/packed_simd_2/contributing.md b/third_party/rust/packed_simd/contributing.md
rename from third_party/rust/packed_simd_2/contributing.md
rename to third_party/rust/packed_simd/contributing.md
diff --git a/third_party/rust/packed_simd_2/perf-guide/.gitignore b/third_party/rust/packed_simd/perf-guide/.gitignore
rename from third_party/rust/packed_simd_2/perf-guide/.gitignore
rename to third_party/rust/packed_simd/perf-guide/.gitignore
diff --git a/third_party/rust/packed_simd_2/perf-guide/book.toml b/third_party/rust/packed_simd/perf-guide/book.toml
rename from third_party/rust/packed_simd_2/perf-guide/book.toml
rename to third_party/rust/packed_simd/perf-guide/book.toml
diff --git a/third_party/rust/packed_simd_2/perf-guide/src/SUMMARY.md b/third_party/rust/packed_simd/perf-guide/src/SUMMARY.md
rename from third_party/rust/packed_simd_2/perf-guide/src/SUMMARY.md
rename to third_party/rust/packed_simd/perf-guide/src/SUMMARY.md
diff --git a/third_party/rust/packed_simd_2/perf-guide/src/ascii.css b/third_party/rust/packed_simd/perf-guide/src/ascii.css
rename from third_party/rust/packed_simd_2/perf-guide/src/ascii.css
rename to third_party/rust/packed_simd/perf-guide/src/ascii.css
diff --git a/third_party/rust/packed_simd_2/perf-guide/src/bound_checks.md b/third_party/rust/packed_simd/perf-guide/src/bound_checks.md
rename from third_party/rust/packed_simd_2/perf-guide/src/bound_checks.md
rename to third_party/rust/packed_simd/perf-guide/src/bound_checks.md
diff --git a/third_party/rust/packed_simd_2/perf-guide/src/float-math/approx.md b/third_party/rust/packed_simd/perf-guide/src/float-math/approx.md
rename from third_party/rust/packed_simd_2/perf-guide/src/float-math/approx.md
rename to third_party/rust/packed_simd/perf-guide/src/float-math/approx.md
diff --git a/third_party/rust/packed_simd_2/perf-guide/src/float-math/fma.md b/third_party/rust/packed_simd/perf-guide/src/float-math/fma.md
rename from third_party/rust/packed_simd_2/perf-guide/src/float-math/fma.md
rename to third_party/rust/packed_simd/perf-guide/src/float-math/fma.md
diff --git a/third_party/rust/packed_simd_2/perf-guide/src/float-math/fp.md b/third_party/rust/packed_simd/perf-guide/src/float-math/fp.md
rename from third_party/rust/packed_simd_2/perf-guide/src/float-math/fp.md
rename to third_party/rust/packed_simd/perf-guide/src/float-math/fp.md
diff --git a/third_party/rust/packed_simd_2/perf-guide/src/float-math/svml.md b/third_party/rust/packed_simd/perf-guide/src/float-math/svml.md
rename from third_party/rust/packed_simd_2/perf-guide/src/float-math/svml.md
rename to third_party/rust/packed_simd/perf-guide/src/float-math/svml.md
diff --git a/third_party/rust/packed_simd_2/perf-guide/src/introduction.md b/third_party/rust/packed_simd/perf-guide/src/introduction.md
rename from third_party/rust/packed_simd_2/perf-guide/src/introduction.md
rename to third_party/rust/packed_simd/perf-guide/src/introduction.md
diff --git a/third_party/rust/packed_simd_2/perf-guide/src/prof/linux.md b/third_party/rust/packed_simd/perf-guide/src/prof/linux.md
rename from third_party/rust/packed_simd_2/perf-guide/src/prof/linux.md
rename to third_party/rust/packed_simd/perf-guide/src/prof/linux.md
diff --git a/third_party/rust/packed_simd_2/perf-guide/src/prof/mca.md b/third_party/rust/packed_simd/perf-guide/src/prof/mca.md
rename from third_party/rust/packed_simd_2/perf-guide/src/prof/mca.md
rename to third_party/rust/packed_simd/perf-guide/src/prof/mca.md
diff --git a/third_party/rust/packed_simd_2/perf-guide/src/prof/profiling.md b/third_party/rust/packed_simd/perf-guide/src/prof/profiling.md
rename from third_party/rust/packed_simd_2/perf-guide/src/prof/profiling.md
rename to third_party/rust/packed_simd/perf-guide/src/prof/profiling.md
diff --git a/third_party/rust/packed_simd_2/perf-guide/src/target-feature/attribute.md b/third_party/rust/packed_simd/perf-guide/src/target-feature/attribute.md
rename from third_party/rust/packed_simd_2/perf-guide/src/target-feature/attribute.md
rename to third_party/rust/packed_simd/perf-guide/src/target-feature/attribute.md
diff --git a/third_party/rust/packed_simd_2/perf-guide/src/target-feature/features.md b/third_party/rust/packed_simd/perf-guide/src/target-feature/features.md
rename from third_party/rust/packed_simd_2/perf-guide/src/target-feature/features.md
rename to third_party/rust/packed_simd/perf-guide/src/target-feature/features.md
diff --git a/third_party/rust/packed_simd_2/perf-guide/src/target-feature/inlining.md b/third_party/rust/packed_simd/perf-guide/src/target-feature/inlining.md
rename from third_party/rust/packed_simd_2/perf-guide/src/target-feature/inlining.md
rename to third_party/rust/packed_simd/perf-guide/src/target-feature/inlining.md
diff --git a/third_party/rust/packed_simd_2/perf-guide/src/target-feature/practice.md b/third_party/rust/packed_simd/perf-guide/src/target-feature/practice.md
rename from third_party/rust/packed_simd_2/perf-guide/src/target-feature/practice.md
rename to third_party/rust/packed_simd/perf-guide/src/target-feature/practice.md
diff --git a/third_party/rust/packed_simd_2/perf-guide/src/target-feature/runtime.md b/third_party/rust/packed_simd/perf-guide/src/target-feature/runtime.md
rename from third_party/rust/packed_simd_2/perf-guide/src/target-feature/runtime.md
rename to third_party/rust/packed_simd/perf-guide/src/target-feature/runtime.md
diff --git a/third_party/rust/packed_simd_2/perf-guide/src/target-feature/rustflags.md b/third_party/rust/packed_simd/perf-guide/src/target-feature/rustflags.md
rename from third_party/rust/packed_simd_2/perf-guide/src/target-feature/rustflags.md
rename to third_party/rust/packed_simd/perf-guide/src/target-feature/rustflags.md
diff --git a/third_party/rust/packed_simd_2/perf-guide/src/vert-hor-ops.md b/third_party/rust/packed_simd/perf-guide/src/vert-hor-ops.md
rename from third_party/rust/packed_simd_2/perf-guide/src/vert-hor-ops.md
rename to third_party/rust/packed_simd/perf-guide/src/vert-hor-ops.md
diff --git a/third_party/rust/packed_simd/rust-toolchain b/third_party/rust/packed_simd/rust-toolchain
new file mode 100644
--- /dev/null
+++ b/third_party/rust/packed_simd/rust-toolchain
@@ -0,0 +1,1 @@
+nightly
diff --git a/third_party/rust/packed_simd_2/rustfmt.toml b/third_party/rust/packed_simd/rustfmt.toml
rename from third_party/rust/packed_simd_2/rustfmt.toml
rename to third_party/rust/packed_simd/rustfmt.toml
diff --git a/third_party/rust/packed_simd_2/src/api.rs b/third_party/rust/packed_simd/src/api.rs
rename from third_party/rust/packed_simd_2/src/api.rs
rename to third_party/rust/packed_simd/src/api.rs
--- a/third_party/rust/packed_simd_2/src/api.rs
+++ b/third_party/rust/packed_simd/src/api.rs
@@ -208,16 +208,17 @@ macro_rules! impl_f {
         impl_math_float_mul_add!([$elem_ty; $elem_n]: $tuple_id | $test_tt);
         impl_math_float_mul_adde!([$elem_ty; $elem_n]: $tuple_id | $test_tt);
         impl_math_float_powf!([$elem_ty; $elem_n]: $tuple_id | $test_tt);
         impl_math_float_recpre!([$elem_ty; $elem_n]: $tuple_id | $test_tt);
         impl_math_float_rsqrte!([$elem_ty; $elem_n]: $tuple_id | $test_tt);
         impl_math_float_sin!([$elem_ty; $elem_n]: $tuple_id | $test_tt);
         impl_math_float_sqrt!([$elem_ty; $elem_n]: $tuple_id | $test_tt);
         impl_math_float_sqrte!([$elem_ty; $elem_n]: $tuple_id | $test_tt);
+        impl_math_float_tanh!([$elem_ty; $elem_n]: $tuple_id | $test_tt);
         impl_cmp_vertical!(
             [$elem_ty; $elem_n]: $tuple_id, $mask_ty, false, (1., 0.)
                 | $test_tt
         );
 
         test_select!($elem_ty, $mask_ty, $tuple_id, (1., 2.) | $test_tt);
         test_reduction_float_min_max!(
             [$elem_ty; $elem_n]: $tuple_id | $test_tt
diff --git a/third_party/rust/packed_simd_2/src/api/bit_manip.rs b/third_party/rust/packed_simd/src/api/bit_manip.rs
rename from third_party/rust/packed_simd_2/src/api/bit_manip.rs
rename to third_party/rust/packed_simd/src/api/bit_manip.rs
--- a/third_party/rust/packed_simd_2/src/api/bit_manip.rs
+++ b/third_party/rust/packed_simd/src/api/bit_manip.rs
@@ -29,17 +29,17 @@ macro_rules! impl_bit_manip {
             #[inline]
             pub fn trailing_zeros(self) -> Self {
                 super::codegen::bit_manip::BitManip::cttz(self)
             }
         }
 
         test_if! {
             $test_tt:
-            paste::item_with_macros! {
+            paste::item! {
                 #[allow(overflowing_literals)]
                 pub mod [<$id _bit_manip>] {
                     #![allow(const_item_mutation)]
                     use super::*;
 
                     const LANE_WIDTH: usize = mem::size_of::<$elem_ty>() * 8;
 
                     macro_rules! test_func {
diff --git a/third_party/rust/packed_simd_2/src/api/bitmask.rs b/third_party/rust/packed_simd/src/api/bitmask.rs
rename from third_party/rust/packed_simd_2/src/api/bitmask.rs
rename to third_party/rust/packed_simd/src/api/bitmask.rs
--- a/third_party/rust/packed_simd_2/src/api/bitmask.rs
+++ b/third_party/rust/packed_simd/src/api/bitmask.rs
@@ -12,23 +12,20 @@ macro_rules! impl_bitmask {
             pub fn bitmask(self) -> $ibitmask_ty {
                 unsafe { codegen::llvm::simd_bitmask(self.0) }
             }
         }
 
         test_if! {
             $test_tt:
             paste::item! {
-                #[cfg(not(any(
+                #[cfg(not(
                     // FIXME: https://github.com/rust-lang-nursery/packed_simd/issues/210
-                    all(target_arch = "mips", target_endian = "big"),
-                    all(target_arch = "mips64", target_endian = "big"),
-                    target_arch = "sparc64",
-                    target_arch = "s390x",
-                )))]
+                    target_endian = "big"
+                ))]
                 pub mod [<$id _bitmask>] {
                     use super::*;
                     #[cfg_attr(not(target_arch = "wasm32"), test)]
                     #[cfg_attr(target_arch = "wasm32", wasm_bindgen_test)]
                     fn bitmask() {
                         // clear all lanes
                         let vec = $id::splat($clear as _);
                         let bitmask: $ibitmask_ty = 0;
diff --git a/third_party/rust/packed_simd_2/src/api/cast.rs b/third_party/rust/packed_simd/src/api/cast.rs
rename from third_party/rust/packed_simd_2/src/api/cast.rs
rename to third_party/rust/packed_simd/src/api/cast.rs
diff --git a/third_party/rust/packed_simd_2/src/api/cast/macros.rs b/third_party/rust/packed_simd/src/api/cast/macros.rs
rename from third_party/rust/packed_simd_2/src/api/cast/macros.rs
rename to third_party/rust/packed_simd/src/api/cast/macros.rs
diff --git a/third_party/rust/packed_simd_2/src/api/cast/v128.rs b/third_party/rust/packed_simd/src/api/cast/v128.rs
rename from third_party/rust/packed_simd_2/src/api/cast/v128.rs
rename to third_party/rust/packed_simd/src/api/cast/v128.rs
diff --git a/third_party/rust/packed_simd_2/src/api/cast/v16.rs b/third_party/rust/packed_simd/src/api/cast/v16.rs
rename from third_party/rust/packed_simd_2/src/api/cast/v16.rs
rename to third_party/rust/packed_simd/src/api/cast/v16.rs
diff --git a/third_party/rust/packed_simd_2/src/api/cast/v256.rs b/third_party/rust/packed_simd/src/api/cast/v256.rs
rename from third_party/rust/packed_simd_2/src/api/cast/v256.rs
rename to third_party/rust/packed_simd/src/api/cast/v256.rs
diff --git a/third_party/rust/packed_simd_2/src/api/cast/v32.rs b/third_party/rust/packed_simd/src/api/cast/v32.rs
rename from third_party/rust/packed_simd_2/src/api/cast/v32.rs
rename to third_party/rust/packed_simd/src/api/cast/v32.rs
diff --git a/third_party/rust/packed_simd_2/src/api/cast/v512.rs b/third_party/rust/packed_simd/src/api/cast/v512.rs
rename from third_party/rust/packed_simd_2/src/api/cast/v512.rs
rename to third_party/rust/packed_simd/src/api/cast/v512.rs
diff --git a/third_party/rust/packed_simd_2/src/api/cast/v64.rs b/third_party/rust/packed_simd/src/api/cast/v64.rs
rename from third_party/rust/packed_simd_2/src/api/cast/v64.rs
rename to third_party/rust/packed_simd/src/api/cast/v64.rs
diff --git a/third_party/rust/packed_simd_2/src/api/cmp.rs b/third_party/rust/packed_simd/src/api/cmp.rs
rename from third_party/rust/packed_simd_2/src/api/cmp.rs
rename to third_party/rust/packed_simd/src/api/cmp.rs
diff --git a/third_party/rust/packed_simd_2/src/api/cmp/eq.rs b/third_party/rust/packed_simd/src/api/cmp/eq.rs
rename from third_party/rust/packed_simd_2/src/api/cmp/eq.rs
rename to third_party/rust/packed_simd/src/api/cmp/eq.rs
diff --git a/third_party/rust/packed_simd_2/src/api/cmp/ord.rs b/third_party/rust/packed_simd/src/api/cmp/ord.rs
rename from third_party/rust/packed_simd_2/src/api/cmp/ord.rs
rename to third_party/rust/packed_simd/src/api/cmp/ord.rs
diff --git a/third_party/rust/packed_simd_2/src/api/cmp/partial_eq.rs b/third_party/rust/packed_simd/src/api/cmp/partial_eq.rs
rename from third_party/rust/packed_simd_2/src/api/cmp/partial_eq.rs
rename to third_party/rust/packed_simd/src/api/cmp/partial_eq.rs
diff --git a/third_party/rust/packed_simd_2/src/api/cmp/partial_ord.rs b/third_party/rust/packed_simd/src/api/cmp/partial_ord.rs
rename from third_party/rust/packed_simd_2/src/api/cmp/partial_ord.rs
rename to third_party/rust/packed_simd/src/api/cmp/partial_ord.rs
diff --git a/third_party/rust/packed_simd_2/src/api/cmp/vertical.rs b/third_party/rust/packed_simd/src/api/cmp/vertical.rs
rename from third_party/rust/packed_simd_2/src/api/cmp/vertical.rs
rename to third_party/rust/packed_simd/src/api/cmp/vertical.rs
diff --git a/third_party/rust/packed_simd_2/src/api/default.rs b/third_party/rust/packed_simd/src/api/default.rs
rename from third_party/rust/packed_simd_2/src/api/default.rs
rename to third_party/rust/packed_simd/src/api/default.rs
diff --git a/third_party/rust/packed_simd_2/src/api/fmt.rs b/third_party/rust/packed_simd/src/api/fmt.rs
rename from third_party/rust/packed_simd_2/src/api/fmt.rs
rename to third_party/rust/packed_simd/src/api/fmt.rs
diff --git a/third_party/rust/packed_simd_2/src/api/fmt/binary.rs b/third_party/rust/packed_simd/src/api/fmt/binary.rs
rename from third_party/rust/packed_simd_2/src/api/fmt/binary.rs
rename to third_party/rust/packed_simd/src/api/fmt/binary.rs
diff --git a/third_party/rust/packed_simd_2/src/api/fmt/debug.rs b/third_party/rust/packed_simd/src/api/fmt/debug.rs
rename from third_party/rust/packed_simd_2/src/api/fmt/debug.rs
rename to third_party/rust/packed_simd/src/api/fmt/debug.rs
diff --git a/third_party/rust/packed_simd_2/src/api/fmt/lower_hex.rs b/third_party/rust/packed_simd/src/api/fmt/lower_hex.rs
rename from third_party/rust/packed_simd_2/src/api/fmt/lower_hex.rs
rename to third_party/rust/packed_simd/src/api/fmt/lower_hex.rs
diff --git a/third_party/rust/packed_simd_2/src/api/fmt/octal.rs b/third_party/rust/packed_simd/src/api/fmt/octal.rs
rename from third_party/rust/packed_simd_2/src/api/fmt/octal.rs
rename to third_party/rust/packed_simd/src/api/fmt/octal.rs
diff --git a/third_party/rust/packed_simd_2/src/api/fmt/upper_hex.rs b/third_party/rust/packed_simd/src/api/fmt/upper_hex.rs
rename from third_party/rust/packed_simd_2/src/api/fmt/upper_hex.rs
rename to third_party/rust/packed_simd/src/api/fmt/upper_hex.rs
diff --git a/third_party/rust/packed_simd_2/src/api/from.rs b/third_party/rust/packed_simd/src/api/from.rs
rename from third_party/rust/packed_simd_2/src/api/from.rs
rename to third_party/rust/packed_simd/src/api/from.rs
diff --git a/third_party/rust/packed_simd_2/src/api/from/from_array.rs b/third_party/rust/packed_simd/src/api/from/from_array.rs
rename from third_party/rust/packed_simd_2/src/api/from/from_array.rs
rename to third_party/rust/packed_simd/src/api/from/from_array.rs
--- a/third_party/rust/packed_simd_2/src/api/from/from_array.rs
+++ b/third_party/rust/packed_simd/src/api/from/from_array.rs
@@ -56,16 +56,17 @@ macro_rules! impl_from_array {
         test_if! {
             $test_tt:
             paste::item! {
                 // Comparisons use integer casts within mantissa^1 range.
                 #[allow(clippy::float_cmp)]
                 mod [<$id _from>] {
                     use super::*;
                     #[test]
+                    #[cfg_attr(miri, ignore)]
                     fn array() {
                         let vec: $id = Default::default();
 
                         // FIXME: Workaround for arrays with more than 32
                         // elements.
                         //
                         // Safe because we never take a reference to any
                         // uninitialized element.
diff --git a/third_party/rust/packed_simd_2/src/api/from/from_vector.rs b/third_party/rust/packed_simd/src/api/from/from_vector.rs
rename from third_party/rust/packed_simd_2/src/api/from/from_vector.rs
rename to third_party/rust/packed_simd/src/api/from/from_vector.rs
diff --git a/third_party/rust/packed_simd_2/src/api/hash.rs b/third_party/rust/packed_simd/src/api/hash.rs
rename from third_party/rust/packed_simd_2/src/api/hash.rs
rename to third_party/rust/packed_simd/src/api/hash.rs
diff --git a/third_party/rust/packed_simd_2/src/api/into_bits.rs b/third_party/rust/packed_simd/src/api/into_bits.rs
rename from third_party/rust/packed_simd_2/src/api/into_bits.rs
rename to third_party/rust/packed_simd/src/api/into_bits.rs
--- a/third_party/rust/packed_simd_2/src/api/into_bits.rs
+++ b/third_party/rust/packed_simd/src/api/into_bits.rs
@@ -1,17 +1,19 @@
 //! Implementation of `FromBits` and `IntoBits`.
 
 /// Safe lossless bitwise conversion from `T` to `Self`.
+#[cfg_attr(doc_cfg, doc(cfg(feature = "into_bits")))]
 pub trait FromBits<T>: crate::marker::Sized {
     /// Safe lossless bitwise transmute from `T` to `Self`.
     fn from_bits(t: T) -> Self;
 }
 
 /// Safe lossless bitwise conversion from `Self` to `T`.
+#[cfg_attr(doc_cfg, doc(cfg(feature = "into_bits")))]
 pub trait IntoBits<T>: crate::marker::Sized {
     /// Safe lossless bitwise transmute from `self` to `T`.
     fn into_bits(self) -> T;
 }
 
 /// `FromBits` implies `IntoBits`.
 impl<T, U> IntoBits<U> for T
 where
diff --git a/third_party/rust/packed_simd_2/src/api/into_bits/arch_specific.rs b/third_party/rust/packed_simd/src/api/into_bits/arch_specific.rs
rename from third_party/rust/packed_simd_2/src/api/into_bits/arch_specific.rs
rename to third_party/rust/packed_simd/src/api/into_bits/arch_specific.rs
diff --git a/third_party/rust/packed_simd_2/src/api/into_bits/macros.rs b/third_party/rust/packed_simd/src/api/into_bits/macros.rs
rename from third_party/rust/packed_simd_2/src/api/into_bits/macros.rs
rename to third_party/rust/packed_simd/src/api/into_bits/macros.rs
diff --git a/third_party/rust/packed_simd_2/src/api/into_bits/v128.rs b/third_party/rust/packed_simd/src/api/into_bits/v128.rs
rename from third_party/rust/packed_simd_2/src/api/into_bits/v128.rs
rename to third_party/rust/packed_simd/src/api/into_bits/v128.rs
diff --git a/third_party/rust/packed_simd_2/src/api/into_bits/v16.rs b/third_party/rust/packed_simd/src/api/into_bits/v16.rs
rename from third_party/rust/packed_simd_2/src/api/into_bits/v16.rs
rename to third_party/rust/packed_simd/src/api/into_bits/v16.rs
diff --git a/third_party/rust/packed_simd_2/src/api/into_bits/v256.rs b/third_party/rust/packed_simd/src/api/into_bits/v256.rs
rename from third_party/rust/packed_simd_2/src/api/into_bits/v256.rs
rename to third_party/rust/packed_simd/src/api/into_bits/v256.rs
diff --git a/third_party/rust/packed_simd_2/src/api/into_bits/v32.rs b/third_party/rust/packed_simd/src/api/into_bits/v32.rs
rename from third_party/rust/packed_simd_2/src/api/into_bits/v32.rs
rename to third_party/rust/packed_simd/src/api/into_bits/v32.rs
diff --git a/third_party/rust/packed_simd_2/src/api/into_bits/v512.rs b/third_party/rust/packed_simd/src/api/into_bits/v512.rs
rename from third_party/rust/packed_simd_2/src/api/into_bits/v512.rs
rename to third_party/rust/packed_simd/src/api/into_bits/v512.rs
diff --git a/third_party/rust/packed_simd_2/src/api/into_bits/v64.rs b/third_party/rust/packed_simd/src/api/into_bits/v64.rs
rename from third_party/rust/packed_simd_2/src/api/into_bits/v64.rs
rename to third_party/rust/packed_simd/src/api/into_bits/v64.rs
diff --git a/third_party/rust/packed_simd_2/src/api/math.rs b/third_party/rust/packed_simd/src/api/math.rs
rename from third_party/rust/packed_simd_2/src/api/math.rs
rename to third_party/rust/packed_simd/src/api/math.rs
diff --git a/third_party/rust/packed_simd_2/src/api/math/float.rs b/third_party/rust/packed_simd/src/api/math/float.rs
rename from third_party/rust/packed_simd_2/src/api/math/float.rs
rename to third_party/rust/packed_simd/src/api/math/float.rs
--- a/third_party/rust/packed_simd_2/src/api/math/float.rs
+++ b/third_party/rust/packed_simd/src/api/math/float.rs
@@ -34,16 +34,19 @@ mod rsqrte;
 mod sin;
 
 #[macro_use]
 mod sqrt;
 
 #[macro_use]
 mod sqrte;
 
+#[macro_use]
+mod tanh;
+
 macro_rules! impl_float_category {
     ([$elem_ty:ident; $elem_count:expr]: $id:ident, $mask_ty:ident) => {
         impl $id {
             #[inline]
             pub fn is_nan(self) -> $mask_ty {
                 self.ne(self)
             }
 
diff --git a/third_party/rust/packed_simd_2/src/api/math/float/abs.rs b/third_party/rust/packed_simd/src/api/math/float/abs.rs
rename from third_party/rust/packed_simd_2/src/api/math/float/abs.rs
rename to third_party/rust/packed_simd/src/api/math/float/abs.rs
diff --git a/third_party/rust/packed_simd_2/src/api/math/float/consts.rs b/third_party/rust/packed_simd/src/api/math/float/consts.rs
rename from third_party/rust/packed_simd_2/src/api/math/float/consts.rs
rename to third_party/rust/packed_simd/src/api/math/float/consts.rs
diff --git a/third_party/rust/packed_simd_2/src/api/math/float/cos.rs b/third_party/rust/packed_simd/src/api/math/float/cos.rs
rename from third_party/rust/packed_simd_2/src/api/math/float/cos.rs
rename to third_party/rust/packed_simd/src/api/math/float/cos.rs
diff --git a/third_party/rust/packed_simd_2/src/api/math/float/exp.rs b/third_party/rust/packed_simd/src/api/math/float/exp.rs
rename from third_party/rust/packed_simd_2/src/api/math/float/exp.rs
rename to third_party/rust/packed_simd/src/api/math/float/exp.rs
diff --git a/third_party/rust/packed_simd_2/src/api/math/float/ln.rs b/third_party/rust/packed_simd/src/api/math/float/ln.rs
rename from third_party/rust/packed_simd_2/src/api/math/float/ln.rs
rename to third_party/rust/packed_simd/src/api/math/float/ln.rs
diff --git a/third_party/rust/packed_simd_2/src/api/math/float/mul_add.rs b/third_party/rust/packed_simd/src/api/math/float/mul_add.rs
rename from third_party/rust/packed_simd_2/src/api/math/float/mul_add.rs
rename to third_party/rust/packed_simd/src/api/math/float/mul_add.rs
diff --git a/third_party/rust/packed_simd_2/src/api/math/float/mul_adde.rs b/third_party/rust/packed_simd/src/api/math/float/mul_adde.rs
rename from third_party/rust/packed_simd_2/src/api/math/float/mul_adde.rs
rename to third_party/rust/packed_simd/src/api/math/float/mul_adde.rs
diff --git a/third_party/rust/packed_simd_2/src/api/math/float/powf.rs b/third_party/rust/packed_simd/src/api/math/float/powf.rs
rename from third_party/rust/packed_simd_2/src/api/math/float/powf.rs
rename to third_party/rust/packed_simd/src/api/math/float/powf.rs
diff --git a/third_party/rust/packed_simd_2/src/api/math/float/recpre.rs b/third_party/rust/packed_simd/src/api/math/float/recpre.rs
rename from third_party/rust/packed_simd_2/src/api/math/float/recpre.rs
rename to third_party/rust/packed_simd/src/api/math/float/recpre.rs
diff --git a/third_party/rust/packed_simd_2/src/api/math/float/rsqrte.rs b/third_party/rust/packed_simd/src/api/math/float/rsqrte.rs
rename from third_party/rust/packed_simd_2/src/api/math/float/rsqrte.rs
rename to third_party/rust/packed_simd/src/api/math/float/rsqrte.rs
diff --git a/third_party/rust/packed_simd_2/src/api/math/float/sin.rs b/third_party/rust/packed_simd/src/api/math/float/sin.rs
rename from third_party/rust/packed_simd_2/src/api/math/float/sin.rs
rename to third_party/rust/packed_simd/src/api/math/float/sin.rs
diff --git a/third_party/rust/packed_simd_2/src/api/math/float/sqrt.rs b/third_party/rust/packed_simd/src/api/math/float/sqrt.rs
rename from third_party/rust/packed_simd_2/src/api/math/float/sqrt.rs
rename to third_party/rust/packed_simd/src/api/math/float/sqrt.rs
diff --git a/third_party/rust/packed_simd_2/src/api/math/float/sqrte.rs b/third_party/rust/packed_simd/src/api/math/float/sqrte.rs
rename from third_party/rust/packed_simd_2/src/api/math/float/sqrte.rs
rename to third_party/rust/packed_simd/src/api/math/float/sqrte.rs
diff --git a/third_party/rust/packed_simd/src/api/math/float/tanh.rs b/third_party/rust/packed_simd/src/api/math/float/tanh.rs
new file mode 100644
--- /dev/null
+++ b/third_party/rust/packed_simd/src/api/math/float/tanh.rs
@@ -0,0 +1,29 @@
+//! Implements vertical (lane-wise) floating-point `tanh`.
+
+macro_rules! impl_math_float_tanh {
+    ([$elem_ty:ident; $elem_count:expr]: $id:ident | $test_tt:tt) => {
+        impl $id {
+            /// Tanh.
+            #[inline]
+            pub fn tanh(self) -> Self {
+                use crate::codegen::math::float::tanh::Tanh;
+                Tanh::tanh(self)
+            }
+        }
+
+        test_if!{
+            $test_tt:
+            paste::item! {
+                pub mod [<$id _math_tanh>] {
+                    use super::*;
+                    #[cfg_attr(not(target_arch = "wasm32"), test)] #[cfg_attr(target_arch = "wasm32", wasm_bindgen_test)]
+                    fn tanh() {
+                        let z = $id::splat(0 as $elem_ty);
+
+                        assert_eq!(z, z.tanh());
+                    }
+                }
+            }
+        }
+    };
+}
diff --git a/third_party/rust/packed_simd_2/src/api/minimal.rs b/third_party/rust/packed_simd/src/api/minimal.rs
rename from third_party/rust/packed_simd_2/src/api/minimal.rs
rename to third_party/rust/packed_simd/src/api/minimal.rs
diff --git a/third_party/rust/packed_simd_2/src/api/minimal/iuf.rs b/third_party/rust/packed_simd/src/api/minimal/iuf.rs
rename from third_party/rust/packed_simd_2/src/api/minimal/iuf.rs
rename to third_party/rust/packed_simd/src/api/minimal/iuf.rs
diff --git a/third_party/rust/packed_simd_2/src/api/minimal/mask.rs b/third_party/rust/packed_simd/src/api/minimal/mask.rs
rename from third_party/rust/packed_simd_2/src/api/minimal/mask.rs
rename to third_party/rust/packed_simd/src/api/minimal/mask.rs
diff --git a/third_party/rust/packed_simd_2/src/api/minimal/ptr.rs b/third_party/rust/packed_simd/src/api/minimal/ptr.rs
rename from third_party/rust/packed_simd_2/src/api/minimal/ptr.rs
rename to third_party/rust/packed_simd/src/api/minimal/ptr.rs
--- a/third_party/rust/packed_simd_2/src/api/minimal/ptr.rs
+++ b/third_party/rust/packed_simd/src/api/minimal/ptr.rs
@@ -578,17 +578,17 @@ macro_rules! impl_minimal_p {
             /// # Panics
             ///
             /// If `slice.len() < Self::lanes()` or `&slice[0]` is not aligned
             /// to an `align_of::<Self>()` boundary.
             #[inline]
             pub fn from_slice_aligned(slice: &[$elem_ty]) -> Self {
                 unsafe {
                     assert!(slice.len() >= $elem_count);
-                    let target_ptr = slice.get_unchecked(0) as *const $elem_ty;
+                    let target_ptr = slice.as_ptr();
                     assert!(
                         target_ptr.align_offset(crate::mem::align_of::<Self>())
                             == 0
                     );
                     Self::from_slice_aligned_unchecked(slice)
                 }
             }
 
@@ -610,31 +610,30 @@ macro_rules! impl_minimal_p {
             /// # Safety
             ///
             /// If `slice.len() < Self::lanes()` or `&slice[0]` is not aligned
             /// to an `align_of::<Self>()` boundary, the behavior is undefined.
             #[inline]
             pub unsafe fn from_slice_aligned_unchecked(slice: &[$elem_ty])
                                                        -> Self {
                 #[allow(clippy::cast_ptr_alignment)]
-                *(slice.get_unchecked(0) as *const $elem_ty as *const Self)
+                *(slice.as_ptr().cast())
             }
 
             /// Instantiates a new vector with the values of the `slice`.
             ///
             /// # Safety
             ///
             /// If `slice.len() < Self::lanes()` the behavior is undefined.
             #[inline]
             pub unsafe fn from_slice_unaligned_unchecked(
                 slice: &[$elem_ty],
             ) -> Self {
                 use crate::mem::size_of;
-                let target_ptr =
-                    slice.get_unchecked(0) as *const $elem_ty as *const u8;
+                let target_ptr = slice.as_ptr().cast();
                 let mut x = Self::splat(crate::ptr::null_mut() as $elem_ty);
                 let self_ptr = &mut x as *mut Self as *mut u8;
                 crate::ptr::copy_nonoverlapping(
                     target_ptr,
                     self_ptr,
                     size_of::<Self>(),
                 );
                 x
@@ -793,18 +792,17 @@ macro_rules! impl_minimal_p {
             /// # Panics
             ///
             /// If `slice.len() < Self::lanes()` or `&slice[0]` is not
             /// aligned to an `align_of::<Self>()` boundary.
             #[inline]
             pub fn write_to_slice_aligned(self, slice: &mut [$elem_ty]) {
                 unsafe {
                     assert!(slice.len() >= $elem_count);
-                    let target_ptr =
-                        slice.get_unchecked_mut(0) as *mut $elem_ty;
+                    let target_ptr = slice.as_mut_ptr();
                     assert!(
                         target_ptr.align_offset(crate::mem::align_of::<Self>())
                             == 0
                     );
                     self.write_to_slice_aligned_unchecked(slice);
                 }
             }
 
@@ -828,31 +826,29 @@ macro_rules! impl_minimal_p {
             /// If `slice.len() < Self::lanes()` or `&slice[0]` is not
             /// aligned to an `align_of::<Self>()` boundary, the behavior is
             /// undefined.
             #[inline]
             pub unsafe fn write_to_slice_aligned_unchecked(
                 self, slice: &mut [$elem_ty],
             ) {
                 #[allow(clippy::cast_ptr_alignment)]
-                *(slice.get_unchecked_mut(0) as *mut $elem_ty as *mut Self) =
-                    self;
+                *(slice.as_mut_ptr().cast()) = self;
             }
 
             /// Writes the values of the vector to the `slice`.
             ///
             /// # Safety
             ///
             /// If `slice.len() < Self::lanes()` the behavior is undefined.
             #[inline]
             pub unsafe fn write_to_slice_unaligned_unchecked(
                 self, slice: &mut [$elem_ty],
             ) {
-                let target_ptr =
-                    slice.get_unchecked_mut(0) as *mut $elem_ty as *mut u8;
+                let target_ptr = slice.as_mut_ptr().cast();
                 let self_ptr = &self as *const Self as *const u8;
                 crate::ptr::copy_nonoverlapping(
                     self_ptr,
                     target_ptr,
                     crate::mem::size_of::<Self>(),
                 );
             }
         }
diff --git a/third_party/rust/packed_simd_2/src/api/ops.rs b/third_party/rust/packed_simd/src/api/ops.rs
rename from third_party/rust/packed_simd_2/src/api/ops.rs
rename to third_party/rust/packed_simd/src/api/ops.rs
diff --git a/third_party/rust/packed_simd_2/src/api/ops/scalar_arithmetic.rs b/third_party/rust/packed_simd/src/api/ops/scalar_arithmetic.rs
rename from third_party/rust/packed_simd_2/src/api/ops/scalar_arithmetic.rs
rename to third_party/rust/packed_simd/src/api/ops/scalar_arithmetic.rs
diff --git a/third_party/rust/packed_simd_2/src/api/ops/scalar_bitwise.rs b/third_party/rust/packed_simd/src/api/ops/scalar_bitwise.rs
rename from third_party/rust/packed_simd_2/src/api/ops/scalar_bitwise.rs
rename to third_party/rust/packed_simd/src/api/ops/scalar_bitwise.rs
diff --git a/third_party/rust/packed_simd_2/src/api/ops/scalar_mask_bitwise.rs b/third_party/rust/packed_simd/src/api/ops/scalar_mask_bitwise.rs
rename from third_party/rust/packed_simd_2/src/api/ops/scalar_mask_bitwise.rs
rename to third_party/rust/packed_simd/src/api/ops/scalar_mask_bitwise.rs
diff --git a/third_party/rust/packed_simd_2/src/api/ops/scalar_shifts.rs b/third_party/rust/packed_simd/src/api/ops/scalar_shifts.rs
rename from third_party/rust/packed_simd_2/src/api/ops/scalar_shifts.rs
rename to third_party/rust/packed_simd/src/api/ops/scalar_shifts.rs
diff --git a/third_party/rust/packed_simd_2/src/api/ops/vector_arithmetic.rs b/third_party/rust/packed_simd/src/api/ops/vector_arithmetic.rs
rename from third_party/rust/packed_simd_2/src/api/ops/vector_arithmetic.rs
rename to third_party/rust/packed_simd/src/api/ops/vector_arithmetic.rs
diff --git a/third_party/rust/packed_simd_2/src/api/ops/vector_bitwise.rs b/third_party/rust/packed_simd/src/api/ops/vector_bitwise.rs
rename from third_party/rust/packed_simd_2/src/api/ops/vector_bitwise.rs
rename to third_party/rust/packed_simd/src/api/ops/vector_bitwise.rs
diff --git a/third_party/rust/packed_simd_2/src/api/ops/vector_float_min_max.rs b/third_party/rust/packed_simd/src/api/ops/vector_float_min_max.rs
rename from third_party/rust/packed_simd_2/src/api/ops/vector_float_min_max.rs
rename to third_party/rust/packed_simd/src/api/ops/vector_float_min_max.rs
diff --git a/third_party/rust/packed_simd_2/src/api/ops/vector_int_min_max.rs b/third_party/rust/packed_simd/src/api/ops/vector_int_min_max.rs
rename from third_party/rust/packed_simd_2/src/api/ops/vector_int_min_max.rs
rename to third_party/rust/packed_simd/src/api/ops/vector_int_min_max.rs
diff --git a/third_party/rust/packed_simd_2/src/api/ops/vector_mask_bitwise.rs b/third_party/rust/packed_simd/src/api/ops/vector_mask_bitwise.rs
rename from third_party/rust/packed_simd_2/src/api/ops/vector_mask_bitwise.rs
rename to third_party/rust/packed_simd/src/api/ops/vector_mask_bitwise.rs
diff --git a/third_party/rust/packed_simd_2/src/api/ops/vector_neg.rs b/third_party/rust/packed_simd/src/api/ops/vector_neg.rs
rename from third_party/rust/packed_simd_2/src/api/ops/vector_neg.rs
rename to third_party/rust/packed_simd/src/api/ops/vector_neg.rs
diff --git a/third_party/rust/packed_simd_2/src/api/ops/vector_rotates.rs b/third_party/rust/packed_simd/src/api/ops/vector_rotates.rs
rename from third_party/rust/packed_simd_2/src/api/ops/vector_rotates.rs
rename to third_party/rust/packed_simd/src/api/ops/vector_rotates.rs
--- a/third_party/rust/packed_simd_2/src/api/ops/vector_rotates.rs
+++ b/third_party/rust/packed_simd/src/api/ops/vector_rotates.rs
@@ -18,18 +18,18 @@ macro_rules! impl_ops_vector_rotates {
                 let n = n % LANE_WIDTH;
                 (self << n) | (self >> ((LANE_WIDTH - n) % LANE_WIDTH))
             }
 
             /// Shifts the bits of each lane to the right by the specified
             /// amount in the corresponding lane of `n`, wrapping the
             /// truncated bits to the beginning of the resulting integer.
             ///
-            /// Note: this is neither the same operation as `<<` nor equivalent
-            /// to `slice::rotate_left`.
+            /// Note: this is neither the same operation as `>>` nor equivalent
+            /// to `slice::rotate_right`.
             #[inline]
             pub fn rotate_right(self, n: $id) -> $id {
                 const LANE_WIDTH: $elem_ty =
                     crate::mem::size_of::<$elem_ty>() as $elem_ty * 8;
                 // Protect against undefined behavior for over-long bit shifts
                 let n = n % LANE_WIDTH;
                 (self >> n) | (self << ((LANE_WIDTH - n) % LANE_WIDTH))
             }
diff --git a/third_party/rust/packed_simd_2/src/api/ops/vector_shifts.rs b/third_party/rust/packed_simd/src/api/ops/vector_shifts.rs
rename from third_party/rust/packed_simd_2/src/api/ops/vector_shifts.rs
rename to third_party/rust/packed_simd/src/api/ops/vector_shifts.rs
diff --git a/third_party/rust/packed_simd_2/src/api/ptr.rs b/third_party/rust/packed_simd/src/api/ptr.rs
rename from third_party/rust/packed_simd_2/src/api/ptr.rs
rename to third_party/rust/packed_simd/src/api/ptr.rs
diff --git a/third_party/rust/packed_simd_2/src/api/ptr/gather_scatter.rs b/third_party/rust/packed_simd/src/api/ptr/gather_scatter.rs
rename from third_party/rust/packed_simd_2/src/api/ptr/gather_scatter.rs
rename to third_party/rust/packed_simd/src/api/ptr/gather_scatter.rs
diff --git a/third_party/rust/packed_simd_2/src/api/reductions.rs b/third_party/rust/packed_simd/src/api/reductions.rs
rename from third_party/rust/packed_simd_2/src/api/reductions.rs
rename to third_party/rust/packed_simd/src/api/reductions.rs
diff --git a/third_party/rust/packed_simd_2/src/api/reductions/bitwise.rs b/third_party/rust/packed_simd/src/api/reductions/bitwise.rs
rename from third_party/rust/packed_simd_2/src/api/reductions/bitwise.rs
rename to third_party/rust/packed_simd/src/api/reductions/bitwise.rs
diff --git a/third_party/rust/packed_simd_2/src/api/reductions/float_arithmetic.rs b/third_party/rust/packed_simd/src/api/reductions/float_arithmetic.rs
rename from third_party/rust/packed_simd_2/src/api/reductions/float_arithmetic.rs
rename to third_party/rust/packed_simd/src/api/reductions/float_arithmetic.rs
diff --git a/third_party/rust/packed_simd_2/src/api/reductions/integer_arithmetic.rs b/third_party/rust/packed_simd/src/api/reductions/integer_arithmetic.rs
rename from third_party/rust/packed_simd_2/src/api/reductions/integer_arithmetic.rs
rename to third_party/rust/packed_simd/src/api/reductions/integer_arithmetic.rs
diff --git a/third_party/rust/packed_simd_2/src/api/reductions/mask.rs b/third_party/rust/packed_simd/src/api/reductions/mask.rs
rename from third_party/rust/packed_simd_2/src/api/reductions/mask.rs
rename to third_party/rust/packed_simd/src/api/reductions/mask.rs
diff --git a/third_party/rust/packed_simd_2/src/api/reductions/min_max.rs b/third_party/rust/packed_simd/src/api/reductions/min_max.rs
rename from third_party/rust/packed_simd_2/src/api/reductions/min_max.rs
rename to third_party/rust/packed_simd/src/api/reductions/min_max.rs
diff --git a/third_party/rust/packed_simd_2/src/api/select.rs b/third_party/rust/packed_simd/src/api/select.rs
rename from third_party/rust/packed_simd_2/src/api/select.rs
rename to third_party/rust/packed_simd/src/api/select.rs
diff --git a/third_party/rust/packed_simd_2/src/api/shuffle.rs b/third_party/rust/packed_simd/src/api/shuffle.rs
rename from third_party/rust/packed_simd_2/src/api/shuffle.rs
rename to third_party/rust/packed_simd/src/api/shuffle.rs
--- a/third_party/rust/packed_simd_2/src/api/shuffle.rs
+++ b/third_party/rust/packed_simd/src/api/shuffle.rs
@@ -22,17 +22,17 @@
 /// while the indices in range `[N, 2*N)` refer to the `i - N`-th element of
 /// `vec1`.
 ///
 /// # Examples
 ///
 /// Shuffling elements of two vectors:
 ///
 /// ```
-/// # use packed_simd_2::*;
+/// # use packed_simd::*;
 /// # fn main() {
 /// // Shuffle allows reordering the elements:
 /// let x = i32x4::new(1, 2, 3, 4);
 /// let y = i32x4::new(5, 6, 7, 8);
 /// let r = shuffle!(x, y, [4, 0, 5, 1]);
 /// assert_eq!(r, i32x4::new(5, 1, 6, 2));
 ///
 /// // The resulting vector can als be smaller than the input:
@@ -44,17 +44,17 @@
 /// assert_eq!(r, i32x8::new(2, 4, 5, 3, 2, 8, 3, 3));
 /// // At most 2 * the number of lanes in the input vector.
 /// # }
 /// ```
 ///
 /// Shuffling elements of one vector:
 ///
 /// ```
-/// # use packed_simd_2::*;
+/// # use packed_simd::*;
 /// # fn main() {
 /// // Shuffle allows reordering the elements of a vector:
 /// let x = i32x4::new(1, 2, 3, 4);
 /// let r = shuffle!(x, [2, 1, 3, 0]);
 /// assert_eq!(r, i32x4::new(3, 2, 4, 1));
 ///
 /// // The resulting vector can be smaller than the input:
 /// let r = shuffle!(x, [1, 3]);
diff --git a/third_party/rust/packed_simd_2/src/api/shuffle1_dyn.rs b/third_party/rust/packed_simd/src/api/shuffle1_dyn.rs
rename from third_party/rust/packed_simd_2/src/api/shuffle1_dyn.rs
rename to third_party/rust/packed_simd/src/api/shuffle1_dyn.rs
diff --git a/third_party/rust/packed_simd_2/src/api/slice.rs b/third_party/rust/packed_simd/src/api/slice.rs
rename from third_party/rust/packed_simd_2/src/api/slice.rs
rename to third_party/rust/packed_simd/src/api/slice.rs
diff --git a/third_party/rust/packed_simd_2/src/api/slice/from_slice.rs b/third_party/rust/packed_simd/src/api/slice/from_slice.rs
rename from third_party/rust/packed_simd_2/src/api/slice/from_slice.rs
rename to third_party/rust/packed_simd/src/api/slice/from_slice.rs
--- a/third_party/rust/packed_simd_2/src/api/slice/from_slice.rs
+++ b/third_party/rust/packed_simd/src/api/slice/from_slice.rs
@@ -8,17 +8,17 @@ macro_rules! impl_slice_from_slice {
             /// # Panics
             ///
             /// If `slice.len() < Self::lanes()` or `&slice[0]` is not aligned
             /// to an `align_of::<Self>()` boundary.
             #[inline]
             pub fn from_slice_aligned(slice: &[$elem_ty]) -> Self {
                 unsafe {
                     assert!(slice.len() >= $elem_count);
-                    let target_ptr = slice.get_unchecked(0) as *const $elem_ty;
+                    let target_ptr = slice.as_ptr();
                     assert_eq!(target_ptr.align_offset(crate::mem::align_of::<Self>()), 0);
                     Self::from_slice_aligned_unchecked(slice)
                 }
             }
 
             /// Instantiates a new vector with the values of the `slice`.
             ///
             /// # Panics
@@ -36,33 +36,33 @@ macro_rules! impl_slice_from_slice {
             ///
             /// # Safety
             ///
             /// If `slice.len() < Self::lanes()` or `&slice[0]` is not aligned
             /// to an `align_of::<Self>()` boundary, the behavior is undefined.
             #[inline]
             pub unsafe fn from_slice_aligned_unchecked(slice: &[$elem_ty]) -> Self {
                 debug_assert!(slice.len() >= $elem_count);
-                let target_ptr = slice.get_unchecked(0) as *const $elem_ty;
+                let target_ptr = slice.as_ptr();
                 debug_assert_eq!(target_ptr.align_offset(crate::mem::align_of::<Self>()), 0);
 
                 #[allow(clippy::cast_ptr_alignment)]
                 *(target_ptr as *const Self)
             }
 
             /// Instantiates a new vector with the values of the `slice`.
             ///
             /// # Safety
             ///
             /// If `slice.len() < Self::lanes()` the behavior is undefined.
             #[inline]
             pub unsafe fn from_slice_unaligned_unchecked(slice: &[$elem_ty]) -> Self {
                 use crate::mem::size_of;
                 debug_assert!(slice.len() >= $elem_count);
-                let target_ptr = slice.get_unchecked(0) as *const $elem_ty as *const u8;
+                let target_ptr = slice.as_ptr().cast();
                 let mut x = Self::splat(0 as $elem_ty);
                 let self_ptr = &mut x as *mut Self as *mut u8;
                 crate::ptr::copy_nonoverlapping(target_ptr, self_ptr, size_of::<Self>());
                 x
             }
         }
 
         test_if! {
diff --git a/third_party/rust/packed_simd_2/src/api/slice/write_to_slice.rs b/third_party/rust/packed_simd/src/api/slice/write_to_slice.rs
rename from third_party/rust/packed_simd_2/src/api/slice/write_to_slice.rs
rename to third_party/rust/packed_simd/src/api/slice/write_to_slice.rs
--- a/third_party/rust/packed_simd_2/src/api/slice/write_to_slice.rs
+++ b/third_party/rust/packed_simd/src/api/slice/write_to_slice.rs
@@ -8,17 +8,17 @@ macro_rules! impl_slice_write_to_slice {
             /// # Panics
             ///
             /// If `slice.len() < Self::lanes()` or `&slice[0]` is not
             /// aligned to an `align_of::<Self>()` boundary.
             #[inline]
             pub fn write_to_slice_aligned(self, slice: &mut [$elem_ty]) {
                 unsafe {
                     assert!(slice.len() >= $elem_count);
-                    let target_ptr = slice.get_unchecked_mut(0) as *mut $elem_ty;
+                    let target_ptr = slice.as_mut_ptr();
                     assert_eq!(target_ptr.align_offset(crate::mem::align_of::<Self>()), 0);
                     self.write_to_slice_aligned_unchecked(slice);
                 }
             }
 
             /// Writes the values of the vector to the `slice`.
             ///
             /// # Panics
@@ -37,17 +37,17 @@ macro_rules! impl_slice_write_to_slice {
             /// # Safety
             ///
             /// If `slice.len() < Self::lanes()` or `&slice[0]` is not
             /// aligned to an `align_of::<Self>()` boundary, the behavior is
             /// undefined.
             #[inline]
             pub unsafe fn write_to_slice_aligned_unchecked(self, slice: &mut [$elem_ty]) {
                 debug_assert!(slice.len() >= $elem_count);
-                let target_ptr = slice.get_unchecked_mut(0) as *mut $elem_ty;
+                let target_ptr = slice.as_mut_ptr();
                 debug_assert_eq!(target_ptr.align_offset(crate::mem::align_of::<Self>()), 0);
 
                 #[allow(clippy::cast_ptr_alignment)]
                 #[allow(clippy::cast_ptr_alignment)]
                 #[allow(clippy::cast_ptr_alignment)]
                 #[allow(clippy::cast_ptr_alignment)]
                 *(target_ptr as *mut Self) = self;
             }
@@ -55,17 +55,17 @@ macro_rules! impl_slice_write_to_slice {
             /// Writes the values of the vector to the `slice`.
             ///
             /// # Safety
             ///
             /// If `slice.len() < Self::lanes()` the behavior is undefined.
             #[inline]
             pub unsafe fn write_to_slice_unaligned_unchecked(self, slice: &mut [$elem_ty]) {
                 debug_assert!(slice.len() >= $elem_count);
-                let target_ptr = slice.get_unchecked_mut(0) as *mut $elem_ty as *mut u8;
+                let target_ptr = slice.as_mut_ptr().cast();
                 let self_ptr = &self as *const Self as *const u8;
                 crate::ptr::copy_nonoverlapping(self_ptr, target_ptr, crate::mem::size_of::<Self>());
             }
         }
 
         test_if! {
             $test_tt:
             paste::item! {
diff --git a/third_party/rust/packed_simd_2/src/api/swap_bytes.rs b/third_party/rust/packed_simd/src/api/swap_bytes.rs
rename from third_party/rust/packed_simd_2/src/api/swap_bytes.rs
rename to third_party/rust/packed_simd/src/api/swap_bytes.rs
--- a/third_party/rust/packed_simd_2/src/api/swap_bytes.rs
+++ b/third_party/rust/packed_simd/src/api/swap_bytes.rs
@@ -71,17 +71,17 @@ macro_rules! impl_swap_bytes {
                 {
                     x.swap_bytes()
                 }
             }
         }
 
         test_if! {
             $test_tt:
-            paste::item_with_macros! {
+            paste::item! {
                 pub mod [<$id _swap_bytes>] {
                     use super::*;
 
                     const BYTES: [u8; 64] = [
                         0, 1, 2, 3, 4, 5, 6, 7,
                         8, 9, 10, 11, 12, 13, 14, 15,
                         16, 17, 18, 19, 20, 21, 22, 23,
                         24, 25, 26, 27, 28, 29, 30, 31,
diff --git a/third_party/rust/packed_simd_2/src/codegen.rs b/third_party/rust/packed_simd/src/codegen.rs
rename from third_party/rust/packed_simd_2/src/codegen.rs
rename to third_party/rust/packed_simd/src/codegen.rs
diff --git a/third_party/rust/packed_simd_2/src/codegen/bit_manip.rs b/third_party/rust/packed_simd/src/codegen/bit_manip.rs
rename from third_party/rust/packed_simd_2/src/codegen/bit_manip.rs
rename to third_party/rust/packed_simd/src/codegen/bit_manip.rs
diff --git a/third_party/rust/packed_simd_2/src/codegen/llvm.rs b/third_party/rust/packed_simd/src/codegen/llvm.rs
rename from third_party/rust/packed_simd_2/src/codegen/llvm.rs
rename to third_party/rust/packed_simd/src/codegen/llvm.rs
--- a/third_party/rust/packed_simd_2/src/codegen/llvm.rs
+++ b/third_party/rust/packed_simd/src/codegen/llvm.rs
@@ -1,83 +1,77 @@
 //! LLVM's platform intrinsics
 #![allow(dead_code)]
 
 use crate::sealed::Shuffle;
 #[allow(unused_imports)] // FIXME: spurious warning?
 use crate::sealed::Simd;
 
-// Shuffle intrinsics: expanded in users' crates, therefore public.
 extern "platform-intrinsic" {
-    pub fn simd_shuffle2<T, U>(x: T, y: T, idx: [u32; 2]) -> U;
-    pub fn simd_shuffle4<T, U>(x: T, y: T, idx: [u32; 4]) -> U;
-    pub fn simd_shuffle8<T, U>(x: T, y: T, idx: [u32; 8]) -> U;
-    pub fn simd_shuffle16<T, U>(x: T, y: T, idx: [u32; 16]) -> U;
-    pub fn simd_shuffle32<T, U>(x: T, y: T, idx: [u32; 32]) -> U;
-    pub fn simd_shuffle64<T, U>(x: T, y: T, idx: [u32; 64]) -> U;
+    fn simd_shuffle<T, I, U>(x: T, y: T, idx: I) -> U;
 }
 
 #[allow(clippy::missing_safety_doc)]
 #[inline]
 pub unsafe fn __shuffle_vector2<const IDX: [u32; 2], T, U>(x: T, y: T) -> U
 where
     T: Simd,
     <T as Simd>::Element: Shuffle<[u32; 2], Output = U>,
 {
-    simd_shuffle2(x, y, IDX)
+    simd_shuffle(x, y, IDX)
 }
 
 #[allow(clippy::missing_safety_doc)]
 #[inline]
 pub unsafe fn __shuffle_vector4<const IDX: [u32; 4], T, U>(x: T, y: T) -> U
 where
     T: Simd,
     <T as Simd>::Element: Shuffle<[u32; 4], Output = U>,
 {
-    simd_shuffle4(x, y, IDX)
+    simd_shuffle(x, y, IDX)
 }
 
 #[allow(clippy::missing_safety_doc)]
 #[inline]
 pub unsafe fn __shuffle_vector8<const IDX: [u32; 8], T, U>(x: T, y: T) -> U
 where
     T: Simd,
     <T as Simd>::Element: Shuffle<[u32; 8], Output = U>,
 {
-    simd_shuffle8(x, y, IDX)
+    simd_shuffle(x, y, IDX)
 }
 
 #[allow(clippy::missing_safety_doc)]
 #[inline]
 pub unsafe fn __shuffle_vector16<const IDX: [u32; 16], T, U>(x: T, y: T) -> U
 where
     T: Simd,
     <T as Simd>::Element: Shuffle<[u32; 16], Output = U>,
 {
-    simd_shuffle16(x, y, IDX)
+    simd_shuffle(x, y, IDX)
 }
 
 #[allow(clippy::missing_safety_doc)]
 #[inline]
 pub unsafe fn __shuffle_vector32<const IDX: [u32; 32], T, U>(x: T, y: T) -> U
 where
     T: Simd,
     <T as Simd>::Element: Shuffle<[u32; 32], Output = U>,
 {
-    simd_shuffle32(x, y, IDX)
+    simd_shuffle(x, y, IDX)
 }
 
 #[allow(clippy::missing_safety_doc)]
 #[inline]
 pub unsafe fn __shuffle_vector64<const IDX: [u32; 64], T, U>(x: T, y: T) -> U
 where
     T: Simd,
     <T as Simd>::Element: Shuffle<[u32; 64], Output = U>,
 {
-    simd_shuffle64(x, y, IDX)
+    simd_shuffle(x, y, IDX)
 }
 
 extern "platform-intrinsic" {
     pub(crate) fn simd_eq<T, U>(x: T, y: T) -> U;
     pub(crate) fn simd_ne<T, U>(x: T, y: T) -> U;
     pub(crate) fn simd_lt<T, U>(x: T, y: T) -> U;
     pub(crate) fn simd_le<T, U>(x: T, y: T) -> U;
     pub(crate) fn simd_gt<T, U>(x: T, y: T) -> U;
diff --git a/third_party/rust/packed_simd_2/src/codegen/math.rs b/third_party/rust/packed_simd/src/codegen/math.rs
rename from third_party/rust/packed_simd_2/src/codegen/math.rs
rename to third_party/rust/packed_simd/src/codegen/math.rs
diff --git a/third_party/rust/packed_simd_2/src/codegen/math/float.rs b/third_party/rust/packed_simd/src/codegen/math/float.rs
rename from third_party/rust/packed_simd_2/src/codegen/math/float.rs
rename to third_party/rust/packed_simd/src/codegen/math/float.rs
--- a/third_party/rust/packed_simd_2/src/codegen/math/float.rs
+++ b/third_party/rust/packed_simd/src/codegen/math/float.rs
@@ -11,8 +11,9 @@ pub(crate) mod ln;
 pub(crate) mod mul_add;
 pub(crate) mod mul_adde;
 pub(crate) mod powf;
 pub(crate) mod sin;
 pub(crate) mod sin_cos_pi;
 pub(crate) mod sin_pi;
 pub(crate) mod sqrt;
 pub(crate) mod sqrte;
+pub(crate) mod tanh;
diff --git a/third_party/rust/packed_simd_2/src/codegen/math/float/abs.rs b/third_party/rust/packed_simd/src/codegen/math/float/abs.rs
rename from third_party/rust/packed_simd_2/src/codegen/math/float/abs.rs
rename to third_party/rust/packed_simd/src/codegen/math/float/abs.rs
diff --git a/third_party/rust/packed_simd_2/src/codegen/math/float/cos.rs b/third_party/rust/packed_simd/src/codegen/math/float/cos.rs
rename from third_party/rust/packed_simd_2/src/codegen/math/float/cos.rs
rename to third_party/rust/packed_simd/src/codegen/math/float/cos.rs
diff --git a/third_party/rust/packed_simd_2/src/codegen/math/float/cos_pi.rs b/third_party/rust/packed_simd/src/codegen/math/float/cos_pi.rs
rename from third_party/rust/packed_simd_2/src/codegen/math/float/cos_pi.rs
rename to third_party/rust/packed_simd/src/codegen/math/float/cos_pi.rs
diff --git a/third_party/rust/packed_simd_2/src/codegen/math/float/exp.rs b/third_party/rust/packed_simd/src/codegen/math/float/exp.rs
rename from third_party/rust/packed_simd_2/src/codegen/math/float/exp.rs
rename to third_party/rust/packed_simd/src/codegen/math/float/exp.rs
diff --git a/third_party/rust/packed_simd_2/src/codegen/math/float/ln.rs b/third_party/rust/packed_simd/src/codegen/math/float/ln.rs
rename from third_party/rust/packed_simd_2/src/codegen/math/float/ln.rs
rename to third_party/rust/packed_simd/src/codegen/math/float/ln.rs
diff --git a/third_party/rust/packed_simd_2/src/codegen/math/float/macros.rs b/third_party/rust/packed_simd/src/codegen/math/float/macros.rs
rename from third_party/rust/packed_simd_2/src/codegen/math/float/macros.rs
rename to third_party/rust/packed_simd/src/codegen/math/float/macros.rs
diff --git a/third_party/rust/packed_simd_2/src/codegen/math/float/mul_add.rs b/third_party/rust/packed_simd/src/codegen/math/float/mul_add.rs
rename from third_party/rust/packed_simd_2/src/codegen/math/float/mul_add.rs
rename to third_party/rust/packed_simd/src/codegen/math/float/mul_add.rs
diff --git a/third_party/rust/packed_simd_2/src/codegen/math/float/mul_adde.rs b/third_party/rust/packed_simd/src/codegen/math/float/mul_adde.rs
rename from third_party/rust/packed_simd_2/src/codegen/math/float/mul_adde.rs
rename to third_party/rust/packed_simd/src/codegen/math/float/mul_adde.rs
diff --git a/third_party/rust/packed_simd_2/src/codegen/math/float/powf.rs b/third_party/rust/packed_simd/src/codegen/math/float/powf.rs
rename from third_party/rust/packed_simd_2/src/codegen/math/float/powf.rs
rename to third_party/rust/packed_simd/src/codegen/math/float/powf.rs
diff --git a/third_party/rust/packed_simd_2/src/codegen/math/float/sin.rs b/third_party/rust/packed_simd/src/codegen/math/float/sin.rs
rename from third_party/rust/packed_simd_2/src/codegen/math/float/sin.rs
rename to third_party/rust/packed_simd/src/codegen/math/float/sin.rs
diff --git a/third_party/rust/packed_simd_2/src/codegen/math/float/sin_cos_pi.rs b/third_party/rust/packed_simd/src/codegen/math/float/sin_cos_pi.rs
rename from third_party/rust/packed_simd_2/src/codegen/math/float/sin_cos_pi.rs
rename to third_party/rust/packed_simd/src/codegen/math/float/sin_cos_pi.rs
diff --git a/third_party/rust/packed_simd_2/src/codegen/math/float/sin_pi.rs b/third_party/rust/packed_simd/src/codegen/math/float/sin_pi.rs
rename from third_party/rust/packed_simd_2/src/codegen/math/float/sin_pi.rs
rename to third_party/rust/packed_simd/src/codegen/math/float/sin_pi.rs
diff --git a/third_party/rust/packed_simd_2/src/codegen/math/float/sqrt.rs b/third_party/rust/packed_simd/src/codegen/math/float/sqrt.rs
rename from third_party/rust/packed_simd_2/src/codegen/math/float/sqrt.rs
rename to third_party/rust/packed_simd/src/codegen/math/float/sqrt.rs
diff --git a/third_party/rust/packed_simd_2/src/codegen/math/float/sqrte.rs b/third_party/rust/packed_simd/src/codegen/math/float/sqrte.rs
rename from third_party/rust/packed_simd_2/src/codegen/math/float/sqrte.rs
rename to third_party/rust/packed_simd/src/codegen/math/float/sqrte.rs
diff --git a/third_party/rust/packed_simd/src/codegen/math/float/tanh.rs b/third_party/rust/packed_simd/src/codegen/math/float/tanh.rs
new file mode 100644
--- /dev/null
+++ b/third_party/rust/packed_simd/src/codegen/math/float/tanh.rs
@@ -0,0 +1,120 @@
+//! Vertical floating-point `tanh`
+#![allow(unused)]
+
+// FIXME 64-bit 1 elem vectors tanh
+
+#[cfg(not(feature = "std"))]
+use num_traits::Float;
+
+use crate::*;
+
+pub(crate) trait Tanh {
+    fn tanh(self) -> Self;
+}
+
+macro_rules! define_tanh {
+    ($name:ident, $basetype:ty, $simdtype:ty, $lanes:expr, $trait:path) => {
+        fn $name(x: $simdtype) -> $simdtype {
+            use core::intrinsics::transmute;
+            let mut buf: [$basetype; $lanes] = unsafe { transmute(x) };
+            for elem in &mut buf {
+                *elem = <$basetype as $trait>::tanh(*elem);
+            }
+            unsafe { transmute(buf) }
+        }
+    };
+
+    (f32 => $name:ident, $type:ty, $lanes:expr) => {
+        define_tanh!($name, f32, $type, $lanes, Float);
+    };
+
+    (f64 => $name:ident, $type:ty, $lanes:expr) => {
+        define_tanh!($name, f64, $type, $lanes, Float);
+    };
+}
+
+// llvm does not seem to expose the hyperbolic versions of trigonometric
+// functions; we thus call the classical rust versions on all of them (which
+// stem from cmath).
+define_tanh!(f32 => tanh_v2f32, f32x2, 2);
+define_tanh!(f32 => tanh_v4f32, f32x4, 4);
+define_tanh!(f32 => tanh_v8f32, f32x8, 8);
+define_tanh!(f32 => tanh_v16f32, f32x16, 16);
+
+define_tanh!(f64 => tanh_v2f64, f64x2, 2);
+define_tanh!(f64 => tanh_v4f64, f64x4, 4);
+define_tanh!(f64 => tanh_v8f64, f64x8, 8);
+
+fn tanh_f32(x: f32) -> f32 {
+    Float::tanh(x)
+}
+
+fn tanh_f64(x: f64) -> f64 {
+    Float::tanh(x)
+}
+
+gen_unary_impl_table!(Tanh, tanh);
+
+cfg_if! {
+    if #[cfg(target_arch = "s390x")] {
+        // FIXME: https://github.com/rust-lang-nursery/packed_simd/issues/14
+        impl_unary!(f32x2[f32; 2]: tanh_f32);
+        impl_unary!(f32x4[f32; 4]: tanh_f32);
+        impl_unary!(f32x8[f32; 8]: tanh_f32);
+        impl_unary!(f32x16[f32; 16]: tanh_f32);
+
+        impl_unary!(f64x2[f64; 2]: tanh_f64);
+        impl_unary!(f64x4[f64; 4]: tanh_f64);
+        impl_unary!(f64x8[f64; 8]: tanh_f64);
+    } else if #[cfg(all(target_arch = "x86_64", feature = "sleef-sys"))] {
+        use sleef_sys::*;
+        cfg_if! {
+            if #[cfg(target_feature = "avx2")] {
+                impl_unary!(f32x2[t => f32x4]: Sleef_tanhf4_u10avx2128);
+                impl_unary!(f32x16[h => f32x8]: Sleef_tanhf8_u10avx2);
+                impl_unary!(f64x8[h => f64x4]: Sleef_tanhd4_u10avx2);
+
+                impl_unary!(f32x4: Sleef_tanhf4_u10avx2128);
+                impl_unary!(f32x8: Sleef_tanhf8_u10avx2);
+                impl_unary!(f64x2: Sleef_tanhd2_u10avx2128);
+                impl_unary!(f64x4: Sleef_tanhd4_u10avx2);
+            } else if #[cfg(target_feature = "avx")] {
+                impl_unary!(f32x2[t => f32x4]: Sleef_tanhf4_u10sse4);
+                impl_unary!(f32x16[h => f32x8]: Sleef_tanhf8_u10avx);
+                impl_unary!(f64x8[h => f64x4]: Sleef_tanhd4_u10avx);
+
+                impl_unary!(f32x4: Sleef_tanhf4_u10sse4);
+                impl_unary!(f32x8: Sleef_tanhf8_u10avx);
+                impl_unary!(f64x2: Sleef_tanhd2_u10sse4);
+                impl_unary!(f64x4: Sleef_tanhd4_u10avx);
+            } else if #[cfg(target_feature = "sse4.2")] {
+                impl_unary!(f32x2[t => f32x4]: Sleef_tanhf4_u10sse4);
+                impl_unary!(f32x16[q => f32x4]: Sleef_tanhf4_u10sse4);
+                impl_unary!(f64x8[q => f64x2]: Sleef_tanhd2_u10sse4);
+
+                impl_unary!(f32x4: Sleef_tanhf4_u10sse4);
+                impl_unary!(f32x8[h => f32x4]: Sleef_tanhf4_u10sse4);
+                impl_unary!(f64x2: Sleef_tanhd2_u10sse4);
+                impl_unary!(f64x4[h => f64x2]: Sleef_tanhd2_u10sse4);
+            } else {
+                impl_unary!(f32x2[f32; 2]: tanh_f32);
+                impl_unary!(f32x16: tanh_v16f32);
+                impl_unary!(f64x8: tanh_v8f64);
+
+                impl_unary!(f32x4: tanh_v4f32);
+                impl_unary!(f32x8: tanh_v8f32);
+                impl_unary!(f64x2: tanh_v2f64);
+                impl_unary!(f64x4: tanh_v4f64);
+            }
+        }
+    } else {
+        impl_unary!(f32x2[f32; 2]: tanh_f32);
+        impl_unary!(f32x4: tanh_v4f32);
+        impl_unary!(f32x8: tanh_v8f32);
+        impl_unary!(f32x16: tanh_v16f32);
+
+        impl_unary!(f64x2: tanh_v2f64);
+        impl_unary!(f64x4: tanh_v4f64);
+        impl_unary!(f64x8: tanh_v8f64);
+    }
+}
diff --git a/third_party/rust/packed_simd_2/src/codegen/pointer_sized_int.rs b/third_party/rust/packed_simd/src/codegen/pointer_sized_int.rs
rename from third_party/rust/packed_simd_2/src/codegen/pointer_sized_int.rs
rename to third_party/rust/packed_simd/src/codegen/pointer_sized_int.rs
diff --git a/third_party/rust/packed_simd_2/src/codegen/reductions.rs b/third_party/rust/packed_simd/src/codegen/reductions.rs
rename from third_party/rust/packed_simd_2/src/codegen/reductions.rs
rename to third_party/rust/packed_simd/src/codegen/reductions.rs
diff --git a/third_party/rust/packed_simd_2/src/codegen/reductions/mask.rs b/third_party/rust/packed_simd/src/codegen/reductions/mask.rs
rename from third_party/rust/packed_simd_2/src/codegen/reductions/mask.rs
rename to third_party/rust/packed_simd/src/codegen/reductions/mask.rs
diff --git a/third_party/rust/packed_simd_2/src/codegen/reductions/mask/aarch64.rs b/third_party/rust/packed_simd/src/codegen/reductions/mask/aarch64.rs
rename from third_party/rust/packed_simd_2/src/codegen/reductions/mask/aarch64.rs
rename to third_party/rust/packed_simd/src/codegen/reductions/mask/aarch64.rs
diff --git a/third_party/rust/packed_simd_2/src/codegen/reductions/mask/arm.rs b/third_party/rust/packed_simd/src/codegen/reductions/mask/arm.rs
rename from third_party/rust/packed_simd_2/src/codegen/reductions/mask/arm.rs
rename to third_party/rust/packed_simd/src/codegen/reductions/mask/arm.rs
diff --git a/third_party/rust/packed_simd_2/src/codegen/reductions/mask/fallback.rs b/third_party/rust/packed_simd/src/codegen/reductions/mask/fallback.rs
rename from third_party/rust/packed_simd_2/src/codegen/reductions/mask/fallback.rs
rename to third_party/rust/packed_simd/src/codegen/reductions/mask/fallback.rs
diff --git a/third_party/rust/packed_simd_2/src/codegen/reductions/mask/fallback_impl.rs b/third_party/rust/packed_simd/src/codegen/reductions/mask/fallback_impl.rs
rename from third_party/rust/packed_simd_2/src/codegen/reductions/mask/fallback_impl.rs
rename to third_party/rust/packed_simd/src/codegen/reductions/mask/fallback_impl.rs
diff --git a/third_party/rust/packed_simd_2/src/codegen/reductions/mask/x86.rs b/third_party/rust/packed_simd/src/codegen/reductions/mask/x86.rs
rename from third_party/rust/packed_simd_2/src/codegen/reductions/mask/x86.rs
rename to third_party/rust/packed_simd/src/codegen/reductions/mask/x86.rs
diff --git a/third_party/rust/packed_simd_2/src/codegen/reductions/mask/x86/avx.rs b/third_party/rust/packed_simd/src/codegen/reductions/mask/x86/avx.rs
rename from third_party/rust/packed_simd_2/src/codegen/reductions/mask/x86/avx.rs
rename to third_party/rust/packed_simd/src/codegen/reductions/mask/x86/avx.rs
diff --git a/third_party/rust/packed_simd_2/src/codegen/reductions/mask/x86/avx2.rs b/third_party/rust/packed_simd/src/codegen/reductions/mask/x86/avx2.rs
rename from third_party/rust/packed_simd_2/src/codegen/reductions/mask/x86/avx2.rs
rename to third_party/rust/packed_simd/src/codegen/reductions/mask/x86/avx2.rs
diff --git a/third_party/rust/packed_simd_2/src/codegen/reductions/mask/x86/sse.rs b/third_party/rust/packed_simd/src/codegen/reductions/mask/x86/sse.rs
rename from third_party/rust/packed_simd_2/src/codegen/reductions/mask/x86/sse.rs
rename to third_party/rust/packed_simd/src/codegen/reductions/mask/x86/sse.rs
diff --git a/third_party/rust/packed_simd_2/src/codegen/reductions/mask/x86/sse2.rs b/third_party/rust/packed_simd/src/codegen/reductions/mask/x86/sse2.rs
rename from third_party/rust/packed_simd_2/src/codegen/reductions/mask/x86/sse2.rs
rename to third_party/rust/packed_simd/src/codegen/reductions/mask/x86/sse2.rs
diff --git a/third_party/rust/packed_simd_2/src/codegen/shuffle.rs b/third_party/rust/packed_simd/src/codegen/shuffle.rs
rename from third_party/rust/packed_simd_2/src/codegen/shuffle.rs
rename to third_party/rust/packed_simd/src/codegen/shuffle.rs
diff --git a/third_party/rust/packed_simd_2/src/codegen/shuffle1_dyn.rs b/third_party/rust/packed_simd/src/codegen/shuffle1_dyn.rs
rename from third_party/rust/packed_simd_2/src/codegen/shuffle1_dyn.rs
rename to third_party/rust/packed_simd/src/codegen/shuffle1_dyn.rs
diff --git a/third_party/rust/packed_simd_2/src/codegen/swap_bytes.rs b/third_party/rust/packed_simd/src/codegen/swap_bytes.rs
rename from third_party/rust/packed_simd_2/src/codegen/swap_bytes.rs
rename to third_party/rust/packed_simd/src/codegen/swap_bytes.rs
diff --git a/third_party/rust/packed_simd_2/src/codegen/v128.rs b/third_party/rust/packed_simd/src/codegen/v128.rs
rename from third_party/rust/packed_simd_2/src/codegen/v128.rs
rename to third_party/rust/packed_simd/src/codegen/v128.rs
diff --git a/third_party/rust/packed_simd_2/src/codegen/v16.rs b/third_party/rust/packed_simd/src/codegen/v16.rs
rename from third_party/rust/packed_simd_2/src/codegen/v16.rs
rename to third_party/rust/packed_simd/src/codegen/v16.rs
diff --git a/third_party/rust/packed_simd_2/src/codegen/v256.rs b/third_party/rust/packed_simd/src/codegen/v256.rs
rename from third_party/rust/packed_simd_2/src/codegen/v256.rs
rename to third_party/rust/packed_simd/src/codegen/v256.rs
diff --git a/third_party/rust/packed_simd_2/src/codegen/v32.rs b/third_party/rust/packed_simd/src/codegen/v32.rs
rename from third_party/rust/packed_simd_2/src/codegen/v32.rs
rename to third_party/rust/packed_simd/src/codegen/v32.rs
diff --git a/third_party/rust/packed_simd_2/src/codegen/v512.rs b/third_party/rust/packed_simd/src/codegen/v512.rs
rename from third_party/rust/packed_simd_2/src/codegen/v512.rs
rename to third_party/rust/packed_simd/src/codegen/v512.rs
diff --git a/third_party/rust/packed_simd_2/src/codegen/v64.rs b/third_party/rust/packed_simd/src/codegen/v64.rs
rename from third_party/rust/packed_simd_2/src/codegen/v64.rs
rename to third_party/rust/packed_simd/src/codegen/v64.rs
diff --git a/third_party/rust/packed_simd_2/src/codegen/vPtr.rs b/third_party/rust/packed_simd/src/codegen/vPtr.rs
rename from third_party/rust/packed_simd_2/src/codegen/vPtr.rs
rename to third_party/rust/packed_simd/src/codegen/vPtr.rs
diff --git a/third_party/rust/packed_simd_2/src/codegen/vSize.rs b/third_party/rust/packed_simd/src/codegen/vSize.rs
rename from third_party/rust/packed_simd_2/src/codegen/vSize.rs
rename to third_party/rust/packed_simd/src/codegen/vSize.rs
diff --git a/third_party/rust/packed_simd_2/src/lib.rs b/third_party/rust/packed_simd/src/lib.rs
rename from third_party/rust/packed_simd_2/src/lib.rs
rename to third_party/rust/packed_simd/src/lib.rs
--- a/third_party/rust/packed_simd_2/src/lib.rs
+++ b/third_party/rust/packed_simd/src/lib.rs
@@ -21,38 +21,38 @@
 //! This crate exports [`Simd<[T; N]>`][`Simd`]: a packed vector of `N`
 //! elements of type `T` as well as many type aliases for this type: for
 //! example, [`f32x4`], which is just an alias for `Simd<[f32; 4]>`.
 //!
 //! The operations on packed vectors are, by default, "vertical", that is, they
 //! are applied to each vector lane in isolation of the others:
 //!
 //! ```
-//! # use packed_simd_2::*;
+//! # use packed_simd::*;
 //! let a = i32x4::new(1, 2, 3, 4);
 //! let b = i32x4::new(5, 6, 7, 8);
 //! assert_eq!(a + b, i32x4::new(6, 8, 10, 12));
 //! ```
 //!
 //! Many "horizontal" operations are also provided:
 //!
 //! ```
-//! # use packed_simd_2::*;
+//! # use packed_simd::*;
 //! # let a = i32x4::new(1, 2, 3, 4);
 //! assert_eq!(a.wrapping_sum(), 10);
 //! ```
 //!
 //! In virtually all architectures vertical operations are fast, while
 //! horizontal operations are, by comparison, much slower. That is, the
 //! most portably-efficient way of performing a reduction over a slice
 //! is to collect the results into a vector using vertical operations,
 //! and performing a single horizontal operation at the end:
 //!
 //! ```
-//! # use packed_simd_2::*;
+//! # use packed_simd::*;
 //! fn reduce(x: &[i32]) -> i32 {
 //!     assert_eq!(x.len() % 4, 0);
 //!     let mut sum = i32x4::splat(0); // [0, 0, 0, 0]
 //!     for i in (0..x.len()).step_by(4) {
 //!         sum += i32x4::from_slice_unaligned(&x[i..]);
 //!     }
 //!     sum.wrapping_sum()
 //! }
@@ -74,17 +74,17 @@
 //! * `u{element_width}`: unsigned integer
 //! * `f{element_width}`: float
 //! * `m{element_width}`: mask (see below)
 //! * `*{const,mut} T`: `const` and `mut` pointers
 //!
 //! ## Basic operations
 //!
 //! ```
-//! # use packed_simd_2::*;
+//! # use packed_simd::*;
 //! // Sets all elements to `0`:
 //! let a = i32x4::splat(0);
 //!
 //! // Reads a vector from a slice:
 //! let mut arr = [0, 0, 0, 1, 2, 3, 4, 5];
 //! let b = i32x4::from_slice_unaligned(&arr);
 //!
 //! // Reads the 4-th element of a vector:
@@ -102,17 +102,17 @@
 //!
 //! ## Conditional operations
 //!
 //! One often needs to perform an operation on some lanes of the vector. Vector
 //! masks, like `m32x4`, allow selecting on which vector lanes an operation is
 //! to be performed:
 //!
 //! ```
-//! # use packed_simd_2::*;
+//! # use packed_simd::*;
 //! let a = i32x4::new(1, 1, 2, 2);
 //!
 //! // Add `1` to the first two lanes of the vector.
 //! let m = m16x4::new(true, true, false, false);
 //! let a = m.select(a + 1, a);
 //! assert_eq!(a, i32x4::splat(2));
 //! ```
 //!
@@ -135,17 +135,17 @@
 //! > of [`m32x4`]. It is _typically_ more performant to use a mask element
 //! > width equal to the element width of the vectors being operated upon.
 //! > This is, however, not true for 512-bit wide vectors when targeting
 //! > AVX-512, where the most efficient masks use only 1-bit per element.
 //!
 //! All vertical comparison operations returns masks:
 //!
 //! ```
-//! # use packed_simd_2::*;
+//! # use packed_simd::*;
 //! let a = i32x4::new(1, 1, 3, 3);
 //! let b = i32x4::new(2, 2, 0, 0);
 //!
 //! // ge: >= (Greater Eequal; see also lt, le, gt, eq, ne).
 //! let m = a.ge(i32x4::splat(2));
 //!
 //! if m.any() {
 //!     // all / any / none allow coherent control flow
@@ -236,16 +236,17 @@
         clippy::must_use_candidate,
         // This lint is currently broken for generic code
         // See https://github.com/rust-lang/rust-clippy/issues/3410
         clippy::use_self,
         clippy::wrong_self_convention,
         clippy::from_over_into,
 )]
 #![cfg_attr(test, feature(hashmap_internals))]
+#![cfg_attr(doc_cfg, feature(doc_cfg))]
 #![deny(rust_2018_idioms, clippy::missing_inline_in_public_items)]
 #![no_std]
 
 use cfg_if::cfg_if;
 
 cfg_if! {
     if #[cfg(feature = "core_arch")] {
         #[allow(unused_imports)]
@@ -274,17 +275,17 @@ mod sealed;
 
 pub use crate::sealed::{Mask, Shuffle, Simd as SimdVector, SimdArray};
 
 /// Packed SIMD vector type.
 ///
 /// # Examples
 ///
 /// ```
-/// # use packed_simd_2::Simd;
+/// # use packed_simd::Simd;
 /// let v = Simd::<[i32; 4]>::new(0, 1, 2, 3);
 /// assert_eq!(v.extract(2), 2);
 /// ```
 #[repr(transparent)]
 #[derive(Copy, Clone)]
 pub struct Simd<A: sealed::SimdArray>(
     // FIXME: this type should be private,
     // but it currently must be public for the
diff --git a/third_party/rust/packed_simd_2/src/masks.rs b/third_party/rust/packed_simd/src/masks.rs
rename from third_party/rust/packed_simd_2/src/masks.rs
rename to third_party/rust/packed_simd/src/masks.rs
diff --git a/third_party/rust/packed_simd_2/src/sealed.rs b/third_party/rust/packed_simd/src/sealed.rs
rename from third_party/rust/packed_simd_2/src/sealed.rs
rename to third_party/rust/packed_simd/src/sealed.rs
diff --git a/third_party/rust/packed_simd_2/src/testing.rs b/third_party/rust/packed_simd/src/testing.rs
rename from third_party/rust/packed_simd_2/src/testing.rs
rename to third_party/rust/packed_simd/src/testing.rs
diff --git a/third_party/rust/packed_simd_2/src/testing/macros.rs b/third_party/rust/packed_simd/src/testing/macros.rs
rename from third_party/rust/packed_simd_2/src/testing/macros.rs
rename to third_party/rust/packed_simd/src/testing/macros.rs
diff --git a/third_party/rust/packed_simd_2/src/testing/utils.rs b/third_party/rust/packed_simd/src/testing/utils.rs
rename from third_party/rust/packed_simd_2/src/testing/utils.rs
rename to third_party/rust/packed_simd/src/testing/utils.rs
diff --git a/third_party/rust/packed_simd_2/src/v128.rs b/third_party/rust/packed_simd/src/v128.rs
rename from third_party/rust/packed_simd_2/src/v128.rs
rename to third_party/rust/packed_simd/src/v128.rs
diff --git a/third_party/rust/packed_simd_2/src/v16.rs b/third_party/rust/packed_simd/src/v16.rs
rename from third_party/rust/packed_simd_2/src/v16.rs
rename to third_party/rust/packed_simd/src/v16.rs
diff --git a/third_party/rust/packed_simd_2/src/v256.rs b/third_party/rust/packed_simd/src/v256.rs
rename from third_party/rust/packed_simd_2/src/v256.rs
rename to third_party/rust/packed_simd/src/v256.rs
diff --git a/third_party/rust/packed_simd_2/src/v32.rs b/third_party/rust/packed_simd/src/v32.rs
rename from third_party/rust/packed_simd_2/src/v32.rs
rename to third_party/rust/packed_simd/src/v32.rs
diff --git a/third_party/rust/packed_simd_2/src/v512.rs b/third_party/rust/packed_simd/src/v512.rs
rename from third_party/rust/packed_simd_2/src/v512.rs
rename to third_party/rust/packed_simd/src/v512.rs
diff --git a/third_party/rust/packed_simd_2/src/v64.rs b/third_party/rust/packed_simd/src/v64.rs
rename from third_party/rust/packed_simd_2/src/v64.rs
rename to third_party/rust/packed_simd/src/v64.rs
diff --git a/third_party/rust/packed_simd_2/src/vPtr.rs b/third_party/rust/packed_simd/src/vPtr.rs
rename from third_party/rust/packed_simd_2/src/vPtr.rs
rename to third_party/rust/packed_simd/src/vPtr.rs
diff --git a/third_party/rust/packed_simd_2/src/vSize.rs b/third_party/rust/packed_simd/src/vSize.rs
rename from third_party/rust/packed_simd_2/src/vSize.rs
rename to third_party/rust/packed_simd/src/vSize.rs
diff --git a/third_party/rust/packed_simd_2/tests/endianness.rs b/third_party/rust/packed_simd/tests/endianness.rs
rename from third_party/rust/packed_simd_2/tests/endianness.rs
rename to third_party/rust/packed_simd/tests/endianness.rs
--- a/third_party/rust/packed_simd_2/tests/endianness.rs
+++ b/third_party/rust/packed_simd/tests/endianness.rs
@@ -1,12 +1,12 @@
 #[cfg(target_arch = "wasm32")]
 use wasm_bindgen_test::*;
 
-use packed_simd_2::*;
+use packed_simd::*;
 use std::{mem, slice};
 
 #[cfg_attr(not(target_arch = "wasm32"), test)]
 #[cfg_attr(target_arch = "wasm32", wasm_bindgen_test)]
 fn endian_indexing() {
     let v = i32x4::new(0, 1, 2, 3);
     assert_eq!(v.extract(0), 0);
     assert_eq!(v.extract(1), 1);
diff --git a/third_party/rust/packed_simd_2/.cargo-checksum.json b/third_party/rust/packed_simd_2/.cargo-checksum.json
deleted file mode 100644
--- a/third_party/rust/packed_simd_2/.cargo-checksum.json
+++ /dev/null
@@ -1,1 +0,0 @@
-{"files":{".appveyor.yml":"f1ed01850e0d725f9498f52a1a63ddf40702ad6e0bf5b2d7c4c04d76e96794a3",".travis.yml":"30a61a5ec53355fc1f3585e1690280308c2b7961701abc11e8389b235b647178","Cargo.toml":"36c8d757337315f6984a03edd954fbbb2062ac41f84eb0e3208f5d1eb5d59e77","LICENSE-APACHE":"a60eea817514531668d7e00765731449fe14d059d3249e0bc93b36de45f759f2","LICENSE-MIT":"6485b8ed310d3f0340bf1ad1f47645069ce4069dcc6bb46c7d5c6faf41de1fdb","README.md":"fa4dd64f66972217d35b7653338c9e2011ccd8f3008ae7c0103272d4287f9b1d","bors.toml":"dee881dc69b9b7834e4eba5d95c3ed5a416d4628815a167d6a22d4cb4fb064b8","build.rs":"019ed29c43989782d8eec3a961654cfc172d7a7898da4eca8f654700af7e1988","ci/all.sh":"2ae6b2445b4db83833e40b37efd0016c6b9879ee988b9b3ef94db5439a3e1606","ci/android-install-ndk.sh":"0f1746108cc30bf9b9ba45bcde7b19fc1a8bdf5b0258035b4eb8dc69b75efac4","ci/android-install-sdk.sh":"3490432022c5c8f5a115c084f7a9aca1626f96c0c87ffb62019228c4346b47e4","ci/android-sysimage.sh":"ebf4e5daa1f0fe1b2092b79f0f3f161c4c4275cb744e52352c4d81ab451e4c5a","ci/benchmark.sh":"b61d19ef6b90deba8fb79dee74c8b062d94844676293da346da87bb78a9a49a4","ci/deploy_and_run_on_ios_simulator.rs":"ec8ecf82d92072676aa47f0d1a3d021b60a7ae3531153ef12d2ff4541fc294dc","ci/docker/aarch64-linux-android/Dockerfile":"ace2e7d33c87bc0f6d3962a4a3408c04557646f7f51ab99cfbf574906796b016","ci/docker/aarch64-unknown-linux-gnu/Dockerfile":"da88c0d50f16dc08448c7fdf1fa5ed2cbe576acf9e7dd85b5b818621b2a8c702","ci/docker/arm-linux-androideabi/Dockerfile":"370e55d3330a413a3ccf677b3afb3e0ef9018a5fab263faa97ae8ac017fc2286","ci/docker/arm-unknown-linux-gnueabi/Dockerfile":"bb5f8ae890707c128652290ffc544447643bf12037ddd73c6ad6989f848cb380","ci/docker/arm-unknown-linux-gnueabihf/Dockerfile":"1afaefcbc05b740859acd4e067bc92439be6bcbe8f2e9678474fb434bcd398d9","ci/docker/armv7-unknown-linux-gnueabihf/Dockerfile":"8282ea707a94109beed47a57574755e2d58401735904a03f85fb64c578c53b4f","ci/docker/i586-unknown-linux-gnu/Dockerfile":"49792922269f371bd29da4727e9085101b27be67a6b97755d0196c63317f7abb","ci/docker/i686-unknown-linux-gnu/Dockerfile":"49792922269f371bd29da4727e9085101b27be67a6b97755d0196c63317f7abb","ci/docker/mips-unknown-linux-gnu/Dockerfile":"b2ebc25797612c4f8395fe9d407725156044955bfbcf442036b7f55b43a5f9da","ci/docker/mips64-unknown-linux-gnuabi64/Dockerfile":"b0c1692ac65bc56dd30494b1993d8e929c48cc9c4b92029b7c7592af6d4f9220","ci/docker/mips64el-unknown-linux-gnuabi64/Dockerfile":"4e9249c179300138141d0b2b7401b11897f64aed69f541f078c1db4594df2827","ci/docker/mipsel-unknown-linux-musl/Dockerfile":"3164c52b0dcbb01afa78292b15b5c43503ccf0491cf6eb801ec2bf22ae274e52","ci/docker/powerpc-unknown-linux-gnu/Dockerfile":"786f799d0b56eb54d7b6c4b00e1aed4ce81776e14e44767e083c89d014b72004","ci/docker/powerpc64-unknown-linux-gnu/Dockerfile":"e8bc363837cd9c2d8b22402acb8c1c329efc11ba5d12170603d2fe2eae9da059","ci/docker/powerpc64le-unknown-linux-gnu/Dockerfile":"47998d45b781d797b9e6085ebe898d90de0c952b54537a8db4e8d7503eb032d9","ci/docker/s390x-unknown-linux-gnu/Dockerfile":"93fb44df3d7fd31ead158570667c97b5076a05c3d968af4a84bc13819a8f2db8","ci/docker/sparc64-unknown-linux-gnu/Dockerfile":"da1c39a3ff1fe22e41395fa7c8934e90b4c1788e551b9aec6e38bfd94effc437","ci/docker/thumbv7neon-linux-androideabi/Dockerfile":"c2decd5591bd7a09378901bef629cd944acf052eb55e4f35b79eb9cb4d62246a","ci/docker/thumbv7neon-unknown-linux-gnueabihf/Dockerfile":"51955a8bf3c4d440f47382af6f5426ebff94ab01a04da36175babda9a057740f","ci/docker/wasm32-unknown-unknown/Dockerfile":"5a022299f56730cf8c432a07391e95e199cfa36dc8da2a96c9d185c8de93e913","ci/docker/x86_64-linux-android/Dockerfile":"685040273cf350d5509e580ac451555efa19790c8723ca2af066adadc6880ad2","ci/docker/x86_64-unknown-linux-gnu-emulated/Dockerfile":"44b6203d9290bfdc53d81219f0937e1110847a23dd982ec8c4de388354f01536","ci/docker/x86_64-unknown-linux-gnu/Dockerfile":"7f4e3ca5fa288ea70edb4d1f75309708cd30b192e2e4444e61c4d5b3b58f89cf","ci/dox.sh":"434e9611c52e389312d2b03564adf09429f10cc76fe66a8644adb104903b87b7","ci/linux-s390x.sh":"d6b732d7795b4ba131326aff893bca6228a7d2eb0e9402f135705413dbbe0dce","ci/linux-sparc64.sh":"c92966838b1ab7ad3b7a344833ee726aba6b647cf5952e56f0ad1ba420b13325","ci/lld-shim.rs":"3d7f71ec23a49e2b67f694a0168786f9a954dda15f5a138815d966643fd3fcc3","ci/max_line_width.sh":"0a1518bba4c9ecaa55694cb2e9930d0e19c265baabf73143f17f9cf285aaa5bb","ci/run-docker.sh":"92e036390ad9b0d16f109579df1b5ced2e72e9afea40c7d011400ebd3a2a90de","ci/run.sh":"41dd6a60efaaeae9661a01370cce98b631f78392859a0cf68c946c0a16edf5f7","ci/run_examples.sh":"d1a23c6c35374a0678ba5114b9b8fefd8be0a79e774872a8bf0898d1baca18d0","ci/runtest-android.rs":"145a8e9799a5223975061fe7e586ade5669ee4877a7d7a4cf6b4ab48e8e36c7c","ci/setup_benchmarks.sh":"fae3960023f6f3d1388cd2ad22fdbab4b075f1f29dd4292d7994a20783beb6cf","ci/test-runner-linux":"c8aa6025cff5306f4f31d0c61dc5f9d4dd5a1d189ab613ef8d4c367c694d9ccd","contributing.md":"2d2629310ad4d464c482bdbb5819f0d6ce223c576aeef2cdce6a1f6857085ea5","perf-guide/.gitignore":"fe82c7da551079d832cf74200b0b359b4df9828cb4a0416fa7384f07a2ae6a13","perf-guide/book.toml":"115a98284126c6b180178b44713314cc494f08a71662ee2ce15cf67f17a51064","perf-guide/src/SUMMARY.md":"3e03bffc991fdc2050f3d51842d72d9d21ea6abab56a3baf3b2d5973a78b89e1","perf-guide/src/ascii.css":"29afb08833b2fe2250f0412e1fa1161a2432a0820a14953c87124407417c741a","perf-guide/src/bound_checks.md":"5e4991ff58a183ef0cd9fdc1feb4cd12d083b44bdf87393bbb0927808ef3ce7d","perf-guide/src/float-math/approx.md":"8c09032fa2d795a0c5db1775826c850d28eb2627846d0965c60ee72de63735ad","perf-guide/src/float-math/fma.md":"311076ba4b741d604a82e74b83a8d7e8c318fcbd7f64c4392d1cf5af95c60243","perf-guide/src/float-math/fp.md":"04153e775ab6e4f0d7837bcc515230d327b04edfa34c84ce9c9e10ebaeef2be8","perf-guide/src/float-math/svml.md":"0798873b8eedaeda5fed62dc91645b57c20775a02d3cd74d8bd06958f1516506","perf-guide/src/introduction.md":"9f5a19e9e6751f25d2daad39891a0cc600974527ec4c8305843f9618910671bd","perf-guide/src/prof/linux.md":"447731eb5de7d69166728fdbc5ecb0c0c9db678ea493b45a592d67dd002184c0","perf-guide/src/prof/mca.md":"f56d54f3d20e7aa4d32052186e8237b03d65971eb5d112802b442570ff11d344","perf-guide/src/prof/profiling.md":"8a650c0fd6ede0964789bb6577557eeef1d8226a896788602ce61528e260e43c","perf-guide/src/target-feature/attribute.md":"615f88dca0a707b6c416fa605435dd6e1fb5361cc639429cbf68cd87624bd78b","perf-guide/src/target-feature/features.md":"17077760ff24c006b606dd21889c53d87228f4311f3ba3a574f9afdeacd86165","perf-guide/src/target-feature/inlining.md":"7ed1d7068d8173a00d84c16cfe5871cd68b9f04f8d0cca2d01ebc84957ebf2f6","perf-guide/src/target-feature/practice.md":"c4b371842e0086df178488fec97f20def8f0c62ee588bcd25fd948b9b1fa227e","perf-guide/src/target-feature/runtime.md":"835425f5ee597fb3e51d36e725a81ebee29f4561231d19563cd4da81dbb1cfcb","perf-guide/src/target-feature/rustflags.md":"01197acf6f0adec8db32b8591811f69cecb6555a2b05dc5d5ec27d0e3f7b065e","perf-guide/src/vert-hor-ops.md":"c6211c0ee91e60552ec592d89d9d957eedc21dee3cbd89e1ad6765ea06a27471","rustfmt.toml":"d99a43f3f8ef9e425cf01c333fba9f0051f888f5d87ab4e8f63c2f7d0fe6620f","src/api.rs":"bb1795e9657a8298d37d2349b45443f08e9e455399ad4b727018600728478c10","src/api/bit_manip.rs":"c47a4d0f7451f7e35d07715e4f39a472e07457fd456fdb726864a4f6887252a3","src/api/bitmask.rs":"6d2beefd62ee5d9c8eb060bee6abc641616bf828c99f82abf97b21bf004e894b","src/api/cast.rs":"03b94a3d316ac7b7be7068810044911e965e889a0ace7bae762749ca74a92747","src/api/cast/macros.rs":"b0a14d0c83ad2ebb7a275180f6d9e3f2bc312ba57a7d3d6c39fad4e0f20f9408","src/api/cast/v128.rs":"edd0994efac4379dff26e178423a52dbb3ffeb38b1fc97cae975d744c00b4fb6","src/api/cast/v16.rs":"96bd98c2d21b0663abe6c0ab33005b1fa693f3db7ee6795351391343863484da","src/api/cast/v256.rs":"8c31fe91f5e78ef737dfba6979cc1240210cb094a89d284fe459bf8a991ca24b","src/api/cast/v32.rs":"a99a79dd84d2a5e6adf9db98705675915bd03fd1287d489c7fe38e84d7e4a086","src/api/cast/v512.rs":"c0dd526f41ed7b8a71c3743d91267554ec0a0c75834ccc2e3ecb0ef3004af642","src/api/cast/v64.rs":"6572fdba2a1241a6cd666d3f0cce3306cd2cb7e5e236172e59d5d4351c8a88af","src/api/cmp.rs":"357c3a2a09c6d4611c32dd7fa95be2fae933d513e229026ec9b44451a77b884e","src/api/cmp/eq.rs":"60f70f355bae4cb5b17db53204cacc3890f70670611c17df638d4c04f7cc8075","src/api/cmp/ord.rs":"589f7234761c294fa5df8f525bc4acd5a47cdb602207d524a0d4e19804cd9695","src/api/cmp/partial_eq.rs":"902ccb8aa01fd5738b30ba0b712669c21d4801958907e03bad23432c7dba0198","src/api/cmp/partial_ord.rs":"9db0c37d7434cdfc62d8d66912e972fa3d8c115ab2af051a6f45e414bd3e4f1c","src/api/cmp/vertical.rs":"de3d62f38eba817299aa16f1e1939954c9a447e316509397465c2830852ba053","src/api/default.rs":"67bf21c134127d12a7028c8b88a57f0ceee8ccbd74976da8ca74eb9f16a174d5","src/api/fmt.rs":"67fb804bb86b6cd77cf8cd492b5733ce437071b66fe3297278b8a6552c325dda","src/api/fmt/binary.rs":"02b2b287f7404f8a983813cf70c87108c8da3835578b63ab303116885f609413","src/api/fmt/debug.rs":"56e1c3bdc092747344fffaafff9da7163ee7827857f6fb7cb1c9923eca4f6fa0","src/api/fmt/lower_hex.rs":"558fd592f7f485712fb051509cecc7174a21e6bf62e5ce64766e75afc97bb8e1","src/api/fmt/octal.rs":"3b2e70877a4f368c7704f8e254236c014c365c74d93371c1feb5f030e6c66422","src/api/fmt/upper_hex.rs":"2a442f666bc80e22d41f903f881238fe114dd49344c3ed69849250e853cafc5d","src/api/from.rs":"2e599d8329cb05eaf06224cc441355c4b7b51254fc19256619333be8c149d444","src/api/from/from_array.rs":"dd3fc64fb17d6184bb60343f8da26a05edf0e5f3c14caf55d49fa15e21d948dc","src/api/from/from_vector.rs":"9764371aa9e6005aace74dea14f59e5611a095b7cf42707940924749282c52f0","src/api/hash.rs":"5076ece87969592c876486f5b1ea8affbeaec379d1a14a30859e0aa5592019de","src/api/into_bits.rs":"1ee15923352786b9ab4a31fa506762297116b18cfdb8e72853abc8ad001651d2","src/api/into_bits/arch_specific.rs":"e7445021f3908326bfee758835e5fc5ad56aa1baa77fc1c58abe4350c66c670a","src/api/into_bits/macros.rs":"bb4fe99be2af6a21d805efab44c8e4e61a7b2adb42a65504a0cf26d13efdadcd","src/api/into_bits/v128.rs":"145a44922b09a5ca5b62d88a461d327d399a997a15db4b11d7b17e554a9fa4c0","src/api/into_bits/v16.rs":"f4f4f61ba88aa51b158ec56ca3dce234349aea0daf2b3029a14ab5125d1e41e5","src/api/into_bits/v256.rs":"8cea9c5d9809f11323cb7cdc53b83df593fd17caf926251e412ae9777bed547f","src/api/into_bits/v32.rs":"905ba683d342fa32f4202b80bb46530807bd0a5b588f6c2e8c9f475223c47775","src/api/into_bits/v512.rs":"e25afa1fbf088a5d58e7d75d197b6cd4c56637ea28542ba18e46a451f29d04e7","src/api/into_bits/v64.rs":"d6238022ccff7b92e55b3f6017fc269acb6f36330a6d7e8fb389853a0f1b6478","src/api/math.rs":"8b2a2fc651917a850539f993aa0b9e5bf4da67b11685285b8de8cdca311719ec","src/api/math/float.rs":"61d2794d68262a1090ae473bd30793b5f65cf732f32a6694a3af2ce5d9225616","src/api/math/float/abs.rs":"5b6b2701e2e11135b7ce58a05052ea8120e10e4702c95d046b9d21b827b26bf8","src/api/math/float/consts.rs":"6302c9261da4291d144d5bb53493cdd073498feb40955fb6860ea3c4d06c978a","src/api/math/float/cos.rs":"4c2dd7173728ef189314f1576c9486e03be21b7da98843b2f9011282a7979e31","src/api/math/float/exp.rs":"7c6d5f1e304f498a01cfa23b92380c815d7da0ad94eae3483783bc377d287eef","src/api/math/float/ln.rs":"54c7583f3df793b39ff57534fade27b41bb992439e5dc178252f5ca3190a3e54","src/api/math/float/mul_add.rs":"62cac77660d20159276d4c9ef066eb90c81cbddb808e8e157182c607625ad2eb","src/api/math/float/mul_adde.rs":"bae056ee9f3a70df39ec3c3b2f6437c65303888a7b843ef1a5bcf1f5aca0e602","src/api/math/float/powf.rs":"9ddb938984b36d39d82a82f862f80df8f7fb013f1d222d45698d41d88472f568","src/api/math/float/recpre.rs":"589225794ff1dbf31158dff660e6d4509ecc8befbb57c633900dea5ac0b840d6","src/api/math/float/rsqrte.rs":"a32abdcc318d7ccc8448231f54d75b884b7cbeb03a7d595713ab6243036f4dbf","src/api/math/float/sin.rs":"cbd3622b7df74f19691743001c8cf747a201f8977ad90542fee915f37dcd1e49","src/api/math/float/sqrt.rs":"0c66d5d63fb08e4d99c6b82a8828e41173aff1ac9fa1a2764a11fac217ccf2ac","src/api/math/float/sqrte.rs":"731e1c9f321b662accdd27dacb3aac2e8043b7aecb2f2161dde733bd9f025362","src/api/minimal.rs":"1f22bcc528555444e76de569ec0ae2029b9ae9d04805efeafa93369c8098036b","src/api/minimal/iuf.rs":"819cff26d3e196f807645bcc1d79eb27d9f175edb89910f2274d52a1e913cd11","src/api/minimal/mask.rs":"0cae10ae1fc65f5070e686c0c79bfba27b86b33d6c399367bd4848fb367dcec4","src/api/minimal/ptr.rs":"f65ebf21866a863485344432d9a7a9b7418f7fad5fdf841a4e2fa56ec0766ad0","src/api/ops.rs":"3e273b277a0f3019d42c3c59ca94a5afd4885d5ae6d2182e5089bbeec9de42ee","src/api/ops/scalar_arithmetic.rs":"d2d5ad897a59dd0787544f927e0e7ca4072c3e58b0f4a2324083312b0d5a21d7","src/api/ops/scalar_bitwise.rs":"482204e459ca6be79568e1c9f70adbe2d2151412ddf122fb2161be8ebb51c40c","src/api/ops/scalar_mask_bitwise.rs":"c250f52042e37b22d57256c80d4604104cfd2fbe2a2e127c676267270ca5d350","src/api/ops/scalar_shifts.rs":"c4773d435c3f9da4454327e6fbb2b5b41a1c0ebb1cca7372e69dc7a344a1b6e4","src/api/ops/vector_arithmetic.rs":"ddca15d09ddeef502c2ed66117a62300ca65d87e959e8b622d767bdf1c307910","src/api/ops/vector_bitwise.rs":"b3968f7005b649edcc22a54e2379b14d5ee19045f2e784029805781ae043b5ee","src/api/ops/vector_float_min_max.rs":"76bf8cb607e2c442923c1da1061a6b80d742d607408033c2a3761161114cf2a0","src/api/ops/vector_int_min_max.rs":"a378789c6ff9b32a51fbd0a97ffd36ed102cd1fe6a067d2b02017c1df342def6","src/api/ops/vector_mask_bitwise.rs":"5052d18517d765415d40327e6e8e55a312daaca0a5e2aec959bfa54b1675f9c8","src/api/ops/vector_neg.rs":"5c62f6b0221983cdbd23cd0a3af3672e6ba1255f0dfe8b19aae6fbd6503e231b","src/api/ops/vector_rotates.rs":"ee319eaaa449dc50ea8ef05b89d38519c6faa6753dfdce432ea7bb8520e4e8e7","src/api/ops/vector_shifts.rs":"e510be14127c0ffd58a2573a39701da3557d66bedec09837ac8bbd44d579da00","src/api/ptr.rs":"8a793251bed6130dcfb2f1519ceaa18b751bbb15875928d0fb6deb5a5e07523a","src/api/ptr/gather_scatter.rs":"3d614f9d5b4ca201a9f7e46af4405e1d2c28ecee1620297c23b52e37b92cc0ea","src/api/reductions.rs":"ae5baca81352ecd44526d6c30c0a1feeda475ec73ddd3c3ec6b14e944e5448ee","src/api/reductions/bitwise.rs":"8bf910ae226188bd15fc7e125f058cd2566b6186fcd0cd8fd020f352c39ce139","src/api/reductions/float_arithmetic.rs":"47a5679896db2cbb56c31372fe42143da015b6beae7db5d2f3a0309ddf427ae1","src/api/reductions/integer_arithmetic.rs":"c2df3cf7493cca4174f2c65aea422a3d20d8a23af03f8d57cef72c19fee8f20d","src/api/reductions/mask.rs":"db83327a950e33a317f37fd33ca4e20c347fb415975ec024f3e23da8509425af","src/api/reductions/min_max.rs":"6af8c9aa45c69961b1b6fc205395f4767d4421869fb105fb3d563c5605fc13cd","src/api/select.rs":"6b07e7e8026df561f7307221a896f0fbb272536f41b9109040ac094c24c69331","src/api/shuffle.rs":"26458aec2557bfab41b7765f72aefbff3a7ee08cdc689981a81f133f58ee368b","src/api/shuffle1_dyn.rs":"bfea5a91905b31444e9ef7ca6eddb7a9606b7e22d3f71bb842eb2795a0346620","src/api/slice.rs":"ee87484e8af329547b9a5d4f2a69e8bed6ea10bbd96270d706083843d4eea2ac","src/api/slice/from_slice.rs":"9b6f01ace2d12ef45c84608bb7aad3a122e2cc319b2d99170fc332a568b8de63","src/api/slice/write_to_slice.rs":"244b6bd6ccffa6e5a195f8b1abc66d94251b6d16b2ec3fe4d76d32caec68261e","src/api/swap_bytes.rs":"4a6792a2e49a77475e1b237592b4b2804dbddb79c474331acd0dd71b36934259","src/codegen.rs":"db4f232fb9f5728db310b87dc8c4733be48afacab1053798c06106bef9a42b05","src/codegen/bit_manip.rs":"525ea6ff7ad1e043b6f6136992166f1803ed5563b7f6fc292c1c40257d20e264","src/codegen/llvm.rs":"b4ccbc0bad90038f00fc3c158736462d01d0053df3afa00f9169e67d1a264444","src/codegen/math.rs":"dfcf02ad34e2fdfe22c3f1cc2822001cc895e65031b4d06e585e5047839febb7","src/codegen/math/float.rs":"2c1cbce155bc527ce34d472c0fef6bc3dadb79cd7a357dd7aa5b1ebeb1d77a13","src/codegen/math/float/abs.rs":"d5aaadcf540bdb9b4264dca6471a255fd7bf509e763bef0239c0144a68466fea","src/codegen/math/float/cos.rs":"17f28d2900c852dca221fa9c92a9cd5fe7fd2df8d427bbc60216c749b2be013d","src/codegen/math/float/cos_pi.rs":"dbaf9f443f9846a491d4ec52210a7b5835dd593b03366e3135b05c37d70f9d6c","src/codegen/math/float/exp.rs":"d300058a4bcc7ae7976f216f81902cd73a9e603ad63880dff3bbc866c27a9f37","src/codegen/math/float/ln.rs":"c851e211e43f8256093ba75b03ae0c307c9962ee66d94f09b4dd80068190cbdf","src/codegen/math/float/macros.rs":"fc9924869ed85e4795983af228cacf23158f4f35919adce16c920ad4a3f0a009","src/codegen/math/float/mul_add.rs":"041a5b69d5991d93ef795351b17560c10faf80b78fd26ad7df42a239b32cf9de","src/codegen/math/float/mul_adde.rs":"d71d5f0f3333b62a7439b823cb7adf5340ea1555ce820fb4a3f4cb922f73f5f5","src/codegen/math/float/powf.rs":"9742c3877f1a5509ca5c9492a40884b6579ba6dd11c26b7112e63f70666b395d","src/codegen/math/float/sin.rs":"0e9868d35531566509f3a01d85d5253045eb4afa8525d8407dcc1f5f33c56036","src/codegen/math/float/sin_cos_pi.rs":"8e6b6142d7dd240cdb36669722e82ab9810a2261e86e659f7d97a942ad8b1258","src/codegen/math/float/sin_pi.rs":"bb6d39db8f921e03a301fc5206ac1a61a97def8a2cb83b87ccf189f3fc48d548","src/codegen/math/float/sqrt.rs":"e6ebb0c5f428efad1f672b9a8fe4e58534dbf1ea5a8fe092ce5ce76b52fe89cb","src/codegen/math/float/sqrte.rs":"23acfaea38d0e081a6d9021c1094e813d0cfd12c58c1eca9662aade5e625d51c","src/codegen/pointer_sized_int.rs":"6ca13c214b6cf7e0929dbe18e96a16fc0bb7d8799608df29c4c8115490f99e01","src/codegen/reductions.rs":"8eb18ebac76985d2aa30262a2edd8cb004230b511a765d657525f677a585c12c","src/codegen/reductions/mask.rs":"e67f35a1f4d156a4894a2d6ea5a935b4d898cf70eefb2715f5c1cc165e776c11","src/codegen/reductions/mask/aarch64.rs":"84b101c17cad1ede4eb6d38cada0ac7da239dba8cea3badd3829b967e558431f","src/codegen/reductions/mask/arm.rs":"aaa07129bd078ae7e677cf8b8e67ec9f30536606a0c7ed1baaa18fd1793bb218","src/codegen/reductions/mask/fallback.rs":"3eb9319d2c7cf19216b607b8459612c4e027b643cf11b036937d36896bf76786","src/codegen/reductions/mask/fallback_impl.rs":"76547f396e55ef403327c77c314cf8db8c7a5c9b9819bfb925abeacf130249e5","src/codegen/reductions/mask/x86.rs":"36dcd8af4ab99730a078ed113d3955f74eb1a2876e2e6d9f224e0ff462c216d1","src/codegen/reductions/mask/x86/avx.rs":"3a40868b38c86e35aefb96d7578de6322efe89d8135e0366359b54ddd06f861a","src/codegen/reductions/mask/x86/avx2.rs":"677aed3f056285285daa3adff8bc65e739630b4424defa6d9665e160f027507e","src/codegen/reductions/mask/x86/sse.rs":"8522f6ed03f6c32dd577d4298df477c08aeaaa38563706f29096e1911ed731f2","src/codegen/reductions/mask/x86/sse2.rs":"54ec56e49b0c6841eccb719e4f310d65fe767c04136b2ec20bd8b9d7d9897b9e","src/codegen/shuffle.rs":"1ec2930f4e1acc43ac30b518af298d466a79e9e75734a51c380b7810efd1a27f","src/codegen/shuffle1_dyn.rs":"3f13ca1597378758d05106bf5ff3715eee531f3cb6d88f48b9182bd6c9386b51","src/codegen/swap_bytes.rs":"c67c86e91ca3fc77539e0efcea081a3c62548cccf503963ae408f2e86f4e6a21","src/codegen/v128.rs":"94226b31ec403d18d9d2fe06713f147c9c79e9b5f9105089088266313f843185","src/codegen/v16.rs":"ddec4ffb66b6f7aaffb9a1780c5ddba82557abd74f45073d335047e04cf74924","src/codegen/v256.rs":"6b63917f0444118d6b1595bff2045e59b97c4d24012bd575f69f1f0efc5a0241","src/codegen/v32.rs":"3477b3c5540aed86e61e2f5807dd31db947413cec9181c587d93ed6ec74f0eba","src/codegen/v512.rs":"5854f99d3aabc4cd42b28a20d9ce447756dc2ba024a409a69b6a8ae1f1842fc5","src/codegen/v64.rs":"e9e89caebfe63d10c0cbca61e4dfdba3b7e02ee0989170f80beed23237ddd950","src/codegen/vPtr.rs":"f0753b405cdc865bdf8e82c6505f299ea1f96136239ebbaf7f9ce93d310764b8","src/codegen/vSize.rs":"c89f5fdeb28ac4c8272ed1816fce03d9d95308cc32bb2533bd8b20cd5ac102ac","src/lib.rs":"dee6d850ba925493380d1f0c20615c21daa1e81c352798b6b42e47a4fbd17ce2","src/masks.rs":"70fc0abe4c2907ce2a491c574e1cfb9f3423385da2e1a923a48c9c13f8ba6ed8","src/sealed.rs":"ae7fdeaf5d84cd7710ed730ca72ca7eaba93df6cb0acb183e5c0a7327acf197f","src/testing.rs":"896669c08d8c801448a4d2fadc9d633eda0fbe879d229997e2a182e31278e469","src/testing/macros.rs":"403bbc5ecb7c786fe36156df302d0c07a8122408dbb15f7474d7682224ba1106","src/testing/utils.rs":"41912a92266dfe884647fc035e4242fd746100df8e839808ae0397af3759a3c8","src/v128.rs":"16cf9a8e7156b899ee9b9cd3f2dba9d13ec63289bea8c3ee9ae2e43ad9510288","src/v16.rs":"cb6465cf1e00bf530183af1819b9fe3d7eec978f8765d5e85d9b58a39a4b4045","src/v256.rs":"fe235017da18c7f3c361831c60e3173ad304d8ea1e95d64ebebc79da2d708511","src/v32.rs":"145d347855bac59b2de6508f9e594654e6c330423af9edc0e2ac8f4d1abdf45e","src/v512.rs":"f372f277f3e62eb5c945bb1c460333fdb17b6974fcc876633788ff53bded9599","src/v64.rs":"0b8079881b71575e3414be0b7f8f7eaba65281ba6732f2b2f61f73e95b6f48f7","src/vPtr.rs":"8b3e433d487180bb4304ff71245ecad90f0010f43e139a72027b672abe58facc","src/vSize.rs":"eda5aa020706cbf94d15bada41a0c2a35fc8f3f37cb7c2cd6f34d201399a495e","tests/endianness.rs":"2783d727e8ff8789211e03120634cd3ad9f8972fc484012681b5b63cf89408a7"},"package":null}
\ No newline at end of file
diff --git a/third_party/rust/packed_simd_2/Cargo.toml b/third_party/rust/packed_simd_2/Cargo.toml
deleted file mode 100644
--- a/third_party/rust/packed_simd_2/Cargo.toml
+++ /dev/null
@@ -1,42 +0,0 @@
-[package]
-name = "packed_simd_2"
-version = "0.3.8"
-description = "Portable Packed SIMD vectors"
-documentation = "https://docs.rs/crate/packed_simd/"
-homepage = "https://github.com/rust-lang/packed_simd"
-repository = "https://github.com/rust-lang/packed_simd"
-keywords = ["simd", "vector", "portability"]
-categories = ["hardware-support", "concurrency", "no-std", "data-structures"]
-license = "MIT OR Apache-2.0"
-build = "build.rs"
-edition = "2018"
-
-[badges]
-appveyor = { repository = "rust-lang/packed_simd" }
-travis-ci = { repository = "rust-lang/packed_simd" }
-codecov = { repository = "rust-lang/packed_simd" }
-is-it-maintained-issue-resolution = { repository = "rust-lang/packed_simd" }
-is-it-maintained-open-issues = { repository = "rust-lang/packed_simd" }
-maintenance = { status = "experimental" }
-
-[dependencies]
-cfg-if = "1.0.0"
-core_arch = { version = "0.1.5", optional = true }
-
-[features]
-default = []
-into_bits = []
-libcore_neon = []
-
-[dev-dependencies]
-paste = "^0.1.3"
-arrayvec = { version = "^0.5", default-features = false }
-
-[target.'cfg(target_arch = "x86_64")'.dependencies.sleef-sys]
-version = "0.1.2"
-optional = true
-
-[target.wasm32-unknown-unknown.dev-dependencies]
-# Keep in sync with the version on Dockerfile.
-wasm-bindgen = "=0.2.73"
-wasm-bindgen-test = "=0.3.23"
diff --git a/third_party/rust/packed_simd_2/ci/android-install-ndk.sh b/third_party/rust/packed_simd_2/ci/android-install-ndk.sh
deleted file mode 100644
--- a/third_party/rust/packed_simd_2/ci/android-install-ndk.sh
+++ /dev/null
@@ -1,37 +0,0 @@
-#!/usr/bin/env sh
-# Copyright 2016 The Rust Project Developers. See the COPYRIGHT
-# file at the top-level directory of this distribution and at
-# http://rust-lang.org/COPYRIGHT.
-#
-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or
-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license
-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your
-# option. This file may not be copied, modified, or distributed
-# except according to those terms.
-
-set -ex
-
-curl --retry 5 -O https://dl.google.com/android/repository/android-ndk-r15b-linux-x86_64.zip
-unzip -q android-ndk-r15b-linux-x86_64.zip
-
-case "$1" in
-    aarch64)
-        arch=arm64
-        ;;
-
-    i686)
-        arch=x86
-        ;;
-
-    *)
-        arch=$1
-        ;;
-esac;
-
-android-ndk-r15b/build/tools/make_standalone_toolchain.py \
-    --unified-headers \
-    --install-dir "/android/ndk-${1}" \
-    --arch "${arch}" \
-    --api 24
-
-rm -rf ./android-ndk-r15b-linux-x86_64.zip ./android-ndk-r15b
