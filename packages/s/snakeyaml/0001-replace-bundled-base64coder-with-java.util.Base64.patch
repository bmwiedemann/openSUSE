From 82e728f896dffcd88c7cb86e8d9cbebd1a04d29e Mon Sep 17 00:00:00 2001
From: Fabio Valentini <decathorpe@gmail.com>
Date: Tue, 10 Sep 2019 13:38:15 +0200
Subject: [PATCH] replace bundled base64coder with java.util.Base64

---
 pom.xml                                       |   4 +-
 .../constructor/SafeConstructor.java          |   4 +-
 .../external/biz/base64Coder/Base64Coder.java | 305 ------------------
 .../representer/SafeRepresenter.java          |   6 +-
 .../base64Coder/Base64CoderTest.java          |  73 -----
 .../issues/issue99/YamlBase64Test.java        |   6 +-
 6 files changed, 10 insertions(+), 388 deletions(-)
 delete mode 100644 src/main/java/org/yaml/snakeyaml/external/biz/base64Coder/Base64Coder.java
 delete mode 100644 src/test/java/biz/source_code/base64Coder/Base64CoderTest.java

diff --git a/pom.xml b/pom.xml
index 8112370..ae308c7 100644
--- a/pom.xml
+++ b/pom.xml
@@ -10,8 +10,8 @@
         <project.scm.id>bitbucket</project.scm.id>
         <release.repo.url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</release.repo.url>
         <snapshot.repo.url>https://oss.sonatype.org/content/repositories/snapshots/</snapshot.repo.url>
-        <maven.compiler.source>7</maven.compiler.source>
-        <maven.compiler.target>7</maven.compiler.target>
+        <maven.compiler.source>8</maven.compiler.source>
+        <maven.compiler.target>8</maven.compiler.target>
         <maven.javadoc.failOnError>false</maven.javadoc.failOnError>
         <spring.version>3.2.17.RELEASE</spring.version>
         <maven-bundle-plugin.version>3.5.0</maven-bundle-plugin.version>
diff --git a/src/main/java/org/yaml/snakeyaml/constructor/SafeConstructor.java b/src/main/java/org/yaml/snakeyaml/constructor/SafeConstructor.java
index bd022cc..217835d 100644
--- a/src/main/java/org/yaml/snakeyaml/constructor/SafeConstructor.java
+++ b/src/main/java/org/yaml/snakeyaml/constructor/SafeConstructor.java
@@ -17,6 +17,7 @@ package org.yaml.snakeyaml.constructor;
 
 import java.math.BigInteger;
 import java.util.ArrayList;
+import java.util.Base64;
 import java.util.Calendar;
 import java.util.HashMap;
 import java.util.Iterator;
@@ -30,7 +31,6 @@ import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
 import org.yaml.snakeyaml.error.YAMLException;
-import org.yaml.snakeyaml.external.biz.base64Coder.Base64Coder;
 import org.yaml.snakeyaml.nodes.MappingNode;
 import org.yaml.snakeyaml.nodes.Node;
 import org.yaml.snakeyaml.nodes.NodeId;
@@ -313,7 +313,7 @@ public class SafeConstructor extends BaseConstructor {
             // Ignore white spaces for base64 encoded scalar
             String noWhiteSpaces = constructScalar((ScalarNode) node).toString().replaceAll("\\s",
                     "");
-            byte[] decoded = Base64Coder.decode(noWhiteSpaces.toCharArray());
+            byte[] decoded = Base64.getDecoder().decode(noWhiteSpaces);
             return decoded;
         }
     }
diff --git a/src/main/java/org/yaml/snakeyaml/external/biz/base64Coder/Base64Coder.java b/src/main/java/org/yaml/snakeyaml/external/biz/base64Coder/Base64Coder.java
deleted file mode 100644
index 65923b6..0000000
--- a/src/main/java/org/yaml/snakeyaml/external/biz/base64Coder/Base64Coder.java
+++ /dev/null
@@ -1,305 +0,0 @@
-// Copyright 2003-2010 Christian d'Heureuse, Inventec Informatik AG, Zurich, Switzerland
-// www.source-code.biz, www.inventec.ch/chdh
-//
-// This module is multi-licensed and may be used under the terms
-// of any of the following licenses:
-//
-//  EPL, Eclipse Public License, V1.0 or later, http://www.eclipse.org/legal
-//  LGPL, GNU Lesser General Public License, V2.1 or later, http://www.gnu.org/licenses/lgpl.html
-//  GPL, GNU General Public License, V2 or later, http://www.gnu.org/licenses/gpl.html
-//  AL, Apache License, V2.0 or later, http://www.apache.org/licenses
-//  BSD, BSD License, http://www.opensource.org/licenses/bsd-license.php
-//
-// Please contact the author if you need another license.
-// This module is provided "as is", without warranties of any kind.
-
-package org.yaml.snakeyaml.external.biz.base64Coder;
-
-/**
- * A Base64 encoder/decoder.
- * 
- * <p>
- * This class is used to encode and decode data in Base64 format as described in
- * RFC 1521.
- * 
- * <p>
- * Project home page: <a
- * href="http://www.source-code.biz/base64coder/java/">www.
- * source-code.biz/base64coder/java</a><br>
- * Author: Christian d'Heureuse, Inventec Informatik AG, Zurich, Switzerland<br>
- * Multi-licensed: EPL / LGPL / GPL / AL / BSD.
- */
-public class Base64Coder {
-
-    // The line separator string of the operating system.
-    private static final String systemLineSeparator = System.getProperty("line.separator");
-
-    // Mapping table from 6-bit nibbles to Base64 characters.
-    private static char[] map1 = new char[64];
-    static {
-        int i = 0;
-        for (char c = 'A'; c <= 'Z'; c++)
-            map1[i++] = c;
-        for (char c = 'a'; c <= 'z'; c++)
-            map1[i++] = c;
-        for (char c = '0'; c <= '9'; c++)
-            map1[i++] = c;
-        map1[i++] = '+';
-        map1[i++] = '/';
-    }
-
-    // Mapping table from Base64 characters to 6-bit nibbles.
-    private static byte[] map2 = new byte[128];
-    static {
-        for (int i = 0; i < map2.length; i++)
-            map2[i] = -1;
-        for (int i = 0; i < 64; i++)
-            map2[map1[i]] = (byte) i;
-    }
-
-    /**
-     * Encodes a string into Base64 format. No blanks or line breaks are
-     * inserted.
-     * 
-     * @param s
-     *            A String to be encoded.
-     * @return A String containing the Base64 encoded data.
-     */
-    public static String encodeString(String s) {
-        return new String(encode(s.getBytes()));
-    }
-
-    /**
-     * Encodes a byte array into Base 64 format and breaks the output into lines
-     * of 76 characters. This method is compatible with
-     * <code>sun.misc.BASE64Encoder.encodeBuffer(byte[])</code>.
-     * 
-     * @param in
-     *            An array containing the data bytes to be encoded.
-     * @return A String containing the Base64 encoded data, broken into lines.
-     */
-    public static String encodeLines(byte[] in) {
-        return encodeLines(in, 0, in.length, 76, systemLineSeparator);
-    }
-
-    /**
-     * Encodes a byte array into Base 64 format and breaks the output into
-     * lines.
-     * 
-     * @param in
-     *            An array containing the data bytes to be encoded.
-     * @param iOff
-     *            Offset of the first byte in <code>in</code> to be processed.
-     * @param iLen
-     *            Number of bytes to be processed in <code>in</code>, starting
-     *            at <code>iOff</code>.
-     * @param lineLen
-     *            Line length for the output data. Should be a multiple of 4.
-     * @param lineSeparator
-     *            The line separator to be used to separate the output lines.
-     * @return A String containing the Base64 encoded data, broken into lines.
-     */
-    public static String encodeLines(byte[] in, int iOff, int iLen, int lineLen,
-            String lineSeparator) {
-        int blockLen = (lineLen * 3) / 4;
-        if (blockLen <= 0)
-            throw new IllegalArgumentException();
-        int lines = (iLen + blockLen - 1) / blockLen;
-        int bufLen = ((iLen + 2) / 3) * 4 + lines * lineSeparator.length();
-        StringBuilder buf = new StringBuilder(bufLen);
-        int ip = 0;
-        while (ip < iLen) {
-            int l = Math.min(iLen - ip, blockLen);
-            buf.append(encode(in, iOff + ip, l));
-            buf.append(lineSeparator);
-            ip += l;
-        }
-        return buf.toString();
-    }
-
-    /**
-     * Encodes a byte array into Base64 format. No blanks or line breaks are
-     * inserted in the output.
-     * 
-     * @param in
-     *            An array containing the data bytes to be encoded.
-     * @return A character array containing the Base64 encoded data.
-     */
-    public static char[] encode(byte[] in) {
-        return encode(in, 0, in.length);
-    }
-
-    /**
-     * Encodes a byte array into Base64 format. No blanks or line breaks are
-     * inserted in the output.
-     * 
-     * @param in
-     *            An array containing the data bytes to be encoded.
-     * @param iLen
-     *            Number of bytes to process in <code>in</code>.
-     * @return A character array containing the Base64 encoded data.
-     */
-    public static char[] encode(byte[] in, int iLen) {
-        return encode(in, 0, iLen);
-    }
-
-    /**
-     * Encodes a byte array into Base64 format. No blanks or line breaks are
-     * inserted in the output.
-     * 
-     * @param in
-     *            An array containing the data bytes to be encoded.
-     * @param iOff
-     *            Offset of the first byte in <code>in</code> to be processed.
-     * @param iLen
-     *            Number of bytes to process in <code>in</code>, starting at
-     *            <code>iOff</code>.
-     * @return A character array containing the Base64 encoded data.
-     */
-    public static char[] encode(byte[] in, int iOff, int iLen) {
-        int oDataLen = (iLen * 4 + 2) / 3; // output length without padding
-        int oLen = ((iLen + 2) / 3) * 4; // output length including padding
-        char[] out = new char[oLen];
-        int ip = iOff;
-        int iEnd = iOff + iLen;
-        int op = 0;
-        while (ip < iEnd) {
-            int i0 = in[ip++] & 0xff;
-            int i1 = ip < iEnd ? in[ip++] & 0xff : 0;
-            int i2 = ip < iEnd ? in[ip++] & 0xff : 0;
-            int o0 = i0 >>> 2;
-            int o1 = ((i0 & 3) << 4) | (i1 >>> 4);
-            int o2 = ((i1 & 0xf) << 2) | (i2 >>> 6);
-            int o3 = i2 & 0x3F;
-            out[op++] = map1[o0];
-            out[op++] = map1[o1];
-            out[op] = op < oDataLen ? map1[o2] : '=';
-            op++;
-            out[op] = op < oDataLen ? map1[o3] : '=';
-            op++;
-        }
-        return out;
-    }
-
-    /**
-     * Decodes a string from Base64 format. No blanks or line breaks are allowed
-     * within the Base64 encoded input data.
-     * 
-     * @param s
-     *            A Base64 String to be decoded.
-     * @return A String containing the decoded data.
-     * @throws IllegalArgumentException
-     *             If the input is not valid Base64 encoded data.
-     */
-    public static String decodeString(String s) {
-        return new String(decode(s));
-    }
-
-    /**
-     * Decodes a byte array from Base64 format and ignores line separators, tabs
-     * and blanks. CR, LF, Tab and Space characters are ignored in the input
-     * data. This method is compatible with
-     * <code>sun.misc.BASE64Decoder.decodeBuffer(String)</code>.
-     * 
-     * @param s
-     *            A Base64 String to be decoded.
-     * @return An array containing the decoded data bytes.
-     * @throws IllegalArgumentException
-     *             If the input is not valid Base64 encoded data.
-     */
-    public static byte[] decodeLines(String s) {
-        char[] buf = new char[s.length()];
-        int p = 0;
-        for (int ip = 0; ip < s.length(); ip++) {
-            char c = s.charAt(ip);
-            if (c != ' ' && c != '\r' && c != '\n' && c != '\t')
-                buf[p++] = c;
-        }
-        return decode(buf, 0, p);
-    }
-
-    /**
-     * Decodes a byte array from Base64 format. No blanks or line breaks are
-     * allowed within the Base64 encoded input data.
-     * 
-     * @param s
-     *            A Base64 String to be decoded.
-     * @return An array containing the decoded data bytes.
-     * @throws IllegalArgumentException
-     *             If the input is not valid Base64 encoded data.
-     */
-    public static byte[] decode(String s) {
-        return decode(s.toCharArray());
-    }
-
-    /**
-     * Decodes a byte array from Base64 format. No blanks or line breaks are
-     * allowed within the Base64 encoded input data.
-     * 
-     * @param in
-     *            A character array containing the Base64 encoded data.
-     * @return An array containing the decoded data bytes.
-     * @throws IllegalArgumentException
-     *             If the input is not valid Base64 encoded data.
-     */
-    public static byte[] decode(char[] in) {
-        return decode(in, 0, in.length);
-    }
-
-    /**
-     * Decodes a byte array from Base64 format. No blanks or line breaks are
-     * allowed within the Base64 encoded input data.
-     * 
-     * @param in
-     *            A character array containing the Base64 encoded data.
-     * @param iOff
-     *            Offset of the first character in <code>in</code> to be
-     *            processed.
-     * @param iLen
-     *            Number of characters to process in <code>in</code>, starting
-     *            at <code>iOff</code>.
-     * @return An array containing the decoded data bytes.
-     * @throws IllegalArgumentException
-     *             If the input is not valid Base64 encoded data.
-     */
-    public static byte[] decode(char[] in, int iOff, int iLen) {
-        if (iLen % 4 != 0)
-            throw new IllegalArgumentException(
-                    "Length of Base64 encoded input string is not a multiple of 4.");
-        while (iLen > 0 && in[iOff + iLen - 1] == '=')
-            iLen--;
-        int oLen = (iLen * 3) / 4;
-        byte[] out = new byte[oLen];
-        int ip = iOff;
-        int iEnd = iOff + iLen;
-        int op = 0;
-        while (ip < iEnd) {
-            int i0 = in[ip++];
-            int i1 = in[ip++];
-            int i2 = ip < iEnd ? in[ip++] : 'A';
-            int i3 = ip < iEnd ? in[ip++] : 'A';
-            if (i0 > 127 || i1 > 127 || i2 > 127 || i3 > 127)
-                throw new IllegalArgumentException("Illegal character in Base64 encoded data.");
-            int b0 = map2[i0];
-            int b1 = map2[i1];
-            int b2 = map2[i2];
-            int b3 = map2[i3];
-            if (b0 < 0 || b1 < 0 || b2 < 0 || b3 < 0)
-                throw new IllegalArgumentException("Illegal character in Base64 encoded data.");
-            int o0 = (b0 << 2) | (b1 >>> 4);
-            int o1 = ((b1 & 0xf) << 4) | (b2 >>> 2);
-            int o2 = ((b2 & 3) << 6) | b3;
-            out[op++] = (byte) o0;
-            if (op < oLen)
-                out[op++] = (byte) o1;
-            if (op < oLen)
-                out[op++] = (byte) o2;
-        }
-        return out;
-    }
-
-    // Dummy constructor.
-    private Base64Coder() {
-    }
-
-} // end class Base64Coder
diff --git a/src/main/java/org/yaml/snakeyaml/representer/SafeRepresenter.java b/src/main/java/org/yaml/snakeyaml/representer/SafeRepresenter.java
index 2cc15d9..e5ac480 100644
--- a/src/main/java/org/yaml/snakeyaml/representer/SafeRepresenter.java
+++ b/src/main/java/org/yaml/snakeyaml/representer/SafeRepresenter.java
@@ -19,6 +19,7 @@ import java.io.UnsupportedEncodingException;
 import java.math.BigInteger;
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Base64;
 import java.util.Calendar;
 import java.util.Date;
 import java.util.HashMap;
@@ -33,7 +34,6 @@ import java.util.regex.Pattern;
 
 import org.yaml.snakeyaml.DumperOptions;
 import org.yaml.snakeyaml.error.YAMLException;
-import org.yaml.snakeyaml.external.biz.base64Coder.Base64Coder;
 import org.yaml.snakeyaml.nodes.Node;
 import org.yaml.snakeyaml.nodes.Tag;
 import org.yaml.snakeyaml.reader.StreamReader;
@@ -131,7 +131,7 @@ class SafeRepresenter extends BaseRepresenter {
                     if (!checkValue.equals(value)) {
                         throw new YAMLException("invalid string value has occurred");
                     }
-                    binary = Base64Coder.encode(bytes);
+                    binary = Base64.getEncoder().encodeToString(bytes).toCharArray();
                 } catch (UnsupportedEncodingException e) {
                     throw new YAMLException(e);
                 }
@@ -433,7 +433,7 @@ class SafeRepresenter extends BaseRepresenter {
 
     protected class RepresentByteArray implements Represent {
         public Node representData(Object data) {
-            char[] binary = Base64Coder.encode((byte[]) data);
+            char[] binary = Base64.getEncoder().encodeToString((byte[]) data).toCharArray();
             return representScalar(Tag.BINARY, String.valueOf(binary), DumperOptions.ScalarStyle.LITERAL);
         }
     }
diff --git a/src/test/java/biz/source_code/base64Coder/Base64CoderTest.java b/src/test/java/biz/source_code/base64Coder/Base64CoderTest.java
deleted file mode 100644
index 60f6d84..0000000
--- a/src/test/java/biz/source_code/base64Coder/Base64CoderTest.java
+++ /dev/null
@@ -1,73 +0,0 @@
-/**
- * Copyright (c) 2008, http://www.snakeyaml.org
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package biz.source_code.base64Coder;
-
-import java.io.UnsupportedEncodingException;
-
-import junit.framework.TestCase;
-
-import org.yaml.snakeyaml.external.biz.base64Coder.Base64Coder;
-
-public class Base64CoderTest extends TestCase {
-
-    public void testDecode() throws UnsupportedEncodingException {
-        check("Aladdin:open sesame", "QWxhZGRpbjpvcGVuIHNlc2FtZQ==");
-        check("a", "YQ==");
-        check("aa", "YWE=");
-        check("a=", "YT0=");
-        check("", "");
-    }
-
-    public void testFailure1() throws UnsupportedEncodingException {
-        try {
-            Base64Coder.decode("YQ=".toCharArray());
-            fail();
-        } catch (Exception e) {
-            assertEquals("Length of Base64 encoded input string is not a multiple of 4.",
-                    e.getMessage());
-        }
-    }
-
-    public void testFailure2() throws UnsupportedEncodingException {
-        checkInvalid("\tWE=");
-        checkInvalid("Y\tE=");
-        checkInvalid("YW\t=");
-        checkInvalid("YWE\t");
-        //
-        checkInvalid("©WE=");
-        checkInvalid("Y©E=");
-        checkInvalid("YW©=");
-        checkInvalid("YWE©");
-    }
-
-    private void checkInvalid(String encoded) {
-        try {
-            Base64Coder.decode(encoded.toCharArray());
-            fail("Illegal chanracter.");
-        } catch (Exception e) {
-            assertEquals("Illegal character in Base64 encoded data.", e.getMessage());
-        }
-    }
-
-    private void check(String text, String encoded) throws UnsupportedEncodingException {
-        char[] s1 = Base64Coder.encode(text.getBytes("UTF-8"));
-        String t1 = new String(s1);
-        assertEquals(encoded, t1);
-        byte[] s2 = Base64Coder.decode(encoded.toCharArray());
-        String t2 = new String(s2, "UTF-8");
-        assertEquals(text, t2);
-    }
-}
diff --git a/src/test/java/org/yaml/snakeyaml/issues/issue99/YamlBase64Test.java b/src/test/java/org/yaml/snakeyaml/issues/issue99/YamlBase64Test.java
index e425f25..a0c4f6a 100644
--- a/src/test/java/org/yaml/snakeyaml/issues/issue99/YamlBase64Test.java
+++ b/src/test/java/org/yaml/snakeyaml/issues/issue99/YamlBase64Test.java
@@ -18,6 +18,7 @@ package org.yaml.snakeyaml.issues.issue99;
 import java.io.BufferedInputStream;
 import java.io.IOException;
 import java.io.InputStream;
+import java.util.Base64;
 import java.util.Map;
 
 import junit.framework.TestCase;
@@ -27,7 +28,6 @@ import org.yaml.snakeyaml.Yaml;
 import org.yaml.snakeyaml.YamlDocument;
 import org.yaml.snakeyaml.constructor.AbstractConstruct;
 import org.yaml.snakeyaml.constructor.Constructor;
-import org.yaml.snakeyaml.external.biz.base64Coder.Base64Coder;
 import org.yaml.snakeyaml.nodes.Node;
 import org.yaml.snakeyaml.nodes.ScalarNode;
 import org.yaml.snakeyaml.nodes.Tag;
@@ -50,7 +50,7 @@ public class YamlBase64Test extends TestCase {
             all = all + lines[i].trim();
         }
         // System.out.println(all);
-        byte[] decoded = Base64Coder.decode(all.toCharArray());
+        byte[] decoded = Base64.getDecoder().decode(all);
         assertEquals(3737, decoded.length);
         checkBytes(decoded);
     }
@@ -122,7 +122,7 @@ public class YamlBase64Test extends TestCase {
             public Object construct(Node node) {
                 String contentWithNewLines = constructScalar((ScalarNode) node).toString();
                 String noNewLines = contentWithNewLines.replaceAll("\\s", "");
-                byte[] decoded = Base64Coder.decode(noNewLines.toCharArray());
+                byte[] decoded = Base64.getDecoder().decode(noNewLines);
                 return decoded;
             }
         }
-- 
2.21.0

