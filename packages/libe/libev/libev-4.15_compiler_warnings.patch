Index: ev.c
===================================================================
--- a/ev.c
+++ b/ev.c
@@ -577,7 +577,7 @@ struct signalfd_siginfo
  * This value is good at least till the year 4000.
  */
 #define MIN_INTERVAL  0.0001220703125 /* 1/2**13, good till 4000 */
-/*#define MIN_INTERVAL  0.00000095367431640625 /* 1/2**20, good till 2200 */
+/*#define MIN_INTERVAL  0.00000095367431640625 *//* 1/2**20, good till 2200 */
 
 #define MIN_TIMEJUMP   1. /* minimum timejump that gets detected (if monotonic clock available) */
 #define MAX_BLOCKTIME  59.743 /* never wait longer than this time (to detect time jumps) */
@@ -4351,7 +4351,7 @@ ev_io_start (EV_P_ ev_io *w) EV_NOEXCEPT
   /* common bug, apparently */
   assert (("libev: ev_io_start called with corrupted watcher", ((WL)w)->next != (WL)w));
 
-  fd_change (EV_A_ fd, w->events & EV__IOFDSET | EV_ANFD_REIFY);
+  fd_change (EV_A_ fd, (w->events & EV__IOFDSET) | EV_ANFD_REIFY);
   w->events &= ~EV__IOFDSET;
 
   EV_FREQUENT_CHECK;
@@ -5616,8 +5616,8 @@ ev_walk (EV_P_ int types, void (*cb)(EV_
           wl = wn;
         }
 #endif
-/* EV_STAT     0x00001000 /* stat data changed */
-/* EV_EMBED    0x00010000 /* embedded event loop needs sweep */
+/* EV_STAT     0x00001000 *//* stat data changed */
+/* EV_EMBED    0x00010000 *//* embedded event loop needs sweep */
 }
 #endif
 
Index: ev_iouring.c
===================================================================
--- a/ev_iouring.c
+++ b/ev_iouring.c
@@ -295,7 +295,7 @@ iouring_sqe_submit (EV_P_ struct io_urin
   EV_SQ_ARRAY [idx] = idx;
   ECB_MEMORY_FENCE_RELEASE;
   ++EV_SQ_VAR (tail);
-  /*ECB_MEMORY_FENCE_RELEASE; /* for the time being we assume this is not needed */
+  /*ECB_MEMORY_FENCE_RELEASE; *//* for the time being we assume this is not needed */
   ++iouring_to_submit;
 }
 
