--- django-oauth-toolkit-1.0.0/tests/test_password.py.orig	2019-03-05 14:38:47.331491671 +0700
+++ django-oauth-toolkit-1.0.0/tests/test_password.py	2019-03-05 14:39:00.659643246 +0700
@@ -77,7 +77,7 @@
         auth_headers = get_basic_auth_header(self.application.client_id, self.application.client_secret)
 
         response = self.client.post(reverse("oauth2_provider:token"), data=token_request_data, **auth_headers)
-        self.assertEqual(response.status_code, 401)
+        self.assertEqual(response.status_code, 400)
 
 
 class TestPasswordProtectedResource(BaseTest):
--- django-oauth-toolkit-1.1.3/tests/test_authorization_code.py.orig	2019-03-05 14:33:42.523999973 +0700
+++ django-oauth-toolkit-1.1.3/tests/test_authorization_code.py	2019-03-05 14:41:24.569274168 +0700
@@ -601,7 +601,7 @@
 
         # check refresh token cannot be used twice
         response = self.client.post(reverse("oauth2_provider:token"), data=token_request_data, **auth_headers)
-        self.assertEqual(response.status_code, 401)
+        self.assertEqual(response.status_code, 400)
         content = json.loads(response.content.decode("utf-8"))
         self.assertTrue("invalid_grant" in content.values())
 
@@ -737,7 +737,7 @@
             "scope": "read write nuke",
         }
         response = self.client.post(reverse("oauth2_provider:token"), data=token_request_data, **auth_headers)
-        self.assertEqual(response.status_code, 401)
+        self.assertEqual(response.status_code, 400)
 
     def test_refresh_fail_repeating_requests(self):
         """
@@ -765,7 +765,7 @@
         response = self.client.post(reverse("oauth2_provider:token"), data=token_request_data, **auth_headers)
         self.assertEqual(response.status_code, 200)
         response = self.client.post(reverse("oauth2_provider:token"), data=token_request_data, **auth_headers)
-        self.assertEqual(response.status_code, 401)
+        self.assertEqual(response.status_code, 400)
 
     def test_refresh_repeating_requests(self):
         """
@@ -804,7 +804,7 @@
         rt.save()
 
         response = self.client.post(reverse("oauth2_provider:token"), data=token_request_data, **auth_headers)
-        self.assertEqual(response.status_code, 401)
+        self.assertEqual(response.status_code, 400)
         oauth2_settings.REFRESH_TOKEN_GRACE_PERIOD_SECONDS = 0
 
     def test_refresh_repeating_requests_non_rotating_tokens(self):
@@ -853,7 +853,7 @@
         auth_headers = get_basic_auth_header(self.application.client_id, self.application.client_secret)
 
         response = self.client.post(reverse("oauth2_provider:token"), data=token_request_data, **auth_headers)
-        self.assertEqual(response.status_code, 401)
+        self.assertEqual(response.status_code, 400)
 
     def test_basic_auth_bad_granttype(self):
         """
@@ -889,7 +889,7 @@
         auth_headers = get_basic_auth_header(self.application.client_id, self.application.client_secret)
 
         response = self.client.post(reverse("oauth2_provider:token"), data=token_request_data, **auth_headers)
-        self.assertEqual(response.status_code, 401)
+        self.assertEqual(response.status_code, 400)
 
     def test_basic_auth_bad_secret(self):
         """
