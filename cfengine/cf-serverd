#!/bin/bash
#
# Copyright (c) 2011 SUSE LINUX Products GmbH, Nuernberg, Germany.
# All rights reserved.
#
# Author: Christian Wittmer, Scorpio IT, Deidesheim, Germany
#
# /etc/init.d/cf-serverd
#   and its symbolic link
# /usr/sbin/rccf-serverd
#
# LSB compatible service control script; see http://www.linuxbase.org/spec/
# Please send feedback to http://www.suse.de/feedback/
# 
# Note: This template uses functions rc_XXX defined in /etc/rc.status on
# UnitedLinux/SUSE/Novell based Linux distributions. However, it will work
# on other distributions as well, by using the LSB (Linux Standard Base) 
# or RH functions or by open coding the needed functions.
# Read http://www.tldp.org/HOWTO/HighQuality-Apps-HOWTO/ if you prefer not 
# to use this template.
#
# chkconfig: 345 60 40
# description: cfengine's server agent
# 
### BEGIN INIT INFO
# Provides:          cf-serverd
# Required-Start:    $local_fs $remote_fs
# Should-Start:      $time smtp
# Required-Stop:     $local_fs $remote_fs
# Should-Stop:       $time smtp
# Default-Start:     3 5
# Default-Stop:      0 1 2 6
# Short-Description: cfengine's server agent
# Description:       Start cfengine's execution agent
#       The server daemon provides two services: it acts as a
#       file server for remote file copying and it allows an
#       authorized cf-runagent to start start a cf-agent process
#       and set certain additional classes with role-based access
#       control.
### END INIT INFO
# 

# Note on runlevels:
# 0 - halt/poweroff 			6 - reboot
# 1 - single user			2 - multiuser without network exported
# 3 - multiuser w/ network (text mode)  5 - multiuser w/ network and X11 (xdm)
# 
# Note on script names:
# http://www.linuxbase.org/spec/refspecs/LSB_1.3.0/gLSB/gLSB/scrptnames.html
# A registry has been set up to manage the init script namespace.
# http://www.lanana.org/
# Please use the names already registered or register one or use a
# vendor prefix.


# Check for missing binaries (stale symlinks should not happen)
# Note: Special treatment of stop for LSB conformance
CF_SRV_BIN=/usr/sbin/cf-serverd
test -x $CF_SRV_BIN || { echo "$CF_SRV_BIN not installed"; 
	if [ "$1" = "stop" ]; then exit 0;
	else exit 5; fi; }

## Check for existence of needed config file and read it
#FOO_CONFIG=/etc/sysconfig/FOO
#test -r $FOO_CONFIG || { echo "$FOO_CONFIG not existing";
#	if [ "$1" = "stop" ]; then exit 0;
#	else exit 6; fi; }

## Read config	
#. $FOO_CONFIG

## Check for promises file
CF_PROMISES=@workdir@/inputs/promises.cf
test -r $CF_PROMISES || { echo "$CF_PROMISES not existing";
	if [ "$1" = "stop" ]; then exit 0;
	else exit 6; fi; }

## Check for failsafe file
CF_FAILSAFE=@workdir@/inputs/failsafe.cf
test -r $CF_FAILSAFE || { echo "$CF_FAILSAFE not existing";
	if [ "$1" = "stop" ]; then exit 0;
	else exit 6; fi; }

# some VARS
CF_PIDFILE="/var/run/cf-serverd.pid"
SVC_NAME="cfengine's server agent"

# Source LSB init functions
# providing start_daemon, killproc, pidofproc, 
# log_success_msg, log_failure_msg and log_warning_msg.
# This is currently not used by UnitedLinux based distributions and
# not needed for init scripts for UnitedLinux only. If it is used,
# the functions from rc.status should not be sourced or used.
#. /lib/lsb/init-functions

# Shell functions sourced from /etc/rc.status:
#      rc_check         check and set local and overall rc status
#      rc_status        check and set local and overall rc status
#      rc_status -v     be verbose in local rc status and clear it afterwards
#      rc_status -v -r  ditto and clear both the local and overall rc status
#      rc_status -s     display "skipped" and exit with status 3
#      rc_status -u     display "unused" and exit with status 3
#      rc_failed        set local and overall rc status to failed
#      rc_failed <num>  set local and overall rc status to <num>
#      rc_reset         clear both the local and overall rc status
#      rc_exit          exit appropriate to overall rc status
#      rc_active        checks whether a service is activated by symlinks

# Use the SUSE rc_ init script functions;
# emulate them on LSB, RH and other systems

# Default: Assume sysvinit binaries exist
start_daemon() { /sbin/start_daemon ${1+"$@"}; }
killproc()     { /sbin/killproc     ${1+"$@"}; }
pidofproc()    { /sbin/pidofproc    ${1+"$@"}; }
checkproc()    { /sbin/checkproc    ${1+"$@"}; }
if test -e /etc/rc.status; then
    # SUSE rc script library
    . /etc/rc.status
else
    export LC_ALL=POSIX
    _cmd=$1
    declare -a _SMSG
    if test "${_cmd}" = "status"; then
	_SMSG=(running dead dead unused unknown reserved)
	_RC_UNUSED=3
    else
	_SMSG=(done failed failed missed failed skipped unused failed failed reserved)
	_RC_UNUSED=6
    fi
    if test -e /lib/lsb/init-functions; then
	# LSB    
    	. /lib/lsb/init-functions
	echo_rc()
	{
	    if test ${_RC_RV} = 0; then
		log_success_msg "  [${_SMSG[${_RC_RV}]}] "
	    else
		log_failure_msg "  [${_SMSG[${_RC_RV}]}] "
	    fi
	}
	# TODO: Add checking for lockfiles
	# checkproc() { return pidofproc ${1+"$@"} >/dev/null 2>&1; }
	checkproc() { return $( pidofproc ${1+"$@"} >/dev/null 2>&1; echo $?; ); }
    elif test -e /etc/init.d/functions; then
	# RHAT
	. /etc/init.d/functions
	echo_rc()
	{
	    #echo -n "  [${_SMSG[${_RC_RV}]}] "
	    if test ${_RC_RV} = 0; then
		success "  [${_SMSG[${_RC_RV}]}] "
	    else
		failure "  [${_SMSG[${_RC_RV}]}] "
	    fi
	}
	checkproc() { return $( status ${1+"$@"}; echo $?; ); }
	start_daemon() { return $( daemon ${1+"$@"}; echo $?; ); }
    else
	# emulate it
	echo_rc() { echo "  [${_SMSG[${_RC_RV}]}] "; }
    fi
    rc_reset() { _RC_RV=0; }
    rc_failed()
    {
	if test -z "$1"; then 
	    _RC_RV=1;
	elif test "$1" != "0"; then 
	    _RC_RV=$1; 
    	fi
	return ${_RC_RV}
    }
    rc_check()
    {
	return rc_failed $?
    }	
    rc_status()
    {
	rc_failed $?
	if test "$1" = "-r"; then _RC_RV=0; shift; fi
	if test "$1" = "-s"; then rc_failed 5; echo_rc; rc_failed 3; shift; fi
	if test "$1" = "-u"; then rc_failed ${_RC_UNUSED}; echo_rc; rc_failed 3; shift; fi
	if test "$1" = "-v"; then echo_rc; shift; fi
	if test "$1" = "-r"; then _RC_RV=0; shift; fi
	return ${_RC_RV}
    }
    rc_exit() { exit ${_RC_RV}; }
    rc_active() 
    {
	if test -z "$RUNLEVEL"; then read RUNLEVEL REST < <(/sbin/runlevel); fi
	if test -e /etc/init.d/S[0-9][0-9]${1}; then return 0; fi
	return 1
    }
fi

# Reset status of this service
rc_reset

# Return values acc. to LSB for all commands but status:
# 0	  - success
# 1       - generic or unspecified error
# 2       - invalid or excess argument(s)
# 3       - unimplemented feature (e.g. "reload")
# 4       - user had insufficient privileges
# 5       - program is not installed
# 6       - program is not configured
# 7       - program is not running
# 8--199  - reserved (8--99 LSB, 100--149 distrib, 150--199 appl)
# 
# Note that starting an already running service, stopping
# or restarting a not-running service as well as the restart
# with force-reload (in case signaling is not supported) are
# considered a success.

case "$1" in
    start)
	echo -n "Starting $SVC_NAME "
	## Start daemon with startproc(8). If this fails
	## the return value is set appropriately by startproc.
	start_daemon $CF_SRV_BIN
	#start_daemon -p $CF_PIDFILE $CF_SRV_BIN

	# Remember status and be verbose
	rc_status -v

	# update PIDFILE
	echo $(pidofproc $CF_SRV_BIN) > $CF_PIDFILE
	;;
    stop)
	echo -n "Shutting down $SVC_NAME "
	## Stop daemon with killproc(8) and if this fails
	## killproc sets the return value according to LSB.
	### Usage on RH: killproc [-p pidfile] [ -d delay] {program} [-signal]"
	killproc $CF_SRV_BIN -TERM
	#killproc -p $CF_PIDFILE $CF_SRV_BIN -TERM

	# Remember status and be verbose
	rc_status -v

	# remove PIDFILE
	if [ -f $CF_PIDFILE ]; then
	  rm -f $CF_PIDFILE
	fi
	;;
    try-restart|condrestart)
	## Do a restart only if the service was active before.
	## Note: try-restart is now part of LSB (as of 1.9).
	## RH has a similar command named condrestart.
	if test "$1" = "condrestart"; then
		echo "${attn} Use try-restart ${done}(LSB)${attn} rather than condrestart ${warn}(RH)${norm}"
	fi
	$0 status
	if test $? = 0; then
		$0 restart
	else
		rc_reset	# Not running is not a failure.
	fi
	# Remember status and be quiet
	rc_status
	;;
    restart)
	## Stop the service and regardless of whether it was
	## running or not, start it again.
	$0 stop
	$0 start

	# Remember status and be quiet
	rc_status
	;;
    force-reload)
	## Signal the daemon to reload its config. Most daemons
	## do this on signal 1 (SIGHUP).
	## If it does not support it, restart the service if it
	## is running.

	#echo -n "Reload service $SVC_NAME "
	## if it supports it:
	#killproc -HUP $CF_SRV_BIN
	#touch /var/run/FOO.pid
	#rc_status -v

	## Otherwise:
	$0 try-restart
	rc_status
	;;
    reload)
	## Like force-reload, but if daemon does not support
	## signaling, do nothing (!)

	# If it supports signaling:
	#echo -n "Reload service $SVC_NAME "
	#killproc -HUP $CF_SRV_BIN
	#touch /var/run/FOO.pid
	#rc_status -v
	
	## Otherwise if it does not support reload:
	rc_failed 3
	rc_status -v
	;;
    status)
	echo -n "Checking for service $SVC_NAME "
	## Check status with checkproc(8), if process is running
	## checkproc will return with exit status 0.

	# Return value is slightly different for the status command:
	# 0 - service up and running
	# 1 - service dead, but /var/run/  pid  file exists
	# 2 - service dead, but /var/lock/ lock file exists
	# 3 - service not running (unused)
	# 4 - service status unknown :-(
	# 5--199 reserved (5--99 LSB, 100--149 distro, 150--199 appl.)
	
	# NOTE: checkproc returns LSB compliant status values.
	checkproc $CF_SRV_BIN
	#checkproc -p $CF_PIDFILE $CF_SRV_BIN
	# NOTE: rc_status knows that we called this init script with
	# "status" option and adapts its messages accordingly.
	rc_status -v
	;;
    *)
	echo "Usage: $0 {start|stop|status|try-restart|restart|force-reload|reload}"
	exit 1
	;;
esac
rc_exit
