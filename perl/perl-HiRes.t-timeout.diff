--- ./dist/Time-HiRes/t/alarm.t.orig	2017-04-19 13:37:05.000000000 +0000
+++ ./dist/Time-HiRes/t/alarm.t	2017-08-30 12:15:18.729183834 +0000
@@ -8,7 +8,7 @@ BEGIN { require_ok "Time::HiRes"; }
 
 use Config;
 
-my $limit = 0.25; # 25% is acceptable slosh for testing timers
+my $limit = 0.60; # 25% is acceptable slosh for testing timers
 
 my $xdefine = ''; 
 if (open(XDEFINE, "<", "xdefine")) {
--- ./dist/Time-HiRes/t/clock.t.orig	2017-04-19 13:37:05.000000000 +0000
+++ ./dist/Time-HiRes/t/clock.t	2017-08-30 12:15:18.729183834 +0000
@@ -29,7 +29,7 @@ printf("# have_clock           = %d\n",
 # completes fine with (say) 30% slosh, and fail otherwise.  If you do that,
 # consider changing over to test.pl at the same time.
 # --A.D., Nov 27, 2001
-my $limit = 0.25; # 25% is acceptable slosh for testing timers
+my $limit = 0.60; # 25% is acceptable slosh for testing timers
 
 SKIP: {
     skip "no clock_gettime", 1
--- ./dist/Time-HiRes/t/itimer.t.orig	2017-04-19 13:37:05.000000000 +0000
+++ ./dist/Time-HiRes/t/itimer.t	2017-08-30 12:15:18.729183834 +0000
@@ -29,7 +29,7 @@ use Test::More tests => 2;
 BEGIN { push @INC, '.' }
 use t::Watchdog;
 
-my $limit = 0.25; # 25% is acceptable slosh for testing timers
+my $limit = 0.60; # 25% is acceptable slosh for testing timers
 
 my $i = 3;
 my $r = [Time::HiRes::gettimeofday()];
--- ./dist/Time-HiRes/t/usleep.t.orig	2017-04-19 13:37:05.000000000 +0000
+++ ./dist/Time-HiRes/t/usleep.t	2017-08-30 12:15:18.730183834 +0000
@@ -16,7 +16,7 @@ eval { Time::HiRes::usleep(-2) };
 like $@, qr/::usleep\(-2\): negative time not invented yet/,
 	"negative time error";
 
-my $limit = 0.25; # 25% is acceptable slosh for testing timers
+my $limit = 0.60; # 25% is acceptable slosh for testing timers
 
 my $one = CORE::time;
 Time::HiRes::usleep(10_000);
